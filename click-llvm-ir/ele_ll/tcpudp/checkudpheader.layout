
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f6e2c8 prev 0x561c54f65a68 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54f6e3c0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x561c54f6e450 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x561c54f6e4c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x561c54f6e588 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x561c54f6e650 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x561c54f6e7c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x561c54f6e700 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x561c54f6e870 <col:24>
| `-OptimizeNoneAttr 0x561c54f6e8c8 <col:34>
|-CXXMethodDecl 0x561c54f6e910 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x561c54f6ebc8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x561c54f6e9c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561c54f6ea38 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x561c54f6eab8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x561c54f6ec80 <line:229:7, col:14> col:7 private
|-FieldDecl 0x561c54f6ecb8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x561c54f6ed20 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x561c54f6eda8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x561c54f6f0c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x561c54f6ee60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561c54f6eed8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x561c54f6ef50 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x561c54f6efd0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x561c54f6f1e0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x561c54f76b58 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561c54f76b58
| `-ParmVarDecl 0x561c54f76c68 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x561c54f76d08 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561c54f76d08
| `-ParmVarDecl 0x561c54f76e18 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x561c5505c790 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f612e0 prev 0x561c54f61060 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c54f613d8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x561c54f61468 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x561c54f614c8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x561c54f615b8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x561c54f616b8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x561c54f61888 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x561c54f61738 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x561c54f617b0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x561c54f61a18 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x561c54f61950 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x561c54f61ac0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x561c54f61bf8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x561c54f61b30 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x561c54f61d98 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x561c54f61cd8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x561c54f61f38 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x561c54f61e78 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x561c54f61fe0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x561c54f620e0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x561c54f621c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f620c0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x561c54f620a0 <col:26> 'int' 1
| `-EnumConstantDecl 0x561c54f62170 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x561c54f621d8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f62150 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x561c54f62130 <col:44> 'int' 2
|-CXXMethodDecl 0x561c54f62320 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x561c54f62208 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x561c54f62288 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x561c54f62478 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x561c54f623e8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x561c54f626b8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x561c54f62538 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x561c54f625b0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x561c54f62768 <col:20>
| `-OptimizeNoneAttr 0x561c54f627c0 <col:30>
|-CXXMethodDecl 0x561c54f628c8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x561c54f62800 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x561c54f62970 <col:20>
| `-OptimizeNoneAttr 0x561c54f629c8 <col:30>
|-CXXMethodDecl 0x561c54f62a18 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x561c54f62ae0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x561c54f62bf8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x561c54f62c80 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x561c54f62d08 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x561c54f62d90 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x561c54f62e18 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x561c54f62ea8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x561c54f62f68 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x561c54f62ff0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x561c54f63078 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x561c54f63100 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x561c54f63188 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x561c54f63210 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x561c54f632a0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x561c54f63360 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x561c54f633f0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x561c54f63540 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x561c54f634a8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x561c54f636d0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x561c54f63600 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x561c54f63980 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x561c54f63788 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x561c54f63808 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x561c54f63888 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x561c54f63a38 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x561c54f63b40 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561c54f63dd0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f63b20 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x561c54f63b00 <col:33> 'int' 0
| |-EnumConstantDecl 0x561c54f63bd0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561c54f63de8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f63bb0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x561c54f63b90 <col:32> 'int' 20
| |-EnumConstantDecl 0x561c54f63c60 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561c54f63e00 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f63c40 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x561c54f63c20 <col:38> 'int' 90
| |-EnumConstantDecl 0x561c54f63cf0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561c54f63e18 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f63cd0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x561c54f63cb0 <col:35> 'int' 100
| `-EnumConstantDecl 0x561c54f63d80 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x561c54f63e30 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f63d60 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x561c54f63d40 <col:32> 'int' 2000
|-CXXMethodDecl 0x561c54f63e70 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x561c54f642b0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561c54f64120 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x561c54f64198 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f64380 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x561c54f64500 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x561c54f64430 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f64708 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561c54f645b8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x561c54f64630 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f64808 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x561c54f648a8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x561c54f64970 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64a00 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x561c54f64c30 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f649e0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x561c54f649c0 <col:36> 'int' EnumConstant 0x561c54f64970 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64a50 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64aa0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64af0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64b40 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561c54f64b90 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x561c54f64be0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x561c54f64d18 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x561c54f64c58 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x561c54f64de0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x561c54f64ea0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x561c54f64f60 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x561c54f65020 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x561c54f65138 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x561c54f65200 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x561c54f65380 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x561c54f652b0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x561c54f654a8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x561c54f656a8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x561c54f65558 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x561c54f655d8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x561c54f72ff8 <col:54, line:127:5>
|   |-ParenExpr 0x561c54f72ea8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x561c54f72e78 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f72b68 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561c54f72b40 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x561c54f72b28 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x561c54f72b10 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x561c54f72ae0 <col:31> 'Router *' lvalue ->_router 0x561c54f709c0
|   |   |         `-CXXThisExpr 0x561c54f72ad0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561c54f72bc8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f72ba8 <col:48> 'int' 0
|   |   `-CallExpr 0x561c54f72dd8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x561c54f72dc0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f72da0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f72e18 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f72c38 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x561c54f72e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f72c58 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x561c54f72e48 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f72c90 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x561c54f72e60 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f72d88 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f72d70 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f72d28 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x561c54f72f40 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x561c54f72ed8 <col:9> 'Router *' lvalue ->_router 0x561c54f709c0
|   | | `-CXXThisExpr 0x561c54f72ec8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x561c54f72f28 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561c54f72f08 <col:19> 'Router *' lvalue ParmVar 0x561c54f65558 'r' 'Router *'
|   `-BinaryOperator 0x561c54f72fd8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x561c54f72f70 <col:9> 'int' lvalue ->_eindex 0x561c54f70a28
|     | `-CXXThisExpr 0x561c54f72f60 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x561c54f72fc0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f72fa0 <col:19> 'int' lvalue ParmVar 0x561c54f655d8 'eindex' 'int'
|-CXXMethodDecl 0x561c54f65830 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x561c54f65768 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x561c54f65900 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x561c54f659c8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x561c54f65a68 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x561c54f65cb8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x561c54f65b30 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x561c54f65bb0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x561c54f65d68 <col:20>
| `-OptimizeNoneAttr 0x561c54f65dc0 <col:30>
|-CXXMethodDecl 0x561c54f65ec8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561c54f65e00 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x561c54f65f70 <col:20>
| `-OptimizeNoneAttr 0x561c54f65fc8 <col:30>
|-CXXMethodDecl 0x561c54f66098 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561c54f66008 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x561c54f66140 <col:20>
| `-OptimizeNoneAttr 0x561c54f66198 <col:30>
|-CXXMethodDecl 0x561c54f66328 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x561c54f661d0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x561c54f66250 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x561c54f664b8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561c54f663f0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561c54f66608 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561c54f66578 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561c54f66758 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561c54f666c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561c54f668a8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561c54f66818 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561c54f66b68 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x561c54f66960 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x561c54f669e0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x561c54f66a88 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x561c54f66c40 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x561c54f66d00 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x561c54f66fd0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561c54f66e80 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x561c54f66ef8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f670f8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x561c54f672d0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x561c54f671b0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x561c54f67230 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x561c54f674b8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x561c54f67398 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x561c54f67418 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x561c54f67828 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561c54f67578 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561c54f675f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561c54f67670 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561c54f725e0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54f725c0 <col:106> 'int' 0
| `-ParmVarDecl 0x561c54f676e8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f72618 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f725f8 <col:126> 'int' 0
|-CXXMethodDecl 0x561c54f67bc8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561c54f678f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561c54f67990 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561c54f67a10 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x561c54f67a88 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f72650 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f72630 <col:114> 'int' 0
|-CXXMethodDecl 0x561c54f67f58 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561c54f67ca0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x561c54f67d18 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561c54f67d98 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x561c54f72668 <col:96> 'int' 0
| `-ParmVarDecl 0x561c54f67e10 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f726a8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f72688 <col:116> 'int' 0
|-CXXMethodDecl 0x561c54f682d8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561c54f68028 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561c54f680a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f68120 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561c54f726e0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54f726c0 <col:109> 'int' 0
| `-ParmVarDecl 0x561c54f68198 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f72718 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f726f8 <col:129> 'int' 0
|-CXXMethodDecl 0x561c54f68658 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561c54f683a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561c54f68420 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f684a0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x561c54f68518 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f72750 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f72730 <col:117> 'int' 0
|-CXXMethodDecl 0x561c54f689e8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561c54f68730 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f687a8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f68828 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x561c54f72768 <col:99> 'int' 0
| `-ParmVarDecl 0x561c54f688a0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561c54f727a8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561c54f72788 <col:119> 'int' 0
|-CXXMethodDecl 0x561c54f68e08 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x561c54f68ab8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561c54f68b38 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561c54f68bb0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f68c30 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561c54f727e0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54f727c0 <col:108> 'int' 0
| `-ParmVarDecl 0x561c54f68cb0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x561c54f72818 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x561c54f727f8 <col:141> 'int' 0
|-CXXMethodDecl 0x561c54f69228 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561c54f68ee0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561c54f68f60 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561c54f68fd8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f69058 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x561c54f690d8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561c54f72830 <col:121> 'int' 0
|-CXXMethodDecl 0x561c54f69658 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561c54f69308 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x561c54f69388 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x561c54f69400 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f69480 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x561c54f72850 <col:98> 'int' 0
| `-ParmVarDecl 0x561c54f69500 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561c54f72870 <col:123> 'int' 0
|-CXXMethodDecl 0x561c54f69920 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x561c54f69730 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561c54f697b0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x561c54f69830 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x561c54f72890 <col:80> 'int' 0
|-EnumDecl 0x561c54f699d8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x561c54f69ae0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561c54f69d70 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f69ac0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x561c54f69aa0 <col:42> 'int' 1
| |-EnumConstantDecl 0x561c54f69b70 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561c54f69d88 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f69b50 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x561c54f69b30 <col:40> 'int' 2
| |-EnumConstantDecl 0x561c54f69c00 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561c54f69da0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f69be0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x561c54f69bc0 <col:44> 'int' 4
| |-EnumConstantDecl 0x561c54f69c90 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561c54f69db8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f69c70 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x561c54f69c50 <col:36> 'int' 7
| `-EnumConstantDecl 0x561c54f69d20 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x561c54f69dd0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f69d00 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x561c54f69ce0 <col:34> 'int' 6
|-CXXMethodDecl 0x561c54f6a088 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x561c54f69df8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x561c54f69e98 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x561c54f69f18 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x561c54f69f90 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x561c54f72948 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x561c54f72930 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x561c54f72918 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x561c54f728f8 <col:98, col:105> 'String' (CXXTemporary 0x561c54f728f8)
|           `-CXXTemporaryObjectExpr 0x561c54f728c0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x561c54f6a328 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x561c54f6a158 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561c54f6a1d0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x561c54f6a248 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561c54f729f8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561c54f729e0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561c54f729c8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561c54f729a8 <col:94, col:101> 'String' (CXXTemporary 0x561c54f729a8)
| |         `-CXXTemporaryObjectExpr 0x561c54f72970 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x561c54f731e0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x561c54f73158 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x561c54f73128 <col:9> '<bound member function type>' ->add_task_handlers 0x561c54f6a088
|     | `-CXXThisExpr 0x561c54f73118 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561c54f73198 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561c54f73098 <col:27> 'Task *' lvalue ParmVar 0x561c54f6a158 'task' 'Task *'
|     |-ImplicitCastExpr 0x561c54f731b0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x561c54f730b8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x561c54f6a1d0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x561c54f731c8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561c54f730d8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561c54f69d20 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561c54f730f8 <col:62> 'const String' lvalue ParmVar 0x561c54f6a248 'prefix' 'const String &'
|-CXXMethodDecl 0x561c54f6a538 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x561c54f6a3f0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561c54f6a468 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561c54f72aa8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561c54f72a90 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561c54f72a78 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561c54f72a58 <col:70, col:77> 'String' (CXXTemporary 0x561c54f72a58)
| |         `-CXXTemporaryObjectExpr 0x561c54f72a20 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x561c54f733b8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x561c54f73330 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x561c54f73300 <col:9> '<bound member function type>' ->add_task_handlers 0x561c54f6a088
|     | `-CXXThisExpr 0x561c54f732f0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561c54f73370 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561c54f73270 <col:27> 'Task *' lvalue ParmVar 0x561c54f6a3f0 'task' 'Task *'
|     |-ImplicitCastExpr 0x561c54f73388 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x561c54f73290 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x561c54f733a0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561c54f732b0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561c54f69d20 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561c54f732d0 <col:57> 'const String' lvalue ParmVar 0x561c54f6a468 'prefix' 'const String &'
|-CXXMethodDecl 0x561c54f6a818 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x561c54f6a600 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6a680 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6a6f8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x561c54f6aac8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x561c54f6a8e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6a968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6a9e8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x561c54f6adb8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561c54f6ab98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6ac18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6ac90 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x561c54f6b068 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x561c54f6ae88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6af08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6af88 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x561c54f6b318 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x561c54f6b138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6b1b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6b238 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x561c54f6b5c8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x561c54f6b3e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6b468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6b4e0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x561c54f6b878 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x561c54f6b698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6b718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6b798 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x561c54f6bb88 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x561c54f6b9a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6ba20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6baa0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x561c54f6be68 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x561c54f6bc58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6bcd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6bd80 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x561c54f6c148 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x561c54f6bf38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6bfb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6c060 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x561c54f6c3b0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561c54f6c218 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561c54f6c298 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561c54f6c310 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x561c54f6c658 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x561c54f6c480 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561c54f6c500 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561c54f6c578 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x561c54f6c908 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x561c54f6c728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6c7a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6c828 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x561c54f6cbb8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x561c54f6c9d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6ca58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6cad0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x561c54f6ce68 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x561c54f6cc88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6cd08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6cd80 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x561c54f6d138 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x561c54f6cf38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6cfb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561c54f6d058 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x561c54f6d468 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x561c54f6d208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561c54f6d288 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x561c54f6d300 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x561c54f6d378 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c54f72ac0 <col:93> 'bool' false
|-CXXMethodDecl 0x561c54f6d650 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561c54f6d538 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x561c54f6d5b8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x561c54f6d828 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561c54f6d710 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x561c54f6d790 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x561c54f6db08 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561c54f6d8e8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x561c54f6d960 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x561c54f6d9e0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x561c54f6da58 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f6ddf8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561c54f6dbd8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x561c54f6dc50 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x561c54f6dcd0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x561c54f6dd48 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f6e030 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x561c54f6ded0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x561c54f6df50 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x561c54f6e218 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x561c54f6e0f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x561c54f6e178 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x561c54f6e2c8 prev 0x561c54f65a68 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561c54f6e3c0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x561c54f6e450 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x561c54f6e4c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x561c54f6e588 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x561c54f6e650 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x561c54f6e7c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x561c54f6e700 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x561c54f6e870 <col:24>
| | `-OptimizeNoneAttr 0x561c54f6e8c8 <col:34>
| |-CXXMethodDecl 0x561c54f6e910 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x561c54f6ebc8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x561c54f6e9c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561c54f6ea38 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x561c54f6eab8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x561c54f6ec80 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x561c54f6ecb8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x561c54f6ed20 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x561c54f6eda8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x561c54f6f0c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x561c54f6ee60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561c54f6eed8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x561c54f6ef50 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x561c54f6efd0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x561c54f6f1e0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x561c54f76b58 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561c54f76b58
| | `-ParmVarDecl 0x561c54f76c68 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x561c54f76d08 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561c54f76d08
| | `-ParmVarDecl 0x561c54f76e18 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x561c5505c790 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561c54f6f258 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x561c54f6f2f8 <col:38> "" ""
|-CXXMethodDecl 0x561c54f6f388 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x561c54f6f428 <col:44> "" ""
|-AccessSpecDecl 0x561c54f6f498 <line:260:3, col:10> col:3 private
|-EnumDecl 0x561c54f6f4c0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x561c54f6f5c0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x561c54f6f610 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f6f5a0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x561c54f6f580 <col:27> 'int' 4
|-FieldDecl 0x561c54f6f6c8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x561c54f6f878 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x561c54f6f930 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x561c54f709c0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x561c54f70a28 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x561c54f70b78 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x561c54f70ab8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x561c54f70d28 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x561c54f70c38 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x561c54f70f08 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x561c54f70de8 <col:20> col:23 'int'
| `-ParmVarDecl 0x561c54f70e68 <col:25> col:28 'int'
|-CXXMethodDecl 0x561c54f711b0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x561c54f70fd0 <col:23> col:26 'int'
| |-ParmVarDecl 0x561c54f71050 <col:28> col:31 'int'
| `-ParmVarDecl 0x561c54f710c8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x561c54f71268 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x561c54f71330 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x561c54f71380 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x561c54f713d0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x561c54f715b0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x561c54f71460 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x561c54f714d8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f71858 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x561c54f71678 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x561c54f716f8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x561c54f71770 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f71a78 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x561c54f71928 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x561c54f719a8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x561c54f71db0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x561c54f71b38 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x561c54f71bb8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x561c54f71c30 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x561c54f71cb0 <col:57> col:60 'int'
|-CXXMethodDecl 0x561c54f71f98 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561c54f71e80 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x561c54f71f00 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x561c54f720e8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x561c54f72058 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x561c54f72468 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x561c54f721a8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x561c54f72228 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x561c54f722a0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x561c54f72320 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x561c54f72580 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class CheckUDPHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
   108:0-0 |   _Bool _verbose
       112 |   class atomic_uint32_t _drops
       112 |     uint32_t _val
       120 |   class atomic_uint32_t * _reason_drops
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54d1fd90 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54d1fea8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x561c54d1ff38 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x561c54d20008 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x561c54d200f0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54d20308 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561c54d201b0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d204b8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561c54d203c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561c54d20600 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561c54d20570 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561c54d20748 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561c54d206b8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d20890 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561c54d20800 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d20958 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x561c54d20aa0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x561c54d20a10 <col:28> col:31 'int'
|-CXXMethodDecl 0x561c54d20b68 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x561c54d20cb0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x561c54d20c20 <col:28> col:31 'int'
|-CXXMethodDecl 0x561c54d20e28 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561c54d20d68 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d20f70 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561c54d20ee0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d21038 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x561c54d211f8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561c54d210e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561c54d21160 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d21448 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561c54d212b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54d21330 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561c54d214f8 <col:86> "" ""
|-CXXMethodDecl 0x561c54d21768 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x561c54d215d8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x561c54d21650 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d21918 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561c54d21828 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561c54d21ac8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561c54d219d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561c54d21d98 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561c54d21b80 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561c54d21bf8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561c54d21c70 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d22078 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561c54d21e60 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561c54d21ed8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54d21f50 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561c54d22130 <col:115> "" ""
|-AccessSpecDecl 0x561c54d221a0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x561c54d221d8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54d236f0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561c54d236f0
| `-ParmVarDecl 0x561c54d237f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x561c54d23898 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561c54d23898
| `-ParmVarDecl 0x561c54d239a8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x561c54d58fd8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561c54f4add0 <col:7>
|-CXXConstructorDecl 0x561c54d590b0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561c54d590b0
| `-ParmVarDecl 0x561c54d591c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x561c54d59238 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561c54d59238
| `-ParmVarDecl 0x561c54d59348 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x561c54f4d7d0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f79cc8 <../elements/tcpudp/checkudpheader.hh:54:1, line:88:1> line:54:7 class CheckUDPHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x561c54f79e28 <col:1, col:7> col:7 implicit referenced class CheckUDPHeader
|-AccessSpecDecl 0x561c54f79eb8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x561c54f79f40 <line:56:3, col:18> col:3 CheckUDPHeader 'void ()'
|-CXXDestructorDecl 0x561c54f7a030 <line:57:3, col:19> col:3 ~CheckUDPHeader 'void ()' noexcept-unevaluated 0x561c54f7a030
| `-Overrides: [ 0x561c54f615b8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x561c54f7a160 <line:59:3, col:61> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x561c54f62a18 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x561c54f7b498 <col:34, col:61>
|   `-ReturnStmt 0x561c54f7b488 <col:36, col:43>
|     `-ImplicitCastExpr 0x561c54f7b470 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561c54f7b448 <col:43> 'const char [15]' lvalue "CheckUDPHeader"
|-CXXMethodDecl 0x561c54f7a228 <line:60:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x561c54f62ae0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x561c54f7b4f8 <col:34, col:56>
|   `-ReturnStmt 0x561c54f7b4e8 <col:36, col:43>
|     `-ImplicitCastExpr 0x561c54f7b4d0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x561c54f7b4b0 <col:43> 'const char []' lvalue Var 0x561c54f62e18 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x561c54f7a2f0 <line:61:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x561c54f62ea8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x561c54f7b558 <col:34, col:60>
|   `-ReturnStmt 0x561c54f7b548 <col:36, col:43>
|     `-ImplicitCastExpr 0x561c54f7b530 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x561c54f7b510 <col:43> 'const char []' lvalue Var 0x561c54f63210 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x561c54f7a5c0 <line:63:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x561c54f642b0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x561c54f7a470 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x561c54f7a4e8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x561c54f7a690 <line:64:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x561c54f64380 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x561c54f7a7d0 <line:66:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x561c54f61bf8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x561c54f7a740 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x561c54f7a878 <line:71:2, col:9> col:2 private
|-FieldDecl 0x561c54f7a8f0 <line:73:3, col:19> col:8 _verbose 'bool'
| `-ConstantExpr 0x561c54f7a8d0 <col:19> 'int' Int: 1
|   `-IntegerLiteral 0x561c54f7a8a0 <col:19> 'int' 1
|-FieldDecl 0x561c54f7a950 <line:74:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x561c54f7a9b0 <line:75:3, col:20> col:20 _reason_drops 'atomic_uint32_t *'
|-EnumDecl 0x561c54f7aa00 <line:77:3, line:82:3> line:77:8 referenced Reason
| |-EnumConstantDecl 0x561c54f7aac0 <line:78:5> col:5 NOT_UDP 'CheckUDPHeader::Reason'
| |-EnumConstantDecl 0x561c54f7ab10 <line:79:5> col:5 BAD_LENGTH 'CheckUDPHeader::Reason'
| |-EnumConstantDecl 0x561c54f7ab60 <line:80:5> col:5 BAD_CHECKSUM 'CheckUDPHeader::Reason'
| `-EnumConstantDecl 0x561c54f7abb0 <line:81:5> col:5 referenced NREASONS 'CheckUDPHeader::Reason'
|-VarDecl 0x561c54f7aca0 <line:83:3, col:43> col:22 reason_texts 'const char *[3]' static
|-CXXMethodDecl 0x561c54f7ae68 <line:85:3, col:32> col:11 drop 'Packet *(CheckUDPHeader::Reason, Packet *)'
| |-ParmVarDecl 0x561c54f7ad18 <col:16> col:22 'CheckUDPHeader::Reason'
| `-ParmVarDecl 0x561c54f7ad90 <col:24, col:31> col:32 'Packet *'
|-CXXMethodDecl 0x561c54f7b040 <line:86:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561c54f7af28 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x561c54f7afa8 <col:41, col:46> col:47 'void *'
|-CXXConstructorDecl 0x561c54f7b118 <line:54:7> col:7 implicit CheckUDPHeader 'void (const CheckUDPHeader &)' inline default_delete noexcept-unevaluated 0x561c54f7b118
| `-ParmVarDecl 0x561c54f7b228 <col:7> col:7 'const CheckUDPHeader &'
`-CXXMethodDecl 0x561c54f7b2c8 <col:7> col:7 implicit operator= 'CheckUDPHeader &(const CheckUDPHeader &)' inline default_delete noexcept-unevaluated 0x561c54f7b2c8
  `-ParmVarDecl 0x561c54f7b3d8 <col:7> col:7 'const CheckUDPHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckUDPHeader = type { %class.Element.base, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  NonVirtualBaseLLVMType:%class.CheckUDPHeader = type { %class.Element.base, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:108>
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54d35180 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x561c54d35298 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x561c54d35338 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x561c54d35398 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x561c54d353f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x561c54d354a8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54d357b0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54d358c8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x561c54d35970 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x561c54d359d8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x561c54d35a68 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x561c54d3bb00 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561c54d3bf38 <col:12>
|-CXXConstructorDecl 0x561c54d3bc08 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561c54d3bd18 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561c54d35970 'data' 'const char *'
| | `-ImplicitCastExpr 0x561c54d3e4c0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x561c54d3e490 <col:12> 'const char *const' lvalue .data 0x561c54d35970
| |     `-DeclRefExpr 0x561c54d3e470 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561c54d359d8 'length' 'int'
| | `-ImplicitCastExpr 0x561c54d3e550 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561c54d3e520 <col:12> 'const int' lvalue .length 0x561c54d359d8
| |     `-DeclRefExpr 0x561c54d3e500 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561c54d35a68 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x561c54d3e5e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x561c54d3e5b0 <col:12> 'String::memo_t *const' lvalue .memo 0x561c54d35a68
| |     `-DeclRefExpr 0x561c54d3e590 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| `-CompoundStmt 0x561c54d3e638 <col:12>
|-CXXConstructorDecl 0x561c54d3bdb8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c54d3bdb8
| `-ParmVarDecl 0x561c54d3bec8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x561c54d41420 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561c54d4ce38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561c54d4cf48 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x561c54d4d460 <col:12>
|   |-BinaryOperator 0x561c54d4d278 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561c54d4d230 <col:12> 'const char *' lvalue ->data 0x561c54d35970
|   | | `-CXXThisExpr 0x561c54d4d220 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561c54d4d260 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x561c54d4d1f0 <col:12> 'const char *const' lvalue .data 0x561c54d35970
|   |     `-DeclRefExpr 0x561c54d4d1d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561c54d4d340 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x561c54d4d2f8 <col:12> 'int' lvalue ->length 0x561c54d359d8
|   | | `-CXXThisExpr 0x561c54d4d2e8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561c54d4d328 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x561c54d4d2b8 <col:12> 'const int' lvalue .length 0x561c54d359d8
|   |     `-DeclRefExpr 0x561c54d4d298 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561c54d4d408 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x561c54d4d3c0 <col:12> 'String::memo_t *' lvalue ->memo 0x561c54d35a68
|   | | `-CXXThisExpr 0x561c54d4d3b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561c54d4d3f0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x561c54d4d380 <col:12> 'String::memo_t *const' lvalue .memo 0x561c54d35a68
|   |     `-DeclRefExpr 0x561c54d4d360 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
|   `-ReturnStmt 0x561c54d4d450 <col:12>
|     `-UnaryOperator 0x561c54d4d438 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c54d4d428 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x561c54d4cfb8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c54d4cfb8
  `-ParmVarDecl 0x561c54d4d0c8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54d2c6f0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c54d2c808 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x561c54d2c898 <col:16, col:22> col:16 public
|-TypedefDecl 0x561c54d2c8d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x561c549ffdc0 'const char *'
|   `-QualType 0x561c549ff311 'const char' const
|     `-BuiltinType 0x561c549ff310 'char'
|-TypedefDecl 0x561c54d2c960 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x561c54d2c930 'String::const_iterator' sugar
|   |-Typedef 0x561c54d2c8d8 'const_iterator'
|   `-PointerType 0x561c549ffdc0 'const char *'
|     `-QualType 0x561c549ff311 'const char' const
|       `-BuiltinType 0x561c549ff310 'char'
|-TypedefDecl 0x561c54d2cad0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x561c54d2ca40 'int (String::*)() const'
|   |-RecordType 0x561c54d2c780 'String'
|   | `-CXXRecord 0x561c54d2c6f0 'String'
|   `-ParenType 0x561c54d2c9e0 'int () const' sugar
|     `-FunctionProtoType 0x561c54d00570 'int () const' const cdecl
|       `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54d2cb38 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x561c54b55150 'int64_t' sugar
|   |-Typedef 0x561c54a682d0 'int64_t'
|   `-TypedefType 0x561c54a414d0 '__int64_t' sugar
|     |-Typedef 0x561c54a410a8 '__int64_t'
|     `-BuiltinType 0x561c549ff390 'long'
|-TypedefDecl 0x561c54d2cba0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x561c54b55070 'uint64_t' sugar
|   |-Typedef 0x561c54a68470 'uint64_t'
|   `-TypedefType 0x561c54a41560 '__uint64_t' sugar
|     |-Typedef 0x561c54a41118 '__uint64_t'
|     `-BuiltinType 0x561c549ff430 'unsigned long'
|-TypedefDecl 0x561c54d2cc30 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x561c54d2cc00 'String::intmax_t' sugar
|   |-Typedef 0x561c54d2cb38 'intmax_t'
|   `-TypedefType 0x561c54b55150 'int64_t' sugar
|     |-Typedef 0x561c54a682d0 'int64_t'
|     `-TypedefType 0x561c54a414d0 '__int64_t' sugar
|       |-Typedef 0x561c54a410a8 '__int64_t'
|       `-BuiltinType 0x561c549ff390 'long'
|-TypedefDecl 0x561c54d2ccc0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x561c54d2cc90 'String::uintmax_t' sugar
|   |-Typedef 0x561c54d2cba0 'uintmax_t'
|   `-TypedefType 0x561c54b55070 'uint64_t' sugar
|     |-Typedef 0x561c54a68470 'uint64_t'
|     `-TypedefType 0x561c54a41560 '__uint64_t' sugar
|       |-Typedef 0x561c54a41118 '__uint64_t'
|       `-BuiltinType 0x561c549ff430 'unsigned long'
|-CXXConstructorDecl 0x561c54d2cd80 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x561c54d2cf28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x561c54d2ce68 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x561c54d2d0d8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x561c54d2d018 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x561c54d2d230 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x561c54d2d1a0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x561c54d2d448 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x561c54d2d2f8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x561c54d2d378 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x561c54d2d668 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x561c54d2d518 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x561c54d2d598 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x561c54d2d888 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561c54d2d738 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x561c54d2d7b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x561c54d2daa8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x561c54d2d958 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x561c54d2d9d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x561c54d2dc38 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x561c54d2db70 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x561c54d2ddb8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x561c54d2dcf8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x561c54d2df48 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x561c54d2de80 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x561c54d2e0a0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x561c54d2e010 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x561c54d2e1f8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x561c54d2e168 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x561c54d2e350 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x561c54d2e2c0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x561c54d2e4d8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x561c54d2e418 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x561c54d2e668 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x561c54d2e5a0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x561c54d2e7f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x561c54d2e730 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x561c54d2e988 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x561c54d2e8c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x561c54d2ea80 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x561c54d2eba8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x561c54d2ed28 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x561c54d2ec60 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x561c54d2ee78 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x561c54d2ede8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x561c54d2ef30 <col:63> "" ""
|-CXXMethodDecl 0x561c54d2f078 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x561c54d2efb8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x561c54d2f288 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x561c54d2f138 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x561c54d2f1b8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x561c54d2f4a8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x561c54d2f350 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x561c54d2f3d0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x561c54d2f788 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x561c54d2f568 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x561c54d2f5e8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x561c54d3b5d0 <col:55> 'int' 10
| `-ParmVarDecl 0x561c54d2f660 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c54d3b5f0 <col:76> 'bool' true
|-CXXMethodDecl 0x561c54d2fa68 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x561c54d2f850 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x561c54d2f8d0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x561c54d3b600 <col:56> 'int' 10
| `-ParmVarDecl 0x561c54d2f948 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c54d3b620 <col:77> 'bool' true
|-CXXMethodDecl 0x561c54d2fb70 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x561c54d2fc38 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x561c54d2fd00 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x561c54d2fda0 <col:20>
| `-OptimizeNoneAttr 0x561c54d2fdf8 <col:30>
|-CXXConversionDecl 0x561c54d2fee8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561c54d2ffb8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x561c54d30078 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x561c54d30168 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561c54d30228 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561c54d303a8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x561c54d302e0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x561c54d304f8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x561c54d30468 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x561c54d305e8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x561c54d306a8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x561c54d308f8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x561c54d30760 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x561c54d307e0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x561c54d30b58 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x561c54d309c0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x561c54d30a40 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x561c54d30c28 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54d30e38 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x561c54d30ce0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x561c54d30d60 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x561c54d31058 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x561c54d30f00 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x561c54d30f80 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x561c54d311e8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x561c54d31120 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x561c54d312d8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x561c54d31448 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x561c54d31388 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561c54d31658 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x561c54d31508 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561c54d31588 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561c54d31870 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x561c54d31718 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x561c54d31790 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x561c54d31a00 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x561c54d31930 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561c54d31c20 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x561c54d31ac0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x561c54d31b40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561c54d31d70 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x561c54d31ce0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x561c54d31f48 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x561c54d31e30 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561c54d31eb0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x561c54d32098 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x561c54d32008 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x561c54d322b0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x561c54d32150 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x561c54d321d0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x561c54d3b630 <col:39> 'int' 0
|-CXXMethodDecl 0x561c54d324d0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x561c54d32370 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x561c54d323f0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x561c54d3b650 <col:48> 'int' 0
|-CXXMethodDecl 0x561c54d326b0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x561c54d32590 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x561c54d32610 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x561c54d3b670 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x561c54d32780 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x561c54d32840 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x561c54d32900 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x561c54d329c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x561c54d32a80 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x561c54d32c28 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x561c54d32b30 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x561c54d32da8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x561c54d32ce0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x561c54d32f80 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x561c54d32e68 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x561c54d330f8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x561c54d33038 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x561c54d33240 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x561c54d331b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561c54d33390 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x561c54d33300 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x561c54d33568 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x561c54d33450 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561c54d334d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561c54d33748 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561c54d33630 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x561c54d336b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x561c54d33898 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x561c54d33808 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x561c54d33aa8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x561c54d33958 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x561c54d339d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x561c54d33c08 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x561c54d33b70 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561c54d33d60 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x561c54d33cc8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x561c54d33e08 <col:57> "" ""
|-CXXMethodDecl 0x561c54d33f18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x561c54d33e88 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x561c54d34068 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x561c54d33fd8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x561c54d341e8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x561c54d34120 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x561c54d342b0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x561c54d34370 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x561c54d34430 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x561c54d344d0 <col:49> "" ""
|-CXXMethodDecl 0x561c54d34560 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x561c54d34620 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x561c54d34710 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x561c54d347d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x561c54d34898 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x561c54d34958 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x561c54d34a50 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x561c54d34b18 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x561c54d34be0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x561c54d34db8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x561c54d34c98 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x561c54d34d18 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x561c54d34fe0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x561c54d34e80 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x561c54d34f00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x561c54d350f0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x561c54d35158 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x561c54d35180 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561c54d35298 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x561c54d35338 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x561c54d35398 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x561c54d353f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x561c54d354a8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x561c54d35510 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x561c54d35748 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x561c54d35798 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54d35728 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x561c54d35638 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x561c54d355e0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x561c54d35620 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x561c54d35600 <col:32> 'int' 8
|-CXXRecordDecl 0x561c54d357b0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561c54d358c8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x561c54d35970 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x561c54d359d8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x561c54d35a68 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x561c54d3bb00 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561c54d3bf38 <col:12>
| |-CXXConstructorDecl 0x561c54d3bc08 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561c54d3bd18 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561c54d35970 'data' 'const char *'
| | | `-ImplicitCastExpr 0x561c54d3e4c0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x561c54d3e490 <col:12> 'const char *const' lvalue .data 0x561c54d35970
| | |     `-DeclRefExpr 0x561c54d3e470 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561c54d359d8 'length' 'int'
| | | `-ImplicitCastExpr 0x561c54d3e550 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x561c54d3e520 <col:12> 'const int' lvalue .length 0x561c54d359d8
| | |     `-DeclRefExpr 0x561c54d3e500 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561c54d35a68 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x561c54d3e5e0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x561c54d3e5b0 <col:12> 'String::memo_t *const' lvalue .memo 0x561c54d35a68
| | |     `-DeclRefExpr 0x561c54d3e590 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d3bd18 '' 'const String::rep_t &'
| | `-CompoundStmt 0x561c54d3e638 <col:12>
| |-CXXConstructorDecl 0x561c54d3bdb8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c54d3bdb8
| | `-ParmVarDecl 0x561c54d3bec8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x561c54d41420 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561c54d4ce38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561c54d4cf48 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x561c54d4d460 <col:12>
| |   |-BinaryOperator 0x561c54d4d278 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x561c54d4d230 <col:12> 'const char *' lvalue ->data 0x561c54d35970
| |   | | `-CXXThisExpr 0x561c54d4d220 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561c54d4d260 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x561c54d4d1f0 <col:12> 'const char *const' lvalue .data 0x561c54d35970
| |   |     `-DeclRefExpr 0x561c54d4d1d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561c54d4d340 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x561c54d4d2f8 <col:12> 'int' lvalue ->length 0x561c54d359d8
| |   | | `-CXXThisExpr 0x561c54d4d2e8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561c54d4d328 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x561c54d4d2b8 <col:12> 'const int' lvalue .length 0x561c54d359d8
| |   |     `-DeclRefExpr 0x561c54d4d298 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561c54d4d408 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x561c54d4d3c0 <col:12> 'String::memo_t *' lvalue ->memo 0x561c54d35a68
| |   | | `-CXXThisExpr 0x561c54d4d3b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561c54d4d3f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x561c54d4d380 <col:12> 'String::memo_t *const' lvalue .memo 0x561c54d35a68
| |   |     `-DeclRefExpr 0x561c54d4d360 <col:12> 'const String::rep_t' lvalue ParmVar 0x561c54d4cf48 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x561c54d4d450 <col:12>
| |     `-UnaryOperator 0x561c54d4d438 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561c54d4d428 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x561c54d4cfb8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c54d4cfb8
|   `-ParmVarDecl 0x561c54d4d0c8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x561c54d35ae0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x561c54d35d28 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x561c54d35b48 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x561c54d35bc8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x561c54d35c40 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x561c54d3bac0 <col:79, line:261:5>
|   |-BinaryOperator 0x561c54d3b738 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561c54d3b6d0 <col:2, col:5> 'const char *' lvalue .data 0x561c54d35970
|   | | `-MemberExpr 0x561c54d3b6a0 <col:2> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|   | |   `-CXXThisExpr 0x561c54d3b690 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561c54d3b720 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561c54d3b700 <col:12> 'const char *' lvalue ParmVar 0x561c54d35b48 'data' 'const char *'
|   |-BinaryOperator 0x561c54d3b800 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x561c54d3b798 <col:2, col:5> 'int' lvalue .length 0x561c54d359d8
|   | | `-MemberExpr 0x561c54d3b768 <col:2> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|   | |   `-CXXThisExpr 0x561c54d3b758 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561c54d3b7e8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561c54d3b7c8 <col:14> 'int' lvalue ParmVar 0x561c54d35bc8 'length' 'int'
|   `-IfStmt 0x561c54d3baa8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x561c54d3b920 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561c54d3b908 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x561c54d3b8e8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x561c54d3b8c8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x561c54d3b860 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|     |       | `-MemberExpr 0x561c54d3b830 <col:7> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|     |       |   `-CXXThisExpr 0x561c54d3b820 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x561c54d3b8b0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x561c54d3b890 <col:17> 'String::memo_t *' lvalue ParmVar 0x561c54d35c40 'memo' 'String::memo_t *'
|     `-CallExpr 0x561c54d3ba80 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x561c54d3ba68 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561c54d3b970 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x561c54d24758 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x561c54d3b9d8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561c54d35338
|         `-ImplicitCastExpr 0x561c54d3b9c0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x561c54d3b9a0 <col:27> 'String::memo_t *' lvalue ParmVar 0x561c54d35c40 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x561c54d35fd8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x561c54d35df8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x561c54d35e78 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x561c54d35ef0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x561c54d35ae0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x561c54d3bf48 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561c54d3c0d8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x561c54d3c040 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x561c54d3bfb0 <col:2> '<bound member function type>' ->assign_memo 0x561c54d35d28
|     | `-ImplicitCastExpr 0x561c54d3c078 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x561c54d3bfa0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x561c54d3c090 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x561c54d3bfe0 <col:14> 'const char *' lvalue ParmVar 0x561c54d35df8 'data' 'const char *'
|     |-ImplicitCastExpr 0x561c54d3c0a8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561c54d3c000 <col:20> 'int' lvalue ParmVar 0x561c54d35e78 'length' 'int'
|     `-ImplicitCastExpr 0x561c54d3c0c0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x561c54d3c020 <col:28> 'String::memo_t *' lvalue ParmVar 0x561c54d35ef0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x561c54d36168 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x561c54d360a8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x561c54d3c330 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x561c54d3c2b0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x561c54d3c100 <col:2> '<bound member function type>' ->assign_memo 0x561c54d35d28
|     | `-CXXThisExpr 0x561c54d3c0f0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x561c54d3c2e8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x561c54d3c180 <col:14, col:19> 'const char *' lvalue .data 0x561c54d35970
|     |   `-MemberExpr 0x561c54d3c150 <col:14, col:16> 'String::rep_t' lvalue ._r 0x561c54d35ae0
|     |     `-DeclRefExpr 0x561c54d3c130 <col:14> 'const String' lvalue ParmVar 0x561c54d360a8 'x' 'const String &'
|     |-ImplicitCastExpr 0x561c54d3c300 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x561c54d3c200 <col:25, col:30> 'int' lvalue .length 0x561c54d359d8
|     |   `-MemberExpr 0x561c54d3c1d0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x561c54d35ae0
|     |     `-DeclRefExpr 0x561c54d3c1b0 <col:25> 'const String' lvalue ParmVar 0x561c54d360a8 'x' 'const String &'
|     `-ImplicitCastExpr 0x561c54d3c318 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x561c54d3c280 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|         `-MemberExpr 0x561c54d3c250 <col:38, col:40> 'String::rep_t' lvalue ._r 0x561c54d35ae0
|           `-DeclRefExpr 0x561c54d3c230 <col:38> 'const String' lvalue ParmVar 0x561c54d360a8 'x' 'const String &'
|-CXXMethodDecl 0x561c54d36230 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x561c54d3ccf0 <col:31, line:278:5>
|   `-IfStmt 0x561c54d3ccd8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x561c54d3c3d0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561c54d3c3b8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x561c54d3c388 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|     |     `-MemberExpr 0x561c54d3c358 <col:6> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|     |       `-CXXThisExpr 0x561c54d3c348 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x561c54d3ccb0 <col:15, line:277:2>
|       |-ParenExpr 0x561c54d3c880 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x561c54d3c850 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x561c54d3c4e0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x561c54d3c4c8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x561c54d3c4b0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x561c54d3c470 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561c54d35338
|       |   |       `-ImplicitCastExpr 0x561c54d3c458 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x561c54d3c428 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|       |   |           `-MemberExpr 0x561c54d3c3f8 <col:27> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|       |   |             `-CXXThisExpr 0x561c54d3c3e8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x561c54d3c540 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x561c54d3c520 <col:54> 'int' 0
|       |   `-CallExpr 0x561c54d3c7b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x561c54d3c798 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x561c54d3c718 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x561c54d3c7f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561c54d3c628 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x561c54d3c808 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561c54d3c658 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x561c54d3c820 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x561c54d3c690 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x561c54d3c838 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x561c54d3c700 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x561c54d3c6e8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x561c54d3c6b0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x561c54d3cbd0 <line:274:6, line:275:22>
|       | |-CallExpr 0x561c54d3ca90 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x561c54d3ca78 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x561c54d3c9f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x561c54d25ba0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x561c54d3c9c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561c54d35338
|       | |   `-ImplicitCastExpr 0x561c54d3c9a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x561c54d3c978 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|       | |       `-MemberExpr 0x561c54d3c948 <col:40> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|       | |         `-CXXThisExpr 0x561c54d3c938 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x561c54d3cb90 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x561c54d3cb78 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x561c54d3cab8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x561c54d3aa10 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x561c54d3cbb8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x561c54d3cb18 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|       |       `-MemberExpr 0x561c54d3cae8 <col:15> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|       |         `-CXXThisExpr 0x561c54d3cad8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x561c54d3cc90 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x561c54d3cc28 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561c54d35a68
|         | `-MemberExpr 0x561c54d3cbf8 <col:6> 'String::rep_t' lvalue ->_r 0x561c54d35ae0
|         |   `-CXXThisExpr 0x561c54d3cbe8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x561c54d3cc78 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x561c54d3cc58 <col:16> 'int' 0
|-CXXMethodDecl 0x561c54d364c8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x561c54d362e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561c54d36368 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561c54d363e0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x561c54d365a0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x561c54d367f0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x561c54d36658 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561c54d366d8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561c54d36750 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x561c54d369d8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x561c54d368c0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x561c54d36940 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x561c54d36ad8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x561c54d3cdc8 <col:41, line:286:5>
|   `-ReturnStmt 0x561c54d3cdb8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x561c54d3cd88 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x561c54d3cd50 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x561c54d3cd38 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x561c54d3cd18 <col:46> 'int' 1
|-CXXMethodDecl 0x561c54d36d78 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x561c54d36b90 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x561c54d36c10 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x561c54d36c90 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x561c54d3aa10 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x561c54d36e40 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x561c54d3aae0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x561c54d3acb0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x561c54d3ab98 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561c54d3ac18 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x561c54d3ad70 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x561c54d3ae38 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x561c54d3af38 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x561c54d3afb0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x561c54d3b028 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x561c54d3b090 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x561c54d3b190 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x561c54d3b1e0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54d3b170 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x561c54d3b150 <col:22> 'int' 14
|-CXXMethodDecl 0x561c54d3b3f8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x561c54d3b210 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x561c54d3b290 <col:38> col:41 'int'
| `-ParmVarDecl 0x561c54d3b310 <col:43> col:46 'int'
|-FriendDecl 0x561c54d3b500 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x561c54d3b590 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561c54fa9e50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x561c54faa028 prev 0x561c54fa9e50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561c54faa0b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x561c54faa0e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54faba40 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x561c54fab9f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x561c54fab9d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x561c54faa2f8 'type'
|     `-SubstTemplateTypeParmType 0x561c54faa2c0 'String' sugar
|       |-TemplateTypeParmType 0x561c54ceff90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54ceff40 'T'
|       `-RecordType 0x561c54d2c780 'String'
|         `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fabaf8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x561c54fabac0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x561c54fabaa0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561c54faba40 'type'
|     `-ElaboratedType 0x561c54fab9f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x561c54fab9d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x561c54faa2f8 'type'
|         `-SubstTemplateTypeParmType 0x561c54faa2c0 'String' sugar
|           |-TemplateTypeParmType 0x561c54ceff90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561c54ceff40 'T'
|           `-RecordType 0x561c54d2c780 'String'
|             `-CXXRecord 0x561c54d2c6f0 'String'
|-CXXMethodDecl 0x561c54fabc78 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x561c54fabb88 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x561c54fabd68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561c54fafe68 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561c54fafe68
|-CXXMethodDecl 0x561c54fb0138 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561c54fb0040 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x561c54fb0378 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561c54fb01f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54fb0268 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb0548 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561c54fb0438 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54fb04b0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb06a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561c54fb0778 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561c54fb09c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561c54fb0838 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561c54fb08b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb0c28 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x561c54fb0a98 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561c54fb0b10 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb0de8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561c54fb0cf8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb0fa8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561c54fb0eb0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb1060 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561c54fb1110 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561c54fb1348 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561c54fb11c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54fb1238 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561c54fb15e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561c54fb14f0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x561c54fb16b0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x561c54fb1700 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561c54fb1750 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561c54f63f20 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x561c54fa88b8 prev 0x561c54f63f20 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561c54fa9dc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x561c54fa9d70 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x561c54fa9d50 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561c54fa9c00 'type'
|     `-SubstTemplateTypeParmType 0x561c54fa9a90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x561c54cc5d40 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x561c54cc5ce8 'F'
|       `-RecordType 0x561c54fa96f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x561c54fa9610 'typed_array_memory'
|-FieldDecl 0x561c54fb17a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x561c54fb17f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561c54fb1828 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|   |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561c54cfd258 'T'
|   `-RecordType 0x561c54d2c780 'String'
|     `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb18b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x561c54fb1880 'String &'
|   `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-RecordType 0x561c54d2c780 'String'
|       `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb1948 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x561c54fb1910 'const String &'
|   `-QualType 0x561c54fa8951 'const String' const
|     `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-RecordType 0x561c54d2c780 'String'
|         `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb19d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x561c54fb19a0 'String *'
|   `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-RecordType 0x561c54d2c780 'String'
|       `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb1a68 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x561c54fb1a30 'const String *'
|   `-QualType 0x561c54fa8951 'const String' const
|     `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-RecordType 0x561c54d2c780 'String'
|         `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb26c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x561c54fb2670 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x561c54fb2650 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x561c54fb2588 'type'
|     `-LValueReferenceType 0x561c54fb2550 'const String &'
|       `-QualType 0x561c54fb22f1 'const String' const
|         `-SubstTemplateTypeParmType 0x561c54fb22f0 'String' sugar
|           |-TemplateTypeParmType 0x561c54ccfc90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561c54ccfc38 'T'
|           `-RecordType 0x561c54d2c780 'String'
|             `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb2728 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x561c54fb1910 'const String &'
|   `-QualType 0x561c54fa8951 'const String' const
|     `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-RecordType 0x561c54d2c780 'String'
|         `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb2780 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54fb27e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x561c54fb19a0 'String *'
|   `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-RecordType 0x561c54d2c780 'String'
|       `-CXXRecord 0x561c54d2c6f0 'String'
|-TypedefDecl 0x561c54fb2850 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x561c54fb1a30 'const String *'
|   `-QualType 0x561c54fa8951 'const String' const
|     `-SubstTemplateTypeParmType 0x561c54fa8950 'String' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-RecordType 0x561c54d2c780 'String'
|         `-CXXRecord 0x561c54d2c6f0 'String'
|-EnumDecl 0x561c54fb28a8 <line:134:5> col:5
| `-EnumConstantDecl 0x561c54fb29a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561c54fb2980 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561c54cfe938 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561c54cfe910 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561c54cfe8f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x561c54fb2a28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561c54fb2cb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54fb2ae0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54fb2b80 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x561c54fb2f48 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x561c54fb2e30 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x561c54fb3208 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x561c54fb30f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x561c54fb3520 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x561c54fb3400 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x561c54fb3830 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x561c54fb3710 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x561c54fb3b20 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54fb3968 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54fb39e0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561c54fb3c48 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561c54fb3cf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb3d50 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb3d98 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561c54fb3e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb3ea0 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb3f68 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561c54fb4018 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb4070 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb40b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561c54fb4168 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb41c0 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb4208 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561c54fb42b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb4310 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb4358 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561c54fb4408 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54fb4460 <col:30> Inherited
|-CXXMethodDecl 0x561c54fb4488 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561c54fb4538 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561c54fb45e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561c54fb47a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54fb4698 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54fb4710 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561c54fb48f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561c54fb4868 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fb4aa8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x561c54fb49b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561c54fb4b60 <col:20>
| `-OptimizeNoneAttr 0x561c54fb4bb8 <col:30>
|-CXXMethodDecl 0x561c54fb4cd8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x561c54fb4be0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561c54fb4d90 <col:20>
| `-OptimizeNoneAttr 0x561c54fb4de8 <col:30>
|-CXXMethodDecl 0x561c54fb4ea0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561c54fb4e10 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fb4fe8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561c54fb4f58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fb5118 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x561c54fb5218 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x561c54fb52e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x561c54fb53b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x561c54fb54f8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561c54fb5468 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fb5640 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561c54fb55b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fb5788 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x561c54fb56f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561c54fb5840 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561c54fb5940 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561c54fb58b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561c54fb59f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561c54fb5ab8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x561c54fb5bb8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x561c54fb5d38 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561c54fb5c78 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x561c54fb64f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561c54fb5df0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x561c54fb6458 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x561c54fb6358 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x561c54fb65d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561c54fb6728 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561c54fb6698 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561c54fb67e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561c54fb6a28 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54fb68a0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561c54fb6918 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561c54fb6bb8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x561c54fb6af8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561c54fb6dc8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x561c54fb6c80 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561c54fb6cf8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561c54fb6e88 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561c54fb70e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x561c54fb6ff0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x561c54fb71b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561c54fb71b8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c55032b78 prev 0x561c54ee2378 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c55032c70 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x561c55032d00 <col:22, col:28> col:22 public
|-EnumDecl 0x561c55032d28 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x561c55032e48 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55032e28 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x561c55032e10 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561c55032df0 <col:14> 'int' 999
| |-EnumConstantDecl 0x561c55032ef0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55032ed0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x561c55032eb8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561c55032e98 <col:14> 'int' 1
| |-EnumConstantDecl 0x561c55032f80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55032f60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x561c55032f40 <col:17> 'int' 0
| |-EnumConstantDecl 0x561c55033010 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55032ff0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x561c55032fd0 <col:13> 'int' 1
| |-EnumConstantDecl 0x561c550330a0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55033080 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x561c55033060 <col:16> 'int' 2
| |-EnumConstantDecl 0x561c55033130 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55033110 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x561c550330f0 <col:13> 'int' 3
| |-EnumConstantDecl 0x561c550331c0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c550331a0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x561c55033180 <col:15> 'int' 4
| |-EnumConstantDecl 0x561c55033250 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c55033230 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x561c55033210 <col:14> 'int' 5
| |-EnumConstantDecl 0x561c550332e0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x561c550332c0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x561c550332a0 <col:12> 'int' 6
| `-EnumConstantDecl 0x561c55033370 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x561c55033350 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x561c55033330 <col:13> 'int' 7
|-VarDecl 0x561c550333e0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x561c55033468 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x561c550334f0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x561c55033578 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x561c55033600 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x561c55033688 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x561c55033710 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x561c55033798 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x561c55033820 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x561c550338a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x561c55033930 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x561c55033a30 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x561c55038d28 '_nerrors' 'int'
| | `-IntegerLiteral 0x561c550394b8 <line:128:13> 'int' 0
| `-CompoundStmt 0x561c55039528 <col:16, line:129:5>
|-CXXDestructorDecl 0x561c55033b20 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x561c55039538 <col:29, line:132:5>
|-CXXMethodDecl 0x561c55033cd8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x561c55033c10 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c55033da0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561c55033e88 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561c55039590 <col:44, line:161:5>
|   `-ReturnStmt 0x561c55039580 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x561c55039568 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561c55039548 <col:9> 'ErrorHandler *' lvalue Var 0x561c55038d88 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x561c55033fc8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x561c55033f38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561c55034090 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561c550395f0 <col:43, line:173:5>
|   `-ReturnStmt 0x561c550395e0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x561c550395c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561c550395a8 <col:9> 'ErrorHandler *' lvalue Var 0x561c55038e00 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x561c55034148 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x561c550341c8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x561c550342d8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x561c55034248 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561c55034428 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x561c55034398 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561c55034580 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x561c550344e8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x561c550346d8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x561c55034640 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561c55034830 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x561c55034798 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561c55034a40 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561c550348e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x561c55034968 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x561c55034c18 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561c55034b00 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x561c55034b80 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x561c55034e38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561c55034cd8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x561c55034d58 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x561c55035018 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561c55034ef8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561c55034f78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561c550351f8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561c550350d8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561c55035158 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561c55035380 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x561c550352b8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x561c55035550 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x561c55035438 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561c550354b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x561c55039848 <col:57, line:234:5>
|   `-ReturnStmt 0x561c55039838 <line:233:2, col:41>
|     `-ExprWithCleanups 0x561c55039820 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561c550397c8 <col:9, col:41> 'int'
|         |-MemberExpr 0x561c55039798 <col:9> '<bound member function type>' ->xmessage 0x561c55035380
|         | `-CXXThisExpr 0x561c55039788 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x561c55039808 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561c550397f0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561c55039768 <col:18, col:40> 'String' (CXXTemporary 0x561c55039768)
|               `-CallExpr 0x561c55039730 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x561c55039718 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x561c55039690 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561c55037548 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x561c550396b0 <col:31> 'const String' lvalue ParmVar 0x561c550354b0 'str' 'const String &'
|                 `-DeclRefExpr 0x561c550396d0 <col:36> 'const String' lvalue ParmVar 0x561c55035438 'anno' 'const String &'
|-CXXMethodDecl 0x561c55035830 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561c55035610 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561c55035690 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x561c55035708 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561c55039ad8 <col:68, line:243:5>
|   `-ReturnStmt 0x561c55039ac8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x561c55039ab0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561c55039a50 <col:9, col:41> 'int'
|         |-MemberExpr 0x561c55039a20 <col:9> '<bound member function type>' ->xmessage 0x561c55035550
|         | `-CXXThisExpr 0x561c55039a10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561c550398e8 <col:18> 'const String' lvalue ParmVar 0x561c55035610 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561c55039a98 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561c55039a80 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561c550399f0 <col:24, col:40> 'String' (CXXTemporary 0x561c550399f0)
|               `-CXXMemberCallExpr 0x561c55039988 <col:24, col:40> 'String'
|                 |-MemberExpr 0x561c55039918 <col:24> '<bound member function type>' ->vformat 0x561c55036a10
|                 | `-CXXThisExpr 0x561c55039908 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561c550399b8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561c55039948 <col:32> 'const char *' lvalue ParmVar 0x561c55035690 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561c550399d0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561c55039968 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561c55035708 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561c55035ad0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x561c550358f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561c55035970 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561c550359e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x561c55039e18 <col:23, line:254:5>
|   `-ReturnStmt 0x561c55039e08 <line:253:2, col:71>
|     `-ExprWithCleanups 0x561c55039df0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x561c55039d90 <col:9, col:71> 'int'
|         |-MemberExpr 0x561c55039d60 <col:9> '<bound member function type>' ->xmessage 0x561c55035550
|         | `-CXXThisExpr 0x561c55039d50 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x561c55039dd8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x561c55039dc0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x561c55039d10 <col:18, col:65> 'String' (CXXTemporary 0x561c55039d10)
|         |     `-CallExpr 0x561c55039ca8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x561c55039c90 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x561c55039b78 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561c55037548 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x561c55039b98 <col:31> 'const String' lvalue ParmVar 0x561c55035970 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x561c55039cf0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x561c55039cd8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x561c55039c70 <col:37, col:64> 'String' (CXXTemporary 0x561c55039c70)
|         |             `-CallExpr 0x561c55039c40 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x561c55039c28 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x561c55039bb8 <col:37> 'String (const String &)' lvalue CXXMethod 0x561c55037b98 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x561c55039bd8 <col:56> 'const String' lvalue ParmVar 0x561c550358f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x561c55039d30 <col:68> 'const String' lvalue ParmVar 0x561c550359e8 'str' 'const String &'
|-CXXMethodDecl 0x561c55035e50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561c55035b98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561c55035c10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561c55035c90 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x561c55035d08 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561c5503a0d0 <col:34, line:267:5>
|   `-ReturnStmt 0x561c5503a0c0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x561c5503a0a8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x561c5503a040 <col:9, col:51> 'int'
|         |-MemberExpr 0x561c5503a010 <col:9> '<bound member function type>' ->xmessage 0x561c55035ad0
|         | `-CXXThisExpr 0x561c5503a000 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561c55039eb8 <col:18> 'const String' lvalue ParmVar 0x561c55035b98 'landmark' 'const String &'
|         |-DeclRefExpr 0x561c55039ed8 <col:28> 'const String' lvalue ParmVar 0x561c55035c10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561c5503a090 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x561c5503a078 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561c55039fe0 <col:34, col:50> 'String' (CXXTemporary 0x561c55039fe0)
|               `-CXXMemberCallExpr 0x561c55039f78 <col:34, col:50> 'String'
|                 |-MemberExpr 0x561c55039f08 <col:34> '<bound member function type>' ->vformat 0x561c55036a10
|                 | `-CXXThisExpr 0x561c55039ef8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561c55039fa8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561c55039f38 <col:42> 'const char *' lvalue ParmVar 0x561c55035c90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561c55039fc0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561c55039f58 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561c55035d08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561c55035f60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x561c5503a150 <col:25, line:288:5>
|   `-ReturnStmt 0x561c5503a140 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x561c5503a128 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x561c5503a0f8 <col:9> 'const int' lvalue ->_nerrors 0x561c55038d28
|         `-CXXThisExpr 0x561c5503a0e8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x561c55036170 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x561c55036018 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x561c55036098 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x561c55036458 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561c55036238 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x561c550362b8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x561c55036330 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561c550365f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x561c55036528 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x561c55036838 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561c550366b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x561c55036728 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561c5503a3b0 <col:58, line:357:5>
|   `-ReturnStmt 0x561c5503a3a0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x561c5503a388 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x561c5503a358 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x561c5503a340 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x561c5503a320 <col:9, col:29> 'String' (CXXTemporary 0x561c5503a320)
|             `-CallExpr 0x561c5503a2b0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x561c5503a298 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561c5503a218 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x561c55036458 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x561c5503a1b8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x561c5503a2e8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x561c5503a1d8 <col:21> 'const char *' lvalue ParmVar 0x561c550366b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x561c5503a300 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x561c5503a1f8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561c55036728 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561c55036a10 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x561c55036900 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x561c55036978 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561c55036b68 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x561c55036ad8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x561c55036cb0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x561c55036c20 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x561c55036f50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x561c55036d68 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x561c55036de8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x561c55036e60 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x561c550370b0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x561c55037020 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x561c5503a4c8 <col:37, line:441:5>
|   `-IfStmt 0x561c5503a4b0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x561c5503a438 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x561c5503a408 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x561c5503a3c8 <col:6> 'int' lvalue ParmVar 0x561c55037020 'level' 'int'
|     | `-ImplicitCastExpr 0x561c5503a420 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x561c5503a3e8 <col:15> 'ErrorHandler::Level' EnumConstant 0x561c55033130 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x561c5503a498 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x561c5503a468 <col:8> 'int' lvalue ->_nerrors 0x561c55038d28
|         `-CXXThisExpr 0x561c5503a458 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x561c55037178 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x561c5503a560 <col:26, line:448:5>
|   `-BinaryOperator 0x561c5503a540 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x561c5503a4f0 <col:2> 'int' lvalue ->_nerrors 0x561c55038d28
|     | `-CXXThisExpr 0x561c5503a4e0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x561c5503a520 <col:13> 'int' 0
|-CXXMethodDecl 0x561c55037340 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x561c55037230 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x561c550372a8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x561c55037548 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x561c55037400 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x561c55037478 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x561c550377f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x561c55037608 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x561c55037688 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x561c55037708 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x561c550378b0 <col:59> 0 0
|-CXXMethodDecl 0x561c55037a48 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x561c55037928 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x561c550379a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x561c5503abd0 <col:70, line:534:5>
|   |-DeclStmt 0x561c5503a6d0 <line:528:2, col:20>
|   | |-VarDecl 0x561c5503a588 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x561c5503a5f0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x561c5503a628 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x561c5503a690 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x561c5503a7a0 <line:529:2, col:23>
|   | `-VarDecl 0x561c5503a700 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x561c5503a788 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x561c5503a768 <col:18> 'const char *' lvalue ParmVar 0x561c55037928 'begin' 'const char *'
|   |-DoStmt 0x561c5503ab68 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x561c5503aa98 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x561c5503aa80 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x561c5503aa60 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x561c5503a7b8 <col:6> 'const char *' lvalue Var 0x561c5503a700 'x' 'const char *'
|   | |     `-CallExpr 0x561c5503a9b0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x561c5503a998 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x561c5503a950 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x561c55039200 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x561c5503aa18 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x561c5503aa00 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x561c5503a870 <col:20, col:27> 'String' (CXXTemporary 0x561c5503a870)
|   | |       |     `-CXXTemporaryObjectExpr 0x561c5503a838 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x561c5503aa30 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561c5503a890 <col:30> 'const char *' lvalue Var 0x561c5503a700 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x561c5503aa48 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561c5503a8b0 <col:33> 'const char *' lvalue ParmVar 0x561c550379a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x561c5503a8f0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561c5503a8d0 <col:39> 'String' lvalue Var 0x561c5503a588 'name' 'String'
|   | |       |-UnaryOperator 0x561c5503a928 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561c5503a908 <col:46> 'String' lvalue Var 0x561c5503a628 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x561c5503a940 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x561c5503ab50 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x561c5503ab38 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x561c5503ab18 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x561c5503aae8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|   |         `-ImplicitCastExpr 0x561c5503aad0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x561c5503aab0 <col:11> 'String' lvalue Var 0x561c5503a588 'name' 'String'
|   `-ReturnStmt 0x561c5503abc0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x561c5503aba8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x561c5503ab88 <col:9> 'const char *' lvalue Var 0x561c5503a700 'x' 'const char *'
|-CXXMethodDecl 0x561c55037b98 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x561c55037b08 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x561c5503b1d8 <col:55, line:550:5>
|   `-IfStmt 0x561c5503b1b0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x561c5503ae10 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x561c5503adf8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561c5503ade0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561c5503adc0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561c5503ad90 <col:6> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|     | |       `-DeclRefExpr 0x561c5503ac30 <col:6> 'const String' lvalue ParmVar 0x561c55037b08 'x' 'const String &'
|     | `-BinaryOperator 0x561c5503ad70 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x561c5503ad40 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x561c5503acf0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x561c5503acd8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x561c5503ac90 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x561c54d49720 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x561c5503ac50 <col:11> 'const String' lvalue ParmVar 0x561c55037b08 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x561c5503ac70 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x561c5503ad58 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x561c5503ad28 <col:19> 'char' 123
|     |-ReturnStmt 0x561c5503ae80 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x561c5503ae50 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x561c5503ae30 <col:13> 'const String' lvalue ParmVar 0x561c55037b08 'x' 'const String &'
|     `-IfStmt 0x561c5503b188 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x561c5503af18 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561c5503af00 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561c5503aee0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561c5503aeb0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |       `-DeclRefExpr 0x561c5503ae90 <col:11> 'const String' lvalue ParmVar 0x561c55037b08 'x' 'const String &'
|       |-ReturnStmt 0x561c5503b0a0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x561c5503b088 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x561c5503b058 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x561c5503b040 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x561c5503b020 <col:13, col:29> 'String' (CXXTemporary 0x561c5503b020)
|       |         `-CallExpr 0x561c5503afd0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x561c5503afb8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x561c5503af30 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x561c55037340 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x561c5503b000 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x561c5503af50 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x561c5503af70 <col:28> 'const String' lvalue ParmVar 0x561c55037b08 'x' 'const String &'
|       `-ReturnStmt 0x561c5503b178 <line:549:6, col:20>
|         `-ExprWithCleanups 0x561c5503b160 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x561c5503b130 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x561c5503b118 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x561c5503b0f8 <col:13, col:20> 'String' (CXXTemporary 0x561c5503b0f8)
|                 `-CXXTemporaryObjectExpr 0x561c5503b0c0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x561c55037d70 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x561c55037c60 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x561c55037cd8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c550394a8 <col:71> 'bool' false
|-CXXRecordDecl 0x561c55037e20 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x561c55038118 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x561c550380b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x561c55038050 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x561c55038010 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x561c54d2c780 'String'
|       | `-CXXRecord 0x561c54d2c6f0 'String'
|       |-BuiltinType 0x561c549ff370 'int'
|       `-DecayedType 0x561c54ee33c0 '__va_list_tag *' sugar
|         |-TypedefType 0x561c54ee3390 'va_list' sugar
|         | |-Typedef 0x561c54c1d830 'va_list'
|         | `-TypedefType 0x561c54c1d7e0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x561c54b55408 '__gnuc_va_list'
|         |   `-TypedefType 0x561c54b55370 '__builtin_va_list' sugar
|         |     |-Typedef 0x561c54a40bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x561c54a40b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x561c54a000c0 '__va_list_tag'
|         |         `-CXXRecord 0x561c54a00028 '__va_list_tag'
|         `-PointerType 0x561c54c230d0 '__va_list_tag *'
|           `-RecordType 0x561c54a000c0 '__va_list_tag'
|             `-CXXRecord 0x561c54a00028 '__va_list_tag'
|-EnumDecl 0x561c55038170 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x561c55038270 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c550387d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038250 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x561c55038230 <col:16> 'int' 1
| |-EnumConstantDecl 0x561c55038300 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c550387e8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c550382e0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x561c550382c0 <col:21> 'int' 2
| |-EnumConstantDecl 0x561c55038390 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038800 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038370 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x561c55038350 <col:22> 'int' 4
| |-EnumConstantDecl 0x561c55038420 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038818 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038400 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x561c550383e0 <col:17> 'int' 8
| |-EnumConstantDecl 0x561c550384b0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038830 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038490 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x561c55038470 <col:22> 'int' 16
| |-EnumConstantDecl 0x561c55038540 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038848 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038520 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561c55038500 <col:19> 'int' 32
| |-EnumConstantDecl 0x561c550385d0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038860 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c550385b0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x561c55038590 <col:17> 'int' 64
| |-EnumConstantDecl 0x561c55038660 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038878 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c55038640 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x561c55038620 <col:14> 'int' 128
| |-EnumConstantDecl 0x561c550386f0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561c55038890 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c550386d0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x561c550386b0 <col:16> 'int' 256
| `-EnumConstantDecl 0x561c55038780 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x561c550388a8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c55038760 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x561c55038740 <col:12> 'int' 1024
|-CXXMethodDecl 0x561c55038ab8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x561c550388d0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x561c55038970 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x561c55038c40 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x561c55038b78 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x561c55038ce8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x561c55038d28 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x561c55038d88 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x561c55038e00 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x561c55039200 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x561c55038e78 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x561c55038ef8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x561c55038f78 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x561c55038ff0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x561c55039068 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x561c550390e0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x561c55039328 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x561c55039328
| `-ParmVarDecl 0x561c55039438 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x561c5503b538 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x561c5503b538
  `-ParmVarDecl 0x561c5503b648 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54ee2408 prev 0x561c54f269c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54ee2500 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x561c54ee2590 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x561c54ee26c8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x561c54ee25c8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561c54ee3af0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54ee3ad0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561c54ee3668 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561c54ee3b80 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561c54ee3b40 <col:17> 'ErrorHandler *' lvalue ParmVar 0x561c54ee25c8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561c54ee36d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561c54ee3c00 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54ee3bc0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561c54ee3730 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561c54ee3c40 <col:54> 'bool' false
| `-CompoundStmt 0x561c54ee3d48 <col:61, line:38:5>
|   `-BinaryOperator 0x561c54ee3d28 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x561c54ee3cc0 <col:9> 'const Element *' lvalue ->_context 0x561c54ee3608
|     | `-CXXThisExpr 0x561c54ee3cb0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x561c54ee3d10 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x561c54ee3cf0 <col:20> 'int' 0
|-CXXConstructorDecl 0x561c54ee28d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54ee2788 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x561c54ee2800 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561c54ee3b28 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54ee3b08 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x561c54ee3608 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x561c54ee3da0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x561c54ee3d60 <col:20> 'const Element *' lvalue ParmVar 0x561c54ee2788 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x561c54ee3668 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561c54ee3e20 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561c54ee3de0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x561c54ee2800 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561c54ee36d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561c54ee3ea0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561c54ee3e60 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x561c54ee3730 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561c54ee3ee0 <col:73> 'bool' false
| `-CompoundStmt 0x561c54ee3f58 <col:80, line:46:5>
|-CXXMethodDecl 0x561c54ee2a08 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x561c54ee3fd0 <col:36, line:51:5>
|   `-ReturnStmt 0x561c54ee3fc0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x561c54ee3fa8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x561c54ee3f78 <col:16> 'const Element *const' lvalue ->_context 0x561c54ee3608
|         `-CXXThisExpr 0x561c54ee3f68 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561c54ee2af8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x561c54ee4050 <col:32, line:57:5>
|   `-ReturnStmt 0x561c54ee4040 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x561c54ee4028 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x561c54ee3ff8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x561c54ee3668
|         `-CXXThisExpr 0x561c54ee3fe8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561c54ee2bb8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x561c54ee2d40 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x561c54ee2c70 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561c54ee2e90 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x561c54ee2e00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561c54ee2fe0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x561c54ee2f50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561c54ee31e8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x561c54ee3098 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x561c54ee3110 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x561c54ee3518 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x561c54ee32a8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x561c54ee3328 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x561c54ee33f0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x561c54ee35d0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x561c54ee3608 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x561c54ee3668 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x561c54ee36d0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x561c54ee3730 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x561c54ee3780 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x561c54ee3780
| `-ParmVarDecl 0x561c54ee3898 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x561c54ee3938 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x561c54ee3938
| `-ParmVarDecl 0x561c54ee3a48 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x561c5505d578 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561c54feeb70 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x561c54feed48 prev 0x561c54feeb70 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561c54feedd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x561c54feee00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ff09d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x561c54ff0980 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x561c54fef2b0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x561c54fef1b0 'type'
|     `-TemplateSpecializationType 0x561c54fef140 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561c54fef020 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x561c54fef000 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561c54feefe0 <col:24> 'unsigned long' 4
|       `-RecordType 0x561c54fef120 'char_array<4>'
|         `-ClassTemplateSpecialization 0x561c54fef040 'char_array'
|-TypedefDecl 0x561c54ff0a88 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x561c54ff0a50 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x561c54ff0a30 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x561c54ff09d0 'type'
|     `-ElaboratedType 0x561c54ff0980 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x561c54fef2b0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x561c54fef1b0 'type'
|         `-TemplateSpecializationType 0x561c54fef140 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561c54fef020 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x561c54fef000 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561c54feefe0 <col:24> 'unsigned long' 4
|           `-RecordType 0x561c54fef120 'char_array<4>'
|             `-ClassTemplateSpecialization 0x561c54fef040 'char_array'
|-CXXMethodDecl 0x561c54ff0c08 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x561c54ff0b18 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x561c54ff0cf8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561c54ff0dd8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x561c54ff10a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561c54ff0fb0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x561c54ff12e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561c54ff1160 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54ff11d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ff14b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561c54ff13a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54ff1420 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ff1618 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561c54ff16e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561c54ffa520 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561c54ff17a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561c54ff1820 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ffa778 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x561c54ffa5f0 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561c54ffa668 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ffa938 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561c54ffa848 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ffaaf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561c54ffaa00 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ffabb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561c54ffac60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561c54ffae98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561c54ffad10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561c54ffad88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561c54ffb138 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561c54ffb040 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x561c54ffb200 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x561c54ffb250 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561c54ffb2a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561c54fed578 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x561c54fed788 prev 0x561c54fed578 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561c54feeae0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x561c54feea90 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x561c54feea70 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x561c54fee920 'type'
|     `-SubstTemplateTypeParmType 0x561c54fee740 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x561c54cc55c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cc5568 'T'
|       `-RecordType 0x561c54fee290 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x561c54fee1a8 'sized_array_memory'
|-FieldDecl 0x561c54ffb2f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x561c54ffb340 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561c54ffb378 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|   |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561c54cfd258 'T'
|   `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffb408 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x561c54ffb3d0 'int &'
|   `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffb4c8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x561c54ffb490 'const int &'
|   `-QualType 0x561c54fed821 'const int' const
|     `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffb558 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x561c54ffb520 'int *'
|   `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffb5e8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x561c54ffb5b0 'const int *'
|   `-QualType 0x561c54fed821 'const int' const
|     `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffc1d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x561c54ffc180 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x561c54ffc160 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x561c54ffc0f0 'type'
|     `-SubstTemplateTypeParmType 0x561c54ffbeb0 'int' sugar
|       |-TemplateTypeParmType 0x561c54cd03c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cd0370 'T'
|       `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffc238 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x561c54ffb490 'const int &'
|   `-QualType 0x561c54fed821 'const int' const
|     `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffc290 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffc2f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x561c54ffb520 'int *'
|   `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|     |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561c54cfd258 'T'
|     `-BuiltinType 0x561c549ff370 'int'
|-TypedefDecl 0x561c54ffc360 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x561c54ffb5b0 'const int *'
|   `-QualType 0x561c54fed821 'const int' const
|     `-SubstTemplateTypeParmType 0x561c54fed820 'int' sugar
|       |-TemplateTypeParmType 0x561c54cfd2b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561c54cfd258 'T'
|       `-BuiltinType 0x561c549ff370 'int'
|-EnumDecl 0x561c54ffc3b8 <line:134:5> col:5
| `-EnumConstantDecl 0x561c54ffc4b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561c54ffc490 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561c54cfe938 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561c54cfe910 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561c54cfe8f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x561c54ffc538 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561c54ffc788 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54ffc5f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54ffc690 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x561c54ffca48 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x561c54ffc930 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x561c54ffcd08 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x561c54ffcbf0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x561c54ffd050 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x561c54ffcf30 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x561c54ffd360 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x561c54ffd240 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x561c54ffd650 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54ffd498 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54ffd510 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561c54ffd778 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561c54ffd858 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffd8b0 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffd8f8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561c54ffd9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffda00 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffdac8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561c54ffdb78 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffdbd0 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffdc18 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561c54ffdcc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffdd20 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffdd68 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561c54ffde18 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffde70 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffdeb8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561c54ffdf68 <col:20> Inherited
| `-OptimizeNoneAttr 0x561c54ffdfc0 <col:30> Inherited
|-CXXMethodDecl 0x561c54ffdfe8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561c54ffe098 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561c54ffe148 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561c54ffe308 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561c54ffe1f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561c54ffe270 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561c54ffe458 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561c54ffe3c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54ffe608 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x561c54ffe510 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561c54ffe6c0 <col:20>
| `-OptimizeNoneAttr 0x561c54ffe718 <col:30>
|-CXXMethodDecl 0x561c54ffe838 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x561c54ffe740 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561c54ffe8f0 <col:20>
| `-OptimizeNoneAttr 0x561c54ffe948 <col:30>
|-CXXMethodDecl 0x561c54ffea00 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561c54ffe970 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54ffeb48 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561c54ffeab8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54ffec78 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x561c54ffeda8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x561c54ffee78 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x561c54ffef48 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x561c54fff088 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561c54ffeff8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fff1d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561c54fff140 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561c54fff318 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x561c54fff288 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561c54fff3d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561c54fff4d0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561c54fff440 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561c54fff588 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561c54fff648 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x561c54fff748 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x561c54fff8c8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561c54fff808 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x561c55000088 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561c54fff980 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x561c54ffffe8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x561c54fffee8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x561c55000168 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561c550002b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561c55000228 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561c55000370 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561c550005b8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561c55000430 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561c550004a8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561c55000778 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x561c55000688 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561c550009c8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x561c55000840 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561c550008b8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561c55000a88 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561c55000ce8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x561c55000bf0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x561c55000db8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54feb6e8 prev 0x561c54fd2988 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c54feb7e0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x561c54feb8d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x561c55012a90 <col:16, line:828:9>
|-CXXDestructorDecl 0x561c54feb9c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x561c55012aa0 <col:25, line:830:9>
|-CXXMethodDecl 0x561c54febac0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x561c54febb70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x561c54febc18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561c54febc18
| `-ParmVarDecl 0x561c54febd28 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x561c54fec4e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561c54fec4e8
  `-ParmVarDecl 0x561c54fec5f8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54fd2798 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x561c54fd28f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x561c54fd2988 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x561c54fd2a40 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x561c54fd2b48 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x561c54fd2a78 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561c55002378 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561c55002358 <col:31> 'int' 0
|-CXXConstructorDecl 0x561c54fd2e68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x561c54fd2ce0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x561c54fd2d58 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561c550023b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561c55002390 <col:59> 'int' 0
|-CXXConstructorDecl 0x561c54fd3040 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54fd2f30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x561c54fd2fa8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561c550023e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561c550023c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x561c54fd33f8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561c54fd31e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x561c54fd3258 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x561c54fd32d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561c55002420 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561c55002400 <col:31> 'int' 0
|-CXXConstructorDecl 0x561c54fd35b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x561c54fd34f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x561c54fd36b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x561c54fd3898 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x561c54fd37a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x561c54fd3988 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x561c550040c8 <col:24, line:291:5>
|   `-ReturnStmt 0x561c550040b8 <line:290:9, col:79>
|     `-BinaryOperator 0x561c55004098 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x561c55003f70 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x561c55003ec8 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x561c55003ea8 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x561c550024a8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x561c55002490 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x561c55002478 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x561c55002448 <col:18> 'Vector<String> *const' lvalue ->_conf 0x561c54fed510
|       | |   |       `-CXXThisExpr 0x561c55002438 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x561c55003e90 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x561c55003e78 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x561c55003e40 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x561c55003e10 <col:28, col:35> '<bound member function type>' ->size 0x561c54fb4488
|       | |           `-ImplicitCastExpr 0x561c55003e60 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x561c55002500 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x561c550024d0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x561c54fed510
|       | |                 `-CXXThisExpr 0x561c550024c0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x561c55003f58 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x561c55003f40 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x561c55003f28 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x561c55003ef8 <col:47> 'Args::Slot *const' lvalue ->_slots 0x561c55000f00
|       |         `-CXXThisExpr 0x561c55003ee8 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x561c55004078 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x561c55004060 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561c55004048 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561c55004008 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561c55003ff0 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561c55003fa0 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561c55000fb0
|         |     |   `-CXXThisExpr 0x561c55003f90 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561c55003fd0 <col:73> 'int' 0
|         `-IntegerLiteral 0x561c55004028 <col:79> 'int' 0
|-CXXMethodDecl 0x561c54fd3a48 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x561c550042a0 <col:32, line:296:5>
|   `-ReturnStmt 0x561c55004290 <line:295:9, col:49>
|     `-BinaryOperator 0x561c55004270 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x561c55004150 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x561c55004138 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x561c55004120 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x561c550040f0 <col:17> 'Args::Slot *const' lvalue ->_slots 0x561c55000f00
|       |       `-CXXThisExpr 0x561c550040e0 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x561c55004250 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x561c55004238 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561c55004220 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561c550041e0 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561c550041c8 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561c55004178 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561c55000fb0
|         |     |   `-CXXThisExpr 0x561c55004168 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561c550041a8 <col:43> 'int' 0
|         `-IntegerLiteral 0x561c55004200 <col:49> 'int' 0
|-CXXMethodDecl 0x561c54fd3b38 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x561c550044b0 <col:19, line:306:5>
|   |-IfStmt 0x561c550043d0 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x561c55004310 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x561c550042f8 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x561c550042c8 <col:13> 'Vector<String> *' lvalue ->_conf 0x561c54fed510
|   | |     `-CXXThisExpr 0x561c550042b8 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x561c550043b0 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x561c55004380 <col:13, col:20> '<bound member function type>' ->clear 0x561c54fb6e88
|   |     `-ImplicitCastExpr 0x561c55004368 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x561c55004338 <col:13> 'Vector<String> *' lvalue ->_conf 0x561c54fed510
|   |         `-CXXThisExpr 0x561c55004328 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x561c55004458 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x561c55004428 <col:9, col:16> '<bound member function type>' .clear 0x561c55000a88
|   |   `-MemberExpr 0x561c550043f8 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x561c55000ea0
|   |     `-CXXThisExpr 0x561c550043e8 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x561c550044a0 <line:305:9, col:17>
|     `-UnaryOperator 0x561c55004488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c55004478 <col:17> 'Args *' this
|-CXXMethodDecl 0x561c54fd3db8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x561c54fd3cc0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x561c54fd3f38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x561c54fd3e70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x561c54fd42b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x561c54fd3fe0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x561c54fd4218 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x561c54fd4088 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x561c54fd4100 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x561c550047d0 <col:67, line:327:5>
|     |-WhileStmt 0x561c55004780 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x561c55004598 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x561c55004518 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x561c54f1ee98 0x561c54d68478 0x561c54d68150 0x561c54d59930 0x561c54d595e0 0x561c54d58ed0 0x561c54d2b840 0x561c54cb7d00
|     | | |-DeclRefExpr 0x561c550044d8 <col:16> 'Iter' lvalue ParmVar 0x561c54fd4088 'begin' 'Iter'
|     | | `-DeclRefExpr 0x561c550044f8 <col:25> 'Iter' lvalue ParmVar 0x561c54fd4100 'end' 'Iter'
|     | `-CompoundStmt 0x561c55004760 <col:30, line:325:9>
|     |   |-CallExpr 0x561c55004700 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x561c550045e0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x561c550046d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x561c55004660 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|     |   |   `-DeclRefExpr 0x561c55004640 <col:24> 'Iter' lvalue ParmVar 0x561c54fd4088 'begin' 'Iter'
|     |   `-UnaryOperator 0x561c55004748 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x561c55004728 <col:15> 'Iter' lvalue ParmVar 0x561c54fd4088 'begin' 'Iter'
|     `-ReturnStmt 0x561c550047c0 <line:326:9, col:17>
|       `-UnaryOperator 0x561c550047a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55004798 <col:17> 'Args *' this
|-CXXMethodDecl 0x561c54fd43c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x561c54fd4330 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x561c54fd4508 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x561c54fd4478 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x561c54fd45d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x561c550048b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x561c55004850 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x561c55004800 <col:9> '<bound member function type>' ->reset_from 0x561c55001328
|   | | `-CXXThisExpr 0x561c550047f0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x561c55004830 <col:20> 'int' 0
|   `-ReturnStmt 0x561c550048a0 <line:352:9, col:17>
|     `-UnaryOperator 0x561c55004888 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c55004878 <col:17> 'Args *' this
|-VarDecl 0x561c54fd4688 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x561c54fd46f0 <col:38> 'int' 1
|-VarDecl 0x561c54fd4780 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x561c54fd47e8 <col:39> 'int' 2
|-VarDecl 0x561c54fd4878 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x561c54fd48e0 <col:39> 'int' 4
|-VarDecl 0x561c54fd4970 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x561c54fd49d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x561c54fd4d58 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x561c54fd4a50 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x561c54fd4cb8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x561c54fd4b00 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x561c54fd4ba8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x561c55004a08 <col:43, line:371:5>
| |   `-ReturnStmt 0x561c550049f8 <line:370:9, col:34>
| |     `-CallExpr 0x561c550049c0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x561c550048e0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x561c55004960 <col:21> 'const char *' lvalue ParmVar 0x561c54fd4b00 'keyword' 'const char *'
| |       |-IntegerLiteral 0x561c55004980 <col:30> 'int' 0
| |       `-DeclRefExpr 0x561c550049a0 <col:33> 'T' lvalue ParmVar 0x561c54fd4ba8 'x' 'T &'
| `-CXXMethodDecl 0x561c5505d9f8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x561c5505d818 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x561c5505d8e8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x561c54fd5088 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x561c54fd4dc0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fd4fe8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561c54fd4e70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd4f18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x561c55004b58 <col:45, line:375:5>
|     `-ReturnStmt 0x561c55004b48 <line:374:9, col:42>
|       `-CallExpr 0x561c55004b10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55004a30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55004ab0 <col:21> 'const char *' lvalue ParmVar 0x561c54fd4e70 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55004ad0 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int'
|         `-DeclRefExpr 0x561c55004af0 <col:41> 'T' lvalue ParmVar 0x561c54fd4f18 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd53b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x561c54fd50f0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fd5318 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561c54fd51a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd5248 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x561c55004ca8 <col:45, line:379:5>
|     `-ReturnStmt 0x561c55004c98 <line:378:9, col:43>
|       `-CallExpr 0x561c55004c60 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55004b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55004c00 <col:21> 'const char *' lvalue ParmVar 0x561c54fd51a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55004c20 <col:30> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         `-DeclRefExpr 0x561c55004c40 <col:42> 'T' lvalue ParmVar 0x561c54fd5248 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd56e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x561c54fd5420 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fd5648 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561c54fd54d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd5578 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x561c55004ea8 <col:46, line:383:5>
|     `-ReturnStmt 0x561c55004e98 <line:382:9, col:55>
|       `-CallExpr 0x561c55004e60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55004cd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55004d50 <col:21> 'const char *' lvalue ParmVar 0x561c54fd54d0 'keyword' 'const char *'
|         |-BinaryOperator 0x561c55004e20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561c55004dd0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561c55004db0 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561c55004e08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561c55004de8 <col:42> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561c55004e40 <col:54> 'T' lvalue ParmVar 0x561c54fd5578 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd5ae8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x561c54fd5750 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fd5a48 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x561c54fd5800 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd5880 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fd5928 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x561c55004fe8 <col:54, line:388:5>
|     |-CallExpr 0x561c55004f70 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55004ec0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561c55004f00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561c55004f10 <col:30> 'const char *' lvalue ParmVar 0x561c54fd5800 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c55004f30 <col:39> 'int' lvalue ParmVar 0x561c54fd5880 'flags' 'int'
|     | `-DeclRefExpr 0x561c55004f50 <col:46> 'T' lvalue ParmVar 0x561c54fd5928 'x' 'T &'
|     `-ReturnStmt 0x561c55004fd8 <line:387:9, col:17>
|       `-UnaryOperator 0x561c55004fc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55004fb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fd5f98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x561c54fd5b58 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fd5bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561c54fd5ef8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd5c98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd5d38 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd5dd8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c55005158 <col:74, line:403:5>
|     `-ReturnStmt 0x561c55005148 <line:402:9, col:56>
|       `-CallExpr 0x561c55005108 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55005088 <col:28> 'const char *' lvalue ParmVar 0x561c54fd5c98 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c550050a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x561c550050c8 <col:40> 'T' lvalue ParmVar 0x561c54fd5d38 'x' 'T &'
|         `-DeclRefExpr 0x561c550050e8 <col:43> 'const V' lvalue ParmVar 0x561c54fd5dd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561c54fd6408 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561c54fd6008 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fd6088 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561c54fd6368 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd6148 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd61e8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd6288 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c550052c0 <col:76, line:407:5>
|     `-ReturnStmt 0x561c550052b0 <line:406:9, col:65>
|       `-CallExpr 0x561c55005270 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550051f0 <col:28> 'const char *' lvalue ParmVar 0x561c54fd6148 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55005210 <col:37> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         |-DeclRefExpr 0x561c55005230 <col:49> 'T' lvalue ParmVar 0x561c54fd61e8 'x' 'T &'
|         `-DeclRefExpr 0x561c55005250 <col:52> 'const V' lvalue ParmVar 0x561c54fd6288 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561c54fd6958 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x561c54fd6478 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fd64f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561c54fd68b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd65b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd6638 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fd66d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd6778 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c55005428 <col:85, line:412:5>
|     |-CallExpr 0x561c550053a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c550052d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561c55005318 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561c55005328 <col:37> 'const char *' lvalue ParmVar 0x561c54fd65b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c55005348 <col:46> 'int' lvalue ParmVar 0x561c54fd6638 'flags' 'int'
|     | |-DeclRefExpr 0x561c55005368 <col:53> 'T' lvalue ParmVar 0x561c54fd66d8 'x' 'T &'
|     | `-DeclRefExpr 0x561c55005388 <col:56> 'const V' lvalue ParmVar 0x561c54fd6778 'default_value' 'const V &'
|     `-ReturnStmt 0x561c55005418 <line:411:9, col:17>
|       `-UnaryOperator 0x561c55005400 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c550053f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fd6de8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x561c54fd69d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd6a48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fd6d48 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fd6b08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd6b80 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd6c28 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x561c550055a8 <col:53, line:425:5>
|     `-ReturnStmt 0x561c55005598 <line:424:9, col:42>
|       `-CallExpr 0x561c55005558 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550054d8 <col:21> 'const char *' lvalue ParmVar 0x561c54fd6b08 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c550054f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x561c55005518 <col:33> 'P' lvalue ParmVar 0x561c54fd6b80 'parser' 'P'
|         `-DeclRefExpr 0x561c55005538 <col:41> 'T' lvalue ParmVar 0x561c54fd6c28 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd7238 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x561c54fd6e58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd6ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fd7198 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fd6f98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd7010 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd70b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561c55005720 <col:55, line:429:5>
|     `-ReturnStmt 0x561c55005710 <line:428:9, col:50>
|       `-CallExpr 0x561c550056d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550055d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55005650 <col:21> 'const char *' lvalue ParmVar 0x561c54fd6f98 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55005670 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int'
|         |-DeclRefExpr 0x561c55005690 <col:41> 'P' lvalue ParmVar 0x561c54fd7010 'parser' 'P'
|         `-DeclRefExpr 0x561c550056b0 <col:49> 'T' lvalue ParmVar 0x561c54fd70b8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd7688 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x561c54fd72a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd7328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fd75e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fd73e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd7460 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd7508 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561c55005898 <col:55, line:433:5>
|     `-ReturnStmt 0x561c55005888 <line:432:9, col:51>
|       `-CallExpr 0x561c55005848 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005748 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550057c8 <col:21> 'const char *' lvalue ParmVar 0x561c54fd73e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c550057e8 <col:30> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         |-DeclRefExpr 0x561c55005808 <col:42> 'P' lvalue ParmVar 0x561c54fd7460 'parser' 'P'
|         `-DeclRefExpr 0x561c55005828 <col:50> 'T' lvalue ParmVar 0x561c54fd7508 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd7ad8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x561c54fd76f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd7778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fd7a38 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fd7838 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd78b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd7958 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x561c55005ac0 <col:56, line:437:5>
|     `-ReturnStmt 0x561c55005ab0 <line:436:9, col:63>
|       `-CallExpr 0x561c55005a70 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550058c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55005940 <col:21> 'const char *' lvalue ParmVar 0x561c54fd7838 'keyword' 'const char *'
|         |-BinaryOperator 0x561c55005a10 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561c550059c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561c550059a0 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561c550059f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561c550059d8 <col:42> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561c55005a30 <col:54> 'P' lvalue ParmVar 0x561c54fd78b0 'parser' 'P'
|         `-DeclRefExpr 0x561c55005a50 <col:62> 'T' lvalue ParmVar 0x561c54fd7958 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fd8008 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x561c54fd7b48 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd7bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fd7f68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561c54fd7c88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd7d08 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fd7d80 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd7e28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x561c55005c28 <col:64, line:442:5>
|     |-CallExpr 0x561c55005ba8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55005ad8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561c55005b18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561c55005b28 <col:30> 'const char *' lvalue ParmVar 0x561c54fd7c88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c55005b48 <col:39> 'int' lvalue ParmVar 0x561c54fd7d08 'flags' 'int'
|     | |-DeclRefExpr 0x561c55005b68 <col:46> 'P' lvalue ParmVar 0x561c54fd7d80 'parser' 'P'
|     | `-DeclRefExpr 0x561c55005b88 <col:54> 'T' lvalue ParmVar 0x561c54fd7e28 'x' 'T &'
|     `-ReturnStmt 0x561c55005c18 <line:441:9, col:17>
|       `-UnaryOperator 0x561c55005c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55005bf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fd8608 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x561c54fd8080 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd80f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561c54fd8178 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561c54fd8568 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd8240 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd82b8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd8358 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd8428 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c55005dc0 <col:84, line:458:5>
|     `-ReturnStmt 0x561c55005db0 <line:457:9, col:64>
|       `-CallExpr 0x561c55005d68 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55005cc8 <col:28> 'const char *' lvalue ParmVar 0x561c54fd8240 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c55005ce8 <col:37> 'int' 0
|         |-DeclRefExpr 0x561c55005d08 <col:40> 'P' lvalue ParmVar 0x561c54fd82b8 'parser' 'P'
|         |-DeclRefExpr 0x561c55005d28 <col:48> 'T' lvalue ParmVar 0x561c54fd8358 'x' 'T &'
|         `-DeclRefExpr 0x561c55005d48 <col:51> 'const V' lvalue ParmVar 0x561c54fd8428 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561c54fd8b88 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561c54fd8680 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd86f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561c54fd8778 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561c54fd8ae8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd8840 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd88b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd8958 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd89f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c55005f50 <col:86, line:462:5>
|     `-ReturnStmt 0x561c55005f40 <line:461:9, col:73>
|       `-CallExpr 0x561c55005ef8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55005de8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55005e58 <col:28> 'const char *' lvalue ParmVar 0x561c54fd8840 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55005e78 <col:37> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         |-DeclRefExpr 0x561c55005e98 <col:49> 'P' lvalue ParmVar 0x561c54fd88b8 'parser' 'P'
|         |-DeclRefExpr 0x561c55005eb8 <col:57> 'T' lvalue ParmVar 0x561c54fd8958 'x' 'T &'
|         `-DeclRefExpr 0x561c55005ed8 <col:60> 'const V' lvalue ParmVar 0x561c54fd89f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561c54fd91e8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x561c54fd8c00 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd8c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561c54fd8cf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561c54fd9148 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561c54fd8dc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd8e40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fd8eb8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd8f58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fd8ff8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x561c550060e0 <col:95, line:467:5>
|     |-CallExpr 0x561c55006058 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55005f68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561c55005fa8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561c55005fb8 <col:37> 'const char *' lvalue ParmVar 0x561c54fd8dc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c55005fd8 <col:46> 'int' lvalue ParmVar 0x561c54fd8e40 'flags' 'int'
|     | |-DeclRefExpr 0x561c55005ff8 <col:53> 'P' lvalue ParmVar 0x561c54fd8eb8 'parser' 'P'
|     | |-DeclRefExpr 0x561c55006018 <col:61> 'T' lvalue ParmVar 0x561c54fd8f58 'x' 'T &'
|     | `-DeclRefExpr 0x561c55006038 <col:64> 'const V' lvalue ParmVar 0x561c54fd8ff8 'default_value' 'const V &'
|     `-ReturnStmt 0x561c550060d0 <line:466:9, col:17>
|       `-UnaryOperator 0x561c550060b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c550060a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fd97c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x561c54fd9268 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd92e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fd9368 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fd9728 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fd9430 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd94a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd9548 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561c54fd95e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x561c55006288 <col:63, line:481:5>
|     `-ReturnStmt 0x561c55006278 <line:480:9, col:47>
|       `-CallExpr 0x561c55006230 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55006110 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006190 <col:21> 'const char *' lvalue ParmVar 0x561c54fd9430 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c550061b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x561c550061d0 <col:33> 'P' lvalue ParmVar 0x561c54fd94a8 'parser' 'P'
|         |-DeclRefExpr 0x561c550061f0 <col:41> 'T1' lvalue ParmVar 0x561c54fd9548 'x1' 'T1 &'
|         `-DeclRefExpr 0x561c55006210 <col:45> 'T2' lvalue ParmVar 0x561c54fd95e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561c54fd9d48 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x561c54fd9840 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd98b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fd9938 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fd9ca8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fd9a00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fd9a78 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fd9b18 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561c54fd9bb8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561c55006428 <col:65, line:485:5>
|     `-ReturnStmt 0x561c55006418 <line:484:9, col:55>
|       `-CallExpr 0x561c550063d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550062b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006330 <col:21> 'const char *' lvalue ParmVar 0x561c54fd9a00 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55006350 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int'
|         |-DeclRefExpr 0x561c55006370 <col:41> 'P' lvalue ParmVar 0x561c54fd9a78 'parser' 'P'
|         |-DeclRefExpr 0x561c55006390 <col:49> 'T1' lvalue ParmVar 0x561c54fd9b18 'x1' 'T1 &'
|         `-DeclRefExpr 0x561c550063b0 <col:53> 'T2' lvalue ParmVar 0x561c54fd9bb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561c54fda728 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x561c54fd9dc0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fd9e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fda318 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fda688 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fda3e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fda458 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fda4f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561c54fda598 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561c550065c8 <col:65, line:489:5>
|     `-ReturnStmt 0x561c550065b8 <line:488:9, col:56>
|       `-CallExpr 0x561c55006570 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55006450 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550064d0 <col:21> 'const char *' lvalue ParmVar 0x561c54fda3e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c550064f0 <col:30> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         |-DeclRefExpr 0x561c55006510 <col:42> 'P' lvalue ParmVar 0x561c54fda458 'parser' 'P'
|         |-DeclRefExpr 0x561c55006530 <col:50> 'T1' lvalue ParmVar 0x561c54fda4f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x561c55006550 <col:54> 'T2' lvalue ParmVar 0x561c54fda598 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561c54fdaca8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x561c54fda7a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fda818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fda898 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fdac08 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fda960 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fda9d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdaa78 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561c54fdab18 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x561c55006818 <col:66, line:493:5>
|     `-ReturnStmt 0x561c55006808 <line:492:9, col:68>
|       `-CallExpr 0x561c550067c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550065f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006670 <col:21> 'const char *' lvalue ParmVar 0x561c54fda960 'keyword' 'const char *'
|         |-BinaryOperator 0x561c55006740 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561c550066f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561c550066d0 <col:30> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561c55006728 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561c55006708 <col:42> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561c55006760 <col:54> 'P' lvalue ParmVar 0x561c54fda9d8 'parser' 'P'
|         |-DeclRefExpr 0x561c55006780 <col:62> 'T1' lvalue ParmVar 0x561c54fdaa78 'x1' 'T1 &'
|         `-DeclRefExpr 0x561c550067a0 <col:66> 'T2' lvalue ParmVar 0x561c54fdab18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561c54fdb308 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x561c54fdad20 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdad98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fdae18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fdb268 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fdaee0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdaf60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdafd8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdb078 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561c54fdb118 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x561c550069a8 <col:74, line:498:5>
|     |-CallExpr 0x561c55006920 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55006830 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561c55006870 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561c55006880 <col:30> 'const char *' lvalue ParmVar 0x561c54fdaee0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c550068a0 <col:39> 'int' lvalue ParmVar 0x561c54fdaf60 'flags' 'int'
|     | |-DeclRefExpr 0x561c550068c0 <col:46> 'P' lvalue ParmVar 0x561c54fdafd8 'parser' 'P'
|     | |-DeclRefExpr 0x561c550068e0 <col:54> 'T1' lvalue ParmVar 0x561c54fdb078 'x1' 'T1 &'
|     | `-DeclRefExpr 0x561c55006900 <col:58> 'T2' lvalue ParmVar 0x561c54fdb118 'x2' 'T2 &'
|     `-ReturnStmt 0x561c55006998 <line:497:9, col:17>
|       `-UnaryOperator 0x561c55006980 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55006970 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fdb668 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x561c54fdb388 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fdb5c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561c54fdb440 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdb4b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x561c55006af0 <col:52, line:509:5>
|     `-ReturnStmt 0x561c55006ae0 <line:508:9, col:44>
|       `-CallExpr 0x561c55006aa8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550069d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006a48 <col:26> 'const char *' lvalue ParmVar 0x561c54fdb440 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c55006a68 <col:35> 'int' 0
|         `-DeclRefExpr 0x561c55006a88 <col:38> 'P' lvalue ParmVar 0x561c54fdb4b8 'parser' 'P'
|-FunctionTemplateDecl 0x561c54fdb968 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x561c54fdb6d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fdb8c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561c54fdb780 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdb7f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561c55006c30 <col:54, line:513:5>
|     `-ReturnStmt 0x561c55006c20 <line:512:9, col:52>
|       `-CallExpr 0x561c55006be8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55006b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006b88 <col:26> 'const char *' lvalue ParmVar 0x561c54fdb780 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55006ba8 <col:35> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int'
|         `-DeclRefExpr 0x561c55006bc8 <col:46> 'P' lvalue ParmVar 0x561c54fdb7f8 'parser' 'P'
|-FunctionTemplateDecl 0x561c54fdbc68 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x561c54fdb9d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fdbbc8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561c54fdba80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdbaf8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561c55006d70 <col:54, line:517:5>
|     `-ReturnStmt 0x561c55006d60 <line:516:9, col:53>
|       `-CallExpr 0x561c55006d28 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55006c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006cc8 <col:26> 'const char *' lvalue ParmVar 0x561c54fdba80 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55006ce8 <col:35> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int'
|         `-DeclRefExpr 0x561c55006d08 <col:47> 'P' lvalue ParmVar 0x561c54fdbaf8 'parser' 'P'
|-FunctionTemplateDecl 0x561c54fdbf68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x561c54fdbcd0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fdbec8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561c54fdbd80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdbdf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x561c55006f60 <col:55, line:521:5>
|     `-ReturnStmt 0x561c55006f50 <line:520:9, col:65>
|       `-CallExpr 0x561c55006f18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55006d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55006e08 <col:26> 'const char *' lvalue ParmVar 0x561c54fdbd80 'keyword' 'const char *'
|         |-BinaryOperator 0x561c55006ed8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x561c55006e88 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561c55006e68 <col:35> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561c55006ec0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561c55006ea0 <col:47> 'const int' lvalue Var 0x561c54fd4780 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561c55006ef8 <col:59> 'P' lvalue ParmVar 0x561c54fdbdf8 'parser' 'P'
|-FunctionTemplateDecl 0x561c54fdc338 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x561c54fdbfd0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fdc298 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561c54fdc080 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdc100 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdc178 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x561c550070a0 <col:63, line:526:5>
|     |-CallExpr 0x561c55007028 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55006f78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x561c55006fb8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x561c55006fc8 <col:35> 'const char *' lvalue ParmVar 0x561c54fdc080 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561c55006fe8 <col:44> 'int' lvalue ParmVar 0x561c54fdc100 'flags' 'int'
|     | `-DeclRefExpr 0x561c55007008 <col:51> 'P' lvalue ParmVar 0x561c54fdc178 'parser' 'P'
|     `-ReturnStmt 0x561c55007090 <line:525:9, col:17>
|       `-UnaryOperator 0x561c55007078 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55007068 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fdc788 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x561c54fdc3a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdc428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdc6e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fdc4e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdc560 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdc608 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x561c550071f8 <col:58, line:541:5>
|     `-ReturnStmt 0x561c550071e8 <line:540:9, col:39>
|       `-CallExpr 0x561c550071b0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550070d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007150 <col:21> 'const char *' lvalue ParmVar 0x561c54fdc4e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55007170 <col:30> 'P' lvalue ParmVar 0x561c54fdc560 'parser' 'P'
|         `-DeclRefExpr 0x561c55007190 <col:38> 'T' lvalue ParmVar 0x561c54fdc608 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fdcbd8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x561c54fdc7f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdc878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdcb38 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fdc938 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdc9b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdca58 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561c55007330 <col:60, line:545:5>
|     `-ReturnStmt 0x561c55007320 <line:544:9, col:41>
|       `-CallExpr 0x561c550072e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007288 <col:23> 'const char *' lvalue ParmVar 0x561c54fdc938 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c550072a8 <col:32> 'P' lvalue ParmVar 0x561c54fdc9b0 'parser' 'P'
|         `-DeclRefExpr 0x561c550072c8 <col:40> 'T' lvalue ParmVar 0x561c54fdca58 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fdd028 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x561c54fdcc48 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdccc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdcf88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fdcd88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdce00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdcea8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561c55007468 <col:60, line:549:5>
|     `-ReturnStmt 0x561c55007458 <line:548:9, col:41>
|       `-CallExpr 0x561c55007420 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550073c0 <col:23> 'const char *' lvalue ParmVar 0x561c54fdcd88 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c550073e0 <col:32> 'P' lvalue ParmVar 0x561c54fdce00 'parser' 'P'
|         `-DeclRefExpr 0x561c55007400 <col:40> 'T' lvalue ParmVar 0x561c54fdcea8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fdd478 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x561c54fdd098 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdd118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdd3d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fdd1d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdd250 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdd2f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x561c550075a0 <col:61, line:553:5>
|     `-ReturnStmt 0x561c55007590 <line:552:9, col:42>
|       `-CallExpr 0x561c55007558 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550074f8 <col:24> 'const char *' lvalue ParmVar 0x561c54fdd1d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55007518 <col:33> 'P' lvalue ParmVar 0x561c54fdd250 'parser' 'P'
|         `-DeclRefExpr 0x561c55007538 <col:41> 'T' lvalue ParmVar 0x561c54fdd2f8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fdd958 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x561c54fdd4e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdd568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdd8b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561c54fdd628 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdd6a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdd720 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdd7c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x561c55007718 <col:69, line:557:5>
|     `-ReturnStmt 0x561c55007708 <line:556:9, col:46>
|       `-CallExpr 0x561c550076c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c550075c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007648 <col:21> 'const char *' lvalue ParmVar 0x561c54fdd628 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c55007668 <col:30> 'int' lvalue ParmVar 0x561c54fdd6a8 'flags' 'int'
|         |-DeclRefExpr 0x561c55007688 <col:37> 'P' lvalue ParmVar 0x561c54fdd720 'parser' 'P'
|         `-DeclRefExpr 0x561c550076a8 <col:45> 'T' lvalue ParmVar 0x561c54fdd7c8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fddc68 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x561c54fdd9d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fddbc8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561c54fdda80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fddaf8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x561c55007858 <col:56, line:571:5>
|     `-ReturnStmt 0x561c55007848 <line:570:9, col:48>
|       `-CallExpr 0x561c55007810 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550077b0 <col:30> 'const char *' lvalue ParmVar 0x561c54fdda80 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c550077d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x561c550077f0 <col:42> 'P' lvalue ParmVar 0x561c54fddaf8 'parser' 'P'
|-FunctionTemplateDecl 0x561c54fddff8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x561c54fddcd0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fddf58 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561c54fddd80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdde00 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdde78 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561c55007a28 <col:67, line:576:5>
|     |-CallExpr 0x561c550079b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55007870 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561c550078b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561c550078c0 <col:39> 'const char *' lvalue ParmVar 0x561c54fddd80 'keyword' 'const char *'
|     | |-BinaryOperator 0x561c55007970 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561c55007920 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561c550078e0 <col:48> 'int' lvalue ParmVar 0x561c54fdde00 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561c55007958 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561c55007938 <col:56> 'const int' lvalue Var 0x561c54fd4970 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x561c55007990 <col:68> 'P' lvalue ParmVar 0x561c54fdde78 'parser' 'P'
|     `-ReturnStmt 0x561c55007a18 <line:575:9, col:17>
|       `-UnaryOperator 0x561c55007a00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c550079f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fde448 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x561c54fde068 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fde0e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fde3a8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561c54fde1a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fde220 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fde2c8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x561c55007b98 <col:62, line:592:5>
|     `-ReturnStmt 0x561c55007b88 <line:591:9, col:51>
|       `-CallExpr 0x561c55007b48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007ac8 <col:30> 'const char *' lvalue ParmVar 0x561c54fde1a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c55007ae8 <col:39> 'int' 0
|         |-DeclRefExpr 0x561c55007b08 <col:42> 'P' lvalue ParmVar 0x561c54fde220 'parser' 'P'
|         `-DeclRefExpr 0x561c55007b28 <col:50> 'T' lvalue ParmVar 0x561c54fde2c8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fde928 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x561c54fde4b8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fde538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fde888 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561c54fde5f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fde678 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fde6f0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fde798 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x561c55007d90 <col:73, line:597:5>
|     |-CallExpr 0x561c55007d10 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55007bb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561c55007bf0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561c55007c00 <col:39> 'const char *' lvalue ParmVar 0x561c54fde5f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x561c55007cb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561c55007c60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561c55007c20 <col:48> 'int' lvalue ParmVar 0x561c54fde678 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561c55007c98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561c55007c78 <col:56> 'const int' lvalue Var 0x561c54fd4970 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561c55007cd0 <col:68> 'P' lvalue ParmVar 0x561c54fde6f0 'parser' 'P'
|     | `-DeclRefExpr 0x561c55007cf0 <col:76> 'T' lvalue ParmVar 0x561c54fde798 'x' 'T &'
|     `-ReturnStmt 0x561c55007d80 <line:596:9, col:17>
|       `-UnaryOperator 0x561c55007d68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55007d58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fdeed8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x561c54fde9a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdea18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdee38 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x561c54fdead8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdeb50 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fded10 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561c55007f00 <col:65, line:614:5>
|     `-ReturnStmt 0x561c55007ef0 <line:613:9, col:46>
|       `-CallExpr 0x561c55007eb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007dc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007e30 <col:25> 'const char *' lvalue ParmVar 0x561c54fdead8 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c55007e50 <col:34> 'int' 0
|         |-DeclRefExpr 0x561c55007e70 <col:37> 'P' lvalue ParmVar 0x561c54fdeb50 'parser' 'P'
|         `-DeclRefExpr 0x561c55007e90 <col:45> 'Vector<T>' lvalue ParmVar 0x561c54fded10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561c54fdf308 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x561c54fdef48 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fdf268 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x561c54fdf000 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdf150 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561c55008120 <col:55, line:618:5>
|     `-ReturnStmt 0x561c55008110 <line:617:9, col:55>
|       `-CallExpr 0x561c550080d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55007f28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c55007f98 <col:25> 'const char *' lvalue ParmVar 0x561c54fdf000 'keyword' 'const char *'
|         |-IntegerLiteral 0x561c55007fb8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x561c55008090 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561c550080b0 <col:54> 'Vector<T>' lvalue ParmVar 0x561c54fdf150 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561c54fdf8d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x561c54fdf370 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdf3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdf838 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561c54fdf4a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdf528 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdf5a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fdf6f0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561c55008318 <col:76, line:623:5>
|     |-CallExpr 0x561c55008298 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561c55008138 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x561c55008178 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x561c55008188 <col:34> 'const char *' lvalue ParmVar 0x561c54fdf4a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x561c55008238 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x561c550081e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561c550081a8 <col:43> 'int' lvalue ParmVar 0x561c54fdf528 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561c55008220 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561c55008200 <col:51> 'const int' lvalue Var 0x561c54fd4970 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561c55008258 <col:63> 'P' lvalue ParmVar 0x561c54fdf5a0 'parser' 'P'
|     | `-DeclRefExpr 0x561c55008278 <col:71> 'Vector<T>' lvalue ParmVar 0x561c54fdf6f0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x561c55008308 <line:622:9, col:17>
|       `-UnaryOperator 0x561c550082f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c550082e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fdfe18 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x561c54fdf950 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fdf9c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fdfd78 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x561c54fdfa88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fdfb08 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fdfc50 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561c55008580 <col:66, line:627:5>
|     `-ReturnStmt 0x561c55008570 <line:626:9, col:59>
|       `-CallExpr 0x561c55008530 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561c55008348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561c550083b8 <col:25> 'const char *' lvalue ParmVar 0x561c54fdfa88 'keyword' 'const char *'
|         |-DeclRefExpr 0x561c550083d8 <col:34> 'int' lvalue ParmVar 0x561c54fdfb08 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x561c550084f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561c55008510 <col:58> 'Vector<T>' lvalue ParmVar 0x561c54fdfc50 'x' 'Vector<T> &'
|-CXXMethodDecl 0x561c54fdfea8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x561c55008600 <col:25, line:633:5>
|   `-ReturnStmt 0x561c550085f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x561c550085d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561c550085a8 <col:16> 'const bool' lvalue ->_status 0x561c54fed378
|         `-CXXThisExpr 0x561c55008598 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561c54fe0028 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x561c54fdff60 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x561c550086e8 <col:27, line:639:5>
|   |-BinaryOperator 0x561c55008690 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561c55008618 <col:9> 'bool' lvalue ParmVar 0x561c54fdff60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561c55008678 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561c55008648 <col:13> 'bool' lvalue ->_status 0x561c54fed378
|   |     `-CXXThisExpr 0x561c55008638 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561c550086d8 <line:638:9, col:17>
|     `-UnaryOperator 0x561c550086c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c550086b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x561c54fe01a8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561c54fe00e8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x561c550087d8 <col:39, line:644:5>
|   |-BinaryOperator 0x561c55008780 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561c55008708 <col:9> 'bool' lvalue ParmVar 0x561c54fe00e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561c55008768 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561c55008738 <col:13> 'const bool' lvalue ->_status 0x561c54fed378
|   |     `-CXXThisExpr 0x561c55008728 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561c550087c8 <line:643:9, col:17>
|     `-UnaryOperator 0x561c550087b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c550087a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561c54fe0270 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x561c55008880 <col:30, line:651:5>
|   `-ReturnStmt 0x561c55008870 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x561c55008858 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561c55008828 <col:16> 'bool' lvalue ->_read_status 0x561c54ee3730
|         `-ImplicitCastExpr 0x561c55008808 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x561c550087f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561c54fe03b8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x561c54fe0328 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x561c55008988 <col:32, line:658:5>
|   |-BinaryOperator 0x561c55008930 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561c55008898 <col:9> 'bool' lvalue ParmVar 0x561c54fe0328 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561c55008918 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561c550088e8 <col:13> 'bool' lvalue ->_read_status 0x561c54ee3730
|   |     `-ImplicitCastExpr 0x561c550088c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561c550088b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561c55008978 <line:657:9, col:17>
|     `-UnaryOperator 0x561c55008960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c55008950 <col:17> 'Args *' this
|-CXXMethodDecl 0x561c54fe0508 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561c54fe0478 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x561c55008a98 <col:44, line:663:5>
|   |-BinaryOperator 0x561c55008a40 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561c550089a8 <col:9> 'bool' lvalue ParmVar 0x561c54fe0478 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561c55008a28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561c550089f8 <col:13> 'bool' lvalue ->_read_status 0x561c54ee3730
|   |     `-ImplicitCastExpr 0x561c550089d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561c550089c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561c55008a88 <line:662:9, col:17>
|     `-UnaryOperator 0x561c55008a70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c55008a60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561c54fe05d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x561c54fe0698 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x561c54fe0760 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x561c54fe0828 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x561c54fe0b38 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x561c54fe08c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fe0a98 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x561c54fe09a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x561c55008e50 <col:19, line:706:5>
|     `-IfStmt 0x561c55008e28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x561c55008b98 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x561c55008d58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x561c55008d28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x561c55008ce8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x561c55008bf0 <col:42> '<bound member function type>' ->simple_slot 0x561c55001fe0
|       |     | `-CXXThisExpr 0x561c55008be0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x561c55008c88 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x561c55008c40 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x561c54d6cf18
|       |     | `-DeclRefExpr 0x561c55008c20 <col:55> 'T' lvalue ParmVar 0x561c54fe09a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x561c55008cc8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x561c55008e18 <line:705:13, col:34>
|         `-CallExpr 0x561c55008df0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x561c55008d78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x561c55008dd0 <col:33> 'T' lvalue ParmVar 0x561c54fe09a8 'x' 'T &'
|-FunctionTemplateDecl 0x561c54fe0e08 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x561c54fe0b98 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fe0d68 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x561c54fe0c78 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x561c55009230 <col:31, line:717:5>
|     |-DeclStmt 0x561c55008f90 <line:713:9, col:23>
|     | `-VarDecl 0x561c55008e78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x561c55008f68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561c55008ef0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561c55008f48 <col:21> 'T' lvalue ParmVar 0x561c54fe0c78 'x' 'T &'
|     |-IfStmt 0x561c550091e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x561c55009088 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x561c550091c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561c55009160 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561c550090f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|     |   | `-DeclRefExpr 0x561c550090d0 <col:14> 'T *' lvalue Var 0x561c55008e78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x561c550091a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x561c55009218 <line:716:9, col:16>
|       `-DeclRefExpr 0x561c550091f8 <col:16> 'T *' lvalue Var 0x561c55008e78 's' 'T *'
|-FunctionTemplateDecl 0x561c54fe1218 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x561c54fe0e68 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fe0ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561c54fe1178 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x561c54fe0fc8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x561c54fe1068 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x561c55009540 <col:37, line:726:5>
|     |-IfStmt 0x561c550094d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x561c550094f0 <line:723:13, col:26>
|     | | `-VarDecl 0x561c55009298 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x561c55009388 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x561c55009310 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x561c55009368 <col:25> 'T' lvalue ParmVar 0x561c54fe0fc8 'x' 'T &'
|     | |-DeclRefExpr 0x561c550093b0 <col:16> 'T *' lvalue Var 0x561c55009298 's' 'T *'
|     | `-BinaryOperator 0x561c550094b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561c55009460 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561c550093f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|     |   | `-DeclRefExpr 0x561c550093d0 <col:14> 'T *' lvalue Var 0x561c55009298 's' 'T *'
|     |   `-DeclRefExpr 0x561c55009490 <col:18> 'const V' lvalue ParmVar 0x561c54fe1068 'value' 'const V &'
|     `-ReturnStmt 0x561c55009530 <line:725:9, col:17>
|       `-UnaryOperator 0x561c55009518 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561c55009508 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561c54fe1618 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x561c54fe1280 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561c54fe1578 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x561c54fe1330 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fe13b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fe1458 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x561c5500a360 <col:65, line:737:5>
|     |-DeclStmt 0x561c550095d8 <line:732:9, col:26>
|     | `-VarDecl 0x561c55009570 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561c5500a328 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x561c5500a348 <line:733:13, col:58>
|       | `-VarDecl 0x561c55009600 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561c550097e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561c550097b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561c55009798 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561c55009778 <col:26, col:58> 'String' (CXXTemporary 0x561c55009778)
|       |           `-CXXMemberCallExpr 0x561c55009708 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561c55009678 <col:26> '<bound member function type>' ->find 0x561c550015f8
|       |             | `-CXXThisExpr 0x561c55009668 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561c55009740 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c550096a8 <col:31> 'const char *' lvalue ParmVar 0x561c54fe1330 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561c55009758 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c550096c8 <col:40> 'int' lvalue ParmVar 0x561c54fe13b0 'flags' 'int'
|       |             `-DeclRefExpr 0x561c550096e8 <col:47> 'Args::Slot *' lvalue Var 0x561c55009570 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561c55009898 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561c55009880 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561c55009860 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561c55009830 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |       `-ImplicitCastExpr 0x561c55009818 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561c550097f8 <col:20> 'String' lvalue Var 0x561c55009600 'str' 'String'
|       `-CompoundStmt 0x561c5500a308 <col:61, line:736:9>
|         |-DeclStmt 0x561c55009d50 <line:734:13, col:76>
|         | `-VarDecl 0x561c550098e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561c55009d20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561c55009c90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561c55009cd8 <col:60> 'T' lvalue ParmVar 0x561c54fe1458 'variable' 'T &'
|         |     `-UnaryOperator 0x561c55009d08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561c55009cf8 <col:71> 'Args *' this
|         `-CallExpr 0x561c5500a2d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x561c55009d78 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|           | `-CXXThisExpr 0x561c55009d68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561c5500a298 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561c55009da8 <col:23> 'T *' lvalue Var 0x561c550098e8 's' 'T *'
|           | `-CallExpr 0x561c5500a258 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561c5500a030 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x561c5500a130 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x561c5500a150 <col:86> 'String' lvalue Var 0x561c55009600 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561c5500a200 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561c5500a190 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|           |   | `-DeclRefExpr 0x561c5500a170 <col:92> 'T *' lvalue Var 0x561c550098e8 's' 'T *'
|           |   `-UnaryOperator 0x561c5500a240 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561c5500a230 <col:96> 'Args *' this
|           `-DeclRefExpr 0x561c5500a2b8 <col:103> 'Args::Slot *' lvalue Var 0x561c55009570 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54fe1b68 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561c54fe1688 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fe1708 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561c54fe1ac8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561c54fe17c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fe1848 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fe18e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x561c54fe1988 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x561c5500b200 <col:88, line:745:5>
|     |-DeclStmt 0x561c5500a3f8 <line:741:9, col:26>
|     | `-VarDecl 0x561c5500a390 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561c5500a618 <line:742:9, col:55>
|     | `-VarDecl 0x561c5500a420 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561c5500a600 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561c5500a5d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561c5500a5b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561c5500a598 <col:22, col:54> 'String' (CXXTemporary 0x561c5500a598)
|     |           `-CXXMemberCallExpr 0x561c5500a528 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561c5500a498 <col:22> '<bound member function type>' ->find 0x561c550015f8
|     |             | `-CXXThisExpr 0x561c5500a488 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561c5500a560 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561c5500a4c8 <col:27> 'const char *' lvalue ParmVar 0x561c54fe17c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561c5500a578 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561c5500a4e8 <col:36> 'int' lvalue ParmVar 0x561c54fe1848 'flags' 'int'
|     |             `-DeclRefExpr 0x561c5500a508 <col:43> 'Args::Slot *' lvalue Var 0x561c5500a390 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561c5500a9f0 <line:743:9, col:72>
|     | `-VarDecl 0x561c5500a668 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561c5500a9c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561c5500a930 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561c5500a978 <col:56> 'T' lvalue ParmVar 0x561c54fe18e8 'variable' 'T &'
|     |     `-UnaryOperator 0x561c5500a9a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561c5500a998 <col:67> 'Args *' this
|     `-CallExpr 0x561c5500b1d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x561c5500aa18 <col:9> '<bound member function type>' ->postparse 0x561c55001808
|       | `-CXXThisExpr 0x561c5500aa08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561c5500b190 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561c5500aa48 <col:19> 'T *' lvalue Var 0x561c5500a668 's' 'T *'
|       | `-ParenExpr 0x561c5500b170 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x561c5500b140 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561c5500b128 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561c5500b110 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561c5500b0f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561c5500b0c0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |     |       `-ImplicitCastExpr 0x561c5500b0a8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561c5500aa68 <col:25> 'String' lvalue Var 0x561c5500a420 'str' 'String'
|       |     |-CallExpr 0x561c5500af18 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561c5500acf0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x561c5500adf0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x561c5500ae10 <col:89> 'String' lvalue Var 0x561c5500a420 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561c5500aec0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561c5500ae50 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|       |     | | `-DeclRefExpr 0x561c5500ae30 <col:95> 'T *' lvalue Var 0x561c5500a668 's' 'T *'
|       |     | `-UnaryOperator 0x561c5500af00 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561c5500aef0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x561c5500b088 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x561c5500b068 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x561c5500b038 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561c5500afe8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561c5500af78 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|       |         | | `-DeclRefExpr 0x561c5500af58 <col:109> 'T *' lvalue Var 0x561c5500a668 's' 'T *'
|       |         | `-DeclRefExpr 0x561c5500b018 <col:113> 'const V' lvalue ParmVar 0x561c54fe1988 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561c5500b058 <col:120> 'bool' true
|       `-DeclRefExpr 0x561c5500b1b0 <col:128> 'Args::Slot *' lvalue Var 0x561c5500a390 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54fe2098 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x561c54fe1be0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fe1c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54fe1ff8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561c54fe1d18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fe1d98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fe1e10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fe1eb8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x561c5500e0d0 <col:75, line:754:5>
|     |-DeclStmt 0x561c5500b2a8 <line:749:9, col:26>
|     | `-VarDecl 0x561c5500b240 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561c5500bdc0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x561c5500bde0 <line:750:13, col:58>
|       | `-VarDecl 0x561c5500b2d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561c5500b4b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561c5500b480 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561c5500b468 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561c5500b448 <col:26, col:58> 'String' (CXXTemporary 0x561c5500b448)
|       |           `-CXXMemberCallExpr 0x561c5500b3d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561c5500b348 <col:26> '<bound member function type>' ->find 0x561c550015f8
|       |             | `-CXXThisExpr 0x561c5500b338 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561c5500b410 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500b378 <col:31> 'const char *' lvalue ParmVar 0x561c54fe1d18 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561c5500b428 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500b398 <col:40> 'int' lvalue ParmVar 0x561c54fe1d98 'flags' 'int'
|       |             `-DeclRefExpr 0x561c5500b3b8 <col:47> 'Args::Slot *' lvalue Var 0x561c5500b240 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561c5500b568 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561c5500b550 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561c5500b530 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561c5500b500 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |       `-ImplicitCastExpr 0x561c5500b4e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561c5500b4c8 <col:20> 'String' lvalue Var 0x561c5500b2d0 'str' 'String'
|       `-CompoundStmt 0x561c5500bda0 <col:61, line:753:9>
|         |-DeclStmt 0x561c5500b940 <line:751:13, col:63>
|         | `-VarDecl 0x561c5500b5b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561c5500b910 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561c5500b880 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561c5500b8c8 <col:47> 'T' lvalue ParmVar 0x561c54fe1eb8 'variable' 'T &'
|         |     `-UnaryOperator 0x561c5500b8f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561c5500b8e8 <col:58> 'Args *' this
|         `-CallExpr 0x561c5500bd70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x561c5500b968 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|           | `-CXXThisExpr 0x561c5500b958 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561c5500bd30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561c5500b998 <col:23> 'T *' lvalue Var 0x561c5500b5b8 's' 'T *'
|           | `-CallExpr 0x561c5500bcf0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561c5500bb80 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561c5500bbc8 <col:56> 'P' lvalue ParmVar 0x561c54fe1e10 'parser' 'P'
|           |   |-DeclRefExpr 0x561c5500bbe8 <col:64> 'String' lvalue Var 0x561c5500b2d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561c5500bc98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561c5500bc28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|           |   | `-DeclRefExpr 0x561c5500bc08 <col:70> 'T *' lvalue Var 0x561c5500b5b8 's' 'T *'
|           |   `-UnaryOperator 0x561c5500bcd8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561c5500bcc8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x561c5500bd50 <col:81> 'Args::Slot *' lvalue Var 0x561c5500b240 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54fe9d88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561c54fe2110 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561c54fe2188 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x561c54fe2208 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561c54fe9ce8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561c54fe9960 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fe99e0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fe9a58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fe9af8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x561c54fe9b98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x561c5500ee58 <col:98, line:762:5>
|     |-DeclStmt 0x561c5500e168 <line:758:9, col:26>
|     | `-VarDecl 0x561c5500e100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561c5500e388 <line:759:9, col:55>
|     | `-VarDecl 0x561c5500e190 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561c5500e370 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561c5500e340 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561c5500e328 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561c5500e308 <col:22, col:54> 'String' (CXXTemporary 0x561c5500e308)
|     |           `-CXXMemberCallExpr 0x561c5500e298 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561c5500e208 <col:22> '<bound member function type>' ->find 0x561c550015f8
|     |             | `-CXXThisExpr 0x561c5500e1f8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561c5500e2d0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561c5500e238 <col:27> 'const char *' lvalue ParmVar 0x561c54fe9960 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561c5500e2e8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561c5500e258 <col:36> 'int' lvalue ParmVar 0x561c54fe99e0 'flags' 'int'
|     |             `-DeclRefExpr 0x561c5500e278 <col:43> 'Args::Slot *' lvalue Var 0x561c5500e100 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561c5500e7a0 <line:760:9, col:59>
|     | `-VarDecl 0x561c5500e3d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561c5500e770 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561c5500e6e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561c5500e728 <col:43> 'T' lvalue ParmVar 0x561c54fe9af8 'variable' 'T &'
|     |     `-UnaryOperator 0x561c5500e758 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561c5500e748 <col:54> 'Args *' this
|     `-CallExpr 0x561c5500ee28 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x561c5500e7c8 <col:9> '<bound member function type>' ->postparse 0x561c55001808
|       | `-CXXThisExpr 0x561c5500e7b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561c5500ede8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561c5500e7f8 <col:19> 'T *' lvalue Var 0x561c5500e3d8 's' 'T *'
|       | `-ParenExpr 0x561c5500edc8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x561c5500ed98 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561c5500ed80 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561c5500ed68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561c5500ed48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561c5500ed18 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |     |       `-ImplicitCastExpr 0x561c5500ed00 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561c5500e818 <col:25> 'String' lvalue Var 0x561c5500e190 'str' 'String'
|       |     |-CallExpr 0x561c5500eb70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561c5500ea00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x561c5500ea48 <col:59> 'P' lvalue ParmVar 0x561c54fe9a58 'parser' 'P'
|       |     | |-DeclRefExpr 0x561c5500ea68 <col:67> 'String' lvalue Var 0x561c5500e190 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561c5500eb18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561c5500eaa8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|       |     | | `-DeclRefExpr 0x561c5500ea88 <col:73> 'T *' lvalue Var 0x561c5500e3d8 's' 'T *'
|       |     | `-UnaryOperator 0x561c5500eb58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561c5500eb48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x561c5500ece0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x561c5500ecc0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x561c5500ec90 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561c5500ec40 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561c5500ebd0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|       |         | | `-DeclRefExpr 0x561c5500ebb0 <col:87> 'T *' lvalue Var 0x561c5500e3d8 's' 'T *'
|       |         | `-DeclRefExpr 0x561c5500ec70 <col:91> 'const V' lvalue ParmVar 0x561c54fe9b98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561c5500ecb0 <col:98> 'bool' true
|       `-DeclRefExpr 0x561c5500ee08 <col:106> 'Args::Slot *' lvalue Var 0x561c5500e100 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54fea3f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x561c54fe9e08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54fe9e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561c54fe9f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561c54fea358 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561c54fe9fd0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fea050 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fea0c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x561c54fea168 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x561c54fea208 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x561c5500fe38 <col:60, line:773:5>
|     |-DeclStmt 0x561c5500ef00 <line:767:9, col:26>
|     | `-VarDecl 0x561c5500ee98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561c5500fe00 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x561c5500fe20 <line:768:13, col:58>
|       | `-VarDecl 0x561c5500ef28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561c5500f108 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561c5500f0d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561c5500f0c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561c5500f0a0 <col:26, col:58> 'String' (CXXTemporary 0x561c5500f0a0)
|       |           `-CXXMemberCallExpr 0x561c5500f030 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561c5500efa0 <col:26> '<bound member function type>' ->find 0x561c550015f8
|       |             | `-CXXThisExpr 0x561c5500ef90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561c5500f068 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500efd0 <col:31> 'const char *' lvalue ParmVar 0x561c54fe9fd0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561c5500f080 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500eff0 <col:40> 'int' lvalue ParmVar 0x561c54fea050 'flags' 'int'
|       |             `-DeclRefExpr 0x561c5500f010 <col:47> 'Args::Slot *' lvalue Var 0x561c5500ee98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561c5500f1c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561c5500f1a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561c5500f188 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561c5500f158 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |       `-ImplicitCastExpr 0x561c5500f140 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561c5500f120 <col:20> 'String' lvalue Var 0x561c5500ef28 'str' 'String'
|       `-CompoundStmt 0x561c5500fdd8 <col:61, line:772:9>
|         |-DeclStmt 0x561c5500f500 <line:769:13, col:66>
|         | `-VarDecl 0x561c5500f218 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x561c5500f4d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561c5500f440 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561c5500f488 <col:49> 'T1' lvalue ParmVar 0x561c54fea168 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x561c5500f4b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561c5500f4a8 <col:61> 'Args *' this
|         |-DeclStmt 0x561c5500f870 <line:770:13, col:66>
|         | `-VarDecl 0x561c5500f588 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x561c5500f840 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561c5500f7b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561c5500f7f8 <col:49> 'T2' lvalue ParmVar 0x561c54fea208 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x561c5500f828 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561c5500f818 <col:61> 'Args *' this
|         `-CallExpr 0x561c5500fda8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x561c5500f898 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|           | `-CXXThisExpr 0x561c5500f888 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561c5500fd68 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x561c5500f908 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x561c5500f8c8 <col:23> 'T1 *' lvalue Var 0x561c5500f218 's1' 'T1 *'
|           | | `-DeclRefExpr 0x561c5500f8e8 <col:29> 'T2 *' lvalue Var 0x561c5500f588 's2' 'T2 *'
|           | `-CallExpr 0x561c5500fd20 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561c5500faf0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561c5500fb38 <col:63> 'P' lvalue ParmVar 0x561c54fea0c8 'parser' 'P'
|           |   |-DeclRefExpr 0x561c5500fb58 <col:71> 'String' lvalue Var 0x561c5500ef28 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561c5500fc08 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561c5500fb98 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|           |   | `-DeclRefExpr 0x561c5500fb78 <col:77> 'T1 *' lvalue Var 0x561c5500f218 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x561c5500fcc8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561c5500fc58 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|           |   | `-DeclRefExpr 0x561c5500fc38 <col:82> 'T2 *' lvalue Var 0x561c5500f588 's2' 'T2 *'
|           |   `-UnaryOperator 0x561c5500fd08 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561c5500fcf8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x561c5500fd88 <col:94> 'Args::Slot *' lvalue Var 0x561c5500ee98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54fea7e8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x561c54fea478 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54fea748 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561c54fea530 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fea5b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561c54fea628 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561c55010350 <col:67, line:780:5>
|     |-DeclStmt 0x561c5500fed0 <line:777:9, col:26>
|     | `-VarDecl 0x561c5500fe68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561c55010318 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x561c55010338 <line:778:13, col:58>
|       | `-VarDecl 0x561c5500fef8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561c550100d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561c550100a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561c55010090 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561c55010070 <col:26, col:58> 'String' (CXXTemporary 0x561c55010070)
|       |           `-CXXMemberCallExpr 0x561c55010000 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561c5500ff70 <col:26> '<bound member function type>' ->find 0x561c550015f8
|       |             | `-CXXThisExpr 0x561c5500ff60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561c55010038 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500ffa0 <col:31> 'const char *' lvalue ParmVar 0x561c54fea530 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561c55010050 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561c5500ffc0 <col:40> 'int' lvalue ParmVar 0x561c54fea5b0 'flags' 'int'
|       |             `-DeclRefExpr 0x561c5500ffe0 <col:47> 'Args::Slot *' lvalue Var 0x561c5500fe68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561c55010190 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561c55010178 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561c55010158 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561c55010128 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|       |       `-ImplicitCastExpr 0x561c55010110 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561c550100f0 <col:20> 'String' lvalue Var 0x561c5500fef8 'str' 'String'
|       `-CallExpr 0x561c550102e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x561c550101b8 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|         | `-CXXThisExpr 0x561c550101a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x561c55010298 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x561c55010208 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x561c550101e8 <col:23> 'P' lvalue ParmVar 0x561c54fea628 'parser' 'P'
|         | |-DeclRefExpr 0x561c55010250 <col:36> 'String' lvalue Var 0x561c5500fef8 'str' 'String'
|         | `-UnaryOperator 0x561c55010280 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x561c55010270 <col:42> 'Args *' this
|         `-DeclRefExpr 0x561c550102c8 <col:49> 'Args::Slot *' lvalue Var 0x561c5500fe68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561c54feab88 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561c54fea858 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561c54feaae8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561c54fea910 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54fea990 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561c54feaa08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x561c55010cc0 <col:71, line:792:5>
|     |-DeclStmt 0x561c550103e8 <line:784:9, col:26>
|     | `-VarDecl 0x561c55010380 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561c550104b8 <line:785:9, col:29>
|     | `-VarDecl 0x561c55010418 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561c550104a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561c55010480 <col:28> 'int' 1
|     |-WhileStmt 0x561c55010b70 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x561c55010b90 <line:786:16, col:61>
|     | | `-VarDecl 0x561c550104e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561c550106c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561c55010690 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561c55010678 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561c55010658 <col:29, col:61> 'String' (CXXTemporary 0x561c55010658)
|     | |           `-CXXMemberCallExpr 0x561c550105e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561c55010558 <col:29> '<bound member function type>' ->find 0x561c550015f8
|     | |             | `-CXXThisExpr 0x561c55010548 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561c55010620 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c55010588 <col:34> 'const char *' lvalue ParmVar 0x561c54fea910 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561c55010638 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c550105a8 <col:43> 'int' lvalue ParmVar 0x561c54fea990 'flags' 'int'
|     | |             `-DeclRefExpr 0x561c550105c8 <col:50> 'Args::Slot *' lvalue Var 0x561c55010380 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561c55010778 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561c55010760 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561c55010740 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561c55010710 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|     | |       `-ImplicitCastExpr 0x561c550106f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561c550106d8 <col:23> 'String' lvalue Var 0x561c550104e0 'str' 'String'
|     | `-CompoundStmt 0x561c55010b48 <col:64, line:790:9>
|     |   |-CallExpr 0x561c550108d0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x561c550107a0 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|     |   | | `-CXXThisExpr 0x561c55010790 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561c55010880 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561c550107f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561c550107d0 <col:23> 'P' lvalue ParmVar 0x561c54feaa08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561c55010838 <col:36> 'String' lvalue Var 0x561c550104e0 'str' 'String'
|     |   | | `-UnaryOperator 0x561c55010868 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561c55010858 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x561c550108b0 <col:49> 'Args::Slot *' lvalue Var 0x561c55010380 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561c55010a68 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561c55010900 <col:13> 'int' lvalue Var 0x561c55010418 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561c55010a50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561c55010a30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561c55010998 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561c55010978 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561c55010960 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561c55010920 <col:28> 'int' lvalue Var 0x561c55010418 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561c55010940 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561c55010a18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561c550109e8 <col:49> 'bool' lvalue ->_read_status 0x561c54ee3730
|     |   |         `-ImplicitCastExpr 0x561c550109c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561c550109b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561c55010b18 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561c55010a88 <col:13> 'int' lvalue ParmVar 0x561c54fea990 'flags' 'int'
|     |     `-UnaryOperator 0x561c55010b00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561c55010ae8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561c55010ac8 <col:23> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561c55010ca0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561c55010bd8 <col:9> 'bool' lvalue ->_read_status 0x561c54ee3730
|       | `-ImplicitCastExpr 0x561c55010bb8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561c55010ba8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561c55010c80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561c55010c60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561c55010c48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561c55010c08 <col:25> 'int' lvalue Var 0x561c55010418 'read_status' 'int'
|           `-IntegerLiteral 0x561c55010c28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561c54feb068 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561c54feabf8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54feac78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54feafc8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561c54fead38 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54feadb8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561c54feae30 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x561c54feaed8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x561c55011c50 <col:84, line:805:5>
|     |-DeclStmt 0x561c55010d68 <line:796:9, col:26>
|     | `-VarDecl 0x561c55010d00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561c55010e38 <line:797:9, col:29>
|     | `-VarDecl 0x561c55010d98 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561c55010e20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561c55010e00 <col:28> 'int' 1
|     |-DeclStmt 0x561c55011170 <line:798:9, col:71>
|     | `-VarDecl 0x561c55010e88 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561c55011140 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561c550110b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x561c550110f8 <col:55> 'T' lvalue ParmVar 0x561c54feaed8 'variable' 'T &'
|     |     `-UnaryOperator 0x561c55011128 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561c55011118 <col:66> 'Args *' this
|     |-WhileStmt 0x561c55011b00 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x561c55011b20 <line:799:16, col:61>
|     | | `-VarDecl 0x561c55011198 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561c55011378 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561c55011348 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561c55011330 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561c55011310 <col:29, col:61> 'String' (CXXTemporary 0x561c55011310)
|     | |           `-CXXMemberCallExpr 0x561c550112a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561c55011210 <col:29> '<bound member function type>' ->find 0x561c550015f8
|     | |             | `-CXXThisExpr 0x561c55011200 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561c550112d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c55011240 <col:34> 'const char *' lvalue ParmVar 0x561c54fead38 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561c550112f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c55011260 <col:43> 'int' lvalue ParmVar 0x561c54feadb8 'flags' 'int'
|     | |             `-DeclRefExpr 0x561c55011280 <col:50> 'Args::Slot *' lvalue Var 0x561c55010d00 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561c55011430 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561c55011418 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561c550113f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561c550113c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|     | |       `-ImplicitCastExpr 0x561c550113b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561c55011390 <col:23> 'String' lvalue Var 0x561c55011198 'str' 'String'
|     | `-CompoundStmt 0x561c55011ad8 <col:64, line:803:9>
|     |   |-CallExpr 0x561c55011860 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x561c55011458 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|     |   | | `-CXXThisExpr 0x561c55011448 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x561c55011820 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x561c55011488 <col:23> 'T *' lvalue Var 0x561c55010e88 's' 'T *'
|     |   | | `-CallExpr 0x561c550117e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x561c55011670 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x561c550116b8 <col:56> 'P' lvalue ParmVar 0x561c54feae30 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x561c550116d8 <col:64> 'String' lvalue Var 0x561c55011198 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x561c55011788 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x561c55011718 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|     |   | |   | `-DeclRefExpr 0x561c550116f8 <col:70> 'T *' lvalue Var 0x561c55010e88 's' 'T *'
|     |   | |   `-UnaryOperator 0x561c550117c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x561c550117b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x561c55011840 <col:81> 'Args::Slot *' lvalue Var 0x561c55010d00 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561c550119f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561c55011890 <col:13> 'int' lvalue Var 0x561c55010d98 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561c550119e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561c550119c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561c55011928 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561c55011908 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561c550118f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561c550118b0 <col:28> 'int' lvalue Var 0x561c55010d98 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561c550118d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561c550119a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561c55011978 <col:49> 'bool' lvalue ->_read_status 0x561c54ee3730
|     |   |         `-ImplicitCastExpr 0x561c55011958 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561c55011948 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561c55011aa8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561c55011a18 <col:13> 'int' lvalue ParmVar 0x561c54feadb8 'flags' 'int'
|     |     `-UnaryOperator 0x561c55011a90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561c55011a78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561c55011a58 <col:23> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561c55011c30 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561c55011b68 <col:9> 'bool' lvalue ->_read_status 0x561c54ee3730
|       | `-ImplicitCastExpr 0x561c55011b48 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561c55011b38 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561c55011c10 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561c55011bf0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561c55011bd8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561c55011b98 <col:25> 'int' lvalue Var 0x561c55010d98 'read_status' 'int'
|           `-IntegerLiteral 0x561c55011bb8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561c54feb648 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x561c54feb0e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561c54feb158 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561c54feb5a8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561c54feb218 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561c54feb298 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x561c54feb310 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x561c54feb460 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x561c55012a58 <col:87, line:821:5>
|     |-DeclStmt 0x561c55011d00 <line:809:9, col:26>
|     | `-VarDecl 0x561c55011c98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561c55011dd0 <line:810:9, col:29>
|     | `-VarDecl 0x561c55011d30 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561c55011db8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561c55011d98 <col:28> 'int' 1
|     |-DeclStmt 0x561c55012018 <line:811:9, col:38>
|     | `-VarDecl 0x561c55011f00 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x561c55011ff0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561c55011f78 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561c55011fd0 <col:29> 'Vector<T>' lvalue ParmVar 0x561c54feb460 'variable' 'Vector<T> &'
|     |-WhileStmt 0x561c55012908 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x561c55012928 <line:812:16, col:61>
|     | | `-VarDecl 0x561c55012040 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561c55012220 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561c550121f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561c550121d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561c550121b8 <col:29, col:61> 'String' (CXXTemporary 0x561c550121b8)
|     | |           `-CXXMemberCallExpr 0x561c55012148 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561c550120b8 <col:29> '<bound member function type>' ->find 0x561c550015f8
|     | |             | `-CXXThisExpr 0x561c550120a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561c55012180 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c550120e8 <col:34> 'const char *' lvalue ParmVar 0x561c54feb218 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561c55012198 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561c55012108 <col:43> 'int' lvalue ParmVar 0x561c54feb298 'flags' 'int'
|     | |             `-DeclRefExpr 0x561c55012128 <col:50> 'Args::Slot *' lvalue Var 0x561c55011c98 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561c550122d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561c550122c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561c550122a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561c55012270 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561c54d2fee8
|     | |       `-ImplicitCastExpr 0x561c55012258 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561c55012238 <col:23> 'String' lvalue Var 0x561c55012040 'str' 'String'
|     | `-CompoundStmt 0x561c550128d0 <col:64, line:819:9>
|     |   |-DeclStmt 0x561c55012398 <line:813:13, col:23>
|     |   | `-VarDecl 0x561c55012300 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x561c55012378 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x561c55012518 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x561c550123c0 <col:13> '<bound member function type>' ->postparse 0x561c55001808
|     |   | | `-CXXThisExpr 0x561c550123b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561c550124c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561c55012410 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561c550123f0 <col:23> 'P' lvalue ParmVar 0x561c54feb310 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561c55012458 <col:36> 'String' lvalue Var 0x561c55012040 'str' 'String'
|     |   | | |-DeclRefExpr 0x561c55012478 <col:41> 'T' lvalue Var 0x561c55012300 'sx' 'T'
|     |   | | `-UnaryOperator 0x561c550124a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561c55012498 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x561c550124f8 <col:53> 'Args::Slot *' lvalue Var 0x561c55011c98 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x561c55012670 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x561c550125a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x561c55012578 <col:17> 'bool' lvalue ->_read_status 0x561c54ee3730
|     |   | |   `-ImplicitCastExpr 0x561c55012558 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x561c55012548 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x561c55012648 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x561c550125e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x561c550125c0 <col:17> 'Vector<T> *' lvalue Var 0x561c55011f00 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x561c55012628 <col:30> 'T' lvalue Var 0x561c55012300 'sx' 'T'
|     |   |-BinaryOperator 0x561c550127f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561c55012688 <col:13> 'int' lvalue Var 0x561c55011d30 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561c550127d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561c550127b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561c55012720 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561c55012700 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561c550126e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561c550126a8 <col:28> 'int' lvalue Var 0x561c55011d30 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561c550126c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561c550127a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561c55012770 <col:49> 'bool' lvalue ->_read_status 0x561c54ee3730
|     |   |         `-ImplicitCastExpr 0x561c55012750 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561c55012740 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561c550128a0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561c55012810 <col:13> 'int' lvalue ParmVar 0x561c54feb298 'flags' 'int'
|     |     `-UnaryOperator 0x561c55012888 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561c55012870 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561c55012850 <col:23> 'const int' lvalue Var 0x561c54fd4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561c55012a38 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561c55012970 <col:9> 'bool' lvalue ->_read_status 0x561c54ee3730
|       | `-ImplicitCastExpr 0x561c55012950 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561c55012940 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561c55012a18 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561c550129f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561c550129e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561c550129a0 <col:25> 'int' lvalue Var 0x561c55011d30 'read_status' 'int'
|           `-IntegerLiteral 0x561c550129c0 <col:40> 'int' 1
|-AccessSpecDecl 0x561c54feb6c0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x561c54feb6e8 prev 0x561c54fd2988 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x561c54feb7e0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x561c54feb8d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x561c55012a90 <col:16, line:828:9>
| |-CXXDestructorDecl 0x561c54feb9c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x561c55012aa0 <col:25, line:830:9>
| |-CXXMethodDecl 0x561c54febac0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x561c54febb70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x561c54febc18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561c54febc18
| | `-ParmVarDecl 0x561c54febd28 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x561c54fec4e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561c54fec4e8
|   `-ParmVarDecl 0x561c54fec5f8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x561c54febd98 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x561c54febef8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x561c54fec0f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x561c54febfa0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x561c54fec018 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x561c55012c80 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x561c54fec3a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x561c55012af0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x561c55012ab0 <col:20> 'void *' lvalue ParmVar 0x561c54febfa0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x561c54fec410 '_slot' 'char *'
| | | `-CXXNewExpr 0x561c55012b78 <col:32, col:45> 'char *' array Function 0x561c54b52b58 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x561c55012b60 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x561c55012b30 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x561c54fec018 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x561c54fec470 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x561c55012c40 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x561c55012c00 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x561c54fec018 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x561c55012d00 <col:61, line:838:9>
| |-CXXDestructorDecl 0x561c54fec1f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x561c54feb9c0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x561c55012d88 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x561c55012d68 <line:840:13, col:22> 'void' array Function 0x561c54b52eb8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x561c55012d50 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x561c55012d20 <col:22> 'char *' lvalue ->_slot 0x561c54fec410
| |         `-CXXThisExpr 0x561c55012d10 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x561c54fec2f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x561c54febac0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x561c55012f78 <col:22, line:844:9>
| |   `-CallExpr 0x561c55012ee0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x561c55012ec8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x561c55012ea8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x561c54c5e938 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x561c55012f18 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x561c55012df8 <col:20> 'void *' lvalue ->_ptr 0x561c54fec3a8
| |     |   `-CXXThisExpr 0x561c55012de8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x561c55012f48 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x561c55012f30 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x561c55012e38 <col:26> 'char *' lvalue ->_slot 0x561c54fec410
| |     |     `-CXXThisExpr 0x561c55012e28 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x561c55012f60 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x561c55012e78 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x561c54fec470
| |         `-CXXThisExpr 0x561c55012e68 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x561c54fec3a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x561c54fec410 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x561c54fec470 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x561c54fec668 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561c54fec668
| | `-ParmVarDecl 0x561c54fec778 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x561c54fec818 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561c54fec818
|   `-ParmVarDecl 0x561c54fec928 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x561c54fecac8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x561c54fec998 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x561c54feca38 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x561c54fecd60 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x561c54fecf58 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x561c54fece28 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x561c54fed0d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x561c55012fb0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x561c55012f90 <col:20> 'T *' lvalue ParmVar 0x561c54fece28 'ptr' 'T *'
|   | `-CompoundStmt 0x561c55013000 <col:25, line:854:9>
|   |-CXXMethodDecl 0x561c54fed028 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x561c54febac0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x561c550131b0 <col:22, line:857:9>
|   |   `-CallExpr 0x561c55013180 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x561c55013010 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x561c54d17068 0x561c54cc1398
|   |     |-CXXOperatorCallExpr 0x561c55013110 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x561c550130a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561c54f24018 0x561c54f23c38 0x561c54f23868 0x561c54f23488 0x561c54f230a8 0x561c54f22cd8
|   |     | `-MemberExpr 0x561c55013070 <col:29> 'T *' lvalue ->_ptr 0x561c54fed0d8
|   |     |   `-CXXThisExpr 0x561c55013060 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x561c55013150 <col:35> 'T' lvalue ->_slot 0x561c54fed138
|   |       `-CXXThisExpr 0x561c55013140 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x561c54fed0d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x561c54fed138 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x561c54fed1a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x561c54fed2a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x561c54fed2f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54fed280 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x561c54fed260 <col:31> 'int' 48
|-FieldDecl 0x561c54fed318 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x561c54fed378 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x561c54fed3d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x561c54fed510 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x561c55000ea0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x561c55000f00 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x561c55000fb0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x561c550011d8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x561c550010e0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x561c55001328 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x561c55001298 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x561c550015f8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x561c550013e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x561c55001468 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x561c55001510 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x561c55001808 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x561c550016c0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x561c55001738 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x561c550018d8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x561c55001a28 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x561c55001990 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x561c55001db8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x561c55001ae8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x561c55001b68 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x561c55001c10 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x561c55001cc8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x561c55001fe0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x561c55001e90 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x561c55001f08 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x561c550022f8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x561c55002090 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x561c55002258 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x561c55002168 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f39978 prev 0x561c54f2eb80 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54f39a70 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x561c54f39b60 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x561c54f39c88 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x561c54f39e08 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x561c54f39f88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x561c54f3a108 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x561c54f4af38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561c54f4b7a8 <col:11>
|-CXXDestructorDecl 0x561c54f4b010 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561c54f4b148 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561c54f4b148
| `-ParmVarDecl 0x561c54f4b258 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x561c54f4b2f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561c54f4b2f8
| `-ParmVarDecl 0x561c54f4b408 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x561c54f4e1c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x561c54f4e2d8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x561c54f4e558 <col:11>
|   `-ReturnStmt 0x561c54f4e548 <col:11>
|     `-UnaryOperator 0x561c54f4e530 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561c54f4e520 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x561c54f4e348 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561c54f4e348
  `-ParmVarDecl 0x561c54f4e458 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f3a170 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54f3a288 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x561c54f3a328 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x561c54f3a390 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x561c54f3a3f8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x561c54f3a460 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x561c54f3a4c0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x561c54f3a580 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x561c54f3a5e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x561c54f3a640 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x561c54f4ae48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x561c54f3a328 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x561c54f4b7b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x561c54f4b810 <col:12>
|-CXXConstructorDecl 0x561c54f4b478 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561c54f4b478
| `-ParmVarDecl 0x561c54f4b588 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x561c54f4b628 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561c54f4b628
| `-ParmVarDecl 0x561c54f4b738 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x561c54f4d8b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f28290 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c54f283a8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x561c54f28438 <col:16, col:22> col:16 public
|-EnumDecl 0x561c54f28460 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x561c54f28560 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x561c54f28640 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f28540 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x561c54f28520 <col:21> 'int' 28
| `-EnumConstantDecl 0x561c54f285f0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x561c54f28658 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f285d0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x561c54f285b0 <col:22> 'int' 64
|-CXXMethodDecl 0x561c54f28998 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x561c54f28680 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54f28700 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x561c54f28778 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54f287f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f28a58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561c54f28c58 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x561c54f28ad0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x561c54f28b48 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f28d08 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561c54f28e68 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x561c54f28d78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f28f10 <col:72> warn_unused_result ""
|-TypedefDecl 0x561c54f29270 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x561c54f29200 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x561c54f291a0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x561c54f29160 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x561c549ff2d0 'void'
|       |-PointerType 0x561c54ca8630 'unsigned char *'
|       | `-BuiltinType 0x561c549ff3d0 'unsigned char'
|       |-TypedefType 0x561c54aa4ba0 'size_t' sugar
|       | |-Typedef 0x561c54a6fb20 'size_t'
|       | `-BuiltinType 0x561c549ff430 'unsigned long'
|       `-PointerType 0x561c549ffad0 'void *'
|         `-BuiltinType 0x561c549ff2d0 'void'
|-CXXMethodDecl 0x561c54f296e8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x561c54f292e0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x561c54f29358 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54f293f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x561c54f29470 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x561c54f43de0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x561c54f43dc8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x561c54f43d90 <col:58> 'int' 0
| |-ParmVarDecl 0x561c54f294f0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x561c54f43e08 <col:76> 'int' 0
| |-ParmVarDecl 0x561c54f29570 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x561c54f43e28 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x561c54f297b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x561c54f29838 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561c54f298f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x561c54f29998 <col:20>
| `-OptimizeNoneAttr 0x561c54f299f0 <col:30>
|-CXXMethodDecl 0x561c54f29a68 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x561c54f29b08 <col:20>
| `-OptimizeNoneAttr 0x561c54f29b60 <col:30>
|-CXXMethodDecl 0x561c54f29bd8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x561c54f29c78 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x561c54f29d28 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x561c54f29dc8 <col:20>
| |-OptimizeNoneAttr 0x561c54f29e20 <col:30>
| `-WarnUnusedResultAttr 0x561c54f29e48 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x561c54f29ea0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x561c54f29f40 <col:20>
| `-OptimizeNoneAttr 0x561c54f29f98 <col:30>
|-CXXMethodDecl 0x561c54f29fe8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x561c54f2a088 <col:20>
| `-OptimizeNoneAttr 0x561c54f2a0e0 <col:30>
|-CXXMethodDecl 0x561c54f2a128 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x561c54f2a1c8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2a220 <col:30>
|-CXXMethodDecl 0x561c54f2a268 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2a328 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2a3f0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561c54f2a4b8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561c54f2a578 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2a698 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x561c54f43ef0 <col:54, line:99:5>
|   `-ReturnStmt 0x561c54f43ee0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x561c54f43ec8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x561c54f43e98 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561c54f3a978
|         `-CXXThisExpr 0x561c54f43e88 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x561c54f2a838 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x561c54f2a748 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x561c54f43fa0 <col:67, line:103:5>
|   `-BinaryOperator 0x561c54f43f80 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561c54f43f18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561c54f3a978
|     | `-CXXThisExpr 0x561c54f43f08 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561c54f43f68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f43f48 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x561c54f2a748 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x561c54f2a930 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x561c54f44020 <col:33, line:107:5>
|   `-ReturnStmt 0x561c54f44010 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x561c54f43ff8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x561c54f43fc8 <col:16> 'void *' lvalue ->_destructor_argument 0x561c54f3a9e0
|         `-CXXThisExpr 0x561c54f43fb8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561c54f2a9f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x561c54f44650 <col:25, line:113:5>
|   |-ParenExpr 0x561c54f44398 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x561c54f44368 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f440d8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561c54f440b0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x561c54f44078 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x561c54f44048 <col:24> '<bound member function type>' ->shared 0x561c54f29a68
|   |   |       `-ImplicitCastExpr 0x561c54f44098 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x561c54f44038 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561c54f44138 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f44118 <col:42> 'int' 0
|   |   `-CallExpr 0x561c54f442c8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x561c54f442b0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f44290 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f44308 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f441a8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x561c54f44320 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f441d0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f44338 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f44208 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x561c54f44350 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f44278 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f44260 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f44228 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x561c54f44598 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x561c54f443c8 <col:2> 'unsigned char *' lvalue ->_head 0x561c54f3a780
|   | | `-CXXThisExpr 0x561c54f443b8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x561c54f44580 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x561c54f44560 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x561c54f44408 <col:10> 'unsigned char *' lvalue ->_data 0x561c54f3a7e8
|   |     | `-CXXThisExpr 0x561c54f443f8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x561c54f44548 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x561c54f44528 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x561c54f44448 <col:18> 'unsigned char *' lvalue ->_tail 0x561c54f3a850
|   |         | `-CXXThisExpr 0x561c54f44438 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x561c54f44510 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x561c54f444f0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x561c54f44488 <col:26> 'unsigned char *' lvalue ->_end 0x561c54f3a8b8
|   |             | `-CXXThisExpr 0x561c54f44478 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x561c54f444d8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x561c54f444b8 <col:33> 'int' 0
|   `-BinaryOperator 0x561c54f44630 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561c54f445c8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561c54f3a978
|     | `-CXXThisExpr 0x561c54f445b8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561c54f44618 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x561c54f445f8 <col:16> 'int' 0
|-CXXMethodDecl 0x561c54f2ab30 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561c54f2aaa0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2abd8 <col:20>
| |-OptimizeNoneAttr 0x561c54f2ac30 <col:30>
| `-WarnUnusedResultAttr 0x561c54f2ac58 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2ad28 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561c54f2ac98 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2add0 <col:20>
| |-OptimizeNoneAttr 0x561c54f2ae28 <col:30>
| `-WarnUnusedResultAttr 0x561c54f2ae50 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2af88 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561c54f2ae90 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f2b030 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2b130 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x561c54f2b0a0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2b1d8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2b230 <col:30>
|-CXXMethodDecl 0x561c54f2b2f8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561c54f2b268 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f2b3a0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2b4a0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561c54f2b410 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561c54f2b548 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2b648 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x561c54f2b5b8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2b6f0 <col:20>
| `-OptimizeNoneAttr 0x561c54f2b748 <col:30>
|-CXXMethodDecl 0x561c54f2b8d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x561c54f2b788 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x561c54f2b800 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x561c54f43e48 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x561c54f2b988 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x561c54f2bb88 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561c54f2ba00 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x561c54f2ba78 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f2bd98 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561c54f2bc48 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561c54f2bcc0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f2bfa8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x561c54f2be58 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x561c54f2bed8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x561c54f43e58 <col:39> 'int' 0
|-CXXMethodDecl 0x561c54f2c078 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x561c54f2c140 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561c54f2c208 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x561c54f2c2c8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2c390 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x561c54f2c4d8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x561c54f2c448 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x561c54f2c6a8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561c54f2c598 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x561c54f2c610 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f2c778 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x561c54f2c838 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x561c54f2c8d8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2c930 <col:30>
|-CXXMethodDecl 0x561c54f2c980 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561c54f2ca20 <col:20>
| `-OptimizeNoneAttr 0x561c54f2ca78 <col:30>
|-CXXMethodDecl 0x561c54f2cac8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x561c54f2cb88 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2cc50 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x561c54f2ccf0 <col:20>
| `-OptimizeNoneAttr 0x561c54f2cd48 <col:30>
|-CXXMethodDecl 0x561c54f2ce98 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561c54f2cd88 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x561c54f2ce00 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f2cfe8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x561c54f2cf58 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f2d0c0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x561c54f2d180 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x561c54f2d220 <col:20>
| `-OptimizeNoneAttr 0x561c54f2d278 <col:30>
|-CXXMethodDecl 0x561c54f2d2c8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561c54f2d368 <col:20>
| `-OptimizeNoneAttr 0x561c54f2d3c0 <col:30>
|-CXXMethodDecl 0x561c54f2d410 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x561c54f2d4d8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x561c54f2d578 <col:20>
| `-OptimizeNoneAttr 0x561c54f2d5d0 <col:30>
|-CXXMethodDecl 0x561c54f2d618 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x561c54f2d738 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x561c54f2d8a8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x561c54f2d7e8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x561c54f2d998 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x561c54f2da38 <col:20>
| `-OptimizeNoneAttr 0x561c54f2da90 <col:30>
|-CXXMethodDecl 0x561c54f2dae0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x561c54f2dba0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561c54f2ddd8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x561c54f2dc50 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x561c54f2dcc8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2de88 <col:20>
| `-OptimizeNoneAttr 0x561c54f2dee0 <col:30>
|-CXXMethodDecl 0x561c54f2df88 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x561c54f2e028 <col:20>
| `-OptimizeNoneAttr 0x561c54f2e080 <col:30>
|-CXXMethodDecl 0x561c54f2e0d0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x561c54f2e170 <col:20>
| `-OptimizeNoneAttr 0x561c54f2e1c8 <col:30>
|-CXXMethodDecl 0x561c54f2e210 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x561c54f2e2b0 <col:20>
| `-OptimizeNoneAttr 0x561c54f2e308 <col:30>
|-CXXMethodDecl 0x561c54f2e408 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x561c54f2e340 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x561c54f2e4b0 <col:20>
| `-OptimizeNoneAttr 0x561c54f2e508 <col:30>
|-CXXMethodDecl 0x561c54f2e6c8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x561c54f2e540 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x561c54f2e5b8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f2e778 <col:20>
| `-OptimizeNoneAttr 0x561c54f2e7d0 <col:30>
|-CXXMethodDecl 0x561c54f2e878 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x561c54f2e998 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x561c54f2eab8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x561c54f2eb58 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x561c54f2eb80 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x561c54f2eca8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x561c54f2ed48 <col:20>
| `-OptimizeNoneAttr 0x561c54f2eda0 <col:30>
|-CXXMethodDecl 0x561c54f2ee48 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x561c54f2eee8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2ef40 <col:30>
|-AccessSpecDecl 0x561c54f2ef68 <line:344:3, col:9> col:3 public
|-EnumDecl 0x561c54f2ef90 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x561c54f2f090 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x561c54f2f0e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f2f070 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x561c54f2f050 <col:14> 'int' 48
|-CXXMethodDecl 0x561c54f2f148 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x561c54f2f1e8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2f240 <col:30>
|-CXXMethodDecl 0x561c54f2f2b8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x561c54f2f358 <col:20>
| `-OptimizeNoneAttr 0x561c54f2f3b0 <col:30>
|-CXXMethodDecl 0x561c54f2f478 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x561c54f2f3e8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x561c54f2f618 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x561c54f2f7b8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x561c54f2f6c8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x561c54f2f860 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x561c54f2f960 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd10 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2f940 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x561c54f2f920 <col:9> 'int' 0
| |-EnumConstantDecl 0x561c54f2f9f0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2f9d0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x561c54f2f9b0 <col:14> 'int' 1
| |-EnumConstantDecl 0x561c54f2fa80 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd40 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2fa60 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x561c54f2fa40 <col:14> 'int' 2
| |-EnumConstantDecl 0x561c54f2fb10 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd58 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2faf0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x561c54f2fad0 <col:14> 'int' 3
| |-EnumConstantDecl 0x561c54f2fba0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd70 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2fb80 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x561c54f2fb60 <col:13> 'int' 4
| |-EnumConstantDecl 0x561c54f2fc30 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561c54f2fd88 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f2fc10 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x561c54f2fbf0 <col:13> 'int' 5
| `-EnumConstantDecl 0x561c54f2fcc0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x561c54f2fda0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f2fca0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x561c54f2fc80 <col:14> 'int' 6
|-CXXMethodDecl 0x561c54f2fe08 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x561c54f2fea8 <col:20>
| `-OptimizeNoneAttr 0x561c54f2ff00 <col:30>
|-CXXMethodDecl 0x561c54f2fff8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x561c54f2ff38 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x561c54f300a0 <col:20>
| `-OptimizeNoneAttr 0x561c54f300f8 <col:30>
|-CXXMethodDecl 0x561c54f30168 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x561c54f30290 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x561c54f30408 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x561c54f30340 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x561c54f304d0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x561c54f30598 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x561c54f306d8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x561c54f30648 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x561c54f30780 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x561c54f30880 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561c54f30a80 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f30860 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x561c54f30840 <col:23> 'int' 0
| |-EnumConstantDecl 0x561c54f30910 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561c54f30a98 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f308f0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x561c54f308d0 <col:45> 'int' 4
| |-EnumConstantDecl 0x561c54f309a0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561c54f30ab0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f30980 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x561c54f30960 <col:24> 'int' 0
| `-EnumConstantDecl 0x561c54f30a30 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x561c54f30ac8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f30a10 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x561c54f309f0 <col:47> 'int' 16
|-CXXMethodDecl 0x561c54f30b28 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x561c54f30c98 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x561c54f30bd8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x561c54f30d40 <col:20>
| `-OptimizeNoneAttr 0x561c54f30d98 <col:30>
|-CXXMethodDecl 0x561c54f30de8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x561c54f44770 <col:18, col:36>
|   `-ReturnStmt 0x561c54f44760 <col:20, col:33>
|     `-ImplicitCastExpr 0x561c54f44748 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x561c54f44728 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x561c54f446f8 <col:27> '<bound member function type>' ->xanno 0x561c54f2ee48
|           `-CXXThisExpr 0x561c54f446e8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x561c54f30ee0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x561c54f44880 <col:30, col:48>
|   `-ReturnStmt 0x561c54f44870 <col:32, col:45>
|     `-ImplicitCastExpr 0x561c54f44858 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x561c54f44838 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x561c54f44808 <col:39> '<bound member function type>' ->xanno 0x561c54f2eca8
|           `-CXXThisExpr 0x561c54f447f8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x561c54f30fc8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x561c54f44a18 <col:24, col:50>
|   `-ReturnStmt 0x561c54f44a08 <col:26, col:47>
|     `-UnaryOperator 0x561c54f449f0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561c54f449d0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x561c54f449b8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561c54f44968 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x561c54f39c88
|         |   `-CXXMemberCallExpr 0x561c54f44948 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x561c54f44918 <col:34> '<bound member function type>' ->xanno 0x561c54f2ee48
|         |       `-CXXThisExpr 0x561c54f44908 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x561c54f44998 <col:46> 'int' 0
|-CXXMethodDecl 0x561c54f310d0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x561c54f44be8 <col:36, col:62>
|   `-ReturnStmt 0x561c54f44bd8 <col:38, col:59>
|     `-UnaryOperator 0x561c54f44bc0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561c54f44ba0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561c54f44b88 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561c54f44b00 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x561c54f39c88
|         |   `-CXXMemberCallExpr 0x561c54f44ae0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561c54f44ab0 <col:46> '<bound member function type>' ->xanno 0x561c54f2eca8
|         |       `-CXXThisExpr 0x561c54f44aa0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561c54f44b30 <col:58> 'int' 0
|-CXXMethodDecl 0x561c54f311e8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x561c54f44d80 <col:26, col:53>
|   `-ReturnStmt 0x561c54f44d70 <col:28, col:50>
|     `-UnaryOperator 0x561c54f44d58 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561c54f44d38 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x561c54f44d20 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561c54f44cd0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x561c54f39f88
|         |   `-CXXMemberCallExpr 0x561c54f44cb0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x561c54f44c80 <col:36> '<bound member function type>' ->xanno 0x561c54f2ee48
|         |       `-CXXThisExpr 0x561c54f44c70 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x561c54f44d00 <col:49> 'int' 0
|-CXXMethodDecl 0x561c54f31308 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x561c54f44f58 <col:38, col:65>
|   `-ReturnStmt 0x561c54f44f48 <col:40, col:62>
|     `-UnaryOperator 0x561c54f44f30 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561c54f44f10 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x561c54f44ef8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561c54f44e68 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x561c54f39f88
|         |   `-CXXMemberCallExpr 0x561c54f44e48 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561c54f44e18 <col:48> '<bound member function type>' ->xanno 0x561c54f2eca8
|         |       `-CXXThisExpr 0x561c54f44e08 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561c54f44e98 <col:61> 'int' 0
|-CXXMethodDecl 0x561c54f314b8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x561c54f313c0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x561c54f45628 <col:34, line:463:5>
|   |-ParenExpr 0x561c54f45470 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x561c54f45440 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f450a8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f45078 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f44fc8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f44fb0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f44f70 <col:23> 'int' lvalue ParmVar 0x561c54f313c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f44f90 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f45058 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f45028 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f44fe8 <col:33> 'int' lvalue ParmVar 0x561c54f313c0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561c54f45040 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561c54f45008 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561c54f45108 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f450e8 <col:56> 'int' 0
|   |   `-CallExpr 0x561c54f453a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561c54f45388 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f45368 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f453e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f451f8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561c54f453f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f45228 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f45410 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f45260 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x561c54f45428 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f45350 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f45338 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f452f8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x561c54f45618 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x561c54f45600 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x561c54f455e0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561c54f455b0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561c54f45560 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x561c54f39c88
|         |   `-CXXMemberCallExpr 0x561c54f45540 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561c54f45510 <col:9> '<bound member function type>' ->xanno 0x561c54f2eca8
|         |       `-CXXThisExpr 0x561c54f45500 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x561c54f455c8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x561c54f45590 <col:21> 'int' lvalue ParmVar 0x561c54f313c0 'i' 'int'
|-CXXMethodDecl 0x561c54f31708 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x561c54f31578 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x561c54f315f0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x561c54f45cb8 <col:40, line:472:5>
|   |-ParenExpr 0x561c54f45ad0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x561c54f45aa0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f45780 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f45750 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f456a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f45688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f45648 <col:23> 'int' lvalue ParmVar 0x561c54f31578 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f45668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f45730 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f45700 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f456c0 <col:33> 'int' lvalue ParmVar 0x561c54f31578 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561c54f45718 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561c54f456e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561c54f457e0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f457c0 <col:56> 'int' 0
|   |   `-CallExpr 0x561c54f45a00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561c54f459e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f459c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f45a40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f45850 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561c54f45a58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f45880 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f45a70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f458b8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x561c54f45a88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f459b0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f45998 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f45958 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x561c54f45c98 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x561c54f45c40 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x561c54f45c10 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x561c54f45bc0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x561c54f39c88
|     | |   `-CXXMemberCallExpr 0x561c54f45ba0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x561c54f45b70 <col:2> '<bound member function type>' ->xanno 0x561c54f2ee48
|     | |       `-CXXThisExpr 0x561c54f45b60 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x561c54f45c28 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x561c54f45bf0 <col:14> 'int' lvalue ParmVar 0x561c54f31578 'i' 'int'
|     `-ImplicitCastExpr 0x561c54f45c80 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f45c60 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x561c54f315f0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x561c54f318c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x561c54f317d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561c54f46438 <col:36, line:485:5>
|   |-ParenExpr 0x561c54f461a0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f46170 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f45e50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f45e20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f45d30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f45d18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f45cd8 <col:23> 'int' lvalue ParmVar 0x561c54f317d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f45cf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f45e00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f45de8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f45d50 <col:33> 'int' lvalue ParmVar 0x561c54f317d0 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f45dc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f45db0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f45d70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f45d90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561c54f45eb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f45e90 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f460d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f460b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f46098 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f46110 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f45f20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561c54f46128 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f45f58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f46140 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f45f90 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x561c54f46158 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f46080 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f46068 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f46028 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x561c54f46428 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x561c54f46410 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x561c54f463f8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f463c8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x561c54f46368 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f46338 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f462b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f46290 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f46260 <col:61> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f46250 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f46350 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f462e0 <col:74> 'int' lvalue ParmVar 0x561c54f317d0 'i' 'int'
|-CXXMethodDecl 0x561c54f31b18 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x561c54f31988 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561c54f31a00 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x561c54f46b88 <col:42, line:500:5>
|   |-ParenExpr 0x561c54f46920 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f468f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f465d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f465a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f464b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f46498 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f46458 <col:23> 'int' lvalue ParmVar 0x561c54f31988 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f46478 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f46580 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f46568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f464d0 <col:33> 'int' lvalue ParmVar 0x561c54f31988 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f46548 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f46530 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f464f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f46510 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561c54f46630 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f46610 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f46850 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f46838 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f46818 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f46890 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f466a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561c54f468a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f466d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f468c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f46710 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x561c54f468d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f46800 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f467e8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f467a8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x561c54f46b68 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x561c54f46b18 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561c54f46ae8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x561c54f46a90 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561c54f46a60 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561c54f46a10 <col:48, col:57> 'char [48]' lvalue ->c 0x561c54f39b60
|     |     |   `-CXXMemberCallExpr 0x561c54f469f0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561c54f469c0 <col:48> '<bound member function type>' ->xanno 0x561c54f2ee48
|     |     |       `-CXXThisExpr 0x561c54f469b0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561c54f46a78 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561c54f46a40 <col:61> 'int' lvalue ParmVar 0x561c54f31988 'i' 'int'
|     `-ImplicitCastExpr 0x561c54f46b50 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f46b30 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x561c54f31a00 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x561c54f31cd8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x561c54f31be0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561c54f472e8 <col:35, line:513:5>
|   |-ParenExpr 0x561c54f46ff8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f46fc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f46d20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f46cf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f46c00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f46be8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f46ba8 <col:23> 'int' lvalue ParmVar 0x561c54f31be0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f46bc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f46cd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f46cb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f46c20 <col:33> 'int' lvalue ParmVar 0x561c54f31be0 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f46c98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f46c80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f46c40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f46c60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561c54f46d80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f46d60 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f46f28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f46f10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f46ef0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f46f68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f46df0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561c54f46f80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f46e28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f46f98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f46e60 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x561c54f46fb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f46ed8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f46ec0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f46e80 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x561c54f472d8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x561c54f472c0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x561c54f472a8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f47278 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x561c54f471f0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f471c0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f47170 <col:60, col:69> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f47150 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f47120 <col:60> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f47110 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f471d8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f471a0 <col:73> 'int' lvalue ParmVar 0x561c54f31be0 'i' 'int'
|-CXXMethodDecl 0x561c54f31f28 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x561c54f31d98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561c54f31e10 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x561c54f47a08 <col:41, line:528:5>
|   |-ParenExpr 0x561c54f47790 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f47760 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f47480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f47450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f47360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f47348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f47308 <col:23> 'int' lvalue ParmVar 0x561c54f31d98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f47328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f47430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f47418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f47380 <col:33> 'int' lvalue ParmVar 0x561c54f31d98 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f473f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f473e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f473a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f473c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561c54f474e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f474c0 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f476c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f476a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f47688 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f47700 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f47550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561c54f47718 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f47588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f47730 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f475c0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x561c54f47748 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f47670 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f47658 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f47618 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x561c54f479e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x561c54f47998 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561c54f47968 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x561c54f47910 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561c54f478d0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561c54f47880 <col:47, col:56> 'char [48]' lvalue ->c 0x561c54f39b60
|     |     |   `-CXXMemberCallExpr 0x561c54f47860 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561c54f47830 <col:47> '<bound member function type>' ->xanno 0x561c54f2ee48
|     |     |       `-CXXThisExpr 0x561c54f47820 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561c54f478e8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561c54f478b0 <col:60> 'int' lvalue ParmVar 0x561c54f31d98 'i' 'int'
|     `-ImplicitCastExpr 0x561c54f479d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f479b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x561c54f31e10 'x' 'int16_t':'short'
|-CXXMethodDecl 0x561c54f320e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x561c54f31ff0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561c54f480d8 <col:36, line:541:5>
|   |-ParenExpr 0x561c54f47e78 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f47e48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f47ba0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f47b70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f47a80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f47a68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f47a28 <col:23> 'int' lvalue ParmVar 0x561c54f31ff0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f47a48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f47b50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f47b38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f47aa0 <col:33> 'int' lvalue ParmVar 0x561c54f31ff0 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f47b18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f47b00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f47ac0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f47ae0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561c54f47c00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f47be0 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f47da8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f47d90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f47d70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f47de8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f47c70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561c54f47e00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f47ca8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f47e18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f47ce0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x561c54f47e30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f47d58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f47d40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f47d00 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x561c54f480c8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x561c54f480b0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x561c54f48098 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f48068 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x561c54f48010 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f47fe0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f47f90 <col:61, col:70> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f47f70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f47f40 <col:61> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f47f30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f47ff8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f47fc0 <col:74> 'int' lvalue ParmVar 0x561c54f31ff0 'i' 'int'
|-CXXMethodDecl 0x561c54f322b8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x561c54f321a8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x561c54f32220 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561c54f32368 <col:20>
| `-OptimizeNoneAttr 0x561c54f323c0 <col:30>
|-CXXMethodDecl 0x561c54f324f8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x561c54f32400 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561c54f487a8 <col:35, line:562:5>
|   |-ParenExpr 0x561c54f48548 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f48518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f48270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f48240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f48150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f48138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f480f8 <col:23> 'int' lvalue ParmVar 0x561c54f32400 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f48118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f48220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f48208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f48170 <col:33> 'int' lvalue ParmVar 0x561c54f32400 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f481e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f481d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f48190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f481b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561c54f482d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f482b0 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f48478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f48460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f48440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f484b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f48340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561c54f484d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f48378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f484e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f483b0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x561c54f48500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f48428 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f48410 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f483d0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x561c54f48798 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x561c54f48780 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x561c54f48768 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f48738 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x561c54f486e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f486b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f48660 <col:60, col:69> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f48640 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f48610 <col:60> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f48600 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f486c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f48690 <col:73> 'int' lvalue ParmVar 0x561c54f32400 'i' 'int'
|-CXXMethodDecl 0x561c54f32708 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x561c54f325b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561c54f32630 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x561c54f48e88 <col:41, line:577:5>
|   |-ParenExpr 0x561c54f48c18 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f48be8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f48940 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f48910 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f48820 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f48808 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f487c8 <col:23> 'int' lvalue ParmVar 0x561c54f325b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f487e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f488f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f488d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f48840 <col:33> 'int' lvalue ParmVar 0x561c54f325b8 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f488b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f488a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f48860 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f48880 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561c54f489a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f48980 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f48b48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f48b30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f48b10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f48b88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f48a10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561c54f48ba0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f48a48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f48bb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f48a80 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x561c54f48bd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f48af8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f48ae0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f48aa0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x561c54f48e68 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x561c54f48e18 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561c54f48de8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x561c54f48d88 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561c54f48d58 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561c54f48d08 <col:47, col:56> 'char [48]' lvalue ->c 0x561c54f39b60
|     |     |   `-CXXMemberCallExpr 0x561c54f48ce8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561c54f48cb8 <col:47> '<bound member function type>' ->xanno 0x561c54f2ee48
|     |     |       `-CXXThisExpr 0x561c54f48ca8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561c54f48d70 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561c54f48d38 <col:60> 'int' lvalue ParmVar 0x561c54f325b8 'i' 'int'
|     `-ImplicitCastExpr 0x561c54f48e50 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f48e30 <col:65> 'int32_t':'int' lvalue ParmVar 0x561c54f32630 'x' 'int32_t':'int'
|-CXXMethodDecl 0x561c54f328c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x561c54f327d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561c54f495b8 <col:36, line:591:5>
|   |-ParenExpr 0x561c54f492f8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f492c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f49020 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f48ff0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f48f00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f48ee8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f48ea8 <col:23> 'int' lvalue ParmVar 0x561c54f327d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f48ec8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f48fd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f48fb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f48f20 <col:33> 'int' lvalue ParmVar 0x561c54f327d0 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f48f98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f48f80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f48f40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f48f60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561c54f49080 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f49060 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f49228 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f49210 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f491f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f49268 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f490f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561c54f49280 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f49128 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f49298 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f49160 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x561c54f492b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f491d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f491c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f49180 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x561c54f495a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x561c54f49590 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x561c54f49578 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f49548 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x561c54f494c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f49490 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f49440 <col:61, col:70> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f49420 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f493f0 <col:61> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f493e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f494a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f49470 <col:74> 'int' lvalue ParmVar 0x561c54f327d0 'i' 'int'
|-CXXMethodDecl 0x561c54f32b18 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x561c54f32988 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561c54f32a00 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x561c54f49c98 <col:42, line:606:5>
|   |-ParenExpr 0x561c54f49a28 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x561c54f499f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f49750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f49720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f49630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f49618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f495d8 <col:23> 'int' lvalue ParmVar 0x561c54f32988 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f495f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f49700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561c54f496e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f49650 <col:33> 'int' lvalue ParmVar 0x561c54f32988 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f496c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f496b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f49670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561c54f49690 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561c54f497b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f49790 <col:60> 'int' 0
|   |   `-CallExpr 0x561c54f49958 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561c54f49940 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f49920 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f49998 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f49820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561c54f499b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f49858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f499c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f49890 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x561c54f499e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f49908 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f498f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f498b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x561c54f49c78 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x561c54f49c28 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561c54f49bf8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x561c54f49b98 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561c54f49b68 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561c54f49b18 <col:48, col:57> 'char [48]' lvalue ->c 0x561c54f39b60
|     |     |   `-CXXMemberCallExpr 0x561c54f49af8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561c54f49ac8 <col:48> '<bound member function type>' ->xanno 0x561c54f2ee48
|     |     |       `-CXXThisExpr 0x561c54f49ab8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561c54f49b80 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561c54f49b48 <col:61> 'int' lvalue ParmVar 0x561c54f32988 'i' 'int'
|     `-ImplicitCastExpr 0x561c54f49c60 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561c54f49c40 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x561c54f32a00 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x561c54f32cb0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x561c54f32be0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x561c54f4a508 <col:33, line:620:5>
|   |-ParenExpr 0x561c54f4a280 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x561c54f4a250 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f49ea0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f49e70 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f49d10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f49cf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f49cb8 <col:23> 'int' lvalue ParmVar 0x561c54f32be0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f49cd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f49e50 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561c54f49e38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f49d30 <col:33> 'int' lvalue ParmVar 0x561c54f32be0 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f49e18 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f49e00 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f49d50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561c54f49dd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561c54f49dc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561c54f49d88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561c54f49f00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f49ee0 <col:79> 'int' 0
|   |   `-CallExpr 0x561c54f4a1b0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561c54f4a198 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f4a178 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f4a1f0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f49fe8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561c54f4a208 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f4a030 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f4a220 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f4a068 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x561c54f4a238 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f4a160 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f4a148 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f4a108 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x561c54f4a4f8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x561c54f4a4e0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x561c54f4a4c8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561c54f4a498 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x561c54f4a410 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x561c54f4a3e0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561c54f4a390 <col:67, col:76> 'char const[48]' lvalue ->c 0x561c54f39b60
|             |   `-CXXMemberCallExpr 0x561c54f4a370 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561c54f4a340 <col:67> '<bound member function type>' ->xanno 0x561c54f2eca8
|             |       `-CXXThisExpr 0x561c54f4a330 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561c54f4a3f8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561c54f4a3c0 <col:80> 'int' lvalue ParmVar 0x561c54f32be0 'i' 'int'
|-CXXMethodDecl 0x561c54f32ec8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x561c54f32d70 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561c54f32df0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x561c54f4ad30 <col:45, line:635:5>
|   |-ParenExpr 0x561c54f4aa78 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x561c54f4aa48 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561c54f4a710 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561c54f4a6e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561c54f4a580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561c54f4a568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561c54f4a528 <col:23> 'int' lvalue ParmVar 0x561c54f32d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561c54f4a548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561c54f4a6c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561c54f4a6a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561c54f4a5a0 <col:33> 'int' lvalue ParmVar 0x561c54f32d70 'i' 'int'
|   |   |     `-BinaryOperator 0x561c54f4a688 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561c54f4a670 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561c54f4a5c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561c54f2f090 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561c54f4a648 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561c54f4a630 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561c54f4a5f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561c54f4a770 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561c54f4a750 <col:79> 'int' 0
|   |   `-CallExpr 0x561c54f4a9a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561c54f4a990 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561c54f4a970 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561c54a9b9b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561c54f4a9e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f4a7e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561c54f4aa00 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561c54f4a828 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561c54f4aa18 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561c54f4a860 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x561c54f4aa30 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561c54f4a958 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561c54f4a940 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561c54f4a8f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x561c54f4ad10 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x561c54f4ac78 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561c54f4ac48 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x561c54f4abe8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561c54f4abb8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561c54f4ab68 <col:54, col:63> 'char [48]' lvalue ->c 0x561c54f39b60
|     |     |   `-CXXMemberCallExpr 0x561c54f4ab48 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561c54f4ab18 <col:54> '<bound member function type>' ->xanno 0x561c54f2ee48
|     |     |       `-CXXThisExpr 0x561c54f4ab08 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561c54f4abd0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561c54f4ab98 <col:67> 'int' lvalue ParmVar 0x561c54f32d70 'i' 'int'
|     `-CXXConstCastExpr 0x561c54f4ace0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x561c54f4acc8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x561c54f4ac90 <col:91> 'const void *' lvalue ParmVar 0x561c54f32df0 'x' 'const void *'
|-CXXMethodDecl 0x561c54f32f98 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x561c54f4adb8 <col:34, line:640:5>
|   `-ReturnStmt 0x561c54f4ada8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x561c54f4ad90 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x561c54f4ad60 <col:16> 'Packet *' lvalue ->_data_packet 0x561c54f3a718
|         `-CXXThisExpr 0x561c54f4ad50 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561c54f330d8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x561c54f33048 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c54f43e78 <col:46> 'bool' true
|-CXXMethodDecl 0x561c54f33258 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x561c54f33190 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x561c54f33300 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x561c54f33ab0 <line:660:22> "" ""
| |-EnumConstantDecl 0x561c54f33400 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f333e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x561c54f333c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561c54f28560 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561c54f33490 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b38 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33470 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x561c54f33450 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561c54f285f0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561c54f33520 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33500 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561c54f334e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x561c54f335b0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33590 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x561c54f33570 <col:19> 'int' 16
| |-EnumConstantDecl 0x561c54f33640 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33620 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x561c54f33600 <col:21> 'int' 16
| |-EnumConstantDecl 0x561c54f336d0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33b98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f336b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561c54f33690 <col:19> 'int' 32
| |-EnumConstantDecl 0x561c54f33760 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33bb0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33740 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x561c54f33720 <col:19> 'int' EnumConstant 0x561c54f335b0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561c54f337f0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33bc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f337d0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x561c54f337b0 <col:19> 'int' EnumConstant 0x561c54f336d0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561c54f338c0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33be0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f338a0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x561c54f33880 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561c54f33840 <col:23> 'int' EnumConstant 0x561c54f337f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561c54f33860 <col:40> 'int' 2
| |-EnumConstantDecl 0x561c54f33990 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561c54f33bf8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561c54f33970 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x561c54f33950 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561c54f33910 <col:23> 'int' EnumConstant 0x561c54f337f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561c54f33930 <col:40> 'int' 4
| `-EnumConstantDecl 0x561c54f33a60 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x561c54f33c10 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c54f33a40 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x561c54f33a20 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x561c54f339e0 <col:23> 'int' EnumConstant 0x561c54f337f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x561c54f33a00 <col:40> 'int' 8
|-CXXMethodDecl 0x561c54f33c50 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x561c54f33cf0 <col:68> "" ""
|-CXXMethodDecl 0x561c54f33d88 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x561c54f33e28 <col:45> "" ""
|-CXXMethodDecl 0x561c54f33ec0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561c54f33f60 <col:57> "" ""
|-CXXMethodDecl 0x561c54f33ff8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x561c54f34098 <col:45> "" ""
|-CXXMethodDecl 0x561c54f34130 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561c54f341d0 <col:57> "" ""
|-CXXMethodDecl 0x561c54f34260 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x561c54f34300 <col:51> "" ""
|-CXXMethodDecl 0x561c54f34390 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561c54f34430 <col:63> "" ""
|-CXXMethodDecl 0x561c54f344c0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x561c54f34560 <col:53> "" ""
|-CXXMethodDecl 0x561c54f345f0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561c54f34690 <col:65> "" ""
|-CXXMethodDecl 0x561c54f347a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561c54f34718 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x561c54f34850 <col:61> "" ""
|-CXXMethodDecl 0x561c54f349e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561c54f348d8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x561c54f34950 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561c54f34a98 <col:67> "" ""
|-CXXMethodDecl 0x561c54f34bb0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561c54f34b20 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561c54f34c58 <col:63> "" ""
|-CXXMethodDecl 0x561c54f34df0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561c54f34ce0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561c54f34d58 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561c54f34ea0 <col:69> "" ""
|-CXXMethodDecl 0x561c54f34fb8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561c54f34f28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561c54f35060 <col:63> "" ""
|-CXXMethodDecl 0x561c54f37738 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561c54f37628 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561c54f376a0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561c54f377e8 <col:69> "" ""
|-CXXMethodDecl 0x561c54f37900 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x561c54f37870 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x561c54f379a8 <col:62> "" ""
|-CXXMethodDecl 0x561c54f37b40 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561c54f37a30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561c54f37aa8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x561c54f37bf0 <col:68> "" ""
|-CXXMethodDecl 0x561c54f37d08 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x561c54f37c78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561c54f37db0 <col:63> "" ""
|-CXXMethodDecl 0x561c54f37f48 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x561c54f37e38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561c54f37eb0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x561c54f37ff8 <col:69> "" ""
|-CXXMethodDecl 0x561c54f38088 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561c54f38128 <col:64> "" ""
|-CXXMethodDecl 0x561c54f381b8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x561c54f38258 <col:52> "" ""
|-CXXMethodDecl 0x561c54f382e8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561c54f38388 <col:67> "" ""
|-CXXMethodDecl 0x561c54f38418 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x561c54f384b8 <col:55> "" ""
|-CXXMethodDecl 0x561c54f385d0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561c54f38540 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561c54f38678 <col:58> "" ""
|-CXXMethodDecl 0x561c54f38810 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561c54f38700 <col:33> col:36 'int'
| |-ParmVarDecl 0x561c54f38778 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561c54f388c0 <col:62> "" ""
|-CXXMethodDecl 0x561c54f389d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x561c54f38948 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561c54f38a80 <col:58> "" ""
|-CXXMethodDecl 0x561c54f38c18 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x561c54f38b08 <col:33> col:36 'int'
| |-ParmVarDecl 0x561c54f38b80 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x561c54f38cc8 <col:62> "" ""
|-CXXMethodDecl 0x561c54f38de0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561c54f38d50 <col:34> col:37 'int'
| `-DeprecatedAttr 0x561c54f38e88 <col:60> "" ""
|-CXXMethodDecl 0x561c54f39020 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561c54f38f10 <col:34> col:37 'int'
| |-ParmVarDecl 0x561c54f38f88 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561c54f390d0 <col:64> "" ""
|-CXXMethodDecl 0x561c54f391e8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x561c54f39158 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561c54f39290 <col:58> "" ""
|-CXXMethodDecl 0x561c54f39428 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561c54f39318 <col:33> col:36 'int'
| |-ParmVarDecl 0x561c54f39390 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x561c54f394d8 <col:62> "" ""
|-CXXMethodDecl 0x561c54f395f0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561c54f39560 <col:33> col:36 'int'
| `-DeprecatedAttr 0x561c54f39698 <col:59> "" ""
|-CXXMethodDecl 0x561c54f39830 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561c54f39720 <col:33> col:36 'int'
| |-ParmVarDecl 0x561c54f39798 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561c54f398e0 <col:63> "" ""
|-AccessSpecDecl 0x561c54f39950 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x561c54f39978 prev 0x561c54f2eb80 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561c54f39a70 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x561c54f39b60 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x561c54f39c88 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x561c54f39e08 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x561c54f39f88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x561c54f3a108 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x561c54f4af38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561c54f4b7a8 <col:11>
| |-CXXDestructorDecl 0x561c54f4b010 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x561c54f4b148 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561c54f4b148
| | `-ParmVarDecl 0x561c54f4b258 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x561c54f4b2f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561c54f4b2f8
| | `-ParmVarDecl 0x561c54f4b408 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x561c54f4e1c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561c54f4e2d8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x561c54f4e558 <col:11>
| |   `-ReturnStmt 0x561c54f4e548 <col:11>
| |     `-UnaryOperator 0x561c54f4e530 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561c54f4e520 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x561c54f4e348 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561c54f4e348
|   `-ParmVarDecl 0x561c54f4e458 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x561c54f3a170 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561c54f3a288 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x561c54f3a328 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x561c54f3a390 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x561c54f3a3f8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x561c54f3a460 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x561c54f3a4c0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x561c54f3a580 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x561c54f3a5e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x561c54f3a640 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x561c54f4ae48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x561c54f3a328 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x561c54f4b7b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x561c54f4b810 <col:12>
| |-CXXConstructorDecl 0x561c54f4b478 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561c54f4b478
| | `-ParmVarDecl 0x561c54f4b588 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x561c54f4b628 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561c54f4b628
| | `-ParmVarDecl 0x561c54f4b738 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x561c54f4d8b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x561c54f3a6b8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x561c54f3a718 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x561c54f3a780 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x561c54f3a7e8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x561c54f3a850 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x561c54f3a8b8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x561c54f3a918 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x561c54f3a978 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x561c54f3a9e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x561c54f3aa68 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x561c54f3a6b8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x561c54f4ade0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x561c54f3a918 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x561c54f4b820 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x561c54f4b880 <col:21, line:755:5>
|-CXXConstructorDecl 0x561c54f3ac08 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x561c54f3ab48 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x561c54f3ad00 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x561c54f3aee8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x561c54f3adf0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x561c54f3b1b8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x561c54f3afa0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561c54f3b018 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561c54f3b090 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f3b3d8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x561c54f3b288 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x561c54f3b300 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x561c54f439b8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x561c54f3b498 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x561c54f3b510 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x561c54f3b588 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x561c54f43b10 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561c54f43a80 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561c54f43c58 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561c54f43bc8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x561c54f43d50 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54c95eb8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c54c95fd8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x561c54c960a0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x561c54d66670 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561c54d6b988 <col:8>
|-CXXConstructorDecl 0x561c54d66778 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x561c54d66778
| `-ParmVarDecl 0x561c54d66888 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x561c54d66928 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561c54d66a38 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x561c54c960a0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x561c54d6bba0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x561c54d6bb70 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x561c54c960a0
| |     `-CXXStaticCastExpr 0x561c54d6bb40 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x561c54d6bb10 <col:8> 'in_addr' lvalue ParmVar 0x561c54d66a38 '' 'in_addr &&'
| `-CompoundStmt 0x561c54d6bbe8 <col:8>
`-CXXDestructorDecl 0x561c54d6be20 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54d5f368 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x561c54d5f488 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x561c54d5f570 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x561c54d5f550 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x561c54d5f518 <col:22> 'int' 4
|-FieldDecl 0x561c54d5f618 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x561c54d5f5f8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x561c54d5f5c0 <col:21> 'int' 4
|-FieldDecl 0x561c54d5f678 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x561c54d5f6d8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54d5f738 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54d5f798 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54d5f7f8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x561c54d5f858 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x561c54d5f8b8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54d5f928 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x561c54d5f998 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c54f7b570 prev 0x561c54f28080 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x561c54f7b668 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x561c54f7b708 <line:12:5, col:14> col:14 uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54f7b768 <line:13:5, col:14> col:14 uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x561c54f7b7c8 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x561c54f7b828 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c55047c88 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c55047da8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x561c55047e50 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x561c55047eb8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x561c55047f20 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x561c55047fd0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x561c55047e50 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x561c55048e50 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x561c55048e08 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x561c55048dd0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x561c55048db8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x561c55048d60 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x561c54d529d0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x561c55047eb8 'len' 'int'
| | `-IntegerLiteral 0x561c55048ec8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x561c55047f20 'cap' 'int'
| | `-IntegerLiteral 0x561c55048f30 <col:20> 'int' 0
| `-CompoundStmt 0x561c55048fb0 <col:23, line:119:2>
|-CXXConstructorDecl 0x561c55048148 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x561c55048088 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x561c55048fc0 <col:37, line:121:2>
|-CXXConstructorDecl 0x561c5504b1d8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561c5504b2e8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x561c55047e50 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x561c5504cca0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x561c5504cc70 <col:12> 'unsigned char *const' lvalue .s 0x561c55047e50
| |     `-DeclRefExpr 0x561c5504cc50 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x561c55047eb8 'len' 'int'
| | `-ImplicitCastExpr 0x561c5504cd30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561c5504cd00 <col:12> 'const int' lvalue .len 0x561c55047eb8
| |     `-DeclRefExpr 0x561c5504cce0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x561c55047f20 'cap' 'int'
| | `-ImplicitCastExpr 0x561c5504cdc0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561c5504cd90 <col:12> 'const int' lvalue .cap 0x561c55047f20
| |     `-DeclRefExpr 0x561c5504cd70 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x561c5504ce18 <col:12>
|-CXXConstructorDecl 0x561c5504b388 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c5504b388
| `-ParmVarDecl 0x561c5504b498 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x561c5504d0d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c55043418 prev 0x561c54f7ba40 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561c55043510 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x561c550435a0 <col:21, col:27> col:21 public
|-TypedefDecl 0x561c550435e0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x561c549ffdc0 'const char *'
|   `-QualType 0x561c549ff311 'const char' const
|     `-BuiltinType 0x561c549ff310 'char'
|-TypedefDecl 0x561c55043650 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x561c549fff90 'char *'
|   `-BuiltinType 0x561c549ff310 'char'
|-TypedefDecl 0x561c55043790 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x561c55043700 'int (StringAccum::*)() const'
|   |-RecordType 0x561c54cbd290 'StringAccum'
|   | `-CXXRecord 0x561c55043418 'StringAccum'
|   `-ParenType 0x561c54d2c9e0 'int () const' sugar
|     `-FunctionProtoType 0x561c54d00570 'int () const' const cdecl
|       `-BuiltinType 0x561c549ff370 'int'
|-CXXConstructorDecl 0x561c55043850 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x561c550439a0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x561c55043910 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x561c55043af0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x561c55043a60 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x561c55043c98 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x561c55043bd8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x561c55043e48 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x561c55043d88 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x561c55043f40 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x561c550440f8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x561c55044030 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x561c55044278 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x561c550441b0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x561c55044370 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x561c55044438 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x561c55044500 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x561c550445c8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x561c55044690 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x561c550447f8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561c550448c8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561c55044988 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x561c55044a98 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x561c55044ba8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x561c55044c68 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x561c55044d28 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x561c55044e70 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x561c55044de0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x561c55045000 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x561c55044f30 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x561c550450c8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x561c550451c0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x561c55045280 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x561c55045348 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x561c55045408 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x561c550454c8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x561c55045588 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x561c550456d8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x561c55045640 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x561c55045828 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x561c55045798 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x561c55045980 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x561c550458e8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x561c55045ad0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x561c55045a40 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x561c55045cf0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x561c55045b90 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x561c55045c10 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x561c55048c88 <col:53> 'int' 0
|-CXXMethodDecl 0x561c55045e48 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x561c55045db8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x561c55048ca8 <col:34> 'int' 1
|-CXXMethodDecl 0x561c55045f90 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x561c55045f00 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x561c550460e0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x561c55046050 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x561c55046230 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x561c550461a0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x561c55046380 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x561c550462f0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x561c55046558 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x561c55046440 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561c550464c0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561c55046738 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x561c55046620 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x561c550466a0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x561c55046918 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561c55046800 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x561c55046880 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x561c55046af8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x561c550469e0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x561c55046a60 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x561c55046cd8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x561c55046bc0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x561c55046c40 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x561c55047038 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x561c55046e20 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x561c55046ea0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x561c55048cc8 <col:56> 'int' 10
| `-ParmVarDecl 0x561c55046f18 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c55048ce8 <col:77> 'bool' true
|-CXXMethodDecl 0x561c55047398 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x561c55047180 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x561c55047200 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x561c55048cf8 <col:57> 'int' 10
| `-ParmVarDecl 0x561c55047278 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561c55048d18 <col:78> 'bool' true
|-CXXMethodDecl 0x561c550475c0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x561c55047468 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x561c550474e8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x561c550476b8 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x561c55047828 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x561c55047768 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x561c55047978 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x561c550478e8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x561c55047a20 <col:51> "" ""
|-AccessSpecDecl 0x561c55047a90 <line:106:3, col:10> col:3 private
|-EnumDecl 0x561c55047ab8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x561c55047c08 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x561c55047c70 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561c55047be8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x561c55047bb8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x561c54d35748 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x561c55047c88 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561c55047da8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x561c55047e50 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x561c55047eb8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x561c55047f20 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x561c55047fd0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x561c55047e50 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x561c55048e50 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x561c55048e08 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x561c55048dd0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x561c55048db8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x561c55048d60 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x561c54d529d0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x561c55047eb8 'len' 'int'
| | | `-IntegerLiteral 0x561c55048ec8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x561c55047f20 'cap' 'int'
| | | `-IntegerLiteral 0x561c55048f30 <col:20> 'int' 0
| | `-CompoundStmt 0x561c55048fb0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x561c55048148 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x561c55048088 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x561c55048fc0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x561c5504b1d8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561c5504b2e8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x561c55047e50 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x561c5504cca0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x561c5504cc70 <col:12> 'unsigned char *const' lvalue .s 0x561c55047e50
| | |     `-DeclRefExpr 0x561c5504cc50 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x561c55047eb8 'len' 'int'
| | | `-ImplicitCastExpr 0x561c5504cd30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x561c5504cd00 <col:12> 'const int' lvalue .len 0x561c55047eb8
| | |     `-DeclRefExpr 0x561c5504cce0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x561c55047f20 'cap' 'int'
| | | `-ImplicitCastExpr 0x561c5504cdc0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x561c5504cd90 <col:12> 'const int' lvalue .cap 0x561c55047f20
| | |     `-DeclRefExpr 0x561c5504cd70 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x561c5504b2e8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x561c5504ce18 <col:12>
| |-CXXConstructorDecl 0x561c5504b388 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x561c5504b388
| | `-ParmVarDecl 0x561c5504b498 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x561c5504d0d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x561c55048220 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x561c55048320 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x561c55048288 <col:16> col:19 'int'
|-CXXMethodDecl 0x561c55048500 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x561c550483e0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x561c55048460 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x561c550486e0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x561c550485c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561c55048648 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x561c55048838 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x561c550487a8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x561c55048988 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x561c550488f8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x561c55048c48 <line:132:5, col:70> col:25
  `-FunctionDecl 0x561c55048b88 parent 0x561c549ff278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x561c55048a40 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x561c55048ab8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561c5502b0b0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561c5502b1c8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x561c5502b258 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x561c5502b498 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x561c5502b290 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x561c5502b310 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x561c5502b388 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x561c5502b6b0 <col:81> 'const ArgContext' lvalue Var 0x561c550131d8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x561c5502b5f0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x561c5502b560 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x561c5502b808 <col:35, line:1261:5>
|   `-ReturnStmt 0x561c5502b7f8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x561c5502b7e0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x561c5502b7b0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x561c5502b798 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x561c5502b770 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x561c5502b750 <col:16, col:24> 'String' (CXXTemporary 0x561c5502b750)
|               `-CXXConstructExpr 0x561c5502b718 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x561c5502b700 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x561c5502b6e0 <col:23> 'bool' lvalue ParmVar 0x561c5502b560 'x' 'bool'
|-CXXConstructorDecl 0x561c550b41c8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x561c550b42a0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561c550b43d8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x561c550b43d8
| `-ParmVarDecl 0x561c550b44e8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x561c550b4588 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x561c550b4698 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x561c550b52f0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561c5502b848 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x561c5502baa8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x561c550b40d8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561c550b4708 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x561c550b4708
| `-ParmVarDecl 0x561c550b4818 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x561c550b48b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561c550b49c8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x561c550b5300 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x561c550b52d0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x561c550b52a0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x561c550b5270 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x561c550b49c8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x561c550b5370 <col:19>
`-CXXDestructorDecl 0x561c550b4a68 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
