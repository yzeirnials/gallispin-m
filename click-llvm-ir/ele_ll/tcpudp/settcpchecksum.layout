
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56389411b948 prev 0x5638941130e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56389411ba40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56389411bad0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56389411bb48 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56389411bc08 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56389411bcd0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56389411be48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56389411bd80 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56389411bef0 <col:24>
| `-OptimizeNoneAttr 0x56389411bf48 <col:34>
|-CXXMethodDecl 0x56389411bf90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56389411c248 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56389411c040 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56389411c0b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56389411c138 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56389411c300 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56389411c338 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56389411c3a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56389411c428 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56389411c748 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56389411c4e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56389411c558 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56389411c5d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56389411c650 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56389411c860 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5638941241d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5638941241d8
| `-ParmVarDecl 0x5638941242e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x563894124388 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563894124388
| `-ParmVarDecl 0x563894124498 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5638941f2a00 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56389410e960 prev 0x56389410e6e0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56389410ea58 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56389410eae8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56389410eb48 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56389410ec38 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56389410ed38 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56389410ef08 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56389410edb8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56389410ee30 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56389410f098 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56389410efd0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56389410f140 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56389410f278 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56389410f1b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56389410f418 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56389410f358 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56389410f5b8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56389410f4f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56389410f660 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56389410f760 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56389410f840 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56389410f740 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56389410f720 <col:26> 'int' 1
| `-EnumConstantDecl 0x56389410f7f0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56389410f858 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56389410f7d0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56389410f7b0 <col:44> 'int' 2
|-CXXMethodDecl 0x56389410f9a0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56389410f888 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56389410f908 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56389410faf8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56389410fa68 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56389410fd38 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56389410fbb8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56389410fc30 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56389410fde8 <col:20>
| `-OptimizeNoneAttr 0x56389410fe40 <col:30>
|-CXXMethodDecl 0x56389410ff48 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56389410fe80 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56389410fff0 <col:20>
| `-OptimizeNoneAttr 0x563894110048 <col:30>
|-CXXMethodDecl 0x563894110098 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x563894110160 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x563894110278 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x563894110300 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x563894110388 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x563894110410 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x563894110498 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x563894110528 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5638941105e8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x563894110670 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5638941106f8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x563894110780 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x563894110808 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x563894110890 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x563894110920 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5638941109e0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x563894110a70 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x563894110bc0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x563894110b28 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x563894110d50 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x563894110c80 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x563894111000 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x563894110e08 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x563894110e88 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x563894110f08 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5638941110b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5638941111c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563894111450 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941111a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x563894111180 <col:33> 'int' 0
| |-EnumConstantDecl 0x563894111250 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563894111468 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563894111230 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x563894111210 <col:32> 'int' 20
| |-EnumConstantDecl 0x5638941112e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563894111480 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941112c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5638941112a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x563894111370 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563894111498 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563894111350 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x563894111330 <col:35> 'int' 100
| `-EnumConstantDecl 0x563894111400 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5638941114b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638941113e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5638941113c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5638941114f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x563894111930 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5638941117a0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x563894111818 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563894111a00 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x563894111b80 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x563894111ab0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563894111d88 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563894111c38 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x563894111cb0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563894111e88 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x563894111f28 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x563894111ff0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x563894112080 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5638941122b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563894112060 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x563894112040 <col:36> 'int' EnumConstant 0x563894111ff0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5638941120d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563894112120 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563894112170 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5638941121c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563894112210 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x563894112260 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x563894112398 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5638941122d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x563894112460 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x563894112520 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5638941125e0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5638941126a0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5638941127b8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x563894112880 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x563894112a00 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x563894112930 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x563894112b28 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563894112d28 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x563894112bd8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x563894112c58 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563894120678 <col:54, line:127:5>
|   |-ParenExpr 0x563894120528 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5638941204f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5638941201e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5638941201c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5638941201a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563894120190 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563894120160 <col:31> 'Router *' lvalue ->_router 0x56389411e040
|   |   |         `-CXXThisExpr 0x563894120150 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563894120248 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563894120228 <col:48> 'int' 0
|   |   `-CallExpr 0x563894120458 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x563894120440 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563894120420 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563894120498 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638941202b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5638941204b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638941202d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5638941204c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563894120310 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5638941204e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563894120408 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638941203f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638941203a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5638941205c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563894120558 <col:9> 'Router *' lvalue ->_router 0x56389411e040
|   | | `-CXXThisExpr 0x563894120548 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5638941205a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563894120588 <col:19> 'Router *' lvalue ParmVar 0x563894112bd8 'r' 'Router *'
|   `-BinaryOperator 0x563894120658 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5638941205f0 <col:9> 'int' lvalue ->_eindex 0x56389411e0a8
|     | `-CXXThisExpr 0x5638941205e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x563894120640 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563894120620 <col:19> 'int' lvalue ParmVar 0x563894112c58 'eindex' 'int'
|-CXXMethodDecl 0x563894112eb0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x563894112de8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x563894112f80 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x563894113048 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5638941130e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x563894113338 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5638941131b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x563894113230 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5638941133e8 <col:20>
| `-OptimizeNoneAttr 0x563894113440 <col:30>
|-CXXMethodDecl 0x563894113548 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563894113480 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5638941135f0 <col:20>
| `-OptimizeNoneAttr 0x563894113648 <col:30>
|-CXXMethodDecl 0x563894113718 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563894113688 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5638941137c0 <col:20>
| `-OptimizeNoneAttr 0x563894113818 <col:30>
|-CXXMethodDecl 0x5638941139a8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x563894113850 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5638941138d0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x563894113b38 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563894113a70 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563894113c88 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563894113bf8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563894113dd8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563894113d48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563894113f28 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563894113e98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5638941141e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x563894113fe0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x563894114060 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x563894114108 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5638941142c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x563894114380 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x563894114650 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563894114500 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x563894114578 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x563894114778 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x563894114950 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x563894114830 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5638941148b0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x563894114b38 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x563894114a18 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x563894114a98 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x563894114ea8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563894114bf8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563894114c70 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563894114cf0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56389411fc60 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56389411fc40 <col:106> 'int' 0
| `-ParmVarDecl 0x563894114d68 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fc98 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fc78 <col:126> 'int' 0
|-CXXMethodDecl 0x563894115248 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563894114f78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563894115010 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563894115090 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x563894115108 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fcd0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fcb0 <col:114> 'int' 0
|-CXXMethodDecl 0x5638941155d8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563894115320 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x563894115398 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563894115418 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56389411fce8 <col:96> 'int' 0
| `-ParmVarDecl 0x563894115490 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fd28 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fd08 <col:116> 'int' 0
|-CXXMethodDecl 0x563894115958 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5638941156a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563894115720 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5638941157a0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56389411fd60 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56389411fd40 <col:109> 'int' 0
| `-ParmVarDecl 0x563894115818 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fd98 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fd78 <col:129> 'int' 0
|-CXXMethodDecl 0x563894115cd8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563894115a28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563894115aa0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563894115b20 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x563894115b98 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fdd0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fdb0 <col:117> 'int' 0
|-CXXMethodDecl 0x563894116068 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563894115db0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894115e28 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563894115ea8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56389411fde8 <col:99> 'int' 0
| `-ParmVarDecl 0x563894115f20 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56389411fe28 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56389411fe08 <col:119> 'int' 0
|-CXXMethodDecl 0x563894116488 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x563894116138 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5638941161b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563894116230 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5638941162b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56389411fe60 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56389411fe40 <col:108> 'int' 0
| `-ParmVarDecl 0x563894116330 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56389411fe98 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56389411fe78 <col:141> 'int' 0
|-CXXMethodDecl 0x5638941168a8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563894116560 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5638941165e0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563894116658 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5638941166d8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x563894116758 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56389411feb0 <col:121> 'int' 0
|-CXXMethodDecl 0x563894116cd8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563894116988 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x563894116a08 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x563894116a80 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563894116b00 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56389411fed0 <col:98> 'int' 0
| `-ParmVarDecl 0x563894116b80 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56389411fef0 <col:123> 'int' 0
|-CXXMethodDecl 0x563894116fa0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x563894116db0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563894116e30 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x563894116eb0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56389411ff10 <col:80> 'int' 0
|-EnumDecl 0x563894117058 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x563894117160 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5638941173f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563894117140 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x563894117120 <col:42> 'int' 1
| |-EnumConstantDecl 0x5638941171f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563894117408 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941171d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5638941171b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x563894117280 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563894117420 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563894117260 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x563894117240 <col:44> 'int' 4
| |-EnumConstantDecl 0x563894117310 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563894117438 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941172f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5638941172d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5638941173a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x563894117450 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563894117380 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x563894117360 <col:34> 'int' 6
|-CXXMethodDecl 0x563894117708 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x563894117478 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x563894117518 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x563894117598 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x563894117610 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56389411ffc8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56389411ffb0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56389411ff98 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56389411ff78 <col:98, col:105> 'String' (CXXTemporary 0x56389411ff78)
|           `-CXXTemporaryObjectExpr 0x56389411ff40 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5638941179a8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5638941177d8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563894117850 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5638941178c8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563894120078 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563894120060 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563894120048 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563894120028 <col:94, col:101> 'String' (CXXTemporary 0x563894120028)
| |         `-CXXTemporaryObjectExpr 0x56389411fff0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563894120860 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5638941207d8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5638941207a8 <col:9> '<bound member function type>' ->add_task_handlers 0x563894117708
|     | `-CXXThisExpr 0x563894120798 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563894120818 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563894120718 <col:27> 'Task *' lvalue ParmVar 0x5638941177d8 'task' 'Task *'
|     |-ImplicitCastExpr 0x563894120830 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x563894120738 <col:33> 'NotifierSignal *' lvalue ParmVar 0x563894117850 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x563894120848 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563894120758 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5638941173a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563894120778 <col:62> 'const String' lvalue ParmVar 0x5638941178c8 'prefix' 'const String &'
|-CXXMethodDecl 0x563894117bb8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x563894117a70 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563894117ae8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563894120128 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563894120110 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5638941200f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5638941200d8 <col:70, col:77> 'String' (CXXTemporary 0x5638941200d8)
| |         `-CXXTemporaryObjectExpr 0x5638941200a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x563894120a38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5638941209b0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563894120980 <col:9> '<bound member function type>' ->add_task_handlers 0x563894117708
|     | `-CXXThisExpr 0x563894120970 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5638941209f0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5638941208f0 <col:27> 'Task *' lvalue ParmVar 0x563894117a70 'task' 'Task *'
|     |-ImplicitCastExpr 0x563894120a08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x563894120910 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x563894120a20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563894120930 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5638941173a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563894120950 <col:57> 'const String' lvalue ParmVar 0x563894117ae8 'prefix' 'const String &'
|-CXXMethodDecl 0x563894117e98 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x563894117c80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894117d00 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894117d78 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x563894118148 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x563894117f68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894117fe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894118068 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x563894118438 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563894118218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894118298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894118310 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5638941186e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x563894118508 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894118588 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894118608 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x563894118998 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5638941187b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894118838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5638941188b8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x563894118c48 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x563894118a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894118ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894118b60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x563894118ef8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x563894118d18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894118d98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894118e18 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x563894119208 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x563894119020 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5638941190a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894119120 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5638941194e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5638941192d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894119358 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894119400 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5638941197c8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5638941195b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894119638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5638941196e0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563894119a30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563894119898 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563894119918 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563894119990 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563894119cd8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x563894119b00 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563894119b80 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563894119bf8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563894119f88 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563894119da8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563894119e28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563894119ea8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56389411a238 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56389411a058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56389411a0d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56389411a150 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56389411a4e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56389411a308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56389411a388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56389411a400 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56389411a7b8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56389411a5b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56389411a638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56389411a6d8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56389411aae8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56389411a888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56389411a908 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56389411a980 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56389411a9f8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563894120140 <col:93> 'bool' false
|-CXXMethodDecl 0x56389411acd0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56389411abb8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56389411ac38 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56389411aea8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56389411ad90 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56389411ae10 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56389411b188 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56389411af68 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56389411afe0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56389411b060 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56389411b0d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56389411b478 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56389411b258 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56389411b2d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56389411b350 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56389411b3c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56389411b6b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56389411b550 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56389411b5d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56389411b898 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56389411b778 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56389411b7f8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56389411b948 prev 0x5638941130e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56389411ba40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56389411bad0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56389411bb48 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56389411bc08 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56389411bcd0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56389411be48 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56389411bd80 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56389411bef0 <col:24>
| | `-OptimizeNoneAttr 0x56389411bf48 <col:34>
| |-CXXMethodDecl 0x56389411bf90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56389411c248 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56389411c040 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56389411c0b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56389411c138 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56389411c300 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56389411c338 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56389411c3a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56389411c428 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56389411c748 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56389411c4e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56389411c558 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56389411c5d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56389411c650 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56389411c860 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5638941241d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5638941241d8
| | `-ParmVarDecl 0x5638941242e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x563894124388 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563894124388
| | `-ParmVarDecl 0x563894124498 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5638941f2a00 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56389411c8d8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56389411c978 <col:38> "" ""
|-CXXMethodDecl 0x56389411ca08 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56389411caa8 <col:44> "" ""
|-AccessSpecDecl 0x56389411cb18 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56389411cb40 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56389411cc40 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56389411cc90 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56389411cc20 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56389411cc00 <col:27> 'int' 4
|-FieldDecl 0x56389411cd48 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56389411cef8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56389411cfb0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56389411e040 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56389411e0a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56389411e1f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56389411e138 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56389411e3a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56389411e2b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56389411e588 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56389411e468 <col:20> col:23 'int'
| `-ParmVarDecl 0x56389411e4e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x56389411e830 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56389411e650 <col:23> col:26 'int'
| |-ParmVarDecl 0x56389411e6d0 <col:28> col:31 'int'
| `-ParmVarDecl 0x56389411e748 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56389411e8e8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56389411e9b0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56389411ea00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56389411ea50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56389411ec30 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56389411eae0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56389411eb58 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56389411eed8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56389411ecf8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56389411ed78 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56389411edf0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56389411f0f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56389411efa8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56389411f028 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56389411f430 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56389411f1b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56389411f238 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56389411f2b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56389411f330 <col:57> col:60 'int'
|-CXXMethodDecl 0x56389411f618 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56389411f500 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56389411f580 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56389411f768 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56389411f6d8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56389411fae8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56389411f828 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56389411f8a8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56389411f920 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56389411f9a0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56389411fc00 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetTCPChecksum
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _fixoff
           | [sizeof=112, dsize=109, align=8,
           |  nvsize=109, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563894127348 <../elements/tcpudp/settcpchecksum.hh:21:1, line:34:1> line:21:7 class SetTCPChecksum definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5638941274a8 <col:1, col:7> col:7 implicit referenced class SetTCPChecksum
|-AccessSpecDecl 0x563894127538 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x5638941275c0 <line:23:3, col:18> col:3 SetTCPChecksum 'void ()'
|-CXXDestructorDecl 0x5638941276b0 <line:24:3, col:19> col:3 ~SetTCPChecksum 'void ()' noexcept-unevaluated 0x5638941276b0
| `-Overrides: [ 0x56389410ec38 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5638941277e0 <line:26:3, col:61> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x563894110098 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5638941281a8 <col:34, col:61>
|   `-ReturnStmt 0x563894128198 <col:36, col:43>
|     `-ImplicitCastExpr 0x563894128180 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x563894128158 <col:43> 'const char [15]' lvalue "SetTCPChecksum"
|-CXXMethodDecl 0x5638941278a8 <line:27:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x563894110160 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x563894128208 <col:34, col:54>
|   `-ReturnStmt 0x5638941281f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5638941281e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5638941281c0 <col:43> 'const char []' lvalue Var 0x563894110410 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x563894127b80 <line:28:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x563894111930 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x563894127a30 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x563894127aa8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563894127cd0 <line:30:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56389410f278 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x563894127c40 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x563894127d78 <line:32:1, col:8> col:1 private
|-FieldDecl 0x563894127db0 <line:33:3, col:8> col:8 _fixoff 'bool'
|-CXXConstructorDecl 0x563894127e28 <line:21:7> col:7 implicit SetTCPChecksum 'void (const SetTCPChecksum &)' inline default_delete noexcept-unevaluated 0x563894127e28
| `-ParmVarDecl 0x563894127f38 <col:7> col:7 'const SetTCPChecksum &'
`-CXXMethodDecl 0x563894127fd8 <col:7> col:7 implicit operator= 'SetTCPChecksum &(const SetTCPChecksum &)' inline default_delete noexcept-unevaluated 0x563894127fd8
  `-ParmVarDecl 0x5638941280e8 <col:7> col:7 'const SetTCPChecksum &'

Layout: <CGRecordLayout
  LLVMType:%class.SetTCPChecksum = type { %class.Element.base, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%class.SetTCPChecksum.base = type { %class.Element.base, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893ee2800 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563893ee2918 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x563893ee29b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x563893ee2a18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x563893ee2a78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x563893ee2b28 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893ee2e30 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563893ee2f48 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x563893ee2ff0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x563893ee3058 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x563893ee30e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x563893ee9180 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563893ee95b8 <col:12>
|-CXXConstructorDecl 0x563893ee9288 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563893ee9398 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563893ee2ff0 'data' 'const char *'
| | `-ImplicitCastExpr 0x563893eebb40 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x563893eebb10 <col:12> 'const char *const' lvalue .data 0x563893ee2ff0
| |     `-DeclRefExpr 0x563893eebaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563893ee3058 'length' 'int'
| | `-ImplicitCastExpr 0x563893eebbd0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563893eebba0 <col:12> 'const int' lvalue .length 0x563893ee3058
| |     `-DeclRefExpr 0x563893eebb80 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563893ee30e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x563893eebc60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x563893eebc30 <col:12> 'String::memo_t *const' lvalue .memo 0x563893ee30e8
| |     `-DeclRefExpr 0x563893eebc10 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| `-CompoundStmt 0x563893eebcb8 <col:12>
|-CXXConstructorDecl 0x563893ee9438 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563893ee9438
| `-ParmVarDecl 0x563893ee9548 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x563893eeeaa0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563893efa4b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563893efa5c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x563893efaae0 <col:12>
|   |-BinaryOperator 0x563893efa8f8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563893efa8b0 <col:12> 'const char *' lvalue ->data 0x563893ee2ff0
|   | | `-CXXThisExpr 0x563893efa8a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563893efa8e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x563893efa870 <col:12> 'const char *const' lvalue .data 0x563893ee2ff0
|   |     `-DeclRefExpr 0x563893efa850 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563893efa9c0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x563893efa978 <col:12> 'int' lvalue ->length 0x563893ee3058
|   | | `-CXXThisExpr 0x563893efa968 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563893efa9a8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x563893efa938 <col:12> 'const int' lvalue .length 0x563893ee3058
|   |     `-DeclRefExpr 0x563893efa918 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563893efaa88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x563893efaa40 <col:12> 'String::memo_t *' lvalue ->memo 0x563893ee30e8
|   | | `-CXXThisExpr 0x563893efaa30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563893efaa70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x563893efaa00 <col:12> 'String::memo_t *const' lvalue .memo 0x563893ee30e8
|   |     `-DeclRefExpr 0x563893efa9e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x563893efaad0 <col:12>
|     `-UnaryOperator 0x563893efaab8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563893efaaa8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x563893efa638 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563893efa638
  `-ParmVarDecl 0x563893efa748 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893ed9d70 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563893ed9e88 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x563893ed9f18 <col:16, col:22> col:16 public
|-TypedefDecl 0x563893ed9f58 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563893baddc0 'const char *'
|   `-QualType 0x563893bad311 'const char' const
|     `-BuiltinType 0x563893bad310 'char'
|-TypedefDecl 0x563893ed9fe0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x563893ed9fb0 'String::const_iterator' sugar
|   |-Typedef 0x563893ed9f58 'const_iterator'
|   `-PointerType 0x563893baddc0 'const char *'
|     `-QualType 0x563893bad311 'const char' const
|       `-BuiltinType 0x563893bad310 'char'
|-TypedefDecl 0x563893eda150 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x563893eda0c0 'int (String::*)() const'
|   |-RecordType 0x563893ed9e00 'String'
|   | `-CXXRecord 0x563893ed9d70 'String'
|   `-ParenType 0x563893eda060 'int () const' sugar
|     `-FunctionProtoType 0x563893eadbf0 'int () const' const cdecl
|       `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x563893eda1b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563893d027d0 'int64_t' sugar
|   |-Typedef 0x563893c162d0 'int64_t'
|   `-TypedefType 0x563893bef4d0 '__int64_t' sugar
|     |-Typedef 0x563893bef0a8 '__int64_t'
|     `-BuiltinType 0x563893bad390 'long'
|-TypedefDecl 0x563893eda220 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563893d026f0 'uint64_t' sugar
|   |-Typedef 0x563893c16470 'uint64_t'
|   `-TypedefType 0x563893bef560 '__uint64_t' sugar
|     |-Typedef 0x563893bef118 '__uint64_t'
|     `-BuiltinType 0x563893bad430 'unsigned long'
|-TypedefDecl 0x563893eda2b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x563893eda280 'String::intmax_t' sugar
|   |-Typedef 0x563893eda1b8 'intmax_t'
|   `-TypedefType 0x563893d027d0 'int64_t' sugar
|     |-Typedef 0x563893c162d0 'int64_t'
|     `-TypedefType 0x563893bef4d0 '__int64_t' sugar
|       |-Typedef 0x563893bef0a8 '__int64_t'
|       `-BuiltinType 0x563893bad390 'long'
|-TypedefDecl 0x563893eda340 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x563893eda310 'String::uintmax_t' sugar
|   |-Typedef 0x563893eda220 'uintmax_t'
|   `-TypedefType 0x563893d026f0 'uint64_t' sugar
|     |-Typedef 0x563893c16470 'uint64_t'
|     `-TypedefType 0x563893bef560 '__uint64_t' sugar
|       |-Typedef 0x563893bef118 '__uint64_t'
|       `-BuiltinType 0x563893bad430 'unsigned long'
|-CXXConstructorDecl 0x563893eda400 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x563893eda5a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x563893eda4e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x563893eda758 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x563893eda698 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x563893eda8b0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x563893eda820 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x563893edaac8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x563893eda978 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x563893eda9f8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x563893edace8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563893edab98 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x563893edac18 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x563893edaf08 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563893edadb8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x563893edae38 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x563893edb128 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563893edafd8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x563893edb058 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x563893edb2b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x563893edb1f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x563893edb438 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x563893edb378 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x563893edb5c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x563893edb500 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x563893edb720 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x563893edb690 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x563893edb878 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x563893edb7e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x563893edb9d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x563893edb940 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x563893edbb58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x563893edba98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x563893edbce8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x563893edbc20 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x563893edbe78 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x563893edbdb0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x563893edc008 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x563893edbf40 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x563893edc100 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x563893edc228 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x563893edc3a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x563893edc2e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x563893edc4f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x563893edc468 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x563893edc5b0 <col:63> "" ""
|-CXXMethodDecl 0x563893edc6f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x563893edc638 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x563893edc908 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x563893edc7b8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x563893edc838 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x563893edcb28 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x563893edc9d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x563893edca50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x563893edce08 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x563893edcbe8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563893edcc68 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x563893ee8c50 <col:55> 'int' 10
| `-ParmVarDecl 0x563893edcce0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563893ee8c70 <col:76> 'bool' true
|-CXXMethodDecl 0x563893edd0e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x563893edced0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563893edcf50 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563893ee8c80 <col:56> 'int' 10
| `-ParmVarDecl 0x563893edcfc8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563893ee8ca0 <col:77> 'bool' true
|-CXXMethodDecl 0x563893edd1f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563893edd2b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563893edd380 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x563893edd420 <col:20>
| `-OptimizeNoneAttr 0x563893edd478 <col:30>
|-CXXConversionDecl 0x563893edd568 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563893edd638 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x563893edd6f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563893edd7e8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563893edd8a8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563893edda28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563893edd960 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563893eddb78 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x563893eddae8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x563893eddc68 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563893eddd28 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563893eddf78 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x563893eddde0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x563893edde60 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x563893ede1d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x563893ede040 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x563893ede0c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x563893ede2a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563893ede4b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x563893ede360 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x563893ede3e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x563893ede6d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x563893ede580 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x563893ede600 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x563893ede868 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x563893ede7a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x563893ede958 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x563893edeac8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x563893edea08 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563893edecd8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x563893edeb88 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563893edec08 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563893edeef0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x563893eded98 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x563893edee10 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x563893edf080 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x563893edefb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563893edf2a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x563893edf140 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x563893edf1c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563893edf3f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x563893edf360 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x563893edf5c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x563893edf4b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563893edf530 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563893edf718 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x563893edf688 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x563893edf930 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x563893edf7d0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x563893edf850 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x563893ee8cb0 <col:39> 'int' 0
|-CXXMethodDecl 0x563893edfb50 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x563893edf9f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x563893edfa70 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x563893ee8cd0 <col:48> 'int' 0
|-CXXMethodDecl 0x563893edfd30 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x563893edfc10 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x563893edfc90 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x563893ee8cf0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x563893edfe00 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x563893edfec0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x563893edff80 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x563893ee0040 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x563893ee0100 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x563893ee02a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x563893ee01b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x563893ee0428 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x563893ee0360 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x563893ee0600 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x563893ee04e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x563893ee0778 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x563893ee06b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x563893ee08c0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x563893ee0830 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563893ee0a10 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563893ee0980 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563893ee0be8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563893ee0ad0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563893ee0b50 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563893ee0dc8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563893ee0cb0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563893ee0d30 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563893ee0f18 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x563893ee0e88 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563893ee1128 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563893ee0fd8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563893ee1058 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563893ee1288 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x563893ee11f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563893ee13e0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x563893ee1348 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x563893ee1488 <col:57> "" ""
|-CXXMethodDecl 0x563893ee1598 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x563893ee1508 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x563893ee16e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x563893ee1658 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x563893ee1868 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x563893ee17a0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x563893ee1930 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x563893ee19f0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x563893ee1ab0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x563893ee1b50 <col:49> "" ""
|-CXXMethodDecl 0x563893ee1be0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x563893ee1ca0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x563893ee1d90 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x563893ee1e58 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x563893ee1f18 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x563893ee1fd8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563893ee20d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x563893ee2198 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x563893ee2260 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x563893ee2438 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x563893ee2318 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x563893ee2398 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x563893ee2660 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x563893ee2500 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x563893ee2580 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x563893ee2770 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x563893ee27d8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x563893ee2800 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563893ee2918 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x563893ee29b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x563893ee2a18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x563893ee2a78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x563893ee2b28 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x563893ee2b90 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x563893ee2dc8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x563893ee2e18 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563893ee2da8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x563893ee2cb8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x563893ee2c60 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x563893ee2ca0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x563893ee2c80 <col:32> 'int' 8
|-CXXRecordDecl 0x563893ee2e30 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563893ee2f48 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x563893ee2ff0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x563893ee3058 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x563893ee30e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x563893ee9180 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563893ee95b8 <col:12>
| |-CXXConstructorDecl 0x563893ee9288 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563893ee9398 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563893ee2ff0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x563893eebb40 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x563893eebb10 <col:12> 'const char *const' lvalue .data 0x563893ee2ff0
| | |     `-DeclRefExpr 0x563893eebaf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563893ee3058 'length' 'int'
| | | `-ImplicitCastExpr 0x563893eebbd0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563893eebba0 <col:12> 'const int' lvalue .length 0x563893ee3058
| | |     `-DeclRefExpr 0x563893eebb80 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563893ee30e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x563893eebc60 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x563893eebc30 <col:12> 'String::memo_t *const' lvalue .memo 0x563893ee30e8
| | |     `-DeclRefExpr 0x563893eebc10 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893ee9398 '' 'const String::rep_t &'
| | `-CompoundStmt 0x563893eebcb8 <col:12>
| |-CXXConstructorDecl 0x563893ee9438 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563893ee9438
| | `-ParmVarDecl 0x563893ee9548 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x563893eeeaa0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563893efa4b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563893efa5c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x563893efaae0 <col:12>
| |   |-BinaryOperator 0x563893efa8f8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x563893efa8b0 <col:12> 'const char *' lvalue ->data 0x563893ee2ff0
| |   | | `-CXXThisExpr 0x563893efa8a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563893efa8e0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x563893efa870 <col:12> 'const char *const' lvalue .data 0x563893ee2ff0
| |   |     `-DeclRefExpr 0x563893efa850 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563893efa9c0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x563893efa978 <col:12> 'int' lvalue ->length 0x563893ee3058
| |   | | `-CXXThisExpr 0x563893efa968 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563893efa9a8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563893efa938 <col:12> 'const int' lvalue .length 0x563893ee3058
| |   |     `-DeclRefExpr 0x563893efa918 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563893efaa88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x563893efaa40 <col:12> 'String::memo_t *' lvalue ->memo 0x563893ee30e8
| |   | | `-CXXThisExpr 0x563893efaa30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563893efaa70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x563893efaa00 <col:12> 'String::memo_t *const' lvalue .memo 0x563893ee30e8
| |   |     `-DeclRefExpr 0x563893efa9e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563893efa5c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x563893efaad0 <col:12>
| |     `-UnaryOperator 0x563893efaab8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563893efaaa8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x563893efa638 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563893efa638
|   `-ParmVarDecl 0x563893efa748 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x563893ee3160 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x563893ee33a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x563893ee31c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x563893ee3248 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x563893ee32c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x563893ee9140 <col:79, line:261:5>
|   |-BinaryOperator 0x563893ee8db8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563893ee8d50 <col:2, col:5> 'const char *' lvalue .data 0x563893ee2ff0
|   | | `-MemberExpr 0x563893ee8d20 <col:2> 'String::rep_t' lvalue ->_r 0x563893ee3160
|   | |   `-CXXThisExpr 0x563893ee8d10 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563893ee8da0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563893ee8d80 <col:12> 'const char *' lvalue ParmVar 0x563893ee31c8 'data' 'const char *'
|   |-BinaryOperator 0x563893ee8e80 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x563893ee8e18 <col:2, col:5> 'int' lvalue .length 0x563893ee3058
|   | | `-MemberExpr 0x563893ee8de8 <col:2> 'String::rep_t' lvalue ->_r 0x563893ee3160
|   | |   `-CXXThisExpr 0x563893ee8dd8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563893ee8e68 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563893ee8e48 <col:14> 'int' lvalue ParmVar 0x563893ee3248 'length' 'int'
|   `-IfStmt 0x563893ee9128 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x563893ee8fa0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563893ee8f88 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x563893ee8f68 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x563893ee8f48 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x563893ee8ee0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|     |       | `-MemberExpr 0x563893ee8eb0 <col:7> 'String::rep_t' lvalue ->_r 0x563893ee3160
|     |       |   `-CXXThisExpr 0x563893ee8ea0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x563893ee8f30 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x563893ee8f10 <col:17> 'String::memo_t *' lvalue ParmVar 0x563893ee32c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x563893ee9100 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x563893ee90e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563893ee8ff0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x563893ed1dd8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x563893ee9058 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563893ee29b8
|         `-ImplicitCastExpr 0x563893ee9040 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563893ee9020 <col:27> 'String::memo_t *' lvalue ParmVar 0x563893ee32c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x563893ee3658 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x563893ee3478 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x563893ee34f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x563893ee3570 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x563893ee3160 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x563893ee95c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563893ee9758 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x563893ee96c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x563893ee9630 <col:2> '<bound member function type>' ->assign_memo 0x563893ee33a8
|     | `-ImplicitCastExpr 0x563893ee96f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x563893ee9620 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x563893ee9710 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563893ee9660 <col:14> 'const char *' lvalue ParmVar 0x563893ee3478 'data' 'const char *'
|     |-ImplicitCastExpr 0x563893ee9728 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563893ee9680 <col:20> 'int' lvalue ParmVar 0x563893ee34f8 'length' 'int'
|     `-ImplicitCastExpr 0x563893ee9740 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563893ee96a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x563893ee3570 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x563893ee37e8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x563893ee3728 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x563893ee99b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x563893ee9930 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x563893ee9780 <col:2> '<bound member function type>' ->assign_memo 0x563893ee33a8
|     | `-CXXThisExpr 0x563893ee9770 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x563893ee9968 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x563893ee9800 <col:14, col:19> 'const char *' lvalue .data 0x563893ee2ff0
|     |   `-MemberExpr 0x563893ee97d0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x563893ee3160
|     |     `-DeclRefExpr 0x563893ee97b0 <col:14> 'const String' lvalue ParmVar 0x563893ee3728 'x' 'const String &'
|     |-ImplicitCastExpr 0x563893ee9980 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x563893ee9880 <col:25, col:30> 'int' lvalue .length 0x563893ee3058
|     |   `-MemberExpr 0x563893ee9850 <col:25, col:27> 'String::rep_t' lvalue ._r 0x563893ee3160
|     |     `-DeclRefExpr 0x563893ee9830 <col:25> 'const String' lvalue ParmVar 0x563893ee3728 'x' 'const String &'
|     `-ImplicitCastExpr 0x563893ee9998 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x563893ee9900 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|         `-MemberExpr 0x563893ee98d0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x563893ee3160
|           `-DeclRefExpr 0x563893ee98b0 <col:38> 'const String' lvalue ParmVar 0x563893ee3728 'x' 'const String &'
|-CXXMethodDecl 0x563893ee38b0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x563893eea370 <col:31, line:278:5>
|   `-IfStmt 0x563893eea358 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x563893ee9a50 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563893ee9a38 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x563893ee9a08 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|     |     `-MemberExpr 0x563893ee99d8 <col:6> 'String::rep_t' lvalue ->_r 0x563893ee3160
|     |       `-CXXThisExpr 0x563893ee99c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x563893eea330 <col:15, line:277:2>
|       |-ParenExpr 0x563893ee9f00 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x563893ee9ed0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x563893ee9b60 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x563893ee9b48 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x563893ee9b30 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x563893ee9af0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563893ee29b8
|       |   |       `-ImplicitCastExpr 0x563893ee9ad8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x563893ee9aa8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|       |   |           `-MemberExpr 0x563893ee9a78 <col:27> 'String::rep_t' lvalue ->_r 0x563893ee3160
|       |   |             `-CXXThisExpr 0x563893ee9a68 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x563893ee9bc0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x563893ee9ba0 <col:54> 'int' 0
|       |   `-CallExpr 0x563893ee9e30 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x563893ee9e18 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563893ee9d98 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x563893ee9e70 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563893ee9ca8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x563893ee9e88 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563893ee9cd8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x563893ee9ea0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x563893ee9d10 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x563893ee9eb8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x563893ee9d80 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x563893ee9d68 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x563893ee9d30 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x563893eea250 <line:274:6, line:275:22>
|       | |-CallExpr 0x563893eea110 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x563893eea0f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563893eea070 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x563893ed3220 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x563893eea040 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563893ee29b8
|       | |   `-ImplicitCastExpr 0x563893eea028 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x563893ee9ff8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|       | |       `-MemberExpr 0x563893ee9fc8 <col:40> 'String::rep_t' lvalue ->_r 0x563893ee3160
|       | |         `-CXXThisExpr 0x563893ee9fb8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x563893eea210 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x563893eea1f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563893eea138 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x563893ee8090 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x563893eea238 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x563893eea198 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|       |       `-MemberExpr 0x563893eea168 <col:15> 'String::rep_t' lvalue ->_r 0x563893ee3160
|       |         `-CXXThisExpr 0x563893eea158 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x563893eea310 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x563893eea2a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563893ee30e8
|         | `-MemberExpr 0x563893eea278 <col:6> 'String::rep_t' lvalue ->_r 0x563893ee3160
|         |   `-CXXThisExpr 0x563893eea268 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x563893eea2f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x563893eea2d8 <col:16> 'int' 0
|-CXXMethodDecl 0x563893ee3b48 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x563893ee3968 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563893ee39e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563893ee3a60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x563893ee3c20 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563893ee3e70 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x563893ee3cd8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563893ee3d58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563893ee3dd0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x563893ee4058 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x563893ee3f40 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x563893ee3fc0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x563893ee4158 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x563893eea448 <col:41, line:286:5>
|   `-ReturnStmt 0x563893eea438 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x563893eea408 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x563893eea3d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x563893eea3b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x563893eea398 <col:46> 'int' 1
|-CXXMethodDecl 0x563893ee43f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x563893ee4210 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x563893ee4290 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x563893ee4310 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x563893ee8090 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x563893ee44c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x563893ee8160 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x563893ee8330 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x563893ee8218 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563893ee8298 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x563893ee83f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x563893ee84b8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x563893ee85b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x563893ee8630 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x563893ee86a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x563893ee8710 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x563893ee8810 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x563893ee8860 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563893ee87f0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x563893ee87d0 <col:22> 'int' 14
|-CXXMethodDecl 0x563893ee8a78 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x563893ee8890 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x563893ee8910 <col:38> col:41 'int'
| `-ParmVarDecl 0x563893ee8990 <col:43> col:46 'int'
|-FriendDecl 0x563893ee8b80 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x563893ee8c10 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563894155ff0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5638941561c8 prev 0x563894155ff0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563894156258 <col:46, col:52> col:46 public
|-TypedefDecl 0x563894156280 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x563894157be0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x563894157b90 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x563894157b70 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x563894156498 'type'
|     `-SubstTemplateTypeParmType 0x563894156460 'String' sugar
|       |-TemplateTypeParmType 0x563893e9d610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893e9d5c0 'T'
|       `-RecordType 0x563893ed9e00 'String'
|         `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x563894157c98 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x563894157c60 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x563894157c40 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563894157be0 'type'
|     `-ElaboratedType 0x563894157b90 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x563894157b70 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x563894156498 'type'
|         `-SubstTemplateTypeParmType 0x563894156460 'String' sugar
|           |-TemplateTypeParmType 0x563893e9d610 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563893e9d5c0 'T'
|           `-RecordType 0x563893ed9e00 'String'
|             `-CXXRecord 0x563893ed9d70 'String'
|-CXXMethodDecl 0x563894157e18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x563894157d28 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x563894157f08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563894157fe8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x563894157fe8
|-CXXMethodDecl 0x5638941582b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5638941581c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5638941584f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563894158370 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5638941583e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5638941586c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5638941585b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563894158630 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563894158828 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5638941588f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563894158b48 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5638941589b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563894158a30 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56389415cde8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x563894158c18 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563894158c90 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56389415cfa8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56389415ceb8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56389415d168 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56389415d070 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56389415d220 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56389415d2d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56389415d508 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56389415d380 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56389415d3f8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56389415d7a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56389415d6b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56389415d870 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56389415d8c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56389415d910 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5638941115a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563894154a58 prev 0x5638941115a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563894155f60 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563894155f10 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563894155ef0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563894155da0 'type'
|     `-SubstTemplateTypeParmType 0x563894155c30 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x563893e733c0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563893e73368 'F'
|       `-RecordType 0x563894155890 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5638941557b0 'typed_array_memory'
|-FieldDecl 0x56389415d960 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56389415d9b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56389415d9e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|   |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563893eaa8d8 'T'
|   `-RecordType 0x563893ed9e00 'String'
|     `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415da78 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56389415da40 'String &'
|   `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-RecordType 0x563893ed9e00 'String'
|       `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415db08 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56389415dad0 'const String &'
|   `-QualType 0x563894154af1 'const String' const
|     `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-RecordType 0x563893ed9e00 'String'
|         `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415db98 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56389415db60 'String *'
|   `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-RecordType 0x563893ed9e00 'String'
|       `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415dc28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56389415dbf0 'const String *'
|   `-QualType 0x563894154af1 'const String' const
|     `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-RecordType 0x563893ed9e00 'String'
|         `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415e880 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56389415e830 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56389415e810 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56389415e748 'type'
|     `-LValueReferenceType 0x56389415e710 'const String &'
|       `-QualType 0x56389415e4b1 'const String' const
|         `-SubstTemplateTypeParmType 0x56389415e4b0 'String' sugar
|           |-TemplateTypeParmType 0x563893e7d310 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563893e7d2b8 'T'
|           `-RecordType 0x563893ed9e00 'String'
|             `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415e8e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56389415dad0 'const String &'
|   `-QualType 0x563894154af1 'const String' const
|     `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-RecordType 0x563893ed9e00 'String'
|         `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415e940 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x56389415e9a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56389415db60 'String *'
|   `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-RecordType 0x563893ed9e00 'String'
|       `-CXXRecord 0x563893ed9d70 'String'
|-TypedefDecl 0x56389415ea10 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56389415dbf0 'const String *'
|   `-QualType 0x563894154af1 'const String' const
|     `-SubstTemplateTypeParmType 0x563894154af0 'String' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-RecordType 0x563893ed9e00 'String'
|         `-CXXRecord 0x563893ed9d70 'String'
|-EnumDecl 0x56389415ea68 <line:134:5> col:5
| `-EnumConstantDecl 0x56389415eb60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56389415eb40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563893eabfb8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563893eabf90 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563893eabf70 <col:40> 'int' 1
|-CXXConstructorDecl 0x56389415ebe8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56389415ee78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56389415eca0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56389415ed40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56389415f108 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56389415eff0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56389415f3c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56389415f2b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56389415f6e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56389415f5c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56389415f9f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56389415f8d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56389415fce0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56389415fb28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56389415fba0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56389415fe08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56389415feb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56389415ff10 <col:30> Inherited
|-CXXMethodDecl 0x56389415ff58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563894160008 <col:20> Inherited
| `-OptimizeNoneAttr 0x563894160060 <col:30> Inherited
|-CXXMethodDecl 0x563894160128 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5638941601d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563894160230 <col:30> Inherited
|-CXXMethodDecl 0x563894160278 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563894160328 <col:20> Inherited
| `-OptimizeNoneAttr 0x563894160380 <col:30> Inherited
|-CXXMethodDecl 0x5638941603c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563894160478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941604d0 <col:30> Inherited
|-CXXMethodDecl 0x563894160518 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5638941605c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563894160620 <col:30> Inherited
|-CXXMethodDecl 0x563894160648 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5638941606f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5638941607a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563894160968 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563894160858 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5638941608d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563894160ab8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563894160a28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563894160c68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563894160b70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563894160d20 <col:20>
| `-OptimizeNoneAttr 0x563894160d78 <col:30>
|-CXXMethodDecl 0x563894160e98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563894160da0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563894160f50 <col:20>
| `-OptimizeNoneAttr 0x563894160fa8 <col:30>
|-CXXMethodDecl 0x563894161060 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563894160fd0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941611a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563894161118 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941612d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5638941613d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5638941614a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563894161578 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5638941616b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563894161628 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563894161800 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563894161770 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563894161948 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5638941618b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563894161a00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563894161b00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563894161a70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563894161bb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563894161c78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563894161d78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x563894161ef8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563894161e38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5638941626b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563894161fb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563894162618 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563894162518 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563894162798 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5638941628e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563894162858 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5638941629a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563894162be8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563894162a60 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563894162ad8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563894162d78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x563894162cb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563894162f88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563894162e40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563894162eb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563894163048 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5638941632a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5638941631b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563894163378 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563894163378

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638941ddea8 prev 0x56389408ecb8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5638941ddfa0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5638941de030 <col:22, col:28> col:22 public
|-EnumDecl 0x5638941de058 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5638941de178 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de158 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5638941de140 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5638941de120 <col:14> 'int' 999
| |-EnumConstantDecl 0x5638941de220 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de200 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5638941de1e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5638941de1c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5638941de2b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de290 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5638941de270 <col:17> 'int' 0
| |-EnumConstantDecl 0x5638941de340 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de320 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5638941de300 <col:13> 'int' 1
| |-EnumConstantDecl 0x5638941de3d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de3b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5638941de390 <col:16> 'int' 2
| |-EnumConstantDecl 0x5638941de460 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de440 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5638941de420 <col:13> 'int' 3
| |-EnumConstantDecl 0x5638941de4f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de4d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5638941de4b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5638941de580 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de560 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5638941de540 <col:14> 'int' 5
| |-EnumConstantDecl 0x5638941de610 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5638941de5f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5638941de5d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5638941de6a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5638941de680 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5638941de660 <col:13> 'int' 7
|-VarDecl 0x5638941de710 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5638941de798 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5638941de820 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5638941de8a8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5638941de930 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5638941de9b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5638941dea40 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5638941deac8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5638941deb50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5638941debd8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5638941dec60 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5638941ded60 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5638941e4098 '_nerrors' 'int'
| | `-IntegerLiteral 0x5638941e4828 <line:128:13> 'int' 0
| `-CompoundStmt 0x5638941e4898 <col:16, line:129:5>
|-CXXDestructorDecl 0x5638941dee50 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5638941e48a8 <col:29, line:132:5>
|-CXXMethodDecl 0x5638941df008 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5638941def40 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5638941df0d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5638941df1b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5638941e4900 <col:44, line:161:5>
|   `-ReturnStmt 0x5638941e48f0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5638941e48d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5638941e48b8 <col:9> 'ErrorHandler *' lvalue Var 0x5638941e40f8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5638941df2f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5638941df268 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5638941df3c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5638941e4960 <col:43, line:173:5>
|   `-ReturnStmt 0x5638941e4950 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5638941e4938 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5638941e4918 <col:9> 'ErrorHandler *' lvalue Var 0x5638941e4170 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5638941df478 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5638941df4f8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5638941df608 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5638941df578 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5638941df758 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5638941df6c8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5638941df8b0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5638941df818 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5638941dfa08 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5638941df970 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5638941dfb60 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5638941dfac8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5638941dfd70 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5638941dfc18 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5638941dfc98 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5638941dff48 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5638941dfe30 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5638941dfeb0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5638941e0168 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5638941e0008 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5638941e0088 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5638941e0348 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5638941e0228 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5638941e02a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5638941e0528 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5638941e0408 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5638941e0488 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5638941e06b0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5638941e05e8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5638941e0880 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5638941e0768 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5638941e07e0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5638941e4bb8 <col:57, line:234:5>
|   `-ReturnStmt 0x5638941e4ba8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5638941e4b90 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5638941e4b38 <col:9, col:41> 'int'
|         |-MemberExpr 0x5638941e4b08 <col:9> '<bound member function type>' ->xmessage 0x5638941e06b0
|         | `-CXXThisExpr 0x5638941e4af8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5638941e4b78 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5638941e4b60 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5638941e4ad8 <col:18, col:40> 'String' (CXXTemporary 0x5638941e4ad8)
|               `-CallExpr 0x5638941e4aa0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5638941e4a88 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5638941e4a00 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5638941e2878 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5638941e4a20 <col:31> 'const String' lvalue ParmVar 0x5638941e07e0 'str' 'const String &'
|                 `-DeclRefExpr 0x5638941e4a40 <col:36> 'const String' lvalue ParmVar 0x5638941e0768 'anno' 'const String &'
|-CXXMethodDecl 0x5638941e0b60 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5638941e0940 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5638941e09c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5638941e0a38 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5638941e4e48 <col:68, line:243:5>
|   `-ReturnStmt 0x5638941e4e38 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5638941e4e20 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5638941e4dc0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5638941e4d90 <col:9> '<bound member function type>' ->xmessage 0x5638941e0880
|         | `-CXXThisExpr 0x5638941e4d80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5638941e4c58 <col:18> 'const String' lvalue ParmVar 0x5638941e0940 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5638941e4e08 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5638941e4df0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5638941e4d60 <col:24, col:40> 'String' (CXXTemporary 0x5638941e4d60)
|               `-CXXMemberCallExpr 0x5638941e4cf8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5638941e4c88 <col:24> '<bound member function type>' ->vformat 0x5638941e1d40
|                 | `-CXXThisExpr 0x5638941e4c78 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5638941e4d28 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5638941e4cb8 <col:32> 'const char *' lvalue ParmVar 0x5638941e09c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5638941e4d40 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5638941e4cd8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5638941e0a38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5638941e0e00 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5638941e0c28 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5638941e0ca0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5638941e0d18 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5638941e5188 <col:23, line:254:5>
|   `-ReturnStmt 0x5638941e5178 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5638941e5160 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5638941e5100 <col:9, col:71> 'int'
|         |-MemberExpr 0x5638941e50d0 <col:9> '<bound member function type>' ->xmessage 0x5638941e0880
|         | `-CXXThisExpr 0x5638941e50c0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5638941e5148 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5638941e5130 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5638941e5080 <col:18, col:65> 'String' (CXXTemporary 0x5638941e5080)
|         |     `-CallExpr 0x5638941e5018 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5638941e5000 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5638941e4ee8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5638941e2878 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5638941e4f08 <col:31> 'const String' lvalue ParmVar 0x5638941e0ca0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5638941e5060 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5638941e5048 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5638941e4fe0 <col:37, col:64> 'String' (CXXTemporary 0x5638941e4fe0)
|         |             `-CallExpr 0x5638941e4fb0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5638941e4f98 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5638941e4f28 <col:37> 'String (const String &)' lvalue CXXMethod 0x5638941e2ec8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5638941e4f48 <col:56> 'const String' lvalue ParmVar 0x5638941e0c28 'landmark' 'const String &'
|         `-DeclRefExpr 0x5638941e50a0 <col:68> 'const String' lvalue ParmVar 0x5638941e0d18 'str' 'const String &'
|-CXXMethodDecl 0x5638941e1180 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5638941e0ec8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5638941e0f40 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5638941e0fc0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5638941e1038 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5638941e5440 <col:34, line:267:5>
|   `-ReturnStmt 0x5638941e5430 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5638941e5418 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5638941e53b0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5638941e5380 <col:9> '<bound member function type>' ->xmessage 0x5638941e0e00
|         | `-CXXThisExpr 0x5638941e5370 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5638941e5228 <col:18> 'const String' lvalue ParmVar 0x5638941e0ec8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5638941e5248 <col:28> 'const String' lvalue ParmVar 0x5638941e0f40 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5638941e5400 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5638941e53e8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5638941e5350 <col:34, col:50> 'String' (CXXTemporary 0x5638941e5350)
|               `-CXXMemberCallExpr 0x5638941e52e8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5638941e5278 <col:34> '<bound member function type>' ->vformat 0x5638941e1d40
|                 | `-CXXThisExpr 0x5638941e5268 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5638941e5318 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5638941e52a8 <col:42> 'const char *' lvalue ParmVar 0x5638941e0fc0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5638941e5330 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5638941e52c8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5638941e1038 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5638941e1290 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5638941e54c0 <col:25, line:288:5>
|   `-ReturnStmt 0x5638941e54b0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5638941e5498 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5638941e5468 <col:9> 'const int' lvalue ->_nerrors 0x5638941e4098
|         `-CXXThisExpr 0x5638941e5458 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5638941e14a0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5638941e1348 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5638941e13c8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5638941e1788 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5638941e1568 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5638941e15e8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5638941e1660 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5638941e1920 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5638941e1858 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5638941e1b68 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5638941e19e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5638941e1a58 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5638941e5720 <col:58, line:357:5>
|   `-ReturnStmt 0x5638941e5710 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5638941e56f8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5638941e56c8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5638941e56b0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5638941e5690 <col:9, col:29> 'String' (CXXTemporary 0x5638941e5690)
|             `-CallExpr 0x5638941e5620 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5638941e5608 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5638941e5588 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5638941e1788 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5638941e5528 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5638941e5658 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5638941e5548 <col:21> 'const char *' lvalue ParmVar 0x5638941e19e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5638941e5670 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5638941e5568 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5638941e1a58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5638941e1d40 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5638941e1c30 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5638941e1ca8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5638941e1e98 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5638941e1e08 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5638941e1fe0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5638941e1f50 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5638941e2280 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5638941e2098 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5638941e2118 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5638941e2190 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5638941e23e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5638941e2350 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5638941e5838 <col:37, line:441:5>
|   `-IfStmt 0x5638941e5820 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5638941e57a8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5638941e5778 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5638941e5738 <col:6> 'int' lvalue ParmVar 0x5638941e2350 'level' 'int'
|     | `-ImplicitCastExpr 0x5638941e5790 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5638941e5758 <col:15> 'ErrorHandler::Level' EnumConstant 0x5638941de460 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5638941e5808 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5638941e57d8 <col:8> 'int' lvalue ->_nerrors 0x5638941e4098
|         `-CXXThisExpr 0x5638941e57c8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5638941e24a8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5638941e58d0 <col:26, line:448:5>
|   `-BinaryOperator 0x5638941e58b0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5638941e5860 <col:2> 'int' lvalue ->_nerrors 0x5638941e4098
|     | `-CXXThisExpr 0x5638941e5850 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5638941e5890 <col:13> 'int' 0
|-CXXMethodDecl 0x5638941e2670 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5638941e2560 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5638941e25d8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5638941e2878 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5638941e2730 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5638941e27a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5638941e2b28 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5638941e2938 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5638941e29b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5638941e2a38 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5638941e2be0 <col:59> 0 0
|-CXXMethodDecl 0x5638941e2d78 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5638941e2c58 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5638941e2cd8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5638941e5f40 <col:70, line:534:5>
|   |-DeclStmt 0x5638941e5a40 <line:528:2, col:20>
|   | |-VarDecl 0x5638941e58f8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5638941e5960 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5638941e5998 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5638941e5a00 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5638941e5b10 <line:529:2, col:23>
|   | `-VarDecl 0x5638941e5a70 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5638941e5af8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5638941e5ad8 <col:18> 'const char *' lvalue ParmVar 0x5638941e2c58 'begin' 'const char *'
|   |-DoStmt 0x5638941e5ed8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5638941e5e08 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5638941e5df0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5638941e5dd0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5638941e5b28 <col:6> 'const char *' lvalue Var 0x5638941e5a70 'x' 'const char *'
|   | |     `-CallExpr 0x5638941e5d20 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5638941e5d08 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5638941e5cc0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5638941e4570 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5638941e5d88 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5638941e5d70 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5638941e5be0 <col:20, col:27> 'String' (CXXTemporary 0x5638941e5be0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5638941e5ba8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5638941e5da0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5638941e5c00 <col:30> 'const char *' lvalue Var 0x5638941e5a70 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5638941e5db8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5638941e5c20 <col:33> 'const char *' lvalue ParmVar 0x5638941e2cd8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5638941e5c60 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5638941e5c40 <col:39> 'String' lvalue Var 0x5638941e58f8 'name' 'String'
|   | |       |-UnaryOperator 0x5638941e5c98 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5638941e5c78 <col:46> 'String' lvalue Var 0x5638941e5998 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5638941e5cb0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5638941e5ec0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5638941e5ea8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5638941e5e88 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5638941e5e58 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|   |         `-ImplicitCastExpr 0x5638941e5e40 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5638941e5e20 <col:11> 'String' lvalue Var 0x5638941e58f8 'name' 'String'
|   `-ReturnStmt 0x5638941e5f30 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5638941e5f18 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5638941e5ef8 <col:9> 'const char *' lvalue Var 0x5638941e5a70 'x' 'const char *'
|-CXXMethodDecl 0x5638941e2ec8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5638941e2e38 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5638941e6548 <col:55, line:550:5>
|   `-IfStmt 0x5638941e6520 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5638941e6180 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5638941e6168 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5638941e6150 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5638941e6130 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5638941e6100 <col:6> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|     | |       `-DeclRefExpr 0x5638941e5fa0 <col:6> 'const String' lvalue ParmVar 0x5638941e2e38 'x' 'const String &'
|     | `-BinaryOperator 0x5638941e60e0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5638941e60b0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5638941e6060 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5638941e6048 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5638941e6000 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x563893ef6da0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5638941e5fc0 <col:11> 'const String' lvalue ParmVar 0x5638941e2e38 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5638941e5fe0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5638941e60c8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5638941e6098 <col:19> 'char' 123
|     |-ReturnStmt 0x5638941e61f0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5638941e61c0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5638941e61a0 <col:13> 'const String' lvalue ParmVar 0x5638941e2e38 'x' 'const String &'
|     `-IfStmt 0x5638941e64f8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5638941e6288 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5638941e6270 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5638941e6250 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5638941e6220 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |       `-DeclRefExpr 0x5638941e6200 <col:11> 'const String' lvalue ParmVar 0x5638941e2e38 'x' 'const String &'
|       |-ReturnStmt 0x5638941e6410 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5638941e63f8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5638941e63c8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5638941e63b0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5638941e6390 <col:13, col:29> 'String' (CXXTemporary 0x5638941e6390)
|       |         `-CallExpr 0x5638941e6340 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5638941e6328 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5638941e62a0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5638941e2670 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5638941e6370 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5638941e62c0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5638941e62e0 <col:28> 'const String' lvalue ParmVar 0x5638941e2e38 'x' 'const String &'
|       `-ReturnStmt 0x5638941e64e8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5638941e64d0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5638941e64a0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5638941e6488 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5638941e6468 <col:13, col:20> 'String' (CXXTemporary 0x5638941e6468)
|                 `-CXXTemporaryObjectExpr 0x5638941e6430 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5638941e3090 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5638941e2f80 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5638941e2ff8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5638941e4818 <col:71> 'bool' false
|-CXXRecordDecl 0x5638941e3140 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5638941e3438 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5638941e33d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5638941e3370 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5638941e3330 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x563893ed9e00 'String'
|       | `-CXXRecord 0x563893ed9d70 'String'
|       |-BuiltinType 0x563893bad370 'int'
|       `-DecayedType 0x56389408fd00 '__va_list_tag *' sugar
|         |-TypedefType 0x56389408fcd0 'va_list' sugar
|         | |-Typedef 0x563893dcaeb0 'va_list'
|         | `-TypedefType 0x563893dcae60 '__gnuc_va_list' sugar
|         |   |-Typedef 0x563893d02a88 '__gnuc_va_list'
|         |   `-TypedefType 0x563893d029f0 '__builtin_va_list' sugar
|         |     |-Typedef 0x563893beebd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x563893beeb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x563893bae0c0 '__va_list_tag'
|         |         `-CXXRecord 0x563893bae028 '__va_list_tag'
|         `-PointerType 0x563893dd0750 '__va_list_tag *'
|           `-RecordType 0x563893bae0c0 '__va_list_tag'
|             `-CXXRecord 0x563893bae028 '__va_list_tag'
|-EnumDecl 0x5638941e3490 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5638941e3590 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3af0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3570 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5638941e3550 <col:16> 'int' 1
| |-EnumConstantDecl 0x5638941e3620 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b08 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3600 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5638941e35e0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5638941e36b0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3690 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5638941e3670 <col:22> 'int' 4
| |-EnumConstantDecl 0x5638941e3740 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b38 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3720 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5638941e3700 <col:17> 'int' 8
| |-EnumConstantDecl 0x5638941e37d0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e37b0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5638941e3790 <col:22> 'int' 16
| |-EnumConstantDecl 0x5638941e3860 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3840 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5638941e3820 <col:19> 'int' 32
| |-EnumConstantDecl 0x5638941e38f0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b80 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e38d0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5638941e38b0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5638941e3980 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3b98 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e3960 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5638941e3940 <col:14> 'int' 128
| |-EnumConstantDecl 0x5638941e3a10 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5638941e3bb0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638941e39f0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5638941e39d0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5638941e3aa0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5638941e3bc8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638941e3a80 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5638941e3a60 <col:12> 'int' 1024
|-CXXMethodDecl 0x5638941e3e28 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5638941e3bf0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5638941e3ce0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5638941e3fb0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5638941e3ee8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5638941e4058 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5638941e4098 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5638941e40f8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5638941e4170 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5638941e4570 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5638941e41e8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5638941e4268 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5638941e42e8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5638941e4360 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5638941e43d8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5638941e4450 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5638941e4698 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5638941e4698
| `-ParmVarDecl 0x5638941e47a8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5638941e68a8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5638941e68a8
  `-ParmVarDecl 0x5638941e69b8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56389408ed48 prev 0x5638940d4048 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56389408ee40 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56389408eed0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56389408f008 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56389408ef08 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563894090430 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563894090410 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56389408ffa8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5638940904c0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563894090480 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56389408ef08 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563894090010 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563894090540 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563894090500 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563894090070 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563894090580 <col:54> 'bool' false
| `-CompoundStmt 0x563894090688 <col:61, line:38:5>
|   `-BinaryOperator 0x563894090668 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x563894090600 <col:9> 'const Element *' lvalue ->_context 0x56389408ff48
|     | `-CXXThisExpr 0x5638940905f0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x563894090650 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x563894090630 <col:20> 'int' 0
|-CXXConstructorDecl 0x56389408f218 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56389408f0c8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56389408f140 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563894090468 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563894090448 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56389408ff48 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5638940906e0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5638940906a0 <col:20> 'const Element *' lvalue ParmVar 0x56389408f0c8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56389408ffa8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563894090760 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563894090720 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56389408f140 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563894090010 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5638940907e0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5638940907a0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x563894090070 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563894090820 <col:73> 'bool' false
| `-CompoundStmt 0x563894090898 <col:80, line:46:5>
|-CXXMethodDecl 0x56389408f348 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x563894090910 <col:36, line:51:5>
|   `-ReturnStmt 0x563894090900 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5638940908e8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5638940908b8 <col:16> 'const Element *const' lvalue ->_context 0x56389408ff48
|         `-CXXThisExpr 0x5638940908a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56389408f438 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x563894090990 <col:32, line:57:5>
|   `-ReturnStmt 0x563894090980 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x563894090968 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x563894090938 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56389408ffa8
|         `-CXXThisExpr 0x563894090928 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56389408f4f8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56389408f680 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56389408f5b0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56389408f7d0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56389408f740 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56389408f920 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56389408f890 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56389408fb28 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56389408f9d8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56389408fa50 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56389408fe58 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56389408fbe8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56389408fc68 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56389408fd30 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56389408ff10 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56389408ff48 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56389408ffa8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x563894090010 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x563894090070 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5638940900c0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5638940900c0
| `-ParmVarDecl 0x5638940901d8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x563894090278 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x563894090278
| `-ParmVarDecl 0x563894090388 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5638941f3468 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56389419c6b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56389419c888 prev 0x56389419c6b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56389419c918 <col:46, col:52> col:46 public
|-TypedefDecl 0x56389419c940 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x56389419e510 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56389419e4c0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56389419cdf0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56389419ccf0 'type'
|     `-TemplateSpecializationType 0x56389419cc80 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56389419cb60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56389419cb40 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56389419cb20 <col:24> 'unsigned long' 4
|       `-RecordType 0x56389419cc60 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56389419cb80 'char_array'
|-TypedefDecl 0x56389419e5c8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56389419e590 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56389419e570 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56389419e510 'type'
|     `-ElaboratedType 0x56389419e4c0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56389419cdf0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56389419ccf0 'type'
|         `-TemplateSpecializationType 0x56389419cc80 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56389419cb60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56389419cb40 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56389419cb20 <col:24> 'unsigned long' 4
|           `-RecordType 0x56389419cc60 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56389419cb80 'char_array'
|-CXXMethodDecl 0x56389419e748 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56389419e658 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56389419e838 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56389419e918 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56389419ebe8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56389419eaf0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56389419ee28 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56389419eca0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56389419ed18 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419eff8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56389419eee8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56389419ef60 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419f158 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56389419f228 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56389419f478 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56389419f2e8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56389419f360 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419f6d8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56389419f548 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56389419f5c0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419f898 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56389419f7a8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419fa58 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56389419f960 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56389419fb10 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56389419fbc0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56389419fdf8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56389419fc70 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56389419fce8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5638941a0098 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56389419ffa0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5638941a0160 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5638941a01b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5638941a6620 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56389419b0b8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56389419b2c8 prev 0x56389419b0b8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56389419c620 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56389419c5d0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56389419c5b0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56389419c460 'type'
|     `-SubstTemplateTypeParmType 0x56389419c280 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563893e72c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893e72be8 'T'
|       `-RecordType 0x56389419bdd0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56389419bce8 'sized_array_memory'
|-FieldDecl 0x5638941a6670 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5638941a66c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5638941a66f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|   |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563893eaa8d8 'T'
|   `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a6788 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5638941a6750 'int &'
|   `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a6848 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5638941a6810 'const int &'
|   `-QualType 0x56389419b361 'const int' const
|     `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a68d8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5638941a68a0 'int *'
|   `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a6968 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5638941a6930 'const int *'
|   `-QualType 0x56389419b361 'const int' const
|     `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a7550 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5638941a7500 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5638941a74e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5638941a7470 'type'
|     `-SubstTemplateTypeParmType 0x5638941a7230 'int' sugar
|       |-TemplateTypeParmType 0x563893e7da40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893e7d9f0 'T'
|       `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a75b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5638941a6810 'const int &'
|   `-QualType 0x56389419b361 'const int' const
|     `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a7610 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a7678 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5638941a68a0 'int *'
|   `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|     |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563893eaa8d8 'T'
|     `-BuiltinType 0x563893bad370 'int'
|-TypedefDecl 0x5638941a76e0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5638941a6930 'const int *'
|   `-QualType 0x56389419b361 'const int' const
|     `-SubstTemplateTypeParmType 0x56389419b360 'int' sugar
|       |-TemplateTypeParmType 0x563893eaa930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563893eaa8d8 'T'
|       `-BuiltinType 0x563893bad370 'int'
|-EnumDecl 0x5638941a7738 <line:134:5> col:5
| `-EnumConstantDecl 0x5638941a7830 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5638941a7810 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563893eabfb8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563893eabf90 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563893eabf70 <col:40> 'int' 1
|-CXXConstructorDecl 0x5638941a78b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5638941a7b08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5638941a7970 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5638941a7a10 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5638941a7dc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5638941a7cb0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5638941a8088 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5638941a7f70 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5638941a83d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5638941a82b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5638941a86e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5638941a85c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5638941a89d0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5638941a8818 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5638941a8890 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5638941a8af8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5638941a8bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a8c30 <col:30> Inherited
|-CXXMethodDecl 0x5638941a8c78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5638941a8d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a8d80 <col:30> Inherited
|-CXXMethodDecl 0x5638941a8e48 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5638941a8ef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a8f50 <col:30> Inherited
|-CXXMethodDecl 0x5638941a8f98 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5638941a9048 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a90a0 <col:30> Inherited
|-CXXMethodDecl 0x5638941a90e8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5638941a9198 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a91f0 <col:30> Inherited
|-CXXMethodDecl 0x5638941a9238 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5638941a92e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5638941a9340 <col:30> Inherited
|-CXXMethodDecl 0x5638941a9368 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5638941a9418 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5638941a94c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5638941a9688 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5638941a9578 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5638941a95f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5638941a97d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5638941a9748 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941a9988 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5638941a9890 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5638941a9a40 <col:20>
| `-OptimizeNoneAttr 0x5638941a9a98 <col:30>
|-CXXMethodDecl 0x5638941a9bb8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5638941a9ac0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5638941a9c70 <col:20>
| `-OptimizeNoneAttr 0x5638941a9cc8 <col:30>
|-CXXMethodDecl 0x5638941a9d80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5638941a9cf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941a9ec8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5638941a9e38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941a9ff8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5638941aa128 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5638941aa1f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5638941aa2c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5638941aa408 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5638941aa378 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941aa550 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5638941aa4c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5638941aa698 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5638941aa608 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5638941aa750 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5638941aa850 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5638941aa7c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5638941aa908 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5638941aa9c8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5638941aaac8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5638941aac48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5638941aab88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5638941ab408 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5638941aad00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5638941ab368 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5638941ab268 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5638941ab4e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5638941ab638 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5638941ab5a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5638941ab6f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5638941ab938 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5638941ab7b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5638941ab828 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5638941abaf8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5638941aba08 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5638941abd48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5638941abbc0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5638941abc38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5638941abe08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5638941ac068 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5638941abf70 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5638941ac138 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563894199228 prev 0x5638940958a8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563894199320 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x563894199410 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5638941bdef0 <col:16, line:828:9>
|-CXXDestructorDecl 0x563894199500 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5638941bdf00 <col:25, line:830:9>
|-CXXMethodDecl 0x563894199600 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5638941996b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x563894199758 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563894199758
| `-ParmVarDecl 0x563894199868 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56389419a028 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56389419a028
  `-ParmVarDecl 0x56389419a138 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638940956b8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563894095818 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5638940958a8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x563894095960 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x563894095a68 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x563894095998 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5638941ad6f8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5638941ad6d8 <col:31> 'int' 0
|-CXXConstructorDecl 0x56389417f008 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56389417ee80 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56389417eef8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5638941ad730 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5638941ad710 <col:59> 'int' 0
|-CXXConstructorDecl 0x56389417f1e0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56389417f0d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56389417f148 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5638941ad768 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5638941ad748 <col:55> 'int' 0
|-CXXConstructorDecl 0x56389417f598 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56389417f380 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56389417f3f8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56389417f470 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5638941ad7a0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5638941ad780 <col:31> 'int' 0
|-CXXConstructorDecl 0x56389417f758 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56389417f698 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56389417f850 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56389417fa38 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56389417f940 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56389417fb28 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5638941adb50 <col:24, line:291:5>
|   `-ReturnStmt 0x5638941adb40 <line:290:9, col:79>
|     `-BinaryOperator 0x5638941adb20 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5638941ad9f8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5638941ad950 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5638941ad930 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5638941ad828 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5638941ad810 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5638941ad7f8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5638941ad7c8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56389419b050
|       | |   |       `-CXXThisExpr 0x5638941ad7b8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5638941ad918 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5638941ad900 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5638941ad8c8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5638941ad898 <col:28, col:35> '<bound member function type>' ->size 0x563894160648
|       | |           `-ImplicitCastExpr 0x5638941ad8e8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5638941ad880 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5638941ad850 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56389419b050
|       | |                 `-CXXThisExpr 0x5638941ad840 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5638941ad9e0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5638941ad9c8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5638941ad9b0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5638941ad980 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5638941ac280
|       |         `-CXXThisExpr 0x5638941ad970 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5638941adb00 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5638941adae8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5638941adad0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5638941ada90 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5638941ada78 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5638941ada28 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5638941ac330
|         |     |   `-CXXThisExpr 0x5638941ada18 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5638941ada58 <col:73> 'int' 0
|         `-IntegerLiteral 0x5638941adab0 <col:79> 'int' 0
|-CXXMethodDecl 0x56389417fbe8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5638941add28 <col:32, line:296:5>
|   `-ReturnStmt 0x5638941add18 <line:295:9, col:49>
|     `-BinaryOperator 0x5638941adcf8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5638941adbd8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5638941adbc0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5638941adba8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5638941adb78 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5638941ac280
|       |       `-CXXThisExpr 0x5638941adb68 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5638941adcd8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5638941adcc0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5638941adca8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5638941adc68 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5638941adc50 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5638941adc00 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5638941ac330
|         |     |   `-CXXThisExpr 0x5638941adbf0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5638941adc30 <col:43> 'int' 0
|         `-IntegerLiteral 0x5638941adc88 <col:49> 'int' 0
|-CXXMethodDecl 0x56389417fcd8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5638941adf38 <col:19, line:306:5>
|   |-IfStmt 0x5638941ade58 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5638941add98 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5638941add80 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5638941add50 <col:13> 'Vector<String> *' lvalue ->_conf 0x56389419b050
|   | |     `-CXXThisExpr 0x5638941add40 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5638941ade38 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5638941ade08 <col:13, col:20> '<bound member function type>' ->clear 0x563894163048
|   |     `-ImplicitCastExpr 0x5638941addf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5638941addc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56389419b050
|   |         `-CXXThisExpr 0x5638941addb0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5638941adee0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5638941adeb0 <col:9, col:16> '<bound member function type>' .clear 0x5638941abe08
|   |   `-MemberExpr 0x5638941ade80 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5638941ac220
|   |     `-CXXThisExpr 0x5638941ade70 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5638941adf28 <line:305:9, col:17>
|     `-UnaryOperator 0x5638941adf10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941adf00 <col:17> 'Args *' this
|-CXXMethodDecl 0x56389417ff58 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56389417fe60 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5638941800d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x563894180010 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563894180458 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563894180180 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5638941803b8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x563894180228 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5638941802a0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5638941ae258 <col:67, line:327:5>
|     |-WhileStmt 0x5638941ae208 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5638941ae020 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5638941adfa0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5638940cc518 0x563893f15af8 0x563893f157d0 0x563893f06fb0 0x563893f06c60 0x563893f06550 0x563893ed8ec0 0x563893e65380
|     | | |-DeclRefExpr 0x5638941adf60 <col:16> 'Iter' lvalue ParmVar 0x563894180228 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5638941adf80 <col:25> 'Iter' lvalue ParmVar 0x5638941802a0 'end' 'Iter'
|     | `-CompoundStmt 0x5638941ae1e8 <col:30, line:325:9>
|     |   |-CallExpr 0x5638941ae188 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5638941ae068 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5638941ae158 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5638941ae0e8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|     |   |   `-DeclRefExpr 0x5638941ae0c8 <col:24> 'Iter' lvalue ParmVar 0x563894180228 'begin' 'Iter'
|     |   `-UnaryOperator 0x5638941ae1d0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5638941ae1b0 <col:15> 'Iter' lvalue ParmVar 0x563894180228 'begin' 'Iter'
|     `-ReturnStmt 0x5638941ae248 <line:326:9, col:17>
|       `-UnaryOperator 0x5638941ae230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941ae220 <col:17> 'Args *' this
|-CXXMethodDecl 0x563894180560 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5638941804d0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5638941806a8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x563894180618 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563894180770 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5638941ae338 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5638941ae2d8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5638941ae288 <col:9> '<bound member function type>' ->reset_from 0x5638941ac6a8
|   | | `-CXXThisExpr 0x5638941ae278 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5638941ae2b8 <col:20> 'int' 0
|   `-ReturnStmt 0x5638941ae328 <line:352:9, col:17>
|     `-UnaryOperator 0x5638941ae310 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941ae300 <col:17> 'Args *' this
|-VarDecl 0x563894180828 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563894180890 <col:38> 'int' 1
|-VarDecl 0x563894180920 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563894180988 <col:39> 'int' 2
|-VarDecl 0x563894180a18 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563894180a80 <col:39> 'int' 4
|-VarDecl 0x563894180b10 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563894180b78 <col:39> 'int' 8
|-FunctionTemplateDecl 0x563894180ef8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x563894180bf0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563894180e58 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563894180ca0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894180d48 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5638941ae490 <col:43, line:371:5>
|     `-ReturnStmt 0x5638941ae480 <line:370:9, col:34>
|       `-CallExpr 0x5638941ae448 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941ae368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941ae3e8 <col:21> 'const char *' lvalue ParmVar 0x563894180ca0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941ae408 <col:30> 'int' 0
|         `-DeclRefExpr 0x5638941ae428 <col:33> 'T' lvalue ParmVar 0x563894180d48 'x' 'T &'
|-FunctionTemplateDecl 0x563894181228 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563894180f60 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563894181188 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563894181010 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941810b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5638941ae5e0 <col:45, line:375:5>
|     `-ReturnStmt 0x5638941ae5d0 <line:374:9, col:42>
|       `-CallExpr 0x5638941ae598 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941ae4b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941ae538 <col:21> 'const char *' lvalue ParmVar 0x563894181010 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941ae558 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int'
|         `-DeclRefExpr 0x5638941ae578 <col:41> 'T' lvalue ParmVar 0x5638941810b8 'x' 'T &'
|-FunctionTemplateDecl 0x563894181558 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563894181290 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5638941814b8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563894181340 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5638941813e8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5638941b0068 <col:45, line:379:5>
| |   `-ReturnStmt 0x5638941b0058 <line:378:9, col:43>
| |     `-CallExpr 0x5638941b0020 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5638941aff40 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5638941affc0 <col:21> 'const char *' lvalue ParmVar 0x563894181340 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5638941affe0 <col:30> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
| |       `-DeclRefExpr 0x5638941b0000 <col:42> 'T' lvalue ParmVar 0x5638941813e8 'x' 'T &'
| `-CXXMethodDecl 0x5638941f38f8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5638941f3710 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5638941f37e8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x563894181888 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5638941815c0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5638941817e8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563894181670 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894181718 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0268 <col:46, line:383:5>
|     `-ReturnStmt 0x5638941b0258 <line:382:9, col:55>
|       `-CallExpr 0x5638941b0220 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0090 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0110 <col:21> 'const char *' lvalue ParmVar 0x563894181670 'keyword' 'const char *'
|         |-BinaryOperator 0x5638941b01e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5638941b0190 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5638941b0170 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5638941b01c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5638941b01a8 <col:42> 'const int' lvalue Var 0x563894180920 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5638941b0200 <col:54> 'T' lvalue ParmVar 0x563894181718 'x' 'T &'
|-FunctionTemplateDecl 0x563894181c88 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5638941818f0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563894181be8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5638941819a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894181a20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563894181ac8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5638941b03a8 <col:54, line:388:5>
|     |-CallExpr 0x5638941b0330 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b0280 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5638941b02c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5638941b02d0 <col:30> 'const char *' lvalue ParmVar 0x5638941819a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b02f0 <col:39> 'int' lvalue ParmVar 0x563894181a20 'flags' 'int'
|     | `-DeclRefExpr 0x5638941b0310 <col:46> 'T' lvalue ParmVar 0x563894181ac8 'x' 'T &'
|     `-ReturnStmt 0x5638941b0398 <line:387:9, col:17>
|       `-UnaryOperator 0x5638941b0380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b0370 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563894182138 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x563894181cf8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563894181d78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563894182098 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563894181e38 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894181ed8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563894181f78 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b0518 <col:74, line:403:5>
|     `-ReturnStmt 0x5638941b0508 <line:402:9, col:56>
|       `-CallExpr 0x5638941b04c8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b03d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0448 <col:28> 'const char *' lvalue ParmVar 0x563894181e38 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b0468 <col:37> 'int' 0
|         |-DeclRefExpr 0x5638941b0488 <col:40> 'T' lvalue ParmVar 0x563894181ed8 'x' 'T &'
|         `-DeclRefExpr 0x5638941b04a8 <col:43> 'const V' lvalue ParmVar 0x563894181f78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5638941825a8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5638941821a8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563894182228 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563894182508 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5638941822e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894182388 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563894182428 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b0680 <col:76, line:407:5>
|     `-ReturnStmt 0x5638941b0670 <line:406:9, col:65>
|       `-CallExpr 0x5638941b0630 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b05b0 <col:28> 'const char *' lvalue ParmVar 0x5638941822e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b05d0 <col:37> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
|         |-DeclRefExpr 0x5638941b05f0 <col:49> 'T' lvalue ParmVar 0x563894182388 'x' 'T &'
|         `-DeclRefExpr 0x5638941b0610 <col:52> 'const V' lvalue ParmVar 0x563894182428 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563894182af8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x563894182618 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563894182698 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563894182a58 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563894182758 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941827d8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563894182878 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x563894182918 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b07e8 <col:85, line:412:5>
|     |-CallExpr 0x5638941b0768 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b0698 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5638941b06d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5638941b06e8 <col:37> 'const char *' lvalue ParmVar 0x563894182758 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b0708 <col:46> 'int' lvalue ParmVar 0x5638941827d8 'flags' 'int'
|     | |-DeclRefExpr 0x5638941b0728 <col:53> 'T' lvalue ParmVar 0x563894182878 'x' 'T &'
|     | `-DeclRefExpr 0x5638941b0748 <col:56> 'const V' lvalue ParmVar 0x563894182918 'default_value' 'const V &'
|     `-ReturnStmt 0x5638941b07d8 <line:411:9, col:17>
|       `-UnaryOperator 0x5638941b07c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b07b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563894182f88 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563894182b70 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894182be8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894182ee8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894182ca8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894182d20 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563894182dc8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0968 <col:53, line:425:5>
|     `-ReturnStmt 0x5638941b0958 <line:424:9, col:42>
|       `-CallExpr 0x5638941b0918 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0898 <col:21> 'const char *' lvalue ParmVar 0x563894182ca8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b08b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5638941b08d8 <col:33> 'P' lvalue ParmVar 0x563894182d20 'parser' 'P'
|         `-DeclRefExpr 0x5638941b08f8 <col:41> 'T' lvalue ParmVar 0x563894182dc8 'x' 'T &'
|-FunctionTemplateDecl 0x5638941833d8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x563894182ff8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894183078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894183338 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894183138 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941831b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563894183258 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0ae0 <col:55, line:429:5>
|     `-ReturnStmt 0x5638941b0ad0 <line:428:9, col:50>
|       `-CallExpr 0x5638941b0a90 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0990 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0a10 <col:21> 'const char *' lvalue ParmVar 0x563894183138 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b0a30 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int'
|         |-DeclRefExpr 0x5638941b0a50 <col:41> 'P' lvalue ParmVar 0x5638941831b0 'parser' 'P'
|         `-DeclRefExpr 0x5638941b0a70 <col:49> 'T' lvalue ParmVar 0x563894183258 'x' 'T &'
|-FunctionTemplateDecl 0x563894183828 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563894183448 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5638941834c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894183788 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894183588 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894183600 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5638941836a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0c58 <col:55, line:433:5>
|     `-ReturnStmt 0x5638941b0c48 <line:432:9, col:51>
|       `-CallExpr 0x5638941b0c08 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0b88 <col:21> 'const char *' lvalue ParmVar 0x563894183588 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b0ba8 <col:30> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
|         |-DeclRefExpr 0x5638941b0bc8 <col:42> 'P' lvalue ParmVar 0x563894183600 'parser' 'P'
|         `-DeclRefExpr 0x5638941b0be8 <col:50> 'T' lvalue ParmVar 0x5638941836a8 'x' 'T &'
|-FunctionTemplateDecl 0x563894183c78 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x563894183898 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894183918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894183bd8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5638941839d8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894183a50 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563894183af8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0e80 <col:56, line:437:5>
|     `-ReturnStmt 0x5638941b0e70 <line:436:9, col:63>
|       `-CallExpr 0x5638941b0e30 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b0c80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b0d00 <col:21> 'const char *' lvalue ParmVar 0x5638941839d8 'keyword' 'const char *'
|         |-BinaryOperator 0x5638941b0dd0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5638941b0d80 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5638941b0d60 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5638941b0db8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5638941b0d98 <col:42> 'const int' lvalue Var 0x563894180920 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5638941b0df0 <col:54> 'P' lvalue ParmVar 0x563894183a50 'parser' 'P'
|         `-DeclRefExpr 0x5638941b0e10 <col:62> 'T' lvalue ParmVar 0x563894183af8 'x' 'T &'
|-FunctionTemplateDecl 0x5638941841a8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x563894183ce8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894183d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894184108 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563894183e28 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894183ea8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563894183f20 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563894183fc8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5638941b0fe8 <col:64, line:442:5>
|     |-CallExpr 0x5638941b0f68 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b0e98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5638941b0ed8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5638941b0ee8 <col:30> 'const char *' lvalue ParmVar 0x563894183e28 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b0f08 <col:39> 'int' lvalue ParmVar 0x563894183ea8 'flags' 'int'
|     | |-DeclRefExpr 0x5638941b0f28 <col:46> 'P' lvalue ParmVar 0x563894183f20 'parser' 'P'
|     | `-DeclRefExpr 0x5638941b0f48 <col:54> 'T' lvalue ParmVar 0x563894183fc8 'x' 'T &'
|     `-ReturnStmt 0x5638941b0fd8 <line:441:9, col:17>
|       `-UnaryOperator 0x5638941b0fc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b0fb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5638941847a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x563894184220 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894184298 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563894184318 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563894184708 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5638941843e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894184458 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5638941844f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5638941845c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b1180 <col:84, line:458:5>
|     `-ReturnStmt 0x5638941b1170 <line:457:9, col:64>
|       `-CallExpr 0x5638941b1128 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b1018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1088 <col:28> 'const char *' lvalue ParmVar 0x5638941843e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b10a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5638941b10c8 <col:40> 'P' lvalue ParmVar 0x563894184458 'parser' 'P'
|         |-DeclRefExpr 0x5638941b10e8 <col:48> 'T' lvalue ParmVar 0x5638941844f8 'x' 'T &'
|         `-DeclRefExpr 0x5638941b1108 <col:51> 'const V' lvalue ParmVar 0x5638941845c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563894184d28 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563894184820 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894184898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563894184918 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563894184c88 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5638941849e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894184a58 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563894184af8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x563894184b98 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b1310 <col:86, line:462:5>
|     `-ReturnStmt 0x5638941b1300 <line:461:9, col:73>
|       `-CallExpr 0x5638941b12b8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b11a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1218 <col:28> 'const char *' lvalue ParmVar 0x5638941849e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b1238 <col:37> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
|         |-DeclRefExpr 0x5638941b1258 <col:49> 'P' lvalue ParmVar 0x563894184a58 'parser' 'P'
|         |-DeclRefExpr 0x5638941b1278 <col:57> 'T' lvalue ParmVar 0x563894184af8 'x' 'T &'
|         `-DeclRefExpr 0x5638941b1298 <col:60> 'const V' lvalue ParmVar 0x563894184b98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563894185388 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x563894184da0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894184e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563894184e98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5638941852e8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563894184f60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894184fe0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563894185058 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5638941850f8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x563894185198 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5638941b14a0 <col:95, line:467:5>
|     |-CallExpr 0x5638941b1418 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b1328 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5638941b1368 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5638941b1378 <col:37> 'const char *' lvalue ParmVar 0x563894184f60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b1398 <col:46> 'int' lvalue ParmVar 0x563894184fe0 'flags' 'int'
|     | |-DeclRefExpr 0x5638941b13b8 <col:53> 'P' lvalue ParmVar 0x563894185058 'parser' 'P'
|     | |-DeclRefExpr 0x5638941b13d8 <col:61> 'T' lvalue ParmVar 0x5638941850f8 'x' 'T &'
|     | `-DeclRefExpr 0x5638941b13f8 <col:64> 'const V' lvalue ParmVar 0x563894185198 'default_value' 'const V &'
|     `-ReturnStmt 0x5638941b1490 <line:466:9, col:17>
|       `-UnaryOperator 0x5638941b1478 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b1468 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563894185968 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x563894185408 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894185488 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563894185508 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5638941858c8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5638941855d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894185648 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5638941856e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563894185788 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5638941b1648 <col:63, line:481:5>
|     `-ReturnStmt 0x5638941b1638 <line:480:9, col:47>
|       `-CallExpr 0x5638941b15f0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b14d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1550 <col:21> 'const char *' lvalue ParmVar 0x5638941855d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b1570 <col:30> 'int' 0
|         |-DeclRefExpr 0x5638941b1590 <col:33> 'P' lvalue ParmVar 0x563894185648 'parser' 'P'
|         |-DeclRefExpr 0x5638941b15b0 <col:41> 'T1' lvalue ParmVar 0x5638941856e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5638941b15d0 <col:45> 'T2' lvalue ParmVar 0x563894185788 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563894185ee8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5638941859e0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894185a58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563894185ad8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563894185e48 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563894185ba0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894185c18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563894185cb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563894185d58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5638941b17e8 <col:65, line:485:5>
|     `-ReturnStmt 0x5638941b17d8 <line:484:9, col:55>
|       `-CallExpr 0x5638941b1790 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b1670 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b16f0 <col:21> 'const char *' lvalue ParmVar 0x563894185ba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b1710 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int'
|         |-DeclRefExpr 0x5638941b1730 <col:41> 'P' lvalue ParmVar 0x563894185c18 'parser' 'P'
|         |-DeclRefExpr 0x5638941b1750 <col:49> 'T1' lvalue ParmVar 0x563894185cb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5638941b1770 <col:53> 'T2' lvalue ParmVar 0x563894185d58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563894186468 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x563894185f60 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894185fd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563894186058 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5638941863c8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563894186120 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894186198 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563894186238 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5638941862d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5638941b1988 <col:65, line:489:5>
|     `-ReturnStmt 0x5638941b1978 <line:488:9, col:56>
|       `-CallExpr 0x5638941b1930 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b1810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1890 <col:21> 'const char *' lvalue ParmVar 0x563894186120 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b18b0 <col:30> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
|         |-DeclRefExpr 0x5638941b18d0 <col:42> 'P' lvalue ParmVar 0x563894186198 'parser' 'P'
|         |-DeclRefExpr 0x5638941b18f0 <col:50> 'T1' lvalue ParmVar 0x563894186238 'x1' 'T1 &'
|         `-DeclRefExpr 0x5638941b1910 <col:54> 'T2' lvalue ParmVar 0x5638941862d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5638941869e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5638941864e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894186558 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5638941865d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563894186948 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5638941866a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894186718 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5638941867b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563894186858 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5638941b1bd8 <col:66, line:493:5>
|     `-ReturnStmt 0x5638941b1bc8 <line:492:9, col:68>
|       `-CallExpr 0x5638941b1b80 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b19b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1a30 <col:21> 'const char *' lvalue ParmVar 0x5638941866a0 'keyword' 'const char *'
|         |-BinaryOperator 0x5638941b1b00 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5638941b1ab0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5638941b1a90 <col:30> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5638941b1ae8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5638941b1ac8 <col:42> 'const int' lvalue Var 0x563894180920 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5638941b1b20 <col:54> 'P' lvalue ParmVar 0x563894186718 'parser' 'P'
|         |-DeclRefExpr 0x5638941b1b40 <col:62> 'T1' lvalue ParmVar 0x5638941867b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5638941b1b60 <col:66> 'T2' lvalue ParmVar 0x563894186858 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563894188078 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x563894186a60 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894186ad8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563894186b58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563894187fd8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563894186c20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894186ca0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563894186d18 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563894187de8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563894187e88 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5638941b1d68 <col:74, line:498:5>
|     |-CallExpr 0x5638941b1ce0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b1bf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5638941b1c30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5638941b1c40 <col:30> 'const char *' lvalue ParmVar 0x563894186c20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b1c60 <col:39> 'int' lvalue ParmVar 0x563894186ca0 'flags' 'int'
|     | |-DeclRefExpr 0x5638941b1c80 <col:46> 'P' lvalue ParmVar 0x563894186d18 'parser' 'P'
|     | |-DeclRefExpr 0x5638941b1ca0 <col:54> 'T1' lvalue ParmVar 0x563894187de8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5638941b1cc0 <col:58> 'T2' lvalue ParmVar 0x563894187e88 'x2' 'T2 &'
|     `-ReturnStmt 0x5638941b1d58 <line:497:9, col:17>
|       `-UnaryOperator 0x5638941b1d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b1d30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5638941883d8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5638941880f8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894188338 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5638941881b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894188228 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5638941b1eb0 <col:52, line:509:5>
|     `-ReturnStmt 0x5638941b1ea0 <line:508:9, col:44>
|       `-CallExpr 0x5638941b1e68 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b1d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1e08 <col:26> 'const char *' lvalue ParmVar 0x5638941881b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b1e28 <col:35> 'int' 0
|         `-DeclRefExpr 0x5638941b1e48 <col:38> 'P' lvalue ParmVar 0x563894188228 'parser' 'P'
|-FunctionTemplateDecl 0x5638941886d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x563894188440 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894188638 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5638941884f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894188568 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5638941b1ff0 <col:54, line:513:5>
|     `-ReturnStmt 0x5638941b1fe0 <line:512:9, col:52>
|       `-CallExpr 0x5638941b1fa8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b1ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b1f48 <col:26> 'const char *' lvalue ParmVar 0x5638941884f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b1f68 <col:35> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int'
|         `-DeclRefExpr 0x5638941b1f88 <col:46> 'P' lvalue ParmVar 0x563894188568 'parser' 'P'
|-FunctionTemplateDecl 0x5638941889d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x563894188740 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894188938 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5638941887f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894188868 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5638941b2130 <col:54, line:517:5>
|     `-ReturnStmt 0x5638941b2120 <line:516:9, col:53>
|       `-CallExpr 0x5638941b20e8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2088 <col:26> 'const char *' lvalue ParmVar 0x5638941887f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b20a8 <col:35> 'const int' lvalue Var 0x563894180920 'positional' 'const int'
|         `-DeclRefExpr 0x5638941b20c8 <col:47> 'P' lvalue ParmVar 0x563894188868 'parser' 'P'
|-FunctionTemplateDecl 0x563894188cd8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x563894188a40 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894188c38 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563894188af0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894188b68 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5638941b2320 <col:55, line:521:5>
|     `-ReturnStmt 0x5638941b2310 <line:520:9, col:65>
|       `-CallExpr 0x5638941b22d8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b21c8 <col:26> 'const char *' lvalue ParmVar 0x563894188af0 'keyword' 'const char *'
|         |-BinaryOperator 0x5638941b2298 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5638941b2248 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5638941b2228 <col:35> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5638941b2280 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5638941b2260 <col:47> 'const int' lvalue Var 0x563894180920 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5638941b22b8 <col:59> 'P' lvalue ParmVar 0x563894188b68 'parser' 'P'
|-FunctionTemplateDecl 0x5638941890a8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x563894188d40 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894189008 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563894188df0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894188e70 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563894188ee8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5638941b2460 <col:63, line:526:5>
|     |-CallExpr 0x5638941b23e8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b2338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5638941b2378 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5638941b2388 <col:35> 'const char *' lvalue ParmVar 0x563894188df0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5638941b23a8 <col:44> 'int' lvalue ParmVar 0x563894188e70 'flags' 'int'
|     | `-DeclRefExpr 0x5638941b23c8 <col:51> 'P' lvalue ParmVar 0x563894188ee8 'parser' 'P'
|     `-ReturnStmt 0x5638941b2450 <line:525:9, col:17>
|       `-UnaryOperator 0x5638941b2438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b2428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5638941894f8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x563894189118 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894189198 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894189458 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894189258 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941892d0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x563894189378 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5638941b25b8 <col:58, line:541:5>
|     `-ReturnStmt 0x5638941b25a8 <line:540:9, col:39>
|       `-CallExpr 0x5638941b2570 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2510 <col:21> 'const char *' lvalue ParmVar 0x563894189258 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b2530 <col:30> 'P' lvalue ParmVar 0x5638941892d0 'parser' 'P'
|         `-DeclRefExpr 0x5638941b2550 <col:38> 'T' lvalue ParmVar 0x563894189378 'x' 'T &'
|-FunctionTemplateDecl 0x563894189948 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x563894189568 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5638941895e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5638941898a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5638941896a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894189720 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5638941897c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5638941b26f0 <col:60, line:545:5>
|     `-ReturnStmt 0x5638941b26e0 <line:544:9, col:41>
|       `-CallExpr 0x5638941b26a8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b25e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2648 <col:23> 'const char *' lvalue ParmVar 0x5638941896a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b2668 <col:32> 'P' lvalue ParmVar 0x563894189720 'parser' 'P'
|         `-DeclRefExpr 0x5638941b2688 <col:40> 'T' lvalue ParmVar 0x5638941897c8 'x' 'T &'
|-FunctionTemplateDecl 0x563894189d98 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5638941899b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894189a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894189cf8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894189af8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894189b70 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563894189c18 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5638941b2828 <col:60, line:549:5>
|     `-ReturnStmt 0x5638941b2818 <line:548:9, col:41>
|       `-CallExpr 0x5638941b27e0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2780 <col:23> 'const char *' lvalue ParmVar 0x563894189af8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b27a0 <col:32> 'P' lvalue ParmVar 0x563894189b70 'parser' 'P'
|         `-DeclRefExpr 0x5638941b27c0 <col:40> 'T' lvalue ParmVar 0x563894189c18 'x' 'T &'
|-FunctionTemplateDecl 0x56389418a1e8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563894189e08 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894189e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418a148 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563894189f48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894189fc0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56389418a068 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5638941b2960 <col:61, line:553:5>
|     `-ReturnStmt 0x5638941b2950 <line:552:9, col:42>
|       `-CallExpr 0x5638941b2918 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b28b8 <col:24> 'const char *' lvalue ParmVar 0x563894189f48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b28d8 <col:33> 'P' lvalue ParmVar 0x563894189fc0 'parser' 'P'
|         `-DeclRefExpr 0x5638941b28f8 <col:41> 'T' lvalue ParmVar 0x56389418a068 'x' 'T &'
|-FunctionTemplateDecl 0x56389418a6c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56389418a258 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418a2d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418a628 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56389418a398 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418a418 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56389418a490 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56389418a538 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5638941b2ad8 <col:69, line:557:5>
|     `-ReturnStmt 0x5638941b2ac8 <line:556:9, col:46>
|       `-CallExpr 0x5638941b2a88 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2a08 <col:21> 'const char *' lvalue ParmVar 0x56389418a398 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b2a28 <col:30> 'int' lvalue ParmVar 0x56389418a418 'flags' 'int'
|         |-DeclRefExpr 0x5638941b2a48 <col:37> 'P' lvalue ParmVar 0x56389418a490 'parser' 'P'
|         `-DeclRefExpr 0x5638941b2a68 <col:45> 'T' lvalue ParmVar 0x56389418a538 'x' 'T &'
|-FunctionTemplateDecl 0x56389418a9d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56389418a740 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56389418a938 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56389418a7f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418a868 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5638941b2c18 <col:56, line:571:5>
|     `-ReturnStmt 0x5638941b2c08 <line:570:9, col:48>
|       `-CallExpr 0x5638941b2bd0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2b00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2b70 <col:30> 'const char *' lvalue ParmVar 0x56389418a7f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b2b90 <col:39> 'int' 0
|         `-DeclRefExpr 0x5638941b2bb0 <col:42> 'P' lvalue ParmVar 0x56389418a868 'parser' 'P'
|-FunctionTemplateDecl 0x56389418ad68 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56389418aa40 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56389418acc8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56389418aaf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418ab70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56389418abe8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5638941b2de8 <col:67, line:576:5>
|     |-CallExpr 0x5638941b2d70 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b2c30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5638941b2c70 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5638941b2c80 <col:39> 'const char *' lvalue ParmVar 0x56389418aaf0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5638941b2d30 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5638941b2ce0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5638941b2ca0 <col:48> 'int' lvalue ParmVar 0x56389418ab70 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5638941b2d18 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5638941b2cf8 <col:56> 'const int' lvalue Var 0x563894180b10 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5638941b2d50 <col:68> 'P' lvalue ParmVar 0x56389418abe8 'parser' 'P'
|     `-ReturnStmt 0x5638941b2dd8 <line:575:9, col:17>
|       `-UnaryOperator 0x5638941b2dc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b2db0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56389418b1b8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56389418add8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418ae58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418b118 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56389418af18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418af90 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56389418b038 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5638941b2f58 <col:62, line:592:5>
|     `-ReturnStmt 0x5638941b2f48 <line:591:9, col:51>
|       `-CallExpr 0x5638941b2f08 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b2e18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b2e88 <col:30> 'const char *' lvalue ParmVar 0x56389418af18 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b2ea8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5638941b2ec8 <col:42> 'P' lvalue ParmVar 0x56389418af90 'parser' 'P'
|         `-DeclRefExpr 0x5638941b2ee8 <col:50> 'T' lvalue ParmVar 0x56389418b038 'x' 'T &'
|-FunctionTemplateDecl 0x56389418b698 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56389418b228 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418b2a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418b5f8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56389418b368 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418b3e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56389418b460 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56389418b508 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5638941b3150 <col:73, line:597:5>
|     |-CallExpr 0x5638941b30d0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b2f70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5638941b2fb0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5638941b2fc0 <col:39> 'const char *' lvalue ParmVar 0x56389418b368 'keyword' 'const char *'
|     | |-BinaryOperator 0x5638941b3070 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5638941b3020 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5638941b2fe0 <col:48> 'int' lvalue ParmVar 0x56389418b3e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5638941b3058 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5638941b3038 <col:56> 'const int' lvalue Var 0x563894180b10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5638941b3090 <col:68> 'P' lvalue ParmVar 0x56389418b460 'parser' 'P'
|     | `-DeclRefExpr 0x5638941b30b0 <col:76> 'T' lvalue ParmVar 0x56389418b508 'x' 'T &'
|     `-ReturnStmt 0x5638941b3140 <line:596:9, col:17>
|       `-UnaryOperator 0x5638941b3128 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b3118 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56389418bc48 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56389418b710 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418b788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418bba8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56389418b848 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418b8c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56389418ba80 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5638941b32c0 <col:65, line:614:5>
|     `-ReturnStmt 0x5638941b32b0 <line:613:9, col:46>
|       `-CallExpr 0x5638941b3270 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b3180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b31f0 <col:25> 'const char *' lvalue ParmVar 0x56389418b848 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b3210 <col:34> 'int' 0
|         |-DeclRefExpr 0x5638941b3230 <col:37> 'P' lvalue ParmVar 0x56389418b8c0 'parser' 'P'
|         `-DeclRefExpr 0x5638941b3250 <col:45> 'Vector<T>' lvalue ParmVar 0x56389418ba80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56389418c078 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56389418bcb8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56389418bfd8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56389418bd70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418bec0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5638941b34e0 <col:55, line:618:5>
|     `-ReturnStmt 0x5638941b34d0 <line:617:9, col:55>
|       `-CallExpr 0x5638941b3490 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b32e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b3358 <col:25> 'const char *' lvalue ParmVar 0x56389418bd70 'keyword' 'const char *'
|         |-IntegerLiteral 0x5638941b3378 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5638941b3450 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5638941b3470 <col:54> 'Vector<T>' lvalue ParmVar 0x56389418bec0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56389418c648 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56389418c0e0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418c158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418c5a8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56389418c218 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418c298 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56389418c310 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56389418c460 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5638941b36d8 <col:76, line:623:5>
|     |-CallExpr 0x5638941b3658 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5638941b34f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5638941b3538 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5638941b3548 <col:34> 'const char *' lvalue ParmVar 0x56389418c218 'keyword' 'const char *'
|     | |-BinaryOperator 0x5638941b35f8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5638941b35a8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5638941b3568 <col:43> 'int' lvalue ParmVar 0x56389418c298 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5638941b35e0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5638941b35c0 <col:51> 'const int' lvalue Var 0x563894180b10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5638941b3618 <col:63> 'P' lvalue ParmVar 0x56389418c310 'parser' 'P'
|     | `-DeclRefExpr 0x5638941b3638 <col:71> 'Vector<T>' lvalue ParmVar 0x56389418c460 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5638941b36c8 <line:622:9, col:17>
|       `-UnaryOperator 0x5638941b36b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b36a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56389418cb88 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56389418c6c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418c738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418cae8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56389418c7f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418c878 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56389418c9c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5638941b3940 <col:66, line:627:5>
|     `-ReturnStmt 0x5638941b3930 <line:626:9, col:59>
|       `-CallExpr 0x5638941b38f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5638941b3708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5638941b3778 <col:25> 'const char *' lvalue ParmVar 0x56389418c7f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5638941b3798 <col:34> 'int' lvalue ParmVar 0x56389418c878 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5638941b38b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5638941b38d0 <col:58> 'Vector<T>' lvalue ParmVar 0x56389418c9c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56389418cc18 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5638941b39c0 <col:25, line:633:5>
|   `-ReturnStmt 0x5638941b39b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5638941b3998 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5638941b3968 <col:16> 'const bool' lvalue ->_status 0x56389419aeb8
|         `-CXXThisExpr 0x5638941b3958 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56389418cd98 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56389418ccd0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5638941b3aa8 <col:27, line:639:5>
|   |-BinaryOperator 0x5638941b3a50 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5638941b39d8 <col:9> 'bool' lvalue ParmVar 0x56389418ccd0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5638941b3a38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5638941b3a08 <col:13> 'bool' lvalue ->_status 0x56389419aeb8
|   |     `-CXXThisExpr 0x5638941b39f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5638941b3a98 <line:638:9, col:17>
|     `-UnaryOperator 0x5638941b3a80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941b3a70 <col:17> 'Args *' this
|-CXXMethodDecl 0x56389418cf18 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56389418ce58 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5638941b3b98 <col:39, line:644:5>
|   |-BinaryOperator 0x5638941b3b40 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5638941b3ac8 <col:9> 'bool' lvalue ParmVar 0x56389418ce58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5638941b3b28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5638941b3af8 <col:13> 'const bool' lvalue ->_status 0x56389419aeb8
|   |     `-CXXThisExpr 0x5638941b3ae8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5638941b3b88 <line:643:9, col:17>
|     `-UnaryOperator 0x5638941b3b70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941b3b60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56389418cfe0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5638941b3c40 <col:30, line:651:5>
|   `-ReturnStmt 0x5638941b3c30 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5638941b3c18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5638941b3be8 <col:16> 'bool' lvalue ->_read_status 0x563894090070
|         `-ImplicitCastExpr 0x5638941b3bc8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5638941b3bb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56389418d128 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56389418d098 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5638941b3d48 <col:32, line:658:5>
|   |-BinaryOperator 0x5638941b3cf0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5638941b3c58 <col:9> 'bool' lvalue ParmVar 0x56389418d098 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5638941b3cd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5638941b3ca8 <col:13> 'bool' lvalue ->_read_status 0x563894090070
|   |     `-ImplicitCastExpr 0x5638941b3c88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5638941b3c78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5638941b3d38 <line:657:9, col:17>
|     `-UnaryOperator 0x5638941b3d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941b3d10 <col:17> 'Args *' this
|-CXXMethodDecl 0x56389418d278 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56389418d1e8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5638941b3e58 <col:44, line:663:5>
|   |-BinaryOperator 0x5638941b3e00 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5638941b3d68 <col:9> 'bool' lvalue ParmVar 0x56389418d1e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5638941b3de8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5638941b3db8 <col:13> 'bool' lvalue ->_read_status 0x563894090070
|   |     `-ImplicitCastExpr 0x5638941b3d98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5638941b3d88 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5638941b3e48 <line:662:9, col:17>
|     `-UnaryOperator 0x5638941b3e30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638941b3e20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56389418d340 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56389418d408 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56389418d4d0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56389418d598 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56389418d8a8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56389418d638 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56389418d808 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56389418d718 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5638941b4210 <col:19, line:706:5>
|     `-IfStmt 0x5638941b41e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5638941b3f58 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5638941b4118 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5638941b40e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5638941b40a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5638941b3fb0 <col:42> '<bound member function type>' ->simple_slot 0x5638941ad360
|       |     | `-CXXThisExpr 0x5638941b3fa0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5638941b4048 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5638941b4000 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563893f1a598
|       |     | `-DeclRefExpr 0x5638941b3fe0 <col:55> 'T' lvalue ParmVar 0x56389418d718 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5638941b4088 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5638941b41d8 <line:705:13, col:34>
|         `-CallExpr 0x5638941b41b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5638941b4138 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5638941b4190 <col:33> 'T' lvalue ParmVar 0x56389418d718 'x' 'T &'
|-FunctionTemplateDecl 0x56389418db78 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56389418d908 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56389418dad8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56389418d9e8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5638941b45f0 <col:31, line:717:5>
|     |-DeclStmt 0x5638941b4350 <line:713:9, col:23>
|     | `-VarDecl 0x5638941b4238 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5638941b4328 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5638941b42b0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5638941b4308 <col:21> 'T' lvalue ParmVar 0x56389418d9e8 'x' 'T &'
|     |-IfStmt 0x5638941b45a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5638941b4448 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5638941b4580 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5638941b4520 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5638941b44b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|     |   | `-DeclRefExpr 0x5638941b4490 <col:14> 'T *' lvalue Var 0x5638941b4238 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5638941b4560 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5638941b45d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5638941b45b8 <col:16> 'T *' lvalue Var 0x5638941b4238 's' 'T *'
|-FunctionTemplateDecl 0x56389418df88 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56389418dbd8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56389418dc58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56389418dee8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56389418dd38 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56389418ddd8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5638941b4900 <col:37, line:726:5>
|     |-IfStmt 0x5638941b4890 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5638941b48b0 <line:723:13, col:26>
|     | | `-VarDecl 0x5638941b4658 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5638941b4748 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5638941b46d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5638941b4728 <col:25> 'T' lvalue ParmVar 0x56389418dd38 'x' 'T &'
|     | |-DeclRefExpr 0x5638941b4770 <col:16> 'T *' lvalue Var 0x5638941b4658 's' 'T *'
|     | `-BinaryOperator 0x5638941b4870 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5638941b4820 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5638941b47b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|     |   | `-DeclRefExpr 0x5638941b4790 <col:14> 'T *' lvalue Var 0x5638941b4658 's' 'T *'
|     |   `-DeclRefExpr 0x5638941b4850 <col:18> 'const V' lvalue ParmVar 0x56389418ddd8 'value' 'const V &'
|     `-ReturnStmt 0x5638941b48f0 <line:725:9, col:17>
|       `-UnaryOperator 0x5638941b48d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5638941b48c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56389418e388 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56389418dff0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56389418e2e8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56389418e0a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418e120 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56389418e1c8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5638941b5720 <col:65, line:737:5>
|     |-DeclStmt 0x5638941b4998 <line:732:9, col:26>
|     | `-VarDecl 0x5638941b4930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5638941b56e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5638941b5708 <line:733:13, col:58>
|       | `-VarDecl 0x5638941b49c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5638941b4ba0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5638941b4b70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5638941b4b58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5638941b4b38 <col:26, col:58> 'String' (CXXTemporary 0x5638941b4b38)
|       |           `-CXXMemberCallExpr 0x5638941b4ac8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5638941b4a38 <col:26> '<bound member function type>' ->find 0x5638941ac978
|       |             | `-CXXThisExpr 0x5638941b4a28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5638941b4b00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941b4a68 <col:31> 'const char *' lvalue ParmVar 0x56389418e0a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5638941b4b18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941b4a88 <col:40> 'int' lvalue ParmVar 0x56389418e120 'flags' 'int'
|       |             `-DeclRefExpr 0x5638941b4aa8 <col:47> 'Args::Slot *' lvalue Var 0x5638941b4930 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5638941b4c58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5638941b4c40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5638941b4c20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5638941b4bf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |       `-ImplicitCastExpr 0x5638941b4bd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5638941b4bb8 <col:20> 'String' lvalue Var 0x5638941b49c0 'str' 'String'
|       `-CompoundStmt 0x5638941b56c8 <col:61, line:736:9>
|         |-DeclStmt 0x5638941b5110 <line:734:13, col:76>
|         | `-VarDecl 0x5638941b4ca8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5638941b50e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5638941b5050 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5638941b5098 <col:60> 'T' lvalue ParmVar 0x56389418e1c8 'variable' 'T &'
|         |     `-UnaryOperator 0x5638941b50c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5638941b50b8 <col:71> 'Args *' this
|         `-CallExpr 0x5638941b5698 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5638941b5138 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|           | `-CXXThisExpr 0x5638941b5128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5638941b5658 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5638941b5168 <col:23> 'T *' lvalue Var 0x5638941b4ca8 's' 'T *'
|           | `-CallExpr 0x5638941b5618 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5638941b53f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5638941b54f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5638941b5510 <col:86> 'String' lvalue Var 0x5638941b49c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5638941b55c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5638941b5550 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|           |   | `-DeclRefExpr 0x5638941b5530 <col:92> 'T *' lvalue Var 0x5638941b4ca8 's' 'T *'
|           |   `-UnaryOperator 0x5638941b5600 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5638941b55f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5638941b5678 <col:103> 'Args::Slot *' lvalue Var 0x5638941b4930 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56389418e8d8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56389418e3f8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56389418e478 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56389418e838 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56389418e538 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418e5b8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56389418e658 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56389418e6f8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5638941b65c0 <col:88, line:745:5>
|     |-DeclStmt 0x5638941b57b8 <line:741:9, col:26>
|     | `-VarDecl 0x5638941b5750 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5638941b59d8 <line:742:9, col:55>
|     | `-VarDecl 0x5638941b57e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5638941b59c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5638941b5990 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5638941b5978 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5638941b5958 <col:22, col:54> 'String' (CXXTemporary 0x5638941b5958)
|     |           `-CXXMemberCallExpr 0x5638941b58e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5638941b5858 <col:22> '<bound member function type>' ->find 0x5638941ac978
|     |             | `-CXXThisExpr 0x5638941b5848 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5638941b5920 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5638941b5888 <col:27> 'const char *' lvalue ParmVar 0x56389418e538 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5638941b5938 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5638941b58a8 <col:36> 'int' lvalue ParmVar 0x56389418e5b8 'flags' 'int'
|     |             `-DeclRefExpr 0x5638941b58c8 <col:43> 'Args::Slot *' lvalue Var 0x5638941b5750 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5638941b5db0 <line:743:9, col:72>
|     | `-VarDecl 0x5638941b5a28 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5638941b5d80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5638941b5cf0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5638941b5d38 <col:56> 'T' lvalue ParmVar 0x56389418e658 'variable' 'T &'
|     |     `-UnaryOperator 0x5638941b5d68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5638941b5d58 <col:67> 'Args *' this
|     `-CallExpr 0x5638941b6590 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5638941b5dd8 <col:9> '<bound member function type>' ->postparse 0x5638941acb88
|       | `-CXXThisExpr 0x5638941b5dc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5638941b6550 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5638941b5e08 <col:19> 'T *' lvalue Var 0x5638941b5a28 's' 'T *'
|       | `-ParenExpr 0x5638941b6530 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5638941b6500 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5638941b64e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5638941b64d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5638941b64b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5638941b6480 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |     |       `-ImplicitCastExpr 0x5638941b6468 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5638941b5e28 <col:25> 'String' lvalue Var 0x5638941b57e0 'str' 'String'
|       |     |-CallExpr 0x5638941b62d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5638941b60b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5638941b61b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5638941b61d0 <col:89> 'String' lvalue Var 0x5638941b57e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5638941b6280 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5638941b6210 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|       |     | | `-DeclRefExpr 0x5638941b61f0 <col:95> 'T *' lvalue Var 0x5638941b5a28 's' 'T *'
|       |     | `-UnaryOperator 0x5638941b62c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5638941b62b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5638941b6448 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5638941b6428 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5638941b63f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5638941b63a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5638941b6338 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|       |         | | `-DeclRefExpr 0x5638941b6318 <col:109> 'T *' lvalue Var 0x5638941b5a28 's' 'T *'
|       |         | `-DeclRefExpr 0x5638941b63d8 <col:113> 'const V' lvalue ParmVar 0x56389418e6f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5638941b6418 <col:120> 'bool' true
|       `-DeclRefExpr 0x5638941b6570 <col:128> 'Args::Slot *' lvalue Var 0x5638941b5750 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56389418ee08 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56389418e950 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418e9c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56389418ed68 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56389418ea88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418eb08 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56389418eb80 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56389418ec28 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5638941b71b8 <col:75, line:754:5>
|     |-DeclStmt 0x5638941b6668 <line:749:9, col:26>
|     | `-VarDecl 0x5638941b6600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5638941b7180 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5638941b71a0 <line:750:13, col:58>
|       | `-VarDecl 0x5638941b6690 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5638941b6870 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5638941b6840 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5638941b6828 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5638941b6808 <col:26, col:58> 'String' (CXXTemporary 0x5638941b6808)
|       |           `-CXXMemberCallExpr 0x5638941b6798 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5638941b6708 <col:26> '<bound member function type>' ->find 0x5638941ac978
|       |             | `-CXXThisExpr 0x5638941b66f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5638941b67d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941b6738 <col:31> 'const char *' lvalue ParmVar 0x56389418ea88 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5638941b67e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941b6758 <col:40> 'int' lvalue ParmVar 0x56389418eb08 'flags' 'int'
|       |             `-DeclRefExpr 0x5638941b6778 <col:47> 'Args::Slot *' lvalue Var 0x5638941b6600 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5638941b6928 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5638941b6910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5638941b68f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5638941b68c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |       `-ImplicitCastExpr 0x5638941b68a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5638941b6888 <col:20> 'String' lvalue Var 0x5638941b6690 'str' 'String'
|       `-CompoundStmt 0x5638941b7160 <col:61, line:753:9>
|         |-DeclStmt 0x5638941b6d00 <line:751:13, col:63>
|         | `-VarDecl 0x5638941b6978 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5638941b6cd0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5638941b6c40 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5638941b6c88 <col:47> 'T' lvalue ParmVar 0x56389418ec28 'variable' 'T &'
|         |     `-UnaryOperator 0x5638941b6cb8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5638941b6ca8 <col:58> 'Args *' this
|         `-CallExpr 0x5638941b7130 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5638941b6d28 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|           | `-CXXThisExpr 0x5638941b6d18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5638941b70f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5638941b6d58 <col:23> 'T *' lvalue Var 0x5638941b6978 's' 'T *'
|           | `-CallExpr 0x5638941b70b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5638941b6f40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5638941b6f88 <col:56> 'P' lvalue ParmVar 0x56389418eb80 'parser' 'P'
|           |   |-DeclRefExpr 0x5638941b6fa8 <col:64> 'String' lvalue Var 0x5638941b6690 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5638941b7058 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5638941b6fe8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|           |   | `-DeclRefExpr 0x5638941b6fc8 <col:70> 'T *' lvalue Var 0x5638941b6978 's' 'T *'
|           |   `-UnaryOperator 0x5638941b7098 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5638941b7088 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5638941b7110 <col:81> 'Args::Slot *' lvalue Var 0x5638941b6600 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56389418f468 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56389418ee80 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56389418eef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56389418ef78 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56389418f3c8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56389418f040 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418f0c0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56389418f138 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56389418f1d8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56389418f278 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5638941ba2c0 <col:98, line:762:5>
|     |-DeclStmt 0x5638941b7250 <line:758:9, col:26>
|     | `-VarDecl 0x5638941b71e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5638941b7470 <line:759:9, col:55>
|     | `-VarDecl 0x5638941b7278 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5638941b7458 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5638941b7428 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5638941b7410 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5638941b73f0 <col:22, col:54> 'String' (CXXTemporary 0x5638941b73f0)
|     |           `-CXXMemberCallExpr 0x5638941b7380 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5638941b72f0 <col:22> '<bound member function type>' ->find 0x5638941ac978
|     |             | `-CXXThisExpr 0x5638941b72e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5638941b73b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5638941b7320 <col:27> 'const char *' lvalue ParmVar 0x56389418f040 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5638941b73d0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5638941b7340 <col:36> 'int' lvalue ParmVar 0x56389418f0c0 'flags' 'int'
|     |             `-DeclRefExpr 0x5638941b7360 <col:43> 'Args::Slot *' lvalue Var 0x5638941b71e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5638941b7890 <line:760:9, col:59>
|     | `-VarDecl 0x5638941b74c8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5638941b7860 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5638941b77d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5638941b7818 <col:43> 'T' lvalue ParmVar 0x56389418f1d8 'variable' 'T &'
|     |     `-UnaryOperator 0x5638941b7848 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5638941b7838 <col:54> 'Args *' this
|     `-CallExpr 0x5638941ba290 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5638941b78b8 <col:9> '<bound member function type>' ->postparse 0x5638941acb88
|       | `-CXXThisExpr 0x5638941b78a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5638941b7ed8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5638941b78e8 <col:19> 'T *' lvalue Var 0x5638941b74c8 's' 'T *'
|       | `-ParenExpr 0x5638941b7eb8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5638941b7e88 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5638941b7e70 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5638941b7e58 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5638941b7e38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5638941b7e08 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |     |       `-ImplicitCastExpr 0x5638941b7df0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5638941b7908 <col:25> 'String' lvalue Var 0x5638941b7278 'str' 'String'
|       |     |-CallExpr 0x5638941b7c60 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5638941b7af0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5638941b7b38 <col:59> 'P' lvalue ParmVar 0x56389418f138 'parser' 'P'
|       |     | |-DeclRefExpr 0x5638941b7b58 <col:67> 'String' lvalue Var 0x5638941b7278 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5638941b7c08 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5638941b7b98 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|       |     | | `-DeclRefExpr 0x5638941b7b78 <col:73> 'T *' lvalue Var 0x5638941b74c8 's' 'T *'
|       |     | `-UnaryOperator 0x5638941b7c48 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5638941b7c38 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5638941b7dd0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5638941b7db0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5638941b7d80 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5638941b7d30 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5638941b7cc0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|       |         | | `-DeclRefExpr 0x5638941b7ca0 <col:87> 'T *' lvalue Var 0x5638941b74c8 's' 'T *'
|       |         | `-DeclRefExpr 0x5638941b7d60 <col:91> 'const V' lvalue ParmVar 0x56389418f278 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5638941b7da0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5638941b7ef8 <col:106> 'Args::Slot *' lvalue Var 0x5638941b71e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56389418fad8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56389418f4e8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56389418f568 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56389418f5e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56389418fa38 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56389418f6b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418f730 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56389418f7a8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56389418f848 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56389418f8e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5638941bb298 <col:60, line:773:5>
|     |-DeclStmt 0x5638941ba368 <line:767:9, col:26>
|     | `-VarDecl 0x5638941ba300 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5638941bb260 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5638941bb280 <line:768:13, col:58>
|       | `-VarDecl 0x5638941ba390 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5638941ba570 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5638941ba540 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5638941ba528 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5638941ba508 <col:26, col:58> 'String' (CXXTemporary 0x5638941ba508)
|       |           `-CXXMemberCallExpr 0x5638941ba498 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5638941ba408 <col:26> '<bound member function type>' ->find 0x5638941ac978
|       |             | `-CXXThisExpr 0x5638941ba3f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5638941ba4d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941ba438 <col:31> 'const char *' lvalue ParmVar 0x56389418f6b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5638941ba4e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941ba458 <col:40> 'int' lvalue ParmVar 0x56389418f730 'flags' 'int'
|       |             `-DeclRefExpr 0x5638941ba478 <col:47> 'Args::Slot *' lvalue Var 0x5638941ba300 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5638941ba628 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5638941ba610 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5638941ba5f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5638941ba5c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |       `-ImplicitCastExpr 0x5638941ba5a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5638941ba588 <col:20> 'String' lvalue Var 0x5638941ba390 'str' 'String'
|       `-CompoundStmt 0x5638941bb238 <col:61, line:772:9>
|         |-DeclStmt 0x5638941ba960 <line:769:13, col:66>
|         | `-VarDecl 0x5638941ba678 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5638941ba930 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5638941ba8a0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5638941ba8e8 <col:49> 'T1' lvalue ParmVar 0x56389418f848 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5638941ba918 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5638941ba908 <col:61> 'Args *' this
|         |-DeclStmt 0x5638941bacd0 <line:770:13, col:66>
|         | `-VarDecl 0x5638941ba9e8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5638941baca0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5638941bac10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5638941bac58 <col:49> 'T2' lvalue ParmVar 0x56389418f8e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5638941bac88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5638941bac78 <col:61> 'Args *' this
|         `-CallExpr 0x5638941bb208 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5638941bacf8 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|           | `-CXXThisExpr 0x5638941bace8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5638941bb1c8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5638941bad68 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5638941bad28 <col:23> 'T1 *' lvalue Var 0x5638941ba678 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5638941bad48 <col:29> 'T2 *' lvalue Var 0x5638941ba9e8 's2' 'T2 *'
|           | `-CallExpr 0x5638941bb180 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5638941baf50 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5638941baf98 <col:63> 'P' lvalue ParmVar 0x56389418f7a8 'parser' 'P'
|           |   |-DeclRefExpr 0x5638941bafb8 <col:71> 'String' lvalue Var 0x5638941ba390 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5638941bb068 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5638941baff8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|           |   | `-DeclRefExpr 0x5638941bafd8 <col:77> 'T1 *' lvalue Var 0x5638941ba678 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5638941bb128 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5638941bb0b8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|           |   | `-DeclRefExpr 0x5638941bb098 <col:82> 'T2 *' lvalue Var 0x5638941ba9e8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5638941bb168 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5638941bb158 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5638941bb1e8 <col:94> 'Args::Slot *' lvalue Var 0x5638941ba300 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563894198328 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56389418fb58 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894198288 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56389418fc10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56389418fc90 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56389418fd08 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5638941bb7b0 <col:67, line:780:5>
|     |-DeclStmt 0x5638941bb330 <line:777:9, col:26>
|     | `-VarDecl 0x5638941bb2c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5638941bb778 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5638941bb798 <line:778:13, col:58>
|       | `-VarDecl 0x5638941bb358 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5638941bb538 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5638941bb508 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5638941bb4f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5638941bb4d0 <col:26, col:58> 'String' (CXXTemporary 0x5638941bb4d0)
|       |           `-CXXMemberCallExpr 0x5638941bb460 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5638941bb3d0 <col:26> '<bound member function type>' ->find 0x5638941ac978
|       |             | `-CXXThisExpr 0x5638941bb3c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5638941bb498 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941bb400 <col:31> 'const char *' lvalue ParmVar 0x56389418fc10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5638941bb4b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5638941bb420 <col:40> 'int' lvalue ParmVar 0x56389418fc90 'flags' 'int'
|       |             `-DeclRefExpr 0x5638941bb440 <col:47> 'Args::Slot *' lvalue Var 0x5638941bb2c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5638941bb5f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5638941bb5d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5638941bb5b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5638941bb588 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|       |       `-ImplicitCastExpr 0x5638941bb570 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5638941bb550 <col:20> 'String' lvalue Var 0x5638941bb358 'str' 'String'
|       `-CallExpr 0x5638941bb748 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5638941bb618 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|         | `-CXXThisExpr 0x5638941bb608 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5638941bb6f8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5638941bb668 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5638941bb648 <col:23> 'P' lvalue ParmVar 0x56389418fd08 'parser' 'P'
|         | |-DeclRefExpr 0x5638941bb6b0 <col:36> 'String' lvalue Var 0x5638941bb358 'str' 'String'
|         | `-UnaryOperator 0x5638941bb6e0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5638941bb6d0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5638941bb728 <col:49> 'Args::Slot *' lvalue Var 0x5638941bb2c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5638941986c8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563894198398 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563894198628 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563894198450 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941984d0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563894198548 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5638941bc120 <col:71, line:792:5>
|     |-DeclStmt 0x5638941bb848 <line:784:9, col:26>
|     | `-VarDecl 0x5638941bb7e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5638941bb918 <line:785:9, col:29>
|     | `-VarDecl 0x5638941bb878 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5638941bb900 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5638941bb8e0 <col:28> 'int' 1
|     |-WhileStmt 0x5638941bbfd0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5638941bbff0 <line:786:16, col:61>
|     | | `-VarDecl 0x5638941bb940 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5638941bbb20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5638941bbaf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5638941bbad8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5638941bbab8 <col:29, col:61> 'String' (CXXTemporary 0x5638941bbab8)
|     | |           `-CXXMemberCallExpr 0x5638941bba48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5638941bb9b8 <col:29> '<bound member function type>' ->find 0x5638941ac978
|     | |             | `-CXXThisExpr 0x5638941bb9a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5638941bba80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bb9e8 <col:34> 'const char *' lvalue ParmVar 0x563894198450 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5638941bba98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bba08 <col:43> 'int' lvalue ParmVar 0x5638941984d0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5638941bba28 <col:50> 'Args::Slot *' lvalue Var 0x5638941bb7e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5638941bbbd8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5638941bbbc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5638941bbba0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5638941bbb70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|     | |       `-ImplicitCastExpr 0x5638941bbb58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5638941bbb38 <col:23> 'String' lvalue Var 0x5638941bb940 'str' 'String'
|     | `-CompoundStmt 0x5638941bbfa8 <col:64, line:790:9>
|     |   |-CallExpr 0x5638941bbd30 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5638941bbc00 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|     |   | | `-CXXThisExpr 0x5638941bbbf0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5638941bbce0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5638941bbc50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5638941bbc30 <col:23> 'P' lvalue ParmVar 0x563894198548 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5638941bbc98 <col:36> 'String' lvalue Var 0x5638941bb940 'str' 'String'
|     |   | | `-UnaryOperator 0x5638941bbcc8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5638941bbcb8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5638941bbd10 <col:49> 'Args::Slot *' lvalue Var 0x5638941bb7e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5638941bbec8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5638941bbd60 <col:13> 'int' lvalue Var 0x5638941bb878 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5638941bbeb0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5638941bbe90 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5638941bbdf8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5638941bbdd8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5638941bbdc0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5638941bbd80 <col:28> 'int' lvalue Var 0x5638941bb878 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5638941bbda0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5638941bbe78 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5638941bbe48 <col:49> 'bool' lvalue ->_read_status 0x563894090070
|     |   |         `-ImplicitCastExpr 0x5638941bbe28 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5638941bbe18 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5638941bbf78 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5638941bbee8 <col:13> 'int' lvalue ParmVar 0x5638941984d0 'flags' 'int'
|     |     `-UnaryOperator 0x5638941bbf60 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5638941bbf48 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5638941bbf28 <col:23> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5638941bc100 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5638941bc038 <col:9> 'bool' lvalue ->_read_status 0x563894090070
|       | `-ImplicitCastExpr 0x5638941bc018 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5638941bc008 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5638941bc0e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5638941bc0c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5638941bc0a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5638941bc068 <col:25> 'int' lvalue Var 0x5638941bb878 'read_status' 'int'
|           `-IntegerLiteral 0x5638941bc088 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563894198ba8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563894198738 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5638941987b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563894198b08 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563894198878 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5638941988f8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563894198970 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x563894198a18 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5638941bd0b0 <col:84, line:805:5>
|     |-DeclStmt 0x5638941bc1c8 <line:796:9, col:26>
|     | `-VarDecl 0x5638941bc160 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5638941bc298 <line:797:9, col:29>
|     | `-VarDecl 0x5638941bc1f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5638941bc280 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5638941bc260 <col:28> 'int' 1
|     |-DeclStmt 0x5638941bc5d0 <line:798:9, col:71>
|     | `-VarDecl 0x5638941bc2e8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5638941bc5a0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5638941bc510 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5638941bc558 <col:55> 'T' lvalue ParmVar 0x563894198a18 'variable' 'T &'
|     |     `-UnaryOperator 0x5638941bc588 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5638941bc578 <col:66> 'Args *' this
|     |-WhileStmt 0x5638941bcf60 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5638941bcf80 <line:799:16, col:61>
|     | | `-VarDecl 0x5638941bc5f8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5638941bc7d8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5638941bc7a8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5638941bc790 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5638941bc770 <col:29, col:61> 'String' (CXXTemporary 0x5638941bc770)
|     | |           `-CXXMemberCallExpr 0x5638941bc700 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5638941bc670 <col:29> '<bound member function type>' ->find 0x5638941ac978
|     | |             | `-CXXThisExpr 0x5638941bc660 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5638941bc738 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bc6a0 <col:34> 'const char *' lvalue ParmVar 0x563894198878 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5638941bc750 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bc6c0 <col:43> 'int' lvalue ParmVar 0x5638941988f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5638941bc6e0 <col:50> 'Args::Slot *' lvalue Var 0x5638941bc160 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5638941bc890 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5638941bc878 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5638941bc858 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5638941bc828 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|     | |       `-ImplicitCastExpr 0x5638941bc810 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5638941bc7f0 <col:23> 'String' lvalue Var 0x5638941bc5f8 'str' 'String'
|     | `-CompoundStmt 0x5638941bcf38 <col:64, line:803:9>
|     |   |-CallExpr 0x5638941bccc0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5638941bc8b8 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|     |   | | `-CXXThisExpr 0x5638941bc8a8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5638941bcc80 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5638941bc8e8 <col:23> 'T *' lvalue Var 0x5638941bc2e8 's' 'T *'
|     |   | | `-CallExpr 0x5638941bcc40 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5638941bcad0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5638941bcb18 <col:56> 'P' lvalue ParmVar 0x563894198970 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5638941bcb38 <col:64> 'String' lvalue Var 0x5638941bc5f8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5638941bcbe8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5638941bcb78 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|     |   | |   | `-DeclRefExpr 0x5638941bcb58 <col:70> 'T *' lvalue Var 0x5638941bc2e8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5638941bcc28 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5638941bcc18 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5638941bcca0 <col:81> 'Args::Slot *' lvalue Var 0x5638941bc160 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5638941bce58 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5638941bccf0 <col:13> 'int' lvalue Var 0x5638941bc1f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5638941bce40 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5638941bce20 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5638941bcd88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5638941bcd68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5638941bcd50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5638941bcd10 <col:28> 'int' lvalue Var 0x5638941bc1f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5638941bcd30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5638941bce08 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5638941bcdd8 <col:49> 'bool' lvalue ->_read_status 0x563894090070
|     |   |         `-ImplicitCastExpr 0x5638941bcdb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5638941bcda8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5638941bcf08 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5638941bce78 <col:13> 'int' lvalue ParmVar 0x5638941988f8 'flags' 'int'
|     |     `-UnaryOperator 0x5638941bcef0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5638941bced8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5638941bceb8 <col:23> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5638941bd090 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5638941bcfc8 <col:9> 'bool' lvalue ->_read_status 0x563894090070
|       | `-ImplicitCastExpr 0x5638941bcfa8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5638941bcf98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5638941bd070 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5638941bd050 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5638941bd038 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5638941bcff8 <col:25> 'int' lvalue Var 0x5638941bc1f8 'read_status' 'int'
|           `-IntegerLiteral 0x5638941bd018 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563894199188 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x563894198c20 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563894198c98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5638941990e8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563894198d58 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563894198dd8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x563894198e50 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x563894198fa0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5638941bdeb8 <col:87, line:821:5>
|     |-DeclStmt 0x5638941bd160 <line:809:9, col:26>
|     | `-VarDecl 0x5638941bd0f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5638941bd230 <line:810:9, col:29>
|     | `-VarDecl 0x5638941bd190 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5638941bd218 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5638941bd1f8 <col:28> 'int' 1
|     |-DeclStmt 0x5638941bd478 <line:811:9, col:38>
|     | `-VarDecl 0x5638941bd360 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5638941bd450 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5638941bd3d8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5638941bd430 <col:29> 'Vector<T>' lvalue ParmVar 0x563894198fa0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5638941bdd68 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5638941bdd88 <line:812:16, col:61>
|     | | `-VarDecl 0x5638941bd4a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5638941bd680 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5638941bd650 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5638941bd638 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5638941bd618 <col:29, col:61> 'String' (CXXTemporary 0x5638941bd618)
|     | |           `-CXXMemberCallExpr 0x5638941bd5a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5638941bd518 <col:29> '<bound member function type>' ->find 0x5638941ac978
|     | |             | `-CXXThisExpr 0x5638941bd508 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5638941bd5e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bd548 <col:34> 'const char *' lvalue ParmVar 0x563894198d58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5638941bd5f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5638941bd568 <col:43> 'int' lvalue ParmVar 0x563894198dd8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5638941bd588 <col:50> 'Args::Slot *' lvalue Var 0x5638941bd0f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5638941bd738 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5638941bd720 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5638941bd700 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5638941bd6d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563893edd568
|     | |       `-ImplicitCastExpr 0x5638941bd6b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5638941bd698 <col:23> 'String' lvalue Var 0x5638941bd4a0 'str' 'String'
|     | `-CompoundStmt 0x5638941bdd30 <col:64, line:819:9>
|     |   |-DeclStmt 0x5638941bd7f8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5638941bd760 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5638941bd7d8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5638941bd978 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5638941bd820 <col:13> '<bound member function type>' ->postparse 0x5638941acb88
|     |   | | `-CXXThisExpr 0x5638941bd810 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5638941bd920 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5638941bd870 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5638941bd850 <col:23> 'P' lvalue ParmVar 0x563894198e50 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5638941bd8b8 <col:36> 'String' lvalue Var 0x5638941bd4a0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5638941bd8d8 <col:41> 'T' lvalue Var 0x5638941bd760 'sx' 'T'
|     |   | | `-UnaryOperator 0x5638941bd908 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5638941bd8f8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5638941bd958 <col:53> 'Args::Slot *' lvalue Var 0x5638941bd0f8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5638941bdad0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5638941bda08 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5638941bd9d8 <col:17> 'bool' lvalue ->_read_status 0x563894090070
|     |   | |   `-ImplicitCastExpr 0x5638941bd9b8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5638941bd9a8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5638941bdaa8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5638941bda40 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5638941bda20 <col:17> 'Vector<T> *' lvalue Var 0x5638941bd360 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5638941bda88 <col:30> 'T' lvalue Var 0x5638941bd760 'sx' 'T'
|     |   |-BinaryOperator 0x5638941bdc50 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5638941bdae8 <col:13> 'int' lvalue Var 0x5638941bd190 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5638941bdc38 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5638941bdc18 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5638941bdb80 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5638941bdb60 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5638941bdb48 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5638941bdb08 <col:28> 'int' lvalue Var 0x5638941bd190 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5638941bdb28 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5638941bdc00 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5638941bdbd0 <col:49> 'bool' lvalue ->_read_status 0x563894090070
|     |   |         `-ImplicitCastExpr 0x5638941bdbb0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5638941bdba0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5638941bdd00 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5638941bdc70 <col:13> 'int' lvalue ParmVar 0x563894198dd8 'flags' 'int'
|     |     `-UnaryOperator 0x5638941bdce8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5638941bdcd0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5638941bdcb0 <col:23> 'const int' lvalue Var 0x563894180828 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5638941bde98 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5638941bddd0 <col:9> 'bool' lvalue ->_read_status 0x563894090070
|       | `-ImplicitCastExpr 0x5638941bddb0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5638941bdda0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5638941bde78 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5638941bde58 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5638941bde40 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5638941bde00 <col:25> 'int' lvalue Var 0x5638941bd190 'read_status' 'int'
|           `-IntegerLiteral 0x5638941bde20 <col:40> 'int' 1
|-AccessSpecDecl 0x563894199200 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x563894199228 prev 0x5638940958a8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x563894199320 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x563894199410 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5638941bdef0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x563894199500 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5638941bdf00 <col:25, line:830:9>
| |-CXXMethodDecl 0x563894199600 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5638941996b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x563894199758 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563894199758
| | `-ParmVarDecl 0x563894199868 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56389419a028 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56389419a028
|   `-ParmVarDecl 0x56389419a138 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5638941998d8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x563894199a38 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x563894199c30 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x563894199ae0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x563894199b58 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5638941be0e0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563894199ee8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5638941bdf50 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5638941bdf10 <col:20> 'void *' lvalue ParmVar 0x563894199ae0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x563894199f50 '_slot' 'char *'
| | | `-CXXNewExpr 0x5638941bdfd8 <col:32, col:45> 'char *' array Function 0x563893d001d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5638941bdfc0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5638941bdf90 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x563894199b58 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563894199fb0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5638941be0a0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5638941be060 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x563894199b58 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5638941be160 <col:61, line:838:9>
| |-CXXDestructorDecl 0x563894199d30 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x563894199500 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5638941be1e8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5638941be1c8 <line:840:13, col:22> 'void' array Function 0x563893d00538 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5638941be1b0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5638941be180 <col:22> 'char *' lvalue ->_slot 0x563894199f50
| |         `-CXXThisExpr 0x5638941be170 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x563894199e30 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x563894199600 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5638941be3d8 <col:22, line:844:9>
| |   `-CallExpr 0x5638941be340 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5638941be328 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5638941be308 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563893e0bfb8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5638941be378 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5638941be258 <col:20> 'void *' lvalue ->_ptr 0x563894199ee8
| |     |   `-CXXThisExpr 0x5638941be248 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5638941be3a8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5638941be390 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5638941be298 <col:26> 'char *' lvalue ->_slot 0x563894199f50
| |     |     `-CXXThisExpr 0x5638941be288 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5638941be3c0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5638941be2d8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563894199fb0
| |         `-CXXThisExpr 0x5638941be2c8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563894199ee8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x563894199f50 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563894199fb0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56389419a1a8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56389419a1a8
| | `-ParmVarDecl 0x56389419a2b8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56389419a358 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56389419a358
|   `-ParmVarDecl 0x56389419a468 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56389419a608 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56389419a4d8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56389419a578 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56389419a8a0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56389419aa98 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56389419a968 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56389419ac18 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5638941be410 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5638941be3f0 <col:20> 'T *' lvalue ParmVar 0x56389419a968 'ptr' 'T *'
|   | `-CompoundStmt 0x5638941be460 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56389419ab68 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x563894199600 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5638941be610 <col:22, line:857:9>
|   |   `-CallExpr 0x5638941be5e0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5638941be470 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x563893ec46e8 0x563893e6ea18
|   |     |-CXXOperatorCallExpr 0x5638941be570 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5638941be500 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5638940d1698 0x5638940d12b8 0x5638940d0ee8 0x5638940d0b08 0x5638940d0728 0x5638940d0358
|   |     | `-MemberExpr 0x5638941be4d0 <col:29> 'T *' lvalue ->_ptr 0x56389419ac18
|   |     |   `-CXXThisExpr 0x5638941be4c0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5638941be5b0 <col:35> 'T' lvalue ->_slot 0x56389419ac78
|   |       `-CXXThisExpr 0x5638941be5a0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56389419ac18 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56389419ac78 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56389419ace0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56389419ade0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56389419ae30 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56389419adc0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56389419ada0 <col:31> 'int' 48
|-FieldDecl 0x56389419ae58 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56389419aeb8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56389419af18 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56389419b050 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5638941ac220 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5638941ac280 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5638941ac330 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5638941ac558 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5638941ac460 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5638941ac6a8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5638941ac618 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5638941ac978 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5638941ac768 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5638941ac7e8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5638941ac890 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5638941acb88 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5638941aca40 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5638941acab8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5638941acc58 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5638941acda8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5638941acd10 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5638941ad138 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5638941ace68 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5638941acee8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5638941acf90 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5638941ad048 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5638941ad360 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5638941ad210 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5638941ad288 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5638941ad678 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5638941ad410 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5638941ad5d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5638941ad4e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893ecd410 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563893ecd528 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x563893ecd5b8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x563893ecd688 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x563893ecd770 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x563893ecd988 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563893ecd830 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ecdb38 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563893ecda40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563893ecdc80 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563893ecdbf0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563893ecddc8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563893ecdd38 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ecdf10 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563893ecde80 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ecdfd8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x563893ece120 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x563893ece090 <col:28> col:31 'int'
|-CXXMethodDecl 0x563893ece1e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x563893ece330 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x563893ece2a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563893ece4a8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563893ece3e8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ece5f0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563893ece560 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ece6b8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x563893ece878 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563893ece768 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563893ece7e0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893eceac8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563893ece938 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563893ece9b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563893eceb78 <col:86> "" ""
|-CXXMethodDecl 0x563893ecede8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x563893ecec58 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x563893ececd0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ecef98 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563893eceea8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563893ecf148 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563893ecf050 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563893ecf418 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563893ecf200 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563893ecf278 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563893ecf2f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ecf6f8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563893ecf4e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563893ecf558 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563893ecf5d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563893ecf7b0 <col:115> "" ""
|-AccessSpecDecl 0x563893ecf820 <line:84:3, col:10> col:3 private
|-FieldDecl 0x563893ecf858 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563893ed0d70 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563893ed0d70
| `-ParmVarDecl 0x563893ed0e78 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x563893ed0f18 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563893ed0f18
| `-ParmVarDecl 0x563893ed1028 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x563893f06658 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5638940f8450 <col:7>
|-CXXConstructorDecl 0x563893f06730 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563893f06730
| `-ParmVarDecl 0x563893f06848 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x563893f068b8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563893f068b8
| `-ParmVarDecl 0x563893f069c8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5638940fae50 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638940e6ff8 prev 0x5638940dc200 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5638940e70f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5638940e71e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5638940e7308 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5638940e7488 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5638940e7608 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5638940e7788 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5638940f85b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5638940f8e28 <col:11>
|-CXXDestructorDecl 0x5638940f8690 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5638940f87c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5638940f87c8
| `-ParmVarDecl 0x5638940f88d8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5638940f8978 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5638940f8978
| `-ParmVarDecl 0x5638940f8a88 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5638940fb848 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5638940fb958 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5638940fbbd8 <col:11>
|   `-ReturnStmt 0x5638940fbbc8 <col:11>
|     `-UnaryOperator 0x5638940fbbb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5638940fbba0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5638940fb9c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5638940fb9c8
  `-ParmVarDecl 0x5638940fbad8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638940e77f0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5638940e7908 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5638940e79a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5638940e7a10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5638940e7a78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5638940e7ae0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5638940e7b40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5638940e7c00 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5638940e7c60 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5638940e7cc0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5638940f84c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5638940e79a8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5638940f8e38 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5638940f8e90 <col:12>
|-CXXConstructorDecl 0x5638940f8af8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5638940f8af8
| `-ParmVarDecl 0x5638940f8c08 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5638940f8ca8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5638940f8ca8
| `-ParmVarDecl 0x5638940f8db8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5638940faf30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638940d5910 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5638940d5a28 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5638940d5ab8 <col:16, col:22> col:16 public
|-EnumDecl 0x5638940d5ae0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5638940d5be0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5638940d5cc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940d5bc0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5638940d5ba0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5638940d5c70 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5638940d5cd8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638940d5c50 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5638940d5c30 <col:22> 'int' 64
|-CXXMethodDecl 0x5638940d6018 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5638940d5d00 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5638940d5d80 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5638940d5df8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5638940d5e70 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d60d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5638940d62d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5638940d6150 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5638940d61c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d6388 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5638940d64e8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5638940d63f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d6590 <col:72> warn_unused_result ""
|-TypedefDecl 0x5638940d68f0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5638940d6880 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5638940d6820 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5638940d67e0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563893bad2d0 'void'
|       |-PointerType 0x563893e55cb0 'unsigned char *'
|       | `-BuiltinType 0x563893bad3d0 'unsigned char'
|       |-TypedefType 0x563893c52220 'size_t' sugar
|       | |-Typedef 0x563893c1db20 'size_t'
|       | `-BuiltinType 0x563893bad430 'unsigned long'
|       `-PointerType 0x563893badad0 'void *'
|         `-BuiltinType 0x563893bad2d0 'void'
|-CXXMethodDecl 0x5638940d6d68 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5638940d6960 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5638940d69d8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5638940d6a70 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5638940d6af0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5638940f1460 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5638940f1448 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5638940f1410 <col:58> 'int' 0
| |-ParmVarDecl 0x5638940d6b70 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5638940f1488 <col:76> 'int' 0
| |-ParmVarDecl 0x5638940d6bf0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5638940f14a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5638940d6e38 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5638940d6eb8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5638940d6f78 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5638940d7018 <col:20>
| `-OptimizeNoneAttr 0x5638940d7070 <col:30>
|-CXXMethodDecl 0x5638940d70e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5638940d7188 <col:20>
| `-OptimizeNoneAttr 0x5638940d71e0 <col:30>
|-CXXMethodDecl 0x5638940d7258 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5638940d72f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5638940d73a8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5638940d7448 <col:20>
| |-OptimizeNoneAttr 0x5638940d74a0 <col:30>
| `-WarnUnusedResultAttr 0x5638940d74c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5638940d7520 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5638940d75c0 <col:20>
| `-OptimizeNoneAttr 0x5638940d7618 <col:30>
|-CXXMethodDecl 0x5638940d7668 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5638940d7708 <col:20>
| `-OptimizeNoneAttr 0x5638940d7760 <col:30>
|-CXXMethodDecl 0x5638940d77a8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5638940d7848 <col:20>
| `-OptimizeNoneAttr 0x5638940d78a0 <col:30>
|-CXXMethodDecl 0x5638940d78e8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940d79a8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940d7a70 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5638940d7b38 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5638940d7bf8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940d7d18 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5638940f1570 <col:54, line:99:5>
|   `-ReturnStmt 0x5638940f1560 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5638940f1548 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5638940f1518 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5638940e7ff8
|         `-CXXThisExpr 0x5638940f1508 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5638940d7eb8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5638940d7dc8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5638940f1620 <col:67, line:103:5>
|   `-BinaryOperator 0x5638940f1600 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5638940f1598 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5638940e7ff8
|     | `-CXXThisExpr 0x5638940f1588 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5638940f15e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f15c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5638940d7dc8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5638940d7fb0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5638940f16a0 <col:33, line:107:5>
|   `-ReturnStmt 0x5638940f1690 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5638940f1678 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5638940f1648 <col:16> 'void *' lvalue ->_destructor_argument 0x5638940e8060
|         `-CXXThisExpr 0x5638940f1638 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5638940d8070 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5638940f1cd0 <col:25, line:113:5>
|   |-ParenExpr 0x5638940f1a18 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5638940f19e8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f1758 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5638940f1730 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5638940f16f8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5638940f16c8 <col:24> '<bound member function type>' ->shared 0x5638940d70e8
|   |   |       `-ImplicitCastExpr 0x5638940f1718 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5638940f16b8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5638940f17b8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f1798 <col:42> 'int' 0
|   |   `-CallExpr 0x5638940f1948 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5638940f1930 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f1910 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f1988 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f1828 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5638940f19a0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f1850 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f19b8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f1888 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5638940f19d0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f18f8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f18e0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f18a8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5638940f1c18 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5638940f1a48 <col:2> 'unsigned char *' lvalue ->_head 0x5638940e7e00
|   | | `-CXXThisExpr 0x5638940f1a38 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5638940f1c00 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5638940f1be0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5638940f1a88 <col:10> 'unsigned char *' lvalue ->_data 0x5638940e7e68
|   |     | `-CXXThisExpr 0x5638940f1a78 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5638940f1bc8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5638940f1ba8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5638940f1ac8 <col:18> 'unsigned char *' lvalue ->_tail 0x5638940e7ed0
|   |         | `-CXXThisExpr 0x5638940f1ab8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5638940f1b90 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5638940f1b70 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5638940f1b08 <col:26> 'unsigned char *' lvalue ->_end 0x5638940e7f38
|   |             | `-CXXThisExpr 0x5638940f1af8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5638940f1b58 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5638940f1b38 <col:33> 'int' 0
|   `-BinaryOperator 0x5638940f1cb0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5638940f1c48 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5638940e7ff8
|     | `-CXXThisExpr 0x5638940f1c38 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5638940f1c98 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5638940f1c78 <col:16> 'int' 0
|-CXXMethodDecl 0x5638940d81b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5638940d8120 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940d8258 <col:20>
| |-OptimizeNoneAttr 0x5638940d82b0 <col:30>
| `-WarnUnusedResultAttr 0x5638940d82d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5638940d83a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5638940d8318 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940d8450 <col:20>
| |-OptimizeNoneAttr 0x5638940d84a8 <col:30>
| `-WarnUnusedResultAttr 0x5638940d84d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5638940d8608 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5638940d8510 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d86b0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5638940d87b0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5638940d8720 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940d8858 <col:20>
| `-OptimizeNoneAttr 0x5638940d88b0 <col:30>
|-CXXMethodDecl 0x5638940d8978 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5638940d88e8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d8a20 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5638940d8b20 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5638940d8a90 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5638940d8bc8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5638940d8cc8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5638940d8c38 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940d8d70 <col:20>
| `-OptimizeNoneAttr 0x5638940d8dc8 <col:30>
|-CXXMethodDecl 0x5638940d8f58 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5638940d8e08 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5638940d8e80 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5638940f14c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5638940d9008 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5638940d9208 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5638940d9080 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5638940d90f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940d9418 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5638940d92c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5638940d9340 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940d9628 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5638940d94d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5638940d9558 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5638940f14d8 <col:39> 'int' 0
|-CXXMethodDecl 0x5638940d96f8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5638940d97c0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5638940d9888 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5638940d9948 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940d9a10 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5638940d9b58 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5638940d9ac8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5638940d9d28 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5638940d9c18 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5638940d9c90 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940d9df8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5638940d9eb8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5638940d9f58 <col:20>
| `-OptimizeNoneAttr 0x5638940d9fb0 <col:30>
|-CXXMethodDecl 0x5638940da000 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5638940da0a0 <col:20>
| `-OptimizeNoneAttr 0x5638940da0f8 <col:30>
|-CXXMethodDecl 0x5638940da148 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5638940da208 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940da2d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5638940da370 <col:20>
| `-OptimizeNoneAttr 0x5638940da3c8 <col:30>
|-CXXMethodDecl 0x5638940da518 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5638940da408 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5638940da480 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940da668 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5638940da5d8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940da740 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5638940da800 <line:297:5, col:68> col:45 used has_transport_header 'bool () const'
| |-NoInlineAttr 0x5638940da8a0 <col:20>
| `-OptimizeNoneAttr 0x5638940da8f8 <col:30>
|-CXXMethodDecl 0x5638940da948 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5638940da9e8 <col:20>
| `-OptimizeNoneAttr 0x5638940daa40 <col:30>
|-CXXMethodDecl 0x5638940daa90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5638940dab58 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x5638940dabf8 <col:20>
| `-OptimizeNoneAttr 0x5638940dac50 <col:30>
|-CXXMethodDecl 0x5638940dac98 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5638940dadb8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5638940daf28 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5638940dae68 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5638940db018 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5638940db0b8 <col:20>
| `-OptimizeNoneAttr 0x5638940db110 <col:30>
|-CXXMethodDecl 0x5638940db160 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5638940db220 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5638940db458 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5638940db2d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5638940db348 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940db508 <col:20>
| `-OptimizeNoneAttr 0x5638940db560 <col:30>
|-CXXMethodDecl 0x5638940db608 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5638940db6a8 <col:20>
| `-OptimizeNoneAttr 0x5638940db700 <col:30>
|-CXXMethodDecl 0x5638940db750 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5638940db7f0 <col:20>
| `-OptimizeNoneAttr 0x5638940db848 <col:30>
|-CXXMethodDecl 0x5638940db890 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5638940db930 <col:20>
| `-OptimizeNoneAttr 0x5638940db988 <col:30>
|-CXXMethodDecl 0x5638940dba88 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5638940db9c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5638940dbb30 <col:20>
| `-OptimizeNoneAttr 0x5638940dbb88 <col:30>
|-CXXMethodDecl 0x5638940dbd48 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5638940dbbc0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5638940dbc38 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940dbdf8 <col:20>
| `-OptimizeNoneAttr 0x5638940dbe50 <col:30>
|-CXXMethodDecl 0x5638940dbef8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5638940dc018 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5638940dc138 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5638940dc1d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5638940dc200 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5638940dc328 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5638940dc3c8 <col:20>
| `-OptimizeNoneAttr 0x5638940dc420 <col:30>
|-CXXMethodDecl 0x5638940dc4c8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5638940dc568 <col:20>
| `-OptimizeNoneAttr 0x5638940dc5c0 <col:30>
|-AccessSpecDecl 0x5638940dc5e8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5638940dc610 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5638940dc710 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5638940dc760 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638940dc6f0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5638940dc6d0 <col:14> 'int' 48
|-CXXMethodDecl 0x5638940dc7c8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5638940dc868 <col:20>
| `-OptimizeNoneAttr 0x5638940dc8c0 <col:30>
|-CXXMethodDecl 0x5638940dc938 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5638940dc9d8 <col:20>
| `-OptimizeNoneAttr 0x5638940dca30 <col:30>
|-CXXMethodDecl 0x5638940dcaf8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5638940dca68 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5638940dcc98 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5638940dce38 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5638940dcd48 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5638940dcee0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5638940dcfe0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd390 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dcfc0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5638940dcfa0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5638940dd070 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd3a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dd050 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5638940dd030 <col:14> 'int' 1
| |-EnumConstantDecl 0x5638940dd100 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd3c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dd0e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5638940dd0c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5638940dd190 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd3d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dd170 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5638940dd150 <col:14> 'int' 3
| |-EnumConstantDecl 0x5638940dd220 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd3f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dd200 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5638940dd1e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5638940dd2b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5638940dd408 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940dd290 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5638940dd270 <col:13> 'int' 5
| `-EnumConstantDecl 0x5638940dd340 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5638940dd420 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638940dd320 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5638940dd300 <col:14> 'int' 6
|-CXXMethodDecl 0x5638940dd488 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5638940dd528 <col:20>
| `-OptimizeNoneAttr 0x5638940dd580 <col:30>
|-CXXMethodDecl 0x5638940dd678 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5638940dd5b8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5638940dd720 <col:20>
| `-OptimizeNoneAttr 0x5638940dd778 <col:30>
|-CXXMethodDecl 0x5638940dd7e8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5638940dd910 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5638940dda88 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5638940dd9c0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5638940ddb50 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5638940ddc18 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5638940ddd58 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5638940ddcc8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5638940dde00 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5638940ddf00 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5638940de100 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940ddee0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5638940ddec0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5638940ddf90 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5638940de118 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940ddf70 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5638940ddf50 <col:45> 'int' 4
| |-EnumConstantDecl 0x5638940de020 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5638940de130 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940de000 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5638940ddfe0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5638940de0b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5638940de148 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638940de090 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5638940de070 <col:47> 'int' 16
|-CXXMethodDecl 0x5638940de1a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5638940de318 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5638940de258 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5638940de3c0 <col:20>
| `-OptimizeNoneAttr 0x5638940de418 <col:30>
|-CXXMethodDecl 0x5638940de468 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5638940f1df0 <col:18, col:36>
|   `-ReturnStmt 0x5638940f1de0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5638940f1dc8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5638940f1da8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5638940f1d78 <col:27> '<bound member function type>' ->xanno 0x5638940dc4c8
|           `-CXXThisExpr 0x5638940f1d68 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5638940de560 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5638940f1f00 <col:30, col:48>
|   `-ReturnStmt 0x5638940f1ef0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5638940f1ed8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5638940f1eb8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5638940f1e88 <col:39> '<bound member function type>' ->xanno 0x5638940dc328
|           `-CXXThisExpr 0x5638940f1e78 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5638940de648 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5638940f2098 <col:24, col:50>
|   `-ReturnStmt 0x5638940f2088 <col:26, col:47>
|     `-UnaryOperator 0x5638940f2070 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5638940f2050 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5638940f2038 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5638940f1fe8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5638940e7308
|         |   `-CXXMemberCallExpr 0x5638940f1fc8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5638940f1f98 <col:34> '<bound member function type>' ->xanno 0x5638940dc4c8
|         |       `-CXXThisExpr 0x5638940f1f88 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5638940f2018 <col:46> 'int' 0
|-CXXMethodDecl 0x5638940de750 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5638940f2268 <col:36, col:62>
|   `-ReturnStmt 0x5638940f2258 <col:38, col:59>
|     `-UnaryOperator 0x5638940f2240 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5638940f2220 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5638940f2208 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5638940f2180 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5638940e7308
|         |   `-CXXMemberCallExpr 0x5638940f2160 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5638940f2130 <col:46> '<bound member function type>' ->xanno 0x5638940dc328
|         |       `-CXXThisExpr 0x5638940f2120 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5638940f21b0 <col:58> 'int' 0
|-CXXMethodDecl 0x5638940de868 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5638940f2400 <col:26, col:53>
|   `-ReturnStmt 0x5638940f23f0 <col:28, col:50>
|     `-UnaryOperator 0x5638940f23d8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5638940f23b8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5638940f23a0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5638940f2350 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5638940e7608
|         |   `-CXXMemberCallExpr 0x5638940f2330 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5638940f2300 <col:36> '<bound member function type>' ->xanno 0x5638940dc4c8
|         |       `-CXXThisExpr 0x5638940f22f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5638940f2380 <col:49> 'int' 0
|-CXXMethodDecl 0x5638940de988 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5638940f25d8 <col:38, col:65>
|   `-ReturnStmt 0x5638940f25c8 <col:40, col:62>
|     `-UnaryOperator 0x5638940f25b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5638940f2590 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5638940f2578 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5638940f24e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5638940e7608
|         |   `-CXXMemberCallExpr 0x5638940f24c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5638940f2498 <col:48> '<bound member function type>' ->xanno 0x5638940dc328
|         |       `-CXXThisExpr 0x5638940f2488 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5638940f2518 <col:61> 'int' 0
|-CXXMethodDecl 0x5638940deb38 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5638940dea40 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5638940f2ca8 <col:34, line:463:5>
|   |-ParenExpr 0x5638940f2af0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5638940f2ac0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f2728 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f26f8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f2648 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f2630 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f25f0 <col:23> 'int' lvalue ParmVar 0x5638940dea40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f2610 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f26d8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f26a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f2668 <col:33> 'int' lvalue ParmVar 0x5638940dea40 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5638940f26c0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5638940f2688 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5638940f2788 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f2768 <col:56> 'int' 0
|   |   `-CallExpr 0x5638940f2a20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5638940f2a08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f29e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f2a60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f2878 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5638940f2a78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f28a8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f2a90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f28e0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5638940f2aa8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f29d0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f29b8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f2978 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5638940f2c98 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5638940f2c80 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5638940f2c60 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5638940f2c30 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5638940f2be0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5638940e7308
|         |   `-CXXMemberCallExpr 0x5638940f2bc0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5638940f2b90 <col:9> '<bound member function type>' ->xanno 0x5638940dc328
|         |       `-CXXThisExpr 0x5638940f2b80 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5638940f2c48 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5638940f2c10 <col:21> 'int' lvalue ParmVar 0x5638940dea40 'i' 'int'
|-CXXMethodDecl 0x5638940ded88 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5638940debf8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5638940dec70 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5638940f3338 <col:40, line:472:5>
|   |-ParenExpr 0x5638940f3150 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5638940f3120 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f2e00 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f2dd0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f2d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f2d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f2cc8 <col:23> 'int' lvalue ParmVar 0x5638940debf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f2ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f2db0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f2d80 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f2d40 <col:33> 'int' lvalue ParmVar 0x5638940debf8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5638940f2d98 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5638940f2d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5638940f2e60 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f2e40 <col:56> 'int' 0
|   |   `-CallExpr 0x5638940f3080 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5638940f3068 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f3048 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f30c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f2ed0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5638940f30d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f2f00 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f30f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f2f38 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5638940f3108 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f3030 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f3018 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f2fd8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5638940f3318 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5638940f32c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5638940f3290 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5638940f3240 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5638940e7308
|     | |   `-CXXMemberCallExpr 0x5638940f3220 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5638940f31f0 <col:2> '<bound member function type>' ->xanno 0x5638940dc4c8
|     | |       `-CXXThisExpr 0x5638940f31e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5638940f32a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5638940f3270 <col:14> 'int' lvalue ParmVar 0x5638940debf8 'i' 'int'
|     `-ImplicitCastExpr 0x5638940f3300 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f32e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5638940dec70 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5638940def48 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5638940dee50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5638940f3ab8 <col:36, line:485:5>
|   |-ParenExpr 0x5638940f3820 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f37f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f34d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f34a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f33b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f3398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f3358 <col:23> 'int' lvalue ParmVar 0x5638940dee50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f3378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f3480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f3468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f33d0 <col:33> 'int' lvalue ParmVar 0x5638940dee50 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f3448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f3430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f33f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f3410 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5638940f3530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f3510 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f3750 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f3738 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f3718 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f3790 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f35a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5638940f37a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f35d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f37c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f3610 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5638940f37d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f3700 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f36e8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f36a8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5638940f3aa8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5638940f3a90 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5638940f3a78 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f3a48 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5638940f39e8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f39b8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f3930 <col:61, col:70> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f3910 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f38e0 <col:61> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f38d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f39d0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f3960 <col:74> 'int' lvalue ParmVar 0x5638940dee50 'i' 'int'
|-CXXMethodDecl 0x5638940df198 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5638940df008 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5638940df080 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5638940f4208 <col:42, line:500:5>
|   |-ParenExpr 0x5638940f3fa0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f3f70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f3c50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f3c20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f3b30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f3b18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f3ad8 <col:23> 'int' lvalue ParmVar 0x5638940df008 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f3af8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f3c00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f3be8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f3b50 <col:33> 'int' lvalue ParmVar 0x5638940df008 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f3bc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f3bb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f3b70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f3b90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5638940f3cb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f3c90 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f3ed0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f3eb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f3e98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f3f10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f3d20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5638940f3f28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f3d58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f3f40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f3d90 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5638940f3f58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f3e80 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f3e68 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f3e28 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5638940f41e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5638940f4198 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5638940f4168 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5638940f4110 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5638940f40e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5638940f4090 <col:48, col:57> 'char [48]' lvalue ->c 0x5638940e71e0
|     |     |   `-CXXMemberCallExpr 0x5638940f4070 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5638940f4040 <col:48> '<bound member function type>' ->xanno 0x5638940dc4c8
|     |     |       `-CXXThisExpr 0x5638940f4030 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5638940f40f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5638940f40c0 <col:61> 'int' lvalue ParmVar 0x5638940df008 'i' 'int'
|     `-ImplicitCastExpr 0x5638940f41d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f41b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5638940df080 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5638940df358 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5638940df260 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5638940f4968 <col:35, line:513:5>
|   |-ParenExpr 0x5638940f4678 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f4648 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f43a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f4370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f4280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f4268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f4228 <col:23> 'int' lvalue ParmVar 0x5638940df260 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f4248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f4350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f4338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f42a0 <col:33> 'int' lvalue ParmVar 0x5638940df260 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f4318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f4300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f42c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f42e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5638940f4400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f43e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f45a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f4590 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f4570 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f45e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f4470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5638940f4600 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f44a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f4618 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f44e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5638940f4630 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f4558 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f4540 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f4500 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5638940f4958 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5638940f4940 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5638940f4928 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f48f8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5638940f4870 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f4840 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f47f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f47d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f47a0 <col:60> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f4790 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f4858 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f4820 <col:73> 'int' lvalue ParmVar 0x5638940df260 'i' 'int'
|-CXXMethodDecl 0x5638940df5a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5638940df418 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5638940df490 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5638940f5088 <col:41, line:528:5>
|   |-ParenExpr 0x5638940f4e10 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f4de0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f4b00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f4ad0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f49e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f49c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f4988 <col:23> 'int' lvalue ParmVar 0x5638940df418 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f49a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f4ab0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f4a98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f4a00 <col:33> 'int' lvalue ParmVar 0x5638940df418 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f4a78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f4a60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f4a20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f4a40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5638940f4b60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f4b40 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f4d40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f4d28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f4d08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f4d80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f4bd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5638940f4d98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f4c08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f4db0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f4c40 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5638940f4dc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f4cf0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f4cd8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f4c98 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5638940f5068 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5638940f5018 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5638940f4fe8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5638940f4f90 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5638940f4f50 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5638940f4f00 <col:47, col:56> 'char [48]' lvalue ->c 0x5638940e71e0
|     |     |   `-CXXMemberCallExpr 0x5638940f4ee0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5638940f4eb0 <col:47> '<bound member function type>' ->xanno 0x5638940dc4c8
|     |     |       `-CXXThisExpr 0x5638940f4ea0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5638940f4f68 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5638940f4f30 <col:60> 'int' lvalue ParmVar 0x5638940df418 'i' 'int'
|     `-ImplicitCastExpr 0x5638940f5050 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f5030 <col:65> 'int16_t':'short' lvalue ParmVar 0x5638940df490 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5638940df768 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5638940df670 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5638940f5758 <col:36, line:541:5>
|   |-ParenExpr 0x5638940f54f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f54c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f5220 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f51f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f5100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f50e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f50a8 <col:23> 'int' lvalue ParmVar 0x5638940df670 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f50c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f51d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f51b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f5120 <col:33> 'int' lvalue ParmVar 0x5638940df670 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f5198 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f5180 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f5140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f5160 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5638940f5280 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f5260 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f5428 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f5410 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f53f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f5468 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f52f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5638940f5480 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f5328 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f5498 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f5360 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5638940f54b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f53d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f53c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f5380 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5638940f5748 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5638940f5730 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5638940f5718 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f56e8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5638940f5690 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f5660 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f5610 <col:61, col:70> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f55f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f55c0 <col:61> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f55b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f5678 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f5640 <col:74> 'int' lvalue ParmVar 0x5638940df670 'i' 'int'
|-CXXMethodDecl 0x5638940df938 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5638940df828 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5638940df8a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5638940df9e8 <col:20>
| `-OptimizeNoneAttr 0x5638940dfa40 <col:30>
|-CXXMethodDecl 0x5638940dfb78 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5638940dfa80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5638940f5e28 <col:35, line:562:5>
|   |-ParenExpr 0x5638940f5bc8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f5b98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f58f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f58c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f57d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f57b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f5778 <col:23> 'int' lvalue ParmVar 0x5638940dfa80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f5798 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f58a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f5888 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f57f0 <col:33> 'int' lvalue ParmVar 0x5638940dfa80 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f5868 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f5850 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f5810 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f5830 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5638940f5950 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f5930 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f5af8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f5ae0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f5ac0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f5b38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f59c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5638940f5b50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f59f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f5b68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f5a30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5638940f5b80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f5aa8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f5a90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f5a50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5638940f5e18 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5638940f5e00 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5638940f5de8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f5db8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5638940f5d60 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f5d30 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f5ce0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f5cc0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f5c90 <col:60> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f5c80 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f5d48 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f5d10 <col:73> 'int' lvalue ParmVar 0x5638940dfa80 'i' 'int'
|-CXXMethodDecl 0x5638940dfd88 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5638940dfc38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5638940dfcb0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5638940f6508 <col:41, line:577:5>
|   |-ParenExpr 0x5638940f6298 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f6268 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f5fc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f5f90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f5ea0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f5e88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f5e48 <col:23> 'int' lvalue ParmVar 0x5638940dfc38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f5e68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f5f70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f5f58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f5ec0 <col:33> 'int' lvalue ParmVar 0x5638940dfc38 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f5f38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f5f20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f5ee0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f5f00 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5638940f6020 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f6000 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f61c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f61b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f6190 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f6208 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f6090 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5638940f6220 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f60c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f6238 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f6100 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5638940f6250 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f6178 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f6160 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f6120 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5638940f64e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5638940f6498 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5638940f6468 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5638940f6408 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5638940f63d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5638940f6388 <col:47, col:56> 'char [48]' lvalue ->c 0x5638940e71e0
|     |     |   `-CXXMemberCallExpr 0x5638940f6368 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5638940f6338 <col:47> '<bound member function type>' ->xanno 0x5638940dc4c8
|     |     |       `-CXXThisExpr 0x5638940f6328 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5638940f63f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5638940f63b8 <col:60> 'int' lvalue ParmVar 0x5638940dfc38 'i' 'int'
|     `-ImplicitCastExpr 0x5638940f64d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f64b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5638940dfcb0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5638940dff48 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5638940dfe50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5638940f6c38 <col:36, line:591:5>
|   |-ParenExpr 0x5638940f6978 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f6948 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f66a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f6670 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f6580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f6568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f6528 <col:23> 'int' lvalue ParmVar 0x5638940dfe50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f6548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f6650 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f6638 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f65a0 <col:33> 'int' lvalue ParmVar 0x5638940dfe50 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f6618 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f6600 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f65c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f65e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5638940f6700 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f66e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f68a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f6890 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f6870 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f68e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f6770 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5638940f6900 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f67a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f6918 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f67e0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5638940f6930 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f6858 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f6840 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f6800 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5638940f6c28 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5638940f6c10 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5638940f6bf8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f6bc8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5638940f6b40 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f6b10 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f6ac0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f6aa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f6a70 <col:61> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f6a60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f6b28 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f6af0 <col:74> 'int' lvalue ParmVar 0x5638940dfe50 'i' 'int'
|-CXXMethodDecl 0x5638940e0198 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5638940e0008 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5638940e0080 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5638940f7318 <col:42, line:606:5>
|   |-ParenExpr 0x5638940f70a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5638940f7078 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f6dd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f6da0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f6cb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f6c98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f6c58 <col:23> 'int' lvalue ParmVar 0x5638940e0008 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f6c78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f6d80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5638940f6d68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f6cd0 <col:33> 'int' lvalue ParmVar 0x5638940e0008 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f6d48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f6d30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f6cf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5638940f6d10 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5638940f6e30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f6e10 <col:60> 'int' 0
|   |   `-CallExpr 0x5638940f6fd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5638940f6fc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f6fa0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f7018 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f6ea0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5638940f7030 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f6ed8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f7048 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f6f10 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5638940f7060 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f6f88 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f6f70 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f6f30 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5638940f72f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5638940f72a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5638940f7278 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5638940f7218 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5638940f71e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5638940f7198 <col:48, col:57> 'char [48]' lvalue ->c 0x5638940e71e0
|     |     |   `-CXXMemberCallExpr 0x5638940f7178 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5638940f7148 <col:48> '<bound member function type>' ->xanno 0x5638940dc4c8
|     |     |       `-CXXThisExpr 0x5638940f7138 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5638940f7200 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5638940f71c8 <col:61> 'int' lvalue ParmVar 0x5638940e0008 'i' 'int'
|     `-ImplicitCastExpr 0x5638940f72e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5638940f72c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5638940e0080 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5638940e0330 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5638940e0260 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5638940f7b88 <col:33, line:620:5>
|   |-ParenExpr 0x5638940f7900 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5638940f78d0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f7520 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f74f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f7390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f7378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f7338 <col:23> 'int' lvalue ParmVar 0x5638940e0260 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f7358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f74d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5638940f74b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f73b0 <col:33> 'int' lvalue ParmVar 0x5638940e0260 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f7498 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f7480 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f73d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5638940f7458 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5638940f7440 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5638940f7408 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5638940f7580 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f7560 <col:79> 'int' 0
|   |   `-CallExpr 0x5638940f7830 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5638940f7818 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f77f8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f7870 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f7668 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5638940f7888 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f76b0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f78a0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f76e8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5638940f78b8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f77e0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f77c8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f7788 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5638940f7b78 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5638940f7b60 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5638940f7b48 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5638940f7b18 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5638940f7a90 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5638940f7a60 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5638940f7a10 <col:67, col:76> 'char const[48]' lvalue ->c 0x5638940e71e0
|             |   `-CXXMemberCallExpr 0x5638940f79f0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5638940f79c0 <col:67> '<bound member function type>' ->xanno 0x5638940dc328
|             |       `-CXXThisExpr 0x5638940f79b0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5638940f7a78 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5638940f7a40 <col:80> 'int' lvalue ParmVar 0x5638940e0260 'i' 'int'
|-CXXMethodDecl 0x5638940e0548 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5638940e03f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5638940e0470 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5638940f83b0 <col:45, line:635:5>
|   |-ParenExpr 0x5638940f80f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5638940f80c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5638940f7d90 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5638940f7d60 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5638940f7c00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5638940f7be8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5638940f7ba8 <col:23> 'int' lvalue ParmVar 0x5638940e03f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5638940f7bc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5638940f7d40 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5638940f7d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5638940f7c20 <col:33> 'int' lvalue ParmVar 0x5638940e03f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5638940f7d08 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5638940f7cf0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5638940f7c40 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5638940dc710 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5638940f7cc8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5638940f7cb0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5638940f7c78 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5638940f7df0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5638940f7dd0 <col:79> 'int' 0
|   |   `-CallExpr 0x5638940f8028 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5638940f8010 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5638940f7ff0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563893c49030 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5638940f8068 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f7e60 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5638940f8080 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5638940f7ea8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5638940f8098 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5638940f7ee0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5638940f80b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5638940f7fd8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5638940f7fc0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5638940f7f78 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5638940f8390 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5638940f82f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5638940f82c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5638940f8268 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5638940f8238 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5638940f81e8 <col:54, col:63> 'char [48]' lvalue ->c 0x5638940e71e0
|     |     |   `-CXXMemberCallExpr 0x5638940f81c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5638940f8198 <col:54> '<bound member function type>' ->xanno 0x5638940dc4c8
|     |     |       `-CXXThisExpr 0x5638940f8188 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5638940f8250 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5638940f8218 <col:67> 'int' lvalue ParmVar 0x5638940e03f0 'i' 'int'
|     `-CXXConstCastExpr 0x5638940f8360 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5638940f8348 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5638940f8310 <col:91> 'const void *' lvalue ParmVar 0x5638940e0470 'x' 'const void *'
|-CXXMethodDecl 0x5638940e0618 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5638940f8438 <col:34, line:640:5>
|   `-ReturnStmt 0x5638940f8428 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5638940f8410 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5638940f83e0 <col:16> 'Packet *' lvalue ->_data_packet 0x5638940e7d98
|         `-CXXThisExpr 0x5638940f83d0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5638940e0758 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5638940e06c8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5638940f14f8 <col:46> 'bool' true
|-CXXMethodDecl 0x5638940e08d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5638940e0810 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5638940e0980 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5638940e1130 <line:660:22> "" ""
| |-EnumConstantDecl 0x5638940e0a80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e11a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0a60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5638940e0a40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5638940d5be0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5638940e0b10 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e11b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0af0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5638940e0ad0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5638940d5c70 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5638940e0ba0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e11d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0b80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5638940e0b60 <col:21> 'int' 0
| |-EnumConstantDecl 0x5638940e0c30 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e11e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0c10 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5638940e0bf0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5638940e0cc0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1200 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0ca0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5638940e0c80 <col:21> 'int' 16
| |-EnumConstantDecl 0x5638940e0d50 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1218 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0d30 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5638940e0d10 <col:19> 'int' 32
| |-EnumConstantDecl 0x5638940e0de0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1230 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0dc0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5638940e0da0 <col:19> 'int' EnumConstant 0x5638940e0c30 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5638940e0e70 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1248 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0e50 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5638940e0e30 <col:19> 'int' EnumConstant 0x5638940e0d50 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5638940e0f40 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1260 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0f20 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5638940e0f00 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5638940e0ec0 <col:23> 'int' EnumConstant 0x5638940e0e70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5638940e0ee0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5638940e1010 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5638940e1278 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5638940e0ff0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5638940e0fd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5638940e0f90 <col:23> 'int' EnumConstant 0x5638940e0e70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5638940e0fb0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5638940e10e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5638940e1290 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5638940e10c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5638940e10a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5638940e1060 <col:23> 'int' EnumConstant 0x5638940e0e70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5638940e1080 <col:40> 'int' 8
|-CXXMethodDecl 0x5638940e12d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5638940e1370 <col:68> "" ""
|-CXXMethodDecl 0x5638940e1408 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5638940e14a8 <col:45> "" ""
|-CXXMethodDecl 0x5638940e1540 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5638940e15e0 <col:57> "" ""
|-CXXMethodDecl 0x5638940e1678 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5638940e1718 <col:45> "" ""
|-CXXMethodDecl 0x5638940e17b0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5638940e1850 <col:57> "" ""
|-CXXMethodDecl 0x5638940e18e0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5638940e1980 <col:51> "" ""
|-CXXMethodDecl 0x5638940e1a10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5638940e1ab0 <col:63> "" ""
|-CXXMethodDecl 0x5638940e1b40 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5638940e1be0 <col:53> "" ""
|-CXXMethodDecl 0x5638940e1c70 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5638940e1d10 <col:65> "" ""
|-CXXMethodDecl 0x5638940e1e28 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5638940e1d98 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5638940e1ed0 <col:61> "" ""
|-CXXMethodDecl 0x5638940e2068 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5638940e1f58 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5638940e1fd0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5638940e2118 <col:67> "" ""
|-CXXMethodDecl 0x5638940e2230 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5638940e21a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5638940e22d8 <col:63> "" ""
|-CXXMethodDecl 0x5638940e2470 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5638940e2360 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5638940e23d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5638940e2520 <col:69> "" ""
|-CXXMethodDecl 0x5638940e2638 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5638940e25a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5638940e26e0 <col:63> "" ""
|-CXXMethodDecl 0x5638940e4db8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5638940e4ca8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5638940e4d20 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5638940e4e68 <col:69> "" ""
|-CXXMethodDecl 0x5638940e4f80 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5638940e4ef0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5638940e5028 <col:62> "" ""
|-CXXMethodDecl 0x5638940e51c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5638940e50b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5638940e5128 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5638940e5270 <col:68> "" ""
|-CXXMethodDecl 0x5638940e5388 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5638940e52f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5638940e5430 <col:63> "" ""
|-CXXMethodDecl 0x5638940e55c8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5638940e54b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5638940e5530 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5638940e5678 <col:69> "" ""
|-CXXMethodDecl 0x5638940e5708 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5638940e57a8 <col:64> "" ""
|-CXXMethodDecl 0x5638940e5838 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5638940e58d8 <col:52> "" ""
|-CXXMethodDecl 0x5638940e5968 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5638940e5a08 <col:67> "" ""
|-CXXMethodDecl 0x5638940e5a98 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5638940e5b38 <col:55> "" ""
|-CXXMethodDecl 0x5638940e5c50 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5638940e5bc0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5638940e5cf8 <col:58> "" ""
|-CXXMethodDecl 0x5638940e5e90 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5638940e5d80 <col:33> col:36 'int'
| |-ParmVarDecl 0x5638940e5df8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5638940e5f40 <col:62> "" ""
|-CXXMethodDecl 0x5638940e6058 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5638940e5fc8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5638940e6100 <col:58> "" ""
|-CXXMethodDecl 0x5638940e6298 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5638940e6188 <col:33> col:36 'int'
| |-ParmVarDecl 0x5638940e6200 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5638940e6348 <col:62> "" ""
|-CXXMethodDecl 0x5638940e6460 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5638940e63d0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5638940e6508 <col:60> "" ""
|-CXXMethodDecl 0x5638940e66a0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5638940e6590 <col:34> col:37 'int'
| |-ParmVarDecl 0x5638940e6608 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5638940e6750 <col:64> "" ""
|-CXXMethodDecl 0x5638940e6868 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5638940e67d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5638940e6910 <col:58> "" ""
|-CXXMethodDecl 0x5638940e6aa8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5638940e6998 <col:33> col:36 'int'
| |-ParmVarDecl 0x5638940e6a10 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5638940e6b58 <col:62> "" ""
|-CXXMethodDecl 0x5638940e6c70 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5638940e6be0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5638940e6d18 <col:59> "" ""
|-CXXMethodDecl 0x5638940e6eb0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5638940e6da0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5638940e6e18 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5638940e6f60 <col:63> "" ""
|-AccessSpecDecl 0x5638940e6fd0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5638940e6ff8 prev 0x5638940dc200 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5638940e70f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5638940e71e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5638940e7308 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5638940e7488 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5638940e7608 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5638940e7788 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5638940f85b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5638940f8e28 <col:11>
| |-CXXDestructorDecl 0x5638940f8690 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5638940f87c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5638940f87c8
| | `-ParmVarDecl 0x5638940f88d8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5638940f8978 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5638940f8978
| | `-ParmVarDecl 0x5638940f8a88 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5638940fb848 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5638940fb958 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5638940fbbd8 <col:11>
| |   `-ReturnStmt 0x5638940fbbc8 <col:11>
| |     `-UnaryOperator 0x5638940fbbb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5638940fbba0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5638940fb9c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5638940fb9c8
|   `-ParmVarDecl 0x5638940fbad8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5638940e77f0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5638940e7908 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5638940e79a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5638940e7a10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5638940e7a78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5638940e7ae0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5638940e7b40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5638940e7c00 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5638940e7c60 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5638940e7cc0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5638940f84c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5638940e79a8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5638940f8e38 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5638940f8e90 <col:12>
| |-CXXConstructorDecl 0x5638940f8af8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5638940f8af8
| | `-ParmVarDecl 0x5638940f8c08 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5638940f8ca8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5638940f8ca8
| | `-ParmVarDecl 0x5638940f8db8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5638940faf30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5638940e7d38 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5638940e7d98 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5638940e7e00 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5638940e7e68 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5638940e7ed0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5638940e7f38 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5638940e7f98 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5638940e7ff8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5638940e8060 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5638940e80e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5638940e7d38 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5638940f8460 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5638940e7f98 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5638940f8ea0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5638940f8f00 <col:21, line:755:5>
|-CXXConstructorDecl 0x5638940e8288 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5638940e81c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5638940e8380 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5638940e8568 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5638940e8470 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5638940e8838 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5638940e8620 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5638940e8698 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5638940e8710 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940e8a58 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5638940e8908 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5638940e8980 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5638940f1038 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5638940e8b18 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5638940e8b90 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5638940e8c08 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5638940f1190 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5638940f1100 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940f12d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5638940f1248 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5638940f13d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638940f8fa0 prev 0x5638940d5860 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5638940f90d8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5638940f9168 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5638940f9210 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5638940f92b0 <col:20>
| `-OptimizeNoneAttr 0x5638940f9308 <col:30>
|-CXXMethodDecl 0x5638940f9358 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5638940f93f8 <col:20>
| `-OptimizeNoneAttr 0x5638940f9450 <col:30>
|-CXXMethodDecl 0x5638940f94a0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5638940f9568 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5638940f9630 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5638940f9748 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5638940f9810 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5638940f98b0 <col:20>
| `-OptimizeNoneAttr 0x5638940f9908 <col:30>
|-CXXMethodDecl 0x5638940f9978 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5638940f9a18 <col:20>
| `-OptimizeNoneAttr 0x5638940f9a70 <col:30>
|-CXXMethodDecl 0x5638940f9b18 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5638940f9bb8 <col:20>
| `-OptimizeNoneAttr 0x5638940f9c10 <col:30>
|-CXXMethodDecl 0x5638940f9c60 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5638940f9d78 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5638940f9e98 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5638940f9fb8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5638940fa080 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5638940fa120 <col:62> "" ""
|-AccessSpecDecl 0x5638940fa190 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5638940fa1f0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5638940fade8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5638940fb010 <col:29, col:31>
|-CXXMethodDecl 0x5638940fa2b8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5638940fa3f8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5638940fa368 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5638940fa4f0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5638940fb020 <col:23, col:25>
|-CXXMethodDecl 0x5638940fa6a8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5638940fa5e0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5638940fa978 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5638940fa760 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5638940fa7d8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5638940fa850 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5638940fab08 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5638940faa40 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5638940fac00 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5638940fac68 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5638940fac68
  `-ParmVarDecl 0x5638940fad78 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893e43538 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563893e43658 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x563893e43720 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x563893f13cf0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563893f19008 <col:8>
|-CXXConstructorDecl 0x563893f13df8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x563893f13df8
| `-ParmVarDecl 0x563893f13f08 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x563893f13fa8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563893f140b8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x563893e43720 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x563893f19220 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x563893f191f0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x563893e43720
| |     `-CXXStaticCastExpr 0x563893f191c0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x563893f19190 <col:8> 'in_addr' lvalue ParmVar 0x563893f140b8 '' 'in_addr &&'
| `-CompoundStmt 0x563893f19268 <col:8>
`-CXXDestructorDecl 0x563893f194a0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563893f0c9e8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563893f0cb08 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x563893f0cbf0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x563893f0cbd0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x563893f0cb98 <col:22> 'int' 4
|-FieldDecl 0x563893f0cc98 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x563893f0cc78 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x563893f0cc40 <col:21> 'int' 4
|-FieldDecl 0x563893f0ccf8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x563893f0cd58 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x563893f0cdb8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x563893f0ce18 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x563893f0ce78 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x563893f0ced8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x563893f0cf38 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x563893f0cfa8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x563893f0d018 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638941f21e0 prev 0x5638940d5650 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5638941f22d8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5638941f2378 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5638941f23d8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5638941f2460 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5638941f24c0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5638941f2568 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5638941f2548 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5638941f2510 <col:26> 'int' 4
|-FieldDecl 0x5638941f2610 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x5638941f25f0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5638941f25b8 <col:23> 'int' 4
|-FieldDecl 0x5638941f2670 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5638941f26d0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5638941f2730 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5638941f2790 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5638941d6380 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5638941d6498 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5638941d6528 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5638941d6768 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5638941d6560 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5638941d65e0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5638941d6658 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5638941d6980 <col:81> 'const ArgContext' lvalue Var 0x5638941be638 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5638941d68c0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5638941d6830 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5638941d6ad8 <col:35, line:1261:5>
|   `-ReturnStmt 0x5638941d6ac8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5638941d6ab0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5638941d6a80 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5638941d6a68 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5638941d6a40 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5638941d6a20 <col:16, col:24> 'String' (CXXTemporary 0x5638941d6a20)
|               `-CXXConstructExpr 0x5638941d69e8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5638941d69d0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5638941d69b0 <col:23> 'bool' lvalue ParmVar 0x5638941d6830 'x' 'bool'
|-CXXConstructorDecl 0x563894232ed8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x563894232fb0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5638942330e8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5638942330e8
| `-ParmVarDecl 0x5638942331f8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x563894233298 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5638942333a8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x563894234000 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5638941d6b18 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5638941d6d78 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x563894232de8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563894233418 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x563894233418
| `-ParmVarDecl 0x563894233528 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5638942335c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5638942336d8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x563894234010 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563894233fe0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x563894233fb0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x563894233f80 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5638942336d8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x563894234080 <col:19>
`-CXXDestructorDecl 0x563894233778 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
