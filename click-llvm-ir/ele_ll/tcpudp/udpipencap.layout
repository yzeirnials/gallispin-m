
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61ea6f58 prev 0x562a61e9e6f8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61ea7050 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x562a61ea70e0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x562a61ea7158 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x562a61ea7218 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x562a61ea72e0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x562a61ea7458 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x562a61ea7390 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x562a61ea7500 <col:24>
| `-OptimizeNoneAttr 0x562a61ea7558 <col:34>
|-CXXMethodDecl 0x562a61ea75a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x562a61ea7858 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x562a61ea7650 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562a61ea76c8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x562a61ea7748 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x562a61ea7910 <line:229:7, col:14> col:7 private
|-FieldDecl 0x562a61ea7948 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x562a61ea79b0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x562a61ea7a38 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x562a61ea7d58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x562a61ea7af0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562a61ea7b68 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x562a61ea7be0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x562a61ea7c60 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x562a61ea7e70 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x562a61eae7d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562a61eae7d8
| `-ParmVarDecl 0x562a61eae8e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x562a61eae988 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562a61eae988
| `-ParmVarDecl 0x562a61eaea98 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562a61f7ac28 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e99f70 prev 0x562a61e99cf0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562a61e9a068 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x562a61e9a0f8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562a61e9a158 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x562a61e9a248 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x562a61e9a348 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x562a61e9a518 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x562a61e9a3c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x562a61e9a440 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x562a61e9a6a8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x562a61e9a5e0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x562a61e9a750 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x562a61e9a888 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x562a61e9a7c0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x562a61e9aa28 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x562a61e9a968 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x562a61e9abc8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x562a61e9ab08 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x562a61e9ac70 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x562a61e9ad70 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x562a61e9ae50 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9ad50 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x562a61e9ad30 <col:26> 'int' 1
| `-EnumConstantDecl 0x562a61e9ae00 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x562a61e9ae68 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e9ade0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x562a61e9adc0 <col:44> 'int' 2
|-CXXMethodDecl 0x562a61e9afb0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x562a61e9ae98 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x562a61e9af18 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x562a61e9b108 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x562a61e9b078 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x562a61e9b348 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x562a61e9b1c8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x562a61e9b240 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x562a61e9b3f8 <col:20>
| `-OptimizeNoneAttr 0x562a61e9b450 <col:30>
|-CXXMethodDecl 0x562a61e9b558 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x562a61e9b490 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x562a61e9b600 <col:20>
| `-OptimizeNoneAttr 0x562a61e9b658 <col:30>
|-CXXMethodDecl 0x562a61e9b6a8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x562a61e9b770 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x562a61e9b888 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x562a61e9b910 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x562a61e9b998 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562a61e9ba20 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x562a61e9baa8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562a61e9bb38 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562a61e9bbf8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x562a61e9bc80 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562a61e9bd08 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x562a61e9bd90 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562a61e9be18 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x562a61e9bea0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562a61e9bf30 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562a61e9bff0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x562a61e9c080 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562a61e9c1d0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562a61e9c138 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562a61e9c360 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x562a61e9c290 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562a61e9c610 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562a61e9c418 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562a61e9c498 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562a61e9c518 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562a61e9c6c8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562a61e9c7d0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562a61e9ca60 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9c7b0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x562a61e9c790 <col:33> 'int' 0
| |-EnumConstantDecl 0x562a61e9c860 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562a61e9ca78 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9c840 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562a61e9c820 <col:32> 'int' 20
| |-EnumConstantDecl 0x562a61e9c8f0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562a61e9ca90 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9c8d0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562a61e9c8b0 <col:38> 'int' 90
| |-EnumConstantDecl 0x562a61e9c980 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562a61e9caa8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9c960 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x562a61e9c940 <col:35> 'int' 100
| `-EnumConstantDecl 0x562a61e9ca10 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x562a61e9cac0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e9c9f0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562a61e9c9d0 <col:32> 'int' 2000
|-CXXMethodDecl 0x562a61e9cb00 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562a61e9cf40 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562a61e9cdb0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562a61e9ce28 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61e9d010 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x562a61e9d190 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x562a61e9d0c0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61e9d398 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562a61e9d248 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x562a61e9d2c0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61e9d498 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562a61e9d538 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562a61e9d600 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d690 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562a61e9d8c0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e9d670 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x562a61e9d650 <col:36> 'int' EnumConstant 0x562a61e9d600 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d6e0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d730 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d780 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d7d0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562a61e9d820 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x562a61e9d870 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562a61e9d9a8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562a61e9d8e8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x562a61e9da70 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562a61e9db30 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562a61e9dbf0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x562a61e9dcb0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x562a61e9ddc8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x562a61e9de90 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562a61e9e010 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562a61e9df40 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562a61e9e138 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562a61e9e338 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562a61e9e1e8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562a61e9e268 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x562a61eaac78 <col:54, line:127:5>
|   |-ParenExpr 0x562a61eaab28 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x562a61eaaaf8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x562a61eaa7e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562a61eaa7c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x562a61eaa7a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x562a61eaa790 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x562a61eaa760 <col:31> 'Router *' lvalue ->_router 0x562a61ea8640
|   |   |         `-CXXThisExpr 0x562a61eaa750 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562a61eaa848 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61eaa828 <col:48> 'int' 0
|   |   `-CallExpr 0x562a61eaaa58 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x562a61eaaa40 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61eaaa20 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61eaaa98 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61eaa8b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x562a61eaaab0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61eaa8d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x562a61eaaac8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61eaa910 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x562a61eaaae0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61eaaa08 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61eaa9f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61eaa9a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x562a61eaabc0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x562a61eaab58 <col:9> 'Router *' lvalue ->_router 0x562a61ea8640
|   | | `-CXXThisExpr 0x562a61eaab48 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x562a61eaaba8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562a61eaab88 <col:19> 'Router *' lvalue ParmVar 0x562a61e9e1e8 'r' 'Router *'
|   `-BinaryOperator 0x562a61eaac58 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x562a61eaabf0 <col:9> 'int' lvalue ->_eindex 0x562a61ea86a8
|     | `-CXXThisExpr 0x562a61eaabe0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x562a61eaac40 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562a61eaac20 <col:19> 'int' lvalue ParmVar 0x562a61e9e268 'eindex' 'int'
|-CXXMethodDecl 0x562a61e9e4c0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562a61e9e3f8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x562a61e9e590 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x562a61e9e658 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x562a61e9e6f8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x562a61e9e948 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x562a61e9e7c0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x562a61e9e840 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x562a61e9e9f8 <col:20>
| `-OptimizeNoneAttr 0x562a61e9ea50 <col:30>
|-CXXMethodDecl 0x562a61e9eb58 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562a61e9ea90 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x562a61e9ec00 <col:20>
| `-OptimizeNoneAttr 0x562a61e9ec58 <col:30>
|-CXXMethodDecl 0x562a61e9ed28 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562a61e9ec98 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x562a61e9edd0 <col:20>
| `-OptimizeNoneAttr 0x562a61e9ee28 <col:30>
|-CXXMethodDecl 0x562a61e9efb8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x562a61e9ee60 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x562a61e9eee0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x562a61e9f148 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562a61e9f080 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562a61e9f298 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562a61e9f208 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562a61e9f3e8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562a61e9f358 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562a61e9f538 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562a61e9f4a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562a61e9f7f8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x562a61e9f5f0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x562a61e9f670 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x562a61e9f718 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x562a61e9f8d0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x562a61e9f990 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x562a61e9fc60 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562a61e9fb10 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x562a61e9fb88 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x562a61e9fd88 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x562a61e9ff60 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x562a61e9fe40 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x562a61e9fec0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x562a61ea0148 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x562a61ea0028 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x562a61ea00a8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x562a61ea04b8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562a61ea0208 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562a61ea0280 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562a61ea0300 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562a61eaa260 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61eaa240 <col:106> 'int' 0
| `-ParmVarDecl 0x562a61ea0378 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa298 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa278 <col:126> 'int' 0
|-CXXMethodDecl 0x562a61ea0858 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562a61ea0588 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562a61ea0620 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562a61ea06a0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x562a61ea0718 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa2d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa2b0 <col:114> 'int' 0
|-CXXMethodDecl 0x562a61ea0be8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562a61ea0930 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x562a61ea09a8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562a61ea0a28 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x562a61eaa2e8 <col:96> 'int' 0
| `-ParmVarDecl 0x562a61ea0aa0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa328 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa308 <col:116> 'int' 0
|-CXXMethodDecl 0x562a61ea0f68 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562a61ea0cb8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562a61ea0d30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea0db0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562a61eaa360 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61eaa340 <col:109> 'int' 0
| `-ParmVarDecl 0x562a61ea0e28 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa398 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa378 <col:129> 'int' 0
|-CXXMethodDecl 0x562a61ea12e8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562a61ea1038 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562a61ea10b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea1130 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x562a61ea11a8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa3d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa3b0 <col:117> 'int' 0
|-CXXMethodDecl 0x562a61ea1678 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562a61ea13c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea1438 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea14b8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x562a61eaa3e8 <col:99> 'int' 0
| `-ParmVarDecl 0x562a61ea1530 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562a61eaa428 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562a61eaa408 <col:119> 'int' 0
|-CXXMethodDecl 0x562a61ea1a98 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x562a61ea1748 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562a61ea17c8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562a61ea1840 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea18c0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562a61eaa460 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61eaa440 <col:108> 'int' 0
| `-ParmVarDecl 0x562a61ea1940 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x562a61eaa498 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x562a61eaa478 <col:141> 'int' 0
|-CXXMethodDecl 0x562a61ea1eb8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562a61ea1b70 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562a61ea1bf0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562a61ea1c68 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea1ce8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x562a61ea1d68 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562a61eaa4b0 <col:121> 'int' 0
|-CXXMethodDecl 0x562a61ea22e8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562a61ea1f98 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x562a61ea2018 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x562a61ea2090 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea2110 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x562a61eaa4d0 <col:98> 'int' 0
| `-ParmVarDecl 0x562a61ea2190 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562a61eaa4f0 <col:123> 'int' 0
|-CXXMethodDecl 0x562a61ea25b0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x562a61ea23c0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562a61ea2440 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x562a61ea24c0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x562a61eaa510 <col:80> 'int' 0
|-EnumDecl 0x562a61ea2668 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x562a61ea2770 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562a61ea2a00 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61ea2750 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x562a61ea2730 <col:42> 'int' 1
| |-EnumConstantDecl 0x562a61ea2800 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562a61ea2a18 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61ea27e0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x562a61ea27c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x562a61ea2890 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562a61ea2a30 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61ea2870 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x562a61ea2850 <col:44> 'int' 4
| |-EnumConstantDecl 0x562a61ea2920 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562a61ea2a48 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61ea2900 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x562a61ea28e0 <col:36> 'int' 7
| `-EnumConstantDecl 0x562a61ea29b0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x562a61ea2a60 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61ea2990 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x562a61ea2970 <col:34> 'int' 6
|-CXXMethodDecl 0x562a61ea2d18 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x562a61ea2a88 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x562a61ea2b28 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x562a61ea2ba8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x562a61ea2c20 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x562a61eaa5c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x562a61eaa5b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x562a61eaa598 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x562a61eaa578 <col:98, col:105> 'String' (CXXTemporary 0x562a61eaa578)
|           `-CXXTemporaryObjectExpr 0x562a61eaa540 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x562a61ea2fb8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x562a61ea2de8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562a61ea2e60 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x562a61ea2ed8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562a61eaa678 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562a61eaa660 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562a61eaa648 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562a61eaa628 <col:94, col:101> 'String' (CXXTemporary 0x562a61eaa628)
| |         `-CXXTemporaryObjectExpr 0x562a61eaa5f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x562a61eaae60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x562a61eaadd8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x562a61eaada8 <col:9> '<bound member function type>' ->add_task_handlers 0x562a61ea2d18
|     | `-CXXThisExpr 0x562a61eaad98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562a61eaae18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562a61eaad18 <col:27> 'Task *' lvalue ParmVar 0x562a61ea2de8 'task' 'Task *'
|     |-ImplicitCastExpr 0x562a61eaae30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x562a61eaad38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x562a61ea2e60 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x562a61eaae48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562a61eaad58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562a61ea29b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562a61eaad78 <col:62> 'const String' lvalue ParmVar 0x562a61ea2ed8 'prefix' 'const String &'
|-CXXMethodDecl 0x562a61ea31c8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x562a61ea3080 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562a61ea30f8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562a61eaa728 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562a61eaa710 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562a61eaa6f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562a61eaa6d8 <col:70, col:77> 'String' (CXXTemporary 0x562a61eaa6d8)
| |         `-CXXTemporaryObjectExpr 0x562a61eaa6a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x562a61eab038 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x562a61eaafb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x562a61eaaf80 <col:9> '<bound member function type>' ->add_task_handlers 0x562a61ea2d18
|     | `-CXXThisExpr 0x562a61eaaf70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562a61eaaff0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562a61eaaef0 <col:27> 'Task *' lvalue ParmVar 0x562a61ea3080 'task' 'Task *'
|     |-ImplicitCastExpr 0x562a61eab008 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x562a61eaaf10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x562a61eab020 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562a61eaaf30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562a61ea29b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562a61eaaf50 <col:57> 'const String' lvalue ParmVar 0x562a61ea30f8 'prefix' 'const String &'
|-CXXMethodDecl 0x562a61ea34a8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x562a61ea3290 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea3310 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea3388 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x562a61ea3758 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x562a61ea3578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea35f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea3678 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x562a61ea3a48 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562a61ea3828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea38a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea3920 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x562a61ea3cf8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x562a61ea3b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea3b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea3c18 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x562a61ea3fa8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x562a61ea3dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea3e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea3ec8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x562a61ea4258 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x562a61ea4078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea40f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea4170 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x562a61ea4508 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x562a61ea4328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea43a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea4428 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x562a61ea4818 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x562a61ea4630 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea46b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea4730 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x562a61ea4af8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x562a61ea48e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea4968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea4a10 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x562a61ea4dd8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x562a61ea4bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea4c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea4cf0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x562a61ea5040 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562a61ea4ea8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562a61ea4f28 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562a61ea4fa0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x562a61ea52e8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x562a61ea5110 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562a61ea5190 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562a61ea5208 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x562a61ea5598 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x562a61ea53b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea5438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea54b8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x562a61ea5848 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x562a61ea5668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea56e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea5760 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x562a61ea5af8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x562a61ea5918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea5998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea5a10 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x562a61ea5dc8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x562a61ea5bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea5c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562a61ea5ce8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x562a61ea60f8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x562a61ea5e98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562a61ea5f18 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x562a61ea5f90 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x562a61ea6008 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562a61eaa740 <col:93> 'bool' false
|-CXXMethodDecl 0x562a61ea62e0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562a61ea61c8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x562a61ea6248 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x562a61ea64b8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562a61ea63a0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x562a61ea6420 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x562a61ea6798 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562a61ea6578 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x562a61ea65f0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x562a61ea6670 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x562a61ea66e8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x562a61ea6a88 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562a61ea6868 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x562a61ea68e0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x562a61ea6960 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x562a61ea69d8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x562a61ea6cc0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x562a61ea6b60 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x562a61ea6be0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x562a61ea6ea8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x562a61ea6d88 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x562a61ea6e08 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x562a61ea6f58 prev 0x562a61e9e6f8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562a61ea7050 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x562a61ea70e0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x562a61ea7158 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x562a61ea7218 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x562a61ea72e0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x562a61ea7458 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x562a61ea7390 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x562a61ea7500 <col:24>
| | `-OptimizeNoneAttr 0x562a61ea7558 <col:34>
| |-CXXMethodDecl 0x562a61ea75a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x562a61ea7858 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x562a61ea7650 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562a61ea76c8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x562a61ea7748 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x562a61ea7910 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x562a61ea7948 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x562a61ea79b0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x562a61ea7a38 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x562a61ea7d58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x562a61ea7af0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562a61ea7b68 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x562a61ea7be0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x562a61ea7c60 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x562a61ea7e70 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x562a61eae7d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562a61eae7d8
| | `-ParmVarDecl 0x562a61eae8e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x562a61eae988 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562a61eae988
| | `-ParmVarDecl 0x562a61eaea98 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562a61f7ac28 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562a61ea7ee8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x562a61ea7f88 <col:38> "" ""
|-CXXMethodDecl 0x562a61ea8018 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x562a61ea80b8 <col:44> "" ""
|-AccessSpecDecl 0x562a61ea8128 <line:260:3, col:10> col:3 private
|-EnumDecl 0x562a61ea8150 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x562a61ea8250 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x562a61ea82a0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61ea8230 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x562a61ea8210 <col:27> 'int' 4
|-FieldDecl 0x562a61ea8358 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x562a61ea8508 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x562a61ea85c0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x562a61ea8640 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x562a61ea86a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x562a61ea87f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x562a61ea8738 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x562a61ea89a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x562a61ea88b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x562a61ea8b88 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x562a61ea8a68 <col:20> col:23 'int'
| `-ParmVarDecl 0x562a61ea8ae8 <col:25> col:28 'int'
|-CXXMethodDecl 0x562a61ea8e30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x562a61ea8c50 <col:23> col:26 'int'
| |-ParmVarDecl 0x562a61ea8cd0 <col:28> col:31 'int'
| `-ParmVarDecl 0x562a61ea8d48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x562a61ea8ee8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x562a61ea8fb0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x562a61ea9000 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x562a61ea9050 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x562a61ea9230 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x562a61ea90e0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x562a61ea9158 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61ea94d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x562a61ea92f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x562a61ea9378 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x562a61ea93f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x562a61ea96f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x562a61ea95a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x562a61ea9628 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x562a61ea9a30 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x562a61ea97b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x562a61ea9838 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x562a61ea98b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x562a61ea9930 <col:57> col:60 'int'
|-CXXMethodDecl 0x562a61ea9c18 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562a61ea9b00 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x562a61ea9b80 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x562a61ea9d68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x562a61ea9cd8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x562a61eaa0e8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x562a61ea9e28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x562a61ea9ea8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x562a61ea9f20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x562a61ea9fa0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x562a61eaa200 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class UDPIPEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _saddr
       108 |     in_addr_t s_addr
       112 |   struct in_addr _daddr
       112 |     in_addr_t s_addr
       116 |   uint16_t _sport
       118 |   uint16_t _dport
       120 |   _Bool _cksum
       121 |   _Bool _use_dst_anno
       124 |   class atomic_uint32_t _id
       124 |     uint32_t _val
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61b5bfc8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61b5c0e8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x562a61b5c1b0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x562a61c9c410 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562a61ca1308 <col:8>
|-CXXConstructorDecl 0x562a61c9c518 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x562a61c9c518
| `-ParmVarDecl 0x562a61c9c628 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x562a61c9c6c8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61c9c7d8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x562a61b5c1b0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61ca1520 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562a61ca14f0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x562a61b5c1b0
| |     `-CXXStaticCastExpr 0x562a61ca14c0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x562a61ca1490 <col:8> 'in_addr' lvalue ParmVar 0x562a61c9c7d8 '' 'in_addr &&'
| `-CompoundStmt 0x562a61ca1568 <col:8>
`-CXXDestructorDecl 0x562a61ca17a0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61c5ad28 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61c5ae48 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x562a61c5aed8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x562a61c5afa8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x562a61c5b090 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61c5b2a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562a61c5b150 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5b458 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562a61c5b360 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562a61c5b5a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562a61c5b510 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562a61c5b6e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562a61c5b658 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5b830 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562a61c5b7a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5b8f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x562a61c5ba40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x562a61c5b9b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x562a61c5bb08 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x562a61c5bc50 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x562a61c5bbc0 <col:28> col:31 'int'
|-CXXMethodDecl 0x562a61c5bdc8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x562a61c5bd08 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5bf10 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x562a61c5be80 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5bfd8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x562a61c5c198 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562a61c5c088 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562a61c5c100 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5c3e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562a61c5c258 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61c5c2d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562a61c5c498 <col:86> "" ""
|-CXXMethodDecl 0x562a61c5c708 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x562a61c5c578 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x562a61c5c5f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5c8b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x562a61c5c7c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x562a61c5ca68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x562a61c5c970 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x562a61c5cd38 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562a61c5cb20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x562a61c5cb98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562a61c5cc10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5d018 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562a61c5ce00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x562a61c5ce78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61c5cef0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562a61c5d0d0 <col:115> "" ""
|-AccessSpecDecl 0x562a61c5d140 <line:84:3, col:10> col:3 private
|-FieldDecl 0x562a61c5d178 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61c5d628 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562a61c5d628
| `-ParmVarDecl 0x562a61c5d738 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x562a61c5d7d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562a61c5d7d8
| `-ParmVarDecl 0x562a61c5d8e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x562a61c931a8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562a61e81050 <col:7>
|-CXXConstructorDecl 0x562a61c93280 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562a61c93280
| `-ParmVarDecl 0x562a61c93398 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x562a61c93408 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562a61c93408
| `-ParmVarDecl 0x562a61c93518 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x562a61e86460 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61eb1c68 <../elements/tcpudp/udpipencap.hh:55:1, line:86:1> line:55:7 class UDPIPEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x562a61eb1dc8 <col:1, col:7> col:7 implicit referenced class UDPIPEncap
|-AccessSpecDecl 0x562a61eb1e58 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x562a61eb1ee0 <line:57:5, col:16> col:5 UDPIPEncap 'void ()'
|-CXXDestructorDecl 0x562a61eb1fd0 <line:58:5, col:17> col:5 ~UDPIPEncap 'void ()' noexcept-unevaluated 0x562a61eb1fd0
| `-Overrides: [ 0x562a61e9a248 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x562a61eb2100 <line:60:5, col:59> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x562a61e9b6a8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x562a61eb3148 <col:36, col:59>
|   `-ReturnStmt 0x562a61eb3138 <col:38, col:45>
|     `-ImplicitCastExpr 0x562a61eb3120 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562a61eb30f8 <col:45> 'const char [11]' lvalue "UDPIPEncap"
|-CXXMethodDecl 0x562a61eb21c8 <line:61:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x562a61e9b770 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x562a61eb31a8 <col:36, col:56>
|   `-ReturnStmt 0x562a61eb3198 <col:38, col:45>
|     `-ImplicitCastExpr 0x562a61eb3180 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x562a61eb3160 <col:45> 'const char []' lvalue Var 0x562a61e9ba20 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x562a61eb2290 <line:62:5, col:45> col:17 flags 'const char *() const'
| |-Overrides: [ 0x562a61e9c080 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x562a61eb3208 <col:31, col:45>
|   `-ReturnStmt 0x562a61eb31f8 <col:33, col:40>
|     `-ImplicitCastExpr 0x562a61eb31e0 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562a61eb31c0 <col:40> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x562a61eb2560 <line:64:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x562a61e9cf40 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x562a61eb2410 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x562a61eb2488 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x562a61eb2630 <line:65:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x562a61e9f990 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x562a61eb3240 <col:39, col:54>
|   `-ReturnStmt 0x562a61eb3230 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x562a61eb3220 <col:48> 'bool' true
|-CXXMethodDecl 0x562a61eb26f0 <line:66:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x562a61e9d010 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x562a61eb2830 <line:68:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x562a61e9a888 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x562a61eb27a0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x562a61eb28d8 <line:70:3, col:10> col:3 private
|-FieldDecl 0x562a61eb2920 <line:72:5, col:20> col:20 _saddr 'struct in_addr':'in_addr'
|-FieldDecl 0x562a61eb2990 <line:73:5, col:20> col:20 _daddr 'struct in_addr':'in_addr'
|-FieldDecl 0x562a61eb29f0 <line:74:5, col:14> col:14 _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61eb2a50 <line:75:5, col:14> col:14 _dport 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61eb2ab0 <line:76:5, col:10> col:10 _cksum 'bool'
|-FieldDecl 0x562a61eb2b10 <line:77:5, col:10> col:10 _use_dst_anno 'bool'
|-FieldDecl 0x562a61eb2b70 <line:82:5, col:21> col:21 referenced _id 'atomic_uint32_t'
|-CXXMethodDecl 0x562a61eb2ce8 <line:84:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562a61eb2bd0 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x562a61eb2c50 <col:43, col:48> col:49 'void *'
|-CXXConstructorDecl 0x562a61eb2dc8 <line:55:7> col:7 implicit UDPIPEncap 'void (const UDPIPEncap &)' inline default_delete noexcept-unevaluated 0x562a61eb2dc8
| `-ParmVarDecl 0x562a61eb2ed8 <col:7> col:7 'const UDPIPEncap &'
`-CXXMethodDecl 0x562a61eb2f78 <col:7> col:7 implicit operator= 'UDPIPEncap &(const UDPIPEncap &)' inline default_delete noexcept-unevaluated 0x562a61eb2f78
  `-ParmVarDecl 0x562a61eb3088 <col:7> col:7 'const UDPIPEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.UDPIPEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, i8, %class.atomic_uint32_t }
  NonVirtualBaseLLVMType:%class.UDPIPEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, i8, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61c6f5b0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562a61c6f6c8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x562a61c6f768 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x562a61c6f7c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x562a61c6f828 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x562a61c6f8d8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61c6fbe0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61c6fcf8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x562a61c6fda0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x562a61c6fe08 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x562a61c6fe98 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x562a61c72430 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562a61c74a78 <col:12>
|-CXXConstructorDecl 0x562a61c72538 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61c72648 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562a61c6fda0 'data' 'const char *'
| | `-ImplicitCastExpr 0x562a61c77000 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x562a61c76fd0 <col:12> 'const char *const' lvalue .data 0x562a61c6fda0
| |     `-DeclRefExpr 0x562a61c76fb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562a61c6fe08 'length' 'int'
| | `-ImplicitCastExpr 0x562a61c77090 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562a61c77060 <col:12> 'const int' lvalue .length 0x562a61c6fe08
| |     `-DeclRefExpr 0x562a61c77040 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562a61c6fe98 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x562a61c77120 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x562a61c770f0 <col:12> 'String::memo_t *const' lvalue .memo 0x562a61c6fe98
| |     `-DeclRefExpr 0x562a61c770d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| `-CompoundStmt 0x562a61c77178 <col:12>
|-CXXConstructorDecl 0x562a61c748f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562a61c748f8
| `-ParmVarDecl 0x562a61c74a08 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x562a61c7bec0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562a61c858c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61c859d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x562a61c85ef0 <col:12>
|   |-BinaryOperator 0x562a61c85d08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562a61c85cc0 <col:12> 'const char *' lvalue ->data 0x562a61c6fda0
|   | | `-CXXThisExpr 0x562a61c85cb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562a61c85cf0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x562a61c85c80 <col:12> 'const char *const' lvalue .data 0x562a61c6fda0
|   |     `-DeclRefExpr 0x562a61c85c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562a61c85dd0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x562a61c85d88 <col:12> 'int' lvalue ->length 0x562a61c6fe08
|   | | `-CXXThisExpr 0x562a61c85d78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562a61c85db8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x562a61c85d48 <col:12> 'const int' lvalue .length 0x562a61c6fe08
|   |     `-DeclRefExpr 0x562a61c85d28 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562a61c85e98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x562a61c85e50 <col:12> 'String::memo_t *' lvalue ->memo 0x562a61c6fe98
|   | | `-CXXThisExpr 0x562a61c85e40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562a61c85e80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x562a61c85e10 <col:12> 'String::memo_t *const' lvalue .memo 0x562a61c6fe98
|   |     `-DeclRefExpr 0x562a61c85df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x562a61c85ee0 <col:12>
|     `-UnaryOperator 0x562a61c85ec8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61c85eb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x562a61c85a48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562a61c85a48
  `-ParmVarDecl 0x562a61c85b58 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61c65a20 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562a61c65b38 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x562a61c65bc8 <col:16, col:22> col:16 public
|-TypedefDecl 0x562a61c65c08 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x562a61935fd0 'const char *'
|   `-QualType 0x562a61935521 'const char' const
|     `-BuiltinType 0x562a61935520 'char'
|-TypedefDecl 0x562a61c65c90 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x562a61c65c60 'String::const_iterator' sugar
|   |-Typedef 0x562a61c65c08 'const_iterator'
|   `-PointerType 0x562a61935fd0 'const char *'
|     `-QualType 0x562a61935521 'const char' const
|       `-BuiltinType 0x562a61935520 'char'
|-TypedefDecl 0x562a61c65e00 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x562a61c65d70 'int (String::*)() const'
|   |-RecordType 0x562a61c65ab0 'String'
|   | `-CXXRecord 0x562a61c65a20 'String'
|   `-ParenType 0x562a61c65d10 'int () const' sugar
|     `-FunctionProtoType 0x562a61c3b850 'int () const' const cdecl
|       `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61c65e68 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x562a61a8aae0 'int64_t' sugar
|   |-Typedef 0x562a6199e390 'int64_t'
|   `-TypedefType 0x562a61977630 '__int64_t' sugar
|     |-Typedef 0x562a61977208 '__int64_t'
|     `-BuiltinType 0x562a619355a0 'long'
|-TypedefDecl 0x562a61c65ed0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x562a61a8aa00 'uint64_t' sugar
|   |-Typedef 0x562a6199e530 'uint64_t'
|   `-TypedefType 0x562a619776c0 '__uint64_t' sugar
|     |-Typedef 0x562a61977278 '__uint64_t'
|     `-BuiltinType 0x562a61935640 'unsigned long'
|-TypedefDecl 0x562a61c65f60 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x562a61c65f30 'String::intmax_t' sugar
|   |-Typedef 0x562a61c65e68 'intmax_t'
|   `-TypedefType 0x562a61a8aae0 'int64_t' sugar
|     |-Typedef 0x562a6199e390 'int64_t'
|     `-TypedefType 0x562a61977630 '__int64_t' sugar
|       |-Typedef 0x562a61977208 '__int64_t'
|       `-BuiltinType 0x562a619355a0 'long'
|-TypedefDecl 0x562a61c65ff0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x562a61c65fc0 'String::uintmax_t' sugar
|   |-Typedef 0x562a61c65ed0 'uintmax_t'
|   `-TypedefType 0x562a61a8aa00 'uint64_t' sugar
|     |-Typedef 0x562a6199e530 'uint64_t'
|     `-TypedefType 0x562a619776c0 '__uint64_t' sugar
|       |-Typedef 0x562a61977278 '__uint64_t'
|       `-BuiltinType 0x562a61935640 'unsigned long'
|-CXXConstructorDecl 0x562a61c660b0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x562a61c66258 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x562a61c66198 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x562a61c66408 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x562a61c66348 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x562a61c66560 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x562a61c664d0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x562a61c66778 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x562a61c66628 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x562a61c666a8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x562a61c66998 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562a61c66848 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x562a61c668c8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x562a61c66bb8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562a61c66a68 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x562a61c66ae8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x562a61c66dd8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562a61c66c88 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x562a61c66d08 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x562a61c66f68 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x562a61c66ea0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x562a61c670e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x562a61c67028 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x562a61c67278 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x562a61c671b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x562a61c673d0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x562a61c67340 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x562a61c67528 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x562a61c67498 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x562a61c67680 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x562a61c675f0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x562a61c67808 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x562a61c67748 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x562a61c67998 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x562a61c678d0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x562a61c67b28 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x562a61c67a60 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x562a61c67cb8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x562a61c67bf0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x562a61c67db0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x562a61c67ed8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x562a61c68058 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x562a61c67f90 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x562a61c681a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x562a61c68118 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x562a61c68250 <col:63> "" ""
|-CXXMethodDecl 0x562a61c68398 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x562a61c682d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x562a61c685a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x562a61c68458 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x562a61c684d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x562a61c687c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x562a61c68670 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x562a61c686f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x562a61c68aa8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x562a61c68888 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x562a61c68908 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x562a61c71f00 <col:55> 'int' 10
| `-ParmVarDecl 0x562a61c68980 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562a61c71f20 <col:76> 'bool' true
|-CXXMethodDecl 0x562a61c68d88 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x562a61c68b70 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x562a61c68bf0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x562a61c71f30 <col:56> 'int' 10
| `-ParmVarDecl 0x562a61c68c68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562a61c71f50 <col:77> 'bool' true
|-CXXMethodDecl 0x562a61c68e90 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x562a61c68f58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x562a61c69020 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x562a61c690c0 <col:20>
| `-OptimizeNoneAttr 0x562a61c69118 <col:30>
|-CXXConversionDecl 0x562a61c69208 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x562a61c692d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x562a61c69398 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x562a61c69488 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562a61c69548 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562a61c6a728 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x562a61c6a660 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x562a61c6a878 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x562a61c6a7e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x562a61c6a968 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x562a61c6aa28 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x562a61c6ac78 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x562a61c6aae0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x562a61c6ab60 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x562a61c6aed8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x562a61c6ad40 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x562a61c6adc0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x562a61c6afa8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61c6b1b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x562a61c6b060 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x562a61c6b0e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x562a61c6b3d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x562a61c6b280 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x562a61c6b300 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x562a61c6b568 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x562a61c6b4a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x562a61c6b658 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x562a61c6b7c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x562a61c6b708 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562a61c6b9d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x562a61c6b888 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562a61c6b908 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562a61c6bbf0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x562a61c6ba98 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x562a61c6bb10 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x562a61c6bd80 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x562a61c6bcb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562a61c6bfa0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x562a61c6be40 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x562a61c6bec0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562a61c6c0f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x562a61c6c060 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x562a61c6c2c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x562a61c6c1b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562a61c6c230 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x562a61c6c418 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x562a61c6c388 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x562a61c6c630 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x562a61c6c4d0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x562a61c6c550 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x562a61c71f60 <col:39> 'int' 0
|-CXXMethodDecl 0x562a61c6c850 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x562a61c6c6f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x562a61c6c770 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x562a61c71f80 <col:48> 'int' 0
|-CXXMethodDecl 0x562a61c6ca30 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x562a61c6c910 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x562a61c6c990 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x562a61c71fa0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x562a61c6cb00 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x562a61c6cbc0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x562a61c6cc80 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x562a61c6cd40 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x562a61c6ce00 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x562a61c6cfa8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x562a61c6ceb0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x562a61c6d128 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x562a61c6d060 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x562a61c6d2a8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x562a61c6d1e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x562a61c6d428 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x562a61c6d360 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x562a61c6d570 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x562a61c6d4e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562a61c6d6c0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x562a61c6d630 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x562a61c6d898 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x562a61c6d780 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562a61c6d800 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562a61c6da78 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562a61c6d960 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x562a61c6d9e0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x562a61c6dbc8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x562a61c6db38 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x562a61c6ddd8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x562a61c6dc88 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x562a61c6dd08 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x562a61c6df38 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x562a61c6dea0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562a61c6e090 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x562a61c6dff8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x562a61c6e138 <col:57> "" ""
|-CXXMethodDecl 0x562a61c6e248 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x562a61c6e1b8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x562a61c6e398 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x562a61c6e308 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x562a61c6e518 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x562a61c6e450 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x562a61c6e6e0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x562a61c6e7a0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x562a61c6e860 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x562a61c6e900 <col:49> "" ""
|-CXXMethodDecl 0x562a61c6e990 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x562a61c6ea50 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x562a61c6eb40 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x562a61c6ec08 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x562a61c6ecc8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x562a61c6ed88 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x562a61c6ee80 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x562a61c6ef48 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x562a61c6f010 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x562a61c6f1e8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x562a61c6f0c8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x562a61c6f148 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x562a61c6f410 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x562a61c6f2b0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x562a61c6f330 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x562a61c6f520 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x562a61c6f588 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x562a61c6f5b0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x562a61c6f6c8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x562a61c6f768 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x562a61c6f7c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x562a61c6f828 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x562a61c6f8d8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x562a61c6f940 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x562a61c6fb78 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x562a61c6fbc8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61c6fb58 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x562a61c6fa68 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x562a61c6fa10 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x562a61c6fa50 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x562a61c6fa30 <col:32> 'int' 8
|-CXXRecordDecl 0x562a61c6fbe0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562a61c6fcf8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x562a61c6fda0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x562a61c6fe08 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x562a61c6fe98 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x562a61c72430 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562a61c74a78 <col:12>
| |-CXXConstructorDecl 0x562a61c72538 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562a61c72648 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562a61c6fda0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x562a61c77000 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x562a61c76fd0 <col:12> 'const char *const' lvalue .data 0x562a61c6fda0
| | |     `-DeclRefExpr 0x562a61c76fb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562a61c6fe08 'length' 'int'
| | | `-ImplicitCastExpr 0x562a61c77090 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562a61c77060 <col:12> 'const int' lvalue .length 0x562a61c6fe08
| | |     `-DeclRefExpr 0x562a61c77040 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562a61c6fe98 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x562a61c77120 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x562a61c770f0 <col:12> 'String::memo_t *const' lvalue .memo 0x562a61c6fe98
| | |     `-DeclRefExpr 0x562a61c770d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c72648 '' 'const String::rep_t &'
| | `-CompoundStmt 0x562a61c77178 <col:12>
| |-CXXConstructorDecl 0x562a61c748f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562a61c748f8
| | `-ParmVarDecl 0x562a61c74a08 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x562a61c7bec0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x562a61c858c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562a61c859d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x562a61c85ef0 <col:12>
| |   |-BinaryOperator 0x562a61c85d08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x562a61c85cc0 <col:12> 'const char *' lvalue ->data 0x562a61c6fda0
| |   | | `-CXXThisExpr 0x562a61c85cb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562a61c85cf0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x562a61c85c80 <col:12> 'const char *const' lvalue .data 0x562a61c6fda0
| |   |     `-DeclRefExpr 0x562a61c85c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562a61c85dd0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x562a61c85d88 <col:12> 'int' lvalue ->length 0x562a61c6fe08
| |   | | `-CXXThisExpr 0x562a61c85d78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562a61c85db8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x562a61c85d48 <col:12> 'const int' lvalue .length 0x562a61c6fe08
| |   |     `-DeclRefExpr 0x562a61c85d28 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562a61c85e98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x562a61c85e50 <col:12> 'String::memo_t *' lvalue ->memo 0x562a61c6fe98
| |   | | `-CXXThisExpr 0x562a61c85e40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562a61c85e80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x562a61c85e10 <col:12> 'String::memo_t *const' lvalue .memo 0x562a61c6fe98
| |   |     `-DeclRefExpr 0x562a61c85df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562a61c859d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x562a61c85ee0 <col:12>
| |     `-UnaryOperator 0x562a61c85ec8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562a61c85eb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x562a61c85a48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562a61c85a48
|   `-ParmVarDecl 0x562a61c85b58 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x562a61c6ff10 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x562a61c70158 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x562a61c6ff78 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x562a61c6fff8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x562a61c70070 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x562a61c723f0 <col:79, line:261:5>
|   |-BinaryOperator 0x562a61c72068 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562a61c72000 <col:2, col:5> 'const char *' lvalue .data 0x562a61c6fda0
|   | | `-MemberExpr 0x562a61c71fd0 <col:2> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|   | |   `-CXXThisExpr 0x562a61c71fc0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562a61c72050 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562a61c72030 <col:12> 'const char *' lvalue ParmVar 0x562a61c6ff78 'data' 'const char *'
|   |-BinaryOperator 0x562a61c72130 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x562a61c720c8 <col:2, col:5> 'int' lvalue .length 0x562a61c6fe08
|   | | `-MemberExpr 0x562a61c72098 <col:2> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|   | |   `-CXXThisExpr 0x562a61c72088 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562a61c72118 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x562a61c720f8 <col:14> 'int' lvalue ParmVar 0x562a61c6fff8 'length' 'int'
|   `-IfStmt 0x562a61c723d8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x562a61c72250 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562a61c72238 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x562a61c72218 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x562a61c721f8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x562a61c72190 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|     |       | `-MemberExpr 0x562a61c72160 <col:7> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|     |       |   `-CXXThisExpr 0x562a61c72150 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x562a61c721e0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x562a61c721c0 <col:17> 'String::memo_t *' lvalue ParmVar 0x562a61c70070 'memo' 'String::memo_t *'
|     `-CallExpr 0x562a61c723b0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x562a61c72398 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562a61c722a0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x562a61c5e698 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x562a61c72308 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562a61c6f768
|         `-ImplicitCastExpr 0x562a61c722f0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x562a61c722d0 <col:27> 'String::memo_t *' lvalue ParmVar 0x562a61c70070 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x562a61c70408 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x562a61c70228 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x562a61c702a8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x562a61c70320 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x562a61c6ff10 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x562a61c74a88 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x562a61c74c18 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x562a61c74b80 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x562a61c74af0 <col:2> '<bound member function type>' ->assign_memo 0x562a61c70158
|     | `-ImplicitCastExpr 0x562a61c74bb8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x562a61c74ae0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x562a61c74bd0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x562a61c74b20 <col:14> 'const char *' lvalue ParmVar 0x562a61c70228 'data' 'const char *'
|     |-ImplicitCastExpr 0x562a61c74be8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x562a61c74b40 <col:20> 'int' lvalue ParmVar 0x562a61c702a8 'length' 'int'
|     `-ImplicitCastExpr 0x562a61c74c00 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x562a61c74b60 <col:28> 'String::memo_t *' lvalue ParmVar 0x562a61c70320 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x562a61c70598 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x562a61c704d8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x562a61c74e70 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x562a61c74df0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x562a61c74c40 <col:2> '<bound member function type>' ->assign_memo 0x562a61c70158
|     | `-CXXThisExpr 0x562a61c74c30 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x562a61c74e28 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x562a61c74cc0 <col:14, col:19> 'const char *' lvalue .data 0x562a61c6fda0
|     |   `-MemberExpr 0x562a61c74c90 <col:14, col:16> 'String::rep_t' lvalue ._r 0x562a61c6ff10
|     |     `-DeclRefExpr 0x562a61c74c70 <col:14> 'const String' lvalue ParmVar 0x562a61c704d8 'x' 'const String &'
|     |-ImplicitCastExpr 0x562a61c74e40 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x562a61c74d40 <col:25, col:30> 'int' lvalue .length 0x562a61c6fe08
|     |   `-MemberExpr 0x562a61c74d10 <col:25, col:27> 'String::rep_t' lvalue ._r 0x562a61c6ff10
|     |     `-DeclRefExpr 0x562a61c74cf0 <col:25> 'const String' lvalue ParmVar 0x562a61c704d8 'x' 'const String &'
|     `-ImplicitCastExpr 0x562a61c74e58 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x562a61c74dc0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|         `-MemberExpr 0x562a61c74d90 <col:38, col:40> 'String::rep_t' lvalue ._r 0x562a61c6ff10
|           `-DeclRefExpr 0x562a61c74d70 <col:38> 'const String' lvalue ParmVar 0x562a61c704d8 'x' 'const String &'
|-CXXMethodDecl 0x562a61c70660 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x562a61c75830 <col:31, line:278:5>
|   `-IfStmt 0x562a61c75818 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x562a61c74f10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562a61c74ef8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x562a61c74ec8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|     |     `-MemberExpr 0x562a61c74e98 <col:6> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|     |       `-CXXThisExpr 0x562a61c74e88 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x562a61c757f0 <col:15, line:277:2>
|       |-ParenExpr 0x562a61c753c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x562a61c75390 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x562a61c75020 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x562a61c75008 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x562a61c74ff0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x562a61c74fb0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562a61c6f768
|       |   |       `-ImplicitCastExpr 0x562a61c74f98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x562a61c74f68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|       |   |           `-MemberExpr 0x562a61c74f38 <col:27> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|       |   |             `-CXXThisExpr 0x562a61c74f28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x562a61c75080 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x562a61c75060 <col:54> 'int' 0
|       |   `-CallExpr 0x562a61c752f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x562a61c752d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562a61c75258 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x562a61c75330 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562a61c75168 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x562a61c75348 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562a61c75198 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x562a61c75360 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x562a61c751d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x562a61c75378 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x562a61c75240 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x562a61c75228 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x562a61c751f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x562a61c75710 <line:274:6, line:275:22>
|       | |-CallExpr 0x562a61c755d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x562a61c755b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x562a61c75530 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x562a61c61b00 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x562a61c75500 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562a61c6f768
|       | |   `-ImplicitCastExpr 0x562a61c754e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x562a61c754b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|       | |       `-MemberExpr 0x562a61c75488 <col:40> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|       | |         `-CXXThisExpr 0x562a61c75478 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x562a61c756d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x562a61c756b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x562a61c755f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x562a61c71338 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x562a61c756f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x562a61c75658 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|       |       `-MemberExpr 0x562a61c75628 <col:15> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|       |         `-CXXThisExpr 0x562a61c75618 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x562a61c757d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x562a61c75768 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562a61c6fe98
|         | `-MemberExpr 0x562a61c75738 <col:6> 'String::rep_t' lvalue ->_r 0x562a61c6ff10
|         |   `-CXXThisExpr 0x562a61c75728 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x562a61c757b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x562a61c75798 <col:16> 'int' 0
|-CXXMethodDecl 0x562a61c708f8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x562a61c70718 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562a61c70798 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562a61c70810 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x562a61c709d0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x562a61c70c20 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x562a61c70a88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562a61c70b08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562a61c70b80 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x562a61c70e08 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x562a61c70cf0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x562a61c70d70 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x562a61c70f08 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x562a61c75908 <col:41, line:286:5>
|   `-ReturnStmt 0x562a61c758f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x562a61c758c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x562a61c75890 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x562a61c75878 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x562a61c75858 <col:46> 'int' 1
|-CXXMethodDecl 0x562a61c711a8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x562a61c70fc0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x562a61c71040 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x562a61c710c0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x562a61c71338 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x562a61c71270 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x562a61c71408 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x562a61c715d8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x562a61c714c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562a61c71540 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x562a61c71698 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x562a61c71760 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x562a61c71868 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x562a61c718e0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x562a61c71958 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x562a61c719c0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x562a61c71ac0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x562a61c71b10 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61c71aa0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x562a61c71a80 <col:22> 'int' 14
|-CXXMethodDecl 0x562a61c71d28 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x562a61c71b40 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x562a61c71bc0 <col:38> col:41 'int'
| `-ParmVarDecl 0x562a61c71c40 <col:43> col:46 'int'
|-FriendDecl 0x562a61c71e30 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x562a61c71ec0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61edfed0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x562a61ee00a8 prev 0x562a61edfed0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562a61ee0138 <col:46, col:52> col:46 public
|-TypedefDecl 0x562a61ee0160 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61ee1ac0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x562a61ee1a70 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x562a61ee1a50 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x562a61ee0378 'type'
|     `-SubstTemplateTypeParmType 0x562a61ee0340 'String' sugar
|       |-TemplateTypeParmType 0x562a61c2ae30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c2ade0 'T'
|       `-RecordType 0x562a61c65ab0 'String'
|         `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee1b78 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x562a61ee1b40 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x562a61ee1b20 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562a61ee1ac0 'type'
|     `-ElaboratedType 0x562a61ee1a70 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x562a61ee1a50 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x562a61ee0378 'type'
|         `-SubstTemplateTypeParmType 0x562a61ee0340 'String' sugar
|           |-TemplateTypeParmType 0x562a61c2ae30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562a61c2ade0 'T'
|           `-RecordType 0x562a61c65ab0 'String'
|             `-CXXRecord 0x562a61c65a20 'String'
|-CXXMethodDecl 0x562a61ee1cf8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x562a61ee1c08 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x562a61ee1de8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562a61ee1ec8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562a61ee1ec8
|-CXXMethodDecl 0x562a61ee21a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562a61ee20a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x562a61ee23e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562a61ee2260 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61ee22d8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee25b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562a61ee24a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61ee2520 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee2718 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562a61ee27e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562a61ee2a38 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562a61ee28a8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562a61ee2920 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee2c98 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x562a61ee2b08 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562a61ee2b80 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee2e58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562a61ee2d68 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee3018 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562a61ee2f20 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee30d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562a61ee3180 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562a61ee33b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562a61ee3230 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61ee32a8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562a61ee3658 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562a61ee3560 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x562a61ee3720 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x562a61ee3770 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562a61ee37c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61e9cbb0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x562a61ede938 prev 0x562a61e9cbb0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562a61edfe40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x562a61edfdf0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x562a61edfdd0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562a61edfc80 'type'
|     `-SubstTemplateTypeParmType 0x562a61edfb10 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x562a61bff2c0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x562a61bff268 'F'
|       `-RecordType 0x562a61edf770 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x562a61edf690 'typed_array_memory'
|-FieldDecl 0x562a61ee3810 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x562a61ee3860 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562a61ee3898 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|   |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562a61c385b8 'T'
|   `-RecordType 0x562a61c65ab0 'String'
|     `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee3928 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x562a61ee38f0 'String &'
|   `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-RecordType 0x562a61c65ab0 'String'
|       `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee39b8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x562a61ee3980 'const String &'
|   `-QualType 0x562a61ede9d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-RecordType 0x562a61c65ab0 'String'
|         `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee3a48 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x562a61ee3a10 'String *'
|   `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-RecordType 0x562a61c65ab0 'String'
|       `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee3ad8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x562a61ee3aa0 'const String *'
|   `-QualType 0x562a61ede9d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-RecordType 0x562a61c65ab0 'String'
|         `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee4730 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x562a61ee46e0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x562a61ee46c0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x562a61ee45f8 'type'
|     `-LValueReferenceType 0x562a61ee45c0 'const String &'
|       `-QualType 0x562a61ee4361 'const String' const
|         `-SubstTemplateTypeParmType 0x562a61ee4360 'String' sugar
|           |-TemplateTypeParmType 0x562a61c0a330 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562a61c0a2d8 'T'
|           `-RecordType 0x562a61c65ab0 'String'
|             `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee4798 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x562a61ee3980 'const String &'
|   `-QualType 0x562a61ede9d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-RecordType 0x562a61c65ab0 'String'
|         `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee47f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61ee4858 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x562a61ee3a10 'String *'
|   `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-RecordType 0x562a61c65ab0 'String'
|       `-CXXRecord 0x562a61c65a20 'String'
|-TypedefDecl 0x562a61ee48c0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x562a61ee3aa0 'const String *'
|   `-QualType 0x562a61ede9d1 'const String' const
|     `-SubstTemplateTypeParmType 0x562a61ede9d0 'String' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-RecordType 0x562a61c65ab0 'String'
|         `-CXXRecord 0x562a61c65a20 'String'
|-EnumDecl 0x562a61ee4918 <line:134:5> col:5
| `-EnumConstantDecl 0x562a61ee4a10 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562a61ee49f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562a61c397d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562a61c397b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562a61c39790 <col:40> 'int' 1
|-CXXConstructorDecl 0x562a61ee4a98 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562a61ee4d28 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61ee4b50 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61ee4bf0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x562a61ee4fb8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x562a61ee4ea0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x562a61ee5278 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x562a61ee5160 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x562a61ee5590 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x562a61ee5470 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x562a61ee58a0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x562a61ee5780 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x562a61ee5b90 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61ee59d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61ee5a50 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562a61ee5cb8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562a61ee5d68 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee5dc0 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee5e08 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562a61ee5eb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee5f10 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee5fd8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562a61ee6088 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee60e0 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee6128 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562a61ee61d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee6230 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee6278 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562a61ee6328 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee6380 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee63c8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562a61ee6478 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61ee64d0 <col:30> Inherited
|-CXXMethodDecl 0x562a61ee64f8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562a61ee65a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562a61ee6658 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562a61ee6818 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61ee6708 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61ee6780 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562a61ee6968 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562a61ee68d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61ee6b18 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x562a61ee6a20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562a61ee6bd0 <col:20>
| `-OptimizeNoneAttr 0x562a61ee6c28 <col:30>
|-CXXMethodDecl 0x562a61ee6d48 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x562a61ee6c50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562a61ee6e00 <col:20>
| `-OptimizeNoneAttr 0x562a61ee6e58 <col:30>
|-CXXMethodDecl 0x562a61ee6f10 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562a61ee6e80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61ee7058 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562a61ee6fc8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61ee7188 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x562a61ee7288 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x562a61ee7358 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x562a61ee7428 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x562a61ee7568 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562a61ee74d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61ee76b0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562a61ee7620 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61ee77f8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x562a61ee7768 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562a61ee78b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562a61ee79b0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562a61ee7920 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562a61ee7a68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562a61ee7b28 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x562a61ee7c28 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x562a61ee7da8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562a61ee7ce8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x562a61ee8568 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562a61ee7e60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x562a61ee84c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x562a61ee83c8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x562a61ee8648 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562a61ee8798 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562a61ee8708 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562a61ee8850 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562a61ee8a98 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61ee8910 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562a61ee8988 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562a61ee8c28 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x562a61ee8b68 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562a61ee8e38 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x562a61ee8cf0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562a61ee8d68 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562a61ee8ef8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562a61ee9158 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x562a61ee9060 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x562a61ee9228 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x562a61ee9228

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61f684e8 prev 0x562a61e17e48 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562a61f685e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562a61f68670 <col:22, col:28> col:22 public
|-EnumDecl 0x562a61f68698 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562a61f687b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68798 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562a61f68780 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562a61f68760 <col:14> 'int' 999
| |-EnumConstantDecl 0x562a61f68860 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68840 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562a61f68828 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562a61f68808 <col:14> 'int' 1
| |-EnumConstantDecl 0x562a61f688f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f688d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562a61f688b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x562a61f68980 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68960 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562a61f68940 <col:13> 'int' 1
| |-EnumConstantDecl 0x562a61f68a10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f689f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562a61f689d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x562a61f68aa0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68a80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562a61f68a60 <col:13> 'int' 3
| |-EnumConstantDecl 0x562a61f68b30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68b10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562a61f68af0 <col:15> 'int' 4
| |-EnumConstantDecl 0x562a61f68bc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68ba0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562a61f68b80 <col:14> 'int' 5
| |-EnumConstantDecl 0x562a61f68c50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562a61f68c30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562a61f68c10 <col:12> 'int' 6
| `-EnumConstantDecl 0x562a61f68ce0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562a61f68cc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562a61f68ca0 <col:13> 'int' 7
|-VarDecl 0x562a61f68d50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562a61f68dd8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562a61f68e60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x562a61f68ee8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562a61f68f70 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x562a61f68ff8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562a61f69080 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x562a61f69108 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562a61f69190 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x562a61f69218 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562a61f692a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562a61f693a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x562a61f6e6f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x562a61f6ee88 <line:128:13> 'int' 0
| `-CompoundStmt 0x562a61f6eef8 <col:16, line:129:5>
|-CXXDestructorDecl 0x562a61f69490 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x562a61f6ef08 <col:29, line:132:5>
|-CXXMethodDecl 0x562a61f69648 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562a61f69580 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61f69710 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562a61f697f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562a61f6ef60 <col:44, line:161:5>
|   `-ReturnStmt 0x562a61f6ef50 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x562a61f6ef38 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562a61f6ef18 <col:9> 'ErrorHandler *' lvalue Var 0x562a61f6e758 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562a61f69938 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562a61f698a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562a61f69a00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562a61f6efc0 <col:43, line:173:5>
|   `-ReturnStmt 0x562a61f6efb0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x562a61f6ef98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562a61f6ef78 <col:9> 'ErrorHandler *' lvalue Var 0x562a61f6e7d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562a61f69ab8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562a61f69b38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562a61f69c48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562a61f69bb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562a61f69d98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x562a61f69d08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562a61f69ef0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562a61f69e58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a048 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x562a61f69fb0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a1a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x562a61f6a108 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a3b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562a61f6a258 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6a2d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a588 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562a61f6a470 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6a4f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a7a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562a61f6a648 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6a6c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6a988 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562a61f6a868 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6a8e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6ab68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562a61f6aa48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6aac8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6acf0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562a61f6ac28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562a61f6aec0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562a61f6ada8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562a61f6ae20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x562a61f6f218 <col:57, line:234:5>
|   `-ReturnStmt 0x562a61f6f208 <line:233:2, col:41>
|     `-ExprWithCleanups 0x562a61f6f1f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562a61f6f198 <col:9, col:41> 'int'
|         |-MemberExpr 0x562a61f6f168 <col:9> '<bound member function type>' ->xmessage 0x562a61f6acf0
|         | `-CXXThisExpr 0x562a61f6f158 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x562a61f6f1d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562a61f6f1c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562a61f6f138 <col:18, col:40> 'String' (CXXTemporary 0x562a61f6f138)
|               `-CallExpr 0x562a61f6f100 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x562a61f6f0e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x562a61f6f060 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562a61f6ceb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x562a61f6f080 <col:31> 'const String' lvalue ParmVar 0x562a61f6ae20 'str' 'const String &'
|                 `-DeclRefExpr 0x562a61f6f0a0 <col:36> 'const String' lvalue ParmVar 0x562a61f6ada8 'anno' 'const String &'
|-CXXMethodDecl 0x562a61f6b1a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562a61f6af80 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562a61f6b000 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562a61f6b078 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562a61f6f4a8 <col:68, line:243:5>
|   `-ReturnStmt 0x562a61f6f498 <line:242:2, col:41>
|     `-ExprWithCleanups 0x562a61f6f480 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562a61f6f420 <col:9, col:41> 'int'
|         |-MemberExpr 0x562a61f6f3f0 <col:9> '<bound member function type>' ->xmessage 0x562a61f6aec0
|         | `-CXXThisExpr 0x562a61f6f3e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562a61f6f2b8 <col:18> 'const String' lvalue ParmVar 0x562a61f6af80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562a61f6f468 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562a61f6f450 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562a61f6f3c0 <col:24, col:40> 'String' (CXXTemporary 0x562a61f6f3c0)
|               `-CXXMemberCallExpr 0x562a61f6f358 <col:24, col:40> 'String'
|                 |-MemberExpr 0x562a61f6f2e8 <col:24> '<bound member function type>' ->vformat 0x562a61f6c380
|                 | `-CXXThisExpr 0x562a61f6f2d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562a61f6f388 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562a61f6f318 <col:32> 'const char *' lvalue ParmVar 0x562a61f6b000 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562a61f6f3a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562a61f6f338 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562a61f6b078 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562a61f6b440 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562a61f6b268 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562a61f6b2e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562a61f6b358 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x562a61f6f7e8 <col:23, line:254:5>
|   `-ReturnStmt 0x562a61f6f7d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x562a61f6f7c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x562a61f6f760 <col:9, col:71> 'int'
|         |-MemberExpr 0x562a61f6f730 <col:9> '<bound member function type>' ->xmessage 0x562a61f6aec0
|         | `-CXXThisExpr 0x562a61f6f720 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x562a61f6f7a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x562a61f6f790 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x562a61f6f6e0 <col:18, col:65> 'String' (CXXTemporary 0x562a61f6f6e0)
|         |     `-CallExpr 0x562a61f6f678 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x562a61f6f660 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x562a61f6f548 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562a61f6ceb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x562a61f6f568 <col:31> 'const String' lvalue ParmVar 0x562a61f6b2e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x562a61f6f6c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x562a61f6f6a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x562a61f6f640 <col:37, col:64> 'String' (CXXTemporary 0x562a61f6f640)
|         |             `-CallExpr 0x562a61f6f610 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x562a61f6f5f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x562a61f6f588 <col:37> 'String (const String &)' lvalue CXXMethod 0x562a61f6d508 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x562a61f6f5a8 <col:56> 'const String' lvalue ParmVar 0x562a61f6b268 'landmark' 'const String &'
|         `-DeclRefExpr 0x562a61f6f700 <col:68> 'const String' lvalue ParmVar 0x562a61f6b358 'str' 'const String &'
|-CXXMethodDecl 0x562a61f6b7c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562a61f6b508 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562a61f6b580 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562a61f6b600 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562a61f6b678 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562a61f6faa0 <col:34, line:267:5>
|   `-ReturnStmt 0x562a61f6fa90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x562a61f6fa78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x562a61f6fa10 <col:9, col:51> 'int'
|         |-MemberExpr 0x562a61f6f9e0 <col:9> '<bound member function type>' ->xmessage 0x562a61f6b440
|         | `-CXXThisExpr 0x562a61f6f9d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562a61f6f888 <col:18> 'const String' lvalue ParmVar 0x562a61f6b508 'landmark' 'const String &'
|         |-DeclRefExpr 0x562a61f6f8a8 <col:28> 'const String' lvalue ParmVar 0x562a61f6b580 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562a61f6fa60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x562a61f6fa48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562a61f6f9b0 <col:34, col:50> 'String' (CXXTemporary 0x562a61f6f9b0)
|               `-CXXMemberCallExpr 0x562a61f6f948 <col:34, col:50> 'String'
|                 |-MemberExpr 0x562a61f6f8d8 <col:34> '<bound member function type>' ->vformat 0x562a61f6c380
|                 | `-CXXThisExpr 0x562a61f6f8c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562a61f6f978 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562a61f6f908 <col:42> 'const char *' lvalue ParmVar 0x562a61f6b600 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562a61f6f990 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562a61f6f928 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562a61f6b678 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562a61f6b8d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x562a61f6fb20 <col:25, line:288:5>
|   `-ReturnStmt 0x562a61f6fb10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x562a61f6faf8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x562a61f6fac8 <col:9> 'const int' lvalue ->_nerrors 0x562a61f6e6f8
|         `-CXXThisExpr 0x562a61f6fab8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562a61f6bae0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562a61f6b988 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562a61f6ba08 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6bdc8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562a61f6bba8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562a61f6bc28 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x562a61f6bca0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562a61f6bf60 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x562a61f6be98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6c1a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562a61f6c020 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x562a61f6c098 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562a61f6fd80 <col:58, line:357:5>
|   `-ReturnStmt 0x562a61f6fd70 <line:356:2, col:29>
|     `-ExprWithCleanups 0x562a61f6fd58 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x562a61f6fd28 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562a61f6fd10 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562a61f6fcf0 <col:9, col:29> 'String' (CXXTemporary 0x562a61f6fcf0)
|             `-CallExpr 0x562a61f6fc80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x562a61f6fc68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x562a61f6fbe8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x562a61f6bdc8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x562a61f6fb88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x562a61f6fcb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x562a61f6fba8 <col:21> 'const char *' lvalue ParmVar 0x562a61f6c020 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x562a61f6fcd0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x562a61f6fbc8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562a61f6c098 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562a61f6c380 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x562a61f6c270 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x562a61f6c2e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562a61f6c4d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x562a61f6c448 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x562a61f6c620 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x562a61f6c590 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x562a61f6c8c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x562a61f6c6d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x562a61f6c758 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x562a61f6c7d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x562a61f6ca20 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x562a61f6c990 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x562a61f6fe98 <col:37, line:441:5>
|   `-IfStmt 0x562a61f6fe80 <line:439:2, line:440:8>
|     |-BinaryOperator 0x562a61f6fe08 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x562a61f6fdd8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x562a61f6fd98 <col:6> 'int' lvalue ParmVar 0x562a61f6c990 'level' 'int'
|     | `-ImplicitCastExpr 0x562a61f6fdf0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x562a61f6fdb8 <col:15> 'ErrorHandler::Level' EnumConstant 0x562a61f68aa0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x562a61f6fe68 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x562a61f6fe38 <col:8> 'int' lvalue ->_nerrors 0x562a61f6e6f8
|         `-CXXThisExpr 0x562a61f6fe28 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x562a61f6cae8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x562a61f6ff30 <col:26, line:448:5>
|   `-BinaryOperator 0x562a61f6ff10 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x562a61f6fec0 <col:2> 'int' lvalue ->_nerrors 0x562a61f6e6f8
|     | `-CXXThisExpr 0x562a61f6feb0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x562a61f6fef0 <col:13> 'int' 0
|-CXXMethodDecl 0x562a61f6ccb0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x562a61f6cba0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x562a61f6cc18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x562a61f6ceb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x562a61f6cd70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x562a61f6cde8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x562a61f6d168 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x562a61f6cf78 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x562a61f6cff8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x562a61f6d078 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x562a61f6d220 <col:59> 0 0
|-CXXMethodDecl 0x562a61f6d3b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x562a61f6d298 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x562a61f6d318 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x562a61f705a0 <col:70, line:534:5>
|   |-DeclStmt 0x562a61f700a0 <line:528:2, col:20>
|   | |-VarDecl 0x562a61f6ff58 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x562a61f6ffc0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x562a61f6fff8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x562a61f70060 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x562a61f70170 <line:529:2, col:23>
|   | `-VarDecl 0x562a61f700d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x562a61f70158 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x562a61f70138 <col:18> 'const char *' lvalue ParmVar 0x562a61f6d298 'begin' 'const char *'
|   |-DoStmt 0x562a61f70538 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x562a61f70468 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x562a61f70450 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x562a61f70430 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x562a61f70188 <col:6> 'const char *' lvalue Var 0x562a61f700d0 'x' 'const char *'
|   | |     `-CallExpr 0x562a61f70380 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x562a61f70368 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x562a61f70320 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x562a61f6ebd0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x562a61f703e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x562a61f703d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x562a61f70240 <col:20, col:27> 'String' (CXXTemporary 0x562a61f70240)
|   | |       |     `-CXXTemporaryObjectExpr 0x562a61f70208 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x562a61f70400 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562a61f70260 <col:30> 'const char *' lvalue Var 0x562a61f700d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x562a61f70418 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562a61f70280 <col:33> 'const char *' lvalue ParmVar 0x562a61f6d318 'end' 'const char *'
|   | |       |-UnaryOperator 0x562a61f702c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562a61f702a0 <col:39> 'String' lvalue Var 0x562a61f6ff58 'name' 'String'
|   | |       |-UnaryOperator 0x562a61f702f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562a61f702d8 <col:46> 'String' lvalue Var 0x562a61f6fff8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x562a61f70310 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x562a61f70520 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x562a61f70508 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x562a61f704e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x562a61f704b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|   |         `-ImplicitCastExpr 0x562a61f704a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x562a61f70480 <col:11> 'String' lvalue Var 0x562a61f6ff58 'name' 'String'
|   `-ReturnStmt 0x562a61f70590 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x562a61f70578 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x562a61f70558 <col:9> 'const char *' lvalue Var 0x562a61f700d0 'x' 'const char *'
|-CXXMethodDecl 0x562a61f6d508 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x562a61f6d478 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x562a61f70ba8 <col:55, line:550:5>
|   `-IfStmt 0x562a61f70b80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x562a61f707e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x562a61f707c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562a61f707b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562a61f70790 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562a61f70760 <col:6> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|     | |       `-DeclRefExpr 0x562a61f70600 <col:6> 'const String' lvalue ParmVar 0x562a61f6d478 'x' 'const String &'
|     | `-BinaryOperator 0x562a61f70740 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x562a61f70710 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x562a61f706c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x562a61f706a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562a61f70660 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x562a61c821c0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x562a61f70620 <col:11> 'const String' lvalue ParmVar 0x562a61f6d478 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x562a61f70640 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x562a61f70728 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x562a61f706f8 <col:19> 'char' 123
|     |-ReturnStmt 0x562a61f70850 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x562a61f70820 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x562a61f70800 <col:13> 'const String' lvalue ParmVar 0x562a61f6d478 'x' 'const String &'
|     `-IfStmt 0x562a61f70b58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x562a61f708e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562a61f708d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562a61f708b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562a61f70880 <col:11> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |       `-DeclRefExpr 0x562a61f70860 <col:11> 'const String' lvalue ParmVar 0x562a61f6d478 'x' 'const String &'
|       |-ReturnStmt 0x562a61f70a70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x562a61f70a58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x562a61f70a28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x562a61f70a10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x562a61f709f0 <col:13, col:29> 'String' (CXXTemporary 0x562a61f709f0)
|       |         `-CallExpr 0x562a61f709a0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x562a61f70988 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x562a61f70900 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x562a61f6ccb0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x562a61f709d0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x562a61f70920 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x562a61f70940 <col:28> 'const String' lvalue ParmVar 0x562a61f6d478 'x' 'const String &'
|       `-ReturnStmt 0x562a61f70b48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x562a61f70b30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x562a61f70b00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x562a61f70ae8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x562a61f70ac8 <col:13, col:20> 'String' (CXXTemporary 0x562a61f70ac8)
|                 `-CXXTemporaryObjectExpr 0x562a61f70a90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x562a61f6d6d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x562a61f6d5c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x562a61f6d638 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562a61f6ee78 <col:71> 'bool' false
|-CXXRecordDecl 0x562a61f6d7f0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x562a61f6dae8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x562a61f6da80 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x562a61f6da20 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x562a61f6d9e0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x562a61c65ab0 'String'
|       | `-CXXRecord 0x562a61c65a20 'String'
|       |-BuiltinType 0x562a61935580 'int'
|       `-DecayedType 0x562a61e18e90 '__va_list_tag *' sugar
|         |-TypedefType 0x562a61e18e60 'va_list' sugar
|         | |-Typedef 0x562a61b7bc70 'va_list'
|         | `-TypedefType 0x562a61b7bc20 '__gnuc_va_list' sugar
|         |   |-Typedef 0x562a61b76bd8 '__gnuc_va_list'
|         |   `-TypedefType 0x562a61b76b40 '__builtin_va_list' sugar
|         |     |-Typedef 0x562a61976d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x562a61976ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x562a619362d0 '__va_list_tag'
|         |         `-CXXRecord 0x562a61936238 '__va_list_tag'
|         `-PointerType 0x562a61b83580 '__va_list_tag *'
|           `-RecordType 0x562a619362d0 '__va_list_tag'
|             `-CXXRecord 0x562a61936238 '__va_list_tag'
|-EnumDecl 0x562a61f6db40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x562a61f6dc40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e1a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6dc20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x562a61f6dc00 <col:16> 'int' 1
| |-EnumConstantDecl 0x562a61f6dcd0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e1b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6dcb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x562a61f6dc90 <col:21> 'int' 2
| |-EnumConstantDecl 0x562a61f6dd60 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e1d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6dd40 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x562a61f6dd20 <col:22> 'int' 4
| |-EnumConstantDecl 0x562a61f6ddf0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e1e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6ddd0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x562a61f6ddb0 <col:17> 'int' 8
| |-EnumConstantDecl 0x562a61f6de80 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e200 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6de60 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x562a61f6de40 <col:22> 'int' 16
| |-EnumConstantDecl 0x562a61f6df10 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e218 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6def0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562a61f6ded0 <col:19> 'int' 32
| |-EnumConstantDecl 0x562a61f6dfa0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e230 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6df80 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x562a61f6df60 <col:17> 'int' 64
| |-EnumConstantDecl 0x562a61f6e030 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e248 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6e010 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x562a61f6dff0 <col:14> 'int' 128
| |-EnumConstantDecl 0x562a61f6e0c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562a61f6e260 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61f6e0a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x562a61f6e080 <col:16> 'int' 256
| `-EnumConstantDecl 0x562a61f6e150 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x562a61f6e278 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61f6e130 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x562a61f6e110 <col:12> 'int' 1024
|-CXXMethodDecl 0x562a61f6e488 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x562a61f6e2a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x562a61f6e340 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x562a61f6e610 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x562a61f6e548 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x562a61f6e6b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x562a61f6e6f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x562a61f6e758 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x562a61f6e7d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x562a61f6ebd0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x562a61f6e848 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x562a61f6e8c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x562a61f6e948 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x562a61f6e9c0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x562a61f6ea38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x562a61f6eab0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x562a61f6ecf8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x562a61f6ecf8
| `-ParmVarDecl 0x562a61f6ee08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x562a61f70f08 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x562a61f70f08
  `-ParmVarDecl 0x562a61f71018 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61c980c0 prev 0x562a61bffea8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61c981b8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x562a61c98248 <col:19, col:25> col:19 public
|-TypedefDecl 0x562a61c98280 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x562a61a8a550 'uninitialized_type'
|   `-CXXRecord 0x562a61a8a4b8 'uninitialized_type'
|-CXXConstructorDecl 0x562a61c98340 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9bac8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x562a61c9ba88 <col:10> 'int' 0
| `-CompoundStmt 0x562a61c9bb10 <col:13, line:22:5>
|-CXXConstructorDecl 0x562a61c98490 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x562a61c98400 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9bb60 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61c9bb20 <col:10> 'unsigned int' lvalue ParmVar 0x562a61c98400 'x' 'unsigned int'
| `-CompoundStmt 0x562a61c9bba8 <col:13, line:27:5>
|-CXXConstructorDecl 0x562a61c985e8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x562a61c98558 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9bc10 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x562a61c9bbf8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x562a61c9bbb8 <col:10> 'int' lvalue ParmVar 0x562a61c98558 'x' 'int'
| `-CompoundStmt 0x562a61c9bc58 <col:13, line:31:5>
|-CXXConstructorDecl 0x562a61c98740 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x562a61c986b0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9bcc0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x562a61c9bca8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x562a61c9bc68 <col:10> 'unsigned long' lvalue ParmVar 0x562a61c986b0 'x' 'unsigned long'
| `-CompoundStmt 0x562a61c9bd08 <col:13, line:35:5>
|-CXXConstructorDecl 0x562a61c98898 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x562a61c98808 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9bd70 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x562a61c9bd58 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x562a61c9bd18 <col:10> 'long' lvalue ParmVar 0x562a61c98808 'x' 'long'
| `-CompoundStmt 0x562a61c9bdb8 <col:13, line:39:5>
|-CXXConstructorDecl 0x562a61c98a58 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x562a61c98968 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9be38 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562a61c9bde8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x562a61b5c1b0
| |     `-DeclRefExpr 0x562a61c9bdc8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x562a61c98968 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x562a61c9be80 <col:20, line:44:5>
|-CXXConstructorDecl 0x562a61c98be8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x562a61c98b20 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x562a61c9bfe8 <col:51, line:56:5>
|   `-BinaryOperator 0x562a61c9bfc8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x562a61c9bea0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x562a61c9ba20
|     | `-CXXThisExpr 0x562a61c9be90 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x562a61c9bfb0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x562a61c9bf98 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x562a61c9bf78 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x562a61c9bf48 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x562a61c9bf30 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x562a61c9bed0 <col:47> 'const unsigned char *' lvalue ParmVar 0x562a61c98b20 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x562a61c98d38 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x562a61c98ca8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x562a61c98ee8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x562a61c98e28 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x562a61c9c058 <col:56, line:68:5>
|   `-CStyleCastExpr 0x562a61c9c030 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x562a61c9c000 <col:9> 'const uninitialized_type' lvalue ParmVar 0x562a61c98e28 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x562a61c99078 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x562a61c98fb0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x562a61c99168 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x562a61c9d018 <col:46, line:83:5>
|   `-ReturnStmt 0x562a61c9d008 <line:82:2, col:29>
|     `-ExprWithCleanups 0x562a61c9cff0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x562a61c9cfc0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x562a61c9ce78 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x562a61c9cd60 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x562a61c9cc48 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x562a61c9c080 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x562a61c99258 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x562a61c9d0c8 <col:31, line:88:5>
|   `-ReturnStmt 0x562a61c9d0b8 <line:87:2, col:10>
|     `-UnaryOperator 0x562a61c9d0a0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x562a61c9d088 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x562a61c9d070 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x562a61c9d040 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562a61c9ba20
|             `-CXXThisExpr 0x562a61c9d030 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x562a61c99318 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x562a61c9d148 <col:34, line:93:5>
|   `-ReturnStmt 0x562a61c9d138 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x562a61c9d120 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x562a61c9d0f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562a61c9ba20
|         `-CXXThisExpr 0x562a61c9d0e0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x562a61c993e8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x562a61c9d1c8 <col:38, line:101:5>
|   `-ReturnStmt 0x562a61c9d1b8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x562a61c9d1a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x562a61c9d170 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562a61c9ba20
|         `-CXXThisExpr 0x562a61c9d160 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x562a61c994b8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x562a61c9d498 <col:38, line:108:5>
|   `-ReturnStmt 0x562a61c9d488 <line:107:2, col:58>
|     `-BinaryOperator 0x562a61c9d468 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x562a61c9d380 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x562a61c9d360 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x562a61c9d348 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x562a61c9d1f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562a61c9ba20
|       |   |   `-CXXThisExpr 0x562a61c9d1e0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x562a61c9d320 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x562a61c9d308 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562a61c9d288 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x562a61b676a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x562a61c9d268 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x562a61c9d440 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x562a61c9d428 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x562a61c9d408 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x562a61b676a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x562a61c9d3e8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x562a61c99578 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x562a61c9d708 <col:39, line:112:5>
|   `-ReturnStmt 0x562a61c9d6f8 <line:111:2, col:56>
|     `-BinaryOperator 0x562a61c9d6d8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x562a61c9d5f0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x562a61c9d5d0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x562a61c9d5b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x562a61c9d4c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562a61c9ba20
|       |   |   `-CXXThisExpr 0x562a61c9d4b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x562a61c9d590 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x562a61c9d578 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562a61c9d558 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x562a61b676a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x562a61c9d538 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x562a61c9d6b0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x562a61c9d698 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x562a61c9d678 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x562a61b676a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x562a61c9d658 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x562a61c996a8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x562a61c997b0 <line:115:5, col:38> col:12 used operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x562a61c9a820 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x562a61c9a910 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562a61c9a9d0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61c9aa98 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x562a61c9ac98 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x562a61c9ab48 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x562a61c9abc0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x562a61c9ae18 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x562a61c9ad58 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x562a61c9af60 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x562a61c9aed0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x562a61c9b108 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x562a61c9b018 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x562a61c9b250 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x562a61c9b1c0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x562a61c9b398 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x562a61c9b308 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x562a61c9b460 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x562a61c9b520 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x562a61c9b698 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x562a61c9b5d0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x562a61c9b760 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x562a61c9b848 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x562a61c9b8f0 <col:51> "" ""
|-TypedefDecl 0x562a61c9b990 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x562a61bfff40 'IPAddress'
|   `-CXXRecord 0x562a61c980c0 'IPAddress'
|-AccessSpecDecl 0x562a61c9b9e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x562a61c9ba20 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x562a61c9c0c8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x562a61c9c0c8
| `-ParmVarDecl 0x562a61c9c1d8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x562a61c9c278 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61c9c388 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x562a61c9ba20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562a61c9cf68 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562a61c9cf20 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x562a61c9ba20
| |     `-CXXStaticCastExpr 0x562a61c9cef0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x562a61c9cec0 <col:7> 'IPAddress' lvalue ParmVar 0x562a61c9c388 '' 'IPAddress &&'
| `-CompoundStmt 0x562a61c9cfb0 <col:7>
`-CXXDestructorDecl 0x562a61c9cc78 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e17ed8 prev 0x562a61e5c6c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61e17fd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x562a61e18060 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x562a61e18198 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x562a61e18098 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562a61e195c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61e195a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562a61e19138 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562a61e19650 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61e19610 <col:17> 'ErrorHandler *' lvalue ParmVar 0x562a61e18098 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562a61e191a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562a61e196d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61e19690 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562a61e19200 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562a61e19710 <col:54> 'bool' false
| `-CompoundStmt 0x562a61e19818 <col:61, line:38:5>
|   `-BinaryOperator 0x562a61e197f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x562a61e19790 <col:9> 'const Element *' lvalue ->_context 0x562a61e190d8
|     | `-CXXThisExpr 0x562a61e19780 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x562a61e197e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x562a61e197c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x562a61e183a8 <line:44:5, line:46:5> line:44:5 used ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61e18258 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x562a61e182d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562a61e195f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61e195d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x562a61e190d8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x562a61e19870 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61e19830 <col:20> 'const Element *' lvalue ParmVar 0x562a61e18258 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x562a61e19138 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562a61e198f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61e198b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x562a61e182d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562a61e191a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562a61e19970 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562a61e19930 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x562a61e19200 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562a61e199b0 <col:73> 'bool' false
| `-CompoundStmt 0x562a61e19a28 <col:80, line:46:5>
|-CXXMethodDecl 0x562a61e184d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x562a61e19aa0 <col:36, line:51:5>
|   `-ReturnStmt 0x562a61e19a90 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x562a61e19a78 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x562a61e19a48 <col:16> 'const Element *const' lvalue ->_context 0x562a61e190d8
|         `-CXXThisExpr 0x562a61e19a38 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562a61e185c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x562a61e19b20 <col:32, line:57:5>
|   `-ReturnStmt 0x562a61e19b10 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x562a61e19af8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x562a61e19ac8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x562a61e19138
|         `-CXXThisExpr 0x562a61e19ab8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562a61e18688 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x562a61e18810 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x562a61e18740 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562a61e18960 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x562a61e188d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562a61e18ab0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x562a61e18a20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562a61e18cb8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x562a61e18b68 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x562a61e18be0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x562a61e18fe8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x562a61e18d78 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x562a61e18df8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x562a61e18ec0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x562a61e190a0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x562a61e190d8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x562a61e19138 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x562a61e191a0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x562a61e19200 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x562a61e19250 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x562a61e19250
| `-ParmVarDecl 0x562a61e19368 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x562a61e19408 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x562a61e19408
| `-ParmVarDecl 0x562a61e19518 <col:7> col:7 'const ArgContext &'
|-CXXDestructorDecl 0x562a61f7bb98 <col:7> col:7 implicit referenced ~ArgContext 'void () noexcept' inline default trivial
`-CXXConstructorDecl 0x562a61f8def8 <col:7> col:7 implicit constexpr ArgContext 'void (ArgContext &&)' inline default trivial noexcept-unevaluated 0x562a61f8def8
  `-ParmVarDecl 0x562a61f8e008 <col:7> col:7 'ArgContext &&'

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61f245a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x562a61f24778 prev 0x562a61f245a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562a61f24808 <col:46, col:52> col:46 public
|-TypedefDecl 0x562a61f24830 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f26400 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x562a61f263b0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x562a61f24ce0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x562a61f24be0 'type'
|     `-TemplateSpecializationType 0x562a61f24b70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x562a61f24a50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x562a61f24a30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x562a61f24a10 <col:24> 'unsigned long' 4
|       `-RecordType 0x562a61f24b50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x562a61f24a70 'char_array'
|-TypedefDecl 0x562a61f264b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x562a61f26480 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x562a61f26460 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x562a61f26400 'type'
|     `-ElaboratedType 0x562a61f263b0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x562a61f24ce0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x562a61f24be0 'type'
|         `-TemplateSpecializationType 0x562a61f24b70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x562a61f24a50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x562a61f24a30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x562a61f24a10 <col:24> 'unsigned long' 4
|           `-RecordType 0x562a61f24b50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x562a61f24a70 'char_array'
|-CXXMethodDecl 0x562a61f26638 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x562a61f26548 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x562a61f26728 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562a61f26808 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x562a61f26ad8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562a61f269e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x562a61f26d18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562a61f26b90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61f26c08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f26ee8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562a61f26dd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61f26e50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f27048 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562a61f27118 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562a61f27368 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562a61f271d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562a61f27250 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f301b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x562a61f27438 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562a61f274b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f30378 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562a61f30288 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f30538 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562a61f30440 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f305f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562a61f306a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562a61f308d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562a61f30750 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562a61f307c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562a61f30b78 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562a61f30a80 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x562a61f30c40 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x562a61f30c90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562a61f30ce0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61f22fa8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x562a61f231b8 prev 0x562a61f22fa8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562a61f24510 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x562a61f244c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x562a61f244a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x562a61f24350 'type'
|     `-SubstTemplateTypeParmType 0x562a61f24170 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x562a61bfeb40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61bfeae8 'T'
|       `-RecordType 0x562a61f23cc0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x562a61f23bd8 'sized_array_memory'
|-FieldDecl 0x562a61f30d30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x562a61f30d80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562a61f30db8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|   |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562a61c385b8 'T'
|   `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f30e48 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x562a61f30e10 'int &'
|   `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f30f08 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x562a61f30ed0 'const int &'
|   `-QualType 0x562a61f23251 'const int' const
|     `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f30f98 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x562a61f30f60 'int *'
|   `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31028 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x562a61f30ff0 'const int *'
|   `-QualType 0x562a61f23251 'const int' const
|     `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31c10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x562a61f31bc0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x562a61f31ba0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x562a61f31b30 'type'
|     `-SubstTemplateTypeParmType 0x562a61f318f0 'int' sugar
|       |-TemplateTypeParmType 0x562a61c0aa60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c0aa10 'T'
|       `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31c78 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x562a61f30ed0 'const int &'
|   `-QualType 0x562a61f23251 'const int' const
|     `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31cd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31d38 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x562a61f30f60 'int *'
|   `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|     |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562a61c385b8 'T'
|     `-BuiltinType 0x562a61935580 'int'
|-TypedefDecl 0x562a61f31da0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x562a61f30ff0 'const int *'
|   `-QualType 0x562a61f23251 'const int' const
|     `-SubstTemplateTypeParmType 0x562a61f23250 'int' sugar
|       |-TemplateTypeParmType 0x562a61c38610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562a61c385b8 'T'
|       `-BuiltinType 0x562a61935580 'int'
|-EnumDecl 0x562a61f31df8 <line:134:5> col:5
| `-EnumConstantDecl 0x562a61f31ef0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562a61f31ed0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562a61c397d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562a61c397b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562a61c39790 <col:40> 'int' 1
|-CXXConstructorDecl 0x562a61f31f78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562a61f321c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61f32030 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61f320d0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x562a61f32488 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x562a61f32370 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x562a61f32748 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x562a61f32630 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x562a61f32a90 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x562a61f32970 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x562a61f32da0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x562a61f32c80 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x562a61f33090 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61f32ed8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61f32f50 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562a61f331b8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562a61f33298 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f332f0 <col:30> Inherited
|-CXXMethodDecl 0x562a61f33338 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562a61f333e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f33440 <col:30> Inherited
|-CXXMethodDecl 0x562a61f33508 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562a61f335b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f33610 <col:30> Inherited
|-CXXMethodDecl 0x562a61f33658 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562a61f33708 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f33760 <col:30> Inherited
|-CXXMethodDecl 0x562a61f337a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562a61f33858 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f338b0 <col:30> Inherited
|-CXXMethodDecl 0x562a61f338f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562a61f339a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562a61f33a00 <col:30> Inherited
|-CXXMethodDecl 0x562a61f33a28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562a61f33ad8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562a61f33b88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562a61f33d48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61f33c38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562a61f33cb0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562a61f33e98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562a61f33e08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61f34048 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x562a61f33f50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562a61f34100 <col:20>
| `-OptimizeNoneAttr 0x562a61f34158 <col:30>
|-CXXMethodDecl 0x562a61f34278 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x562a61f34180 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562a61f34330 <col:20>
| `-OptimizeNoneAttr 0x562a61f34388 <col:30>
|-CXXMethodDecl 0x562a61f34440 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562a61f343b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61f34588 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562a61f344f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61f346b8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x562a61f347e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x562a61f348b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x562a61f34988 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x562a61f34ac8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562a61f34a38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61f34c10 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562a61f34b80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562a61f34d58 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x562a61f34cc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562a61f34e10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562a61f34f10 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562a61f34e80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562a61f34fc8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562a61f35088 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x562a61f35188 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x562a61f35308 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562a61f35248 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x562a61f35ac8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562a61f353c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x562a61f35a28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x562a61f35928 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x562a61f35ba8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562a61f35cf8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562a61f35c68 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562a61f35db0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562a61f35ff8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562a61f35e70 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562a61f35ee8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562a61f361b8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x562a61f360c8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562a61f36408 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x562a61f36280 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562a61f362f8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562a61f364c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562a61f36728 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x562a61f36630 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x562a61f367f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61f21118 prev 0x562a61f04a38 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562a61f21210 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x562a61f21300 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x562a61f48420 <col:16, line:828:9>
|-CXXDestructorDecl 0x562a61f213f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x562a61f48430 <col:25, line:830:9>
|-CXXMethodDecl 0x562a61f214f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x562a61f215a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x562a61f21648 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562a61f21648
| `-ParmVarDecl 0x562a61f21758 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x562a61f21f18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562a61f21f18
  `-ParmVarDecl 0x562a61f22028 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61f04848 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x562a61f049a8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x562a61f04a38 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x562a61f04af0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x562a61f04bf8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x562a61f04b28 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562a61f37db8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562a61f37d98 <col:31> 'int' 0
|-CXXConstructorDecl 0x562a61f04f18 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x562a61f04d90 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x562a61f04e08 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562a61f37df0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562a61f37dd0 <col:59> 'int' 0
|-CXXConstructorDecl 0x562a61f050f0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61f04fe0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x562a61f05058 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562a61f37e28 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562a61f37e08 <col:55> 'int' 0
|-CXXConstructorDecl 0x562a61f054a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562a61f05290 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x562a61f05308 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x562a61f05380 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562a61f37e60 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562a61f37e40 <col:31> 'int' 0
|-CXXConstructorDecl 0x562a61f05668 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x562a61f055a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x562a61f05760 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x562a61f05948 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x562a61f05850 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x562a61f05a38 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x562a61f39a70 <col:24, line:291:5>
|   `-ReturnStmt 0x562a61f39a60 <line:290:9, col:79>
|     `-BinaryOperator 0x562a61f39a40 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x562a61f380b8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x562a61f38010 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x562a61f37ff0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x562a61f37ee8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x562a61f37ed0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x562a61f37eb8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x562a61f37e88 <col:18> 'Vector<String> *const' lvalue ->_conf 0x562a61f22f40
|       | |   |       `-CXXThisExpr 0x562a61f37e78 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x562a61f37fd8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x562a61f37fc0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x562a61f37f88 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x562a61f37f58 <col:28, col:35> '<bound member function type>' ->size 0x562a61ee64f8
|       | |           `-ImplicitCastExpr 0x562a61f37fa8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x562a61f37f40 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x562a61f37f10 <col:28> 'Vector<String> *const' lvalue ->_conf 0x562a61f22f40
|       | |                 `-CXXThisExpr 0x562a61f37f00 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x562a61f380a0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x562a61f38088 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x562a61f38070 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x562a61f38040 <col:47> 'Args::Slot *const' lvalue ->_slots 0x562a61f36940
|       |         `-CXXThisExpr 0x562a61f38030 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x562a61f39a20 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x562a61f39a08 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562a61f399f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562a61f399b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562a61f38138 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562a61f380e8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562a61f369f0
|         |     |   `-CXXThisExpr 0x562a61f380d8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562a61f38118 <col:73> 'int' 0
|         `-IntegerLiteral 0x562a61f399d0 <col:79> 'int' 0
|-CXXMethodDecl 0x562a61f05af8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x562a61f39c48 <col:32, line:296:5>
|   `-ReturnStmt 0x562a61f39c38 <line:295:9, col:49>
|     `-BinaryOperator 0x562a61f39c18 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x562a61f39af8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x562a61f39ae0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x562a61f39ac8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x562a61f39a98 <col:17> 'Args::Slot *const' lvalue ->_slots 0x562a61f36940
|       |       `-CXXThisExpr 0x562a61f39a88 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x562a61f39bf8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x562a61f39be0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562a61f39bc8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562a61f39b88 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562a61f39b70 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562a61f39b20 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562a61f369f0
|         |     |   `-CXXThisExpr 0x562a61f39b10 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562a61f39b50 <col:43> 'int' 0
|         `-IntegerLiteral 0x562a61f39ba8 <col:49> 'int' 0
|-CXXMethodDecl 0x562a61f05be8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x562a61f39e58 <col:19, line:306:5>
|   |-IfStmt 0x562a61f39d78 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x562a61f39cb8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x562a61f39ca0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x562a61f39c70 <col:13> 'Vector<String> *' lvalue ->_conf 0x562a61f22f40
|   | |     `-CXXThisExpr 0x562a61f39c60 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x562a61f39d58 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x562a61f39d28 <col:13, col:20> '<bound member function type>' ->clear 0x562a61ee8ef8
|   |     `-ImplicitCastExpr 0x562a61f39d10 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x562a61f39ce0 <col:13> 'Vector<String> *' lvalue ->_conf 0x562a61f22f40
|   |         `-CXXThisExpr 0x562a61f39cd0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x562a61f39e00 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x562a61f39dd0 <col:9, col:16> '<bound member function type>' .clear 0x562a61f364c8
|   |   `-MemberExpr 0x562a61f39da0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x562a61f368e0
|   |     `-CXXThisExpr 0x562a61f39d90 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x562a61f39e48 <line:305:9, col:17>
|     `-UnaryOperator 0x562a61f39e30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f39e20 <col:17> 'Args *' this
|-CXXMethodDecl 0x562a61f05e68 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x562a61f05d70 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x562a61f05fe8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x562a61f05f20 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x562a61f06368 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x562a61f06090 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x562a61f062c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x562a61f06138 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x562a61f061b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x562a61f3a178 <col:67, line:327:5>
|     |-WhileStmt 0x562a61f3a128 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x562a61f39f40 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x562a61f39ec0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562a61e54b98 0x562a61c9e218 0x562a61c9def0 0x562a61c93b00 0x562a61c937b0 0x562a61c930a0 0x562a61c63f30 0x562a61bf1be0
|     | | |-DeclRefExpr 0x562a61f39e80 <col:16> 'Iter' lvalue ParmVar 0x562a61f06138 'begin' 'Iter'
|     | | `-DeclRefExpr 0x562a61f39ea0 <col:25> 'Iter' lvalue ParmVar 0x562a61f061b0 'end' 'Iter'
|     | `-CompoundStmt 0x562a61f3a108 <col:30, line:325:9>
|     |   |-CallExpr 0x562a61f3a0a8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x562a61f39f88 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x562a61f3a078 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x562a61f3a008 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|     |   |   `-DeclRefExpr 0x562a61f39fe8 <col:24> 'Iter' lvalue ParmVar 0x562a61f06138 'begin' 'Iter'
|     |   `-UnaryOperator 0x562a61f3a0f0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x562a61f3a0d0 <col:15> 'Iter' lvalue ParmVar 0x562a61f06138 'begin' 'Iter'
|     `-ReturnStmt 0x562a61f3a168 <line:326:9, col:17>
|       `-UnaryOperator 0x562a61f3a150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3a140 <col:17> 'Args *' this
|-CXXMethodDecl 0x562a61f06470 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x562a61f063e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x562a61f065b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x562a61f06528 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x562a61f06680 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x562a61f3a258 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x562a61f3a1f8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x562a61f3a1a8 <col:9> '<bound member function type>' ->reset_from 0x562a61f36d68
|   | | `-CXXThisExpr 0x562a61f3a198 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x562a61f3a1d8 <col:20> 'int' 0
|   `-ReturnStmt 0x562a61f3a248 <line:352:9, col:17>
|     `-UnaryOperator 0x562a61f3a230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f3a220 <col:17> 'Args *' this
|-VarDecl 0x562a61f06738 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x562a61f067a0 <col:38> 'int' 1
|-VarDecl 0x562a61f06830 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x562a61f06898 <col:39> 'int' 2
|-VarDecl 0x562a61f06928 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x562a61f06990 <col:39> 'int' 4
|-VarDecl 0x562a61f06a20 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x562a61f06a88 <col:39> 'int' 8
|-FunctionTemplateDecl 0x562a61f06e08 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x562a61f06b00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f06d68 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562a61f06bb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f06c58 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3a3b0 <col:43, line:371:5>
|     `-ReturnStmt 0x562a61f3a3a0 <line:370:9, col:34>
|       `-CallExpr 0x562a61f3a368 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3a288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3a308 <col:21> 'const char *' lvalue ParmVar 0x562a61f06bb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3a328 <col:30> 'int' 0
|         `-DeclRefExpr 0x562a61f3a348 <col:33> 'T' lvalue ParmVar 0x562a61f06c58 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f07138 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x562a61f06e70 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f07098 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562a61f06f20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f06fc8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3a500 <col:45, line:375:5>
|     `-ReturnStmt 0x562a61f3a4f0 <line:374:9, col:42>
|       `-CallExpr 0x562a61f3a4b8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3a3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3a458 <col:21> 'const char *' lvalue ParmVar 0x562a61f06f20 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3a478 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int'
|         `-DeclRefExpr 0x562a61f3a498 <col:41> 'T' lvalue ParmVar 0x562a61f06fc8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f07468 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x562a61f071a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f073c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562a61f07250 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f072f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3a650 <col:45, line:379:5>
|     `-ReturnStmt 0x562a61f3a640 <line:378:9, col:43>
|       `-CallExpr 0x562a61f3a608 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3a528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3a5a8 <col:21> 'const char *' lvalue ParmVar 0x562a61f07250 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3a5c8 <col:30> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
|         `-DeclRefExpr 0x562a61f3a5e8 <col:42> 'T' lvalue ParmVar 0x562a61f072f8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f07798 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x562a61f074d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x562a61f076f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x562a61f07580 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562a61f07628 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x562a61f3a850 <col:46, line:383:5>
| |   `-ReturnStmt 0x562a61f3a840 <line:382:9, col:55>
| |     `-CallExpr 0x562a61f3a808 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562a61f3a678 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562a61f3a6f8 <col:21> 'const char *' lvalue ParmVar 0x562a61f07580 'keyword' 'const char *'
| |       |-BinaryOperator 0x562a61f3a7c8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x562a61f3a778 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x562a61f3a758 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x562a61f3a7b0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x562a61f3a790 <col:42> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x562a61f3a7e8 <col:54> 'T' lvalue ParmVar 0x562a61f07628 'x' 'T &'
| `-CXXMethodDecl 0x562a61f7c008 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x562a61f7be20 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x562a61f7bef8 <col:40, col:43> col:43 x 'IPAddress &'
|-FunctionTemplateDecl 0x562a61f07b98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x562a61f07800 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f07af8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x562a61f078b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f07930 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f079d8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3a990 <col:54, line:388:5>
|     |-CallExpr 0x562a61f3a918 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3a868 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562a61f3a8a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3a8b8 <col:30> 'const char *' lvalue ParmVar 0x562a61f078b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3a8d8 <col:39> 'int' lvalue ParmVar 0x562a61f07930 'flags' 'int'
|     | `-DeclRefExpr 0x562a61f3a8f8 <col:46> 'T' lvalue ParmVar 0x562a61f079d8 'x' 'T &'
|     `-ReturnStmt 0x562a61f3a980 <line:387:9, col:17>
|       `-UnaryOperator 0x562a61f3a968 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3a958 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f08048 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x562a61f07c08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f07c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562a61f07fa8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562a61f07d48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f07de8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f07e88 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3ab00 <col:74, line:403:5>
|     `-ReturnStmt 0x562a61f3aaf0 <line:402:9, col:56>
|       `-CallExpr 0x562a61f3aab0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3a9c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3aa30 <col:28> 'const char *' lvalue ParmVar 0x562a61f07d48 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3aa50 <col:37> 'int' 0
|         |-DeclRefExpr 0x562a61f3aa70 <col:40> 'T' lvalue ParmVar 0x562a61f07de8 'x' 'T &'
|         `-DeclRefExpr 0x562a61f3aa90 <col:43> 'const V' lvalue ParmVar 0x562a61f07e88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562a61f084b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562a61f080b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f08138 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562a61f08418 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562a61f081f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f08298 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f08338 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3ac68 <col:76, line:407:5>
|     `-ReturnStmt 0x562a61f3ac58 <line:406:9, col:65>
|       `-CallExpr 0x562a61f3ac18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3ab28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3ab98 <col:28> 'const char *' lvalue ParmVar 0x562a61f081f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3abb8 <col:37> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
|         |-DeclRefExpr 0x562a61f3abd8 <col:49> 'T' lvalue ParmVar 0x562a61f08298 'x' 'T &'
|         `-DeclRefExpr 0x562a61f3abf8 <col:52> 'const V' lvalue ParmVar 0x562a61f08338 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562a61f08a08 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x562a61f08528 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f085a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562a61f08968 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562a61f08668 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f086e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f08788 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f08828 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3add0 <col:85, line:412:5>
|     |-CallExpr 0x562a61f3ad50 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3ac80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562a61f3acc0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3acd0 <col:37> 'const char *' lvalue ParmVar 0x562a61f08668 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3acf0 <col:46> 'int' lvalue ParmVar 0x562a61f086e8 'flags' 'int'
|     | |-DeclRefExpr 0x562a61f3ad10 <col:53> 'T' lvalue ParmVar 0x562a61f08788 'x' 'T &'
|     | `-DeclRefExpr 0x562a61f3ad30 <col:56> 'const V' lvalue ParmVar 0x562a61f08828 'default_value' 'const V &'
|     `-ReturnStmt 0x562a61f3adc0 <line:411:9, col:17>
|       `-UnaryOperator 0x562a61f3ada8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3ad98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f08e98 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x562a61f08a80 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f08af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f08df8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f08bb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f08c30 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f08cd8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3af50 <col:53, line:425:5>
|     `-ReturnStmt 0x562a61f3af40 <line:424:9, col:42>
|       `-CallExpr 0x562a61f3af00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3ae00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3ae80 <col:21> 'const char *' lvalue ParmVar 0x562a61f08bb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3aea0 <col:30> 'int' 0
|         |-DeclRefExpr 0x562a61f3aec0 <col:33> 'P' lvalue ParmVar 0x562a61f08c30 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3aee0 <col:41> 'T' lvalue ParmVar 0x562a61f08cd8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f092e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x562a61f08f08 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f08f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f09248 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f09048 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f090c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f09168 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3b0c8 <col:55, line:429:5>
|     `-ReturnStmt 0x562a61f3b0b8 <line:428:9, col:50>
|       `-CallExpr 0x562a61f3b078 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3af78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3aff8 <col:21> 'const char *' lvalue ParmVar 0x562a61f09048 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3b018 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int'
|         |-DeclRefExpr 0x562a61f3b038 <col:41> 'P' lvalue ParmVar 0x562a61f090c0 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3b058 <col:49> 'T' lvalue ParmVar 0x562a61f09168 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f09738 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x562a61f09358 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f093d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x562a61f09698 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x562a61f09498 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562a61f09510 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x562a61f095b8 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x562a61f3b240 <col:55, line:433:5>
| |   `-ReturnStmt 0x562a61f3b230 <line:432:9, col:51>
| |     `-CallExpr 0x562a61f3b1f0 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562a61f3b0f0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562a61f3b170 <col:21> 'const char *' lvalue ParmVar 0x562a61f09498 'keyword' 'const char *'
| |       |-DeclRefExpr 0x562a61f3b190 <col:30> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
| |       |-DeclRefExpr 0x562a61f3b1b0 <col:42> 'P' lvalue ParmVar 0x562a61f09510 'parser' 'P'
| |       `-DeclRefExpr 0x562a61f3b1d0 <col:50> 'T' lvalue ParmVar 0x562a61f095b8 'x' 'T &'
| `-CXXMethodDecl 0x562a61f8cc98 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, BoolArg, bool &)'
|   |-TemplateArgument type 'BoolArg'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x562a61f8ca00 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x562a61f8caa8 <col:39, col:41> col:41 parser 'BoolArg':'BoolArg'
|   `-ParmVarDecl 0x562a61f8cb78 <col:49, col:52> col:52 x 'bool &'
|-FunctionTemplateDecl 0x562a61f09b88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x562a61f097a8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f09828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x562a61f09ae8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x562a61f098e8 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562a61f09960 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x562a61f09a08 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x562a61f3b468 <col:56, line:437:5>
| |   `-ReturnStmt 0x562a61f3b458 <line:436:9, col:63>
| |     `-CallExpr 0x562a61f3b418 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562a61f3b268 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562a61f3b2e8 <col:21> 'const char *' lvalue ParmVar 0x562a61f098e8 'keyword' 'const char *'
| |       |-BinaryOperator 0x562a61f3b3b8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x562a61f3b368 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x562a61f3b348 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x562a61f3b3a0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x562a61f3b380 <col:42> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x562a61f3b3d8 <col:54> 'P' lvalue ParmVar 0x562a61f09960 'parser' 'P'
| |       `-DeclRefExpr 0x562a61f3b3f8 <col:62> 'T' lvalue ParmVar 0x562a61f09a08 'x' 'T &'
| |-CXXMethodDecl 0x562a61f7ca98 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
| | |-TemplateArgument type 'IPPortArg'
| | |-TemplateArgument type 'unsigned short'
| | |-ParmVarDecl 0x562a61f7c800 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x562a61f7c8a8 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
| | `-ParmVarDecl 0x562a61f7c978 <col:50, col:53> col:53 x 'unsigned short &'
| `-CXXMethodDecl 0x562a61f7d6c8 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x562a61f7d430 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x562a61f7d4d8 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x562a61f7d5a8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x562a61f0a0b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x562a61f09bf8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f09c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f0a018 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562a61f09d38 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f09db8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f09e30 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f09ed8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3b5d0 <col:64, line:442:5>
|     |-CallExpr 0x562a61f3b550 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3b480 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562a61f3b4c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3b4d0 <col:30> 'const char *' lvalue ParmVar 0x562a61f09d38 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3b4f0 <col:39> 'int' lvalue ParmVar 0x562a61f09db8 'flags' 'int'
|     | |-DeclRefExpr 0x562a61f3b510 <col:46> 'P' lvalue ParmVar 0x562a61f09e30 'parser' 'P'
|     | `-DeclRefExpr 0x562a61f3b530 <col:54> 'T' lvalue ParmVar 0x562a61f09ed8 'x' 'T &'
|     `-ReturnStmt 0x562a61f3b5c0 <line:441:9, col:17>
|       `-UnaryOperator 0x562a61f3b5a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3b598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f0a6b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x562a61f0a130 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0a1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562a61f0a228 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562a61f0a618 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562a61f0a2f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0a368 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0a408 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f0a4d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3b768 <col:84, line:458:5>
|     `-ReturnStmt 0x562a61f3b758 <line:457:9, col:64>
|       `-CallExpr 0x562a61f3b710 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3b600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3b670 <col:28> 'const char *' lvalue ParmVar 0x562a61f0a2f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3b690 <col:37> 'int' 0
|         |-DeclRefExpr 0x562a61f3b6b0 <col:40> 'P' lvalue ParmVar 0x562a61f0a368 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3b6d0 <col:48> 'T' lvalue ParmVar 0x562a61f0a408 'x' 'T &'
|         `-DeclRefExpr 0x562a61f3b6f0 <col:51> 'const V' lvalue ParmVar 0x562a61f0a4d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562a61f0ac38 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562a61f0a730 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0a7a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562a61f0a828 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562a61f0ab98 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562a61f0a8f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0a968 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0aa08 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f0aaa8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3b8f8 <col:86, line:462:5>
|     `-ReturnStmt 0x562a61f3b8e8 <line:461:9, col:73>
|       `-CallExpr 0x562a61f3b8a0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3b790 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3b800 <col:28> 'const char *' lvalue ParmVar 0x562a61f0a8f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3b820 <col:37> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
|         |-DeclRefExpr 0x562a61f3b840 <col:49> 'P' lvalue ParmVar 0x562a61f0a968 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3b860 <col:57> 'T' lvalue ParmVar 0x562a61f0aa08 'x' 'T &'
|         `-DeclRefExpr 0x562a61f3b880 <col:60> 'const V' lvalue ParmVar 0x562a61f0aaa8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562a61f0b298 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x562a61f0acb0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0ad28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562a61f0ada8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562a61f0b1f8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562a61f0ae70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0aef0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f0af68 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0b008 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f0b0a8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x562a61f3ba88 <col:95, line:467:5>
|     |-CallExpr 0x562a61f3ba00 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3b910 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562a61f3b950 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3b960 <col:37> 'const char *' lvalue ParmVar 0x562a61f0ae70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3b980 <col:46> 'int' lvalue ParmVar 0x562a61f0aef0 'flags' 'int'
|     | |-DeclRefExpr 0x562a61f3b9a0 <col:53> 'P' lvalue ParmVar 0x562a61f0af68 'parser' 'P'
|     | |-DeclRefExpr 0x562a61f3b9c0 <col:61> 'T' lvalue ParmVar 0x562a61f0b008 'x' 'T &'
|     | `-DeclRefExpr 0x562a61f3b9e0 <col:64> 'const V' lvalue ParmVar 0x562a61f0b0a8 'default_value' 'const V &'
|     `-ReturnStmt 0x562a61f3ba78 <line:466:9, col:17>
|       `-UnaryOperator 0x562a61f3ba60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3ba50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f0b878 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x562a61f0b318 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0b398 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f0b418 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f0b7d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f0b4e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0b558 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0b5f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562a61f0b698 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x562a61f3bc30 <col:63, line:481:5>
|     `-ReturnStmt 0x562a61f3bc20 <line:480:9, col:47>
|       `-CallExpr 0x562a61f3bbd8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3bab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3bb38 <col:21> 'const char *' lvalue ParmVar 0x562a61f0b4e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3bb58 <col:30> 'int' 0
|         |-DeclRefExpr 0x562a61f3bb78 <col:33> 'P' lvalue ParmVar 0x562a61f0b558 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3bb98 <col:41> 'T1' lvalue ParmVar 0x562a61f0b5f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562a61f3bbb8 <col:45> 'T2' lvalue ParmVar 0x562a61f0b698 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562a61f0bdf8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x562a61f0b8f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0b968 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f0b9e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f0bd58 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f0bab0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0bb28 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0bbc8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562a61f0bc68 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562a61f3bdd0 <col:65, line:485:5>
|     `-ReturnStmt 0x562a61f3bdc0 <line:484:9, col:55>
|       `-CallExpr 0x562a61f3bd78 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3bc58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3bcd8 <col:21> 'const char *' lvalue ParmVar 0x562a61f0bab0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3bcf8 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int'
|         |-DeclRefExpr 0x562a61f3bd18 <col:41> 'P' lvalue ParmVar 0x562a61f0bb28 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3bd38 <col:49> 'T1' lvalue ParmVar 0x562a61f0bbc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562a61f3bd58 <col:53> 'T2' lvalue ParmVar 0x562a61f0bc68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562a61f10158 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x562a61f0be70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f0bee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f0bf68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f100b8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f0c030 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f0c0a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f0ff20 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562a61f0ffc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562a61f3bf70 <col:65, line:489:5>
|     `-ReturnStmt 0x562a61f3bf60 <line:488:9, col:56>
|       `-CallExpr 0x562a61f3bf18 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3bdf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3be78 <col:21> 'const char *' lvalue ParmVar 0x562a61f0c030 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3be98 <col:30> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
|         |-DeclRefExpr 0x562a61f3beb8 <col:42> 'P' lvalue ParmVar 0x562a61f0c0a8 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3bed8 <col:50> 'T1' lvalue ParmVar 0x562a61f0ff20 'x1' 'T1 &'
|         `-DeclRefExpr 0x562a61f3bef8 <col:54> 'T2' lvalue ParmVar 0x562a61f0ffc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562a61f106d8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x562a61f101d0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f10248 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f102c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f10638 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f10390 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f10408 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f104a8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562a61f10548 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x562a61f3c1c0 <col:66, line:493:5>
|     `-ReturnStmt 0x562a61f3c1b0 <line:492:9, col:68>
|       `-CallExpr 0x562a61f3c168 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3bf98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3c018 <col:21> 'const char *' lvalue ParmVar 0x562a61f10390 'keyword' 'const char *'
|         |-BinaryOperator 0x562a61f3c0e8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562a61f3c098 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562a61f3c078 <col:30> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562a61f3c0d0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562a61f3c0b0 <col:42> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562a61f3c108 <col:54> 'P' lvalue ParmVar 0x562a61f10408 'parser' 'P'
|         |-DeclRefExpr 0x562a61f3c128 <col:62> 'T1' lvalue ParmVar 0x562a61f104a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562a61f3c148 <col:66> 'T2' lvalue ParmVar 0x562a61f10548 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562a61f10d38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x562a61f10750 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f107c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f10848 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f10c98 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f10910 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f10990 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f10a08 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f10aa8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562a61f10b48 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x562a61f3c350 <col:74, line:498:5>
|     |-CallExpr 0x562a61f3c2c8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3c1d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562a61f3c218 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3c228 <col:30> 'const char *' lvalue ParmVar 0x562a61f10910 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3c248 <col:39> 'int' lvalue ParmVar 0x562a61f10990 'flags' 'int'
|     | |-DeclRefExpr 0x562a61f3c268 <col:46> 'P' lvalue ParmVar 0x562a61f10a08 'parser' 'P'
|     | |-DeclRefExpr 0x562a61f3c288 <col:54> 'T1' lvalue ParmVar 0x562a61f10aa8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x562a61f3c2a8 <col:58> 'T2' lvalue ParmVar 0x562a61f10b48 'x2' 'T2 &'
|     `-ReturnStmt 0x562a61f3c340 <line:497:9, col:17>
|       `-UnaryOperator 0x562a61f3c328 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3c318 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f11098 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x562a61f10db8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f10ff8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562a61f10e70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f10ee8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3c498 <col:52, line:509:5>
|     `-ReturnStmt 0x562a61f3c488 <line:508:9, col:44>
|       `-CallExpr 0x562a61f3c450 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3c380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3c3f0 <col:26> 'const char *' lvalue ParmVar 0x562a61f10e70 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3c410 <col:35> 'int' 0
|         `-DeclRefExpr 0x562a61f3c430 <col:38> 'P' lvalue ParmVar 0x562a61f10ee8 'parser' 'P'
|-FunctionTemplateDecl 0x562a61f11398 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x562a61f11100 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f112f8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562a61f111b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f11228 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3c5d8 <col:54, line:513:5>
|     `-ReturnStmt 0x562a61f3c5c8 <line:512:9, col:52>
|       `-CallExpr 0x562a61f3c590 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3c4c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3c530 <col:26> 'const char *' lvalue ParmVar 0x562a61f111b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3c550 <col:35> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int'
|         `-DeclRefExpr 0x562a61f3c570 <col:46> 'P' lvalue ParmVar 0x562a61f11228 'parser' 'P'
|-FunctionTemplateDecl 0x562a61f11698 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x562a61f11400 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f115f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562a61f114b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f11528 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3c718 <col:54, line:517:5>
|     `-ReturnStmt 0x562a61f3c708 <line:516:9, col:53>
|       `-CallExpr 0x562a61f3c6d0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3c600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3c670 <col:26> 'const char *' lvalue ParmVar 0x562a61f114b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3c690 <col:35> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int'
|         `-DeclRefExpr 0x562a61f3c6b0 <col:47> 'P' lvalue ParmVar 0x562a61f11528 'parser' 'P'
|-FunctionTemplateDecl 0x562a61f11998 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x562a61f11700 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f118f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562a61f117b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f11828 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3c908 <col:55, line:521:5>
|     `-ReturnStmt 0x562a61f3c8f8 <line:520:9, col:65>
|       `-CallExpr 0x562a61f3c8c0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3c740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3c7b0 <col:26> 'const char *' lvalue ParmVar 0x562a61f117b0 'keyword' 'const char *'
|         |-BinaryOperator 0x562a61f3c880 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x562a61f3c830 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562a61f3c810 <col:35> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562a61f3c868 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562a61f3c848 <col:47> 'const int' lvalue Var 0x562a61f06830 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x562a61f3c8a0 <col:59> 'P' lvalue ParmVar 0x562a61f11828 'parser' 'P'
|-FunctionTemplateDecl 0x562a61f11d68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x562a61f11a00 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f11cc8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562a61f11ab0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f11b30 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f11ba8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3ca48 <col:63, line:526:5>
|     |-CallExpr 0x562a61f3c9d0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3c920 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x562a61f3c960 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3c970 <col:35> 'const char *' lvalue ParmVar 0x562a61f11ab0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562a61f3c990 <col:44> 'int' lvalue ParmVar 0x562a61f11b30 'flags' 'int'
|     | `-DeclRefExpr 0x562a61f3c9b0 <col:51> 'P' lvalue ParmVar 0x562a61f11ba8 'parser' 'P'
|     `-ReturnStmt 0x562a61f3ca38 <line:525:9, col:17>
|       `-UnaryOperator 0x562a61f3ca20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3ca10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f121b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x562a61f11dd8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f11e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f12118 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f11f18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f11f90 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f12038 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3cba0 <col:58, line:541:5>
|     `-ReturnStmt 0x562a61f3cb90 <line:540:9, col:39>
|       `-CallExpr 0x562a61f3cb58 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3ca78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3caf8 <col:21> 'const char *' lvalue ParmVar 0x562a61f11f18 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3cb18 <col:30> 'P' lvalue ParmVar 0x562a61f11f90 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3cb38 <col:38> 'T' lvalue ParmVar 0x562a61f12038 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f12608 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x562a61f12228 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f122a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f12568 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f12368 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f123e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f12488 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3ccd8 <col:60, line:545:5>
|     `-ReturnStmt 0x562a61f3ccc8 <line:544:9, col:41>
|       `-CallExpr 0x562a61f3cc90 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3cbc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3cc30 <col:23> 'const char *' lvalue ParmVar 0x562a61f12368 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3cc50 <col:32> 'P' lvalue ParmVar 0x562a61f123e0 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3cc70 <col:40> 'T' lvalue ParmVar 0x562a61f12488 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f12a58 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x562a61f12678 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f126f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f129b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f127b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f12830 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f128d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3ce10 <col:60, line:549:5>
|     `-ReturnStmt 0x562a61f3ce00 <line:548:9, col:41>
|       `-CallExpr 0x562a61f3cdc8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3cd00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3cd68 <col:23> 'const char *' lvalue ParmVar 0x562a61f127b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3cd88 <col:32> 'P' lvalue ParmVar 0x562a61f12830 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3cda8 <col:40> 'T' lvalue ParmVar 0x562a61f128d8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f12ea8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x562a61f12ac8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f12b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f12e08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f12c08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f12c80 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f12d28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3cf48 <col:61, line:553:5>
|     `-ReturnStmt 0x562a61f3cf38 <line:552:9, col:42>
|       `-CallExpr 0x562a61f3cf00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3ce38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3cea0 <col:24> 'const char *' lvalue ParmVar 0x562a61f12c08 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3cec0 <col:33> 'P' lvalue ParmVar 0x562a61f12c80 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3cee0 <col:41> 'T' lvalue ParmVar 0x562a61f12d28 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f13388 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x562a61f12f18 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f12f98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f132e8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562a61f13058 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f130d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f13150 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f131f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3d0c0 <col:69, line:557:5>
|     `-ReturnStmt 0x562a61f3d0b0 <line:556:9, col:46>
|       `-CallExpr 0x562a61f3d070 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3cf70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3cff0 <col:21> 'const char *' lvalue ParmVar 0x562a61f13058 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3d010 <col:30> 'int' lvalue ParmVar 0x562a61f130d8 'flags' 'int'
|         |-DeclRefExpr 0x562a61f3d030 <col:37> 'P' lvalue ParmVar 0x562a61f13150 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3d050 <col:45> 'T' lvalue ParmVar 0x562a61f131f8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f13698 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x562a61f13400 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f135f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562a61f134b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f13528 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3d200 <col:56, line:571:5>
|     `-ReturnStmt 0x562a61f3d1f0 <line:570:9, col:48>
|       `-CallExpr 0x562a61f3d1b8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3d0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3d158 <col:30> 'const char *' lvalue ParmVar 0x562a61f134b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3d178 <col:39> 'int' 0
|         `-DeclRefExpr 0x562a61f3d198 <col:42> 'P' lvalue ParmVar 0x562a61f13528 'parser' 'P'
|-FunctionTemplateDecl 0x562a61f13a28 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x562a61f13700 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f13988 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562a61f137b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f13830 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f138a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562a61f3d3d0 <col:67, line:576:5>
|     |-CallExpr 0x562a61f3d358 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3d218 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562a61f3d258 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3d268 <col:39> 'const char *' lvalue ParmVar 0x562a61f137b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x562a61f3d318 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562a61f3d2c8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562a61f3d288 <col:48> 'int' lvalue ParmVar 0x562a61f13830 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562a61f3d300 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562a61f3d2e0 <col:56> 'const int' lvalue Var 0x562a61f06a20 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x562a61f3d338 <col:68> 'P' lvalue ParmVar 0x562a61f138a8 'parser' 'P'
|     `-ReturnStmt 0x562a61f3d3c0 <line:575:9, col:17>
|       `-UnaryOperator 0x562a61f3d3a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3d398 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f13e78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x562a61f13a98 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f13b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f13dd8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562a61f13bd8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f13c50 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f13cf8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3d540 <col:62, line:592:5>
|     `-ReturnStmt 0x562a61f3d530 <line:591:9, col:51>
|       `-CallExpr 0x562a61f3d4f0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3d400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3d470 <col:30> 'const char *' lvalue ParmVar 0x562a61f13bd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3d490 <col:39> 'int' 0
|         |-DeclRefExpr 0x562a61f3d4b0 <col:42> 'P' lvalue ParmVar 0x562a61f13c50 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3d4d0 <col:50> 'T' lvalue ParmVar 0x562a61f13cf8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f14358 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x562a61f13ee8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f13f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f142b8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562a61f14028 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f140a8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f14120 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f141c8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3d738 <col:73, line:597:5>
|     |-CallExpr 0x562a61f3d6b8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3d558 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562a61f3d598 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3d5a8 <col:39> 'const char *' lvalue ParmVar 0x562a61f14028 'keyword' 'const char *'
|     | |-BinaryOperator 0x562a61f3d658 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562a61f3d608 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562a61f3d5c8 <col:48> 'int' lvalue ParmVar 0x562a61f140a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562a61f3d640 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562a61f3d620 <col:56> 'const int' lvalue Var 0x562a61f06a20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562a61f3d678 <col:68> 'P' lvalue ParmVar 0x562a61f14120 'parser' 'P'
|     | `-DeclRefExpr 0x562a61f3d698 <col:76> 'T' lvalue ParmVar 0x562a61f141c8 'x' 'T &'
|     `-ReturnStmt 0x562a61f3d728 <line:596:9, col:17>
|       `-UnaryOperator 0x562a61f3d710 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3d700 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f14908 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x562a61f143d0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f14448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f14868 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x562a61f14508 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f14580 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f14740 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562a61f3d8a8 <col:65, line:614:5>
|     `-ReturnStmt 0x562a61f3d898 <line:613:9, col:46>
|       `-CallExpr 0x562a61f3d858 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3d768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3d7d8 <col:25> 'const char *' lvalue ParmVar 0x562a61f14508 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3d7f8 <col:34> 'int' 0
|         |-DeclRefExpr 0x562a61f3d818 <col:37> 'P' lvalue ParmVar 0x562a61f14580 'parser' 'P'
|         `-DeclRefExpr 0x562a61f3d838 <col:45> 'Vector<T>' lvalue ParmVar 0x562a61f14740 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562a61f14d38 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x562a61f14978 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f14c98 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x562a61f14a30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f14b80 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562a61f3dac0 <col:55, line:618:5>
|     `-ReturnStmt 0x562a61f3dab0 <line:617:9, col:55>
|       `-CallExpr 0x562a61f3da70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3d8d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3d940 <col:25> 'const char *' lvalue ParmVar 0x562a61f14a30 'keyword' 'const char *'
|         |-IntegerLiteral 0x562a61f3d960 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x562a61f3da30 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562a61f3da50 <col:54> 'Vector<T>' lvalue ParmVar 0x562a61f14b80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562a61f15308 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x562a61f14da0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f14e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f15268 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562a61f14ed8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f14f58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f14fd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f15120 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562a61f3dcb8 <col:76, line:623:5>
|     |-CallExpr 0x562a61f3dc38 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562a61f3dad8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x562a61f3db18 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x562a61f3db28 <col:34> 'const char *' lvalue ParmVar 0x562a61f14ed8 'keyword' 'const char *'
|     | |-BinaryOperator 0x562a61f3dbd8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x562a61f3db88 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562a61f3db48 <col:43> 'int' lvalue ParmVar 0x562a61f14f58 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562a61f3dbc0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562a61f3dba0 <col:51> 'const int' lvalue Var 0x562a61f06a20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562a61f3dbf8 <col:63> 'P' lvalue ParmVar 0x562a61f14fd0 'parser' 'P'
|     | `-DeclRefExpr 0x562a61f3dc18 <col:71> 'Vector<T>' lvalue ParmVar 0x562a61f15120 'x' 'Vector<T> &'
|     `-ReturnStmt 0x562a61f3dca8 <line:622:9, col:17>
|       `-UnaryOperator 0x562a61f3dc90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3dc80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f15848 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x562a61f15380 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f153f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f157a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x562a61f154b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f15538 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f15680 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562a61f3df20 <col:66, line:627:5>
|     `-ReturnStmt 0x562a61f3df10 <line:626:9, col:59>
|       `-CallExpr 0x562a61f3ded0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562a61f3dce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562a61f3dd58 <col:25> 'const char *' lvalue ParmVar 0x562a61f154b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562a61f3dd78 <col:34> 'int' lvalue ParmVar 0x562a61f15538 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x562a61f3de90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562a61f3deb0 <col:58> 'Vector<T>' lvalue ParmVar 0x562a61f15680 'x' 'Vector<T> &'
|-CXXMethodDecl 0x562a61f158d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x562a61f3dfa0 <col:25, line:633:5>
|   `-ReturnStmt 0x562a61f3df90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x562a61f3df78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562a61f3df48 <col:16> 'const bool' lvalue ->_status 0x562a61f22da8
|         `-CXXThisExpr 0x562a61f3df38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562a61f15a58 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x562a61f15990 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x562a61f3e088 <col:27, line:639:5>
|   |-BinaryOperator 0x562a61f3e030 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562a61f3dfb8 <col:9> 'bool' lvalue ParmVar 0x562a61f15990 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562a61f3e018 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562a61f3dfe8 <col:13> 'bool' lvalue ->_status 0x562a61f22da8
|   |     `-CXXThisExpr 0x562a61f3dfd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562a61f3e078 <line:638:9, col:17>
|     `-UnaryOperator 0x562a61f3e060 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f3e050 <col:17> 'Args *' this
|-CXXMethodDecl 0x562a61f15bd8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562a61f15b18 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x562a61f3e178 <col:39, line:644:5>
|   |-BinaryOperator 0x562a61f3e120 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562a61f3e0a8 <col:9> 'bool' lvalue ParmVar 0x562a61f15b18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562a61f3e108 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562a61f3e0d8 <col:13> 'const bool' lvalue ->_status 0x562a61f22da8
|   |     `-CXXThisExpr 0x562a61f3e0c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562a61f3e168 <line:643:9, col:17>
|     `-UnaryOperator 0x562a61f3e150 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f3e140 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562a61f15ca0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x562a61f3e220 <col:30, line:651:5>
|   `-ReturnStmt 0x562a61f3e210 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x562a61f3e1f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562a61f3e1c8 <col:16> 'bool' lvalue ->_read_status 0x562a61e19200
|         `-ImplicitCastExpr 0x562a61f3e1a8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x562a61f3e198 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562a61f15de8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x562a61f15d58 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x562a61f3e328 <col:32, line:658:5>
|   |-BinaryOperator 0x562a61f3e2d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562a61f3e238 <col:9> 'bool' lvalue ParmVar 0x562a61f15d58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562a61f3e2b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562a61f3e288 <col:13> 'bool' lvalue ->_read_status 0x562a61e19200
|   |     `-ImplicitCastExpr 0x562a61f3e268 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562a61f3e258 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562a61f3e318 <line:657:9, col:17>
|     `-UnaryOperator 0x562a61f3e300 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f3e2f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x562a61f15f38 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562a61f15ea8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x562a61f3e438 <col:44, line:663:5>
|   |-BinaryOperator 0x562a61f3e3e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562a61f3e348 <col:9> 'bool' lvalue ParmVar 0x562a61f15ea8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562a61f3e3c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562a61f3e398 <col:13> 'bool' lvalue ->_read_status 0x562a61e19200
|   |     `-ImplicitCastExpr 0x562a61f3e378 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562a61f3e368 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562a61f3e428 <line:662:9, col:17>
|     `-UnaryOperator 0x562a61f3e410 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61f3e400 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562a61f16000 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x562a61f160c8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x562a61f16190 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x562a61f16258 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x562a61f16568 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x562a61f162f8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f164c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x562a61f163d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3e7f0 <col:19, line:706:5>
|     `-IfStmt 0x562a61f3e7c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x562a61f3e538 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x562a61f3e6f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x562a61f3e6c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x562a61f3e688 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x562a61f3e590 <col:42> '<bound member function type>' ->simple_slot 0x562a61f37a20
|       |     | `-CXXThisExpr 0x562a61f3e580 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x562a61f3e628 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x562a61f3e5e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x562a61ca2898
|       |     | `-DeclRefExpr 0x562a61f3e5c0 <col:55> 'T' lvalue ParmVar 0x562a61f163d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x562a61f3e668 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x562a61f3e7b8 <line:705:13, col:34>
|         `-CallExpr 0x562a61f3e790 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x562a61f3e718 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x562a61f3e770 <col:33> 'T' lvalue ParmVar 0x562a61f163d8 'x' 'T &'
|-FunctionTemplateDecl 0x562a61f16838 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x562a61f165c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f16798 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x562a61f166a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x562a61f3ebd0 <col:31, line:717:5>
|     |-DeclStmt 0x562a61f3e930 <line:713:9, col:23>
|     | `-VarDecl 0x562a61f3e818 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x562a61f3e908 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562a61f3e890 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562a61f3e8e8 <col:21> 'T' lvalue ParmVar 0x562a61f166a8 'x' 'T &'
|     |-IfStmt 0x562a61f3eb80 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x562a61f3ea28 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x562a61f3eb60 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562a61f3eb00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562a61f3ea90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|     |   | `-DeclRefExpr 0x562a61f3ea70 <col:14> 'T *' lvalue Var 0x562a61f3e818 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x562a61f3eb40 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x562a61f3ebb8 <line:716:9, col:16>
|       `-DeclRefExpr 0x562a61f3eb98 <col:16> 'T *' lvalue Var 0x562a61f3e818 's' 'T *'
|-FunctionTemplateDecl 0x562a61f16c48 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x562a61f16898 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f16918 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562a61f16ba8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x562a61f169f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x562a61f16a98 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x562a61f3eee0 <col:37, line:726:5>
|     |-IfStmt 0x562a61f3ee70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x562a61f3ee90 <line:723:13, col:26>
|     | | `-VarDecl 0x562a61f3ec38 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x562a61f3ed28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x562a61f3ecb0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x562a61f3ed08 <col:25> 'T' lvalue ParmVar 0x562a61f169f8 'x' 'T &'
|     | |-DeclRefExpr 0x562a61f3ed50 <col:16> 'T *' lvalue Var 0x562a61f3ec38 's' 'T *'
|     | `-BinaryOperator 0x562a61f3ee50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562a61f3ee00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562a61f3ed90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|     |   | `-DeclRefExpr 0x562a61f3ed70 <col:14> 'T *' lvalue Var 0x562a61f3ec38 's' 'T *'
|     |   `-DeclRefExpr 0x562a61f3ee30 <col:18> 'const V' lvalue ParmVar 0x562a61f16a98 'value' 'const V &'
|     `-ReturnStmt 0x562a61f3eed0 <line:725:9, col:17>
|       `-UnaryOperator 0x562a61f3eeb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562a61f3eea8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562a61f17048 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x562a61f16cb0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562a61f16fa8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x562a61f16d60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f16de0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f16e88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x562a61f3fd00 <col:65, line:737:5>
|     |-DeclStmt 0x562a61f3ef78 <line:732:9, col:26>
|     | `-VarDecl 0x562a61f3ef10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562a61f3fcc8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x562a61f3fce8 <line:733:13, col:58>
|       | `-VarDecl 0x562a61f3efa0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562a61f3f180 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562a61f3f150 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562a61f3f138 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562a61f3f118 <col:26, col:58> 'String' (CXXTemporary 0x562a61f3f118)
|       |           `-CXXMemberCallExpr 0x562a61f3f0a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562a61f3f018 <col:26> '<bound member function type>' ->find 0x562a61f37038
|       |             | `-CXXThisExpr 0x562a61f3f008 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562a61f3f0e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f3f048 <col:31> 'const char *' lvalue ParmVar 0x562a61f16d60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562a61f3f0f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f3f068 <col:40> 'int' lvalue ParmVar 0x562a61f16de0 'flags' 'int'
|       |             `-DeclRefExpr 0x562a61f3f088 <col:47> 'Args::Slot *' lvalue Var 0x562a61f3ef10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562a61f3f238 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562a61f3f220 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562a61f3f200 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562a61f3f1d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |       `-ImplicitCastExpr 0x562a61f3f1b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562a61f3f198 <col:20> 'String' lvalue Var 0x562a61f3efa0 'str' 'String'
|       `-CompoundStmt 0x562a61f3fca8 <col:61, line:736:9>
|         |-DeclStmt 0x562a61f3f6f0 <line:734:13, col:76>
|         | `-VarDecl 0x562a61f3f288 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562a61f3f6c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562a61f3f630 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562a61f3f678 <col:60> 'T' lvalue ParmVar 0x562a61f16e88 'variable' 'T &'
|         |     `-UnaryOperator 0x562a61f3f6a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562a61f3f698 <col:71> 'Args *' this
|         `-CallExpr 0x562a61f3fc78 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x562a61f3f718 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|           | `-CXXThisExpr 0x562a61f3f708 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562a61f3fc38 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562a61f3f748 <col:23> 'T *' lvalue Var 0x562a61f3f288 's' 'T *'
|           | `-CallExpr 0x562a61f3fbf8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562a61f3f9d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x562a61f3fad0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x562a61f3faf0 <col:86> 'String' lvalue Var 0x562a61f3efa0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562a61f3fba0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562a61f3fb30 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|           |   | `-DeclRefExpr 0x562a61f3fb10 <col:92> 'T *' lvalue Var 0x562a61f3f288 's' 'T *'
|           |   `-UnaryOperator 0x562a61f3fbe0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562a61f3fbd0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x562a61f3fc58 <col:103> 'Args::Slot *' lvalue Var 0x562a61f3ef10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f17598 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562a61f170b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f17138 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562a61f174f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562a61f171f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f17278 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f17318 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x562a61f173b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x562a61f40ba0 <col:88, line:745:5>
|     |-DeclStmt 0x562a61f3fd98 <line:741:9, col:26>
|     | `-VarDecl 0x562a61f3fd30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562a61f3ffb8 <line:742:9, col:55>
|     | `-VarDecl 0x562a61f3fdc0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562a61f3ffa0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562a61f3ff70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562a61f3ff58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562a61f3ff38 <col:22, col:54> 'String' (CXXTemporary 0x562a61f3ff38)
|     |           `-CXXMemberCallExpr 0x562a61f3fec8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562a61f3fe38 <col:22> '<bound member function type>' ->find 0x562a61f37038
|     |             | `-CXXThisExpr 0x562a61f3fe28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562a61f3ff00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562a61f3fe68 <col:27> 'const char *' lvalue ParmVar 0x562a61f171f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562a61f3ff18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562a61f3fe88 <col:36> 'int' lvalue ParmVar 0x562a61f17278 'flags' 'int'
|     |             `-DeclRefExpr 0x562a61f3fea8 <col:43> 'Args::Slot *' lvalue Var 0x562a61f3fd30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562a61f40390 <line:743:9, col:72>
|     | `-VarDecl 0x562a61f40008 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562a61f40360 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562a61f402d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562a61f40318 <col:56> 'T' lvalue ParmVar 0x562a61f17318 'variable' 'T &'
|     |     `-UnaryOperator 0x562a61f40348 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562a61f40338 <col:67> 'Args *' this
|     `-CallExpr 0x562a61f40b70 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x562a61f403b8 <col:9> '<bound member function type>' ->postparse 0x562a61f37248
|       | `-CXXThisExpr 0x562a61f403a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562a61f40b30 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562a61f403e8 <col:19> 'T *' lvalue Var 0x562a61f40008 's' 'T *'
|       | `-ParenExpr 0x562a61f40b10 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x562a61f40ae0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562a61f40ac8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562a61f40ab0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562a61f40a90 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562a61f40a60 <col:25> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |     |       `-ImplicitCastExpr 0x562a61f40a48 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562a61f40408 <col:25> 'String' lvalue Var 0x562a61f3fdc0 'str' 'String'
|       |     |-CallExpr 0x562a61f408b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562a61f40690 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x562a61f40790 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x562a61f407b0 <col:89> 'String' lvalue Var 0x562a61f3fdc0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562a61f40860 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562a61f407f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|       |     | | `-DeclRefExpr 0x562a61f407d0 <col:95> 'T *' lvalue Var 0x562a61f40008 's' 'T *'
|       |     | `-UnaryOperator 0x562a61f408a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562a61f40890 <col:99> 'Args *' this
|       |     `-ParenExpr 0x562a61f40a28 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x562a61f40a08 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x562a61f409d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562a61f40988 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562a61f40918 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|       |         | | `-DeclRefExpr 0x562a61f408f8 <col:109> 'T *' lvalue Var 0x562a61f40008 's' 'T *'
|       |         | `-DeclRefExpr 0x562a61f409b8 <col:113> 'const V' lvalue ParmVar 0x562a61f173b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562a61f409f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x562a61f40b50 <col:128> 'Args::Slot *' lvalue Var 0x562a61f3fd30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f17ac8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x562a61f17610 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f17688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f17a28 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562a61f17748 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f177c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f17840 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f178e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x562a61f41798 <col:75, line:754:5>
|     |-DeclStmt 0x562a61f40c48 <line:749:9, col:26>
|     | `-VarDecl 0x562a61f40be0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562a61f41760 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x562a61f41780 <line:750:13, col:58>
|       | `-VarDecl 0x562a61f40c70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562a61f40e50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562a61f40e20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562a61f40e08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562a61f40de8 <col:26, col:58> 'String' (CXXTemporary 0x562a61f40de8)
|       |           `-CXXMemberCallExpr 0x562a61f40d78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562a61f40ce8 <col:26> '<bound member function type>' ->find 0x562a61f37038
|       |             | `-CXXThisExpr 0x562a61f40cd8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562a61f40db0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f40d18 <col:31> 'const char *' lvalue ParmVar 0x562a61f17748 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562a61f40dc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f40d38 <col:40> 'int' lvalue ParmVar 0x562a61f177c8 'flags' 'int'
|       |             `-DeclRefExpr 0x562a61f40d58 <col:47> 'Args::Slot *' lvalue Var 0x562a61f40be0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562a61f40f08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562a61f40ef0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562a61f40ed0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562a61f40ea0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |       `-ImplicitCastExpr 0x562a61f40e88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562a61f40e68 <col:20> 'String' lvalue Var 0x562a61f40c70 'str' 'String'
|       `-CompoundStmt 0x562a61f41740 <col:61, line:753:9>
|         |-DeclStmt 0x562a61f412e0 <line:751:13, col:63>
|         | `-VarDecl 0x562a61f40f58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562a61f412b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562a61f41220 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562a61f41268 <col:47> 'T' lvalue ParmVar 0x562a61f178e8 'variable' 'T &'
|         |     `-UnaryOperator 0x562a61f41298 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562a61f41288 <col:58> 'Args *' this
|         `-CallExpr 0x562a61f41710 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x562a61f41308 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|           | `-CXXThisExpr 0x562a61f412f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562a61f416d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562a61f41338 <col:23> 'T *' lvalue Var 0x562a61f40f58 's' 'T *'
|           | `-CallExpr 0x562a61f41690 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562a61f41520 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562a61f41568 <col:56> 'P' lvalue ParmVar 0x562a61f17840 'parser' 'P'
|           |   |-DeclRefExpr 0x562a61f41588 <col:64> 'String' lvalue Var 0x562a61f40c70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562a61f41638 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562a61f415c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|           |   | `-DeclRefExpr 0x562a61f415a8 <col:70> 'T *' lvalue Var 0x562a61f40f58 's' 'T *'
|           |   `-UnaryOperator 0x562a61f41678 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562a61f41668 <col:74> 'Args *' this
|           `-DeclRefExpr 0x562a61f416f0 <col:81> 'Args::Slot *' lvalue Var 0x562a61f40be0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f1f7b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562a61f17b40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562a61f17bb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x562a61f17c38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562a61f1f718 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562a61f17d00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f17d80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f17df8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f17e98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x562a61f1f5c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x562a61f447e8 <col:98, line:762:5>
|     |-DeclStmt 0x562a61f41830 <line:758:9, col:26>
|     | `-VarDecl 0x562a61f417c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562a61f43d10 <line:759:9, col:55>
|     | `-VarDecl 0x562a61f41858 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562a61f43cf8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562a61f43cc8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562a61f43cb0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562a61f43c90 <col:22, col:54> 'String' (CXXTemporary 0x562a61f43c90)
|     |           `-CXXMemberCallExpr 0x562a61f41960 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562a61f418d0 <col:22> '<bound member function type>' ->find 0x562a61f37038
|     |             | `-CXXThisExpr 0x562a61f418c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562a61f41998 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562a61f41900 <col:27> 'const char *' lvalue ParmVar 0x562a61f17d00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562a61f43c70 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562a61f41920 <col:36> 'int' lvalue ParmVar 0x562a61f17d80 'flags' 'int'
|     |             `-DeclRefExpr 0x562a61f41940 <col:43> 'Args::Slot *' lvalue Var 0x562a61f417c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562a61f44130 <line:760:9, col:59>
|     | `-VarDecl 0x562a61f43d68 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562a61f44100 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562a61f44070 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562a61f440b8 <col:43> 'T' lvalue ParmVar 0x562a61f17e98 'variable' 'T &'
|     |     `-UnaryOperator 0x562a61f440e8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562a61f440d8 <col:54> 'Args *' this
|     `-CallExpr 0x562a61f447b8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x562a61f44158 <col:9> '<bound member function type>' ->postparse 0x562a61f37248
|       | `-CXXThisExpr 0x562a61f44148 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562a61f44778 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562a61f44188 <col:19> 'T *' lvalue Var 0x562a61f43d68 's' 'T *'
|       | `-ParenExpr 0x562a61f44758 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x562a61f44728 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562a61f44710 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562a61f446f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562a61f446d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562a61f446a8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |     |       `-ImplicitCastExpr 0x562a61f44690 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562a61f441a8 <col:25> 'String' lvalue Var 0x562a61f41858 'str' 'String'
|       |     |-CallExpr 0x562a61f44500 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562a61f44390 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x562a61f443d8 <col:59> 'P' lvalue ParmVar 0x562a61f17df8 'parser' 'P'
|       |     | |-DeclRefExpr 0x562a61f443f8 <col:67> 'String' lvalue Var 0x562a61f41858 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562a61f444a8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562a61f44438 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|       |     | | `-DeclRefExpr 0x562a61f44418 <col:73> 'T *' lvalue Var 0x562a61f43d68 's' 'T *'
|       |     | `-UnaryOperator 0x562a61f444e8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562a61f444d8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x562a61f44670 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x562a61f44650 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x562a61f44620 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562a61f445d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562a61f44560 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|       |         | | `-DeclRefExpr 0x562a61f44540 <col:87> 'T *' lvalue Var 0x562a61f43d68 's' 'T *'
|       |         | `-DeclRefExpr 0x562a61f44600 <col:91> 'const V' lvalue ParmVar 0x562a61f1f5c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562a61f44640 <col:98> 'bool' true
|       `-DeclRefExpr 0x562a61f44798 <col:106> 'Args::Slot *' lvalue Var 0x562a61f417c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f1fe28 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x562a61f1f838 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f1f8b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562a61f1f938 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562a61f1fd88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562a61f1fa00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f1fa80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f1faf8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f1fb98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x562a61f1fc38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x562a61f457c8 <col:60, line:773:5>
|     |-DeclStmt 0x562a61f44890 <line:767:9, col:26>
|     | `-VarDecl 0x562a61f44828 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562a61f45790 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x562a61f457b0 <line:768:13, col:58>
|       | `-VarDecl 0x562a61f448b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562a61f44a98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562a61f44a68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562a61f44a50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562a61f44a30 <col:26, col:58> 'String' (CXXTemporary 0x562a61f44a30)
|       |           `-CXXMemberCallExpr 0x562a61f449c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562a61f44930 <col:26> '<bound member function type>' ->find 0x562a61f37038
|       |             | `-CXXThisExpr 0x562a61f44920 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562a61f449f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f44960 <col:31> 'const char *' lvalue ParmVar 0x562a61f1fa00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562a61f44a10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f44980 <col:40> 'int' lvalue ParmVar 0x562a61f1fa80 'flags' 'int'
|       |             `-DeclRefExpr 0x562a61f449a0 <col:47> 'Args::Slot *' lvalue Var 0x562a61f44828 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562a61f44b50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562a61f44b38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562a61f44b18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562a61f44ae8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |       `-ImplicitCastExpr 0x562a61f44ad0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562a61f44ab0 <col:20> 'String' lvalue Var 0x562a61f448b8 'str' 'String'
|       `-CompoundStmt 0x562a61f45768 <col:61, line:772:9>
|         |-DeclStmt 0x562a61f44e90 <line:769:13, col:66>
|         | `-VarDecl 0x562a61f44ba8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x562a61f44e60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562a61f44dd0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562a61f44e18 <col:49> 'T1' lvalue ParmVar 0x562a61f1fb98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x562a61f44e48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562a61f44e38 <col:61> 'Args *' this
|         |-DeclStmt 0x562a61f45200 <line:770:13, col:66>
|         | `-VarDecl 0x562a61f44f18 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x562a61f451d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562a61f45140 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562a61f45188 <col:49> 'T2' lvalue ParmVar 0x562a61f1fc38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x562a61f451b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562a61f451a8 <col:61> 'Args *' this
|         `-CallExpr 0x562a61f45738 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x562a61f45228 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|           | `-CXXThisExpr 0x562a61f45218 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562a61f456f8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x562a61f45298 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x562a61f45258 <col:23> 'T1 *' lvalue Var 0x562a61f44ba8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x562a61f45278 <col:29> 'T2 *' lvalue Var 0x562a61f44f18 's2' 'T2 *'
|           | `-CallExpr 0x562a61f456b0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562a61f45480 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562a61f454c8 <col:63> 'P' lvalue ParmVar 0x562a61f1faf8 'parser' 'P'
|           |   |-DeclRefExpr 0x562a61f454e8 <col:71> 'String' lvalue Var 0x562a61f448b8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562a61f45598 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562a61f45528 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|           |   | `-DeclRefExpr 0x562a61f45508 <col:77> 'T1 *' lvalue Var 0x562a61f44ba8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x562a61f45658 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562a61f455e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|           |   | `-DeclRefExpr 0x562a61f455c8 <col:82> 'T2 *' lvalue Var 0x562a61f44f18 's2' 'T2 *'
|           |   `-UnaryOperator 0x562a61f45698 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562a61f45688 <col:87> 'Args *' this
|           `-DeclRefExpr 0x562a61f45718 <col:94> 'Args::Slot *' lvalue Var 0x562a61f44828 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f20218 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x562a61f1fea8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f20178 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562a61f1ff60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f1ffe0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f20058 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562a61f45ce0 <col:67, line:780:5>
|     |-DeclStmt 0x562a61f45860 <line:777:9, col:26>
|     | `-VarDecl 0x562a61f457f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562a61f45ca8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x562a61f45cc8 <line:778:13, col:58>
|       | `-VarDecl 0x562a61f45888 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562a61f45a68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562a61f45a38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562a61f45a20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562a61f45a00 <col:26, col:58> 'String' (CXXTemporary 0x562a61f45a00)
|       |           `-CXXMemberCallExpr 0x562a61f45990 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562a61f45900 <col:26> '<bound member function type>' ->find 0x562a61f37038
|       |             | `-CXXThisExpr 0x562a61f458f0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562a61f459c8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f45930 <col:31> 'const char *' lvalue ParmVar 0x562a61f1ff60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562a61f459e0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562a61f45950 <col:40> 'int' lvalue ParmVar 0x562a61f1ffe0 'flags' 'int'
|       |             `-DeclRefExpr 0x562a61f45970 <col:47> 'Args::Slot *' lvalue Var 0x562a61f457f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562a61f45b20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562a61f45b08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562a61f45ae8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562a61f45ab8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|       |       `-ImplicitCastExpr 0x562a61f45aa0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562a61f45a80 <col:20> 'String' lvalue Var 0x562a61f45888 'str' 'String'
|       `-CallExpr 0x562a61f45c78 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x562a61f45b48 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|         | `-CXXThisExpr 0x562a61f45b38 <col:13> 'Args *' implicit this
|         |-CallExpr 0x562a61f45c28 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x562a61f45b98 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x562a61f45b78 <col:23> 'P' lvalue ParmVar 0x562a61f20058 'parser' 'P'
|         | |-DeclRefExpr 0x562a61f45be0 <col:36> 'String' lvalue Var 0x562a61f45888 'str' 'String'
|         | `-UnaryOperator 0x562a61f45c10 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x562a61f45c00 <col:42> 'Args *' this
|         `-DeclRefExpr 0x562a61f45c58 <col:49> 'Args::Slot *' lvalue Var 0x562a61f457f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562a61f205b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562a61f20288 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562a61f20518 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562a61f20340 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f203c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f20438 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x562a61f46650 <col:71, line:792:5>
|     |-DeclStmt 0x562a61f45d78 <line:784:9, col:26>
|     | `-VarDecl 0x562a61f45d10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562a61f45e48 <line:785:9, col:29>
|     | `-VarDecl 0x562a61f45da8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562a61f45e30 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562a61f45e10 <col:28> 'int' 1
|     |-WhileStmt 0x562a61f46500 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x562a61f46520 <line:786:16, col:61>
|     | | `-VarDecl 0x562a61f45e70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562a61f46050 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562a61f46020 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562a61f46008 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562a61f45fe8 <col:29, col:61> 'String' (CXXTemporary 0x562a61f45fe8)
|     | |           `-CXXMemberCallExpr 0x562a61f45f78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562a61f45ee8 <col:29> '<bound member function type>' ->find 0x562a61f37038
|     | |             | `-CXXThisExpr 0x562a61f45ed8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562a61f45fb0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f45f18 <col:34> 'const char *' lvalue ParmVar 0x562a61f20340 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562a61f45fc8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f45f38 <col:43> 'int' lvalue ParmVar 0x562a61f203c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x562a61f45f58 <col:50> 'Args::Slot *' lvalue Var 0x562a61f45d10 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562a61f46108 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562a61f460f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562a61f460d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562a61f460a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|     | |       `-ImplicitCastExpr 0x562a61f46088 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562a61f46068 <col:23> 'String' lvalue Var 0x562a61f45e70 'str' 'String'
|     | `-CompoundStmt 0x562a61f464d8 <col:64, line:790:9>
|     |   |-CallExpr 0x562a61f46260 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x562a61f46130 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|     |   | | `-CXXThisExpr 0x562a61f46120 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562a61f46210 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562a61f46180 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562a61f46160 <col:23> 'P' lvalue ParmVar 0x562a61f20438 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562a61f461c8 <col:36> 'String' lvalue Var 0x562a61f45e70 'str' 'String'
|     |   | | `-UnaryOperator 0x562a61f461f8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562a61f461e8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x562a61f46240 <col:49> 'Args::Slot *' lvalue Var 0x562a61f45d10 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562a61f463f8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562a61f46290 <col:13> 'int' lvalue Var 0x562a61f45da8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562a61f463e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562a61f463c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562a61f46328 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562a61f46308 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562a61f462f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562a61f462b0 <col:28> 'int' lvalue Var 0x562a61f45da8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562a61f462d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562a61f463a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562a61f46378 <col:49> 'bool' lvalue ->_read_status 0x562a61e19200
|     |   |         `-ImplicitCastExpr 0x562a61f46358 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562a61f46348 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562a61f464a8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562a61f46418 <col:13> 'int' lvalue ParmVar 0x562a61f203c0 'flags' 'int'
|     |     `-UnaryOperator 0x562a61f46490 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562a61f46478 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562a61f46458 <col:23> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562a61f46630 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562a61f46568 <col:9> 'bool' lvalue ->_read_status 0x562a61e19200
|       | `-ImplicitCastExpr 0x562a61f46548 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562a61f46538 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562a61f46610 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562a61f465f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562a61f465d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562a61f46598 <col:25> 'int' lvalue Var 0x562a61f45da8 'read_status' 'int'
|           `-IntegerLiteral 0x562a61f465b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562a61f20a98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562a61f20628 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f206a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f209f8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562a61f20768 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f207e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f20860 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f20908 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x562a61f475e0 <col:84, line:805:5>
|     |-DeclStmt 0x562a61f466f8 <line:796:9, col:26>
|     | `-VarDecl 0x562a61f46690 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562a61f467c8 <line:797:9, col:29>
|     | `-VarDecl 0x562a61f46728 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562a61f467b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562a61f46790 <col:28> 'int' 1
|     |-DeclStmt 0x562a61f46b00 <line:798:9, col:71>
|     | `-VarDecl 0x562a61f46818 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562a61f46ad0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562a61f46a40 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x562a61f46a88 <col:55> 'T' lvalue ParmVar 0x562a61f20908 'variable' 'T &'
|     |     `-UnaryOperator 0x562a61f46ab8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562a61f46aa8 <col:66> 'Args *' this
|     |-WhileStmt 0x562a61f47490 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x562a61f474b0 <line:799:16, col:61>
|     | | `-VarDecl 0x562a61f46b28 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562a61f46d08 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562a61f46cd8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562a61f46cc0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562a61f46ca0 <col:29, col:61> 'String' (CXXTemporary 0x562a61f46ca0)
|     | |           `-CXXMemberCallExpr 0x562a61f46c30 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562a61f46ba0 <col:29> '<bound member function type>' ->find 0x562a61f37038
|     | |             | `-CXXThisExpr 0x562a61f46b90 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562a61f46c68 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f46bd0 <col:34> 'const char *' lvalue ParmVar 0x562a61f20768 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562a61f46c80 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f46bf0 <col:43> 'int' lvalue ParmVar 0x562a61f207e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x562a61f46c10 <col:50> 'Args::Slot *' lvalue Var 0x562a61f46690 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562a61f46dc0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562a61f46da8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562a61f46d88 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562a61f46d58 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|     | |       `-ImplicitCastExpr 0x562a61f46d40 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562a61f46d20 <col:23> 'String' lvalue Var 0x562a61f46b28 'str' 'String'
|     | `-CompoundStmt 0x562a61f47468 <col:64, line:803:9>
|     |   |-CallExpr 0x562a61f471f0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x562a61f46de8 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|     |   | | `-CXXThisExpr 0x562a61f46dd8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x562a61f471b0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x562a61f46e18 <col:23> 'T *' lvalue Var 0x562a61f46818 's' 'T *'
|     |   | | `-CallExpr 0x562a61f47170 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x562a61f47000 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x562a61f47048 <col:56> 'P' lvalue ParmVar 0x562a61f20860 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x562a61f47068 <col:64> 'String' lvalue Var 0x562a61f46b28 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x562a61f47118 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x562a61f470a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|     |   | |   | `-DeclRefExpr 0x562a61f47088 <col:70> 'T *' lvalue Var 0x562a61f46818 's' 'T *'
|     |   | |   `-UnaryOperator 0x562a61f47158 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x562a61f47148 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x562a61f471d0 <col:81> 'Args::Slot *' lvalue Var 0x562a61f46690 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562a61f47388 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562a61f47220 <col:13> 'int' lvalue Var 0x562a61f46728 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562a61f47370 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562a61f47350 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562a61f472b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562a61f47298 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562a61f47280 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562a61f47240 <col:28> 'int' lvalue Var 0x562a61f46728 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562a61f47260 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562a61f47338 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562a61f47308 <col:49> 'bool' lvalue ->_read_status 0x562a61e19200
|     |   |         `-ImplicitCastExpr 0x562a61f472e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562a61f472d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562a61f47438 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562a61f473a8 <col:13> 'int' lvalue ParmVar 0x562a61f207e8 'flags' 'int'
|     |     `-UnaryOperator 0x562a61f47420 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562a61f47408 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562a61f473e8 <col:23> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562a61f475c0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562a61f474f8 <col:9> 'bool' lvalue ->_read_status 0x562a61e19200
|       | `-ImplicitCastExpr 0x562a61f474d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562a61f474c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562a61f475a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562a61f47580 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562a61f47568 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562a61f47528 <col:25> 'int' lvalue Var 0x562a61f46728 'read_status' 'int'
|           `-IntegerLiteral 0x562a61f47548 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562a61f21078 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x562a61f20b10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562a61f20b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562a61f20fd8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562a61f20c48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562a61f20cc8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x562a61f20d40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x562a61f20e90 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x562a61f483e8 <col:87, line:821:5>
|     |-DeclStmt 0x562a61f47690 <line:809:9, col:26>
|     | `-VarDecl 0x562a61f47628 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562a61f47760 <line:810:9, col:29>
|     | `-VarDecl 0x562a61f476c0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562a61f47748 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562a61f47728 <col:28> 'int' 1
|     |-DeclStmt 0x562a61f479a8 <line:811:9, col:38>
|     | `-VarDecl 0x562a61f47890 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x562a61f47980 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562a61f47908 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562a61f47960 <col:29> 'Vector<T>' lvalue ParmVar 0x562a61f20e90 'variable' 'Vector<T> &'
|     |-WhileStmt 0x562a61f48298 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x562a61f482b8 <line:812:16, col:61>
|     | | `-VarDecl 0x562a61f479d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562a61f47bb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562a61f47b80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562a61f47b68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562a61f47b48 <col:29, col:61> 'String' (CXXTemporary 0x562a61f47b48)
|     | |           `-CXXMemberCallExpr 0x562a61f47ad8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562a61f47a48 <col:29> '<bound member function type>' ->find 0x562a61f37038
|     | |             | `-CXXThisExpr 0x562a61f47a38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562a61f47b10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f47a78 <col:34> 'const char *' lvalue ParmVar 0x562a61f20c48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562a61f47b28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562a61f47a98 <col:43> 'int' lvalue ParmVar 0x562a61f20cc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x562a61f47ab8 <col:50> 'Args::Slot *' lvalue Var 0x562a61f47628 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562a61f47c68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562a61f47c50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562a61f47c30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562a61f47c00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x562a61c69208
|     | |       `-ImplicitCastExpr 0x562a61f47be8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562a61f47bc8 <col:23> 'String' lvalue Var 0x562a61f479d0 'str' 'String'
|     | `-CompoundStmt 0x562a61f48260 <col:64, line:819:9>
|     |   |-DeclStmt 0x562a61f47d28 <line:813:13, col:23>
|     |   | `-VarDecl 0x562a61f47c90 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x562a61f47d08 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x562a61f47ea8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x562a61f47d50 <col:13> '<bound member function type>' ->postparse 0x562a61f37248
|     |   | | `-CXXThisExpr 0x562a61f47d40 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562a61f47e50 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562a61f47da0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562a61f47d80 <col:23> 'P' lvalue ParmVar 0x562a61f20d40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562a61f47de8 <col:36> 'String' lvalue Var 0x562a61f479d0 'str' 'String'
|     |   | | |-DeclRefExpr 0x562a61f47e08 <col:41> 'T' lvalue Var 0x562a61f47c90 'sx' 'T'
|     |   | | `-UnaryOperator 0x562a61f47e38 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562a61f47e28 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x562a61f47e88 <col:53> 'Args::Slot *' lvalue Var 0x562a61f47628 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x562a61f48000 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x562a61f47f38 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x562a61f47f08 <col:17> 'bool' lvalue ->_read_status 0x562a61e19200
|     |   | |   `-ImplicitCastExpr 0x562a61f47ee8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x562a61f47ed8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x562a61f47fd8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x562a61f47f70 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x562a61f47f50 <col:17> 'Vector<T> *' lvalue Var 0x562a61f47890 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x562a61f47fb8 <col:30> 'T' lvalue Var 0x562a61f47c90 'sx' 'T'
|     |   |-BinaryOperator 0x562a61f48180 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562a61f48018 <col:13> 'int' lvalue Var 0x562a61f476c0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562a61f48168 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562a61f48148 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562a61f480b0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562a61f48090 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562a61f48078 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562a61f48038 <col:28> 'int' lvalue Var 0x562a61f476c0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562a61f48058 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562a61f48130 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562a61f48100 <col:49> 'bool' lvalue ->_read_status 0x562a61e19200
|     |   |         `-ImplicitCastExpr 0x562a61f480e0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562a61f480d0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562a61f48230 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562a61f481a0 <col:13> 'int' lvalue ParmVar 0x562a61f20cc8 'flags' 'int'
|     |     `-UnaryOperator 0x562a61f48218 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562a61f48200 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562a61f481e0 <col:23> 'const int' lvalue Var 0x562a61f06738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562a61f483c8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562a61f48300 <col:9> 'bool' lvalue ->_read_status 0x562a61e19200
|       | `-ImplicitCastExpr 0x562a61f482e0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562a61f482d0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562a61f483a8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562a61f48388 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562a61f48370 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562a61f48330 <col:25> 'int' lvalue Var 0x562a61f476c0 'read_status' 'int'
|           `-IntegerLiteral 0x562a61f48350 <col:40> 'int' 1
|-AccessSpecDecl 0x562a61f210f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x562a61f21118 prev 0x562a61f04a38 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x562a61f21210 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x562a61f21300 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x562a61f48420 <col:16, line:828:9>
| |-CXXDestructorDecl 0x562a61f213f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x562a61f48430 <col:25, line:830:9>
| |-CXXMethodDecl 0x562a61f214f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x562a61f215a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x562a61f21648 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562a61f21648
| | `-ParmVarDecl 0x562a61f21758 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x562a61f21f18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562a61f21f18
|   `-ParmVarDecl 0x562a61f22028 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x562a61f217c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x562a61f21928 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x562a61f21b20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x562a61f219d0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x562a61f21a48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x562a61f48610 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x562a61f21dd8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x562a61f48480 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x562a61f48440 <col:20> 'void *' lvalue ParmVar 0x562a61f219d0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x562a61f21e40 '_slot' 'char *'
| | | `-CXXNewExpr 0x562a61f48508 <col:32, col:45> 'char *' array Function 0x562a61a884e8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x562a61f484f0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x562a61f484c0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x562a61f21a48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x562a61f21ea0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x562a61f485d0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x562a61f48590 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x562a61f21a48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x562a61f48690 <col:61, line:838:9>
| |-CXXDestructorDecl 0x562a61f21c20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x562a61f213f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x562a61f48718 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x562a61f486f8 <line:840:13, col:22> 'void' array Function 0x562a61a88848 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x562a61f486e0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x562a61f486b0 <col:22> 'char *' lvalue ->_slot 0x562a61f21e40
| |         `-CXXThisExpr 0x562a61f486a0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x562a61f21d20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x562a61f214f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x562a61f48908 <col:22, line:844:9>
| |   `-CallExpr 0x562a61f48870 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x562a61f48858 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x562a61f48838 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x562a61bba8d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x562a61f488a8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x562a61f48788 <col:20> 'void *' lvalue ->_ptr 0x562a61f21dd8
| |     |   `-CXXThisExpr 0x562a61f48778 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x562a61f488d8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x562a61f488c0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x562a61f487c8 <col:26> 'char *' lvalue ->_slot 0x562a61f21e40
| |     |     `-CXXThisExpr 0x562a61f487b8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x562a61f488f0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x562a61f48808 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x562a61f21ea0
| |         `-CXXThisExpr 0x562a61f487f8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x562a61f21dd8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x562a61f21e40 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x562a61f21ea0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x562a61f22098 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562a61f22098
| | `-ParmVarDecl 0x562a61f221a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x562a61f22248 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562a61f22248
|   `-ParmVarDecl 0x562a61f22358 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x562a61f224f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x562a61f223c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x562a61f22468 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x562a61f22790 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x562a61f22988 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x562a61f22858 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x562a61f22b08 '_ptr' 'T *'
|   | | `-ParenListExpr 0x562a61f48940 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x562a61f48920 <col:20> 'T *' lvalue ParmVar 0x562a61f22858 'ptr' 'T *'
|   | `-CompoundStmt 0x562a61f48990 <col:25, line:854:9>
|   |-CXXMethodDecl 0x562a61f22a58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x562a61f214f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x562a61f48b40 <col:22, line:857:9>
|   |   `-CallExpr 0x562a61f48b10 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x562a61f489a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x562a61c51fe8 0x562a61bfae98
|   |     |-CXXOperatorCallExpr 0x562a61f48aa0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x562a61f48a30 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562a61e59d18 0x562a61e59938 0x562a61e59568 0x562a61e59188 0x562a61e58da8 0x562a61e589d8
|   |     | `-MemberExpr 0x562a61f48a00 <col:29> 'T *' lvalue ->_ptr 0x562a61f22b08
|   |     |   `-CXXThisExpr 0x562a61f489f0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x562a61f48ae0 <col:35> 'T' lvalue ->_slot 0x562a61f22b68
|   |       `-CXXThisExpr 0x562a61f48ad0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x562a61f22b08 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x562a61f22b68 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x562a61f22bd0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x562a61f22cd0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x562a61f22d20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61f22cb0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x562a61f22c90 <col:31> 'int' 48
|-FieldDecl 0x562a61f22d48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x562a61f22da8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x562a61f22e08 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x562a61f22f40 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x562a61f368e0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x562a61f36940 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x562a61f369f0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x562a61f36c18 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x562a61f36b20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x562a61f36d68 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x562a61f36cd8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x562a61f37038 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x562a61f36e28 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x562a61f36ea8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x562a61f36f50 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x562a61f37248 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x562a61f37100 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x562a61f37178 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x562a61f37318 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x562a61f37468 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x562a61f373d0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x562a61f377f8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x562a61f37528 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x562a61f375a8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x562a61f37650 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x562a61f37708 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x562a61f37a20 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x562a61f378d0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x562a61f37948 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x562a61f37d38 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x562a61f37ad0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x562a61f37c98 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x562a61f37ba8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61cab1e0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61cab2f8 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x562a61cab388 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x562a61cab498 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x562a61cab3c8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x562a61cab8c8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x562a61cab990 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61cab950 <col:9> 'int' lvalue ParmVar 0x562a61cab3c8 'p' 'int'
| `-CompoundStmt 0x562a61cabf58 <col:12, line:412:5>
|   `-ParenExpr 0x562a61cabf38 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x562a61cabf08 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x562a61cabb38 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x562a61cabb08 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x562a61caba50 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x562a61caba38 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x562a61cab9e8 <col:23> 'int' lvalue ->ip_p 0x562a61cab8c8
|       |   | |   `-CXXThisExpr 0x562a61cab9d8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x562a61caba18 <col:30> 'int' 0
|       |   `-BinaryOperator 0x562a61cabae8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x562a61cabad0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x562a61caba80 <col:35> 'int' lvalue ->ip_p 0x562a61cab8c8
|       |     |   `-CXXThisExpr 0x562a61caba70 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x562a61cabab0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x562a61cabb98 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x562a61cabb78 <col:55> 'int' 0
|       `-CallExpr 0x562a61cabe68 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x562a61cabe50 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x562a61cabe30 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x562a61cabea8 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x562a61cabc88 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x562a61cabec0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x562a61cabcf8 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x562a61cabed8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x562a61cabd30 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x562a61cabef0 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x562a61cabe18 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x562a61cabe00 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x562a61cabdc8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x562a61cab7f8 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x562a61cab558 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x562a61cab628 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x562a61cab6a0 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562a61cab930 <col:34> 'const ArgContext' lvalue Var 0x562a61c97e20 'blank_args' 'const ArgContext'
|-FieldDecl 0x562a61cab8c8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x562a61f7c288 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x562a61f7c288
| `-ParmVarDecl 0x562a61f7c398 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x562a61f7c438 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61f7c548 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x562a61cab8c8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x562a61f7cd30 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562a61f7cd00 <col:7> 'int' xvalue .ip_p 0x562a61cab8c8
| |     `-CXXStaticCastExpr 0x562a61f7ccd0 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x562a61f7cca0 <col:7> 'IPPortArg' lvalue ParmVar 0x562a61f7c548 '' 'IPPortArg &&'
| `-CompoundStmt 0x562a61f7cd78 <col:7>
`-CXXDestructorDecl 0x562a61f7c5e8 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61f63a90 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61f63ba8 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x562a61f63c38 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x562a61f63de8 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61f63c70 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x562a61f63ce8 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562a61f644f8 <col:60> 'const ArgContext' lvalue Var 0x562a61f48b68 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562a61f64578 <col:72, line:1329:5>
|   `-ReturnStmt 0x562a61f64568 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x562a61f64558 <col:16> 'bool' true
|-CXXMethodDecl 0x562a61f64078 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61f63ea8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x562a61f63f20 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x562a61f63f98 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562a61f64518 <col:79> 'const ArgContext' lvalue Var 0x562a61f48b68 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562a61f64958 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x562a61f64900 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x562a61f648e8 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x562a61f648c8 <col:16> 'String &(const String &)' lvalue CXXMethod 0x562a61c84f90 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x562a61f64590 <col:9> 'String' lvalue ParmVar 0x562a61f63f20 'result' 'String &'
|   | `-DeclRefExpr 0x562a61f645b0 <col:18> 'const String' lvalue ParmVar 0x562a61f63ea8 'str' 'const String &'
|   `-ReturnStmt 0x562a61f64948 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x562a61f64938 <col:16> 'bool' true
|-CXXMethodDecl 0x562a61f64428 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61f64140 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x562a61f64290 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x562a61f64308 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562a61f64538 <col:87> 'const ArgContext' lvalue Var 0x562a61f48b68 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562a61f64a90 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x562a61f64a48 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x562a61f64a18 <col:9, col:16> '<bound member function type>' .push_back 0x562a61ee7da8
|   | | `-DeclRefExpr 0x562a61f64978 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x562a61f64290 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x562a61f649f8 <col:26> 'const String' lvalue ParmVar 0x562a61f64140 'str' 'const String &'
|   `-ReturnStmt 0x562a61f64a80 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x562a61f64a70 <col:16> 'bool' true
|-CXXConstructorDecl 0x562a61f7ce68 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562a61f7cf68 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x562a61f7cf68
| `-ParmVarDecl 0x562a61f7d078 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x562a61f7d118 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61f7d228 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x562a61f8c050 <col:7>
`-CXXDestructorDecl 0x562a61f7d2c8 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61f60a20 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61f60b38 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x562a61f60bc8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x562a61f60e08 <line:1258:5, col:91> col:17 parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61f60c00 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x562a61f60c80 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x562a61f60cf8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562a61f61020 <col:81> 'const ArgContext' lvalue Var 0x562a61f48b68 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x562a61f60f60 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x562a61f60ed0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x562a61f61178 <col:35, line:1261:5>
|   `-ReturnStmt 0x562a61f61168 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x562a61f61150 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x562a61f61120 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562a61f61108 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x562a61f610e0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x562a61f610c0 <col:16, col:24> 'String' (CXXTemporary 0x562a61f610c0)
|               `-CXXConstructExpr 0x562a61f61088 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x562a61f61070 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x562a61f61050 <col:23> 'bool' lvalue ParmVar 0x562a61f60ed0 'x' 'bool'
|-CXXConstructorDecl 0x562a61f8c3b8 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562a61f8c4b8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x562a61f8c4b8
| `-ParmVarDecl 0x562a61f8c5c8 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x562a61f8c668 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61f8c778 <col:7> col:7 'BoolArg &&'
| `-CompoundStmt 0x562a61f8cea0 <col:7>
`-CXXDestructorDecl 0x562a61f8c818 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61ca4600 prev 0x562a61c97e88 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61ca46f8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x562a61ca4788 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x562a61ca4bb0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x562a61ca47c8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x562a61ca4848 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x562a61ca4980 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x562a61ca4a30 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x562a61ca4e78 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61ca4c80 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x562a61ca4cf8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x562a61ca4d98 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562a61ca9798 <col:34> 'const ArgContext' lvalue Var 0x562a61c97e20 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x562a61ca91e8 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61ca4f40 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x562a61ca5030 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x562a61ca50a8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562a61ca97b8 <col:34> 'const ArgContext' lvalue Var 0x562a61c97e20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562a61ca9998 <col:46, line:375:5>
|   `-ReturnStmt 0x562a61ca9988 <line:374:2, col:63>
|     `-CallExpr 0x562a61ca9950 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x562a61ca9938 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562a61ca98f0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x562a61ca4e78 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x562a61ca9850 <col:15> 'const String' lvalue ParmVar 0x562a61ca4f40 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x562a61ca98a0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x562a61ca9870 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x562a61ca5030 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x562a61ca98d0 <col:59> 'const ArgContext' lvalue ParmVar 0x562a61ca50a8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x562a61ca96c8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x562a61ca92b0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x562a61ca9530 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x562a61ca95a8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562a61ca97d8 <col:34> 'const ArgContext' lvalue Var 0x562a61c97e20 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x562a61f8d898 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562a61f8d998 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x562a61f8d998
| `-ParmVarDecl 0x562a61f8daa8 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x562a61f8db48 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x562a61f8db48
| `-ParmVarDecl 0x562a61f8dc58 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x562a61f8dcf8 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e6fbb8 prev 0x562a61e64880 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61e6fcb0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x562a61e6fda0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x562a61e6fec8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x562a61e70048 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x562a61e701c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x562a61e70348 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x562a61e811b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562a61e81a28 <col:11>
|-CXXDestructorDecl 0x562a61e81290 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562a61e813c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562a61e813c8
| `-ParmVarDecl 0x562a61e814d8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x562a61e81578 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562a61e81578
| `-ParmVarDecl 0x562a61e81688 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x562a61e86e58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61e86f68 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x562a61e871e8 <col:11>
|   `-ReturnStmt 0x562a61e871d8 <col:11>
|     `-UnaryOperator 0x562a61e871c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562a61e871b0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x562a61e86fd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562a61e86fd8
  `-ParmVarDecl 0x562a61e870e8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e703b0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562a61e704c8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x562a61e70568 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x562a61e705d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x562a61e70638 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x562a61e706a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x562a61e70700 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x562a61e707c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x562a61e70820 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x562a61e70880 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x562a61e810c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x562a61e70568 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x562a61e81a38 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x562a61e81a90 <col:12>
|-CXXConstructorDecl 0x562a61e816f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562a61e816f8
| `-ParmVarDecl 0x562a61e81808 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x562a61e818a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562a61e818a8
| `-ParmVarDecl 0x562a61e819b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x562a61e86540 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e5df90 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562a61e5e0a8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x562a61e5e138 <col:16, col:22> col:16 public
|-EnumDecl 0x562a61e5e160 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x562a61e5e260 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x562a61e5e340 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e5e240 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x562a61e5e220 <col:21> 'int' 28
| `-EnumConstantDecl 0x562a61e5e2f0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x562a61e5e358 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e5e2d0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x562a61e5e2b0 <col:22> 'int' 64
|-CXXMethodDecl 0x562a61e5e698 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562a61e5e380 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61e5e400 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x562a61e5e478 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61e5e4f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e5e758 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562a61e5e958 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x562a61e5e7d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x562a61e5e848 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e5ea08 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562a61e5eb68 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x562a61e5ea78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e5ec10 <col:72> warn_unused_result ""
|-TypedefDecl 0x562a61e5ef70 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x562a61e5ef00 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x562a61e5eea0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x562a61e5ee60 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x562a619354e0 'void'
|       |-PointerType 0x562a61b6d6f0 'unsigned char *'
|       | `-BuiltinType 0x562a619355e0 'unsigned char'
|       |-TypedefType 0x562a619da590 'size_t' sugar
|       | |-Typedef 0x562a619a5be0 'size_t'
|       | `-BuiltinType 0x562a61935640 'unsigned long'
|       `-PointerType 0x562a61935ce0 'void *'
|         `-BuiltinType 0x562a619354e0 'void'
|-CXXMethodDecl 0x562a61e5f3e8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x562a61e5efe0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x562a61e5f058 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61e5f0f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x562a61e5f170 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x562a61e7a060 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x562a61e7a048 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x562a61e7a010 <col:58> 'int' 0
| |-ParmVarDecl 0x562a61e5f1f0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x562a61e7a088 <col:76> 'int' 0
| |-ParmVarDecl 0x562a61e5f270 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x562a61e7a0a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x562a61e5f4b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x562a61e5f538 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562a61e5f5f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x562a61e5f698 <col:20>
| `-OptimizeNoneAttr 0x562a61e5f6f0 <col:30>
|-CXXMethodDecl 0x562a61e5f768 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x562a61e5f808 <col:20>
| `-OptimizeNoneAttr 0x562a61e5f860 <col:30>
|-CXXMethodDecl 0x562a61e5f8d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x562a61e5f978 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x562a61e5fa28 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x562a61e5fac8 <col:20>
| |-OptimizeNoneAttr 0x562a61e5fb20 <col:30>
| `-WarnUnusedResultAttr 0x562a61e5fb48 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x562a61e5fba0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x562a61e5fc40 <col:20>
| `-OptimizeNoneAttr 0x562a61e5fc98 <col:30>
|-CXXMethodDecl 0x562a61e5fce8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x562a61e5fd88 <col:20>
| `-OptimizeNoneAttr 0x562a61e5fde0 <col:30>
|-CXXMethodDecl 0x562a61e5fe28 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x562a61e5fec8 <col:20>
| `-OptimizeNoneAttr 0x562a61e5ff20 <col:30>
|-CXXMethodDecl 0x562a61e5ff68 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e60028 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e600f0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e601b8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e60278 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e60398 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x562a61e7a170 <col:54, line:99:5>
|   `-ReturnStmt 0x562a61e7a160 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x562a61e7a148 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x562a61e7a118 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562a61e70bb8
|         `-CXXThisExpr 0x562a61e7a108 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x562a61e60538 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x562a61e60448 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x562a61e7a220 <col:67, line:103:5>
|   `-BinaryOperator 0x562a61e7a200 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562a61e7a198 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562a61e70bb8
|     | `-CXXThisExpr 0x562a61e7a188 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562a61e7a1e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7a1c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x562a61e60448 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x562a61e60630 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x562a61e7a2a0 <col:33, line:107:5>
|   `-ReturnStmt 0x562a61e7a290 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x562a61e7a278 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x562a61e7a248 <col:16> 'void *' lvalue ->_destructor_argument 0x562a61e70c20
|         `-CXXThisExpr 0x562a61e7a238 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562a61e606f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x562a61e7a8d0 <col:25, line:113:5>
|   |-ParenExpr 0x562a61e7a618 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x562a61e7a5e8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7a358 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562a61e7a330 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x562a61e7a2f8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x562a61e7a2c8 <col:24> '<bound member function type>' ->shared 0x562a61e5f768
|   |   |       `-ImplicitCastExpr 0x562a61e7a318 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x562a61e7a2b8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562a61e7a3b8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7a398 <col:42> 'int' 0
|   |   `-CallExpr 0x562a61e7a548 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7a530 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7a510 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7a588 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7a428 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x562a61e7a5a0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7a450 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7a5b8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7a488 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x562a61e7a5d0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7a4f8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7a4e0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7a4a8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x562a61e7a818 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x562a61e7a648 <col:2> 'unsigned char *' lvalue ->_head 0x562a61e709c0
|   | | `-CXXThisExpr 0x562a61e7a638 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x562a61e7a800 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x562a61e7a7e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x562a61e7a688 <col:10> 'unsigned char *' lvalue ->_data 0x562a61e70a28
|   |     | `-CXXThisExpr 0x562a61e7a678 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x562a61e7a7c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x562a61e7a7a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x562a61e7a6c8 <col:18> 'unsigned char *' lvalue ->_tail 0x562a61e70a90
|   |         | `-CXXThisExpr 0x562a61e7a6b8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x562a61e7a790 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x562a61e7a770 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x562a61e7a708 <col:26> 'unsigned char *' lvalue ->_end 0x562a61e70af8
|   |             | `-CXXThisExpr 0x562a61e7a6f8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x562a61e7a758 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x562a61e7a738 <col:33> 'int' 0
|   `-BinaryOperator 0x562a61e7a8b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562a61e7a848 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562a61e70bb8
|     | `-CXXThisExpr 0x562a61e7a838 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562a61e7a898 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x562a61e7a878 <col:16> 'int' 0
|-CXXMethodDecl 0x562a61e60830 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562a61e607a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e608d8 <col:20>
| |-OptimizeNoneAttr 0x562a61e60930 <col:30>
| `-WarnUnusedResultAttr 0x562a61e60958 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562a61e60a28 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562a61e60998 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e60ad0 <col:20>
| |-OptimizeNoneAttr 0x562a61e60b28 <col:30>
| `-WarnUnusedResultAttr 0x562a61e60b50 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x562a61e60c88 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562a61e60b90 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e60d30 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x562a61e60e30 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x562a61e60da0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e60ed8 <col:20>
| `-OptimizeNoneAttr 0x562a61e60f30 <col:30>
|-CXXMethodDecl 0x562a61e60ff8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562a61e60f68 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e610a0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x562a61e611a0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562a61e61110 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562a61e61248 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562a61e61348 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x562a61e612b8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e613f0 <col:20>
| `-OptimizeNoneAttr 0x562a61e61448 <col:30>
|-CXXMethodDecl 0x562a61e615d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x562a61e61488 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x562a61e61500 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x562a61e7a0c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x562a61e61688 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x562a61e61888 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562a61e61700 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x562a61e61778 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e61a98 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562a61e61948 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562a61e619c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e61ca8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x562a61e61b58 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x562a61e61bd8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x562a61e7a0d8 <col:39> 'int' 0
|-CXXMethodDecl 0x562a61e61d78 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x562a61e61e40 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e61f08 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x562a61e61fc8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e62090 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x562a61e621d8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x562a61e62148 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x562a61e623a8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562a61e62298 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x562a61e62310 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e62478 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x562a61e62538 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x562a61e625d8 <col:20>
| `-OptimizeNoneAttr 0x562a61e62630 <col:30>
|-CXXMethodDecl 0x562a61e62680 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562a61e62720 <col:20>
| `-OptimizeNoneAttr 0x562a61e62778 <col:30>
|-CXXMethodDecl 0x562a61e627c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x562a61e62888 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e62950 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x562a61e629f0 <col:20>
| `-OptimizeNoneAttr 0x562a61e62a48 <col:30>
|-CXXMethodDecl 0x562a61e62b98 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562a61e62a88 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x562a61e62b00 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e62ce8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x562a61e62c58 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e62dc0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x562a61e62e80 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x562a61e62f20 <col:20>
| `-OptimizeNoneAttr 0x562a61e62f78 <col:30>
|-CXXMethodDecl 0x562a61e62fc8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562a61e63068 <col:20>
| `-OptimizeNoneAttr 0x562a61e630c0 <col:30>
|-CXXMethodDecl 0x562a61e63110 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x562a61e631d8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x562a61e63278 <col:20>
| `-OptimizeNoneAttr 0x562a61e632d0 <col:30>
|-CXXMethodDecl 0x562a61e63318 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x562a61e63438 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x562a61e635a8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x562a61e634e8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x562a61e63698 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x562a61e63738 <col:20>
| `-OptimizeNoneAttr 0x562a61e63790 <col:30>
|-CXXMethodDecl 0x562a61e637e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x562a61e638a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562a61e63ad8 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x562a61e63950 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x562a61e639c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e63b88 <col:20>
| `-OptimizeNoneAttr 0x562a61e63be0 <col:30>
|-CXXMethodDecl 0x562a61e63c88 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x562a61e63d28 <col:20>
| `-OptimizeNoneAttr 0x562a61e63d80 <col:30>
|-CXXMethodDecl 0x562a61e63dd0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x562a61e63e70 <col:20>
| `-OptimizeNoneAttr 0x562a61e63ec8 <col:30>
|-CXXMethodDecl 0x562a61e63f10 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x562a61e63fb0 <col:20>
| `-OptimizeNoneAttr 0x562a61e64008 <col:30>
|-CXXMethodDecl 0x562a61e64108 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x562a61e64040 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x562a61e641b0 <col:20>
| `-OptimizeNoneAttr 0x562a61e64208 <col:30>
|-CXXMethodDecl 0x562a61e643c8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x562a61e64240 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x562a61e642b8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e64478 <col:20>
| `-OptimizeNoneAttr 0x562a61e644d0 <col:30>
|-CXXMethodDecl 0x562a61e64578 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x562a61e64698 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x562a61e647b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x562a61e64858 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x562a61e64880 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x562a61e649a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x562a61e64a48 <col:20>
| `-OptimizeNoneAttr 0x562a61e64aa0 <col:30>
|-CXXMethodDecl 0x562a61e64b48 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x562a61e64be8 <col:20>
| `-OptimizeNoneAttr 0x562a61e64c40 <col:30>
|-AccessSpecDecl 0x562a61e64c68 <line:344:3, col:9> col:3 public
|-EnumDecl 0x562a61e64c90 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x562a61e64d90 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x562a61e64de0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e64d70 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x562a61e64d50 <col:14> 'int' 48
|-CXXMethodDecl 0x562a61e64e48 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x562a61e64ee8 <col:20>
| `-OptimizeNoneAttr 0x562a61e64f40 <col:30>
|-CXXMethodDecl 0x562a61e64fb8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x562a61e65058 <col:20>
| `-OptimizeNoneAttr 0x562a61e650b0 <col:30>
|-CXXMethodDecl 0x562a61e65178 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x562a61e650e8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x562a61e65318 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x562a61e654b8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x562a61e653c8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x562a61e65560 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x562a61e65660 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a10 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e65640 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x562a61e65620 <col:9> 'int' 0
| |-EnumConstantDecl 0x562a61e656f0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e656d0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x562a61e656b0 <col:14> 'int' 1
| |-EnumConstantDecl 0x562a61e65780 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a40 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e65760 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x562a61e65740 <col:14> 'int' 2
| |-EnumConstantDecl 0x562a61e65810 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a58 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e657f0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x562a61e657d0 <col:14> 'int' 3
| |-EnumConstantDecl 0x562a61e658a0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a70 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e65880 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x562a61e65860 <col:13> 'int' 4
| |-EnumConstantDecl 0x562a61e65930 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562a61e65a88 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e65910 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x562a61e658f0 <col:13> 'int' 5
| `-EnumConstantDecl 0x562a61e659c0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x562a61e65aa0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e659a0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x562a61e65980 <col:14> 'int' 6
|-CXXMethodDecl 0x562a61e65b08 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x562a61e65ba8 <col:20>
| `-OptimizeNoneAttr 0x562a61e65c00 <col:30>
|-CXXMethodDecl 0x562a61e65cf8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x562a61e65c38 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x562a61e65da0 <col:20>
| `-OptimizeNoneAttr 0x562a61e65df8 <col:30>
|-CXXMethodDecl 0x562a61e65e68 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x562a61e65f90 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x562a61e66108 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x562a61e66040 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x562a61e661d0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x562a61e66298 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x562a61e663d8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x562a61e66348 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x562a61e66480 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x562a61e66580 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562a61e66780 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e66560 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x562a61e66540 <col:23> 'int' 0
| |-EnumConstantDecl 0x562a61e66610 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562a61e66798 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e665f0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x562a61e665d0 <col:45> 'int' 4
| |-EnumConstantDecl 0x562a61e666a0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562a61e667b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e66680 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x562a61e66660 <col:24> 'int' 0
| `-EnumConstantDecl 0x562a61e66730 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x562a61e667c8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e66710 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x562a61e666f0 <col:47> 'int' 16
|-CXXMethodDecl 0x562a61e66828 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x562a61e66998 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x562a61e668d8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x562a61e66a40 <col:20>
| `-OptimizeNoneAttr 0x562a61e66a98 <col:30>
|-CXXMethodDecl 0x562a61e66ae8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x562a61e7a9f0 <col:18, col:36>
|   `-ReturnStmt 0x562a61e7a9e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x562a61e7a9c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x562a61e7a9a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x562a61e7a978 <col:27> '<bound member function type>' ->xanno 0x562a61e64b48
|           `-CXXThisExpr 0x562a61e7a968 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x562a61e66be0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x562a61e7ab00 <col:30, col:48>
|   `-ReturnStmt 0x562a61e7aaf0 <col:32, col:45>
|     `-ImplicitCastExpr 0x562a61e7aad8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x562a61e7aab8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x562a61e7aa88 <col:39> '<bound member function type>' ->xanno 0x562a61e649a8
|           `-CXXThisExpr 0x562a61e7aa78 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x562a61e66cc8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x562a61e7ac98 <col:24, col:50>
|   `-ReturnStmt 0x562a61e7ac88 <col:26, col:47>
|     `-UnaryOperator 0x562a61e7ac70 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562a61e7ac50 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x562a61e7ac38 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562a61e7abe8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x562a61e6fec8
|         |   `-CXXMemberCallExpr 0x562a61e7abc8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x562a61e7ab98 <col:34> '<bound member function type>' ->xanno 0x562a61e64b48
|         |       `-CXXThisExpr 0x562a61e7ab88 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x562a61e7ac18 <col:46> 'int' 0
|-CXXMethodDecl 0x562a61e66dd0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x562a61e7ae68 <col:36, col:62>
|   `-ReturnStmt 0x562a61e7ae58 <col:38, col:59>
|     `-UnaryOperator 0x562a61e7ae40 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562a61e7ae20 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562a61e7ae08 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562a61e7ad80 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x562a61e6fec8
|         |   `-CXXMemberCallExpr 0x562a61e7ad60 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562a61e7ad30 <col:46> '<bound member function type>' ->xanno 0x562a61e649a8
|         |       `-CXXThisExpr 0x562a61e7ad20 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562a61e7adb0 <col:58> 'int' 0
|-CXXMethodDecl 0x562a61e66ee8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x562a61e7b000 <col:26, col:53>
|   `-ReturnStmt 0x562a61e7aff0 <col:28, col:50>
|     `-UnaryOperator 0x562a61e7afd8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562a61e7afb8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x562a61e7afa0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562a61e7af50 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x562a61e701c8
|         |   `-CXXMemberCallExpr 0x562a61e7af30 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x562a61e7af00 <col:36> '<bound member function type>' ->xanno 0x562a61e64b48
|         |       `-CXXThisExpr 0x562a61e7aef0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x562a61e7af80 <col:49> 'int' 0
|-CXXMethodDecl 0x562a61e67008 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x562a61e7b1d8 <col:38, col:65>
|   `-ReturnStmt 0x562a61e7b1c8 <col:40, col:62>
|     `-UnaryOperator 0x562a61e7b1b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562a61e7b190 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x562a61e7b178 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562a61e7b0e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x562a61e701c8
|         |   `-CXXMemberCallExpr 0x562a61e7b0c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562a61e7b098 <col:48> '<bound member function type>' ->xanno 0x562a61e649a8
|         |       `-CXXThisExpr 0x562a61e7b088 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562a61e7b118 <col:61> 'int' 0
|-CXXMethodDecl 0x562a61e671b8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x562a61e670c0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x562a61e7b8a8 <col:34, line:463:5>
|   |-ParenExpr 0x562a61e7b6f0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x562a61e7b6c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7b328 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7b2f8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7b248 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7b230 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7b1f0 <col:23> 'int' lvalue ParmVar 0x562a61e670c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7b210 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7b2d8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7b2a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7b268 <col:33> 'int' lvalue ParmVar 0x562a61e670c0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562a61e7b2c0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562a61e7b288 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562a61e7b388 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7b368 <col:56> 'int' 0
|   |   `-CallExpr 0x562a61e7b620 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7b608 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7b5e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7b660 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7b478 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562a61e7b678 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7b4a8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7b690 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7b4e0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x562a61e7b6a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7b5d0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7b5b8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7b578 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x562a61e7b898 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x562a61e7b880 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x562a61e7b860 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562a61e7b830 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562a61e7b7e0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x562a61e6fec8
|         |   `-CXXMemberCallExpr 0x562a61e7b7c0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562a61e7b790 <col:9> '<bound member function type>' ->xanno 0x562a61e649a8
|         |       `-CXXThisExpr 0x562a61e7b780 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x562a61e7b848 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x562a61e7b810 <col:21> 'int' lvalue ParmVar 0x562a61e670c0 'i' 'int'
|-CXXMethodDecl 0x562a61e67408 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x562a61e67278 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x562a61e672f0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x562a61e7bf38 <col:40, line:472:5>
|   |-ParenExpr 0x562a61e7bd50 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x562a61e7bd20 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7ba00 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7b9d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7b920 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7b908 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7b8c8 <col:23> 'int' lvalue ParmVar 0x562a61e67278 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7b8e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7b9b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7b980 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7b940 <col:33> 'int' lvalue ParmVar 0x562a61e67278 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562a61e7b998 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562a61e7b960 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562a61e7ba60 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7ba40 <col:56> 'int' 0
|   |   `-CallExpr 0x562a61e7bc80 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7bc68 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7bc48 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7bcc0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7bad0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562a61e7bcd8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7bb00 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7bcf0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7bb38 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x562a61e7bd08 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7bc30 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7bc18 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7bbd8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x562a61e7bf18 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x562a61e7bec0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x562a61e7be90 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562a61e7be40 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x562a61e6fec8
|     | |   `-CXXMemberCallExpr 0x562a61e7be20 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x562a61e7bdf0 <col:2> '<bound member function type>' ->xanno 0x562a61e64b48
|     | |       `-CXXThisExpr 0x562a61e7bde0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x562a61e7bea8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x562a61e7be70 <col:14> 'int' lvalue ParmVar 0x562a61e67278 'i' 'int'
|     `-ImplicitCastExpr 0x562a61e7bf00 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7bee0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x562a61e672f0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x562a61e675c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x562a61e674d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562a61e7c6b8 <col:36, line:485:5>
|   |-ParenExpr 0x562a61e7c420 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7c3f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7c0d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7c0a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7bfb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7bf98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7bf58 <col:23> 'int' lvalue ParmVar 0x562a61e674d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7bf78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7c080 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7c068 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7bfd0 <col:33> 'int' lvalue ParmVar 0x562a61e674d0 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7c048 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7c030 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7bff0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7c010 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562a61e7c130 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7c110 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7c350 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7c338 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7c318 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7c390 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7c1a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562a61e7c3a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7c1d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7c3c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7c210 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x562a61e7c3d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7c300 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7c2e8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7c2a8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x562a61e7c6a8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x562a61e7c690 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x562a61e7c678 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e7c648 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x562a61e7c5e8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e7c5b8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e7c530 <col:61, col:70> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e7c510 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e7c4e0 <col:61> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e7c4d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e7c5d0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e7c560 <col:74> 'int' lvalue ParmVar 0x562a61e674d0 'i' 'int'
|-CXXMethodDecl 0x562a61e67818 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x562a61e67688 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562a61e67700 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x562a61e7ce08 <col:42, line:500:5>
|   |-ParenExpr 0x562a61e7cba0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7cb70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7c850 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7c820 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7c730 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7c718 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7c6d8 <col:23> 'int' lvalue ParmVar 0x562a61e67688 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7c6f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7c800 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7c7e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7c750 <col:33> 'int' lvalue ParmVar 0x562a61e67688 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7c7c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7c7b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7c770 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7c790 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562a61e7c8b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7c890 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7cad0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7cab8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7ca98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7cb10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7c920 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562a61e7cb28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7c958 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7cb40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7c990 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x562a61e7cb58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7ca80 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7ca68 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7ca28 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x562a61e7cde8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x562a61e7cd98 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562a61e7cd68 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x562a61e7cd10 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562a61e7cce0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562a61e7cc90 <col:48, col:57> 'char [48]' lvalue ->c 0x562a61e6fda0
|     |     |   `-CXXMemberCallExpr 0x562a61e7cc70 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562a61e7cc40 <col:48> '<bound member function type>' ->xanno 0x562a61e64b48
|     |     |       `-CXXThisExpr 0x562a61e7cc30 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562a61e7ccf8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562a61e7ccc0 <col:61> 'int' lvalue ParmVar 0x562a61e67688 'i' 'int'
|     `-ImplicitCastExpr 0x562a61e7cdd0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7cdb0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x562a61e67700 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x562a61e679d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x562a61e678e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562a61e7d568 <col:35, line:513:5>
|   |-ParenExpr 0x562a61e7d278 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7d248 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7cfa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7cf70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7ce80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7ce68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7ce28 <col:23> 'int' lvalue ParmVar 0x562a61e678e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7ce48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7cf50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7cf38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7cea0 <col:33> 'int' lvalue ParmVar 0x562a61e678e0 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7cf18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7cf00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7cec0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7cee0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562a61e7d000 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7cfe0 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7d1a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7d190 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7d170 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7d1e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7d070 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562a61e7d200 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7d0a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7d218 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7d0e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x562a61e7d230 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7d158 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7d140 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7d100 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x562a61e7d558 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x562a61e7d540 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x562a61e7d528 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e7d4f8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x562a61e7d470 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e7d440 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e7d3f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e7d3d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e7d3a0 <col:60> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e7d390 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e7d458 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e7d420 <col:73> 'int' lvalue ParmVar 0x562a61e678e0 'i' 'int'
|-CXXMethodDecl 0x562a61e67c28 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x562a61e67a98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562a61e67b10 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x562a61e7dc88 <col:41, line:528:5>
|   |-ParenExpr 0x562a61e7da10 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7d9e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7d700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7d6d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7d5e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7d5c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7d588 <col:23> 'int' lvalue ParmVar 0x562a61e67a98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7d5a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7d6b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7d698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7d600 <col:33> 'int' lvalue ParmVar 0x562a61e67a98 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7d678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7d660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7d620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7d640 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562a61e7d760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7d740 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7d940 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7d928 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7d908 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7d980 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7d7d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562a61e7d998 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7d808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7d9b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7d840 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x562a61e7d9c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7d8f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7d8d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7d898 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x562a61e7dc68 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x562a61e7dc18 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562a61e7dbe8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x562a61e7db90 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562a61e7db50 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562a61e7db00 <col:47, col:56> 'char [48]' lvalue ->c 0x562a61e6fda0
|     |     |   `-CXXMemberCallExpr 0x562a61e7dae0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562a61e7dab0 <col:47> '<bound member function type>' ->xanno 0x562a61e64b48
|     |     |       `-CXXThisExpr 0x562a61e7daa0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562a61e7db68 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562a61e7db30 <col:60> 'int' lvalue ParmVar 0x562a61e67a98 'i' 'int'
|     `-ImplicitCastExpr 0x562a61e7dc50 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7dc30 <col:65> 'int16_t':'short' lvalue ParmVar 0x562a61e67b10 'x' 'int16_t':'short'
|-CXXMethodDecl 0x562a61e67de8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x562a61e67cf0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562a61e7e358 <col:36, line:541:5>
|   |-ParenExpr 0x562a61e7e0f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7e0c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7de20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7ddf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7dd00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7dce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7dca8 <col:23> 'int' lvalue ParmVar 0x562a61e67cf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7dcc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7ddd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7ddb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7dd20 <col:33> 'int' lvalue ParmVar 0x562a61e67cf0 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7dd98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7dd80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7dd40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7dd60 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562a61e7de80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7de60 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7e028 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7e010 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7dff0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7e068 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7def0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562a61e7e080 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7df28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7e098 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7df60 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x562a61e7e0b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7dfd8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7dfc0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7df80 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x562a61e7e348 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x562a61e7e330 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x562a61e7e318 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e7e2e8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x562a61e7e290 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e7e260 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e7e210 <col:61, col:70> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e7e1f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e7e1c0 <col:61> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e7e1b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e7e278 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e7e240 <col:74> 'int' lvalue ParmVar 0x562a61e67cf0 'i' 'int'
|-CXXMethodDecl 0x562a61e67fb8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x562a61e67ea8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x562a61e67f20 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562a61e68068 <col:20>
| `-OptimizeNoneAttr 0x562a61e680c0 <col:30>
|-CXXMethodDecl 0x562a61e681f8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x562a61e68100 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562a61e7ea28 <col:35, line:562:5>
|   |-ParenExpr 0x562a61e7e7c8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7e798 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7e4f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7e4c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7e3d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7e3b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7e378 <col:23> 'int' lvalue ParmVar 0x562a61e68100 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7e398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7e4a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7e488 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7e3f0 <col:33> 'int' lvalue ParmVar 0x562a61e68100 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7e468 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7e450 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7e410 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7e430 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562a61e7e550 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7e530 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7e6f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7e6e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7e6c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7e738 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7e5c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562a61e7e750 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7e5f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7e768 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7e630 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x562a61e7e780 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7e6a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7e690 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7e650 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x562a61e7ea18 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x562a61e7ea00 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x562a61e7e9e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e7e9b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x562a61e7e960 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e7e930 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e7e8e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e7e8c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e7e890 <col:60> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e7e880 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e7e948 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e7e910 <col:73> 'int' lvalue ParmVar 0x562a61e68100 'i' 'int'
|-CXXMethodDecl 0x562a61e68408 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x562a61e682b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562a61e68330 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x562a61e7f108 <col:41, line:577:5>
|   |-ParenExpr 0x562a61e7ee98 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7ee68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7ebc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7eb90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7eaa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7ea88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7ea48 <col:23> 'int' lvalue ParmVar 0x562a61e682b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7ea68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7eb70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7eb58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7eac0 <col:33> 'int' lvalue ParmVar 0x562a61e682b8 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7eb38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7eb20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7eae0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7eb00 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562a61e7ec20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7ec00 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7edc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7edb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7ed90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7ee08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7ec90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562a61e7ee20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7ecc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7ee38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7ed00 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x562a61e7ee50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7ed78 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7ed60 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7ed20 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x562a61e7f0e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x562a61e7f098 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562a61e7f068 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x562a61e7f008 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562a61e7efd8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562a61e7ef88 <col:47, col:56> 'char [48]' lvalue ->c 0x562a61e6fda0
|     |     |   `-CXXMemberCallExpr 0x562a61e7ef68 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562a61e7ef38 <col:47> '<bound member function type>' ->xanno 0x562a61e64b48
|     |     |       `-CXXThisExpr 0x562a61e7ef28 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562a61e7eff0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562a61e7efb8 <col:60> 'int' lvalue ParmVar 0x562a61e682b8 'i' 'int'
|     `-ImplicitCastExpr 0x562a61e7f0d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7f0b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x562a61e68330 'x' 'int32_t':'int'
|-CXXMethodDecl 0x562a61e685c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x562a61e684d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562a61e7f838 <col:36, line:591:5>
|   |-ParenExpr 0x562a61e7f578 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7f548 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7f2a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7f270 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7f180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7f168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7f128 <col:23> 'int' lvalue ParmVar 0x562a61e684d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7f148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7f250 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7f238 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7f1a0 <col:33> 'int' lvalue ParmVar 0x562a61e684d0 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7f218 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7f200 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7f1c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7f1e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562a61e7f300 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7f2e0 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7f4a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7f490 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7f470 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7f4e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7f370 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562a61e7f500 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7f3a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7f518 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7f3e0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x562a61e7f530 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7f458 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7f440 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7f400 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x562a61e7f828 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x562a61e7f810 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x562a61e7f7f8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e7f7c8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x562a61e7f740 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e7f710 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e7f6c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e7f6a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e7f670 <col:61> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e7f660 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e7f728 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e7f6f0 <col:74> 'int' lvalue ParmVar 0x562a61e684d0 'i' 'int'
|-CXXMethodDecl 0x562a61e68818 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x562a61e68688 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562a61e68700 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x562a61e7ff18 <col:42, line:606:5>
|   |-ParenExpr 0x562a61e7fca8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x562a61e7fc78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e7f9d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e7f9a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7f8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7f898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7f858 <col:23> 'int' lvalue ParmVar 0x562a61e68688 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7f878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e7f980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562a61e7f968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7f8d0 <col:33> 'int' lvalue ParmVar 0x562a61e68688 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e7f948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e7f930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7f8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562a61e7f910 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562a61e7fa30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e7fa10 <col:60> 'int' 0
|   |   `-CallExpr 0x562a61e7fbd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562a61e7fbc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e7fba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e7fc18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7faa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562a61e7fc30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e7fad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e7fc48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e7fb10 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x562a61e7fc60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e7fb88 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e7fb70 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e7fb30 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x562a61e7fef8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x562a61e7fea8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562a61e7fe78 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x562a61e7fe18 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562a61e7fde8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562a61e7fd98 <col:48, col:57> 'char [48]' lvalue ->c 0x562a61e6fda0
|     |     |   `-CXXMemberCallExpr 0x562a61e7fd78 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562a61e7fd48 <col:48> '<bound member function type>' ->xanno 0x562a61e64b48
|     |     |       `-CXXThisExpr 0x562a61e7fd38 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562a61e7fe00 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562a61e7fdc8 <col:61> 'int' lvalue ParmVar 0x562a61e68688 'i' 'int'
|     `-ImplicitCastExpr 0x562a61e7fee0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x562a61e7fec0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x562a61e68700 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x562a61e689b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x562a61e688e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x562a61e80788 <col:33, line:620:5>
|   |-ParenExpr 0x562a61e80500 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x562a61e804d0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e80120 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e800f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e7ff90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e7ff78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e7ff38 <col:23> 'int' lvalue ParmVar 0x562a61e688e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e7ff58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e800d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562a61e800b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e7ffb0 <col:33> 'int' lvalue ParmVar 0x562a61e688e0 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e80098 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e80080 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e7ffd0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562a61e80058 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562a61e80040 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562a61e80008 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562a61e80180 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e80160 <col:79> 'int' 0
|   |   `-CallExpr 0x562a61e80430 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562a61e80418 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e803f8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e80470 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e80268 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562a61e80488 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e802b0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e804a0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e802e8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x562a61e804b8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e803e0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e803c8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e80388 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x562a61e80778 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x562a61e80760 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x562a61e80748 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562a61e80718 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x562a61e80690 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x562a61e80660 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562a61e80610 <col:67, col:76> 'char const[48]' lvalue ->c 0x562a61e6fda0
|             |   `-CXXMemberCallExpr 0x562a61e805f0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562a61e805c0 <col:67> '<bound member function type>' ->xanno 0x562a61e649a8
|             |       `-CXXThisExpr 0x562a61e805b0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562a61e80678 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562a61e80640 <col:80> 'int' lvalue ParmVar 0x562a61e688e0 'i' 'int'
|-CXXMethodDecl 0x562a61e68bc8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x562a61e68a70 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562a61e68af0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x562a61e80fb0 <col:45, line:635:5>
|   |-ParenExpr 0x562a61e80cf8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x562a61e80cc8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562a61e80990 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562a61e80960 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562a61e80800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562a61e807e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562a61e807a8 <col:23> 'int' lvalue ParmVar 0x562a61e68a70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562a61e807c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562a61e80940 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562a61e80928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562a61e80820 <col:33> 'int' lvalue ParmVar 0x562a61e68a70 'i' 'int'
|   |   |     `-BinaryOperator 0x562a61e80908 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562a61e808f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562a61e80840 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562a61e64d90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562a61e808c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562a61e808b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562a61e80878 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562a61e809f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562a61e809d0 <col:79> 'int' 0
|   |   `-CallExpr 0x562a61e80c28 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562a61e80c10 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562a61e80bf0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562a619d12f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562a61e80c68 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e80a60 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562a61e80c80 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562a61e80aa8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562a61e80c98 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562a61e80ae0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x562a61e80cb0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562a61e80bd8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562a61e80bc0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562a61e80b78 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x562a61e80f90 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x562a61e80ef8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562a61e80ec8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x562a61e80e68 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562a61e80e38 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562a61e80de8 <col:54, col:63> 'char [48]' lvalue ->c 0x562a61e6fda0
|     |     |   `-CXXMemberCallExpr 0x562a61e80dc8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562a61e80d98 <col:54> '<bound member function type>' ->xanno 0x562a61e64b48
|     |     |       `-CXXThisExpr 0x562a61e80d88 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562a61e80e50 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562a61e80e18 <col:67> 'int' lvalue ParmVar 0x562a61e68a70 'i' 'int'
|     `-CXXConstCastExpr 0x562a61e80f60 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x562a61e80f48 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x562a61e80f10 <col:91> 'const void *' lvalue ParmVar 0x562a61e68af0 'x' 'const void *'
|-CXXMethodDecl 0x562a61e68c98 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x562a61e81038 <col:34, line:640:5>
|   `-ReturnStmt 0x562a61e81028 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x562a61e81010 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x562a61e80fe0 <col:16> 'Packet *' lvalue ->_data_packet 0x562a61e70958
|         `-CXXThisExpr 0x562a61e80fd0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562a61e68dd8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x562a61e68d48 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562a61e7a0f8 <col:46> 'bool' true
|-CXXMethodDecl 0x562a61e68f58 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x562a61e68e90 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x562a61e69000 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x562a61e697b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x562a61e69100 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69820 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e690e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x562a61e690c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562a61e5e260 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562a61e69190 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69838 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69170 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x562a61e69150 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562a61e5e2f0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562a61e69220 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69850 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69200 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562a61e691e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x562a61e692b0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69868 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69290 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x562a61e69270 <col:19> 'int' 16
| |-EnumConstantDecl 0x562a61e69340 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69880 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69320 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x562a61e69300 <col:21> 'int' 16
| |-EnumConstantDecl 0x562a61e693d0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e69898 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e693b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562a61e69390 <col:19> 'int' 32
| |-EnumConstantDecl 0x562a61e69460 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e698b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69440 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x562a61e69420 <col:19> 'int' EnumConstant 0x562a61e692b0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562a61e694f0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e698c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e694d0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x562a61e694b0 <col:19> 'int' EnumConstant 0x562a61e693d0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562a61e695c0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e698e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e695a0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x562a61e69580 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562a61e69540 <col:23> 'int' EnumConstant 0x562a61e694f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562a61e69560 <col:40> 'int' 2
| |-EnumConstantDecl 0x562a61e69690 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562a61e698f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562a61e69670 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x562a61e69650 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562a61e69610 <col:23> 'int' EnumConstant 0x562a61e694f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562a61e69630 <col:40> 'int' 4
| `-EnumConstantDecl 0x562a61e69760 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x562a61e69910 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562a61e69740 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x562a61e69720 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x562a61e696e0 <col:23> 'int' EnumConstant 0x562a61e694f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x562a61e69700 <col:40> 'int' 8
|-CXXMethodDecl 0x562a61e69950 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x562a61e699f0 <col:68> "" ""
|-CXXMethodDecl 0x562a61e69a88 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x562a61e69b28 <col:45> "" ""
|-CXXMethodDecl 0x562a61e69bc0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562a61e69c60 <col:57> "" ""
|-CXXMethodDecl 0x562a61e69cf8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x562a61e69d98 <col:45> "" ""
|-CXXMethodDecl 0x562a61e69e30 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562a61e69ed0 <col:57> "" ""
|-CXXMethodDecl 0x562a61e69f60 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x562a61e6a000 <col:51> "" ""
|-CXXMethodDecl 0x562a61e6a090 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562a61e6a130 <col:63> "" ""
|-CXXMethodDecl 0x562a61e6a1c0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x562a61e6a260 <col:53> "" ""
|-CXXMethodDecl 0x562a61e6a2f0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562a61e6a390 <col:65> "" ""
|-CXXMethodDecl 0x562a61e6a4a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562a61e6a418 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x562a61e6a550 <col:61> "" ""
|-CXXMethodDecl 0x562a61e6a6e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562a61e6a5d8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x562a61e6a650 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562a61e6a798 <col:67> "" ""
|-CXXMethodDecl 0x562a61e6a8b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562a61e6a820 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562a61e6a958 <col:63> "" ""
|-CXXMethodDecl 0x562a61e6aaf0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562a61e6a9e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562a61e6aa58 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562a61e6aba0 <col:69> "" ""
|-CXXMethodDecl 0x562a61e6acb8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562a61e6ac28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562a61e6ad60 <col:63> "" ""
|-CXXMethodDecl 0x562a61e6d978 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562a61e6d868 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562a61e6d8e0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562a61e6da28 <col:69> "" ""
|-CXXMethodDecl 0x562a61e6db40 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x562a61e6dab0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x562a61e6dbe8 <col:62> "" ""
|-CXXMethodDecl 0x562a61e6dd80 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562a61e6dc70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562a61e6dce8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x562a61e6de30 <col:68> "" ""
|-CXXMethodDecl 0x562a61e6df48 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x562a61e6deb8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562a61e6dff0 <col:63> "" ""
|-CXXMethodDecl 0x562a61e6e188 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x562a61e6e078 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562a61e6e0f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x562a61e6e238 <col:69> "" ""
|-CXXMethodDecl 0x562a61e6e2c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562a61e6e368 <col:64> "" ""
|-CXXMethodDecl 0x562a61e6e3f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x562a61e6e498 <col:52> "" ""
|-CXXMethodDecl 0x562a61e6e528 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562a61e6e5c8 <col:67> "" ""
|-CXXMethodDecl 0x562a61e6e658 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x562a61e6e6f8 <col:55> "" ""
|-CXXMethodDecl 0x562a61e6e810 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562a61e6e780 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562a61e6e8b8 <col:58> "" ""
|-CXXMethodDecl 0x562a61e6ea50 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562a61e6e940 <col:33> col:36 'int'
| |-ParmVarDecl 0x562a61e6e9b8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562a61e6eb00 <col:62> "" ""
|-CXXMethodDecl 0x562a61e6ec18 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x562a61e6eb88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562a61e6ecc0 <col:58> "" ""
|-CXXMethodDecl 0x562a61e6ee58 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x562a61e6ed48 <col:33> col:36 'int'
| |-ParmVarDecl 0x562a61e6edc0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x562a61e6ef08 <col:62> "" ""
|-CXXMethodDecl 0x562a61e6f020 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562a61e6ef90 <col:34> col:37 'int'
| `-DeprecatedAttr 0x562a61e6f0c8 <col:60> "" ""
|-CXXMethodDecl 0x562a61e6f260 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562a61e6f150 <col:34> col:37 'int'
| |-ParmVarDecl 0x562a61e6f1c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562a61e6f310 <col:64> "" ""
|-CXXMethodDecl 0x562a61e6f428 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x562a61e6f398 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562a61e6f4d0 <col:58> "" ""
|-CXXMethodDecl 0x562a61e6f668 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562a61e6f558 <col:33> col:36 'int'
| |-ParmVarDecl 0x562a61e6f5d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x562a61e6f718 <col:62> "" ""
|-CXXMethodDecl 0x562a61e6f830 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562a61e6f7a0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x562a61e6f8d8 <col:59> "" ""
|-CXXMethodDecl 0x562a61e6fa70 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562a61e6f960 <col:33> col:36 'int'
| |-ParmVarDecl 0x562a61e6f9d8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562a61e6fb20 <col:63> "" ""
|-AccessSpecDecl 0x562a61e6fb90 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x562a61e6fbb8 prev 0x562a61e64880 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562a61e6fcb0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x562a61e6fda0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x562a61e6fec8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x562a61e70048 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x562a61e701c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x562a61e70348 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x562a61e811b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562a61e81a28 <col:11>
| |-CXXDestructorDecl 0x562a61e81290 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x562a61e813c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562a61e813c8
| | `-ParmVarDecl 0x562a61e814d8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x562a61e81578 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562a61e81578
| | `-ParmVarDecl 0x562a61e81688 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x562a61e86e58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562a61e86f68 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x562a61e871e8 <col:11>
| |   `-ReturnStmt 0x562a61e871d8 <col:11>
| |     `-UnaryOperator 0x562a61e871c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562a61e871b0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x562a61e86fd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562a61e86fd8
|   `-ParmVarDecl 0x562a61e870e8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x562a61e703b0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562a61e704c8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x562a61e70568 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x562a61e705d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x562a61e70638 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x562a61e706a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x562a61e70700 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x562a61e707c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x562a61e70820 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x562a61e70880 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x562a61e810c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x562a61e70568 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x562a61e81a38 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x562a61e81a90 <col:12>
| |-CXXConstructorDecl 0x562a61e816f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562a61e816f8
| | `-ParmVarDecl 0x562a61e81808 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x562a61e818a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562a61e818a8
| | `-ParmVarDecl 0x562a61e819b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x562a61e86540 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x562a61e708f8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x562a61e70958 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x562a61e709c0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x562a61e70a28 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x562a61e70a90 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x562a61e70af8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x562a61e70b58 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x562a61e70bb8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x562a61e70c20 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x562a61e70ca8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x562a61e708f8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x562a61e81060 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562a61e70b58 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x562a61e81aa0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x562a61e81b00 <col:21, line:755:5>
|-CXXConstructorDecl 0x562a61e70e48 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x562a61e70d88 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x562a61e70f40 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x562a61e71128 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x562a61e71030 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x562a61e713f8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x562a61e711e0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61e71258 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562a61e712d0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e71618 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x562a61e714c8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x562a61e71540 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x562a61e79c38 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x562a61e716d8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x562a61e71750 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x562a61e717c8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x562a61e79d90 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562a61e79d00 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e79ed8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562a61e79e48 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x562a61e79fd0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61e845b0 prev 0x562a61e5dee0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x562a61e846e8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x562a61e84778 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x562a61e84820 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x562a61e848c0 <col:20>
| `-OptimizeNoneAttr 0x562a61e84918 <col:30>
|-CXXMethodDecl 0x562a61e84968 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x562a61e84a08 <col:20>
| `-OptimizeNoneAttr 0x562a61e84a60 <col:30>
|-CXXMethodDecl 0x562a61e84ab0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e84b78 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e84c40 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e84d58 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x562a61e84e20 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x562a61e84ec0 <col:20>
| `-OptimizeNoneAttr 0x562a61e84f18 <col:30>
|-CXXMethodDecl 0x562a61e84f88 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x562a61e85028 <col:20>
| `-OptimizeNoneAttr 0x562a61e85080 <col:30>
|-CXXMethodDecl 0x562a61e85128 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x562a61e851c8 <col:20>
| `-OptimizeNoneAttr 0x562a61e85220 <col:30>
|-CXXMethodDecl 0x562a61e85270 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562a61e85388 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x562a61e854a8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x562a61e855c8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x562a61e85690 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x562a61e85730 <col:62> "" ""
|-AccessSpecDecl 0x562a61e857a0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x562a61e85800 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x562a61e863f8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x562a61e86620 <col:29, col:31>
|-CXXMethodDecl 0x562a61e858c8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x562a61e85a08 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x562a61e85978 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x562a61e85b00 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x562a61e86630 <col:23, col:25>
|-CXXMethodDecl 0x562a61e85cb8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x562a61e85bf0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x562a61e85f88 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562a61e85d70 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562a61e85de8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562a61e85e60 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562a61e86118 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x562a61e86050 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x562a61e86210 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x562a61e86278 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x562a61e86278
  `-ParmVarDecl 0x562a61e86388 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61b73710 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562a61b73828 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x562a61b73910 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x562a61b738f0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x562a61b738b8 <col:22> 'int' 4
|-FieldDecl 0x562a61b739b8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x562a61b73998 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x562a61b73960 <col:21> 'int' 4
|-FieldDecl 0x562a61b73a18 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x562a61b73a78 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61b73ad8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61b73b38 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61b73b98 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x562a61b73bf8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x562a61b73c58 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61b73cc8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x562a61b73d38 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562a61eb1948 prev 0x562a61e5dd80 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562a61eb1a40 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x562a61eb1ae0 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61eb1b40 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x562a61eb1ba0 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x562a61eb1c00 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61caa7c8 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x562a61caaa28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x562a61fde6d8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562a61fde7d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x562a61fde7d8
| `-ParmVarDecl 0x562a61fde8e8 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x562a61fde988 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562a61fdea98 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x562a61fdf3d0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562a61fdf3a0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x562a61fdf370 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x562a61fdf340 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x562a61fdea98 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x562a61fdf440 <col:19>
`-CXXDestructorDecl 0x562a61fdeb38 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562a61ff9ea8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x562a61ffa2a8 prev 0x562a61ff9ea8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x562a61ffa4a0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x562a61ffa3a8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x562a61ffb3e8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x562a61ffa620 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x562a61ffb3a8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x562a61ffb368 <col:20> 'String *' lvalue ParmVar 0x562a61ffa3a8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x562a61ffa680 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x562a61ffb448 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x562a61f48990 <line:853:25, line:854:9>
|-CXXMethodDecl 0x562a61ffa560 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x562a61f214f0 Slot::store 'void ()' ]
| `-CompoundStmt 0x562a61ffbb08 <col:22, line:857:9>
|   `-CallExpr 0x562a61ffbac0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x562a61ffbaa8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x562a61ffba28 <col:13> 'void (String &, const String &)' lvalue Function 0x562a61ffb908 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x562a61bfae98 'assign_consume')
|     |-UnaryOperator 0x562a61ffb5d8 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x562a61ffb5c0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x562a61ffb590 <col:29> 'String *' lvalue ->_ptr 0x562a61ffa620
|     |     `-CXXThisExpr 0x562a61ffb580 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x562a61ffbaf0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x562a61ffb600 <col:35> 'String':'String' lvalue ->_slot 0x562a61ffa680
|         `-CXXThisExpr 0x562a61ffb5f0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x562a61ffa620 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x562a61ffa680 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x562a61ffa6f8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x562a61ffa6f8
| `-ParmVarDecl 0x562a61ffa808 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x562a61ffa8a8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x562a61ffa8a8
| `-ParmVarDecl 0x562a61ffa9b8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x562a61ffaa58 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x562a61ffaa58
| `-ParmVarDecl 0x562a61ffab68 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x562a61ffabd8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x562a61ffabd8
| `-ParmVarDecl 0x562a61fface8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x562a61ffad70 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x562a61f213f0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x562a61ffb4b0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
