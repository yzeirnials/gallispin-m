
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a59688 prev 0x55a0b8a50e28 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8a59780 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55a0b8a59810 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55a0b8a59888 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55a0b8a59948 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55a0b8a59a10 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55a0b8a59b88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55a0b8a59ac0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55a0b8a59c30 <col:24>
| `-OptimizeNoneAttr 0x55a0b8a59c88 <col:34>
|-CXXMethodDecl 0x55a0b8a59cd0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55a0b8a59f88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55a0b8a59d80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a59df8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55a0b8a59e78 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55a0b8a5a040 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55a0b8a5a078 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55a0b8a5a0e0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55a0b8a5a168 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55a0b8a5a488 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55a0b8a5a220 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a5a298 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55a0b8a5a310 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55a0b8a5a390 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55a0b8a5a5a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55a0b8a61f18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a0b8a61f18
| `-ParmVarDecl 0x55a0b8a62028 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55a0b8a620c8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a0b8a620c8
| `-ParmVarDecl 0x55a0b8a621d8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55a0b8b49a68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a4c6a0 prev 0x55a0b8a4c420 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a0b8a4c798 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55a0b8a4c828 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55a0b8a4c888 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55a0b8a4c978 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55a0b8a4ca78 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55a0b8a4cc48 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55a0b8a4caf8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55a0b8a4cb70 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55a0b8a4cdd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55a0b8a4cd10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55a0b8a4ce80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a4cfb8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55a0b8a4cef0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55a0b8a4d158 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55a0b8a4d098 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55a0b8a4d2f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55a0b8a4d238 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55a0b8a4d3a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55a0b8a4d4a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55a0b8a4d580 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4d480 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55a0b8a4d460 <col:26> 'int' 1
| `-EnumConstantDecl 0x55a0b8a4d530 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55a0b8a4d598 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a4d510 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55a0b8a4d4f0 <col:44> 'int' 2
|-CXXMethodDecl 0x55a0b8a4d6e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55a0b8a4d5c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a0b8a4d648 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55a0b8a4d838 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55a0b8a4d7a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55a0b8a4da78 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55a0b8a4d8f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55a0b8a4d970 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55a0b8a4db28 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a4db80 <col:30>
|-CXXMethodDecl 0x55a0b8a4dc88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55a0b8a4dbc0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55a0b8a4dd30 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a4dd88 <col:30>
|-CXXMethodDecl 0x55a0b8a4ddd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55a0b8a4dea0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55a0b8a4dfb8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55a0b8a4e040 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x55a0b8a4e0c8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55a0b8a4e150 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55a0b8a4e1d8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55a0b8a4e268 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55a0b8a4e328 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55a0b8a4e3b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55a0b8a4e438 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x55a0b8a4e4c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55a0b8a4e548 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55a0b8a4e5d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55a0b8a4e660 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55a0b8a4e720 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55a0b8a4e7b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55a0b8a4e900 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55a0b8a4e868 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55a0b8a4ea90 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55a0b8a4e9c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55a0b8a4ed40 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55a0b8a4eb48 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a4ebc8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55a0b8a4ec48 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55a0b8a4edf8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55a0b8a4ef00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a0b8a4f190 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4eee0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8a4eec0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55a0b8a4ef90 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a0b8a4f1a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4ef70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55a0b8a4ef50 <col:32> 'int' 20
| |-EnumConstantDecl 0x55a0b8a4f020 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a0b8a4f1c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4f000 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55a0b8a4efe0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55a0b8a4f0b0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a0b8a4f1d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4f090 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55a0b8a4f070 <col:35> 'int' 100
| `-EnumConstantDecl 0x55a0b8a4f140 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55a0b8a4f1f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a4f120 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55a0b8a4f100 <col:32> 'int' 2000
|-CXXMethodDecl 0x55a0b8a4f230 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55a0b8a4f670 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a0b8a4f4e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55a0b8a4f558 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a4f740 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55a0b8a4f8c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55a0b8a4f7f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a4fac8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a0b8a4f978 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55a0b8a4f9f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a4fbc8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55a0b8a4fc68 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55a0b8a4fd30 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4fdc0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55a0b8a4fff0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a4fda0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55a0b8a4fd80 <col:36> 'int' EnumConstant 0x55a0b8a4fd30 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4fe10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4fe60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4feb0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4ff00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a0b8a4ff50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55a0b8a4ffa0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55a0b8a500d8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55a0b8a50018 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55a0b8a501a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55a0b8a50260 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55a0b8a50320 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55a0b8a503e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55a0b8a504f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55a0b8a505c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55a0b8a50740 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55a0b8a50670 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55a0b8a50868 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55a0b8a50a68 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55a0b8a50918 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55a0b8a50998 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55a0b8a5e3b8 <col:54, line:127:5>
|   |-ParenExpr 0x55a0b8a5e268 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55a0b8a5e238 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a5df28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a0b8a5df00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55a0b8a5dee8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55a0b8a5ded0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55a0b8a5dea0 <col:31> 'Router *' lvalue ->_router 0x55a0b8a5bd80
|   |   |         `-CXXThisExpr 0x55a0b8a5de90 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a0b8a5df88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a5df68 <col:48> 'int' 0
|   |   `-CallExpr 0x55a0b8a5e198 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a5e180 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a5e160 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a5e1d8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a5dff8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55a0b8a5e1f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a5e018 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a5e208 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a5e050 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55a0b8a5e220 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a5e148 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a5e130 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a5e0e8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55a0b8a5e300 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55a0b8a5e298 <col:9> 'Router *' lvalue ->_router 0x55a0b8a5bd80
|   | | `-CXXThisExpr 0x55a0b8a5e288 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55a0b8a5e2e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a0b8a5e2c8 <col:19> 'Router *' lvalue ParmVar 0x55a0b8a50918 'r' 'Router *'
|   `-BinaryOperator 0x55a0b8a5e398 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55a0b8a5e330 <col:9> 'int' lvalue ->_eindex 0x55a0b8a5bde8
|     | `-CXXThisExpr 0x55a0b8a5e320 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55a0b8a5e380 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a5e360 <col:19> 'int' lvalue ParmVar 0x55a0b8a50998 'eindex' 'int'
|-CXXMethodDecl 0x55a0b8a50bf0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55a0b8a50b28 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55a0b8a50cc0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55a0b8a50d88 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55a0b8a50e28 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55a0b8a51078 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55a0b8a50ef0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a50f70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55a0b8a51128 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a51180 <col:30>
|-CXXMethodDecl 0x55a0b8a51288 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a0b8a511c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55a0b8a51330 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a51388 <col:30>
|-CXXMethodDecl 0x55a0b8a51458 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a0b8a513c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55a0b8a51500 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a51558 <col:30>
|-CXXMethodDecl 0x55a0b8a516e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55a0b8a51590 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55a0b8a51610 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55a0b8a51878 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a0b8a517b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a0b8a519c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a0b8a51938 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a0b8a51b18 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a0b8a51a88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a0b8a51c68 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a0b8a51bd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a0b8a51f28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55a0b8a51d20 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a51da0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55a0b8a51e48 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55a0b8a52000 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55a0b8a520c0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55a0b8a52390 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a0b8a52240 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55a0b8a522b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a524b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55a0b8a52690 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55a0b8a52570 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55a0b8a525f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55a0b8a52878 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55a0b8a52758 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55a0b8a527d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55a0b8a52be8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a0b8a52938 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a0b8a529b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a0b8a52a30 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a0b8a5d9a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8a5d980 <col:106> 'int' 0
| `-ParmVarDecl 0x55a0b8a52aa8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5d9d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5d9b8 <col:126> 'int' 0
|-CXXMethodDecl 0x55a0b8a52f88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a0b8a52cb8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a0b8a52d50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a0b8a52dd0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55a0b8a52e48 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5da10 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5d9f0 <col:114> 'int' 0
|-CXXMethodDecl 0x55a0b8a53318 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a0b8a53060 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55a0b8a530d8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a0b8a53158 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55a0b8a5da28 <col:96> 'int' 0
| `-ParmVarDecl 0x55a0b8a531d0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5da68 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5da48 <col:116> 'int' 0
|-CXXMethodDecl 0x55a0b8a53698 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a0b8a533e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a0b8a53460 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a534e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a0b8a5daa0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8a5da80 <col:109> 'int' 0
| `-ParmVarDecl 0x55a0b8a53558 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5dad8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5dab8 <col:129> 'int' 0
|-CXXMethodDecl 0x55a0b8a53a18 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a0b8a53768 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a0b8a537e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a53860 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55a0b8a538d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5db10 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5daf0 <col:117> 'int' 0
|-CXXMethodDecl 0x55a0b8a53da8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a0b8a53af0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a53b68 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a53be8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55a0b8a5db28 <col:99> 'int' 0
| `-ParmVarDecl 0x55a0b8a53c60 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a0b8a5db68 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a0b8a5db48 <col:119> 'int' 0
|-CXXMethodDecl 0x55a0b8a541c8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55a0b8a53e78 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a0b8a53ef8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a0b8a53f70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a53ff0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a0b8a5dba0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8a5db80 <col:108> 'int' 0
| `-ParmVarDecl 0x55a0b8a54070 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55a0b8a5dbd8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55a0b8a5dbb8 <col:141> 'int' 0
|-CXXMethodDecl 0x55a0b8a545e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a0b8a542a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a0b8a54320 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a0b8a54398 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a54418 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55a0b8a54498 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a0b8a5dbf0 <col:121> 'int' 0
|-CXXMethodDecl 0x55a0b8a54a18 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a0b8a546c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55a0b8a54748 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55a0b8a547c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a54840 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55a0b8a5dc10 <col:98> 'int' 0
| `-ParmVarDecl 0x55a0b8a548c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a0b8a5dc30 <col:123> 'int' 0
|-CXXMethodDecl 0x55a0b8a54ce0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55a0b8a54af0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a0b8a54b70 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55a0b8a54bf0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55a0b8a5dc50 <col:80> 'int' 0
|-EnumDecl 0x55a0b8a54d98 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55a0b8a54ea0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a0b8a55130 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a54e80 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55a0b8a54e60 <col:42> 'int' 1
| |-EnumConstantDecl 0x55a0b8a54f30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a0b8a55148 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a54f10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55a0b8a54ef0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a0b8a54fc0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a0b8a55160 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a54fa0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55a0b8a54f80 <col:44> 'int' 4
| |-EnumConstantDecl 0x55a0b8a55050 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a0b8a55178 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a55030 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55a0b8a55010 <col:36> 'int' 7
| `-EnumConstantDecl 0x55a0b8a550e0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55a0b8a55190 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a550c0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55a0b8a550a0 <col:34> 'int' 6
|-CXXMethodDecl 0x55a0b8a55448 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55a0b8a551b8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55a0b8a55258 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a0b8a552d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55a0b8a55350 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55a0b8a5dd08 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55a0b8a5dcf0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55a0b8a5dcd8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55a0b8a5dcb8 <col:98, col:105> 'String' (CXXTemporary 0x55a0b8a5dcb8)
|           `-CXXTemporaryObjectExpr 0x55a0b8a5dc80 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55a0b8a556e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55a0b8a55518 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a0b8a55590 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a0b8a55608 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a0b8a5ddb8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a0b8a5dda0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a0b8a5dd88 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a0b8a5dd68 <col:94, col:101> 'String' (CXXTemporary 0x55a0b8a5dd68)
| |         `-CXXTemporaryObjectExpr 0x55a0b8a5dd30 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55a0b8a5e5a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55a0b8a5e518 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55a0b8a5e4e8 <col:9> '<bound member function type>' ->add_task_handlers 0x55a0b8a55448
|     | `-CXXThisExpr 0x55a0b8a5e4d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a0b8a5e558 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b8a5e458 <col:27> 'Task *' lvalue ParmVar 0x55a0b8a55518 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a0b8a5e570 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b8a5e478 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55a0b8a55590 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55a0b8a5e588 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a0b8a5e498 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a0b8a550e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a0b8a5e4b8 <col:62> 'const String' lvalue ParmVar 0x55a0b8a55608 'prefix' 'const String &'
|-CXXMethodDecl 0x55a0b8a558f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55a0b8a557b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a0b8a55828 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a0b8a5de68 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a0b8a5de50 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a0b8a5de38 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a0b8a5de18 <col:70, col:77> 'String' (CXXTemporary 0x55a0b8a5de18)
| |         `-CXXTemporaryObjectExpr 0x55a0b8a5dde0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55a0b8a5e778 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55a0b8a5e6f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55a0b8a5e6c0 <col:9> '<bound member function type>' ->add_task_handlers 0x55a0b8a55448
|     | `-CXXThisExpr 0x55a0b8a5e6b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a0b8a5e730 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b8a5e630 <col:27> 'Task *' lvalue ParmVar 0x55a0b8a557b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a0b8a5e748 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55a0b8a5e650 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55a0b8a5e760 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a0b8a5e670 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a0b8a550e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a0b8a5e690 <col:57> 'const String' lvalue ParmVar 0x55a0b8a55828 'prefix' 'const String &'
|-CXXMethodDecl 0x55a0b8a55bd8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55a0b8a559c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a55a40 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a55ab8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55a0b8a55e88 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55a0b8a55ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a55d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a55da8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55a0b8a56178 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a0b8a55f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a55fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a56050 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55a0b8a56428 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55a0b8a56248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a562c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a56348 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55a0b8a566d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55a0b8a564f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a56578 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a565f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55a0b8a56988 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55a0b8a567a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a56828 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a568a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55a0b8a56c38 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55a0b8a56a58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a56ad8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a56b58 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55a0b8a56f48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55a0b8a56d60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a56de0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a56e60 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55a0b8a57228 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55a0b8a57018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a57098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a57140 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55a0b8a57508 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55a0b8a572f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a57378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a57420 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55a0b8a57770 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a0b8a575d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a0b8a57658 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a0b8a576d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55a0b8a57a18 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55a0b8a57840 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a0b8a578c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a0b8a57938 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55a0b8a57cc8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55a0b8a57ae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a57b68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a57be8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55a0b8a57f78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55a0b8a57d98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a57e18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a57e90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55a0b8a58228 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55a0b8a58048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a580c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a58140 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55a0b8a584f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55a0b8a582f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a58378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a0b8a58418 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55a0b8a58828 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55a0b8a585c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a0b8a58648 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55a0b8a586c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55a0b8a58738 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a0b8a5de80 <col:93> 'bool' false
|-CXXMethodDecl 0x55a0b8a58a10 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a0b8a588f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55a0b8a58978 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55a0b8a58be8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a0b8a58ad0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55a0b8a58b50 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55a0b8a58ec8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a0b8a58ca8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55a0b8a58d20 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55a0b8a58da0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55a0b8a58e18 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a591b8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a0b8a58f98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55a0b8a59010 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55a0b8a59090 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55a0b8a59108 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a593f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55a0b8a59290 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55a0b8a59310 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55a0b8a595d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55a0b8a594b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55a0b8a59538 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55a0b8a59688 prev 0x55a0b8a50e28 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a0b8a59780 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55a0b8a59810 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55a0b8a59888 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55a0b8a59948 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55a0b8a59a10 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55a0b8a59b88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55a0b8a59ac0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55a0b8a59c30 <col:24>
| | `-OptimizeNoneAttr 0x55a0b8a59c88 <col:34>
| |-CXXMethodDecl 0x55a0b8a59cd0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55a0b8a59f88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55a0b8a59d80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a0b8a59df8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55a0b8a59e78 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55a0b8a5a040 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55a0b8a5a078 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55a0b8a5a0e0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55a0b8a5a168 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55a0b8a5a488 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55a0b8a5a220 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a0b8a5a298 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55a0b8a5a310 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55a0b8a5a390 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55a0b8a5a5a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55a0b8a61f18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a0b8a61f18
| | `-ParmVarDecl 0x55a0b8a62028 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55a0b8a620c8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a0b8a620c8
| | `-ParmVarDecl 0x55a0b8a621d8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55a0b8b49a68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a0b8a5a618 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55a0b8a5a6b8 <col:38> "" ""
|-CXXMethodDecl 0x55a0b8a5a748 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55a0b8a5a7e8 <col:44> "" ""
|-AccessSpecDecl 0x55a0b8a5a858 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55a0b8a5a880 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55a0b8a5a980 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55a0b8a5a9d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a5a960 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55a0b8a5a940 <col:27> 'int' 4
|-FieldDecl 0x55a0b8a5aa88 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55a0b8a5ac38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55a0b8a5acf0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55a0b8a5bd80 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55a0b8a5bde8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55a0b8a5bf38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55a0b8a5be78 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55a0b8a5c0e8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55a0b8a5bff8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55a0b8a5c2c8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55a0b8a5c1a8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55a0b8a5c228 <col:25> col:28 'int'
|-CXXMethodDecl 0x55a0b8a5c570 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a5c390 <col:23> col:26 'int'
| |-ParmVarDecl 0x55a0b8a5c410 <col:28> col:31 'int'
| `-ParmVarDecl 0x55a0b8a5c488 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55a0b8a5c628 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55a0b8a5c6f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55a0b8a5c740 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55a0b8a5c790 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55a0b8a5c970 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55a0b8a5c820 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55a0b8a5c898 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a5cc18 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55a0b8a5ca38 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55a0b8a5cab8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55a0b8a5cb30 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a5ce38 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55a0b8a5cce8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55a0b8a5cd68 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55a0b8a5d170 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55a0b8a5cef8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55a0b8a5cf78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55a0b8a5cff0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55a0b8a5d070 <col:57> col:60 'int'
|-CXXMethodDecl 0x55a0b8a5d358 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a0b8a5d240 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55a0b8a5d2c0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55a0b8a5d4a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55a0b8a5d418 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55a0b8a5d828 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55a0b8a5d568 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55a0b8a5d5e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55a0b8a5d660 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55a0b8a5d6e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55a0b8a5d940 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class GapRate
         0 |   unsigned int _ugap
         4 |   int _sec_count
         8 |   class Timestamp::seconds_type _tv_sec
        12 |   unsigned int _rate
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class FastTCPFlows
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _rate_limited
       109 |   _Bool _sent_all_fins
       112 |   unsigned int _len
       116 |   struct click_ether _ethh
       116 |     uint8_t [6] ether_dhost
       122 |     uint8_t [6] ether_shost
       128 |     uint16_t ether_type
       132 |   struct in_addr _sipaddr
       132 |     in_addr_t s_addr
       136 |   struct in_addr _dipaddr
       136 |     in_addr_t s_addr
       140 |   unsigned int _nflows
       144 |   unsigned int _last_flow
       148 |   unsigned int _flowsize
       152 |   _Bool _cksum
       156 |   click_jiffies_t _first
       160 |   click_jiffies_t _last
       168 |   struct FastTCPFlows::flow_t * _flows
       176 |   class GapRate _rate
       176 |     unsigned int _ugap
       180 |     int _sec_count
       184 |     class Timestamp::seconds_type _tv_sec
       188 |     unsigned int _rate
       192 |   unsigned int _count
       196 |   unsigned int _limit
       200 |   _Bool _active
           | [sizeof=208, dsize=201, align=8,
           |  nvsize=201, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a6a130 prev 0x55a0b8a130f0 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55a0b8a6a4f8 <line:21:18>
|-CXXRecordDecl 0x55a0b8a6a228 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55a0b8a6a398 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55a0b8a6a448 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x55a0b8a6a4a8 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55a0b8b494b8 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b8b498e8 <col:8>
|-CXXConstructorDecl 0x55a0b8b495b8 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x55a0b8b495b8
| `-ParmVarDecl 0x55a0b8b496c8 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x55a0b8b49768 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x55a0b8b49768
  `-ParmVarDecl 0x55a0b8b49878 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8711ac8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8711be8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55a0b8711cb0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b8851f10 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b8856e08 <col:8>
|-CXXConstructorDecl 0x55a0b8852018 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55a0b8852018
| `-ParmVarDecl 0x55a0b8852128 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55a0b88521c8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b88522d8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55a0b8711cb0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8857020 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b8856ff0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55a0b8711cb0
| |     `-CXXStaticCastExpr 0x55a0b8856fc0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8856f90 <col:8> 'in_addr' lvalue ParmVar 0x55a0b88522d8 '' 'in_addr &&'
| `-CompoundStmt 0x55a0b8857068 <col:8>
`-CXXDestructorDecl 0x55a0b88572a0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct FastTCPFlows::flow_t
         0 |   class Packet * syn_packet
         8 |   class Packet * fin_packet
        16 |   class Packet * data_packet
        24 |   unsigned int flow_count
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8810828 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8810948 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55a0b88109d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55a0b8810aa8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55a0b8810b90 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8810da8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a0b8810c50 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8810f58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a0b8810e60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a0b88110a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a0b8811010 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a0b88111e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a0b8811158 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8811330 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a0b88112a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b88113f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55a0b8811540 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55a0b88114b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a0b8811608 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55a0b8811750 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55a0b88116c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a0b88118c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a0b8811808 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8811a10 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a0b8811980 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8811ad8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55a0b8811c98 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8811b88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a0b8811c00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8811ee8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8811d58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8811dd0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b8811f98 <col:86> "" ""
|-CXXMethodDecl 0x55a0b8812208 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b8812078 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55a0b88120f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b88123b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a0b88122c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a0b8812568 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a0b8812470 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a0b8812838 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b8812620 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a0b8812698 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a0b8812710 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8812b18 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b8812900 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a0b8812978 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b88129f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b8812bd0 <col:115> "" ""
|-AccessSpecDecl 0x55a0b8812c40 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55a0b8812c78 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8813128 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a0b8813128
| `-ParmVarDecl 0x55a0b8813238 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55a0b88132d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a0b88132d8
| `-ParmVarDecl 0x55a0b88133e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55a0b8848ca8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b8a36190 <col:7>
|-CXXConstructorDecl 0x55a0b8848d80 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a0b8848d80
| `-ParmVarDecl 0x55a0b8848e98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55a0b8848f08 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a0b8848f08
| `-ParmVarDecl 0x55a0b8849018 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55a0b8a38b90 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a24d38 prev 0x55a0b8a19f40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8a24e30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55a0b8a24f20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55a0b8a25048 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55a0b8a251c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55a0b8a25348 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55a0b8a254c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55a0b8a362f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b8a36b68 <col:11>
|-CXXDestructorDecl 0x55a0b8a363d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8a36508 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a0b8a36508
| `-ParmVarDecl 0x55a0b8a36618 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55a0b8a366b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a366b8
| `-ParmVarDecl 0x55a0b8a367c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55a0b8a39588 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8a39698 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55a0b8a39918 <col:11>
|   `-ReturnStmt 0x55a0b8a39908 <col:11>
|     `-UnaryOperator 0x55a0b8a398f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8a398e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55a0b8a39708 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a39708
  `-ParmVarDecl 0x55a0b8a39818 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a25530 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8a25648 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55a0b8a256e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55a0b8a25750 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55a0b8a257b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55a0b8a25820 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55a0b8a25880 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55a0b8a25940 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55a0b8a259a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55a0b8a25a00 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55a0b8a36208 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55a0b8a256e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55a0b8a36b78 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55a0b8a36bd0 <col:12>
|-CXXConstructorDecl 0x55a0b8a36838 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a0b8a36838
| `-ParmVarDecl 0x55a0b8a36948 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55a0b8a369e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a369e8
| `-ParmVarDecl 0x55a0b8a36af8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55a0b8a38c70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a13650 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a0b8a13768 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55a0b8a137f8 <col:16, col:22> col:16 public
|-EnumDecl 0x55a0b8a13820 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55a0b8a13920 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55a0b8a13a00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a13900 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55a0b8a138e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55a0b8a139b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55a0b8a13a18 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a13990 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55a0b8a13970 <col:22> 'int' 64
|-CXXMethodDecl 0x55a0b8a13d58 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a0b8a13a40 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8a13ac0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55a0b8a13b38 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8a13bb0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a13e18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a14018 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b8a13e90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55a0b8a13f08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a140c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a14228 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55a0b8a14138 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a142d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55a0b8a14630 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55a0b8a145c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55a0b8a14560 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55a0b8a14520 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55a0b84ea2d0 'void'
|       |-PointerType 0x55a0b87231f0 'unsigned char *'
|       | `-BuiltinType 0x55a0b84ea3d0 'unsigned char'
|       |-TypedefType 0x55a0b8590030 'size_t' sugar
|       | |-Typedef 0x55a0b855ab20 'size_t'
|       | `-BuiltinType 0x55a0b84ea430 'unsigned long'
|       `-PointerType 0x55a0b84eaad0 'void *'
|         `-BuiltinType 0x55a0b84ea2d0 'void'
|-CXXMethodDecl 0x55a0b8a14aa8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55a0b8a146a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55a0b8a14718 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8a147b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55a0b8a14830 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55a0b8a2f1a0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55a0b8a2f188 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55a0b8a2f150 <col:58> 'int' 0
| |-ParmVarDecl 0x55a0b8a148b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55a0b8a2f1c8 <col:76> 'int' 0
| |-ParmVarDecl 0x55a0b8a14930 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55a0b8a2f1e8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55a0b8a14b78 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a14bf8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a0b8a14cb8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55a0b8a14d58 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a14db0 <col:30>
|-CXXMethodDecl 0x55a0b8a14e28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55a0b8a14ec8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a14f20 <col:30>
|-CXXMethodDecl 0x55a0b8a14f98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55a0b8a15038 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a150e8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55a0b8a15188 <col:20>
| |-OptimizeNoneAttr 0x55a0b8a151e0 <col:30>
| `-WarnUnusedResultAttr 0x55a0b8a15208 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a15260 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a15300 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a15358 <col:30>
|-CXXMethodDecl 0x55a0b8a153a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a15448 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a154a0 <col:30>
|-CXXMethodDecl 0x55a0b8a154e8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55a0b8a15588 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a155e0 <col:30>
|-CXXMethodDecl 0x55a0b8a15628 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a156e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a157b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a15878 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a15938 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a15a58 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55a0b8a2f2b0 <col:54, line:99:5>
|   `-ReturnStmt 0x55a0b8a2f2a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8a2f288 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55a0b8a2f258 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a0b8a25d38
|         `-CXXThisExpr 0x55a0b8a2f248 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a0b8a15bf8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55a0b8a15b08 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55a0b8a2f360 <col:67, line:103:5>
|   `-BinaryOperator 0x55a0b8a2f340 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a0b8a2f2d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a0b8a25d38
|     | `-CXXThisExpr 0x55a0b8a2f2c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a0b8a2f328 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a2f308 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55a0b8a15b08 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55a0b8a15cf0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55a0b8a2f3e0 <col:33, line:107:5>
|   `-ReturnStmt 0x55a0b8a2f3d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8a2f3b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55a0b8a2f388 <col:16> 'void *' lvalue ->_destructor_argument 0x55a0b8a25da0
|         `-CXXThisExpr 0x55a0b8a2f378 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a0b8a15db0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55a0b8a2fa10 <col:25, line:113:5>
|   |-ParenExpr 0x55a0b8a2f758 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55a0b8a2f728 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a2f498 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a0b8a2f470 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55a0b8a2f438 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55a0b8a2f408 <col:24> '<bound member function type>' ->shared 0x55a0b8a14e28
|   |   |       `-ImplicitCastExpr 0x55a0b8a2f458 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55a0b8a2f3f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a0b8a2f4f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a2f4d8 <col:42> 'int' 0
|   |   `-CallExpr 0x55a0b8a2f688 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a2f670 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a2f650 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a2f6c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a2f568 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55a0b8a2f6e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a2f590 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a2f6f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a2f5c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55a0b8a2f710 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a2f638 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a2f620 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a2f5e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55a0b8a2f958 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55a0b8a2f788 <col:2> 'unsigned char *' lvalue ->_head 0x55a0b8a25b40
|   | | `-CXXThisExpr 0x55a0b8a2f778 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55a0b8a2f940 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55a0b8a2f920 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55a0b8a2f7c8 <col:10> 'unsigned char *' lvalue ->_data 0x55a0b8a25ba8
|   |     | `-CXXThisExpr 0x55a0b8a2f7b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55a0b8a2f908 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55a0b8a2f8e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55a0b8a2f808 <col:18> 'unsigned char *' lvalue ->_tail 0x55a0b8a25c10
|   |         | `-CXXThisExpr 0x55a0b8a2f7f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55a0b8a2f8d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55a0b8a2f8b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55a0b8a2f848 <col:26> 'unsigned char *' lvalue ->_end 0x55a0b8a25c78
|   |             | `-CXXThisExpr 0x55a0b8a2f838 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55a0b8a2f898 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55a0b8a2f878 <col:33> 'int' 0
|   `-BinaryOperator 0x55a0b8a2f9f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a0b8a2f988 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a0b8a25d38
|     | `-CXXThisExpr 0x55a0b8a2f978 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a0b8a2f9d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55a0b8a2f9b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55a0b8a15ef0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a0b8a15e60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a15f98 <col:20>
| |-OptimizeNoneAttr 0x55a0b8a15ff0 <col:30>
| `-WarnUnusedResultAttr 0x55a0b8a16018 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a160e8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a0b8a16058 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a16190 <col:20>
| |-OptimizeNoneAttr 0x55a0b8a161e8 <col:30>
| `-WarnUnusedResultAttr 0x55a0b8a16210 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a16348 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a0b8a16250 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a163f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a164f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55a0b8a16460 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a16598 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a165f0 <col:30>
|-CXXMethodDecl 0x55a0b8a166b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a0b8a16628 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a16760 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a16860 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a0b8a167d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a0b8a16908 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a16a08 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55a0b8a16978 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a16ab0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a16b08 <col:30>
|-CXXMethodDecl 0x55a0b8a16c98 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55a0b8a16b48 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55a0b8a16bc0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55a0b8a2f208 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55a0b8a16d48 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55a0b8a16f48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a16dc0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55a0b8a16e38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a17158 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a17008 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a0b8a17080 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a17368 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55a0b8a17218 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55a0b8a17298 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55a0b8a2f218 <col:39> 'int' 0
|-CXXMethodDecl 0x55a0b8a17438 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55a0b8a17500 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a175c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a0b8a17688 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a17750 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55a0b8a17898 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55a0b8a17808 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55a0b8a17a68 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a17958 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55a0b8a179d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a17b38 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55a0b8a17bf8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55a0b8a17c98 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a17cf0 <col:30>
|-CXXMethodDecl 0x55a0b8a17d40 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a17de0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a17e38 <col:30>
|-CXXMethodDecl 0x55a0b8a17e88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a0b8a17f48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a18010 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55a0b8a180b0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a18108 <col:30>
|-CXXMethodDecl 0x55a0b8a18258 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a18148 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55a0b8a181c0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a183a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a0b8a18318 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a18480 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55a0b8a18540 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55a0b8a185e0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a18638 <col:30>
|-CXXMethodDecl 0x55a0b8a18688 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a18728 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a18780 <col:30>
|-CXXMethodDecl 0x55a0b8a187d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a0b8a18898 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55a0b8a18938 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a18990 <col:30>
|-CXXMethodDecl 0x55a0b8a189d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55a0b8a18af8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55a0b8a18c68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55a0b8a18ba8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55a0b8a18d58 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55a0b8a18df8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a18e50 <col:30>
|-CXXMethodDecl 0x55a0b8a18ea0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a0b8a18f60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8a19198 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55a0b8a19010 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55a0b8a19088 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a19248 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a192a0 <col:30>
|-CXXMethodDecl 0x55a0b8a19348 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55a0b8a193e8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a19440 <col:30>
|-CXXMethodDecl 0x55a0b8a19490 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55a0b8a19530 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a19588 <col:30>
|-CXXMethodDecl 0x55a0b8a195d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55a0b8a19670 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a196c8 <col:30>
|-CXXMethodDecl 0x55a0b8a197c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55a0b8a19700 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55a0b8a19870 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a198c8 <col:30>
|-CXXMethodDecl 0x55a0b8a19a88 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55a0b8a19900 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55a0b8a19978 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a19b38 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a19b90 <col:30>
|-CXXMethodDecl 0x55a0b8a19c38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55a0b8a19d58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55a0b8a19e78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55a0b8a19f18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55a0b8a19f40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55a0b8a1a068 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55a0b8a1a108 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1a160 <col:30>
|-CXXMethodDecl 0x55a0b8a1a208 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55a0b8a1a2a8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1a300 <col:30>
|-AccessSpecDecl 0x55a0b8a1a328 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55a0b8a1a350 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55a0b8a1a450 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55a0b8a1a4a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a1a430 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55a0b8a1a410 <col:14> 'int' 48
|-CXXMethodDecl 0x55a0b8a1a508 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55a0b8a1a5a8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1a600 <col:30>
|-CXXMethodDecl 0x55a0b8a1a678 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55a0b8a1a718 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1a770 <col:30>
|-CXXMethodDecl 0x55a0b8a1a838 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55a0b8a1a7a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55a0b8a1a9d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55a0b8a1ab78 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55a0b8a1aa88 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55a0b8a1ac20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55a0b8a1ad20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b0d0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ad00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8a1ace0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55a0b8a1adb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b0e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ad90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55a0b8a1ad70 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a0b8a1ae40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b100 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ae20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55a0b8a1ae00 <col:14> 'int' 2
| |-EnumConstantDecl 0x55a0b8a1aed0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b118 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1aeb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55a0b8a1ae90 <col:14> 'int' 3
| |-EnumConstantDecl 0x55a0b8a1af60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b130 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1af40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55a0b8a1af20 <col:13> 'int' 4
| |-EnumConstantDecl 0x55a0b8a1aff0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a0b8a1b148 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1afd0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55a0b8a1afb0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55a0b8a1b080 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55a0b8a1b160 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a1b060 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55a0b8a1b040 <col:14> 'int' 6
|-CXXMethodDecl 0x55a0b8a1b1c8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55a0b8a1b268 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1b2c0 <col:30>
|-CXXMethodDecl 0x55a0b8a1b3b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55a0b8a1b2f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55a0b8a1b460 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1b4b8 <col:30>
|-CXXMethodDecl 0x55a0b8a1b528 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55a0b8a1b650 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55a0b8a1b7c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55a0b8a1b700 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55a0b8a1b890 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55a0b8a1b958 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55a0b8a1ba98 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55a0b8a1ba08 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55a0b8a1bb40 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55a0b8a1bc40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a0b8a1be40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1bc20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8a1bc00 <col:23> 'int' 0
| |-EnumConstantDecl 0x55a0b8a1bcd0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a0b8a1be58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1bcb0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55a0b8a1bc90 <col:45> 'int' 4
| |-EnumConstantDecl 0x55a0b8a1bd60 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a0b8a1be70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1bd40 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8a1bd20 <col:24> 'int' 0
| `-EnumConstantDecl 0x55a0b8a1bdf0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55a0b8a1be88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a1bdd0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55a0b8a1bdb0 <col:47> 'int' 16
|-CXXMethodDecl 0x55a0b8a1bee8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55a0b8a1c058 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55a0b8a1bf98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55a0b8a1c100 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1c158 <col:30>
|-CXXMethodDecl 0x55a0b8a1c1a8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55a0b8a2fb30 <col:18, col:36>
|   `-ReturnStmt 0x55a0b8a2fb20 <col:20, col:33>
|     `-ImplicitCastExpr 0x55a0b8a2fb08 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a0b8a2fae8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55a0b8a2fab8 <col:27> '<bound member function type>' ->xanno 0x55a0b8a1a208
|           `-CXXThisExpr 0x55a0b8a2faa8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55a0b8a1c2a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55a0b8a2fc40 <col:30, col:48>
|   `-ReturnStmt 0x55a0b8a2fc30 <col:32, col:45>
|     `-ImplicitCastExpr 0x55a0b8a2fc18 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a0b8a2fbf8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55a0b8a2fbc8 <col:39> '<bound member function type>' ->xanno 0x55a0b8a1a068
|           `-CXXThisExpr 0x55a0b8a2fbb8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a0b8a1c388 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55a0b8a2fdd8 <col:24, col:50>
|   `-ReturnStmt 0x55a0b8a2fdc8 <col:26, col:47>
|     `-UnaryOperator 0x55a0b8a2fdb0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a0b8a2fd90 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a0b8a2fd78 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a0b8a2fd28 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55a0b8a25048
|         |   `-CXXMemberCallExpr 0x55a0b8a2fd08 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a0b8a2fcd8 <col:34> '<bound member function type>' ->xanno 0x55a0b8a1a208
|         |       `-CXXThisExpr 0x55a0b8a2fcc8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a0b8a2fd58 <col:46> 'int' 0
|-CXXMethodDecl 0x55a0b8a1c490 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55a0b8a2ffa8 <col:36, col:62>
|   `-ReturnStmt 0x55a0b8a2ff98 <col:38, col:59>
|     `-UnaryOperator 0x55a0b8a2ff80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a0b8a2ff60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a0b8a2ff48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a0b8a2fec0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55a0b8a25048
|         |   `-CXXMemberCallExpr 0x55a0b8a2fea0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a0b8a2fe70 <col:46> '<bound member function type>' ->xanno 0x55a0b8a1a068
|         |       `-CXXThisExpr 0x55a0b8a2fe60 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a0b8a2fef0 <col:58> 'int' 0
|-CXXMethodDecl 0x55a0b8a1c5a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55a0b8a30140 <col:26, col:53>
|   `-ReturnStmt 0x55a0b8a30130 <col:28, col:50>
|     `-UnaryOperator 0x55a0b8a30118 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a0b8a300f8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a0b8a300e0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a0b8a30090 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55a0b8a25348
|         |   `-CXXMemberCallExpr 0x55a0b8a30070 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a0b8a30040 <col:36> '<bound member function type>' ->xanno 0x55a0b8a1a208
|         |       `-CXXThisExpr 0x55a0b8a30030 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a0b8a300c0 <col:49> 'int' 0
|-CXXMethodDecl 0x55a0b8a1c6c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55a0b8a30318 <col:38, col:65>
|   `-ReturnStmt 0x55a0b8a30308 <col:40, col:62>
|     `-UnaryOperator 0x55a0b8a302f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a0b8a302d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a0b8a302b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a0b8a30228 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55a0b8a25348
|         |   `-CXXMemberCallExpr 0x55a0b8a30208 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a0b8a301d8 <col:48> '<bound member function type>' ->xanno 0x55a0b8a1a068
|         |       `-CXXThisExpr 0x55a0b8a301c8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a0b8a30258 <col:61> 'int' 0
|-CXXMethodDecl 0x55a0b8a1c878 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55a0b8a1c780 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55a0b8a309e8 <col:34, line:463:5>
|   |-ParenExpr 0x55a0b8a30830 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a0b8a30800 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a30468 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a30438 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a30388 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a30370 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a30330 <col:23> 'int' lvalue ParmVar 0x55a0b8a1c780 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a30350 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a30418 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a303e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a303a8 <col:33> 'int' lvalue ParmVar 0x55a0b8a1c780 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a0b8a30400 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a0b8a303c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a0b8a304c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a304a8 <col:56> 'int' 0
|   |   `-CallExpr 0x55a0b8a30760 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a30748 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a30728 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a307a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a305b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a0b8a307b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a305e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a307d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a30620 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55a0b8a307e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a30710 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a306f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a306b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55a0b8a309d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55a0b8a309c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55a0b8a309a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a0b8a30970 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a0b8a30920 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55a0b8a25048
|         |   `-CXXMemberCallExpr 0x55a0b8a30900 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a0b8a308d0 <col:9> '<bound member function type>' ->xanno 0x55a0b8a1a068
|         |       `-CXXThisExpr 0x55a0b8a308c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55a0b8a30988 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55a0b8a30950 <col:21> 'int' lvalue ParmVar 0x55a0b8a1c780 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1cac8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55a0b8a1c938 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55a0b8a1c9b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55a0b8a31078 <col:40, line:472:5>
|   |-ParenExpr 0x55a0b8a30e90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a0b8a30e60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a30b40 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a30b10 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a30a60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a30a48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a30a08 <col:23> 'int' lvalue ParmVar 0x55a0b8a1c938 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a30a28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a30af0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a30ac0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a30a80 <col:33> 'int' lvalue ParmVar 0x55a0b8a1c938 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a0b8a30ad8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a0b8a30aa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a0b8a30ba0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a30b80 <col:56> 'int' 0
|   |   `-CallExpr 0x55a0b8a30dc0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a30da8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a30d88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a30e00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a30c10 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a0b8a30e18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a30c40 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a30e30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a30c78 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55a0b8a30e48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a30d70 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a30d58 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a30d18 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55a0b8a31058 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55a0b8a31000 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55a0b8a30fd0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a0b8a30f80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55a0b8a25048
|     | |   `-CXXMemberCallExpr 0x55a0b8a30f60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55a0b8a30f30 <col:2> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     | |       `-CXXThisExpr 0x55a0b8a30f20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55a0b8a30fe8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a0b8a30fb0 <col:14> 'int' lvalue ParmVar 0x55a0b8a1c938 'i' 'int'
|     `-ImplicitCastExpr 0x55a0b8a31040 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a31020 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55a0b8a1c9b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55a0b8a1cc88 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55a0b8a1cb90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a0b8a317f8 <col:36, line:485:5>
|   |-ParenExpr 0x55a0b8a31560 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a31530 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a31210 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a311e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a310f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a310d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a31098 <col:23> 'int' lvalue ParmVar 0x55a0b8a1cb90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a310b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a311c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a311a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a31110 <col:33> 'int' lvalue ParmVar 0x55a0b8a1cb90 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a31188 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a31170 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a31130 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a31150 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a0b8a31270 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a31250 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a31490 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a31478 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a31458 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a314d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a312e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a0b8a314e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a31318 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a31500 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a31350 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55a0b8a31518 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a31440 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a31428 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a313e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55a0b8a317e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55a0b8a317d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a317b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a31788 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a31728 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a316f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a31670 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a31650 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a31620 <col:61> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a31610 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a31710 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a316a0 <col:74> 'int' lvalue ParmVar 0x55a0b8a1cb90 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1ced8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55a0b8a1cd48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a0b8a1cdc0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a0b8a31f48 <col:42, line:500:5>
|   |-ParenExpr 0x55a0b8a31ce0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a31cb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a31990 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a31960 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a31870 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a31858 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a31818 <col:23> 'int' lvalue ParmVar 0x55a0b8a1cd48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a31838 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a31940 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a31928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a31890 <col:33> 'int' lvalue ParmVar 0x55a0b8a1cd48 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a31908 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a318f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a318b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a318d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a0b8a319f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a319d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a31c10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a31bf8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a31bd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a31c50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a31a60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a0b8a31c68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a31a98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a31c80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a31ad0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55a0b8a31c98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a31bc0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a31ba8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a31b68 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55a0b8a31f28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55a0b8a31ed8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a0b8a31ea8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a0b8a31e50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a0b8a31e20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a0b8a31dd0 <col:48, col:57> 'char [48]' lvalue ->c 0x55a0b8a24f20
|     |     |   `-CXXMemberCallExpr 0x55a0b8a31db0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a0b8a31d80 <col:48> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     |     |       `-CXXThisExpr 0x55a0b8a31d70 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a0b8a31e38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a0b8a31e00 <col:61> 'int' lvalue ParmVar 0x55a0b8a1cd48 'i' 'int'
|     `-ImplicitCastExpr 0x55a0b8a31f10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a31ef0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a0b8a1cdc0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55a0b8a1d098 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55a0b8a1cfa0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a0b8a326a8 <col:35, line:513:5>
|   |-ParenExpr 0x55a0b8a323b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a32388 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a320e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a320b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a31fc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a31fa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a31f68 <col:23> 'int' lvalue ParmVar 0x55a0b8a1cfa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a31f88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a32090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a32078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a31fe0 <col:33> 'int' lvalue ParmVar 0x55a0b8a1cfa0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a32058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a32040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a32000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a32020 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a0b8a32140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a32120 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a322e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a322d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a322b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a32328 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a321b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a0b8a32340 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a321e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a32358 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a32220 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55a0b8a32370 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a32298 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a32280 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a32240 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55a0b8a32698 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55a0b8a32680 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a32668 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a32638 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a325b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a32580 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a32530 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a32510 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a324e0 <col:60> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a324d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a32598 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a32560 <col:73> 'int' lvalue ParmVar 0x55a0b8a1cfa0 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1d2e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55a0b8a1d158 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a0b8a1d1d0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55a0b8a32dc8 <col:41, line:528:5>
|   |-ParenExpr 0x55a0b8a32b50 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a32b20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a32840 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a32810 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a32720 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a32708 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a326c8 <col:23> 'int' lvalue ParmVar 0x55a0b8a1d158 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a326e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a327f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a327d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a32740 <col:33> 'int' lvalue ParmVar 0x55a0b8a1d158 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a327b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a327a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a32760 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a32780 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a0b8a328a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a32880 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a32a80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a32a68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a32a48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a32ac0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a32910 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a0b8a32ad8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a32948 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a32af0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a32980 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55a0b8a32b08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a32a30 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a32a18 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a329d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55a0b8a32da8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55a0b8a32d58 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a0b8a32d28 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a0b8a32cd0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a0b8a32c90 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a0b8a32c40 <col:47, col:56> 'char [48]' lvalue ->c 0x55a0b8a24f20
|     |     |   `-CXXMemberCallExpr 0x55a0b8a32c20 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a0b8a32bf0 <col:47> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     |     |       `-CXXThisExpr 0x55a0b8a32be0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a0b8a32ca8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a0b8a32c70 <col:60> 'int' lvalue ParmVar 0x55a0b8a1d158 'i' 'int'
|     `-ImplicitCastExpr 0x55a0b8a32d90 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a32d70 <col:65> 'int16_t':'short' lvalue ParmVar 0x55a0b8a1d1d0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55a0b8a1d4a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55a0b8a1d3b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a0b8a33498 <col:36, line:541:5>
|   |-ParenExpr 0x55a0b8a33238 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a33208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a32f60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a32f30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a32e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a32e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a32de8 <col:23> 'int' lvalue ParmVar 0x55a0b8a1d3b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a32e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a32f10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a32ef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a32e60 <col:33> 'int' lvalue ParmVar 0x55a0b8a1d3b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a32ed8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a32ec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a32e80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a32ea0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a0b8a32fc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a32fa0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a33168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a33150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a33130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a331a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a0b8a331c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a331d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a330a0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55a0b8a331f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a33118 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a33100 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a330c0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55a0b8a33488 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55a0b8a33470 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a33458 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a33428 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a333d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a333a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a33350 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a33330 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a33300 <col:61> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a332f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a333b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a33380 <col:74> 'int' lvalue ParmVar 0x55a0b8a1d3b0 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1d678 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55a0b8a1d568 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55a0b8a1d5e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a0b8a1d728 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a1d780 <col:30>
|-CXXMethodDecl 0x55a0b8a1d8b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55a0b8a1d7c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a0b8a33b68 <col:35, line:562:5>
|   |-ParenExpr 0x55a0b8a33908 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a338d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a33630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a33600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a33510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a334f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a334b8 <col:23> 'int' lvalue ParmVar 0x55a0b8a1d7c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a334d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a335e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a335c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a33530 <col:33> 'int' lvalue ParmVar 0x55a0b8a1d7c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a335a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a33590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a33550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a33570 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a0b8a33690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a33670 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a33838 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a33820 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a33800 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a33878 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a0b8a33890 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33738 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a338a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a33770 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55a0b8a338c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a337e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a337d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a33790 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55a0b8a33b58 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55a0b8a33b40 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a33b28 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a33af8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a33aa0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a33a70 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a33a20 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a33a00 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a339d0 <col:60> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a339c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a33a88 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a33a50 <col:73> 'int' lvalue ParmVar 0x55a0b8a1d7c0 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1dac8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55a0b8a1d978 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a0b8a1d9f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55a0b8a34248 <col:41, line:577:5>
|   |-ParenExpr 0x55a0b8a33fd8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a33fa8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a33d00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a33cd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a33be0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a33bc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a33b88 <col:23> 'int' lvalue ParmVar 0x55a0b8a1d978 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a33ba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a33cb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a33c98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a33c00 <col:33> 'int' lvalue ParmVar 0x55a0b8a1d978 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a33c78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a33c60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a33c20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a33c40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a0b8a33d60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a33d40 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a33f08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a33ef0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a33ed0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a33f48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33dd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a0b8a33f60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a33e08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a33f78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a33e40 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55a0b8a33f90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a33eb8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a33ea0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a33e60 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55a0b8a34228 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55a0b8a341d8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a0b8a341a8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55a0b8a34148 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a0b8a34118 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a0b8a340c8 <col:47, col:56> 'char [48]' lvalue ->c 0x55a0b8a24f20
|     |     |   `-CXXMemberCallExpr 0x55a0b8a340a8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a0b8a34078 <col:47> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     |     |       `-CXXThisExpr 0x55a0b8a34068 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a0b8a34130 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a0b8a340f8 <col:60> 'int' lvalue ParmVar 0x55a0b8a1d978 'i' 'int'
|     `-ImplicitCastExpr 0x55a0b8a34210 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a341f0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55a0b8a1d9f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55a0b8a1dc88 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55a0b8a1db90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a0b8a34978 <col:36, line:591:5>
|   |-ParenExpr 0x55a0b8a346b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a34688 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a343e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a343b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a342c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a342a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a34268 <col:23> 'int' lvalue ParmVar 0x55a0b8a1db90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a34288 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a34390 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a34378 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a342e0 <col:33> 'int' lvalue ParmVar 0x55a0b8a1db90 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a34358 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a34340 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a34300 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a34320 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a0b8a34440 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a34420 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a345e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a345d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a345b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a34628 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a344b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a0b8a34640 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a344e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a34658 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a34520 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55a0b8a34670 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a34598 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a34580 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a34540 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55a0b8a34968 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55a0b8a34950 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a34938 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a34908 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a34880 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a34850 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a34800 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a347e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a347b0 <col:61> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a347a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a34868 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a34830 <col:74> 'int' lvalue ParmVar 0x55a0b8a1db90 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1ded8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55a0b8a1dd48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a0b8a1ddc0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55a0b8a35058 <col:42, line:606:5>
|   |-ParenExpr 0x55a0b8a34de8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a0b8a34db8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a34b10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a34ae0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a349f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a349d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a34998 <col:23> 'int' lvalue ParmVar 0x55a0b8a1dd48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a349b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a34ac0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a0b8a34aa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a34a10 <col:33> 'int' lvalue ParmVar 0x55a0b8a1dd48 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a34a88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a34a70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a34a30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a0b8a34a50 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a0b8a34b70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a34b50 <col:60> 'int' 0
|   |   `-CallExpr 0x55a0b8a34d18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a34d00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a34ce0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a34d58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a34be0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a0b8a34d70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a34c18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a34d88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a34c50 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55a0b8a34da0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a34cc8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a34cb0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a34c70 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55a0b8a35038 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55a0b8a34fe8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a0b8a34fb8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55a0b8a34f58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a0b8a34f28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a0b8a34ed8 <col:48, col:57> 'char [48]' lvalue ->c 0x55a0b8a24f20
|     |     |   `-CXXMemberCallExpr 0x55a0b8a34eb8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a0b8a34e88 <col:48> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     |     |       `-CXXThisExpr 0x55a0b8a34e78 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a0b8a34f40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a0b8a34f08 <col:61> 'int' lvalue ParmVar 0x55a0b8a1dd48 'i' 'int'
|     `-ImplicitCastExpr 0x55a0b8a35020 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8a35000 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55a0b8a1ddc0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55a0b8a1e070 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55a0b8a1dfa0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55a0b8a358c8 <col:33, line:620:5>
|   |-ParenExpr 0x55a0b8a35640 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a0b8a35610 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a35260 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a35230 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a350d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a350b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a35078 <col:23> 'int' lvalue ParmVar 0x55a0b8a1dfa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a35098 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a35210 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a0b8a351f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a350f0 <col:33> 'int' lvalue ParmVar 0x55a0b8a1dfa0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a351d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a351c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a35110 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a0b8a35198 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a0b8a35180 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a0b8a35148 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a0b8a352c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a352a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55a0b8a35570 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a35558 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a35538 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a355b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a353a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a0b8a355c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a353f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a355e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a35428 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55a0b8a355f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a35520 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a35508 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a354c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55a0b8a358b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55a0b8a358a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8a35888 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a0b8a35858 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55a0b8a357d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a0b8a357a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a0b8a35750 <col:67, col:76> 'char const[48]' lvalue ->c 0x55a0b8a24f20
|             |   `-CXXMemberCallExpr 0x55a0b8a35730 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a0b8a35700 <col:67> '<bound member function type>' ->xanno 0x55a0b8a1a068
|             |       `-CXXThisExpr 0x55a0b8a356f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a0b8a357b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8a35780 <col:80> 'int' lvalue ParmVar 0x55a0b8a1dfa0 'i' 'int'
|-CXXMethodDecl 0x55a0b8a1e288 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55a0b8a1e130 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a0b8a1e1b0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55a0b8a360f0 <col:45, line:635:5>
|   |-ParenExpr 0x55a0b8a35e38 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a0b8a35e08 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a0b8a35ad0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a0b8a35aa0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a0b8a35940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a0b8a35928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a0b8a358e8 <col:23> 'int' lvalue ParmVar 0x55a0b8a1e130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a0b8a35908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a0b8a35a80 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a0b8a35a68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a0b8a35960 <col:33> 'int' lvalue ParmVar 0x55a0b8a1e130 'i' 'int'
|   |   |     `-BinaryOperator 0x55a0b8a35a48 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a0b8a35a30 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a0b8a35980 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a0b8a1a450 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a0b8a35a08 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a0b8a359f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a0b8a359b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a0b8a35b30 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a0b8a35b10 <col:79> 'int' 0
|   |   `-CallExpr 0x55a0b8a35d68 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a0b8a35d50 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b8a35d30 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a0b8a35da8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a35ba0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a0b8a35dc0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a0b8a35be8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a0b8a35dd8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a0b8a35c20 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55a0b8a35df0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a0b8a35d18 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a0b8a35d00 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a0b8a35cb8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55a0b8a360d0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55a0b8a36038 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a0b8a36008 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55a0b8a35fa8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a0b8a35f78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a0b8a35f28 <col:54, col:63> 'char [48]' lvalue ->c 0x55a0b8a24f20
|     |     |   `-CXXMemberCallExpr 0x55a0b8a35f08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a0b8a35ed8 <col:54> '<bound member function type>' ->xanno 0x55a0b8a1a208
|     |     |       `-CXXThisExpr 0x55a0b8a35ec8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a0b8a35f90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a0b8a35f58 <col:67> 'int' lvalue ParmVar 0x55a0b8a1e130 'i' 'int'
|     `-CXXConstCastExpr 0x55a0b8a360a0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55a0b8a36088 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55a0b8a36050 <col:91> 'const void *' lvalue ParmVar 0x55a0b8a1e1b0 'x' 'const void *'
|-CXXMethodDecl 0x55a0b8a1e358 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55a0b8a36178 <col:34, line:640:5>
|   `-ReturnStmt 0x55a0b8a36168 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8a36150 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55a0b8a36120 <col:16> 'Packet *' lvalue ->_data_packet 0x55a0b8a25ad8
|         `-CXXThisExpr 0x55a0b8a36110 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a0b8a1e498 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55a0b8a1e408 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a0b8a2f238 <col:46> 'bool' true
|-CXXMethodDecl 0x55a0b8a1e618 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55a0b8a1e550 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55a0b8a1e6c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55a0b8a1ee70 <line:660:22> "" ""
| |-EnumConstantDecl 0x55a0b8a1e7c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1eee0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1e7a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55a0b8a1e780 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a0b8a13920 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a0b8a1e850 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1eef8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1e830 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55a0b8a1e810 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a0b8a139b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a0b8a1e8e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1e8c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8a1e8a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a0b8a1e970 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1e950 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55a0b8a1e930 <col:19> 'int' 16
| |-EnumConstantDecl 0x55a0b8a1ea00 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1e9e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55a0b8a1e9c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55a0b8a1ea90 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ea70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a0b8a1ea50 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a0b8a1eb20 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1eb00 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55a0b8a1eae0 <col:19> 'int' EnumConstant 0x55a0b8a1e970 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a0b8a1ebb0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1ef88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1eb90 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55a0b8a1eb70 <col:19> 'int' EnumConstant 0x55a0b8a1ea90 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a0b8a1ec80 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1efa0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ec60 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55a0b8a1ec40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a0b8a1ec00 <col:23> 'int' EnumConstant 0x55a0b8a1ebb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a0b8a1ec20 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a0b8a1ed50 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a0b8a1efb8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8a1ed30 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55a0b8a1ed10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a0b8a1ecd0 <col:23> 'int' EnumConstant 0x55a0b8a1ebb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a0b8a1ecf0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55a0b8a1ee20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55a0b8a1efd0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a1ee00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55a0b8a1ede0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55a0b8a1eda0 <col:23> 'int' EnumConstant 0x55a0b8a1ebb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55a0b8a1edc0 <col:40> 'int' 8
|-CXXMethodDecl 0x55a0b8a1f010 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55a0b8a1f0b0 <col:68> "" ""
|-CXXMethodDecl 0x55a0b8a1f148 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55a0b8a1f1e8 <col:45> "" ""
|-CXXMethodDecl 0x55a0b8a1f280 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a0b8a1f320 <col:57> "" ""
|-CXXMethodDecl 0x55a0b8a1f3b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55a0b8a1f458 <col:45> "" ""
|-CXXMethodDecl 0x55a0b8a1f4f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a0b8a1f590 <col:57> "" ""
|-CXXMethodDecl 0x55a0b8a1f620 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a0b8a1f6c0 <col:51> "" ""
|-CXXMethodDecl 0x55a0b8a1f750 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a0b8a1f7f0 <col:63> "" ""
|-CXXMethodDecl 0x55a0b8a1f880 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a0b8a1f920 <col:53> "" ""
|-CXXMethodDecl 0x55a0b8a1f9b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a0b8a1fa50 <col:65> "" ""
|-CXXMethodDecl 0x55a0b8a1fb68 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a1fad8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55a0b8a1fc10 <col:61> "" ""
|-CXXMethodDecl 0x55a0b8a1fda8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a0b8a1fc98 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55a0b8a1fd10 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a0b8a1fe58 <col:67> "" ""
|-CXXMethodDecl 0x55a0b8a1ff70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a1fee0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a0b8a20018 <col:63> "" ""
|-CXXMethodDecl 0x55a0b8a201b0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a0b8a200a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a0b8a20118 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a0b8a20260 <col:69> "" ""
|-CXXMethodDecl 0x55a0b8a20378 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a202e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a0b8a20420 <col:63> "" ""
|-CXXMethodDecl 0x55a0b8a22af8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a229e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a0b8a22a60 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b8a22ba8 <col:69> "" ""
|-CXXMethodDecl 0x55a0b8a22cc0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a22c30 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55a0b8a22d68 <col:62> "" ""
|-CXXMethodDecl 0x55a0b8a22f00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a0b8a22df0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a0b8a22e68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55a0b8a22fb0 <col:68> "" ""
|-CXXMethodDecl 0x55a0b8a230c8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a23038 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a0b8a23170 <col:63> "" ""
|-CXXMethodDecl 0x55a0b8a23308 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55a0b8a231f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a0b8a23270 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55a0b8a233b8 <col:69> "" ""
|-CXXMethodDecl 0x55a0b8a23448 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a0b8a234e8 <col:64> "" ""
|-CXXMethodDecl 0x55a0b8a23578 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a0b8a23618 <col:52> "" ""
|-CXXMethodDecl 0x55a0b8a236a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a0b8a23748 <col:67> "" ""
|-CXXMethodDecl 0x55a0b8a237d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a0b8a23878 <col:55> "" ""
|-CXXMethodDecl 0x55a0b8a23990 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a23900 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a0b8a23a38 <col:58> "" ""
|-CXXMethodDecl 0x55a0b8a23bd0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a0b8a23ac0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a0b8a23b38 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a0b8a23c80 <col:62> "" ""
|-CXXMethodDecl 0x55a0b8a23d98 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a23d08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a0b8a23e40 <col:58> "" ""
|-CXXMethodDecl 0x55a0b8a23fd8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55a0b8a23ec8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a0b8a23f40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55a0b8a24088 <col:62> "" ""
|-CXXMethodDecl 0x55a0b8a241a0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a24110 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55a0b8a24248 <col:60> "" ""
|-CXXMethodDecl 0x55a0b8a243e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a0b8a242d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55a0b8a24348 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a0b8a24490 <col:64> "" ""
|-CXXMethodDecl 0x55a0b8a245a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a24518 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a0b8a24650 <col:58> "" ""
|-CXXMethodDecl 0x55a0b8a247e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a0b8a246d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a0b8a24750 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55a0b8a24898 <col:62> "" ""
|-CXXMethodDecl 0x55a0b8a249b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a0b8a24920 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55a0b8a24a58 <col:59> "" ""
|-CXXMethodDecl 0x55a0b8a24bf0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a0b8a24ae0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a0b8a24b58 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b8a24ca0 <col:63> "" ""
|-AccessSpecDecl 0x55a0b8a24d10 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55a0b8a24d38 prev 0x55a0b8a19f40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a0b8a24e30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55a0b8a24f20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55a0b8a25048 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55a0b8a251c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55a0b8a25348 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55a0b8a254c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55a0b8a362f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a0b8a36b68 <col:11>
| |-CXXDestructorDecl 0x55a0b8a363d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55a0b8a36508 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a0b8a36508
| | `-ParmVarDecl 0x55a0b8a36618 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55a0b8a366b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a366b8
| | `-ParmVarDecl 0x55a0b8a367c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55a0b8a39588 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b8a39698 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55a0b8a39918 <col:11>
| |   `-ReturnStmt 0x55a0b8a39908 <col:11>
| |     `-UnaryOperator 0x55a0b8a398f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a0b8a398e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55a0b8a39708 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a39708
|   `-ParmVarDecl 0x55a0b8a39818 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55a0b8a25530 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a0b8a25648 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55a0b8a256e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55a0b8a25750 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55a0b8a257b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55a0b8a25820 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55a0b8a25880 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55a0b8a25940 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55a0b8a259a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55a0b8a25a00 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55a0b8a36208 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55a0b8a256e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55a0b8a36b78 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55a0b8a36bd0 <col:12>
| |-CXXConstructorDecl 0x55a0b8a36838 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a0b8a36838
| | `-ParmVarDecl 0x55a0b8a36948 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55a0b8a369e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a0b8a369e8
| | `-ParmVarDecl 0x55a0b8a36af8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55a0b8a38c70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55a0b8a25a78 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55a0b8a25ad8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55a0b8a25b40 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55a0b8a25ba8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55a0b8a25c10 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55a0b8a25c78 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55a0b8a25cd8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55a0b8a25d38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55a0b8a25da0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55a0b8a25e28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55a0b8a25a78 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55a0b8a361a0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a0b8a25cd8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55a0b8a36be0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55a0b8a36c40 <col:21, line:755:5>
|-CXXConstructorDecl 0x55a0b8a25fc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55a0b8a25f08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55a0b8a260c0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55a0b8a262a8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55a0b8a261b0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55a0b8a26578 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55a0b8a26360 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8a263d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a0b8a26450 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a26798 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55a0b8a26648 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55a0b8a266c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55a0b8a2ed78 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55a0b8a26858 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55a0b8a268d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55a0b8a26948 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55a0b8a2eed0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a0b8a2ee40 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a2f018 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a0b8a2ef88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55a0b8a2f110 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b89cdf98 <../elements/tcpudp/fasttcpflows.hh:75:3, line:80:3> line:75:10 referenced struct flow_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a0b89ce0b8 <col:3, col:10> col:10 implicit struct flow_t
|-FieldDecl 0x55a0b89ce158 <line:76:5, col:13> col:13 syn_packet 'Packet *'
|-FieldDecl 0x55a0b89ce1b8 <line:77:5, col:13> col:13 fin_packet 'Packet *'
|-FieldDecl 0x55a0b89ce218 <line:78:5, col:13> col:13 data_packet 'Packet *'
`-FieldDecl 0x55a0b89ce280 <line:79:5, col:14> col:14 flow_count 'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%"struct.FastTCPFlows::flow_t" = type { %class.Packet*, %class.Packet*, %class.Packet*, i32 }
  NonVirtualBaseLLVMType:%"struct.FastTCPFlows::flow_t" = type { %class.Packet*, %class.Packet*, %class.Packet*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a65118 <../dummy_inc/click/gaprate.hh:45:1, line:124:1> line:45:7 referenced class GapRate definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a0b8a65238 <col:1, col:7> col:7 implicit referenced class GapRate
|-AccessSpecDecl 0x55a0b8a652c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55a0b8a65350 <line:48:5, col:20> col:12 used GapRate 'void ()' inline
|-CXXConstructorDecl 0x55a0b8a654a0 <line:52:5, col:30> col:12 GapRate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55a0b8a65410 <col:20, col:29> col:29 r 'unsigned int'
|-CXXMethodDecl 0x55a0b8a655a0 <line:55:5, col:28> col:21 rate 'unsigned int () const' inline
|-CXXMethodDecl 0x55a0b8a656e8 <line:62:5, col:36> col:17 set_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55a0b8a65658 <col:26, col:35> col:35 r 'unsigned int'
|-CXXMethodDecl 0x55a0b8a658f8 <line:70:5, col:49> col:10 set_rate 'void (unsigned int, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8a657a8 <col:19, col:28> col:28 r 'unsigned int'
| `-ParmVarDecl 0x55a0b8a65820 <col:31, col:45> col:45 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8a65a78 <line:78:5, col:48> col:17 need_update 'bool (const Timestamp &)' inline
| `-ParmVarDecl 0x55a0b8a659b8 <col:29, col:46> col:46 ts 'const Timestamp &'
|-CXXMethodDecl 0x55a0b8a65b40 <line:88:5, col:31> col:22 expiry 'Timestamp () const' inline
|-CXXMethodDecl 0x55a0b8a65c00 <line:93:5, col:24> col:17 update 'void ()' inline
|-CXXMethodDecl 0x55a0b8a65d48 <line:100:5, col:38> col:17 update_with 'void (int)' inline
| `-ParmVarDecl 0x55a0b8a65cb8 <col:29, col:33> col:33 delta 'int'
|-CXXMethodDecl 0x55a0b8a65e10 <line:106:5, col:23> col:17 used reset 'void ()' inline
|-EnumDecl 0x55a0b8a65eb0 <line:109:5, col:28> col:5
| `-EnumConstantDecl 0x55a0b8a65fb0 <col:12, col:25> col:12 referenced UGAP_SHIFT 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|   `-ImplicitCastExpr 0x55a0b8a66000 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8a65f90 <col:25> 'int' Int: 12
|       `-IntegerLiteral 0x55a0b8a65f70 <col:25> 'int' 12
|-EnumDecl 0x55a0b8a66018 <line:110:5, col:46> col:5
| `-EnumConstantDecl 0x55a0b8a66178 <col:12, col:35> col:12 referenced MAX_RATE 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:110:5)'
|   `-ConstantExpr 0x55a0b8a66158 <col:23, col:35> 'unsigned int' Int: 4096000000
|     `-BinaryOperator 0x55a0b8a66138 <col:23, col:35> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55a0b8a660e0 <col:23> 'unsigned int' 1000000
|       `-ImplicitCastExpr 0x55a0b8a66120 <col:35> 'int' <IntegralCast>
|         `-DeclRefExpr 0x55a0b8a66100 <col:35> 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)' EnumConstant 0x55a0b8a65fb0 'UGAP_SHIFT' 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|-AccessSpecDecl 0x55a0b8a661c8 <line:112:3, col:10> col:3 private
|-FieldDecl 0x55a0b8a66208 <line:114:5, col:14> col:14 referenced _ugap 'unsigned int'
|-FieldDecl 0x55a0b8a66270 <line:115:5, col:9> col:9 referenced _sec_count 'int'
|-FieldDecl 0x55a0b8a66320 <line:116:5, col:29> col:29 referenced _tv_sec 'Timestamp::seconds_type':'int'
|-FieldDecl 0x55a0b8a66388 <line:117:5, col:14> col:14 referenced _rate 'unsigned int'
|-CXXMethodDecl 0x55a0b8a66480 <line:122:5, col:46> col:17 used initialize_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x55a0b8a663f0 <col:33, col:42> col:42 rate 'unsigned int'
|-CXXConstructorDecl 0x55a0b8a675e8 <line:45:7> col:7 implicit constexpr GapRate 'void (const GapRate &)' inline default trivial noexcept-unevaluated 0x55a0b8a675e8
| `-ParmVarDecl 0x55a0b8a676f8 <col:7> col:7 'const GapRate &'
`-CXXConstructorDecl 0x55a0b8a67798 <col:7> col:7 implicit constexpr GapRate 'void (GapRate &&)' inline default trivial noexcept-unevaluated 0x55a0b8a67798
  `-ParmVarDecl 0x55a0b8a678a8 <col:7> col:7 'GapRate &&'

Layout: <CGRecordLayout
  LLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b89cd8e8 <../elements/tcpudp/fasttcpflows.hh:60:1, line:111:1> line:60:7 class FastTCPFlows definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55a0b89cda48 <col:1, col:7> col:7 implicit referenced class FastTCPFlows
|-FieldDecl 0x55a0b89cdae8 <line:62:3, col:8> col:8 referenced _rate_limited 'bool'
|-FieldDecl 0x55a0b89cdb48 <line:63:3, col:8> col:8 _sent_all_fins 'bool'
|-FieldDecl 0x55a0b89cdbb0 <line:64:3, col:12> col:12 _len 'unsigned int'
|-FieldDecl 0x55a0b89cdc10 <line:65:3, col:15> col:15 _ethh 'click_ether'
|-FieldDecl 0x55a0b89cdc80 <line:66:3, col:18> col:18 _sipaddr 'struct in_addr':'in_addr'
|-FieldDecl 0x55a0b89cdcf0 <line:67:3, col:18> col:18 _dipaddr 'struct in_addr':'in_addr'
|-FieldDecl 0x55a0b89cdd58 <line:68:3, col:16> col:16 _nflows 'unsigned int'
|-FieldDecl 0x55a0b89cddc0 <line:69:3, col:16> col:16 _last_flow 'unsigned int'
|-FieldDecl 0x55a0b89cde28 <line:70:3, col:16> col:16 _flowsize 'unsigned int'
|-FieldDecl 0x55a0b89cde88 <line:71:3, col:8> col:8 _cksum 'bool'
|-FieldDecl 0x55a0b89cdee8 <line:72:3, col:19> col:19 referenced _first 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x55a0b89cdf48 <line:73:3, col:19> col:19 referenced _last 'click_jiffies_t':'unsigned int'
|-CXXRecordDecl 0x55a0b89cdf98 <line:75:3, line:80:3> line:75:10 referenced struct flow_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55a0b89ce0b8 <col:3, col:10> col:10 implicit struct flow_t
| |-FieldDecl 0x55a0b89ce158 <line:76:5, col:13> col:13 syn_packet 'Packet *'
| |-FieldDecl 0x55a0b89ce1b8 <line:77:5, col:13> col:13 fin_packet 'Packet *'
| |-FieldDecl 0x55a0b89ce218 <line:78:5, col:13> col:13 data_packet 'Packet *'
| `-FieldDecl 0x55a0b89ce280 <line:79:5, col:14> col:14 flow_count 'unsigned int'
|-FieldDecl 0x55a0b89ce328 <line:81:3, col:11> col:11 _flows 'FastTCPFlows::flow_t *'
|-CXXMethodDecl 0x55a0b89ce450 <line:82:3, col:24> col:8 change_ports 'void (int)'
| `-ParmVarDecl 0x55a0b89ce390 <col:21> col:24 'int'
|-CXXMethodDecl 0x55a0b89ce518 <line:83:3, col:22> col:11 get_packet 'Packet *()'
|-AccessSpecDecl 0x55a0b89ce5b8 <line:85:2, col:8> col:2 public
|-VarDecl 0x55a0b89ce5f8 <line:87:3, col:36> col:25 NO_LIMIT 'const unsigned int' static cinit
| `-IntegerLiteral 0x55a0b89ce660 <col:36> 'unsigned int' 4294967295
|-FieldDecl 0x55a0b89ce6e8 <line:89:3, col:11> col:11 _rate 'GapRate'
|-FieldDecl 0x55a0b89ce750 <line:90:3, col:12> col:12 referenced _count 'unsigned int'
|-FieldDecl 0x55a0b89ce7b8 <line:91:3, col:12> col:12 _limit 'unsigned int'
|-FieldDecl 0x55a0b89ce818 <line:92:3, col:8> col:8 _active 'bool'
|-CXXConstructorDecl 0x55a0b89ce8a0 <line:94:3, col:16> col:3 FastTCPFlows 'void ()'
|-CXXDestructorDecl 0x55a0b89ce990 <line:95:3, col:17> col:3 ~FastTCPFlows 'void ()' noexcept-unevaluated 0x55a0b89ce990
| `-Overrides: [ 0x55a0b8a4c978 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55a0b89ceac0 <line:97:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55a0b8a4ddd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55a0b89cfb28 <col:34, col:59>
|   `-ReturnStmt 0x55a0b89cfb18 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a0b89cfb00 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55a0b89cfad8 <col:43> 'const char [13]' lvalue "FastTCPFlows"
|-CXXMethodDecl 0x55a0b89ceb88 <line:98:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55a0b8a4dea0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55a0b89cfb88 <col:34, col:54>
|   `-ReturnStmt 0x55a0b89cfb78 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a0b89cfb60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a0b89cfb40 <col:43> 'const char []' lvalue Var 0x55a0b8a4e040 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x55a0b89cec50 <line:99:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55a0b8a4e268 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55a0b89cfbe8 <col:34, col:49>
|   `-ReturnStmt 0x55a0b89cfbd8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a0b89cfbc0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a0b89cfba0 <col:43> 'const char []' lvalue Var 0x55a0b8a4e438 'PULL' 'const char []'
|-CXXMethodDecl 0x55a0b89cef20 <line:101:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55a0b8a4f670 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55a0b89cedd0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55a0b89cee48 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b89cf078 <line:102:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55a0b8a4f8c0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55a0b89cefe0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b89cf1c0 <line:103:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55a0b8a500d8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55a0b89cf130 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55a0b89cf310 <line:104:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55a0b8a4cdd8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55a0b89cf280 <col:16> col:19 'int'
|-CXXMethodDecl 0x55a0b89cf3d8 <line:106:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55a0b8a4f740 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55a0b89cf498 <line:107:3, col:14> col:8 reset 'void ()'
|-CXXMethodDecl 0x55a0b89cf560 <line:108:3, col:37> col:12 count 'unsigned int ()'
| `-CompoundStmt 0x55a0b89cfc68 <col:20, col:37>
|   `-ReturnStmt 0x55a0b89cfc58 <col:22, col:29>
|     `-ImplicitCastExpr 0x55a0b89cfc40 <col:29> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55a0b89cfc10 <col:29> 'unsigned int' lvalue ->_count 0x55a0b89ce750
|         `-CXXThisExpr 0x55a0b89cfc00 <col:29> 'FastTCPFlows *' implicit this
|-CXXMethodDecl 0x55a0b89cf620 <line:109:3, col:44> col:19 first 'click_jiffies_t ()'
| `-CompoundStmt 0x55a0b89cfce8 <col:27, col:44>
|   `-ReturnStmt 0x55a0b89cfcd8 <col:29, col:36>
|     `-ImplicitCastExpr 0x55a0b89cfcc0 <col:36> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55a0b89cfc90 <col:36> 'click_jiffies_t':'unsigned int' lvalue ->_first 0x55a0b89cdee8
|         `-CXXThisExpr 0x55a0b89cfc80 <col:36> 'FastTCPFlows *' implicit this
|-CXXMethodDecl 0x55a0b89cf6e0 <line:110:3, col:42> col:19 last 'click_jiffies_t ()'
| `-CompoundStmt 0x55a0b89cfd68 <col:26, col:42>
|   `-ReturnStmt 0x55a0b89cfd58 <col:28, col:35>
|     `-ImplicitCastExpr 0x55a0b89cfd40 <col:35> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55a0b89cfd10 <col:35> 'click_jiffies_t':'unsigned int' lvalue ->_last 0x55a0b89cdf48
|         `-CXXThisExpr 0x55a0b89cfd00 <col:35> 'FastTCPFlows *' implicit this
|-CXXConstructorDecl 0x55a0b89cf7a8 <line:60:7> col:7 implicit FastTCPFlows 'void (const FastTCPFlows &)' inline default_delete noexcept-unevaluated 0x55a0b89cf7a8
| `-ParmVarDecl 0x55a0b89cf8b8 <col:7> col:7 'const FastTCPFlows &'
`-CXXMethodDecl 0x55a0b89cf958 <col:7> col:7 implicit operator= 'FastTCPFlows &(const FastTCPFlows &)' inline default_delete noexcept-unevaluated 0x55a0b89cf958
  `-ParmVarDecl 0x55a0b89cfa68 <col:7> col:7 'const FastTCPFlows &'

Layout: <CGRecordLayout
  LLVMType:%class.FastTCPFlows = type <{ %class.Element.base, i8, i8, [2 x i8], i32, %struct.click_ether, [2 x i8], %struct.in_addr, %struct.in_addr, i32, i32, i32, i8, [3 x i8], i32, i32, [4 x i8], %"struct.FastTCPFlows::flow_t"*, %class.GapRate, i32, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.FastTCPFlows.base = type <{ %class.Element.base, i8, i8, [2 x i8], i32, %struct.click_ether, [2 x i8], %struct.in_addr, %struct.in_addr, i32, i32, i32, i8, [3 x i8], i32, i32, [4 x i8], %"struct.FastTCPFlows::flow_t"*, %class.GapRate, i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b88250b0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a0b88251c8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55a0b8825268 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55a0b88252c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55a0b8825328 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55a0b88253d8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b88256e0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b88257f8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55a0b88258a0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55a0b8825908 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55a0b8825998 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55a0b8827f30 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b882a578 <col:12>
|-CXXConstructorDecl 0x55a0b8828038 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8828148 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a0b88258a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55a0b882cb00 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55a0b882cad0 <col:12> 'const char *const' lvalue .data 0x55a0b88258a0
| |     `-DeclRefExpr 0x55a0b882cab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a0b8825908 'length' 'int'
| | `-ImplicitCastExpr 0x55a0b882cb90 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b882cb60 <col:12> 'const int' lvalue .length 0x55a0b8825908
| |     `-DeclRefExpr 0x55a0b882cb40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a0b8825998 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55a0b882cc20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55a0b882cbf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a0b8825998
| |     `-DeclRefExpr 0x55a0b882cbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| `-CompoundStmt 0x55a0b882cc78 <col:12>
|-CXXConstructorDecl 0x55a0b882a3f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b882a3f8
| `-ParmVarDecl 0x55a0b882a508 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55a0b88319c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a0b883b3c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b883b4d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55a0b883b9f0 <col:12>
|   |-BinaryOperator 0x55a0b883b808 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a0b883b7c0 <col:12> 'const char *' lvalue ->data 0x55a0b88258a0
|   | | `-CXXThisExpr 0x55a0b883b7b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a0b883b7f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b883b780 <col:12> 'const char *const' lvalue .data 0x55a0b88258a0
|   |     `-DeclRefExpr 0x55a0b883b760 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a0b883b8d0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55a0b883b888 <col:12> 'int' lvalue ->length 0x55a0b8825908
|   | | `-CXXThisExpr 0x55a0b883b878 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a0b883b8b8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b883b848 <col:12> 'const int' lvalue .length 0x55a0b8825908
|   |     `-DeclRefExpr 0x55a0b883b828 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a0b883b998 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55a0b883b950 <col:12> 'String::memo_t *' lvalue ->memo 0x55a0b8825998
|   | | `-CXXThisExpr 0x55a0b883b940 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a0b883b980 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b883b910 <col:12> 'String::memo_t *const' lvalue .memo 0x55a0b8825998
|   |     `-DeclRefExpr 0x55a0b883b8f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55a0b883b9e0 <col:12>
|     `-UnaryOperator 0x55a0b883b9c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b883b9b8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55a0b883b548 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b883b548
  `-ParmVarDecl 0x55a0b883b658 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b881b520 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a0b881b638 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55a0b881b6c8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55a0b881b708 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55a0b84eadc0 'const char *'
|   `-QualType 0x55a0b84ea311 'const char' const
|     `-BuiltinType 0x55a0b84ea310 'char'
|-TypedefDecl 0x55a0b881b790 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55a0b881b760 'String::const_iterator' sugar
|   |-Typedef 0x55a0b881b708 'const_iterator'
|   `-PointerType 0x55a0b84eadc0 'const char *'
|     `-QualType 0x55a0b84ea311 'const char' const
|       `-BuiltinType 0x55a0b84ea310 'char'
|-TypedefDecl 0x55a0b881b900 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55a0b881b870 'int (String::*)() const'
|   |-RecordType 0x55a0b881b5b0 'String'
|   | `-CXXRecord 0x55a0b881b520 'String'
|   `-ParenType 0x55a0b881b810 'int () const' sugar
|     `-FunctionProtoType 0x55a0b87f1350 'int () const' const cdecl
|       `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b881b968 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55a0b86405e0 'int64_t' sugar
|   |-Typedef 0x55a0b85532d0 'int64_t'
|   `-TypedefType 0x55a0b852c4d0 '__int64_t' sugar
|     |-Typedef 0x55a0b852c0a8 '__int64_t'
|     `-BuiltinType 0x55a0b84ea390 'long'
|-TypedefDecl 0x55a0b881b9d0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55a0b8640500 'uint64_t' sugar
|   |-Typedef 0x55a0b8553470 'uint64_t'
|   `-TypedefType 0x55a0b852c560 '__uint64_t' sugar
|     |-Typedef 0x55a0b852c118 '__uint64_t'
|     `-BuiltinType 0x55a0b84ea430 'unsigned long'
|-TypedefDecl 0x55a0b881ba60 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55a0b881ba30 'String::intmax_t' sugar
|   |-Typedef 0x55a0b881b968 'intmax_t'
|   `-TypedefType 0x55a0b86405e0 'int64_t' sugar
|     |-Typedef 0x55a0b85532d0 'int64_t'
|     `-TypedefType 0x55a0b852c4d0 '__int64_t' sugar
|       |-Typedef 0x55a0b852c0a8 '__int64_t'
|       `-BuiltinType 0x55a0b84ea390 'long'
|-TypedefDecl 0x55a0b881baf0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55a0b881bac0 'String::uintmax_t' sugar
|   |-Typedef 0x55a0b881b9d0 'uintmax_t'
|   `-TypedefType 0x55a0b8640500 'uint64_t' sugar
|     |-Typedef 0x55a0b8553470 'uint64_t'
|     `-TypedefType 0x55a0b852c560 '__uint64_t' sugar
|       |-Typedef 0x55a0b852c118 '__uint64_t'
|       `-BuiltinType 0x55a0b84ea430 'unsigned long'
|-CXXConstructorDecl 0x55a0b881bbb0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55a0b881bd58 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55a0b881bc98 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55a0b881bf08 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55a0b881be48 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55a0b881c060 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55a0b881bfd0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55a0b881c278 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a0b881c128 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55a0b881c1a8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55a0b881c498 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55a0b881c348 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55a0b881c3c8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55a0b881c6b8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a0b881c568 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55a0b881c5e8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55a0b881c8d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55a0b881c788 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55a0b881c808 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55a0b881ca68 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55a0b881c9a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55a0b881cbe8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55a0b881cb28 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55a0b881cd78 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55a0b881ccb0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55a0b881ced0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55a0b881ce40 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55a0b881d028 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55a0b881cf98 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55a0b881d180 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55a0b881d0f0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55a0b881d308 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55a0b881d248 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55a0b881d498 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55a0b881d3d0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55a0b881d628 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55a0b881d560 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55a0b881d7b8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55a0b881d6f0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55a0b881d8b0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55a0b881d9d8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55a0b881db58 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55a0b881da90 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55a0b881dca8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55a0b881dc18 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55a0b881dd50 <col:63> "" ""
|-CXXMethodDecl 0x55a0b881de98 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55a0b881ddd8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55a0b881e0a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55a0b881df58 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55a0b881dfd8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55a0b881e2c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55a0b881e170 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55a0b881e1f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55a0b881e5a8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55a0b881e388 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55a0b881e408 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55a0b8827a00 <col:55> 'int' 10
| `-ParmVarDecl 0x55a0b881e480 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a0b8827a20 <col:76> 'bool' true
|-CXXMethodDecl 0x55a0b881e888 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55a0b881e670 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55a0b881e6f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55a0b8827a30 <col:56> 'int' 10
| `-ParmVarDecl 0x55a0b881e768 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a0b8827a50 <col:77> 'bool' true
|-CXXMethodDecl 0x55a0b881e990 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55a0b881ea58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55a0b881eb20 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55a0b881ebc0 <col:20>
| `-OptimizeNoneAttr 0x55a0b881ec18 <col:30>
|-CXXConversionDecl 0x55a0b881ed08 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a0b881edd8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55a0b881ee98 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55a0b881ef88 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a0b881f048 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a0b8820228 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55a0b8820160 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55a0b8820378 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55a0b88202e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55a0b8820468 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55a0b8820528 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55a0b8820778 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55a0b88205e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55a0b8820660 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55a0b88209d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55a0b8820840 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55a0b88208c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55a0b8820aa8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8820cb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55a0b8820b60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55a0b8820be0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55a0b8820ed8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55a0b8820d80 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55a0b8820e00 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55a0b8821068 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55a0b8820fa0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55a0b8821158 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55a0b88212c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a0b8821208 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a0b88214d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55a0b8821388 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a0b8821408 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a0b88216f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55a0b8821598 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55a0b8821610 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55a0b8821880 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55a0b88217b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a0b8821aa0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55a0b8821940 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55a0b88219c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a0b8821bf0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a0b8821b60 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55a0b8821dc8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a0b8821cb0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a0b8821d30 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55a0b8821f18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55a0b8821e88 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55a0b8822130 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55a0b8821fd0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55a0b8822050 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55a0b8827a60 <col:39> 'int' 0
|-CXXMethodDecl 0x55a0b8822350 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55a0b88221f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55a0b8822270 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55a0b8827a80 <col:48> 'int' 0
|-CXXMethodDecl 0x55a0b8822530 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55a0b8822410 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55a0b8822490 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55a0b8827aa0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55a0b8822600 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55a0b88226c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55a0b8822780 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55a0b8822840 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55a0b8822900 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55a0b8822aa8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a0b88229b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55a0b8822c28 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55a0b8822b60 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55a0b8822da8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a0b8822ce8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55a0b8822f28 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55a0b8822e60 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55a0b8823070 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55a0b8822fe0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a0b88231c0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55a0b8823130 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55a0b8823398 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a0b8823280 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a0b8823300 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a0b8823578 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a0b8823460 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55a0b88234e0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55a0b88236c8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55a0b8823638 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55a0b88238d8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55a0b8823788 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55a0b8823808 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55a0b8823a38 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55a0b88239a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a0b8823b90 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55a0b8823af8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55a0b8823c38 <col:57> "" ""
|-CXXMethodDecl 0x55a0b8823d48 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a0b8823cb8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55a0b8823e98 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a0b8823e08 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55a0b8824018 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55a0b8823f50 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55a0b88241e0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55a0b88242a0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55a0b8824360 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55a0b8824400 <col:49> "" ""
|-CXXMethodDecl 0x55a0b8824490 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55a0b8824550 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55a0b8824640 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55a0b8824708 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55a0b88247c8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55a0b8824888 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55a0b8824980 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55a0b8824a48 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55a0b8824b10 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55a0b8824ce8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55a0b8824bc8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55a0b8824c48 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55a0b8824f10 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55a0b8824db0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55a0b8824e30 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55a0b8825020 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55a0b8825088 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55a0b88250b0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55a0b88251c8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55a0b8825268 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55a0b88252c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55a0b8825328 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55a0b88253d8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55a0b8825440 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55a0b8825678 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55a0b88256c8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8825658 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55a0b8825568 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55a0b8825510 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55a0b8825550 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55a0b8825530 <col:32> 'int' 8
|-CXXRecordDecl 0x55a0b88256e0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a0b88257f8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55a0b88258a0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55a0b8825908 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55a0b8825998 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55a0b8827f30 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a0b882a578 <col:12>
| |-CXXConstructorDecl 0x55a0b8828038 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b8828148 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a0b88258a0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55a0b882cb00 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55a0b882cad0 <col:12> 'const char *const' lvalue .data 0x55a0b88258a0
| | |     `-DeclRefExpr 0x55a0b882cab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a0b8825908 'length' 'int'
| | | `-ImplicitCastExpr 0x55a0b882cb90 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a0b882cb60 <col:12> 'const int' lvalue .length 0x55a0b8825908
| | |     `-DeclRefExpr 0x55a0b882cb40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a0b8825998 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55a0b882cc20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55a0b882cbf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a0b8825998
| | |     `-DeclRefExpr 0x55a0b882cbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b8828148 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55a0b882cc78 <col:12>
| |-CXXConstructorDecl 0x55a0b882a3f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b882a3f8
| | `-ParmVarDecl 0x55a0b882a508 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55a0b88319c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a0b883b3c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b883b4d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55a0b883b9f0 <col:12>
| |   |-BinaryOperator 0x55a0b883b808 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55a0b883b7c0 <col:12> 'const char *' lvalue ->data 0x55a0b88258a0
| |   | | `-CXXThisExpr 0x55a0b883b7b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a0b883b7f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a0b883b780 <col:12> 'const char *const' lvalue .data 0x55a0b88258a0
| |   |     `-DeclRefExpr 0x55a0b883b760 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a0b883b8d0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55a0b883b888 <col:12> 'int' lvalue ->length 0x55a0b8825908
| |   | | `-CXXThisExpr 0x55a0b883b878 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a0b883b8b8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55a0b883b848 <col:12> 'const int' lvalue .length 0x55a0b8825908
| |   |     `-DeclRefExpr 0x55a0b883b828 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a0b883b998 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55a0b883b950 <col:12> 'String::memo_t *' lvalue ->memo 0x55a0b8825998
| |   | | `-CXXThisExpr 0x55a0b883b940 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a0b883b980 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a0b883b910 <col:12> 'String::memo_t *const' lvalue .memo 0x55a0b8825998
| |   |     `-DeclRefExpr 0x55a0b883b8f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a0b883b4d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55a0b883b9e0 <col:12>
| |     `-UnaryOperator 0x55a0b883b9c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a0b883b9b8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55a0b883b548 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b883b548
|   `-ParmVarDecl 0x55a0b883b658 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55a0b8825a10 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55a0b8825c58 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55a0b8825a78 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55a0b8825af8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55a0b8825b70 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55a0b8827ef0 <col:79, line:261:5>
|   |-BinaryOperator 0x55a0b8827b68 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a0b8827b00 <col:2, col:5> 'const char *' lvalue .data 0x55a0b88258a0
|   | | `-MemberExpr 0x55a0b8827ad0 <col:2> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|   | |   `-CXXThisExpr 0x55a0b8827ac0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a0b8827b50 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a0b8827b30 <col:12> 'const char *' lvalue ParmVar 0x55a0b8825a78 'data' 'const char *'
|   |-BinaryOperator 0x55a0b8827c30 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55a0b8827bc8 <col:2, col:5> 'int' lvalue .length 0x55a0b8825908
|   | | `-MemberExpr 0x55a0b8827b98 <col:2> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|   | |   `-CXXThisExpr 0x55a0b8827b88 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a0b8827c18 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a0b8827bf8 <col:14> 'int' lvalue ParmVar 0x55a0b8825af8 'length' 'int'
|   `-IfStmt 0x55a0b8827ed8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55a0b8827d50 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a0b8827d38 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55a0b8827d18 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55a0b8827cf8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55a0b8827c90 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|     |       | `-MemberExpr 0x55a0b8827c60 <col:7> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|     |       |   `-CXXThisExpr 0x55a0b8827c50 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55a0b8827ce0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a0b8827cc0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55a0b8825b70 'memo' 'String::memo_t *'
|     `-CallExpr 0x55a0b8827eb0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55a0b8827e98 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b8827da0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55a0b8814198 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55a0b8827e08 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a0b8825268
|         `-ImplicitCastExpr 0x55a0b8827df0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55a0b8827dd0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55a0b8825b70 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55a0b8825f08 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55a0b8825d28 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55a0b8825da8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55a0b8825e20 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55a0b8825a10 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55a0b882a588 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b882a718 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55a0b882a680 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55a0b882a5f0 <col:2> '<bound member function type>' ->assign_memo 0x55a0b8825c58
|     | `-ImplicitCastExpr 0x55a0b882a6b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55a0b882a5e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55a0b882a6d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b882a620 <col:14> 'const char *' lvalue ParmVar 0x55a0b8825d28 'data' 'const char *'
|     |-ImplicitCastExpr 0x55a0b882a6e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b882a640 <col:20> 'int' lvalue ParmVar 0x55a0b8825da8 'length' 'int'
|     `-ImplicitCastExpr 0x55a0b882a700 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b882a660 <col:28> 'String::memo_t *' lvalue ParmVar 0x55a0b8825e20 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55a0b8826098 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55a0b8825fd8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55a0b882a970 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55a0b882a8f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55a0b882a740 <col:2> '<bound member function type>' ->assign_memo 0x55a0b8825c58
|     | `-CXXThisExpr 0x55a0b882a730 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55a0b882a928 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55a0b882a7c0 <col:14, col:19> 'const char *' lvalue .data 0x55a0b88258a0
|     |   `-MemberExpr 0x55a0b882a790 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55a0b8825a10
|     |     `-DeclRefExpr 0x55a0b882a770 <col:14> 'const String' lvalue ParmVar 0x55a0b8825fd8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55a0b882a940 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55a0b882a840 <col:25, col:30> 'int' lvalue .length 0x55a0b8825908
|     |   `-MemberExpr 0x55a0b882a810 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55a0b8825a10
|     |     `-DeclRefExpr 0x55a0b882a7f0 <col:25> 'const String' lvalue ParmVar 0x55a0b8825fd8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55a0b882a958 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55a0b882a8c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|         `-MemberExpr 0x55a0b882a890 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55a0b8825a10
|           `-DeclRefExpr 0x55a0b882a870 <col:38> 'const String' lvalue ParmVar 0x55a0b8825fd8 'x' 'const String &'
|-CXXMethodDecl 0x55a0b8826160 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55a0b882b330 <col:31, line:278:5>
|   `-IfStmt 0x55a0b882b318 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55a0b882aa10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a0b882a9f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55a0b882a9c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|     |     `-MemberExpr 0x55a0b882a998 <col:6> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|     |       `-CXXThisExpr 0x55a0b882a988 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55a0b882b2f0 <col:15, line:277:2>
|       |-ParenExpr 0x55a0b882aec0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55a0b882ae90 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55a0b882ab20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55a0b882ab08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55a0b882aaf0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55a0b882aab0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a0b8825268
|       |   |       `-ImplicitCastExpr 0x55a0b882aa98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55a0b882aa68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|       |   |           `-MemberExpr 0x55a0b882aa38 <col:27> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|       |   |             `-CXXThisExpr 0x55a0b882aa28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55a0b882ab80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55a0b882ab60 <col:54> 'int' 0
|       |   `-CallExpr 0x55a0b882adf0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55a0b882add8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a0b882ad58 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a0b8586e40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55a0b882ae30 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a0b882ac68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55a0b882ae48 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a0b882ac98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55a0b882ae60 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55a0b882acd0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55a0b882ae78 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55a0b882ad40 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55a0b882ad28 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55a0b882acf0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55a0b882b210 <line:274:6, line:275:22>
|       | |-CallExpr 0x55a0b882b0d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55a0b882b0b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55a0b882b030 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55a0b8817600 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55a0b882b000 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a0b8825268
|       | |   `-ImplicitCastExpr 0x55a0b882afe8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55a0b882afb8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|       | |       `-MemberExpr 0x55a0b882af88 <col:40> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|       | |         `-CXXThisExpr 0x55a0b882af78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55a0b882b1d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55a0b882b1b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55a0b882b0f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55a0b8826e38 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55a0b882b1f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55a0b882b158 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|       |       `-MemberExpr 0x55a0b882b128 <col:15> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|       |         `-CXXThisExpr 0x55a0b882b118 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55a0b882b2d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55a0b882b268 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a0b8825998
|         | `-MemberExpr 0x55a0b882b238 <col:6> 'String::rep_t' lvalue ->_r 0x55a0b8825a10
|         |   `-CXXThisExpr 0x55a0b882b228 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55a0b882b2b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55a0b882b298 <col:16> 'int' 0
|-CXXMethodDecl 0x55a0b88263f8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55a0b8826218 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a0b8826298 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a0b8826310 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55a0b88264d0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55a0b8826720 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55a0b8826588 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a0b8826608 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a0b8826680 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a0b8826908 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55a0b88267f0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55a0b8826870 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55a0b8826a08 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55a0b882b408 <col:41, line:286:5>
|   `-ReturnStmt 0x55a0b882b3f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a0b882b3c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55a0b882b390 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55a0b882b378 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55a0b882b358 <col:46> 'int' 1
|-CXXMethodDecl 0x55a0b8826ca8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55a0b8826ac0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55a0b8826b40 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55a0b8826bc0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55a0b8826e38 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55a0b8826d70 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a0b8826f08 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55a0b88270d8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a0b8826fc0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a0b8827040 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55a0b8827198 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55a0b8827260 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55a0b8827368 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55a0b88273e0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55a0b8827458 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55a0b88274c0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55a0b88275c0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55a0b8827610 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b88275a0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55a0b8827580 <col:22> 'int' 14
|-CXXMethodDecl 0x55a0b8827828 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55a0b8827640 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55a0b88276c0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55a0b8827740 <col:43> col:46 'int'
|-FriendDecl 0x55a0b8827930 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55a0b88279c0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b88e9650 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55a0b88e9828 prev 0x55a0b88e9650 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a0b88e98b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a0b88e98e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8aaaba0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55a0b8aaab50 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55a0b8aaab30 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55a0b88e9af8 'type'
|     `-SubstTemplateTypeParmType 0x55a0b88e9ac0 'String' sugar
|       |-TemplateTypeParmType 0x55a0b87e0930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87e08e0 'T'
|       `-RecordType 0x55a0b881b5b0 'String'
|         `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aaac58 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55a0b8aaac20 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55a0b8aaac00 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a0b8aaaba0 'type'
|     `-ElaboratedType 0x55a0b8aaab50 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55a0b8aaab30 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55a0b88e9af8 'type'
|         `-SubstTemplateTypeParmType 0x55a0b88e9ac0 'String' sugar
|           |-TemplateTypeParmType 0x55a0b87e0930 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a0b87e08e0 'T'
|           `-RecordType 0x55a0b881b5b0 'String'
|             `-CXXRecord 0x55a0b881b520 'String'
|-CXXMethodDecl 0x55a0b8aaadd8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55a0b8aaace8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55a0b8aaaec8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a0b8aaafa8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55a0b8aaafa8
|-CXXMethodDecl 0x55a0b8aab278 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a0b8aab180 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55a0b8aab4b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a0b8aab330 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8aab3a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aab688 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a0b8aab578 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8aab5f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aab7e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a0b8aab8b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a0b8aabb08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a0b8aab978 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a0b8aab9f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aabd68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55a0b8aabbd8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a0b8aabc50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aabf28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a0b8aabe38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aac0e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a0b8aabff0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aac1a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a0b8aac250 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a0b8aac488 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a0b8aac300 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8aac378 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a0b8aac728 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a0b8aac630 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55a0b8aac7f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55a0b8aac840 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a0b8aac890 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8a4f2e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a0b88e80b8 prev 0x55a0b8a4f2e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a0b88e95c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55a0b88e9570 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55a0b88e9550 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a0b88e9400 'type'
|     `-SubstTemplateTypeParmType 0x55a0b88e9290 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55a0b87b4dc0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55a0b87b4d68 'F'
|       `-RecordType 0x55a0b88e8ef0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55a0b88e8e10 'typed_array_memory'
|-FieldDecl 0x55a0b8aac8e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55a0b8aac930 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a0b8aac968 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|   |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|   `-RecordType 0x55a0b881b5b0 'String'
|     `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aac9f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55a0b8aac9c0 'String &'
|   `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-RecordType 0x55a0b881b5b0 'String'
|       `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aaca88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55a0b8aaca50 'const String &'
|   `-QualType 0x55a0b88e8151 'const String' const
|     `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-RecordType 0x55a0b881b5b0 'String'
|         `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aacb18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55a0b8aacae0 'String *'
|   `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-RecordType 0x55a0b881b5b0 'String'
|       `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aacba8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55a0b8aacb70 'const String *'
|   `-QualType 0x55a0b88e8151 'const String' const
|     `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-RecordType 0x55a0b881b5b0 'String'
|         `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aad800 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55a0b8aad7b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55a0b8aad790 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55a0b8aad6c8 'type'
|     `-LValueReferenceType 0x55a0b8aad690 'const String &'
|       `-QualType 0x55a0b8aad431 'const String' const
|         `-SubstTemplateTypeParmType 0x55a0b8aad430 'String' sugar
|           |-TemplateTypeParmType 0x55a0b87bfe30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a0b87bfdd8 'T'
|           `-RecordType 0x55a0b881b5b0 'String'
|             `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aad868 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55a0b8aaca50 'const String &'
|   `-QualType 0x55a0b88e8151 'const String' const
|     `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-RecordType 0x55a0b881b5b0 'String'
|         `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aad8c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8aad928 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55a0b8aacae0 'String *'
|   `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-RecordType 0x55a0b881b5b0 'String'
|       `-CXXRecord 0x55a0b881b520 'String'
|-TypedefDecl 0x55a0b8aad990 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55a0b8aacb70 'const String *'
|   `-QualType 0x55a0b88e8151 'const String' const
|     `-SubstTemplateTypeParmType 0x55a0b88e8150 'String' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-RecordType 0x55a0b881b5b0 'String'
|         `-CXXRecord 0x55a0b881b520 'String'
|-EnumDecl 0x55a0b8aad9e8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a0b8aadae0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a0b8aadac0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a0b87ef2d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a0b87ef2b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a0b87ef290 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a0b8aadb68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a0b8aaddf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8aadc20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8aadcc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55a0b8aae088 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55a0b8aadf70 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55a0b8aae348 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55a0b8aae230 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a0b8aae660 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55a0b8aae540 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55a0b8aae970 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55a0b8aae850 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a0b8aaec60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8aaeaa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8aaeb20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a0b8aaed88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a0b8aaee38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaee90 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaeed8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a0b8aaef88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaefe0 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaf0a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8aaf158 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaf1b0 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaf1f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8aaf2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaf300 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaf348 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8aaf3f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaf450 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaf498 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8aaf548 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8aaf5a0 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8aaf5c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a0b8aaf678 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a0b8aaf728 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a0b8aaf8e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8aaf7d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8aaf850 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a0b8aafa38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8aaf9a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8aafbe8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55a0b8aafaf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a0b8aafca0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8aafcf8 <col:30>
|-CXXMethodDecl 0x55a0b8aafe18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55a0b8aafd20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a0b8aafed0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8aaff28 <col:30>
|-CXXMethodDecl 0x55a0b8aaffe0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8aaff50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8ab0128 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a0b8ab0098 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8ab0258 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55a0b8ab0358 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55a0b8ab0428 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55a0b8ab04f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55a0b8ab0638 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8ab05a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8ab0780 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a0b8ab06f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8ab08c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a0b8ab0838 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a0b8ab0980 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a0b8ab0a80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a0b8ab09f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a0b8ab0b38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a0b8ab0bf8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55a0b8ab0cf8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55a0b8ab0e78 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a0b8ab0db8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55a0b8ab1638 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a0b8ab0f30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55a0b8ab1598 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55a0b8ab1498 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55a0b8ab1718 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a0b8ab1868 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a0b8ab17d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a0b8ab1920 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a0b8ab1b68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8ab19e0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a0b8ab1a58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a0b8ab1cf8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55a0b8ab1c38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a0b8ab1f08 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55a0b8ab1dc0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a0b8ab1e38 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a0b8ab1fc8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a0b8ab2228 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55a0b8ab2130 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55a0b8ab22f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55a0b8ab22f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b333a0 prev 0x55a0b8abced8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a0b8b33498 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55a0b8b33528 <col:22, col:28> col:22 public
|-EnumDecl 0x55a0b8b33550 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55a0b8b33668 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33648 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55a0b8b33630 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a0b8b33610 <col:14> 'int' 999
| |-EnumConstantDecl 0x55a0b8b33710 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b336f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55a0b8b336d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a0b8b336b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a0b8b337a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33780 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55a0b8b33760 <col:17> 'int' 0
| |-EnumConstantDecl 0x55a0b8b33830 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33810 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55a0b8b337f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55a0b8b338c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b338a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55a0b8b33880 <col:16> 'int' 2
| |-EnumConstantDecl 0x55a0b8b33950 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33930 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55a0b8b33910 <col:13> 'int' 3
| |-EnumConstantDecl 0x55a0b8b339e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b339c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55a0b8b339a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55a0b8b33a70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33a50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55a0b8b33a30 <col:14> 'int' 5
| |-EnumConstantDecl 0x55a0b8b33b00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a0b8b33ae0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55a0b8b33ac0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55a0b8b33b90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55a0b8b33b70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55a0b8b33b50 <col:13> 'int' 7
|-VarDecl 0x55a0b8b33c00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55a0b8b33c88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55a0b8b33d10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55a0b8b33d98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55a0b8b33e20 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55a0b8b33ea8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55a0b8b33f30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55a0b8b33fb8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55a0b8b34040 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55a0b8b340c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55a0b8b34150 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55a0b8b34250 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55a0b8b395b8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55a0b8b39d48 <line:128:13> 'int' 0
| `-CompoundStmt 0x55a0b8b39db8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55a0b8b34340 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55a0b8b39dc8 <col:29, line:132:5>
|-CXXMethodDecl 0x55a0b8b344f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55a0b8b34430 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8b345c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a0b8b346a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a0b8b39e20 <col:44, line:161:5>
|   `-ReturnStmt 0x55a0b8b39e10 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8b39df8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8b39dd8 <col:9> 'ErrorHandler *' lvalue Var 0x55a0b8b39618 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8b347e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55a0b8b34758 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a0b8b348b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a0b8b39e80 <col:43, line:173:5>
|   `-ReturnStmt 0x55a0b8b39e70 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8b39e58 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8b39e38 <col:9> 'ErrorHandler *' lvalue Var 0x55a0b8b39690 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55a0b8b34968 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55a0b8b349e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55a0b8b34af8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b34a68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b34c48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b34bb8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b34da0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b34d08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b34ef8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b34e60 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35050 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b34fb8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35260 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a0b8b35108 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b35188 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35438 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a0b8b35320 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b353a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35658 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a0b8b354f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b35578 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35838 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a0b8b35718 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b35798 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35a18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a0b8b358f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b35978 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b35ba0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55a0b8b35ad8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55a0b8b35d70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55a0b8b35c58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a0b8b35cd0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55a0b8b3a0d8 <col:57, line:234:5>
|   `-ReturnStmt 0x55a0b8b3a0c8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55a0b8b3a0b0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a0b8b3a058 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a0b8b3a028 <col:9> '<bound member function type>' ->xmessage 0x55a0b8b35ba0
|         | `-CXXThisExpr 0x55a0b8b3a018 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55a0b8b3a098 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a0b8b3a080 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a0b8b39ff8 <col:18, col:40> 'String' (CXXTemporary 0x55a0b8b39ff8)
|               `-CallExpr 0x55a0b8b39fc0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55a0b8b39fa8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55a0b8b39f20 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a0b8b37d68 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55a0b8b39f40 <col:31> 'const String' lvalue ParmVar 0x55a0b8b35cd0 'str' 'const String &'
|                 `-DeclRefExpr 0x55a0b8b39f60 <col:36> 'const String' lvalue ParmVar 0x55a0b8b35c58 'anno' 'const String &'
|-CXXMethodDecl 0x55a0b8b36050 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a0b8b35e30 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a0b8b35eb0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55a0b8b35f28 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a0b8b3a368 <col:68, line:243:5>
|   `-ReturnStmt 0x55a0b8b3a358 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55a0b8b3a340 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a0b8b3a2e0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a0b8b3a2b0 <col:9> '<bound member function type>' ->xmessage 0x55a0b8b35d70
|         | `-CXXThisExpr 0x55a0b8b3a2a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a0b8b3a178 <col:18> 'const String' lvalue ParmVar 0x55a0b8b35e30 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a0b8b3a328 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a0b8b3a310 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a0b8b3a280 <col:24, col:40> 'String' (CXXTemporary 0x55a0b8b3a280)
|               `-CXXMemberCallExpr 0x55a0b8b3a218 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55a0b8b3a1a8 <col:24> '<bound member function type>' ->vformat 0x55a0b8b37230
|                 | `-CXXThisExpr 0x55a0b8b3a198 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a0b8b3a248 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a0b8b3a1d8 <col:32> 'const char *' lvalue ParmVar 0x55a0b8b35eb0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a0b8b3a260 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a0b8b3a1f8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a0b8b35f28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a0b8b362f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55a0b8b36118 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a0b8b36190 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a0b8b36208 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55a0b8b3a6a8 <col:23, line:254:5>
|   `-ReturnStmt 0x55a0b8b3a698 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55a0b8b3a680 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55a0b8b3a620 <col:9, col:71> 'int'
|         |-MemberExpr 0x55a0b8b3a5f0 <col:9> '<bound member function type>' ->xmessage 0x55a0b8b35d70
|         | `-CXXThisExpr 0x55a0b8b3a5e0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55a0b8b3a668 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55a0b8b3a650 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55a0b8b3a5a0 <col:18, col:65> 'String' (CXXTemporary 0x55a0b8b3a5a0)
|         |     `-CallExpr 0x55a0b8b3a538 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55a0b8b3a520 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55a0b8b3a408 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a0b8b37d68 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55a0b8b3a428 <col:31> 'const String' lvalue ParmVar 0x55a0b8b36190 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55a0b8b3a580 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55a0b8b3a568 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55a0b8b3a500 <col:37, col:64> 'String' (CXXTemporary 0x55a0b8b3a500)
|         |             `-CallExpr 0x55a0b8b3a4d0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55a0b8b3a4b8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55a0b8b3a448 <col:37> 'String (const String &)' lvalue CXXMethod 0x55a0b8b38430 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55a0b8b3a468 <col:56> 'const String' lvalue ParmVar 0x55a0b8b36118 'landmark' 'const String &'
|         `-DeclRefExpr 0x55a0b8b3a5c0 <col:68> 'const String' lvalue ParmVar 0x55a0b8b36208 'str' 'const String &'
|-CXXMethodDecl 0x55a0b8b36670 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a0b8b363b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a0b8b36430 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a0b8b364b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55a0b8b36528 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a0b8b3a960 <col:34, line:267:5>
|   `-ReturnStmt 0x55a0b8b3a950 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55a0b8b3a938 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55a0b8b3a8d0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55a0b8b3a8a0 <col:9> '<bound member function type>' ->xmessage 0x55a0b8b362f0
|         | `-CXXThisExpr 0x55a0b8b3a890 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a0b8b3a748 <col:18> 'const String' lvalue ParmVar 0x55a0b8b363b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55a0b8b3a768 <col:28> 'const String' lvalue ParmVar 0x55a0b8b36430 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a0b8b3a920 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a0b8b3a908 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a0b8b3a870 <col:34, col:50> 'String' (CXXTemporary 0x55a0b8b3a870)
|               `-CXXMemberCallExpr 0x55a0b8b3a808 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55a0b8b3a798 <col:34> '<bound member function type>' ->vformat 0x55a0b8b37230
|                 | `-CXXThisExpr 0x55a0b8b3a788 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a0b8b3a838 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a0b8b3a7c8 <col:42> 'const char *' lvalue ParmVar 0x55a0b8b364b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a0b8b3a850 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a0b8b3a7e8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a0b8b36528 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a0b8b36780 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55a0b8b3a9e0 <col:25, line:288:5>
|   `-ReturnStmt 0x55a0b8b3a9d0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8b3a9b8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55a0b8b3a988 <col:9> 'const int' lvalue ->_nerrors 0x55a0b8b395b8
|         `-CXXThisExpr 0x55a0b8b3a978 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a0b8b36990 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55a0b8b36838 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55a0b8b368b8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b36c78 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a0b8b36a58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55a0b8b36ad8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55a0b8b36b50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a0b8b36e10 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55a0b8b36d48 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b37058 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a0b8b36ed0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55a0b8b36f48 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a0b8b3ac40 <col:58, line:357:5>
|   `-ReturnStmt 0x55a0b8b3ac30 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55a0b8b3ac18 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55a0b8b3abe8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a0b8b3abd0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55a0b8b3abb0 <col:9, col:29> 'String' (CXXTemporary 0x55a0b8b3abb0)
|             `-CallExpr 0x55a0b8b3ab40 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55a0b8b3ab28 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a0b8b3aaa8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55a0b8b36c78 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55a0b8b3aa48 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55a0b8b3ab78 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55a0b8b3aa68 <col:21> 'const char *' lvalue ParmVar 0x55a0b8b36ed0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55a0b8b3ab90 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55a0b8b3aa88 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a0b8b36f48 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a0b8b37230 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55a0b8b37120 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55a0b8b37198 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a0b8b37388 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55a0b8b372f8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8b374d0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55a0b8b37440 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55a0b8b37770 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55a0b8b37588 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55a0b8b37608 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55a0b8b37680 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55a0b8b378d0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55a0b8b37840 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55a0b8b3ad58 <col:37, line:441:5>
|   `-IfStmt 0x55a0b8b3ad40 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55a0b8b3acc8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55a0b8b3ac98 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55a0b8b3ac58 <col:6> 'int' lvalue ParmVar 0x55a0b8b37840 'level' 'int'
|     | `-ImplicitCastExpr 0x55a0b8b3acb0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55a0b8b3ac78 <col:15> 'ErrorHandler::Level' EnumConstant 0x55a0b8b33950 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55a0b8b3ad28 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55a0b8b3acf8 <col:8> 'int' lvalue ->_nerrors 0x55a0b8b395b8
|         `-CXXThisExpr 0x55a0b8b3ace8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a0b8b37998 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55a0b8b3adf0 <col:26, line:448:5>
|   `-BinaryOperator 0x55a0b8b3add0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55a0b8b3ad80 <col:2> 'int' lvalue ->_nerrors 0x55a0b8b395b8
|     | `-CXXThisExpr 0x55a0b8b3ad70 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55a0b8b3adb0 <col:13> 'int' 0
|-CXXMethodDecl 0x55a0b8b37b60 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55a0b8b37a50 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55a0b8b37ac8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55a0b8b37d68 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55a0b8b37c20 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55a0b8b37c98 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55a0b8b38018 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55a0b8b37e28 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55a0b8b37ea8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55a0b8b37f28 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55a0b8b380d0 <col:59> 0 0
|-CXXMethodDecl 0x55a0b8b382e0 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55a0b8b38148 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55a0b8b381c8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55a0b8b3b460 <col:70, line:534:5>
|   |-DeclStmt 0x55a0b8b3af60 <line:528:2, col:20>
|   | |-VarDecl 0x55a0b8b3ae18 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55a0b8b3ae80 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55a0b8b3aeb8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55a0b8b3af20 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55a0b8b3b030 <line:529:2, col:23>
|   | `-VarDecl 0x55a0b8b3af90 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55a0b8b3b018 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55a0b8b3aff8 <col:18> 'const char *' lvalue ParmVar 0x55a0b8b38148 'begin' 'const char *'
|   |-DoStmt 0x55a0b8b3b3f8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55a0b8b3b328 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55a0b8b3b310 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55a0b8b3b2f0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55a0b8b3b048 <col:6> 'const char *' lvalue Var 0x55a0b8b3af90 'x' 'const char *'
|   | |     `-CallExpr 0x55a0b8b3b240 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55a0b8b3b228 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55a0b8b3b1e0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55a0b8b39a90 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55a0b8b3b2a8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55a0b8b3b290 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55a0b8b3b100 <col:20, col:27> 'String' (CXXTemporary 0x55a0b8b3b100)
|   | |       |     `-CXXTemporaryObjectExpr 0x55a0b8b3b0c8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55a0b8b3b2c0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a0b8b3b120 <col:30> 'const char *' lvalue Var 0x55a0b8b3af90 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55a0b8b3b2d8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a0b8b3b140 <col:33> 'const char *' lvalue ParmVar 0x55a0b8b381c8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55a0b8b3b180 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a0b8b3b160 <col:39> 'String' lvalue Var 0x55a0b8b3ae18 'name' 'String'
|   | |       |-UnaryOperator 0x55a0b8b3b1b8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a0b8b3b198 <col:46> 'String' lvalue Var 0x55a0b8b3aeb8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55a0b8b3b1d0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55a0b8b3b3e0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55a0b8b3b3c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55a0b8b3b3a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55a0b8b3b378 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|   |         `-ImplicitCastExpr 0x55a0b8b3b360 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55a0b8b3b340 <col:11> 'String' lvalue Var 0x55a0b8b3ae18 'name' 'String'
|   `-ReturnStmt 0x55a0b8b3b450 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8b3b438 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b8b3b418 <col:9> 'const char *' lvalue Var 0x55a0b8b3af90 'x' 'const char *'
|-CXXMethodDecl 0x55a0b8b38430 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55a0b8b383a0 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55a0b8b3ba68 <col:55, line:550:5>
|   `-IfStmt 0x55a0b8b3ba40 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55a0b8b3b6a0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55a0b8b3b688 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a0b8b3b670 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a0b8b3b650 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a0b8b3b620 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|     | |       `-DeclRefExpr 0x55a0b8b3b4c0 <col:6> 'const String' lvalue ParmVar 0x55a0b8b383a0 'x' 'const String &'
|     | `-BinaryOperator 0x55a0b8b3b600 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55a0b8b3b5d0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55a0b8b3b580 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55a0b8b3b568 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55a0b8b3b520 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55a0b8837cc0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55a0b8b3b4e0 <col:11> 'const String' lvalue ParmVar 0x55a0b8b383a0 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55a0b8b3b500 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55a0b8b3b5e8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55a0b8b3b5b8 <col:19> 'char' 123
|     |-ReturnStmt 0x55a0b8b3b710 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55a0b8b3b6e0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55a0b8b3b6c0 <col:13> 'const String' lvalue ParmVar 0x55a0b8b383a0 'x' 'const String &'
|     `-IfStmt 0x55a0b8b3ba18 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55a0b8b3b7a8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a0b8b3b790 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a0b8b3b770 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a0b8b3b740 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |       `-DeclRefExpr 0x55a0b8b3b720 <col:11> 'const String' lvalue ParmVar 0x55a0b8b383a0 'x' 'const String &'
|       |-ReturnStmt 0x55a0b8b3b930 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55a0b8b3b918 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55a0b8b3b8e8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55a0b8b3b8d0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55a0b8b3b8b0 <col:13, col:29> 'String' (CXXTemporary 0x55a0b8b3b8b0)
|       |         `-CallExpr 0x55a0b8b3b860 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55a0b8b3b848 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55a0b8b3b7c0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55a0b8b37b60 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55a0b8b3b890 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55a0b8b3b7e0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55a0b8b3b800 <col:28> 'const String' lvalue ParmVar 0x55a0b8b383a0 'x' 'const String &'
|       `-ReturnStmt 0x55a0b8b3ba08 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55a0b8b3b9f0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55a0b8b3b9c0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55a0b8b3b9a8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55a0b8b3b988 <col:13, col:20> 'String' (CXXTemporary 0x55a0b8b3b988)
|                 `-CXXTemporaryObjectExpr 0x55a0b8b3b950 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55a0b8b385f8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55a0b8b384e8 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55a0b8b38560 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a0b8b39d38 <col:71> 'bool' false
|-CXXRecordDecl 0x55a0b8b386a8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55a0b8b389a8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55a0b8b38940 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55a0b8b388e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55a0b8b388a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55a0b881b5b0 'String'
|       | `-CXXRecord 0x55a0b881b520 'String'
|       |-BuiltinType 0x55a0b84ea370 'int'
|       `-DecayedType 0x55a0b8abdf20 '__va_list_tag *' sugar
|         |-TypedefType 0x55a0b8abdef0 'va_list' sugar
|         | |-Typedef 0x55a0b8731770 'va_list'
|         | `-TypedefType 0x55a0b8731720 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55a0b872c6d8 '__gnuc_va_list'
|         |   `-TypedefType 0x55a0b872c640 '__builtin_va_list' sugar
|         |     |-Typedef 0x55a0b852bbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55a0b852bb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55a0b84eb0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55a0b84eb028 '__va_list_tag'
|         `-PointerType 0x55a0b8739080 '__va_list_tag *'
|           `-RecordType 0x55a0b84eb0c0 '__va_list_tag'
|             `-CXXRecord 0x55a0b84eb028 '__va_list_tag'
|-EnumDecl 0x55a0b8b38a00 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55a0b8b38b00 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b39060 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38ae0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55a0b8b38ac0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55a0b8b38b90 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b39078 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38b70 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55a0b8b38b50 <col:21> 'int' 2
| |-EnumConstantDecl 0x55a0b8b38c20 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b39090 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38c00 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55a0b8b38be0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55a0b8b38cb0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b390a8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38c90 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55a0b8b38c70 <col:17> 'int' 8
| |-EnumConstantDecl 0x55a0b8b38d40 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b390c0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38d20 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55a0b8b38d00 <col:22> 'int' 16
| |-EnumConstantDecl 0x55a0b8b38dd0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b390d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38db0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a0b8b38d90 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a0b8b38e60 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b390f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38e40 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55a0b8b38e20 <col:17> 'int' 64
| |-EnumConstantDecl 0x55a0b8b38ef0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b39108 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38ed0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55a0b8b38eb0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55a0b8b38f80 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a0b8b39120 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b38f60 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55a0b8b38f40 <col:16> 'int' 256
| `-EnumConstantDecl 0x55a0b8b39010 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55a0b8b39138 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8b38ff0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55a0b8b38fd0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55a0b8b39348 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55a0b8b39160 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55a0b8b39200 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55a0b8b394d0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55a0b8b39408 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55a0b8b39578 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55a0b8b395b8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55a0b8b39618 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55a0b8b39690 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55a0b8b39a90 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55a0b8b39708 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55a0b8b39788 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55a0b8b39808 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55a0b8b39880 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55a0b8b398f8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55a0b8b39970 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55a0b8b39bb8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55a0b8b39bb8
| `-ParmVarDecl 0x55a0b8b39cc8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55a0b8b3bdc8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55a0b8b3bdc8
  `-ParmVarDecl 0x55a0b8b3bed8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8abcf68 prev 0x55a0b8a11d88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8abd060 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55a0b8abd0f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55a0b8abd228 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8abd128 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a0b8abe650 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8abe630 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b8abe1c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a0b8abe6e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8abe6a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55a0b8abd128 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a0b8abe230 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a0b8abe760 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8abe720 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b8abe290 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a0b8abe7a0 <col:54> 'bool' false
| `-CompoundStmt 0x55a0b8abe8a8 <col:61, line:38:5>
|   `-BinaryOperator 0x55a0b8abe888 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55a0b8abe820 <col:9> 'const Element *' lvalue ->_context 0x55a0b8abe168
|     | `-CXXThisExpr 0x55a0b8abe810 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55a0b8abe870 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55a0b8abe850 <col:20> 'int' 0
|-CXXConstructorDecl 0x55a0b8abd438 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8abd2e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55a0b8abd360 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a0b8abe688 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8abe668 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b8abe168 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55a0b8abe900 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8abe8c0 <col:20> 'const Element *' lvalue ParmVar 0x55a0b8abd2e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55a0b8abe1c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a0b8abe980 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8abe940 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55a0b8abd360 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a0b8abe230 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a0b8abea00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a0b8abe9c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b8abe290 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a0b8abea40 <col:73> 'bool' false
| `-CompoundStmt 0x55a0b8abeab8 <col:80, line:46:5>
|-CXXMethodDecl 0x55a0b8abd568 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55a0b8abeb30 <col:36, line:51:5>
|   `-ReturnStmt 0x55a0b8abeb20 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8abeb08 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55a0b8abead8 <col:16> 'const Element *const' lvalue ->_context 0x55a0b8abe168
|         `-CXXThisExpr 0x55a0b8abeac8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a0b8abd658 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55a0b8abebb0 <col:32, line:57:5>
|   `-ReturnStmt 0x55a0b8abeba0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8abeb88 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55a0b8abeb58 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55a0b8abe1c8
|         `-CXXThisExpr 0x55a0b8abeb48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a0b8abd718 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55a0b8abd8a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a0b8abd7d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8abd9f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a0b8abd960 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8abdb40 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a0b8abdab0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a0b8abdd48 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55a0b8abdbf8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55a0b8abdc70 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55a0b8abe078 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55a0b8abde08 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55a0b8abde88 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55a0b8abdf50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55a0b8abe130 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55a0b8abe168 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55a0b8abe1c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55a0b8abe230 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55a0b8abe290 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55a0b8abe2e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a0b8abe2e0
| `-ParmVarDecl 0x55a0b8abe3f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55a0b8abe498 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a0b8abe498
| `-ParmVarDecl 0x55a0b8abe5a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55a0b8b4b138 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8ae6160 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55a0b8ae6338 prev 0x55a0b8ae6160 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a0b8ae63c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a0b8ae63f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8ae7fc0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55a0b8ae7f70 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55a0b8ae68a0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55a0b8ae67a0 'type'
|     `-TemplateSpecializationType 0x55a0b8ae6730 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55a0b8ae6610 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55a0b8ae65f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55a0b8ae65d0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55a0b8ae6710 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55a0b8ae6630 'char_array'
|-TypedefDecl 0x55a0b8ae8078 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55a0b8ae8040 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55a0b8ae8020 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55a0b8ae7fc0 'type'
|     `-ElaboratedType 0x55a0b8ae7f70 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55a0b8ae68a0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55a0b8ae67a0 'type'
|         `-TemplateSpecializationType 0x55a0b8ae6730 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55a0b8ae6610 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55a0b8ae65f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55a0b8ae65d0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55a0b8ae6710 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55a0b8ae6630 'char_array'
|-CXXMethodDecl 0x55a0b8ae81f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55a0b8ae8108 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55a0b8ae82e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a0b8ae83c8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55a0b8ae8698 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a0b8ae85a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55a0b8af1c88 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a0b8ae8750 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8af1b70 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af1e58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a0b8af1d48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8af1dc0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af1fb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a0b8af2088 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a0b8af22d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a0b8af2148 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a0b8af21c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af2538 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55a0b8af23a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a0b8af2420 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af26f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a0b8af2608 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af28b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a0b8af27c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af2970 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a0b8af2a20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a0b8af2c58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a0b8af2ad0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a0b8af2b48 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a0b8af2ef8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a0b8af2e00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55a0b8af2fc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55a0b8af3010 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a0b8af3060 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8ae4b68 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55a0b8ae4d78 prev 0x55a0b8ae4b68 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a0b8ae60d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55a0b8ae6080 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55a0b8ae6060 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55a0b8ae5f10 'type'
|     `-SubstTemplateTypeParmType 0x55a0b8ae5d30 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55a0b87b4640 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87b45e8 'T'
|       `-RecordType 0x55a0b8ae5880 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55a0b8ae5798 'sized_array_memory'
|-FieldDecl 0x55a0b8af30b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55a0b8af3100 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a0b8af3138 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|   |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|   `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af31c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55a0b8af3190 'int &'
|   `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af3288 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55a0b8af3250 'const int &'
|   `-QualType 0x55a0b8ae4e11 'const int' const
|     `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af3318 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55a0b8af32e0 'int *'
|   `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af33a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55a0b8af3370 'const int *'
|   `-QualType 0x55a0b8ae4e11 'const int' const
|     `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af3f90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55a0b8af3f40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55a0b8af3f20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55a0b8af3eb0 'type'
|     `-SubstTemplateTypeParmType 0x55a0b8af3c70 'int' sugar
|       |-TemplateTypeParmType 0x55a0b87c0560 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87c0510 'T'
|       `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af3ff8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55a0b8af3250 'const int &'
|   `-QualType 0x55a0b8ae4e11 'const int' const
|     `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af4050 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af40b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55a0b8af32e0 'int *'
|   `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|     |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|     `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b8af4120 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55a0b8af3370 'const int *'
|   `-QualType 0x55a0b8ae4e11 'const int' const
|     `-SubstTemplateTypeParmType 0x55a0b8ae4e10 'int' sugar
|       |-TemplateTypeParmType 0x55a0b87ee110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a0b87ee0b8 'T'
|       `-BuiltinType 0x55a0b84ea370 'int'
|-EnumDecl 0x55a0b8af4178 <line:134:5> col:5
| `-EnumConstantDecl 0x55a0b8af4270 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a0b8af4250 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a0b87ef2d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a0b87ef2b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a0b87ef290 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a0b8af42f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a0b8af4548 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8af43b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8af4450 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55a0b8af4808 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55a0b8af46f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55a0b8af4ac8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55a0b8af49b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a0b8af4e10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55a0b8af4cf0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55a0b8af5120 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55a0b8af5000 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a0b8af5410 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8af5258 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8af52d0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a0b8af5538 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a0b8af5618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af5670 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af56b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a0b8af5768 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af57c0 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af5888 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8af5938 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af5990 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af59d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8af5a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af5ae0 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af5b28 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8af5bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af5c30 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af5c78 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a0b8af5d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a0b8af5d80 <col:30> Inherited
|-CXXMethodDecl 0x55a0b8af5da8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a0b8af5e58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a0b8af5f08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a0b8af60c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8af5fb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a0b8af6030 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a0b8af6218 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8af6188 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8af63c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55a0b8af62d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a0b8af6480 <col:20>
| `-OptimizeNoneAttr 0x55a0b8af64d8 <col:30>
|-CXXMethodDecl 0x55a0b8af65f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55a0b8af6500 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a0b8af66b0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8af6708 <col:30>
|-CXXMethodDecl 0x55a0b8af67c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8af6730 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8af6908 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a0b8af6878 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8af6a38 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55a0b8af6b68 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55a0b8af6c38 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55a0b8af6d08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55a0b8af6e48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a0b8af6db8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8af6f90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a0b8af6f00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a0b8af70d8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a0b8af7048 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a0b8af7190 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a0b8af7290 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a0b8af7200 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a0b8af7348 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a0b8af7408 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55a0b8af7508 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55a0b8af7688 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a0b8af75c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55a0b8af7e48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a0b8af7740 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55a0b8af7da8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55a0b8af7ca8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55a0b8af7f28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a0b8af8078 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a0b8af7fe8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a0b8af8130 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a0b8af8378 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a0b8af81f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a0b8af8268 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a0b8af8538 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55a0b8af8448 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a0b8af8788 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55a0b8af8600 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a0b8af8678 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a0b8af8848 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a0b8af8aa8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55a0b8af89b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55a0b8af8b78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8ae2cd8 prev 0x55a0b8ac60c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a0b8ae2dd0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55a0b8ae2ec0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55a0b8b0a7d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55a0b8ae2fb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55a0b8b0a7e0 <col:25, line:830:9>
|-CXXMethodDecl 0x55a0b8ae30b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55a0b8ae3160 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55a0b8ae3208 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a0b8ae3208
| `-ParmVarDecl 0x55a0b8ae3318 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55a0b8ae3ad8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a0b8ae3ad8
  `-ParmVarDecl 0x55a0b8ae3be8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8ac5ed8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55a0b8ac6038 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55a0b8ac60c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55a0b8ac6180 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55a0b8ac6288 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55a0b8ac61b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a0b8afba68 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a0b8afba48 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a0b8ac65a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8ac6420 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55a0b8ac6498 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a0b8afbaa0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a0b8afba80 <col:59> 'int' 0
|-CXXConstructorDecl 0x55a0b8ac6780 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8ac6670 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55a0b8ac66e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a0b8afbad8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a0b8afbab8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55a0b8ac6b38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a0b8ac6920 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55a0b8ac6998 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55a0b8ac6a10 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a0b8afbb10 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a0b8afbaf0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a0b8ac6cf8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55a0b8ac6c38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55a0b8ac6df0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55a0b8ac6fd8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55a0b8ac6ee0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55a0b8ac70c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55a0b8afbec0 <col:24, line:291:5>
|   `-ReturnStmt 0x55a0b8afbeb0 <line:290:9, col:79>
|     `-BinaryOperator 0x55a0b8afbe90 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55a0b8afbd68 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55a0b8afbcc0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55a0b8afbca0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55a0b8afbb98 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55a0b8afbb80 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55a0b8afbb68 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55a0b8afbb38 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55a0b8ae4b00
|       | |   |       `-CXXThisExpr 0x55a0b8afbb28 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55a0b8afbc88 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55a0b8afbc70 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55a0b8afbc38 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55a0b8afbc08 <col:28, col:35> '<bound member function type>' ->size 0x55a0b8aaf5c8
|       | |           `-ImplicitCastExpr 0x55a0b8afbc58 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55a0b8afbbf0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55a0b8afbbc0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55a0b8ae4b00
|       | |                 `-CXXThisExpr 0x55a0b8afbbb0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55a0b8afbd50 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55a0b8afbd38 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55a0b8afbd20 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55a0b8afbcf0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55a0b8af8cc0
|       |         `-CXXThisExpr 0x55a0b8afbce0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55a0b8afbe70 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55a0b8afbe58 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a0b8afbe40 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a0b8afbe00 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a0b8afbde8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a0b8afbd98 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a0b8af8d70
|         |     |   `-CXXThisExpr 0x55a0b8afbd88 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a0b8afbdc8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55a0b8afbe20 <col:79> 'int' 0
|-CXXMethodDecl 0x55a0b8ac7188 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55a0b8afc098 <col:32, line:296:5>
|   `-ReturnStmt 0x55a0b8afc088 <line:295:9, col:49>
|     `-BinaryOperator 0x55a0b8afc068 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55a0b8afbf48 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55a0b8afbf30 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55a0b8afbf18 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55a0b8afbee8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55a0b8af8cc0
|       |       `-CXXThisExpr 0x55a0b8afbed8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55a0b8afc048 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55a0b8afc030 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a0b8afc018 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a0b8afbfd8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a0b8afbfc0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a0b8afbf70 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a0b8af8d70
|         |     |   `-CXXThisExpr 0x55a0b8afbf60 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a0b8afbfa0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55a0b8afbff8 <col:49> 'int' 0
|-CXXMethodDecl 0x55a0b8ac7278 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55a0b8afc2a8 <col:19, line:306:5>
|   |-IfStmt 0x55a0b8afc1c8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55a0b8afc108 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55a0b8afc0f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55a0b8afc0c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a0b8ae4b00
|   | |     `-CXXThisExpr 0x55a0b8afc0b0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55a0b8afc1a8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55a0b8afc178 <col:13, col:20> '<bound member function type>' ->clear 0x55a0b8ab1fc8
|   |     `-ImplicitCastExpr 0x55a0b8afc160 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55a0b8afc130 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a0b8ae4b00
|   |         `-CXXThisExpr 0x55a0b8afc120 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55a0b8afc250 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55a0b8afc220 <col:9, col:16> '<bound member function type>' .clear 0x55a0b8af8848
|   |   `-MemberExpr 0x55a0b8afc1f0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55a0b8af8c60
|   |     `-CXXThisExpr 0x55a0b8afc1e0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55a0b8afc298 <line:305:9, col:17>
|     `-UnaryOperator 0x55a0b8afc280 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8afc270 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a0b8ac74f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55a0b8ac7400 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55a0b8ac7678 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55a0b8ac75b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55a0b8ac79f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55a0b8ac7720 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55a0b8ac7958 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55a0b8ac77c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55a0b8ac7840 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55a0b8afc5c8 <col:67, line:327:5>
|     |-WhileStmt 0x55a0b8afc578 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55a0b8afc390 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55a0b8afc310 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a0b8a0a258 0x55a0b8853d18 0x55a0b88539f0 0x55a0b8849600 0x55a0b88492b0 0x55a0b8848ba0 0x55a0b8819a30 0x55a0b87a76e0
|     | | |-DeclRefExpr 0x55a0b8afc2d0 <col:16> 'Iter' lvalue ParmVar 0x55a0b8ac77c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55a0b8afc2f0 <col:25> 'Iter' lvalue ParmVar 0x55a0b8ac7840 'end' 'Iter'
|     | `-CompoundStmt 0x55a0b8afc558 <col:30, line:325:9>
|     |   |-CallExpr 0x55a0b8afc4f8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55a0b8afc3d8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55a0b8afc4c8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55a0b8afc458 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|     |   |   `-DeclRefExpr 0x55a0b8afc438 <col:24> 'Iter' lvalue ParmVar 0x55a0b8ac77c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55a0b8afc540 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55a0b8afc520 <col:15> 'Iter' lvalue ParmVar 0x55a0b8ac77c8 'begin' 'Iter'
|     `-ReturnStmt 0x55a0b8afc5b8 <line:326:9, col:17>
|       `-UnaryOperator 0x55a0b8afc5a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afc590 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a0b8ac7b00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55a0b8ac7a70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55a0b8ac7c48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55a0b8ac7bb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55a0b8ac7d10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55a0b8afc6a8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55a0b8afc648 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55a0b8afc5f8 <col:9> '<bound member function type>' ->reset_from 0x55a0b8af90e8
|   | | `-CXXThisExpr 0x55a0b8afc5e8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55a0b8afc628 <col:20> 'int' 0
|   `-ReturnStmt 0x55a0b8afc698 <line:352:9, col:17>
|     `-UnaryOperator 0x55a0b8afc680 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8afc670 <col:17> 'Args *' this
|-VarDecl 0x55a0b8ac7dc8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a0b8ac7e30 <col:38> 'int' 1
|-VarDecl 0x55a0b8ac7ec0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a0b8ac7f28 <col:39> 'int' 2
|-VarDecl 0x55a0b8ac7fb8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a0b8ac8020 <col:39> 'int' 4
|-VarDecl 0x55a0b8ac80b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a0b8ac8118 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55a0b8ac8498 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55a0b8ac8190 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ac83f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a0b8ac8240 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac82e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afc800 <col:43, line:371:5>
|     `-ReturnStmt 0x55a0b8afc7f0 <line:370:9, col:34>
|       `-CallExpr 0x55a0b8afc7b8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afc6d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afc758 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ac8240 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afc778 <col:30> 'int' 0
|         `-DeclRefExpr 0x55a0b8afc798 <col:33> 'T' lvalue ParmVar 0x55a0b8ac82e8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ac87c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55a0b8ac8500 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ac8728 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a0b8ac85b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac8658 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afc950 <col:45, line:375:5>
|     `-ReturnStmt 0x55a0b8afc940 <line:374:9, col:42>
|       `-CallExpr 0x55a0b8afc908 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afc828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afc8a8 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ac85b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afc8c8 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a0b8afc8e8 <col:41> 'T' lvalue ParmVar 0x55a0b8ac8658 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ac8af8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55a0b8ac8830 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a0b8ac8a58 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a0b8ac88e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a0b8ac8988 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55a0b8afcaa0 <col:45, line:379:5>
| |   `-ReturnStmt 0x55a0b8afca90 <line:378:9, col:43>
| |     `-CallExpr 0x55a0b8afca58 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a0b8afc978 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a0b8afc9f8 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ac88e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55a0b8afca18 <col:30> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
| |       `-DeclRefExpr 0x55a0b8afca38 <col:42> 'T' lvalue ParmVar 0x55a0b8ac8988 'x' 'T &'
| `-CXXMethodDecl 0x55a0b8b5c1a8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55a0b8b5bfc8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55a0b8b5c098 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55a0b8ac8e28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55a0b8ac8b60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a0b8ac8d88 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a0b8ac8c10 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a0b8ac8cb8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55a0b8afcca0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55a0b8afcc90 <line:382:9, col:55>
| |     `-CallExpr 0x55a0b8afcc58 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a0b8afcac8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a0b8afcb48 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ac8c10 'keyword' 'const char *'
| |       |-BinaryOperator 0x55a0b8afcc18 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55a0b8afcbc8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55a0b8afcba8 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55a0b8afcc00 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55a0b8afcbe0 <col:42> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55a0b8afcc38 <col:54> 'T' lvalue ParmVar 0x55a0b8ac8cb8 'x' 'T &'
| |-CXXMethodDecl 0x55a0b8b4b628 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x55a0b8b4b448 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55a0b8b4b518 <col:40, col:43> col:43 x 'unsigned int &'
| |-CXXMethodDecl 0x55a0b8b4ba88 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55a0b8b4b8a8 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55a0b8b4b978 <col:40, col:43> col:43 x 'int &'
| `-CXXMethodDecl 0x55a0b8b5b538 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x55a0b8b5b350 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55a0b8b5b428 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x55a0b8ac9228 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55a0b8ac8e90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ac9188 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55a0b8ac8f40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac8fc0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ac9068 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afcde0 <col:54, line:388:5>
|     |-CallExpr 0x55a0b8afcd68 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afccb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a0b8afccf8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afcd08 <col:30> 'const char *' lvalue ParmVar 0x55a0b8ac8f40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afcd28 <col:39> 'int' lvalue ParmVar 0x55a0b8ac8fc0 'flags' 'int'
|     | `-DeclRefExpr 0x55a0b8afcd48 <col:46> 'T' lvalue ParmVar 0x55a0b8ac9068 'x' 'T &'
|     `-ReturnStmt 0x55a0b8afcdd0 <line:387:9, col:17>
|       `-UnaryOperator 0x55a0b8afcdb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afcda8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ac96d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55a0b8ac9298 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ac9318 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a0b8ac9638 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ac93d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac9478 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8ac9518 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afcf50 <col:74, line:403:5>
|     `-ReturnStmt 0x55a0b8afcf40 <line:402:9, col:56>
|       `-CallExpr 0x55a0b8afcf00 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afce10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afce80 <col:28> 'const char *' lvalue ParmVar 0x55a0b8ac93d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afcea0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a0b8afcec0 <col:40> 'T' lvalue ParmVar 0x55a0b8ac9478 'x' 'T &'
|         `-DeclRefExpr 0x55a0b8afcee0 <col:43> 'const V' lvalue ParmVar 0x55a0b8ac9518 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a0b8ac9b48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a0b8ac9748 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ac97c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a0b8ac9aa8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ac9888 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac9928 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8ac99c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afd0b8 <col:76, line:407:5>
|     `-ReturnStmt 0x55a0b8afd0a8 <line:406:9, col:65>
|       `-CallExpr 0x55a0b8afd068 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afcf78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afcfe8 <col:28> 'const char *' lvalue ParmVar 0x55a0b8ac9888 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afd008 <col:37> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
|         |-DeclRefExpr 0x55a0b8afd028 <col:49> 'T' lvalue ParmVar 0x55a0b8ac9928 'x' 'T &'
|         `-DeclRefExpr 0x55a0b8afd048 <col:52> 'const V' lvalue ParmVar 0x55a0b8ac99c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a0b8aca098 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55a0b8ac9bb8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ac9c38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a0b8ac9ff8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ac9cf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ac9d78 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ac9e18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8ac9eb8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afd220 <col:85, line:412:5>
|     |-CallExpr 0x55a0b8afd1a0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afd0d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a0b8afd110 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afd120 <col:37> 'const char *' lvalue ParmVar 0x55a0b8ac9cf8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afd140 <col:46> 'int' lvalue ParmVar 0x55a0b8ac9d78 'flags' 'int'
|     | |-DeclRefExpr 0x55a0b8afd160 <col:53> 'T' lvalue ParmVar 0x55a0b8ac9e18 'x' 'T &'
|     | `-DeclRefExpr 0x55a0b8afd180 <col:56> 'const V' lvalue ParmVar 0x55a0b8ac9eb8 'default_value' 'const V &'
|     `-ReturnStmt 0x55a0b8afd210 <line:411:9, col:17>
|       `-UnaryOperator 0x55a0b8afd1f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afd1e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8aca528 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55a0b8aca110 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8aca188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8aca488 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8aca248 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8aca2c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8aca368 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afd3a0 <col:53, line:425:5>
|     `-ReturnStmt 0x55a0b8afd390 <line:424:9, col:42>
|       `-CallExpr 0x55a0b8afd350 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afd250 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afd2d0 <col:21> 'const char *' lvalue ParmVar 0x55a0b8aca248 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afd2f0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a0b8afd310 <col:33> 'P' lvalue ParmVar 0x55a0b8aca2c0 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8afd330 <col:41> 'T' lvalue ParmVar 0x55a0b8aca368 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8aca978 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55a0b8aca598 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8aca618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8aca8d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8aca6d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8aca750 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8aca7f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afd518 <col:55, line:429:5>
|     `-ReturnStmt 0x55a0b8afd508 <line:428:9, col:50>
|       `-CallExpr 0x55a0b8afd4c8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afd3c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afd448 <col:21> 'const char *' lvalue ParmVar 0x55a0b8aca6d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afd468 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a0b8afd488 <col:41> 'P' lvalue ParmVar 0x55a0b8aca750 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8afd4a8 <col:49> 'T' lvalue ParmVar 0x55a0b8aca7f8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8acadc8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55a0b8aca9e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acaa68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8acad28 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8acab28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8acaba0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8acac48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afd690 <col:55, line:433:5>
|     `-ReturnStmt 0x55a0b8afd680 <line:432:9, col:51>
|       `-CallExpr 0x55a0b8afd640 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afd540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afd5c0 <col:21> 'const char *' lvalue ParmVar 0x55a0b8acab28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afd5e0 <col:30> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
|         |-DeclRefExpr 0x55a0b8afd600 <col:42> 'P' lvalue ParmVar 0x55a0b8acaba0 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8afd620 <col:50> 'T' lvalue ParmVar 0x55a0b8acac48 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8acb218 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55a0b8acae38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acaeb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55a0b8acb178 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55a0b8acaf78 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a0b8acaff0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55a0b8acb098 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55a0b8afd8b8 <col:56, line:437:5>
| |   `-ReturnStmt 0x55a0b8afd8a8 <line:436:9, col:63>
| |     `-CallExpr 0x55a0b8afd868 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a0b8afd6b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a0b8afd738 <col:21> 'const char *' lvalue ParmVar 0x55a0b8acaf78 'keyword' 'const char *'
| |       |-BinaryOperator 0x55a0b8afd808 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55a0b8afd7b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55a0b8afd798 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55a0b8afd7f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55a0b8afd7d0 <col:42> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55a0b8afd828 <col:54> 'P' lvalue ParmVar 0x55a0b8acaff0 'parser' 'P'
| |       `-DeclRefExpr 0x55a0b8afd848 <col:62> 'T' lvalue ParmVar 0x55a0b8acb098 'x' 'T &'
| `-CXXMethodDecl 0x55a0b8b5af18 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x55a0b8b5ac58 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8b5acf8 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x55a0b8b5adf8 <col:50, col:53> col:53 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x55a0b8acb748 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55a0b8acb288 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acb308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8acb6a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a0b8acb3c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8acb448 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8acb4c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8acb568 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afda20 <col:64, line:442:5>
|     |-CallExpr 0x55a0b8afd9a0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afd8d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a0b8afd910 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afd920 <col:30> 'const char *' lvalue ParmVar 0x55a0b8acb3c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afd940 <col:39> 'int' lvalue ParmVar 0x55a0b8acb448 'flags' 'int'
|     | |-DeclRefExpr 0x55a0b8afd960 <col:46> 'P' lvalue ParmVar 0x55a0b8acb4c0 'parser' 'P'
|     | `-DeclRefExpr 0x55a0b8afd980 <col:54> 'T' lvalue ParmVar 0x55a0b8acb568 'x' 'T &'
|     `-ReturnStmt 0x55a0b8afda10 <line:441:9, col:17>
|       `-UnaryOperator 0x55a0b8afd9f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afd9e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8acbd48 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55a0b8acb7c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acb838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a0b8acb8b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a0b8acbca8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8acb980 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8acb9f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8acba98 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8acbb68 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afdbb8 <col:84, line:458:5>
|     `-ReturnStmt 0x55a0b8afdba8 <line:457:9, col:64>
|       `-CallExpr 0x55a0b8afdb60 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afda50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afdac0 <col:28> 'const char *' lvalue ParmVar 0x55a0b8acb980 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afdae0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a0b8afdb00 <col:40> 'P' lvalue ParmVar 0x55a0b8acb9f8 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afdb20 <col:48> 'T' lvalue ParmVar 0x55a0b8acba98 'x' 'T &'
|         `-DeclRefExpr 0x55a0b8afdb40 <col:51> 'const V' lvalue ParmVar 0x55a0b8acbb68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a0b8acc2c8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a0b8acbdc0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acbe38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a0b8acbeb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a0b8acc228 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8acbf80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8acbff8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8acc098 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8acc138 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afdd48 <col:86, line:462:5>
|     `-ReturnStmt 0x55a0b8afdd38 <line:461:9, col:73>
|       `-CallExpr 0x55a0b8afdcf0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afdbe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afdc50 <col:28> 'const char *' lvalue ParmVar 0x55a0b8acbf80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afdc70 <col:37> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
|         |-DeclRefExpr 0x55a0b8afdc90 <col:49> 'P' lvalue ParmVar 0x55a0b8acbff8 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afdcb0 <col:57> 'T' lvalue ParmVar 0x55a0b8acc098 'x' 'T &'
|         `-DeclRefExpr 0x55a0b8afdcd0 <col:60> 'const V' lvalue ParmVar 0x55a0b8acc138 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a0b8acc928 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55a0b8acc340 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acc3b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a0b8acc438 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a0b8acc888 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8acc500 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8acc580 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8acc5f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8acc698 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8acc738 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a0b8afded8 <col:95, line:467:5>
|     |-CallExpr 0x55a0b8afde50 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afdd60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a0b8afdda0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afddb0 <col:37> 'const char *' lvalue ParmVar 0x55a0b8acc500 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afddd0 <col:46> 'int' lvalue ParmVar 0x55a0b8acc580 'flags' 'int'
|     | |-DeclRefExpr 0x55a0b8afddf0 <col:53> 'P' lvalue ParmVar 0x55a0b8acc5f8 'parser' 'P'
|     | |-DeclRefExpr 0x55a0b8afde10 <col:61> 'T' lvalue ParmVar 0x55a0b8acc698 'x' 'T &'
|     | `-DeclRefExpr 0x55a0b8afde30 <col:64> 'const V' lvalue ParmVar 0x55a0b8acc738 'default_value' 'const V &'
|     `-ReturnStmt 0x55a0b8afdec8 <line:466:9, col:17>
|       `-UnaryOperator 0x55a0b8afdeb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afdea0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad2510 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55a0b8acc9a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8acca28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8accaa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ad2470 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8accb70 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8accbe8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8accc88 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a0b8accd28 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a0b8afe080 <col:63, line:481:5>
|     `-ReturnStmt 0x55a0b8afe070 <line:480:9, col:47>
|       `-CallExpr 0x55a0b8afe028 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afdf08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afdf88 <col:21> 'const char *' lvalue ParmVar 0x55a0b8accb70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afdfa8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a0b8afdfc8 <col:33> 'P' lvalue ParmVar 0x55a0b8accbe8 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afdfe8 <col:41> 'T1' lvalue ParmVar 0x55a0b8accc88 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a0b8afe008 <col:45> 'T2' lvalue ParmVar 0x55a0b8accd28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a0b8ad2a98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55a0b8ad2588 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad2608 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8ad2688 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ad29f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8ad2750 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad27c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad2868 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a0b8ad2908 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a0b8afe220 <col:65, line:485:5>
|     `-ReturnStmt 0x55a0b8afe210 <line:484:9, col:55>
|       `-CallExpr 0x55a0b8afe1c8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afe0a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afe128 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ad2750 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afe148 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a0b8afe168 <col:41> 'P' lvalue ParmVar 0x55a0b8ad27c8 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afe188 <col:49> 'T1' lvalue ParmVar 0x55a0b8ad2868 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a0b8afe1a8 <col:53> 'T2' lvalue ParmVar 0x55a0b8ad2908 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a0b8ad3018 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55a0b8ad2b10 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad2b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8ad2c08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ad2f78 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8ad2cd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad2d48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad2de8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a0b8ad2e88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a0b8afe3c0 <col:65, line:489:5>
|     `-ReturnStmt 0x55a0b8afe3b0 <line:488:9, col:56>
|       `-CallExpr 0x55a0b8afe368 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afe248 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afe2c8 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ad2cd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afe2e8 <col:30> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
|         |-DeclRefExpr 0x55a0b8afe308 <col:42> 'P' lvalue ParmVar 0x55a0b8ad2d48 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afe328 <col:50> 'T1' lvalue ParmVar 0x55a0b8ad2de8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a0b8afe348 <col:54> 'T2' lvalue ParmVar 0x55a0b8ad2e88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a0b8ad3598 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55a0b8ad3090 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad3108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8ad3188 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ad34f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8ad3250 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad32c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad3368 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a0b8ad3408 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a0b8afe610 <col:66, line:493:5>
|     `-ReturnStmt 0x55a0b8afe600 <line:492:9, col:68>
|       `-CallExpr 0x55a0b8afe5b8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afe3e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afe468 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ad3250 'keyword' 'const char *'
|         |-BinaryOperator 0x55a0b8afe538 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a0b8afe4e8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a0b8afe4c8 <col:30> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a0b8afe520 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a0b8afe500 <col:42> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a0b8afe558 <col:54> 'P' lvalue ParmVar 0x55a0b8ad32c8 'parser' 'P'
|         |-DeclRefExpr 0x55a0b8afe578 <col:62> 'T1' lvalue ParmVar 0x55a0b8ad3368 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a0b8afe598 <col:66> 'T2' lvalue ParmVar 0x55a0b8ad3408 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a0b8ad3bf8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55a0b8ad3610 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad3688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8ad3708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ad3b58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8ad37d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad3850 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad38c8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad3968 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a0b8ad3a08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a0b8afe7a0 <col:74, line:498:5>
|     |-CallExpr 0x55a0b8afe718 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afe628 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a0b8afe668 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afe678 <col:30> 'const char *' lvalue ParmVar 0x55a0b8ad37d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afe698 <col:39> 'int' lvalue ParmVar 0x55a0b8ad3850 'flags' 'int'
|     | |-DeclRefExpr 0x55a0b8afe6b8 <col:46> 'P' lvalue ParmVar 0x55a0b8ad38c8 'parser' 'P'
|     | |-DeclRefExpr 0x55a0b8afe6d8 <col:54> 'T1' lvalue ParmVar 0x55a0b8ad3968 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55a0b8afe6f8 <col:58> 'T2' lvalue ParmVar 0x55a0b8ad3a08 'x2' 'T2 &'
|     `-ReturnStmt 0x55a0b8afe790 <line:497:9, col:17>
|       `-UnaryOperator 0x55a0b8afe778 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afe768 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad3f58 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55a0b8ad3c78 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad3eb8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a0b8ad3d30 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad3da8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8afe8e8 <col:52, line:509:5>
|     `-ReturnStmt 0x55a0b8afe8d8 <line:508:9, col:44>
|       `-CallExpr 0x55a0b8afe8a0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afe7d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afe840 <col:26> 'const char *' lvalue ParmVar 0x55a0b8ad3d30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8afe860 <col:35> 'int' 0
|         `-DeclRefExpr 0x55a0b8afe880 <col:38> 'P' lvalue ParmVar 0x55a0b8ad3da8 'parser' 'P'
|-FunctionTemplateDecl 0x55a0b8ad4258 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55a0b8ad3fc0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad41b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a0b8ad4070 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad40e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8afea28 <col:54, line:513:5>
|     `-ReturnStmt 0x55a0b8afea18 <line:512:9, col:52>
|       `-CallExpr 0x55a0b8afe9e0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afe910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afe980 <col:26> 'const char *' lvalue ParmVar 0x55a0b8ad4070 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afe9a0 <col:35> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a0b8afe9c0 <col:46> 'P' lvalue ParmVar 0x55a0b8ad40e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a0b8ad4558 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55a0b8ad42c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad44b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a0b8ad4370 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad43e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8afeb68 <col:54, line:517:5>
|     `-ReturnStmt 0x55a0b8afeb58 <line:516:9, col:53>
|       `-CallExpr 0x55a0b8afeb20 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afea50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afeac0 <col:26> 'const char *' lvalue ParmVar 0x55a0b8ad4370 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afeae0 <col:35> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int'
|         `-DeclRefExpr 0x55a0b8afeb00 <col:47> 'P' lvalue ParmVar 0x55a0b8ad43e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a0b8ad4858 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a0b8ad45c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad47b8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a0b8ad4670 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad46e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8afed58 <col:55, line:521:5>
|     `-ReturnStmt 0x55a0b8afed48 <line:520:9, col:65>
|       `-CallExpr 0x55a0b8afed10 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afeb90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afec00 <col:26> 'const char *' lvalue ParmVar 0x55a0b8ad4670 'keyword' 'const char *'
|         |-BinaryOperator 0x55a0b8afecd0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55a0b8afec80 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a0b8afec60 <col:35> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a0b8afecb8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a0b8afec98 <col:47> 'const int' lvalue Var 0x55a0b8ac7ec0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55a0b8afecf0 <col:59> 'P' lvalue ParmVar 0x55a0b8ad46e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a0b8ad4c28 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55a0b8ad48c0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad4b88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a0b8ad4970 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad49f0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad4a68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8afee98 <col:63, line:526:5>
|     |-CallExpr 0x55a0b8afee20 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afed70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55a0b8afedb0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afedc0 <col:35> 'const char *' lvalue ParmVar 0x55a0b8ad4970 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a0b8afede0 <col:44> 'int' lvalue ParmVar 0x55a0b8ad49f0 'flags' 'int'
|     | `-DeclRefExpr 0x55a0b8afee00 <col:51> 'P' lvalue ParmVar 0x55a0b8ad4a68 'parser' 'P'
|     `-ReturnStmt 0x55a0b8afee88 <line:525:9, col:17>
|       `-UnaryOperator 0x55a0b8afee70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8afee60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad5078 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55a0b8ad4c98 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad4d18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad4fd8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad4dd8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad4e50 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad4ef8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8afeff0 <col:58, line:541:5>
|     `-ReturnStmt 0x55a0b8afefe0 <line:540:9, col:39>
|       `-CallExpr 0x55a0b8afefa8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8afeec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8afef48 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ad4dd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8afef68 <col:30> 'P' lvalue ParmVar 0x55a0b8ad4e50 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8afef88 <col:38> 'T' lvalue ParmVar 0x55a0b8ad4ef8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad54c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55a0b8ad50e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad5168 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad5428 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad5228 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad52a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad5348 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8aff128 <col:60, line:545:5>
|     `-ReturnStmt 0x55a0b8aff118 <line:544:9, col:41>
|       `-CallExpr 0x55a0b8aff0e0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff080 <col:23> 'const char *' lvalue ParmVar 0x55a0b8ad5228 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8aff0a0 <col:32> 'P' lvalue ParmVar 0x55a0b8ad52a0 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8aff0c0 <col:40> 'T' lvalue ParmVar 0x55a0b8ad5348 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad5918 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55a0b8ad5538 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad55b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad5878 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad5678 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad56f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad5798 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8aff260 <col:60, line:549:5>
|     `-ReturnStmt 0x55a0b8aff250 <line:548:9, col:41>
|       `-CallExpr 0x55a0b8aff218 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff1b8 <col:23> 'const char *' lvalue ParmVar 0x55a0b8ad5678 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8aff1d8 <col:32> 'P' lvalue ParmVar 0x55a0b8ad56f0 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8aff1f8 <col:40> 'T' lvalue ParmVar 0x55a0b8ad5798 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad5d68 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a0b8ad5988 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad5a08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad5cc8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad5ac8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad5b40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad5be8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8aff398 <col:61, line:553:5>
|     `-ReturnStmt 0x55a0b8aff388 <line:552:9, col:42>
|       `-CallExpr 0x55a0b8aff350 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff2f0 <col:24> 'const char *' lvalue ParmVar 0x55a0b8ad5ac8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8aff310 <col:33> 'P' lvalue ParmVar 0x55a0b8ad5b40 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8aff330 <col:41> 'T' lvalue ParmVar 0x55a0b8ad5be8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad6248 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55a0b8ad5dd8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad5e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad61a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad5f18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad5f98 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad6010 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad60b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8aff510 <col:69, line:557:5>
|     `-ReturnStmt 0x55a0b8aff500 <line:556:9, col:46>
|       `-CallExpr 0x55a0b8aff4c0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff3c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff440 <col:21> 'const char *' lvalue ParmVar 0x55a0b8ad5f18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8aff460 <col:30> 'int' lvalue ParmVar 0x55a0b8ad5f98 'flags' 'int'
|         |-DeclRefExpr 0x55a0b8aff480 <col:37> 'P' lvalue ParmVar 0x55a0b8ad6010 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8aff4a0 <col:45> 'T' lvalue ParmVar 0x55a0b8ad60b8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad6558 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ad62c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad64b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a0b8ad6370 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad63e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8aff650 <col:56, line:571:5>
|     `-ReturnStmt 0x55a0b8aff640 <line:570:9, col:48>
|       `-CallExpr 0x55a0b8aff608 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff5a8 <col:30> 'const char *' lvalue ParmVar 0x55a0b8ad6370 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8aff5c8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55a0b8aff5e8 <col:42> 'P' lvalue ParmVar 0x55a0b8ad63e8 'parser' 'P'
|-FunctionTemplateDecl 0x55a0b8ad68e8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ad65c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ad6848 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a0b8ad6670 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad66f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad6768 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8aff820 <col:67, line:576:5>
|     |-CallExpr 0x55a0b8aff7a8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8aff668 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a0b8aff6a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8aff6b8 <col:39> 'const char *' lvalue ParmVar 0x55a0b8ad6670 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a0b8aff768 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a0b8aff718 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a0b8aff6d8 <col:48> 'int' lvalue ParmVar 0x55a0b8ad66f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a0b8aff750 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a0b8aff730 <col:56> 'const int' lvalue Var 0x55a0b8ac80b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55a0b8aff788 <col:68> 'P' lvalue ParmVar 0x55a0b8ad6768 'parser' 'P'
|     `-ReturnStmt 0x55a0b8aff810 <line:575:9, col:17>
|       `-UnaryOperator 0x55a0b8aff7f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8aff7e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad6d38 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ad6958 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad69d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad6c98 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad6a98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad6b10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad6bb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8aff990 <col:62, line:592:5>
|     `-ReturnStmt 0x55a0b8aff980 <line:591:9, col:51>
|       `-CallExpr 0x55a0b8aff940 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8aff850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8aff8c0 <col:30> 'const char *' lvalue ParmVar 0x55a0b8ad6a98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8aff8e0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55a0b8aff900 <col:42> 'P' lvalue ParmVar 0x55a0b8ad6b10 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8aff920 <col:50> 'T' lvalue ParmVar 0x55a0b8ad6bb8 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad7218 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ad6da8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad6e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad7178 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a0b8ad6ee8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad6f68 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad6fe0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad7088 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8affb88 <col:73, line:597:5>
|     |-CallExpr 0x55a0b8affb08 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8aff9a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a0b8aff9e8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8aff9f8 <col:39> 'const char *' lvalue ParmVar 0x55a0b8ad6ee8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a0b8affaa8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a0b8affa58 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a0b8affa18 <col:48> 'int' lvalue ParmVar 0x55a0b8ad6f68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a0b8affa90 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a0b8affa70 <col:56> 'const int' lvalue Var 0x55a0b8ac80b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a0b8affac8 <col:68> 'P' lvalue ParmVar 0x55a0b8ad6fe0 'parser' 'P'
|     | `-DeclRefExpr 0x55a0b8affae8 <col:76> 'T' lvalue ParmVar 0x55a0b8ad7088 'x' 'T &'
|     `-ReturnStmt 0x55a0b8affb78 <line:596:9, col:17>
|       `-UnaryOperator 0x55a0b8affb60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8affb50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad77c8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55a0b8ad7290 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad7308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad7728 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a0b8ad73c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad7440 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad7600 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a0b8affcf8 <col:65, line:614:5>
|     `-ReturnStmt 0x55a0b8affce8 <line:613:9, col:46>
|       `-CallExpr 0x55a0b8affca8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8affbb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8affc28 <col:25> 'const char *' lvalue ParmVar 0x55a0b8ad73c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8affc48 <col:34> 'int' 0
|         |-DeclRefExpr 0x55a0b8affc68 <col:37> 'P' lvalue ParmVar 0x55a0b8ad7440 'parser' 'P'
|         `-DeclRefExpr 0x55a0b8affc88 <col:45> 'Vector<T>' lvalue ParmVar 0x55a0b8ad7600 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a0b8ad7bf8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55a0b8ad7838 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ad7b58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55a0b8ad78f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad7a40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a0b8afff10 <col:55, line:618:5>
|     `-ReturnStmt 0x55a0b8afff00 <line:617:9, col:55>
|       `-CallExpr 0x55a0b8affec0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8affd20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8affd90 <col:25> 'const char *' lvalue ParmVar 0x55a0b8ad78f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a0b8affdb0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55a0b8affe80 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a0b8affea0 <col:54> 'Vector<T>' lvalue ParmVar 0x55a0b8ad7a40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a0b8ad81c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55a0b8ad7c60 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad7cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad8128 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a0b8ad7d98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad7e18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad7e90 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ad7fe0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a0b8b00108 <col:76, line:623:5>
|     |-CallExpr 0x55a0b8b00088 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a0b8afff28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55a0b8afff68 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55a0b8afff78 <col:34> 'const char *' lvalue ParmVar 0x55a0b8ad7d98 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a0b8b00028 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a0b8afffd8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a0b8afff98 <col:43> 'int' lvalue ParmVar 0x55a0b8ad7e18 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a0b8b00010 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a0b8affff0 <col:51> 'const int' lvalue Var 0x55a0b8ac80b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a0b8b00048 <col:63> 'P' lvalue ParmVar 0x55a0b8ad7e90 'parser' 'P'
|     | `-DeclRefExpr 0x55a0b8b00068 <col:71> 'Vector<T>' lvalue ParmVar 0x55a0b8ad7fe0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55a0b8b000f8 <line:622:9, col:17>
|       `-UnaryOperator 0x55a0b8b000e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8b000d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad8708 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55a0b8ad8240 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ad82b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ad8668 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55a0b8ad8378 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad83f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad8540 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a0b8b00370 <col:66, line:627:5>
|     `-ReturnStmt 0x55a0b8b00360 <line:626:9, col:59>
|       `-CallExpr 0x55a0b8b00320 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a0b8b00138 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a0b8b001a8 <col:25> 'const char *' lvalue ParmVar 0x55a0b8ad8378 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a0b8b001c8 <col:34> 'int' lvalue ParmVar 0x55a0b8ad83f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55a0b8b002e0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a0b8b00300 <col:58> 'Vector<T>' lvalue ParmVar 0x55a0b8ad8540 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55a0b8ad8798 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55a0b8b003f0 <col:25, line:633:5>
|   `-ReturnStmt 0x55a0b8b003e0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8b003c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a0b8b00398 <col:16> 'const bool' lvalue ->_status 0x55a0b8ae4968
|         `-CXXThisExpr 0x55a0b8b00388 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a0b8ad8918 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55a0b8ad8850 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55a0b8b004d8 <col:27, line:639:5>
|   |-BinaryOperator 0x55a0b8b00480 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a0b8b00408 <col:9> 'bool' lvalue ParmVar 0x55a0b8ad8850 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a0b8b00468 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b8b00438 <col:13> 'bool' lvalue ->_status 0x55a0b8ae4968
|   |     `-CXXThisExpr 0x55a0b8b00428 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a0b8b004c8 <line:638:9, col:17>
|     `-UnaryOperator 0x55a0b8b004b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8b004a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a0b8ad8a98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a0b8ad89d8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55a0b8b005c8 <col:39, line:644:5>
|   |-BinaryOperator 0x55a0b8b00570 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a0b8b004f8 <col:9> 'bool' lvalue ParmVar 0x55a0b8ad89d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a0b8b00558 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b8b00528 <col:13> 'const bool' lvalue ->_status 0x55a0b8ae4968
|   |     `-CXXThisExpr 0x55a0b8b00518 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a0b8b005b8 <line:643:9, col:17>
|     `-UnaryOperator 0x55a0b8b005a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8b00590 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a0b8ad8b60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55a0b8b00670 <col:30, line:651:5>
|   `-ReturnStmt 0x55a0b8b00660 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55a0b8b00648 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a0b8b00618 <col:16> 'bool' lvalue ->_read_status 0x55a0b8abe290
|         `-ImplicitCastExpr 0x55a0b8b005f8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55a0b8b005e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a0b8ad8ca8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55a0b8ad8c18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55a0b8b00778 <col:32, line:658:5>
|   |-BinaryOperator 0x55a0b8b00720 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a0b8b00688 <col:9> 'bool' lvalue ParmVar 0x55a0b8ad8c18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a0b8b00708 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b8b006d8 <col:13> 'bool' lvalue ->_read_status 0x55a0b8abe290
|   |     `-ImplicitCastExpr 0x55a0b8b006b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a0b8b006a8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a0b8b00768 <line:657:9, col:17>
|     `-UnaryOperator 0x55a0b8b00750 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8b00740 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a0b8ad8df8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a0b8ad8d68 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55a0b8b00888 <col:44, line:663:5>
|   |-BinaryOperator 0x55a0b8b00830 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a0b8b00798 <col:9> 'bool' lvalue ParmVar 0x55a0b8ad8d68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a0b8b00818 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a0b8b007e8 <col:13> 'bool' lvalue ->_read_status 0x55a0b8abe290
|   |     `-ImplicitCastExpr 0x55a0b8b007c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a0b8b007b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a0b8b00878 <line:662:9, col:17>
|     `-UnaryOperator 0x55a0b8b00860 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b8b00850 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a0b8ad8ec0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55a0b8ad8f88 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55a0b8ad9050 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55a0b8ad9118 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55a0b8ad9428 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55a0b8ad91b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ad9388 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55a0b8ad9298 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8b00c40 <col:19, line:706:5>
|     `-IfStmt 0x55a0b8b00c18 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55a0b8b00988 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55a0b8b00b48 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55a0b8b00b18 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55a0b8b00ad8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55a0b8b009e0 <col:42> '<bound member function type>' ->simple_slot 0x55a0b8afb6d0
|       |     | `-CXXThisExpr 0x55a0b8b009d0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55a0b8b00a78 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55a0b8b00a30 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55a0b8858398
|       |     | `-DeclRefExpr 0x55a0b8b00a10 <col:55> 'T' lvalue ParmVar 0x55a0b8ad9298 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55a0b8b00ab8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55a0b8b00c08 <line:705:13, col:34>
|         `-CallExpr 0x55a0b8b00be0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55a0b8b00b68 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55a0b8b00bc0 <col:33> 'T' lvalue ParmVar 0x55a0b8ad9298 'x' 'T &'
|-FunctionTemplateDecl 0x55a0b8ad96f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55a0b8ad9488 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ad9658 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55a0b8ad9568 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55a0b8b01020 <col:31, line:717:5>
|     |-DeclStmt 0x55a0b8b00d80 <line:713:9, col:23>
|     | `-VarDecl 0x55a0b8b00c68 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55a0b8b00d58 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a0b8b00ce0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a0b8b00d38 <col:21> 'T' lvalue ParmVar 0x55a0b8ad9568 'x' 'T &'
|     |-IfStmt 0x55a0b8b00fd0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55a0b8b00e78 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55a0b8b00fb0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a0b8b00f50 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a0b8b00ee0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|     |   | `-DeclRefExpr 0x55a0b8b00ec0 <col:14> 'T *' lvalue Var 0x55a0b8b00c68 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55a0b8b00f90 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55a0b8b01008 <line:716:9, col:16>
|       `-DeclRefExpr 0x55a0b8b00fe8 <col:16> 'T *' lvalue Var 0x55a0b8b00c68 's' 'T *'
|-FunctionTemplateDecl 0x55a0b8ad9b08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55a0b8ad9758 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ad97d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a0b8ad9a68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ad98b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55a0b8ad9958 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55a0b8b01330 <col:37, line:726:5>
|     |-IfStmt 0x55a0b8b012c0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55a0b8b012e0 <line:723:13, col:26>
|     | | `-VarDecl 0x55a0b8b01088 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55a0b8b01178 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55a0b8b01100 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55a0b8b01158 <col:25> 'T' lvalue ParmVar 0x55a0b8ad98b8 'x' 'T &'
|     | |-DeclRefExpr 0x55a0b8b011a0 <col:16> 'T *' lvalue Var 0x55a0b8b01088 's' 'T *'
|     | `-BinaryOperator 0x55a0b8b012a0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a0b8b01250 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a0b8b011e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|     |   | `-DeclRefExpr 0x55a0b8b011c0 <col:14> 'T *' lvalue Var 0x55a0b8b01088 's' 'T *'
|     |   `-DeclRefExpr 0x55a0b8b01280 <col:18> 'const V' lvalue ParmVar 0x55a0b8ad9958 'value' 'const V &'
|     `-ReturnStmt 0x55a0b8b01320 <line:725:9, col:17>
|       `-UnaryOperator 0x55a0b8b01308 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b8b012f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a0b8ad9f08 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55a0b8ad9b70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a0b8ad9e68 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55a0b8ad9c20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ad9ca0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ad9d48 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55a0b8b02150 <col:65, line:737:5>
|     |-DeclStmt 0x55a0b8b013c8 <line:732:9, col:26>
|     | `-VarDecl 0x55a0b8b01360 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a0b8b02118 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55a0b8b02138 <line:733:13, col:58>
|       | `-VarDecl 0x55a0b8b013f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a0b8b015d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a0b8b015a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a0b8b01588 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a0b8b01568 <col:26, col:58> 'String' (CXXTemporary 0x55a0b8b01568)
|       |           `-CXXMemberCallExpr 0x55a0b8b014f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a0b8b01468 <col:26> '<bound member function type>' ->find 0x55a0b8af93b8
|       |             | `-CXXThisExpr 0x55a0b8b01458 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a0b8b01530 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b01498 <col:31> 'const char *' lvalue ParmVar 0x55a0b8ad9c20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a0b8b01548 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b014b8 <col:40> 'int' lvalue ParmVar 0x55a0b8ad9ca0 'flags' 'int'
|       |             `-DeclRefExpr 0x55a0b8b014d8 <col:47> 'Args::Slot *' lvalue Var 0x55a0b8b01360 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a0b8b01688 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a0b8b01670 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a0b8b01650 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a0b8b01620 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |       `-ImplicitCastExpr 0x55a0b8b01608 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a0b8b015e8 <col:20> 'String' lvalue Var 0x55a0b8b013f0 'str' 'String'
|       `-CompoundStmt 0x55a0b8b020f8 <col:61, line:736:9>
|         |-DeclStmt 0x55a0b8b01b40 <line:734:13, col:76>
|         | `-VarDecl 0x55a0b8b016d8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a0b8b01b10 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a0b8b01a80 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a0b8b01ac8 <col:60> 'T' lvalue ParmVar 0x55a0b8ad9d48 'variable' 'T &'
|         |     `-UnaryOperator 0x55a0b8b01af8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a0b8b01ae8 <col:71> 'Args *' this
|         `-CallExpr 0x55a0b8b020c8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55a0b8b01b68 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|           | `-CXXThisExpr 0x55a0b8b01b58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a0b8b02088 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a0b8b01b98 <col:23> 'T *' lvalue Var 0x55a0b8b016d8 's' 'T *'
|           | `-CallExpr 0x55a0b8b02048 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a0b8b01e20 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55a0b8b01f20 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55a0b8b01f40 <col:86> 'String' lvalue Var 0x55a0b8b013f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a0b8b01ff0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a0b8b01f80 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|           |   | `-DeclRefExpr 0x55a0b8b01f60 <col:92> 'T *' lvalue Var 0x55a0b8b016d8 's' 'T *'
|           |   `-UnaryOperator 0x55a0b8b02030 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a0b8b02020 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55a0b8b020a8 <col:103> 'Args::Slot *' lvalue Var 0x55a0b8b01360 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae07e0 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a0b8ad9f78 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ad9ff8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a0b8ada3b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ada0b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ada138 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ada1d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55a0b8ada278 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55a0b8b02ff0 <col:88, line:745:5>
|     |-DeclStmt 0x55a0b8b021e8 <line:741:9, col:26>
|     | `-VarDecl 0x55a0b8b02180 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b02408 <line:742:9, col:55>
|     | `-VarDecl 0x55a0b8b02210 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a0b8b023f0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a0b8b023c0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a0b8b023a8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a0b8b02388 <col:22, col:54> 'String' (CXXTemporary 0x55a0b8b02388)
|     |           `-CXXMemberCallExpr 0x55a0b8b02318 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a0b8b02288 <col:22> '<bound member function type>' ->find 0x55a0b8af93b8
|     |             | `-CXXThisExpr 0x55a0b8b02278 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a0b8b02350 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a0b8b022b8 <col:27> 'const char *' lvalue ParmVar 0x55a0b8ada0b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a0b8b02368 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a0b8b022d8 <col:36> 'int' lvalue ParmVar 0x55a0b8ada138 'flags' 'int'
|     |             `-DeclRefExpr 0x55a0b8b022f8 <col:43> 'Args::Slot *' lvalue Var 0x55a0b8b02180 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b027e0 <line:743:9, col:72>
|     | `-VarDecl 0x55a0b8b02458 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a0b8b027b0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a0b8b02720 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a0b8b02768 <col:56> 'T' lvalue ParmVar 0x55a0b8ada1d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a0b8b02798 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a0b8b02788 <col:67> 'Args *' this
|     `-CallExpr 0x55a0b8b02fc0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55a0b8b02808 <col:9> '<bound member function type>' ->postparse 0x55a0b8af95c8
|       | `-CXXThisExpr 0x55a0b8b027f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a0b8b02f80 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a0b8b02838 <col:19> 'T *' lvalue Var 0x55a0b8b02458 's' 'T *'
|       | `-ParenExpr 0x55a0b8b02f60 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55a0b8b02f30 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a0b8b02f18 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a0b8b02f00 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a0b8b02ee0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a0b8b02eb0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |     |       `-ImplicitCastExpr 0x55a0b8b02e98 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a0b8b02858 <col:25> 'String' lvalue Var 0x55a0b8b02210 'str' 'String'
|       |     |-CallExpr 0x55a0b8b02d08 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a0b8b02ae0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55a0b8b02be0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55a0b8b02c00 <col:89> 'String' lvalue Var 0x55a0b8b02210 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a0b8b02cb0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a0b8b02c40 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|       |     | | `-DeclRefExpr 0x55a0b8b02c20 <col:95> 'T *' lvalue Var 0x55a0b8b02458 's' 'T *'
|       |     | `-UnaryOperator 0x55a0b8b02cf0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a0b8b02ce0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55a0b8b02e78 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55a0b8b02e58 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a0b8b02e28 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a0b8b02dd8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a0b8b02d68 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|       |         | | `-DeclRefExpr 0x55a0b8b02d48 <col:109> 'T *' lvalue Var 0x55a0b8b02458 's' 'T *'
|       |         | `-DeclRefExpr 0x55a0b8b02e08 <col:113> 'const V' lvalue ParmVar 0x55a0b8ada278 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a0b8b02e48 <col:120> 'bool' true
|       `-DeclRefExpr 0x55a0b8b02fa0 <col:128> 'Args::Slot *' lvalue Var 0x55a0b8b02180 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae0d18 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55a0b8ae0858 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ae08d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ae0c78 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a0b8ae0998 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae0a18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae0a90 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ae0b38 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55a0b8b05e08 <col:75, line:754:5>
|     |-DeclStmt 0x55a0b8b03098 <line:749:9, col:26>
|     | `-VarDecl 0x55a0b8b03030 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a0b8b05dd0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55a0b8b05df0 <line:750:13, col:58>
|       | `-VarDecl 0x55a0b8b030c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a0b8b032a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a0b8b03270 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a0b8b03258 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a0b8b03238 <col:26, col:58> 'String' (CXXTemporary 0x55a0b8b03238)
|       |           `-CXXMemberCallExpr 0x55a0b8b031c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a0b8b03138 <col:26> '<bound member function type>' ->find 0x55a0b8af93b8
|       |             | `-CXXThisExpr 0x55a0b8b03128 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a0b8b03200 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b03168 <col:31> 'const char *' lvalue ParmVar 0x55a0b8ae0998 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a0b8b03218 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b03188 <col:40> 'int' lvalue ParmVar 0x55a0b8ae0a18 'flags' 'int'
|       |             `-DeclRefExpr 0x55a0b8b031a8 <col:47> 'Args::Slot *' lvalue Var 0x55a0b8b03030 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a0b8b03358 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a0b8b03340 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a0b8b03320 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a0b8b032f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |       `-ImplicitCastExpr 0x55a0b8b032d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a0b8b032b8 <col:20> 'String' lvalue Var 0x55a0b8b030c0 'str' 'String'
|       `-CompoundStmt 0x55a0b8b05db0 <col:61, line:753:9>
|         |-DeclStmt 0x55a0b8b05950 <line:751:13, col:63>
|         | `-VarDecl 0x55a0b8b033a8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a0b8b05920 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a0b8b05890 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a0b8b058d8 <col:47> 'T' lvalue ParmVar 0x55a0b8ae0b38 'variable' 'T &'
|         |     `-UnaryOperator 0x55a0b8b05908 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a0b8b058f8 <col:58> 'Args *' this
|         `-CallExpr 0x55a0b8b05d80 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55a0b8b05978 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|           | `-CXXThisExpr 0x55a0b8b05968 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a0b8b05d40 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a0b8b059a8 <col:23> 'T *' lvalue Var 0x55a0b8b033a8 's' 'T *'
|           | `-CallExpr 0x55a0b8b05d00 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a0b8b05b90 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a0b8b05bd8 <col:56> 'P' lvalue ParmVar 0x55a0b8ae0a90 'parser' 'P'
|           |   |-DeclRefExpr 0x55a0b8b05bf8 <col:64> 'String' lvalue Var 0x55a0b8b030c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a0b8b05ca8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a0b8b05c38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|           |   | `-DeclRefExpr 0x55a0b8b05c18 <col:70> 'T *' lvalue Var 0x55a0b8b033a8 's' 'T *'
|           |   `-UnaryOperator 0x55a0b8b05ce8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a0b8b05cd8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55a0b8b05d60 <col:81> 'Args::Slot *' lvalue Var 0x55a0b8b03030 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae1378 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a0b8ae0d90 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a0b8ae0e08 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55a0b8ae0e88 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a0b8ae12d8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a0b8ae0f50 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae0fd0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae1048 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ae10e8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55a0b8ae1188 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55a0b8b06b98 <col:98, line:762:5>
|     |-DeclStmt 0x55a0b8b05ea0 <line:758:9, col:26>
|     | `-VarDecl 0x55a0b8b05e38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b060c0 <line:759:9, col:55>
|     | `-VarDecl 0x55a0b8b05ec8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a0b8b060a8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a0b8b06078 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a0b8b06060 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a0b8b06040 <col:22, col:54> 'String' (CXXTemporary 0x55a0b8b06040)
|     |           `-CXXMemberCallExpr 0x55a0b8b05fd0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a0b8b05f40 <col:22> '<bound member function type>' ->find 0x55a0b8af93b8
|     |             | `-CXXThisExpr 0x55a0b8b05f30 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a0b8b06008 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a0b8b05f70 <col:27> 'const char *' lvalue ParmVar 0x55a0b8ae0f50 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a0b8b06020 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a0b8b05f90 <col:36> 'int' lvalue ParmVar 0x55a0b8ae0fd0 'flags' 'int'
|     |             `-DeclRefExpr 0x55a0b8b05fb0 <col:43> 'Args::Slot *' lvalue Var 0x55a0b8b05e38 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b064e0 <line:760:9, col:59>
|     | `-VarDecl 0x55a0b8b06118 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a0b8b064b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a0b8b06420 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a0b8b06468 <col:43> 'T' lvalue ParmVar 0x55a0b8ae10e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a0b8b06498 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a0b8b06488 <col:54> 'Args *' this
|     `-CallExpr 0x55a0b8b06b68 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55a0b8b06508 <col:9> '<bound member function type>' ->postparse 0x55a0b8af95c8
|       | `-CXXThisExpr 0x55a0b8b064f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a0b8b06b28 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a0b8b06538 <col:19> 'T *' lvalue Var 0x55a0b8b06118 's' 'T *'
|       | `-ParenExpr 0x55a0b8b06b08 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55a0b8b06ad8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a0b8b06ac0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a0b8b06aa8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a0b8b06a88 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a0b8b06a58 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |     |       `-ImplicitCastExpr 0x55a0b8b06a40 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a0b8b06558 <col:25> 'String' lvalue Var 0x55a0b8b05ec8 'str' 'String'
|       |     |-CallExpr 0x55a0b8b068b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a0b8b06740 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55a0b8b06788 <col:59> 'P' lvalue ParmVar 0x55a0b8ae1048 'parser' 'P'
|       |     | |-DeclRefExpr 0x55a0b8b067a8 <col:67> 'String' lvalue Var 0x55a0b8b05ec8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a0b8b06858 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a0b8b067e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|       |     | | `-DeclRefExpr 0x55a0b8b067c8 <col:73> 'T *' lvalue Var 0x55a0b8b06118 's' 'T *'
|       |     | `-UnaryOperator 0x55a0b8b06898 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a0b8b06888 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55a0b8b06a20 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55a0b8b06a00 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a0b8b069d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a0b8b06980 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a0b8b06910 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|       |         | | `-DeclRefExpr 0x55a0b8b068f0 <col:87> 'T *' lvalue Var 0x55a0b8b06118 's' 'T *'
|       |         | `-DeclRefExpr 0x55a0b8b069b0 <col:91> 'const V' lvalue ParmVar 0x55a0b8ae1188 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a0b8b069f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55a0b8b06b48 <col:106> 'Args::Slot *' lvalue Var 0x55a0b8b05e38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae19e8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55a0b8ae13f8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ae1478 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a0b8ae14f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a0b8ae1948 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a0b8ae15c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae1640 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae16b8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ae1758 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55a0b8ae17f8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55a0b8b07b78 <col:60, line:773:5>
|     |-DeclStmt 0x55a0b8b06c40 <line:767:9, col:26>
|     | `-VarDecl 0x55a0b8b06bd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a0b8b07b40 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55a0b8b07b60 <line:768:13, col:58>
|       | `-VarDecl 0x55a0b8b06c68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a0b8b06e48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a0b8b06e18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a0b8b06e00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a0b8b06de0 <col:26, col:58> 'String' (CXXTemporary 0x55a0b8b06de0)
|       |           `-CXXMemberCallExpr 0x55a0b8b06d70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a0b8b06ce0 <col:26> '<bound member function type>' ->find 0x55a0b8af93b8
|       |             | `-CXXThisExpr 0x55a0b8b06cd0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a0b8b06da8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b06d10 <col:31> 'const char *' lvalue ParmVar 0x55a0b8ae15c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a0b8b06dc0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b06d30 <col:40> 'int' lvalue ParmVar 0x55a0b8ae1640 'flags' 'int'
|       |             `-DeclRefExpr 0x55a0b8b06d50 <col:47> 'Args::Slot *' lvalue Var 0x55a0b8b06bd8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a0b8b06f00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a0b8b06ee8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a0b8b06ec8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a0b8b06e98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |       `-ImplicitCastExpr 0x55a0b8b06e80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a0b8b06e60 <col:20> 'String' lvalue Var 0x55a0b8b06c68 'str' 'String'
|       `-CompoundStmt 0x55a0b8b07b18 <col:61, line:772:9>
|         |-DeclStmt 0x55a0b8b07240 <line:769:13, col:66>
|         | `-VarDecl 0x55a0b8b06f58 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55a0b8b07210 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a0b8b07180 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a0b8b071c8 <col:49> 'T1' lvalue ParmVar 0x55a0b8ae1758 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55a0b8b071f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a0b8b071e8 <col:61> 'Args *' this
|         |-DeclStmt 0x55a0b8b075b0 <line:770:13, col:66>
|         | `-VarDecl 0x55a0b8b072c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55a0b8b07580 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a0b8b074f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a0b8b07538 <col:49> 'T2' lvalue ParmVar 0x55a0b8ae17f8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55a0b8b07568 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a0b8b07558 <col:61> 'Args *' this
|         `-CallExpr 0x55a0b8b07ae8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55a0b8b075d8 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|           | `-CXXThisExpr 0x55a0b8b075c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a0b8b07aa8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55a0b8b07648 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55a0b8b07608 <col:23> 'T1 *' lvalue Var 0x55a0b8b06f58 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55a0b8b07628 <col:29> 'T2 *' lvalue Var 0x55a0b8b072c8 's2' 'T2 *'
|           | `-CallExpr 0x55a0b8b07a60 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a0b8b07830 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a0b8b07878 <col:63> 'P' lvalue ParmVar 0x55a0b8ae16b8 'parser' 'P'
|           |   |-DeclRefExpr 0x55a0b8b07898 <col:71> 'String' lvalue Var 0x55a0b8b06c68 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a0b8b07948 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a0b8b078d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|           |   | `-DeclRefExpr 0x55a0b8b078b8 <col:77> 'T1 *' lvalue Var 0x55a0b8b06f58 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55a0b8b07a08 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a0b8b07998 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|           |   | `-DeclRefExpr 0x55a0b8b07978 <col:82> 'T2 *' lvalue Var 0x55a0b8b072c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55a0b8b07a48 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a0b8b07a38 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55a0b8b07ac8 <col:94> 'Args::Slot *' lvalue Var 0x55a0b8b06bd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae1dd8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55a0b8ae1a68 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ae1d38 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a0b8ae1b20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae1ba0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae1c18 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8b08090 <col:67, line:780:5>
|     |-DeclStmt 0x55a0b8b07c10 <line:777:9, col:26>
|     | `-VarDecl 0x55a0b8b07ba8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a0b8b08058 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55a0b8b08078 <line:778:13, col:58>
|       | `-VarDecl 0x55a0b8b07c38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a0b8b07e18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a0b8b07de8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a0b8b07dd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a0b8b07db0 <col:26, col:58> 'String' (CXXTemporary 0x55a0b8b07db0)
|       |           `-CXXMemberCallExpr 0x55a0b8b07d40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a0b8b07cb0 <col:26> '<bound member function type>' ->find 0x55a0b8af93b8
|       |             | `-CXXThisExpr 0x55a0b8b07ca0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a0b8b07d78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b07ce0 <col:31> 'const char *' lvalue ParmVar 0x55a0b8ae1b20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a0b8b07d90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a0b8b07d00 <col:40> 'int' lvalue ParmVar 0x55a0b8ae1ba0 'flags' 'int'
|       |             `-DeclRefExpr 0x55a0b8b07d20 <col:47> 'Args::Slot *' lvalue Var 0x55a0b8b07ba8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a0b8b07ed0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a0b8b07eb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a0b8b07e98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a0b8b07e68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|       |       `-ImplicitCastExpr 0x55a0b8b07e50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a0b8b07e30 <col:20> 'String' lvalue Var 0x55a0b8b07c38 'str' 'String'
|       `-CallExpr 0x55a0b8b08028 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55a0b8b07ef8 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|         | `-CXXThisExpr 0x55a0b8b07ee8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55a0b8b07fd8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55a0b8b07f48 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55a0b8b07f28 <col:23> 'P' lvalue ParmVar 0x55a0b8ae1c18 'parser' 'P'
|         | |-DeclRefExpr 0x55a0b8b07f90 <col:36> 'String' lvalue Var 0x55a0b8b07c38 'str' 'String'
|         | `-UnaryOperator 0x55a0b8b07fc0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55a0b8b07fb0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55a0b8b08008 <col:49> 'Args::Slot *' lvalue Var 0x55a0b8b07ba8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a0b8ae2178 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ae1e48 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a0b8ae20d8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a0b8ae1f00 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae1f80 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae1ff8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55a0b8b08a00 <col:71, line:792:5>
|     |-DeclStmt 0x55a0b8b08128 <line:784:9, col:26>
|     | `-VarDecl 0x55a0b8b080c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b081f8 <line:785:9, col:29>
|     | `-VarDecl 0x55a0b8b08158 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a0b8b081e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a0b8b081c0 <col:28> 'int' 1
|     |-WhileStmt 0x55a0b8b088b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55a0b8b088d0 <line:786:16, col:61>
|     | | `-VarDecl 0x55a0b8b08220 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a0b8b08400 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a0b8b083d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a0b8b083b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a0b8b08398 <col:29, col:61> 'String' (CXXTemporary 0x55a0b8b08398)
|     | |           `-CXXMemberCallExpr 0x55a0b8b08328 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a0b8b08298 <col:29> '<bound member function type>' ->find 0x55a0b8af93b8
|     | |             | `-CXXThisExpr 0x55a0b8b08288 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a0b8b08360 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b082c8 <col:34> 'const char *' lvalue ParmVar 0x55a0b8ae1f00 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a0b8b08378 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b082e8 <col:43> 'int' lvalue ParmVar 0x55a0b8ae1f80 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a0b8b08308 <col:50> 'Args::Slot *' lvalue Var 0x55a0b8b080c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a0b8b084b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a0b8b084a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a0b8b08480 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a0b8b08450 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|     | |       `-ImplicitCastExpr 0x55a0b8b08438 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a0b8b08418 <col:23> 'String' lvalue Var 0x55a0b8b08220 'str' 'String'
|     | `-CompoundStmt 0x55a0b8b08888 <col:64, line:790:9>
|     |   |-CallExpr 0x55a0b8b08610 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55a0b8b084e0 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|     |   | | `-CXXThisExpr 0x55a0b8b084d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a0b8b085c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a0b8b08530 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a0b8b08510 <col:23> 'P' lvalue ParmVar 0x55a0b8ae1ff8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a0b8b08578 <col:36> 'String' lvalue Var 0x55a0b8b08220 'str' 'String'
|     |   | | `-UnaryOperator 0x55a0b8b085a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a0b8b08598 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55a0b8b085f0 <col:49> 'Args::Slot *' lvalue Var 0x55a0b8b080c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a0b8b087a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a0b8b08640 <col:13> 'int' lvalue Var 0x55a0b8b08158 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a0b8b08790 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a0b8b08770 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a0b8b086d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a0b8b086b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a0b8b086a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a0b8b08660 <col:28> 'int' lvalue Var 0x55a0b8b08158 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a0b8b08680 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a0b8b08758 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a0b8b08728 <col:49> 'bool' lvalue ->_read_status 0x55a0b8abe290
|     |   |         `-ImplicitCastExpr 0x55a0b8b08708 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a0b8b086f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a0b8b08858 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a0b8b087c8 <col:13> 'int' lvalue ParmVar 0x55a0b8ae1f80 'flags' 'int'
|     |     `-UnaryOperator 0x55a0b8b08840 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a0b8b08828 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a0b8b08808 <col:23> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a0b8b089e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a0b8b08918 <col:9> 'bool' lvalue ->_read_status 0x55a0b8abe290
|       | `-ImplicitCastExpr 0x55a0b8b088f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a0b8b088e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a0b8b089c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a0b8b089a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a0b8b08988 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a0b8b08948 <col:25> 'int' lvalue Var 0x55a0b8b08158 'read_status' 'int'
|           `-IntegerLiteral 0x55a0b8b08968 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a0b8ae2658 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a0b8ae21e8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ae2268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ae25b8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a0b8ae2328 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae23a8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae2420 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ae24c8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55a0b8b09990 <col:84, line:805:5>
|     |-DeclStmt 0x55a0b8b08aa8 <line:796:9, col:26>
|     | `-VarDecl 0x55a0b8b08a40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b08b78 <line:797:9, col:29>
|     | `-VarDecl 0x55a0b8b08ad8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a0b8b08b60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a0b8b08b40 <col:28> 'int' 1
|     |-DeclStmt 0x55a0b8b08eb0 <line:798:9, col:71>
|     | `-VarDecl 0x55a0b8b08bc8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a0b8b08e80 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a0b8b08df0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55a0b8b08e38 <col:55> 'T' lvalue ParmVar 0x55a0b8ae24c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a0b8b08e68 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a0b8b08e58 <col:66> 'Args *' this
|     |-WhileStmt 0x55a0b8b09840 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55a0b8b09860 <line:799:16, col:61>
|     | | `-VarDecl 0x55a0b8b08ed8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a0b8b090b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a0b8b09088 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a0b8b09070 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a0b8b09050 <col:29, col:61> 'String' (CXXTemporary 0x55a0b8b09050)
|     | |           `-CXXMemberCallExpr 0x55a0b8b08fe0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a0b8b08f50 <col:29> '<bound member function type>' ->find 0x55a0b8af93b8
|     | |             | `-CXXThisExpr 0x55a0b8b08f40 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a0b8b09018 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b08f80 <col:34> 'const char *' lvalue ParmVar 0x55a0b8ae2328 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a0b8b09030 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b08fa0 <col:43> 'int' lvalue ParmVar 0x55a0b8ae23a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a0b8b08fc0 <col:50> 'Args::Slot *' lvalue Var 0x55a0b8b08a40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a0b8b09170 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a0b8b09158 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a0b8b09138 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a0b8b09108 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|     | |       `-ImplicitCastExpr 0x55a0b8b090f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a0b8b090d0 <col:23> 'String' lvalue Var 0x55a0b8b08ed8 'str' 'String'
|     | `-CompoundStmt 0x55a0b8b09818 <col:64, line:803:9>
|     |   |-CallExpr 0x55a0b8b095a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55a0b8b09198 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|     |   | | `-CXXThisExpr 0x55a0b8b09188 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55a0b8b09560 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55a0b8b091c8 <col:23> 'T *' lvalue Var 0x55a0b8b08bc8 's' 'T *'
|     |   | | `-CallExpr 0x55a0b8b09520 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55a0b8b093b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55a0b8b093f8 <col:56> 'P' lvalue ParmVar 0x55a0b8ae2420 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55a0b8b09418 <col:64> 'String' lvalue Var 0x55a0b8b08ed8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55a0b8b094c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55a0b8b09458 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|     |   | |   | `-DeclRefExpr 0x55a0b8b09438 <col:70> 'T *' lvalue Var 0x55a0b8b08bc8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55a0b8b09508 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55a0b8b094f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55a0b8b09580 <col:81> 'Args::Slot *' lvalue Var 0x55a0b8b08a40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a0b8b09738 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a0b8b095d0 <col:13> 'int' lvalue Var 0x55a0b8b08ad8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a0b8b09720 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a0b8b09700 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a0b8b09668 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a0b8b09648 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a0b8b09630 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a0b8b095f0 <col:28> 'int' lvalue Var 0x55a0b8b08ad8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a0b8b09610 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a0b8b096e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a0b8b096b8 <col:49> 'bool' lvalue ->_read_status 0x55a0b8abe290
|     |   |         `-ImplicitCastExpr 0x55a0b8b09698 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a0b8b09688 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a0b8b097e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a0b8b09758 <col:13> 'int' lvalue ParmVar 0x55a0b8ae23a8 'flags' 'int'
|     |     `-UnaryOperator 0x55a0b8b097d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a0b8b097b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a0b8b09798 <col:23> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a0b8b09970 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a0b8b098a8 <col:9> 'bool' lvalue ->_read_status 0x55a0b8abe290
|       | `-ImplicitCastExpr 0x55a0b8b09888 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a0b8b09878 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a0b8b09950 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a0b8b09930 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a0b8b09918 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a0b8b098d8 <col:25> 'int' lvalue Var 0x55a0b8b08ad8 'read_status' 'int'
|           `-IntegerLiteral 0x55a0b8b098f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a0b8ae2c38 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55a0b8ae26d0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a0b8ae2748 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a0b8ae2b98 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a0b8ae2808 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a0b8ae2888 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55a0b8ae2900 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55a0b8ae2a50 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55a0b8b0a798 <col:87, line:821:5>
|     |-DeclStmt 0x55a0b8b09a40 <line:809:9, col:26>
|     | `-VarDecl 0x55a0b8b099d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a0b8b09b10 <line:810:9, col:29>
|     | `-VarDecl 0x55a0b8b09a70 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a0b8b09af8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a0b8b09ad8 <col:28> 'int' 1
|     |-DeclStmt 0x55a0b8b09d58 <line:811:9, col:38>
|     | `-VarDecl 0x55a0b8b09c40 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55a0b8b09d30 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a0b8b09cb8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a0b8b09d10 <col:29> 'Vector<T>' lvalue ParmVar 0x55a0b8ae2a50 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55a0b8b0a648 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55a0b8b0a668 <line:812:16, col:61>
|     | | `-VarDecl 0x55a0b8b09d80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a0b8b09f60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a0b8b09f30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a0b8b09f18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a0b8b09ef8 <col:29, col:61> 'String' (CXXTemporary 0x55a0b8b09ef8)
|     | |           `-CXXMemberCallExpr 0x55a0b8b09e88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a0b8b09df8 <col:29> '<bound member function type>' ->find 0x55a0b8af93b8
|     | |             | `-CXXThisExpr 0x55a0b8b09de8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a0b8b09ec0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b09e28 <col:34> 'const char *' lvalue ParmVar 0x55a0b8ae2808 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a0b8b09ed8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a0b8b09e48 <col:43> 'int' lvalue ParmVar 0x55a0b8ae2888 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a0b8b09e68 <col:50> 'Args::Slot *' lvalue Var 0x55a0b8b099d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a0b8b0a018 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a0b8b0a000 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a0b8b09fe0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a0b8b09fb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a0b881ed08
|     | |       `-ImplicitCastExpr 0x55a0b8b09f98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a0b8b09f78 <col:23> 'String' lvalue Var 0x55a0b8b09d80 'str' 'String'
|     | `-CompoundStmt 0x55a0b8b0a610 <col:64, line:819:9>
|     |   |-DeclStmt 0x55a0b8b0a0d8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55a0b8b0a040 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55a0b8b0a0b8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55a0b8b0a258 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55a0b8b0a100 <col:13> '<bound member function type>' ->postparse 0x55a0b8af95c8
|     |   | | `-CXXThisExpr 0x55a0b8b0a0f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a0b8b0a200 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a0b8b0a150 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a0b8b0a130 <col:23> 'P' lvalue ParmVar 0x55a0b8ae2900 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a0b8b0a198 <col:36> 'String' lvalue Var 0x55a0b8b09d80 'str' 'String'
|     |   | | |-DeclRefExpr 0x55a0b8b0a1b8 <col:41> 'T' lvalue Var 0x55a0b8b0a040 'sx' 'T'
|     |   | | `-UnaryOperator 0x55a0b8b0a1e8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a0b8b0a1d8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55a0b8b0a238 <col:53> 'Args::Slot *' lvalue Var 0x55a0b8b099d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55a0b8b0a3b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55a0b8b0a2e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55a0b8b0a2b8 <col:17> 'bool' lvalue ->_read_status 0x55a0b8abe290
|     |   | |   `-ImplicitCastExpr 0x55a0b8b0a298 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55a0b8b0a288 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55a0b8b0a388 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55a0b8b0a320 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55a0b8b0a300 <col:17> 'Vector<T> *' lvalue Var 0x55a0b8b09c40 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55a0b8b0a368 <col:30> 'T' lvalue Var 0x55a0b8b0a040 'sx' 'T'
|     |   |-BinaryOperator 0x55a0b8b0a530 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a0b8b0a3c8 <col:13> 'int' lvalue Var 0x55a0b8b09a70 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a0b8b0a518 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a0b8b0a4f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a0b8b0a460 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a0b8b0a440 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a0b8b0a428 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a0b8b0a3e8 <col:28> 'int' lvalue Var 0x55a0b8b09a70 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a0b8b0a408 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a0b8b0a4e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a0b8b0a4b0 <col:49> 'bool' lvalue ->_read_status 0x55a0b8abe290
|     |   |         `-ImplicitCastExpr 0x55a0b8b0a490 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a0b8b0a480 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a0b8b0a5e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a0b8b0a550 <col:13> 'int' lvalue ParmVar 0x55a0b8ae2888 'flags' 'int'
|     |     `-UnaryOperator 0x55a0b8b0a5c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a0b8b0a5b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a0b8b0a590 <col:23> 'const int' lvalue Var 0x55a0b8ac7dc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a0b8b0a778 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a0b8b0a6b0 <col:9> 'bool' lvalue ->_read_status 0x55a0b8abe290
|       | `-ImplicitCastExpr 0x55a0b8b0a690 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a0b8b0a680 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a0b8b0a758 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a0b8b0a738 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a0b8b0a720 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a0b8b0a6e0 <col:25> 'int' lvalue Var 0x55a0b8b09a70 'read_status' 'int'
|           `-IntegerLiteral 0x55a0b8b0a700 <col:40> 'int' 1
|-AccessSpecDecl 0x55a0b8ae2cb0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55a0b8ae2cd8 prev 0x55a0b8ac60c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55a0b8ae2dd0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55a0b8ae2ec0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55a0b8b0a7d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55a0b8ae2fb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55a0b8b0a7e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55a0b8ae30b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55a0b8ae3160 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55a0b8ae3208 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a0b8ae3208
| | `-ParmVarDecl 0x55a0b8ae3318 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55a0b8ae3ad8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a0b8ae3ad8
|   `-ParmVarDecl 0x55a0b8ae3be8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55a0b8ae3388 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55a0b8ae34e8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55a0b8ae36e0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55a0b8ae3590 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55a0b8ae3608 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55a0b8b0a9c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55a0b8ae3998 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55a0b8b0a830 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a0b8b0a7f0 <col:20> 'void *' lvalue ParmVar 0x55a0b8ae3590 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55a0b8ae3a00 '_slot' 'char *'
| | | `-CXXNewExpr 0x55a0b8b0a8b8 <col:32, col:45> 'char *' array Function 0x55a0b863dfe8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55a0b8b0a8a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55a0b8b0a870 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55a0b8ae3608 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55a0b8ae3a60 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55a0b8b0a980 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a0b8b0a940 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55a0b8ae3608 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55a0b8b0aa40 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55a0b8ae37e0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55a0b8ae2fb0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55a0b8b0aac8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55a0b8b0aaa8 <line:840:13, col:22> 'void' array Function 0x55a0b863e348 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55a0b8b0aa90 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55a0b8b0aa60 <col:22> 'char *' lvalue ->_slot 0x55a0b8ae3a00
| |         `-CXXThisExpr 0x55a0b8b0aa50 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55a0b8ae38e0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55a0b8ae30b0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55a0b8b0acb8 <col:22, line:844:9>
| |   `-CallExpr 0x55a0b8b0ac20 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55a0b8b0ac08 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55a0b8b0abe8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a0b87703d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55a0b8b0ac58 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55a0b8b0ab38 <col:20> 'void *' lvalue ->_ptr 0x55a0b8ae3998
| |     |   `-CXXThisExpr 0x55a0b8b0ab28 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55a0b8b0ac88 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55a0b8b0ac70 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55a0b8b0ab78 <col:26> 'char *' lvalue ->_slot 0x55a0b8ae3a00
| |     |     `-CXXThisExpr 0x55a0b8b0ab68 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55a0b8b0aca0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55a0b8b0abb8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55a0b8ae3a60
| |         `-CXXThisExpr 0x55a0b8b0aba8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55a0b8ae3998 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55a0b8ae3a00 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55a0b8ae3a60 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55a0b8ae3c58 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a0b8ae3c58
| | `-ParmVarDecl 0x55a0b8ae3d68 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55a0b8ae3e08 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a0b8ae3e08
|   `-ParmVarDecl 0x55a0b8ae3f18 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55a0b8ae40b8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55a0b8ae3f88 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55a0b8ae4028 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55a0b8ae4350 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55a0b8ae4548 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55a0b8ae4418 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55a0b8ae46c8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55a0b8b0acf0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55a0b8b0acd0 <col:20> 'T *' lvalue ParmVar 0x55a0b8ae4418 'ptr' 'T *'
|   | `-CompoundStmt 0x55a0b8b0ad40 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55a0b8ae4618 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55a0b8ae30b0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55a0b8b0aef0 <col:22, line:857:9>
|   |   `-CallExpr 0x55a0b8b0aec0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55a0b8b0ad50 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55a0b8807ae8 0x55a0b87b0998
|   |     |-CXXOperatorCallExpr 0x55a0b8b0ae50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55a0b8b0ade0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a0b8a0f3d8 0x55a0b8a0eff8 0x55a0b8a0ec28 0x55a0b8a0e848 0x55a0b8a0e468 0x55a0b8a0e098
|   |     | `-MemberExpr 0x55a0b8b0adb0 <col:29> 'T *' lvalue ->_ptr 0x55a0b8ae46c8
|   |     |   `-CXXThisExpr 0x55a0b8b0ada0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55a0b8b0ae90 <col:35> 'T' lvalue ->_slot 0x55a0b8ae4728
|   |       `-CXXThisExpr 0x55a0b8b0ae80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55a0b8ae46c8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55a0b8ae4728 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55a0b8ae4790 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55a0b8ae4890 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55a0b8ae48e0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b8ae4870 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55a0b8ae4850 <col:31> 'int' 48
|-FieldDecl 0x55a0b8ae4908 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55a0b8ae4968 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55a0b8ae49c8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55a0b8ae4b00 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55a0b8af8c60 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55a0b8af8cc0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55a0b8af8d70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55a0b8af8f98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55a0b8af8ea0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55a0b8af90e8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55a0b8af9058 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55a0b8af93b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55a0b8af91a8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55a0b8af9228 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55a0b8af92d0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55a0b8af95c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55a0b8af9480 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55a0b8af94f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55a0b8af9698 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55a0b8af97e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55a0b8af9750 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55a0b8afb4a0 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55a0b8af98a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55a0b8af9928 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55a0b8af99d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55a0b8af9a88 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55a0b8afb6d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55a0b8afb578 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55a0b8afb5f0 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55a0b8afb9e8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55a0b8afb780 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55a0b8afb948 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55a0b8afb858 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b30f40 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8b31058 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55a0b8b310e8 <col:25, col:31> col:25 public
|-TypedefDecl 0x55a0b8b31120 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x55a0b84ea2d0 'void'
|-CXXConstructorDecl 0x55a0b8b31268 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55a0b8b31190 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55a0b8b324d0 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b8b31e00 'flags_' 'int'
| | `-ImplicitCastExpr 0x55a0b8b32570 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8b32530 <col:45> 'int' lvalue ParmVar 0x55a0b8b31190 'flags' 'int'
| `-CompoundStmt 0x55a0b8b325b8 <col:52, col:53>
|-CXXMethodDecl 0x55a0b8b31528 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55a0b8b31328 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a0b8b313c8 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55a0b8b31440 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a0b8b324f0 <col:88> 'const ArgContext' lvalue Var 0x55a0b8b30ed8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a0b8b32798 <col:100, line:210:5>
|   `-ReturnStmt 0x55a0b8b32788 <line:209:9, col:46>
|     `-CallExpr 0x55a0b8b32730 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55a0b8b32718 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b8b326d0 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55a0b8b320c8 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55a0b8b32630 <col:22> 'const String' lvalue ParmVar 0x55a0b8b31328 'str' 'const String &'
|       |-DeclRefExpr 0x55a0b8b32650 <col:27> 'EtherAddress' lvalue ParmVar 0x55a0b8b313c8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55a0b8b32670 <col:34> 'const ArgContext' lvalue ParmVar 0x55a0b8b31440 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55a0b8b32770 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55a0b8b326a0 <col:40> 'int' lvalue ->flags_ 0x55a0b8b31e00
|           `-CXXThisExpr 0x55a0b8b32690 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55a0b8b317c8 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55a0b8b315f0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a0b8b31670 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55a0b8b316e8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a0b8b32510 <col:89> 'const ArgContext' lvalue Var 0x55a0b8b30ed8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a0b8b32970 <col:101, line:213:5>
|   `-ReturnStmt 0x55a0b8b32960 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55a0b8b32928 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55a0b8b328f8 <col:9> '<bound member function type>' ->parse 0x55a0b8b31528
|       | `-CXXThisExpr 0x55a0b8b328e8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55a0b8b32818 <col:15> 'const String' lvalue ParmVar 0x55a0b8b315f0 'str' 'const String &'
|       |-UnaryOperator 0x55a0b8b328b0 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55a0b8b32880 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55a0b8b32868 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55a0b8b32838 <col:54> 'unsigned char *' lvalue ParmVar 0x55a0b8b31670 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55a0b8b328c8 <col:62> 'const ArgContext' lvalue ParmVar 0x55a0b8b316e8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55a0b8b31a68 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55a0b8b31890 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55a0b8b31908 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55a0b8b31980 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55a0b8b32b58 <col:82, line:216:5>
|   `-ReturnStmt 0x55a0b8b32b48 <line:215:9, col:53>
|     `-CallExpr 0x55a0b8b32af0 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55a0b8b32ad8 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b8b32a90 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55a0b8b323f8 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55a0b8b329f0 <col:29> 'const String' lvalue ParmVar 0x55a0b8b31890 'str' 'const String &'
|       |-DeclRefExpr 0x55a0b8b32a10 <col:34> 'EtherAddress' lvalue ParmVar 0x55a0b8b31908 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55a0b8b32a30 <col:41> 'Args' lvalue ParmVar 0x55a0b8b31980 'args' 'Args &'
|       `-ImplicitCastExpr 0x55a0b8b32b30 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55a0b8b32a60 <col:47> 'int' lvalue ->flags_ 0x55a0b8b31e00
|           `-CXXThisExpr 0x55a0b8b32a50 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55a0b8b31d08 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55a0b8b31b30 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55a0b8b31bb0 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55a0b8b31c28 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55a0b8b32d30 <col:83, line:219:5>
|   `-ReturnStmt 0x55a0b8b32d20 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55a0b8b32ce8 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55a0b8b32cb8 <col:9> '<bound member function type>' ->direct_parse 0x55a0b8b31a68
|       | `-CXXThisExpr 0x55a0b8b32ca8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55a0b8b32bd8 <col:22> 'const String' lvalue ParmVar 0x55a0b8b31b30 'str' 'const String &'
|       |-UnaryOperator 0x55a0b8b32c70 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55a0b8b32c40 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55a0b8b32c28 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55a0b8b32bf8 <col:61> 'unsigned char *' lvalue ParmVar 0x55a0b8b31bb0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55a0b8b32c88 <col:69> 'Args' lvalue ParmVar 0x55a0b8b31c28 'args' 'Args &'
|-AccessSpecDecl 0x55a0b8b31dc0 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55a0b8b31e00 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55a0b8b320c8 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55a0b8b31e60 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a0b8b31ed8 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55a0b8b31f50 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55a0b8b31fd0 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55a0b8b323f8 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55a0b8b32198 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55a0b8b32210 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55a0b8b32288 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55a0b8b32308 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x55a0b8b5a688 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55a0b8b5a688
| `-ParmVarDecl 0x55a0b8b5a798 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x55a0b8b5a838 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8b5a948 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x55a0b8b31e00 'flags_' 'int'
| | `-ImplicitCastExpr 0x55a0b8b5b1c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b8b5b180 <col:7> 'int' xvalue .flags_ 0x55a0b8b31e00
| |     `-CXXStaticCastExpr 0x55a0b8b5b150 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8b5b120 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55a0b8b5a948 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x55a0b8b5b210 <col:7>
`-CXXDestructorDecl 0x55a0b8b5aa10 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8a36ce0 prev 0x55a0b8a135a0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55a0b8a36e18 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55a0b8a36ea8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55a0b8a36f50 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a36ff0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a37048 <col:30>
|-CXXMethodDecl 0x55a0b8a37098 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a37138 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a37190 <col:30>
|-CXXMethodDecl 0x55a0b8a371e0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a372a8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a37370 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a37488 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55a0b8a37550 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55a0b8a375f0 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a37648 <col:30>
|-CXXMethodDecl 0x55a0b8a376b8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55a0b8a37758 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a377b0 <col:30>
|-CXXMethodDecl 0x55a0b8a37858 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55a0b8a378f8 <col:20>
| `-OptimizeNoneAttr 0x55a0b8a37950 <col:30>
|-CXXMethodDecl 0x55a0b8a379a0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b8a37ab8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55a0b8a37bd8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55a0b8a37cf8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55a0b8a37dc0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55a0b8a37e60 <col:62> "" ""
|-AccessSpecDecl 0x55a0b8a37ed0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55a0b8a37f30 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55a0b8a38b28 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55a0b8a38d50 <col:29, col:31>
|-CXXMethodDecl 0x55a0b8a37ff8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55a0b8a38138 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55a0b8a380a8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55a0b8a38230 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55a0b8a38d60 <col:23, col:25>
|-CXXMethodDecl 0x55a0b8a383e8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55a0b8a38320 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55a0b8a386b8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a0b8a384a0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a0b8a38518 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a0b8a38590 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b8a38848 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55a0b8a38780 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55a0b8a38940 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55a0b8a389a8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55a0b8a389a8
  `-ParmVarDecl 0x55a0b8a38ab8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8729210 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a0b8729328 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55a0b8729410 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55a0b87293f0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55a0b87293b8 <col:22> 'int' 4
|-FieldDecl 0x55a0b87294b8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55a0b8729498 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55a0b8729460 <col:21> 'int' 4
|-FieldDecl 0x55a0b8729518 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55a0b8729578 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b87295d8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b8729638 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b8729698 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55a0b87296f8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55a0b8729758 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b87297c8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55a0b8729838 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b89cd2d8 prev 0x55a0b8a13390 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a0b89cd3d0 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55a0b89cd470 <line:25:5, col:14> col:14 referenced th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b89cd4d0 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b89cd550 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55a0b89cd5b0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55a0b89cd658 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55a0b89cd638 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55a0b89cd600 <col:26> 'int' 4
|-FieldDecl 0x55a0b89cd700 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x55a0b89cd6e0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55a0b89cd6a8 <col:23> 'int' 4
|-FieldDecl 0x55a0b89cd760 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55a0b89cd7c0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55a0b89cd820 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55a0b89cd880 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b884dbc0 prev 0x55a0b87b59a8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b884dcb8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55a0b884dd48 <col:19, col:25> col:19 public
|-TypedefDecl 0x55a0b884dd80 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55a0b8640050 'uninitialized_type'
|   `-CXXRecord 0x55a0b863ffb8 'uninitialized_type'
|-CXXConstructorDecl 0x55a0b884de40 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b88515c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b8851588 <col:10> 'int' 0
| `-CompoundStmt 0x55a0b8851610 <col:13, line:22:5>
|-CXXConstructorDecl 0x55a0b884df90 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55a0b884df00 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8851660 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8851620 <col:10> 'unsigned int' lvalue ParmVar 0x55a0b884df00 'x' 'unsigned int'
| `-CompoundStmt 0x55a0b88516a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55a0b884e0e8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55a0b884e058 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8851710 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55a0b88516f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55a0b88516b8 <col:10> 'int' lvalue ParmVar 0x55a0b884e058 'x' 'int'
| `-CompoundStmt 0x55a0b8851758 <col:13, line:31:5>
|-CXXConstructorDecl 0x55a0b884e240 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55a0b884e1b0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b88517c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55a0b88517a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55a0b8851768 <col:10> 'unsigned long' lvalue ParmVar 0x55a0b884e1b0 'x' 'unsigned long'
| `-CompoundStmt 0x55a0b8851808 <col:13, line:35:5>
|-CXXConstructorDecl 0x55a0b884e398 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55a0b884e308 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8851870 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55a0b8851858 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55a0b8851818 <col:10> 'long' lvalue ParmVar 0x55a0b884e308 'x' 'long'
| `-CompoundStmt 0x55a0b88518b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55a0b884e558 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55a0b884e468 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8851938 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b88518e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55a0b8711cb0
| |     `-DeclRefExpr 0x55a0b88518c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55a0b884e468 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55a0b8851980 <col:20, line:44:5>
|-CXXConstructorDecl 0x55a0b884e6e8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55a0b884e620 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55a0b8851ae8 <col:51, line:56:5>
|   `-BinaryOperator 0x55a0b8851ac8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55a0b88519a0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55a0b8851520
|     | `-CXXThisExpr 0x55a0b8851990 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55a0b8851ab0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55a0b8851a98 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55a0b8851a78 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55a0b8851a48 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55a0b8851a30 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55a0b88519d0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55a0b884e620 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55a0b884e838 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55a0b884e7a8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55a0b884e9e8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55a0b884e928 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55a0b8851b58 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55a0b8851b30 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55a0b8851b00 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55a0b884e928 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55a0b884eb78 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55a0b884eab0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55a0b884ec68 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55a0b8852b18 <col:46, line:83:5>
|   `-ReturnStmt 0x55a0b8852b08 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55a0b8852af0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55a0b8852ac0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b8852978 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55a0b8852860 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55a0b8852748 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55a0b8851b80 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55a0b884ed58 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55a0b8852bc8 <col:31, line:88:5>
|   `-ReturnStmt 0x55a0b8852bb8 <line:87:2, col:10>
|     `-UnaryOperator 0x55a0b8852ba0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55a0b8852b88 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55a0b8852b70 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55a0b8852b40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55a0b8851520
|             `-CXXThisExpr 0x55a0b8852b30 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55a0b884ee18 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55a0b8852c48 <col:34, line:93:5>
|   `-ReturnStmt 0x55a0b8852c38 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8852c20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55a0b8852bf0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55a0b8851520
|         `-CXXThisExpr 0x55a0b8852be0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55a0b884eee8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55a0b8852cc8 <col:38, line:101:5>
|   `-ReturnStmt 0x55a0b8852cb8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8852ca0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55a0b8852c70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55a0b8851520
|         `-CXXThisExpr 0x55a0b8852c60 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55a0b884efb8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55a0b8852f98 <col:38, line:108:5>
|   `-ReturnStmt 0x55a0b8852f88 <line:107:2, col:58>
|     `-BinaryOperator 0x55a0b8852f68 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55a0b8852e80 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55a0b8852e60 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55a0b8852e48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55a0b8852cf0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55a0b8851520
|       |   |   `-CXXThisExpr 0x55a0b8852ce0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55a0b8852e20 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55a0b8852e08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a0b8852d88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55a0b871d1a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55a0b8852d68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55a0b8852f40 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55a0b8852f28 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55a0b8852f08 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55a0b871d1a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55a0b8852ee8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55a0b884f078 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55a0b8853208 <col:39, line:112:5>
|   `-ReturnStmt 0x55a0b88531f8 <line:111:2, col:56>
|     `-BinaryOperator 0x55a0b88531d8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55a0b88530f0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55a0b88530d0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55a0b88530b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55a0b8852fc0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55a0b8851520
|       |   |   `-CXXThisExpr 0x55a0b8852fb0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55a0b8853090 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55a0b8853078 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a0b8853058 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55a0b871d1a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55a0b8853038 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55a0b88531b0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55a0b8853198 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55a0b8853178 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55a0b871d1a8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55a0b8853158 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55a0b884f1a8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55a0b884f2b0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55a0b8850320 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55a0b8850410 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a0b88504d0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b8850598 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55a0b8850798 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55a0b8850648 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55a0b88506c0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55a0b8850918 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55a0b8850858 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55a0b8850a60 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55a0b88509d0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55a0b8850c08 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55a0b8850b18 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55a0b8850d50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55a0b8850cc0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55a0b8850e98 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55a0b8850e08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55a0b8850f60 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55a0b8851020 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55a0b8851198 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55a0b88510d0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55a0b8851260 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55a0b8851348 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55a0b88513f0 <col:51> "" ""
|-TypedefDecl 0x55a0b8851490 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55a0b87b5a40 'IPAddress'
|   `-CXXRecord 0x55a0b884dbc0 'IPAddress'
|-AccessSpecDecl 0x55a0b88514e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55a0b8851520 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b8851bc8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55a0b8851bc8
| `-ParmVarDecl 0x55a0b8851cd8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55a0b8851d78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8851e88 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55a0b8851520 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55a0b8852a68 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b8852a20 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55a0b8851520
| |     `-CXXStaticCastExpr 0x55a0b88529f0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b88529c0 <col:7> 'IPAddress' lvalue ParmVar 0x55a0b8851e88 '' 'IPAddress &&'
| `-CompoundStmt 0x55a0b8852ab0 <col:7>
`-CXXDestructorDecl 0x55a0b8852778 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b89e4fd0 prev 0x55a0b89dbe10 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b89e50c8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55a0b89e5168 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55a0b89ebf30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b89ec318 <col:11>
|-CXXConstructorDecl 0x55a0b89ec010 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b89ec0f8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a0b89eca60 <col:11>
|-CXXConstructorDecl 0x55a0b89ec198 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b89ec2a8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55a0b89ee2b8 <col:11>
|-CXXDestructorDecl 0x55a0b89ed5c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a0b86f4248 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b86f4358 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a0b86f4c20 <col:11>
|   `-ReturnStmt 0x55a0b86f4c10 <col:11>
|     `-UnaryOperator 0x55a0b86f4bf8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b86f4be8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55a0b86f43c8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b86f43c8
  `-ParmVarDecl 0x55a0b86f44d8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b89dafc8 prev 0x55a0b89dacd8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b89db0c0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55a0b89db150 <col:19, col:25> col:19 public
|-TypedefDecl 0x55a0b89db188 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55a0b8640420 'int32_t' sugar
|   |-Typedef 0x55a0b8553268 'int32_t'
|   `-TypedefType 0x55a0b852c3b0 '__int32_t' sugar
|     |-Typedef 0x55a0b852bfc8 '__int32_t'
|     `-BuiltinType 0x55a0b84ea370 'int'
|-TypedefDecl 0x55a0b89db1f0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55a0b86405e0 'int64_t' sugar
|   |-Typedef 0x55a0b85532d0 'int64_t'
|   `-TypedefType 0x55a0b852c4d0 '__int64_t' sugar
|     |-Typedef 0x55a0b852c0a8 '__int64_t'
|     `-BuiltinType 0x55a0b84ea390 'long'
|-EnumDecl 0x55a0b89db248 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55a0b89db3c0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55a0b89db3a0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55a0b89db378 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55a0b89db360 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55a0b89db330 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55a0b89db4b8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55a0b89db498 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55a0b89db470 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55a0b89db458 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55a0b89db430 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55a0b89db410 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55a0b89db508 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55a0b89db610 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbb60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db5f0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55a0b89db5d0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55a0b89db6a0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbb78 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db680 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55a0b89db660 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55a0b89db730 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbb90 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db710 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a0b89db6f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55a0b89db7c0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbba8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db7a0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55a0b89db780 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55a0b89db850 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbbc0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db830 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a0b89db810 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55a0b89db8e0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbbd8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db8c0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55a0b89db8a0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55a0b89db970 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbbf0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89db950 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55a0b89db930 <col:26> 'int' EnumConstant 0x55a0b89db610 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55a0b89dba40 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55a0b89dbc08 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89dba20 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55a0b89dba00 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55a0b89db9c0 <col:27> 'int' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55a0b89db9e0 <col:44> 'int' EnumConstant 0x55a0b89db8e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55a0b89dbb10 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55a0b89dbc20 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b89dbaf0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55a0b89dbad0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55a0b89dba90 <col:27> 'int' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55a0b89dbab0 <col:44> 'int' EnumConstant 0x55a0b89db7c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55a0b89dbc38 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55a0b89dbd40 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55a0b89dbd90 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b89dbd20 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55a0b89dbd00 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55a0b89dbdb8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55a0b8640050 'uninitialized_type'
|   `-CXXRecord 0x55a0b863ffb8 'uninitialized_type'
|-CXXRecordDecl 0x55a0b89dbe10 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55a0b89dbf20 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ec328 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ec448 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55a0b89ec400 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55a0b89ec390 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89ec380 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55a0b89ec3c0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55a0b89ec430 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55a0b89ec3e0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55a0b89dc168 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89dbfe0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55a0b89dc058 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7c60 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7c40 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ec460 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ec5b0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55a0b89ec538 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55a0b89ec4c8 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89ec4b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89ec580 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a0b89ec568 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a0b89ec4f8 <col:16> 'long' lvalue ParmVar 0x55a0b89dbfe0 'sec' 'long'
|     `-ImplicitCastExpr 0x55a0b89ec598 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b89ec518 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89dc058 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b89dc3c8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89dc238 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55a0b89dc2b0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7c98 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7c78 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ec5c8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ec700 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55a0b89ec6a0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55a0b89ec630 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89ec620 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89ec6d0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b89ec660 <col:16> 'int' lvalue ParmVar 0x55a0b89dc238 'sec' 'int'
|     `-ImplicitCastExpr 0x55a0b89ec6e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b89ec680 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89dc2b0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b89dc628 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89dc498 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55a0b89dc510 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7cd0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7cb0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ec718 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ec868 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55a0b89ec7f0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55a0b89ec780 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89ec770 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89ec838 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a0b89ec820 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a0b89ec7b0 <col:16> 'unsigned long' lvalue ParmVar 0x55a0b89dc498 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55a0b89ec850 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b89ec7d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89dc510 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b89dd7c0 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89dc6f8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55a0b89dc770 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7d08 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7ce8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ec880 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ec9d0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55a0b89ec958 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55a0b89ec8e8 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89ec8d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89ec9a0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55a0b89ec988 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a0b89ec918 <col:16> 'unsigned int' lvalue ParmVar 0x55a0b89dc6f8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55a0b89ec9b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55a0b89ec938 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89dc770 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55a0b89dd920 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55a0b89dd890 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55a0b89ddab8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55a0b89dd9f8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55a0b89ddce8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55a0b89ddbf0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55a0b89dde98 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55a0b89dddd8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89eca70 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55a0b89ec9e8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55a0b89dddd8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55a0b89ecad0 <col:19, line:214:5>
|-CXXConstructorDecl 0x55a0b89de068 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55a0b89ddfa8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ecae0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a0b89ecb90 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55a0b89ecb68 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55a0b89ecb38 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55a0b89ddfa8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55a0b89de258 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55a0b89de1d0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55a0b89dad70 'Timestamp'
|   | `-CXXRecord 0x55a0b89dafc8 'Timestamp'
|   `-ParenType 0x55a0b89de170 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55a0b89de140 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55a0b89db310 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55a0b89db188 'seconds_type'
|         `-TypedefType 0x55a0b8640420 'int32_t' sugar
|           |-Typedef 0x55a0b8553268 'int32_t'
|           `-TypedefType 0x55a0b852c3b0 '__int32_t' sugar
|             |-Typedef 0x55a0b852bfc8 '__int32_t'
|             `-BuiltinType 0x55a0b84ea370 'int'
|-CXXConversionDecl 0x55a0b89de398 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a0b89de468 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55a0b89ecc98 <col:37, line:231:5>
|   `-ReturnStmt 0x55a0b89ecc88 <line:227:9, col:23>
|     `-BinaryOperator 0x55a0b89ecc68 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55a0b89ecc38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a0b89ecbe8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55a0b89e5168
|       |   `-MemberExpr 0x55a0b89ecbb8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|       |     `-CXXThisExpr 0x55a0b89ecba8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a0b89ecc50 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55a0b89ecc18 <col:23> 'int' 0
|-CXXMethodDecl 0x55a0b89de528 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55a0b89de5e8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b89de6a8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b89de768 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b89de828 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55a0b89de998 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55a0b89de8d8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55a0b89deae0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a0b89dea50 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89deba8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a0b89dec48 <col:54> "" ""
|-CXXMethodDecl 0x55a0b89decd8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a0b89ded78 <col:54> "" ""
|-CXXMethodDecl 0x55a0b89dee08 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55a0b89deea8 <col:54> "" ""
|-CXXMethodDecl 0x55a0b89defa8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55a0b89df078 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55a0b89df1a8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55a0b89df2a0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55a0b89df3d8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a0b89eceb0 <col:39, line:271:5>
|   `-ReturnStmt 0x55a0b89ecea0 <line:267:9, col:61>
|     `-CallExpr 0x55a0b89ece40 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55a0b89ece28 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b89eccb0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a0b89e6448 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55a0b89ece70 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a0b89ecd10 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55a0b89e5168
|       |   `-MemberExpr 0x55a0b89ecce0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|       |     `-CXXThisExpr 0x55a0b89eccd0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a0b89ece88 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55a0b89ecdb0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55a0b89ecd80 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55a0b89ecd40 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55a0b89ecd98 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55a0b89ecd60 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db8e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89df498 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a0b89ed070 <col:39, line:279:5>
|   `-ReturnStmt 0x55a0b89ed060 <line:275:9, col:61>
|     `-CallExpr 0x55a0b89ed000 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55a0b89ecfe8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b89ecec8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a0b89e6448 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55a0b89ed030 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a0b89ecf28 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55a0b89e5168
|       |   `-MemberExpr 0x55a0b89ecef8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|       |     `-CXXThisExpr 0x55a0b89ecee8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a0b89ed048 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55a0b89ecfc8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55a0b89ecf98 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55a0b89ecf58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55a0b89ecfb0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55a0b89ecf78 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db7c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89df558 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55a0b89ed208 <col:39, line:287:5>
|   `-ReturnStmt 0x55a0b89ed1f8 <line:283:9, col:53>
|     `-BinaryOperator 0x55a0b89ed1d8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55a0b89ed1a8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55a0b89ed0c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55a0b89e5168
|       |   `-MemberExpr 0x55a0b89ed098 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|       |     `-CXXThisExpr 0x55a0b89ed088 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55a0b89ed1c0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55a0b89ed188 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a0b89ed168 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89ed138 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89ed0f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db610 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89ed150 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89ed118 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89df648 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a0b89ee4a0 <col:40, line:293:5>
|   |-DeclStmt 0x55a0b89ed350 <line:291:9, col:48>
|   | `-VarDecl 0x55a0b89ed230 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55a0b89ed330 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55a0b89ed2d8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55a0b89ed2a8 <col:22> '<bound member function type>' ->subsec 0x55a0b89de5e8
|   |     |   `-CXXThisExpr 0x55a0b89ed298 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55a0b89ed318 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55a0b89ed2f8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89dba40 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a0b89ee490 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55a0b89ee478 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89ee448 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89ee430 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55a0b89ee410 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55a0b89ee3e0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55a0b89ee178 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55a0b89ee160 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55a0b89ed368 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55a0b89ed230 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55a0b89ee380 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55a0b89ee368 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55a0b89ee338 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55a0b89ee190 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55a0b89ee100 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55a0b89ee0e8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55a0b89ee098 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55a0b89daf18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55a0b89ee038 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55a0b89ed398 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55a0b89ed388 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55a0b89ee080 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55a0b89ee068 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55a0b89ed858 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55a0b89ed3c0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55a0b89ed450 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55a0b89ed420 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55a0b89ed3e0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89dba40 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55a0b89ed438 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55a0b89ed400 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55a0b89ed230 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55a0b89ee3b0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55a0b89ee148 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55a0b89ee138 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55a0b89df708 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a0b89ee9f8 <col:40, line:302:5>
|   |-DeclStmt 0x55a0b89ee5f0 <line:297:9, col:48>
|   | `-VarDecl 0x55a0b89ee4d0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55a0b89ee5d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55a0b89ee578 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55a0b89ee548 <col:22> '<bound member function type>' ->subsec 0x55a0b89de5e8
|   |     |   `-CXXThisExpr 0x55a0b89ee538 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55a0b89ee5b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55a0b89ee598 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89dbb10 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a0b89ee9e8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55a0b89ee9d0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89ee9a0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89ee988 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55a0b89ee968 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55a0b89ee938 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55a0b89ee860 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55a0b89ee848 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55a0b89ee608 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55a0b89ee4d0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55a0b89ee8d8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55a0b89ee8c0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55a0b89ee890 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55a0b89ee878 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55a0b89ee7e8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55a0b89ee7d0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55a0b89ee7b0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55a0b89daf18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55a0b89ee750 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55a0b89ee638 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55a0b89ee628 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55a0b89ee798 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55a0b89ee780 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55a0b89ee710 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55a0b89ee660 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55a0b89ee6f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55a0b89ee6c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55a0b89ee680 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89dbb10 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55a0b89ee6d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55a0b89ee6a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55a0b89ee4d0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55a0b89ee908 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55a0b89ee830 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55a0b89ee820 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55a0b89df7c8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55a0b89eea80 <col:40, line:306:5>
|   `-ReturnStmt 0x55a0b89eea70 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55a0b89eea40 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55a0b89eea28 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a0b89eea18 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55a0b89df968 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55a0b89df878 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89dfb38 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55a0b89dfa40 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55a0b89dfc28 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55a0b89dfd98 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55a0b89dfcd8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55a0b89eebc8 <col:56, line:320:5>
|   `-ReturnStmt 0x55a0b89eebb8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55a0b89eeba0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89eeb70 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89eeb58 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a0b89eeb18 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a0b89eeae8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a0b89eeaa8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89dfcd8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55a0b89eeb00 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55a0b89eeac8 <col:31> 'int' 0
|-CXXMethodDecl 0x55a0b89dffd8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89dfe50 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89dfec8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89eed98 <col:72, line:326:5>
|   `-ReturnStmt 0x55a0b89eed88 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55a0b89eed70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89eed40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89eed28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a0b89eece8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a0b89eecd0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a0b89eebf0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89dfe50 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a0b89eec90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a0b89eec78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a0b89eec10 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a0b89e48c0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a0b89eecb8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a0b89eec30 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89dfec8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e0188 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a0b89e0098 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a0b89ef460 <col:56, line:337:5>
|   |-DeclStmt 0x55a0b89ef098 <line:329:9, col:51>
|   | `-VarDecl 0x55a0b89eedc0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a0b89ef080 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a0b89ef050 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a0b89ef038 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a0b89ef020 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a0b89eeff0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a0b89eefd8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a0b89eefc0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a0b89eeeb0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a0b89ef250 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a0b89ef100 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a0b89e5168
|   | | `-MemberExpr 0x55a0b89ef0d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a0b89e6118
|   | |   `-DeclRefExpr 0x55a0b89ef0b0 <col:9> 'Timestamp' lvalue Var 0x55a0b89eedc0 't' 'Timestamp'
|   | `-BinaryOperator 0x55a0b89ef230 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55a0b89ef200 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a0b89ef130 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a0b89e0098 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a0b89ef218 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55a0b89ef1e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55a0b89ef1c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55a0b89ef190 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55a0b89ef150 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55a0b89ef1a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55a0b89ef170 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db8e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a0b89ef448 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55a0b89ef418 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a0b89ef400 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a0b89ef3e0 <col:16> 'Timestamp' lvalue Var 0x55a0b89eedc0 't' 'Timestamp'
|-CXXMethodDecl 0x55a0b89e0350 <line:341:5, line:343:5> line:341:29 used make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e0240 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e02b8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89ef618 <col:72, line:343:5>
|   `-ReturnStmt 0x55a0b89ef608 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55a0b89ef5f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89ef5c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89ef5a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a0b89ef568 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a0b89ef550 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a0b89ef498 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89e0240 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a0b89ef510 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a0b89ef4f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a0b89ef4b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a0b89e4a08 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a0b89ef538 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a0b89ef4d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e02b8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e04a0 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a0b89e0410 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a0b89efa60 <col:56, line:354:5>
|   |-DeclStmt 0x55a0b89ef808 <line:346:9, col:51>
|   | `-VarDecl 0x55a0b89ef640 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a0b89ef7f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a0b89ef7c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a0b89ef7a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a0b89ef790 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a0b89ef760 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a0b89ef748 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a0b89ef730 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a0b89ef700 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a0b89ef9c0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a0b89ef870 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a0b89e5168
|   | | `-MemberExpr 0x55a0b89ef840 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a0b89e6118
|   | |   `-DeclRefExpr 0x55a0b89ef820 <col:9> 'Timestamp' lvalue Var 0x55a0b89ef640 't' 'Timestamp'
|   | `-BinaryOperator 0x55a0b89ef9a0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55a0b89ef970 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a0b89ef8a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a0b89e0410 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a0b89ef988 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55a0b89ef950 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55a0b89ef930 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55a0b89ef900 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55a0b89ef8c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55a0b89ef918 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55a0b89ef8e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db7c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a0b89efa48 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55a0b89efa18 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a0b89efa00 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a0b89ef9e0 <col:16> 'Timestamp' lvalue Var 0x55a0b89ef640 't' 'Timestamp'
|-CXXMethodDecl 0x55a0b89e0668 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e0558 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e05d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89efc18 <col:72, line:360:5>
|   `-ReturnStmt 0x55a0b89efc08 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55a0b89efbf0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89efbc0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89efba8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a0b89efb68 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55a0b89efb50 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55a0b89efa98 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89e0558 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55a0b89efb10 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55a0b89efaf8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a0b89efab8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a0b89e4b50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55a0b89efb38 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55a0b89efad8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e05d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e07b8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55a0b89e0728 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55a0b89fc588 <col:56, line:371:5>
|   |-DeclStmt 0x55a0b89efe08 <line:363:9, col:51>
|   | `-VarDecl 0x55a0b89efc40 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55a0b89efdf0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55a0b89efdc0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55a0b89efda8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55a0b89efd90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55a0b89efd60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55a0b89efd48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55a0b89efd30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55a0b89efd00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55a0b89fc4e8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55a0b89efe70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55a0b89e5168
|   | | `-MemberExpr 0x55a0b89efe40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55a0b89e6118
|   | |   `-DeclRefExpr 0x55a0b89efe20 <col:9> 'Timestamp' lvalue Var 0x55a0b89efc40 't' 'Timestamp'
|   | `-CallExpr 0x55a0b89fc488 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55a0b89fc470 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55a0b89efea0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55a0b89e6448 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55a0b89fc4b8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55a0b89efec0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a0b89e0728 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55a0b89fc4d0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55a0b89fc450 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55a0b89fc420 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55a0b89efee0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db610 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55a0b89fc438 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55a0b89eff00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55a0b89fc570 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55a0b89fc540 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55a0b89fc528 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55a0b89fc508 <col:16> 'Timestamp' lvalue Var 0x55a0b89efc40 't' 'Timestamp'
|-CXXMethodDecl 0x55a0b89e08a8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55a0b89fc6c8 <col:39, line:377:5>
|   `-ReturnStmt 0x55a0b89fc6b8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55a0b89fc6a0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55a0b89fc670 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b89fc658 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55a0b89fc618 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55a0b89fc5c0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55a0b89fc600 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55a0b89fc5e0 <col:29> 'int' 1
|-CXXMethodDecl 0x55a0b89e0968 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55a0b89fc7a8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55a0b89fc760 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55a0b89fc6f0 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89fc6e0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55a0b89fc720 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55a0b89fc790 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55a0b89fc740 <col:19> 'int' 0
|-CXXMethodDecl 0x55a0b89e0b68 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e0a18 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e0a90 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7d40 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7d20 <col:60> 'int' 0
| `-CompoundStmt 0x55a0b89fc9a0 <col:63, line:395:5>
|   `-BinaryOperator 0x55a0b89fc980 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55a0b89fc800 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55a0b89e5168
|     | `-MemberExpr 0x55a0b89fc7d0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|     |   `-CXXThisExpr 0x55a0b89fc7c0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55a0b89fc960 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55a0b89fc8f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55a0b89fc890 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55a0b89fc878 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55a0b89fc860 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55a0b89fc830 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89e0a18 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55a0b89fc8d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55a0b89fc8b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55a0b89fc948 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55a0b89fc930 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55a0b89fc910 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e0a90 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e0d38 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e0c28 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e0ca0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fcaf8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55a0b89fcab0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55a0b89fc9c8 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89fc9b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89fcae0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b89fc9f8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89e0c28 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55a0b89fca70 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55a0b89fca58 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b89fca18 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a0b89e4a08 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55a0b89fca98 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a0b89fca38 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e0ca0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e0f08 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e0df8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e0e70 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fcc50 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55a0b89fcc08 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55a0b89fcb20 <col:9> '<bound member function type>' ->assign 0x55a0b89e0b68
|     | `-CXXThisExpr 0x55a0b89fcb10 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55a0b89fcc38 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a0b89fcb50 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55a0b89e0df8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55a0b89fcbc8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55a0b89fcbb0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b89fcb70 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55a0b89e4b50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55a0b89fcbf0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a0b89fcb90 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e0e70 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e10d8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e0fc8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e1040 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55a0b89e7d78 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55a0b89e7d58 <col:57> 'int' 0
| `-DeprecatedAttr 0x55a0b89e1188 <col:75> "" ""
|-CXXMethodDecl 0x55a0b89e1318 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e1208 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e1280 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b89e13c8 <col:74> "" ""
|-CXXMethodDecl 0x55a0b89e1558 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55a0b89e1448 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55a0b89e14c0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a0b89e1608 <col:74> "" ""
|-CXXMethodDecl 0x55a0b89e1698 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55a0b89e1738 <col:42> "" ""
|-CXXMethodDecl 0x55a0b89e3f70 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55a0b89e3e50 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a0b89e3ed0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55a0b89e4040 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e4100 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55a0b89e41a0 <col:20>
| `-OptimizeNoneAttr 0x55a0b89e41f8 <col:30>
|-CXXMethodDecl 0x55a0b89e4240 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e4300 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55a0b89e43c0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e4480 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55a0b89e4540 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e4600 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55a0b89e46c0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55a0b89e4780 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55a0b89e48c0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4830 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fcd98 <col:58, line:512:5>
|   `-ReturnStmt 0x55a0b89fcd88 <line:511:9, col:53>
|     `-BinaryOperator 0x55a0b89fcd68 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a0b89fcd38 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fcc68 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4830 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fcd50 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fcd18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a0b89fccf8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fccc8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fcc88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fcce0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fcca8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db8e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89e4a08 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4978 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fcee0 <col:58, line:516:5>
|   `-ReturnStmt 0x55a0b89fced0 <line:515:9, col:53>
|     `-BinaryOperator 0x55a0b89fceb0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a0b89fce80 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fcdb0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4978 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fce98 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fce60 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a0b89fce40 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fce10 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fcdd0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fce28 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fcdf0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db7c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89e4b50 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4ac0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd028 <col:58, line:520:5>
|   `-ReturnStmt 0x55a0b89fd018 <line:519:9, col:53>
|     `-BinaryOperator 0x55a0b89fcff8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a0b89fcfc8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fcef8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4ac0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fcfe0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fcfa8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55a0b89fcf88 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fcf58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fcf18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db610 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fcf70 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fcf38 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89e4c98 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4c08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd170 <col:60, line:524:5>
|   `-ReturnStmt 0x55a0b89fd160 <line:523:9, col:55>
|     `-BinaryOperator 0x55a0b89fd140 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a0b89fd110 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fd040 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4c08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fd128 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fd0f0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a0b89fd0d0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fd0a0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fd060 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fd0b8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fd080 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db8e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89e4de0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4d50 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd2b8 <col:60, line:528:5>
|   `-ReturnStmt 0x55a0b89fd2a8 <line:527:9, col:55>
|     `-BinaryOperator 0x55a0b89fd288 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55a0b89fd258 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fd188 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4d50 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fd270 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fd238 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a0b89fd218 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fd1e8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fd1a8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fd200 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fd1c8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db7c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55a0b89e4f28 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e4e98 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd400 <col:60, line:532:5>
|   `-ReturnStmt 0x55a0b89fd3f0 <line:531:9, col:55>
|     `-BinaryOperator 0x55a0b89fd3d0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55a0b89fd3a0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fd2d0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e4e98 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55a0b89fd3b8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55a0b89fd380 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55a0b89fd360 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55a0b89fd330 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55a0b89fd2f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db610 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55a0b89fd348 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55a0b89fd310 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55a0b89db970 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55a0b89e4fd0 prev 0x55a0b89dbe10 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a0b89e50c8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55a0b89e5168 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55a0b89ebf30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a0b89ec318 <col:11>
| |-CXXConstructorDecl 0x55a0b89ec010 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b89ec0f8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55a0b89eca60 <col:11>
| |-CXXConstructorDecl 0x55a0b89ec198 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b89ec2a8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55a0b89ee2b8 <col:11>
| |-CXXDestructorDecl 0x55a0b89ed5c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a0b86f4248 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a0b86f4358 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55a0b86f4c20 <col:11>
| |   `-ReturnStmt 0x55a0b86f4c10 <col:11>
| |     `-UnaryOperator 0x55a0b86f4bf8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a0b86f4be8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55a0b86f43c8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a0b86f43c8
|   `-ParmVarDecl 0x55a0b86f44d8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55a0b89e51d0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55a0b89e52d0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a0b89e54d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89e52b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b89e5290 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a0b89e5360 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a0b89e54e8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89e5340 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55a0b89e5320 <col:23> 'int' 1
| |-EnumConstantDecl 0x55a0b89e53f0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55a0b89e5500 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b89e53d0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55a0b89e53b0 <col:23> 'int' 2
| `-EnumConstantDecl 0x55a0b89e5480 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55a0b89e5518 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a0b89e5460 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55a0b89e5440 <col:27> 'int' 3
|-CXXMethodDecl 0x55a0b89e5558 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55a0b89e5620 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55a0b89e5828 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55a0b89e56d0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55a0b89e5750 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55a0b89e7d90 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55a0b89e5a38 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55a0b89e58e8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55a0b89e5960 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55a0b89e5b08 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55a0b89e5bc8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55a0b89e5d38 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55a0b89e5c78 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55a0b89e5e00 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e5ec0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55a0b89e5f80 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55a0b89e6040 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55a0b89e60e0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55a0b89e6118 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55a0b89e6188 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55a0b89fd418 <col:27, line:684:5>
|-CXXMethodDecl 0x55a0b89e6248 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55a0b89fd428 <col:27, line:696:5>
|-CXXMethodDecl 0x55a0b89e6448 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e62f8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55a0b89e6370 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd5b0 <col:66, line:700:5>
|   `-ReturnStmt 0x55a0b89fd5a0 <line:699:9, col:31>
|     `-CallExpr 0x55a0b89fd540 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55a0b89fd528 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b89fd4d8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55a0b88687f8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55a0b89fd570 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55a0b89fd498 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a0b89e62f8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55a0b89fd588 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55a0b89fd4b8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e6370 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a0b89e67b8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55a0b89e6508 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55a0b89e6580 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55a0b89e65f8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55a0b89e6670 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55a0b89fd900 <col:64, line:707:5>
|   |-DeclStmt 0x55a0b89fd640 <line:704:9, col:24>
|   | `-VarDecl 0x55a0b89fd5d8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55a0b89fd850 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55a0b89fd658 <col:9> 'int32_t':'int' lvalue ParmVar 0x55a0b89e6580 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55a0b89fd838 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55a0b89fd7d0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55a0b89fd7b8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a0b89fd738 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55a0b886dac8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55a0b89fd808 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55a0b89fd6d8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55a0b89e65f8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55a0b89fd820 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55a0b89fd6f8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55a0b89e6670 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55a0b89fd718 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55a0b89fd5d8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55a0b89fd8e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55a0b89fd870 <col:9> 'int32_t':'int' lvalue ParmVar 0x55a0b89e6508 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55a0b89fd8c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55a0b89fd8b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55a0b89fd890 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55a0b89fd5d8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55a0b89e6a58 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55a0b89e6888 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55a0b89e6900 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55a0b89e6978 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55a0b89e6cf8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55a0b89e6b20 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55a0b89e6b98 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55a0b89e6c10 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55a0b89e6e88 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55a0b89e6dc0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55a0b89e7088 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55a0b89e6f40 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55a0b89e6fb8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55a0b89e7358 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55a0b89e7298 parent 0x55a0b84ea278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a0b89e7148 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55a0b89e71c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55a0b89e7578 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55a0b89e74b8 parent 0x55a0b84ea278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a0b89e73a8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55a0b89e7420 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55a0b89e7740 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55a0b89e7688 parent 0x55a0b84ea278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55a0b89e75c8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55a0b89e79c8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55a0b89e7908 parent 0x55a0b84ea278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a0b89e77b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55a0b89e7830 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55a0b89e7be8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55a0b89e7b28 parent 0x55a0b84ea278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55a0b89e7a18 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55a0b89e7a90 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55a0b89ed470 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b89ed558 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89edfc8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55a0b89edf80 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55a0b89e6118
| |     `-DeclRefExpr 0x55a0b89edf60 <col:7> 'const Timestamp' lvalue ParmVar 0x55a0b89ed558 '' 'const Timestamp &'
| `-CompoundStmt 0x55a0b89ee028 <col:7>
|-CXXConstructorDecl 0x55a0b89ed6d8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b89ed7e8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55a0b89e6118 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55a0b89ee2c8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55a0b89ee270 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55a0b89e6118
| |     `-CXXStaticCastExpr 0x55a0b89ee240 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b89ee210 <col:7> 'Timestamp' lvalue ParmVar 0x55a0b89ed7e8 '' 'Timestamp &&'
| `-CompoundStmt 0x55a0b89ee328 <col:7>
|-CXXDestructorDecl 0x55a0b89ed898 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a0b86f4098 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b86f41a8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55a0b86f4c98 <col:7>
|   |-CXXMemberCallExpr 0x55a0b86f4c38 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55a0b86f4b78 <col:7> '<bound member function type>' .operator= 0x55a0b86f4248
|   | | `-MemberExpr 0x55a0b86f4a88 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55a0b89e6118
|   | |   `-CXXThisExpr 0x55a0b86f4a78 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55a0b86f4b48 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55a0b89e6118
|   |   `-DeclRefExpr 0x55a0b86f4b28 <col:7> 'const Timestamp' lvalue ParmVar 0x55a0b86f41a8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55a0b86f4c88 <col:7>
|     `-UnaryOperator 0x55a0b86f4c70 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a0b86f4c60 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55a0b86f4548 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55a0b86f4548
  `-ParmVarDecl 0x55a0b86f4658 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b863ffb8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b86400d8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55a0b8852360 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8852440 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x55a0b8852440
| `-ParmVarDecl 0x55a0b8852528 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x55a0b88525c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x55a0b88525c8
| `-ParmVarDecl 0x55a0b88526d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55a0b89eeee0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b16250 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8b16368 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55a0b8b163f8 <col:16, col:22> col:16 public
|-EnumDecl 0x55a0b8b16420 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55a0b8b16520 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a0b8b16770 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b16500 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a0b8b164e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a0b8b165b0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a0b8b16788 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b16590 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55a0b8b16570 <col:24> 'int' 22
| |-EnumConstantDecl 0x55a0b8b16640 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a0b8b167a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b16620 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55a0b8b16600 <col:24> 'int' 34
| |-EnumConstantDecl 0x55a0b8b166d0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a0b8b167b8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a0b8b166b0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55a0b8b16690 <col:25> 'int' 95
| `-EnumConstantDecl 0x55a0b8b16720 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55a0b8b18130 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a0b8b185d8 <col:7>
|-CXXConstructorDecl 0x55a0b8b182a0 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55a0b8b182a0
| `-ParmVarDecl 0x55a0b8b183b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55a0b8b18458 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8b18568 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55a0b8bf04c0 <col:7>
`-CXXDestructorDecl 0x55a0b8b1a6d8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b167e8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55a0b8b16948 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55a0b8b169d8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55a0b8b16a10 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55a0b8640340 'uint32_t' sugar
|   |-Typedef 0x55a0b8553408 'uint32_t'
|   `-TypedefType 0x55a0b852c440 '__uint32_t' sugar
|     |-Typedef 0x55a0b852c038 '__uint32_t'
|     `-BuiltinType 0x55a0b84ea410 'unsigned int'
|-CXXConstructorDecl 0x55a0b8b16b58 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55a0b8b16a80 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55a0b8b18038 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a0b8b185e8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a0b8b178f0 'base' 'int'
| | `-ImplicitCastExpr 0x55a0b8b180d8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a0b8b18098 <col:16> 'int' lvalue ParmVar 0x55a0b8b16a80 'b' 'int'
| `-CompoundStmt 0x55a0b8b18658 <col:19, line:1046:5>
|-CXXMethodDecl 0x55a0b8b17050 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55a0b8b16c20 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55a0b8b16ca0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55a0b8b16d18 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55a0b8b16d98 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55a0b8b16e58 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55a0b8b16ed8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55a0b8b174a8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55a0b8b17120 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a0b8b17408 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a0b8b171c8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55a0b8b17268 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55a0b8b172e0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a0b8b18058 <col:82> 'const ArgContext' lvalue Var 0x55a0b8b0af18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a0b8b19588 <col:94, line:1067:5>
| |   |-DeclStmt 0x55a0b8b187e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55a0b8b18678 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55a0b8b187a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55a0b8b18a08 <line:1055:9, col:91>
| |   | `-VarDecl 0x55a0b8b18818 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55a0b8b189e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55a0b8b189c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55a0b8b18970 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55a0b8b18950 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55a0b8b188f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55a0b8b188a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55a0b8b188d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55a0b8b18938 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55a0b8b18918 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55a0b8b189a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55a0b8b18b68 <line:1056:9, col:27>
| |   | `-VarDecl 0x55a0b8b18b00 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55a0b8b18fb0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55a0b8b18ee0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55a0b8b18e60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a0b8a0a258 0x55a0b8853d18 0x55a0b88539f0 0x55a0b8849600 0x55a0b88492b0 0x55a0b8848ba0 0x55a0b8819a30 0x55a0b87a76e0
| |   | | |-CallExpr 0x55a0b8b18da0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55a0b8b18b90 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55a0b8b18c40 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a0b8b18c10 <col:19, col:23> '<bound member function type>' .begin 0x55a0b88370d8
| |   | | | |   `-DeclRefExpr 0x55a0b8b18bf0 <col:19> 'const String' lvalue ParmVar 0x55a0b8b171c8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55a0b8b18cb0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a0b8b18c80 <col:32, col:36> '<bound member function type>' .end 0x55a0b88372f0
| |   | | | |   `-DeclRefExpr 0x55a0b8b18c60 <col:32> 'const String' lvalue ParmVar 0x55a0b8b171c8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55a0b8b18cd0 <col:43> 'const bool' lvalue Var 0x55a0b8b18678 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55a0b8b18d38 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55a0b8b18d18 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55a0b8b18d60 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a0b8b18b00 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55a0b8b18d80 <col:73> 'const int' lvalue Var 0x55a0b8b18818 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55a0b8b18e40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55a0b8b18e10 <col:16, col:20> '<bound member function type>' .end 0x55a0b88372f0
| |   | |     `-DeclRefExpr 0x55a0b8b18df0 <col:16> 'const String' lvalue ParmVar 0x55a0b8b171c8 'str' 'const String &'
| |   | `-BinaryOperator 0x55a0b8b18f90 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55a0b8b18f28 <col:13> 'int' lvalue ->status 0x55a0b8b17958
| |   |   | `-CXXThisExpr 0x55a0b8b18f18 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55a0b8b18f78 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55a0b8b18f58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b165b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55a0b8b19200 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55a0b8b190e8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55a0b8b190d0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55a0b8b190b8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55a0b8b18fd8 <col:13> 'int' lvalue ->status 0x55a0b8b17958
| |   | | |     `-CXXThisExpr 0x55a0b8b18fc8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55a0b8b19098 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55a0b8b19068 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55a0b8b19018 <col:23> 'int' lvalue ->status 0x55a0b8b17958
| |   | |   |   `-CXXThisExpr 0x55a0b8b19008 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55a0b8b19080 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55a0b8b19048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55a0b8b191e0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55a0b8b19180 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55a0b8b19128 <col:13, col:18> '<bound member function type>' .error 0x55a0b8abd8a0
| |   |   | | `-DeclRefExpr 0x55a0b8b19108 <col:13> 'const ArgContext' lvalue ParmVar 0x55a0b8b172e0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55a0b8b191a8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55a0b8b19158 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55a0b8b191d0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55a0b8b191c0 <col:20> 'bool' false
| |   |-DeclStmt 0x55a0b8b193d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55a0b8b19380 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55a0b8b19310 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55a0b8b19538 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55a0b8b193f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55a0b87db4e8
| |   | |-DeclRefExpr 0x55a0b8b19438 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a0b8b18b00 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55a0b8b19508 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55a0b8b19480 <col:64> 'V' lvalue ParmVar 0x55a0b8b17268 'result' 'V &'
| |   `-ReturnStmt 0x55a0b8b19578 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55a0b8b19568 <col:16> 'bool' true
| |-CXXMethodDecl 0x55a0b8c296d8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55a0b8c294b8 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x55a0b8c29588 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x55a0b8c295f0 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x55a0b8c2b470 <col:94, line:1067:5>
| |   |-DeclStmt 0x55a0b8c29ee8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55a0b8c29d08 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x55a0b8c29e78 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55a0b8c29e48 <col:36, col:55> 'const bool' lvalue Var 0x55a0b87ccbb8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x55a0b8c2a0c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55a0b8c29f00 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55a0b8c2a048 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x55a0b8c2a030 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x55a0b8c2a010 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x55a0b8c29ff0 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x55a0b8c29fd0 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x55a0b8c29f98 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x55a0b8c29f78 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x55a0b8b188d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x55a0b8c29fb8 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x55a0b8b18918 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x55a0b8b189a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55a0b8c2a260 <line:1056:9, col:27>
| |   | `-VarDecl 0x55a0b8c2a1f8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x55a0b8c2a6e8 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x55a0b8c2a690 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x55a0b8c2a548 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x55a0b8c2a518 <col:13> '<bound member function type>' ->parse 0x55a0b8b17050
| |   | | | | `-CXXThisExpr 0x55a0b8c2a508 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x55a0b8c2a3a8 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a0b8c2a378 <col:19, col:23> '<bound member function type>' .begin 0x55a0b88370d8
| |   | | | |   `-DeclRefExpr 0x55a0b8c2a358 <col:19> 'const String' lvalue ParmVar 0x55a0b8c294b8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55a0b8c2a418 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a0b8c2a3e8 <col:32, col:36> '<bound member function type>' .end 0x55a0b88372f0
| |   | | | |   `-DeclRefExpr 0x55a0b8c2a3c8 <col:32> 'const String' lvalue ParmVar 0x55a0b8c294b8 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x55a0b8c2a5b8 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x55a0b8c2a598 <col:43> 'const bool' lvalue Var 0x55a0b8c29d08 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x55a0b8c2a4a0 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x55a0b8c2a488 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x55a0b8c2a468 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x55a0b8c2a5d0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x55a0b8c2a4c8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55a0b8c2a1f8 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x55a0b8c2a608 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x55a0b8c2a5e8 <col:73> 'const int' lvalue Var 0x55a0b8c29f00 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x55a0b8c2a670 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55a0b8c2a640 <col:16, col:20> '<bound member function type>' .end 0x55a0b88372f0
| |   | |     `-DeclRefExpr 0x55a0b8c2a620 <col:16> 'const String' lvalue ParmVar 0x55a0b8c294b8 'str' 'const String &'
| |   | `-BinaryOperator 0x55a0b8c2a6c8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55a0b8b18f28 <col:13> 'int' lvalue ->status 0x55a0b8b17958
| |   |   | `-CXXThisExpr 0x55a0b8b18f18 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55a0b8c2a6b0 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55a0b8b18f58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b165b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55a0b8c2a860 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55a0b8c2a780 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55a0b8c2a768 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55a0b8c2a750 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55a0b8b18fd8 <col:13> 'int' lvalue ->status 0x55a0b8b17958
| |   | | |     `-CXXThisExpr 0x55a0b8b18fc8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55a0b8c2a730 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55a0b8c2a700 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55a0b8b19018 <col:23> 'int' lvalue ->status 0x55a0b8b17958
| |   | |   |   `-CXXThisExpr 0x55a0b8b19008 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55a0b8c2a718 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55a0b8b19048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55a0b8c2a840 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55a0b8c2a7f0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55a0b8c2a7c0 <col:13, col:18> '<bound member function type>' .error 0x55a0b8abd8a0
| |   |   | | `-DeclRefExpr 0x55a0b8c2a7a0 <col:13> 'const ArgContext' lvalue ParmVar 0x55a0b8c295f0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55a0b8c2a818 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55a0b8b19158 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55a0b8c2a830 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55a0b8b191c0 <col:20> 'bool' false
| |   |-DeclStmt 0x55a0b8c2ada8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55a0b8c2ad50 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x55a0b8c2ad00 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x55a0b8c2ace0 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x55a0b8c2ac70 'type'
| |   |       `-ElaboratedType 0x55a0b8c2ac20 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x55a0b8c2ac00 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x55a0b87ccd10 'unsigned_type'
| |   |           `-BuiltinType 0x55a0b84ea410 'unsigned int'
| |   |-CallExpr 0x55a0b8c2b400 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x55a0b8c2b3e8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55a0b8c2b368 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55a0b8c2b248 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55a0b87db4e8 'extract_integer')
| |   | |-ImplicitCastExpr 0x55a0b8c2b448 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x55a0b8c2b430 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x55a0b8c2ae08 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55a0b8c2a1f8 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x55a0b8c2aed8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x55a0b8c2ae88 <col:64> 'int':'int' lvalue ParmVar 0x55a0b8c29588 'result' 'int &'
| |   `-ReturnStmt 0x55a0b8c2b460 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55a0b8b19568 <col:16> 'bool' true
| `-CXXMethodDecl 0x55a0b8c2c2b8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a0b8c2c090 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55a0b8c2c168 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a0b8c2c1d0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55a0b8c2db88 <col:94, line:1067:5>
|     |-DeclStmt 0x55a0b8c2cac8 <line:1054:9, col:64>
|     | `-VarDecl 0x55a0b8c2c8e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55a0b8c2ca58 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55a0b8c2ca28 <col:36, col:55> 'const bool' lvalue Var 0x55a0b87c9510 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55a0b8c2cca8 <line:1055:9, col:91>
|     | `-VarDecl 0x55a0b8c2cae0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55a0b8c2cc28 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55a0b8c2cc10 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55a0b8c2cbf0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55a0b8c2cbd0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55a0b8c2cbb0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55a0b8c2cb78 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55a0b8c2cb58 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55a0b8b188d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55a0b8c2cb98 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55a0b8b18918 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55a0b8b189a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55a0b8c2cdc0 <line:1056:9, col:27>
|     | `-VarDecl 0x55a0b8c2cd58 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55a0b8c2d248 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55a0b8c2d1f0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55a0b8c2d0a8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55a0b8c2d078 <col:13> '<bound member function type>' ->parse 0x55a0b8b17050
|     | | | | `-CXXThisExpr 0x55a0b8c2d068 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55a0b8c2cf08 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a0b8c2ced8 <col:19, col:23> '<bound member function type>' .begin 0x55a0b88370d8
|     | | | |   `-DeclRefExpr 0x55a0b8c2ceb8 <col:19> 'const String' lvalue ParmVar 0x55a0b8c2c090 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55a0b8c2cf78 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a0b8c2cf48 <col:32, col:36> '<bound member function type>' .end 0x55a0b88372f0
|     | | | |   `-DeclRefExpr 0x55a0b8c2cf28 <col:32> 'const String' lvalue ParmVar 0x55a0b8c2c090 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55a0b8c2d118 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55a0b8c2d0f8 <col:43> 'const bool' lvalue Var 0x55a0b8c2c8e8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55a0b8c2d000 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55a0b8c2cfe8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55a0b8c2cfc8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55a0b8c2d130 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55a0b8c2d028 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55a0b8c2cd58 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55a0b8c2d168 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55a0b8c2d148 <col:73> 'const int' lvalue Var 0x55a0b8c2cae0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55a0b8c2d1d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55a0b8c2d1a0 <col:16, col:20> '<bound member function type>' .end 0x55a0b88372f0
|     | |     `-DeclRefExpr 0x55a0b8c2d180 <col:16> 'const String' lvalue ParmVar 0x55a0b8c2c090 'str' 'const String &'
|     | `-BinaryOperator 0x55a0b8c2d228 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55a0b8b18f28 <col:13> 'int' lvalue ->status 0x55a0b8b17958
|     |   | `-CXXThisExpr 0x55a0b8b18f18 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55a0b8c2d210 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55a0b8b18f58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b165b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55a0b8c2d3c0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55a0b8c2d2e0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55a0b8c2d2c8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55a0b8c2d2b0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55a0b8b18fd8 <col:13> 'int' lvalue ->status 0x55a0b8b17958
|     | | |     `-CXXThisExpr 0x55a0b8b18fc8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55a0b8c2d290 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55a0b8c2d260 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55a0b8b19018 <col:23> 'int' lvalue ->status 0x55a0b8b17958
|     | |   |   `-CXXThisExpr 0x55a0b8b19008 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55a0b8c2d278 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55a0b8b19048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55a0b8c2d3a0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55a0b8c2d350 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55a0b8c2d320 <col:13, col:18> '<bound member function type>' .error 0x55a0b8abd8a0
|     |   | | `-DeclRefExpr 0x55a0b8c2d300 <col:13> 'const ArgContext' lvalue ParmVar 0x55a0b8c2c1d0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55a0b8c2d378 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55a0b8b19158 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55a0b8c2d390 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55a0b8b191c0 <col:20> 'bool' false
|     |-DeclStmt 0x55a0b8c2d908 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55a0b8c2d8b0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55a0b8c2d860 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55a0b8c2d840 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55a0b8c2d7d0 'type'
|     |       `-ElaboratedType 0x55a0b8c2d780 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55a0b8c2d760 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55a0b87c9668 'unsigned_type'
|     |           `-BuiltinType 0x55a0b84ea410 'unsigned int'
|     |-CallExpr 0x55a0b8c2db18 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55a0b8c2db00 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55a0b8c2dad8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55a0b8c2b248 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55a0b87db4e8 'extract_integer')
|     | |-ImplicitCastExpr 0x55a0b8c2db60 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55a0b8c2db48 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55a0b8c2d968 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55a0b8c2cd58 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55a0b8c2da38 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55a0b8c2d9e8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a0b8c2c168 'result' 'unsigned int &'
|     `-ReturnStmt 0x55a0b8c2db78 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55a0b8b19568 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55a0b8b17868 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55a0b8b17518 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a0b8b177c8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a0b8b175c8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55a0b8b17668 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55a0b8b176e0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a0b8b18078 <col:71> 'const ArgContext' lvalue Var 0x55a0b8b0af18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a0b8b19cf8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55a0b8b19650 <line:1071:9, col:12>
| |   | `-VarDecl 0x55a0b8b195e8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55a0b8b19cd0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55a0b8b198e0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55a0b8b19768 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55a0b8b19730 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55a0b8b19678 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55a0b8b196d0 <col:31> 'const String' lvalue ParmVar 0x55a0b8b175c8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55a0b8b196f0 <col:36> 'V' lvalue Var 0x55a0b8b195e8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55a0b8b19710 <col:39> 'const ArgContext' lvalue ParmVar 0x55a0b8b176e0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55a0b8b198c0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55a0b8b198a0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55a0b8b19888 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55a0b8b19870 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55a0b8b19790 <col:17> 'int' lvalue ->status 0x55a0b8b17958
| |     |     |     `-CXXThisExpr 0x55a0b8b19780 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55a0b8b19850 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55a0b8b19820 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55a0b8b197d0 <col:27> 'int' lvalue ->status 0x55a0b8b17958
| |     |       |   `-CXXThisExpr 0x55a0b8b197c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55a0b8b19838 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55a0b8b19800 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55a0b8b19910 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55a0b8b19900 <col:20> 'bool' false
| |     `-IfStmt 0x55a0b8b19ca8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55a0b8b199b0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55a0b8b19980 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55a0b8b19930 <col:18> 'int' lvalue ->status 0x55a0b8b17958
| |       | |   `-CXXThisExpr 0x55a0b8b19920 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55a0b8b19998 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55a0b8b19960 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55a0b8b19be8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55a0b8b19b90 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55a0b8b199e0 <line:1076:13> '<bound member function type>' ->range_error 0x55a0b8b17f68
| |       | | | `-CXXThisExpr 0x55a0b8b199d0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55a0b8b19a10 <col:25> 'const ArgContext' lvalue ParmVar 0x55a0b8b176e0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55a0b8b19af0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55a0b8b19b68 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55a0b8b19b48 <col:43> 'V' lvalue Var 0x55a0b8b195e8 'x' 'V'
| |       | `-ReturnStmt 0x55a0b8b19bd8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55a0b8b19bc8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55a0b8b19c88 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55a0b8b19c48 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55a0b8b19c08 <col:13> 'V' lvalue ParmVar 0x55a0b8b17668 'result' 'V &'
| |         | `-DeclRefExpr 0x55a0b8b19c28 <col:22> 'V' lvalue Var 0x55a0b8b195e8 'x' 'V'
| |         `-ReturnStmt 0x55a0b8b19c78 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55a0b8b19c68 <col:20> 'bool' true
| |-CXXMethodDecl 0x55a0b8ba2748 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55a0b8ba2528 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x55a0b8ba25f8 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x55a0b8ba2660 <col:46, col:71> col:64 used args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a0b8b18078 <col:71> 'const ArgContext' lvalue Var 0x55a0b8b0af18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a0b8c29ce8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55a0b8c29328 <line:1071:9, col:12>
| |   | `-VarDecl 0x55a0b8c292c0 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x55a0b8c29cc0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55a0b8c29950 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x55a0b8c29878 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x55a0b8c29840 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x55a0b8c297f8 <col:14> '<bound member function type>' ->parse_saturating 0x55a0b8c296d8
| |     | |   | `-CXXThisExpr 0x55a0b8c297e8 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x55a0b8c29398 <col:31> 'const String' lvalue ParmVar 0x55a0b8ba2528 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55a0b8c293b8 <col:36> 'int':'int' lvalue Var 0x55a0b8c292c0 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x55a0b8c293d8 <col:39> 'const ArgContext' lvalue ParmVar 0x55a0b8ba2660 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55a0b8c29930 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55a0b8c29910 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55a0b8c298f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55a0b8c298e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55a0b8b19790 <col:17> 'int' lvalue ->status 0x55a0b8b17958
| |     |     |     `-CXXThisExpr 0x55a0b8b19780 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55a0b8c298c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55a0b8c29890 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55a0b8b197d0 <col:27> 'int' lvalue ->status 0x55a0b8b17958
| |     |       |   `-CXXThisExpr 0x55a0b8b197c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55a0b8c298a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55a0b8b19800 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55a0b8c29970 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55a0b8b19900 <col:20> 'bool' false
| |     `-IfStmt 0x55a0b8c29c98 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55a0b8c299b0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55a0b8c29980 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55a0b8b19930 <col:18> 'int' lvalue ->status 0x55a0b8b17958
| |       | |   `-CXXThisExpr 0x55a0b8b19920 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55a0b8c29998 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55a0b8b19960 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55a0b8c29bd0 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x55a0b8c29b40 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x55a0b8b199e0 <line:1076:13> '<bound member function type>' ->range_error 0x55a0b8b17f68
| |       | | | `-CXXThisExpr 0x55a0b8b199d0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55a0b8c299d0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a0b8ba2660 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x55a0b8c29ba8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x55a0b8c29b78 <col:31, col:50> 'const bool' lvalue Var 0x55a0b87ccbb8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x55a0b8c29b18 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x55a0b8c29b00 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x55a0b8c29ae8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x55a0b8c29ac8 <col:43> 'int':'int' lvalue Var 0x55a0b8c292c0 'x' 'int':'int'
| |       | `-ReturnStmt 0x55a0b8c29bc0 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55a0b8b19bc8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55a0b8c29c78 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55a0b8c29c48 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x55a0b8c29bf0 <col:13> 'int':'int' lvalue ParmVar 0x55a0b8ba25f8 'result' 'int &'
| |         | `-ImplicitCastExpr 0x55a0b8c29c30 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x55a0b8c29c10 <col:22> 'int':'int' lvalue Var 0x55a0b8c292c0 'x' 'int':'int'
| |         `-ReturnStmt 0x55a0b8c29c68 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55a0b8b19c68 <col:20> 'bool' true
| `-CXXMethodDecl 0x55a0b8ba3508 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a0b8ba32e0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55a0b8ba33b8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a0b8ba3420 <col:46, col:71> col:64 used args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55a0b8b18078 <col:71> 'const ArgContext' lvalue Var 0x55a0b8b0af18 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55a0b8c2c8c8 <col:83, line:1083:5>
|     |-DeclStmt 0x55a0b8c2bf80 <line:1071:9, col:12>
|     | `-VarDecl 0x55a0b8c2bf18 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55a0b8c2c8a0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55a0b8c2c530 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55a0b8c2c458 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55a0b8c2c420 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55a0b8c2c3d8 <col:14> '<bound member function type>' ->parse_saturating 0x55a0b8c2c2b8
|       | |   | `-CXXThisExpr 0x55a0b8c2c3c8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55a0b8c2bff0 <col:31> 'const String' lvalue ParmVar 0x55a0b8ba32e0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55a0b8c2c010 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55a0b8c2bf18 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55a0b8c2c030 <col:39> 'const ArgContext' lvalue ParmVar 0x55a0b8ba3420 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55a0b8c2c510 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55a0b8c2c4f0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55a0b8c2c4d8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55a0b8c2c4c0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55a0b8b19790 <col:17> 'int' lvalue ->status 0x55a0b8b17958
|       |     |     `-CXXThisExpr 0x55a0b8b19780 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55a0b8c2c4a0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55a0b8c2c470 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55a0b8b197d0 <col:27> 'int' lvalue ->status 0x55a0b8b17958
|       |       |   `-CXXThisExpr 0x55a0b8b197c0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55a0b8c2c488 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55a0b8b19800 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55a0b8c2c550 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55a0b8b19900 <col:20> 'bool' false
|       `-IfStmt 0x55a0b8c2c878 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55a0b8c2c590 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55a0b8c2c560 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55a0b8b19930 <col:18> 'int' lvalue ->status 0x55a0b8b17958
|         | |   `-CXXThisExpr 0x55a0b8b19920 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55a0b8c2c578 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55a0b8b19960 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a0b8b16640 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55a0b8c2c7b0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55a0b8c2c720 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55a0b8b199e0 <line:1076:13> '<bound member function type>' ->range_error 0x55a0b8b17f68
|         | | | `-CXXThisExpr 0x55a0b8b199d0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55a0b8c2c5b0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a0b8ba3420 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55a0b8c2c788 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55a0b8c2c758 <col:31, col:50> 'const bool' lvalue Var 0x55a0b87c9510 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55a0b8c2c6f8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55a0b8c2c6e0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55a0b8c2c6c8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55a0b8c2c6a8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55a0b8c2bf18 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55a0b8c2c7a0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55a0b8b19bc8 <col:20> 'bool' false
|         `-CompoundStmt 0x55a0b8c2c858 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55a0b8c2c828 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55a0b8c2c7d0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a0b8ba33b8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55a0b8c2c810 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55a0b8c2c7f0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55a0b8c2bf18 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55a0b8c2c848 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55a0b8b19c68 <col:20> 'bool' true
|-FieldDecl 0x55a0b8b178f0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55a0b8b17958 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55a0b8b179a8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55a0b8b17c60 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55a0b8b179e8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55a0b8b17a68 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55a0b8b17ae0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55a0b8b17b60 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55a0b8b17f68 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55a0b8b17d30 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55a0b8b17da8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55a0b8b17e40 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55a0b8b1a558 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55a0b8b1a558
| `-ParmVarDecl 0x55a0b8b1a668 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55a0b8b1a7e8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8b1a8f8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a0b8bf04d0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a0b8bf04a0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55a0b8bf0470 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8bf0440 <col:7> 'IntArg' lvalue ParmVar 0x55a0b8b1a8f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a0b8b178f0 'base' 'int'
| | `-ImplicitCastExpr 0x55a0b8bf05c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b8bf0598 <col:7> 'int' xvalue .base 0x55a0b8b178f0
| |     `-CXXStaticCastExpr 0x55a0b8bf0568 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8bf0538 <col:7> 'IntArg' lvalue ParmVar 0x55a0b8b1a8f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a0b8b17958 'status' 'int'
| | `-ImplicitCastExpr 0x55a0b8bf0698 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a0b8bf0668 <col:7> 'int' xvalue .status 0x55a0b8b17958
| |     `-CXXStaticCastExpr 0x55a0b8bf0638 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8bf0608 <col:7> 'IntArg' lvalue ParmVar 0x55a0b8b1a8f8 '' 'IntArg &&'
| `-CompoundStmt 0x55a0b8bf06f0 <col:7>
`-CXXDestructorDecl 0x55a0b8ba22d0 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b23ec0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b8b23fd8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55a0b8b24068 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55a0b8b242a8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55a0b8b240a0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a0b8b24120 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55a0b8b24198 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55a0b8b244c0 <col:81> 'const ArgContext' lvalue Var 0x55a0b8b0af18 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55a0b8b24400 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55a0b8b24370 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55a0b8b24618 <col:35, line:1261:5>
|   `-ReturnStmt 0x55a0b8b24608 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55a0b8b245f0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55a0b8b245c0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a0b8b245a8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55a0b8b24580 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55a0b8b24560 <col:16, col:24> 'String' (CXXTemporary 0x55a0b8b24560)
|               `-CXXConstructExpr 0x55a0b8b24528 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55a0b8b24510 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55a0b8b244f0 <col:23> 'bool' lvalue ParmVar 0x55a0b8b24370 'x' 'bool'
|-CXXConstructorDecl 0x55a0b8bd57b0 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8bd58b8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55a0b8bd58b8
| `-ParmVarDecl 0x55a0b8bd59c8 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x55a0b8bd5a68 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8bd5b78 <col:7> col:7 'BoolArg &&'
| `-CompoundStmt 0x55a0b8c24a80 <col:7>
`-CXXDestructorDecl 0x55a0b8bd5c18 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8b1eaf0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55a0b8b1ed48 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a0b8bef638 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a0b8befad0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55a0b8befab0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55a0b8befb40 <col:19>
|-CXXConstructorDecl 0x55a0b8bef738 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55a0b8bef738
| `-ParmVarDecl 0x55a0b8bef848 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55a0b8bef8e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8bef9f8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a0b8bf0700 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a0b8bf0420 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55a0b8bf03f0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8bf03c0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55a0b8bef9f8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55a0b8bf0770 <col:19>
`-CXXDestructorDecl 0x55a0b8befb80 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8b1ee20 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55a0b8b1f078 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a0b8bf84c8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a0b8bf8960 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55a0b8bf8940 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55a0b8bf89d0 <col:19>
|-CXXConstructorDecl 0x55a0b8bf85c8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55a0b8bf85c8
| `-ParmVarDecl 0x55a0b8bf86d8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55a0b8bf8778 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8bf8888 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a0b8bf9270 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a0b8bf9250 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55a0b8bf9220 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8bf91f0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55a0b8bf8888 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55a0b8bf92e0 <col:19>
`-CXXDestructorDecl 0x55a0b8bf8a10 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b8b2b9d8 prev 0x55a0b8a8d190 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55a0b8b2d448 <line:148:18>
|-CXXRecordDecl 0x55a0b8b2bad0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55a0b8b2bb60 <col:22, col:28> col:22 public
|-TypedefDecl 0x55a0b8b2bb98 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55a0b8640050 'uninitialized_type'
|   `-CXXRecord 0x55a0b863ffb8 'uninitialized_type'
|-CXXConstructorDecl 0x55a0b8b2bc28 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55a0b8b2d748 <col:27, line:16:5>
|   `-BinaryOperator 0x55a0b8b2d728 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55a0b8b2d530 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55a0b8b2d518 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a0b8b2d4c8 <col:2> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|     | |   `-CXXThisExpr 0x55a0b8b2d4b8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55a0b8b2d4f8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55a0b8b2d710 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55a0b8b2d6f0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55a0b8b2d5c8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55a0b8b2d5b0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55a0b8b2d560 <col:13> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|         | |   `-CXXThisExpr 0x55a0b8b2d550 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55a0b8b2d590 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55a0b8b2d6d8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55a0b8b2d6b8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55a0b8b2d660 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55a0b8b2d648 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55a0b8b2d5f8 <col:24> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|             | |   `-CXXThisExpr 0x55a0b8b2d5e8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55a0b8b2d628 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55a0b8b2d6a0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55a0b8b2d680 <col:35> 'int' 0
|-CXXConstructorDecl 0x55a0b8b2bd78 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55a0b8b2bce8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55a0b8b2d910 <col:61, line:24:5>
|   `-CallExpr 0x55a0b8b2d860 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55a0b8b2d848 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55a0b8b2d828 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a0b87703d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55a0b8b2d8b0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55a0b8b2d898 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55a0b8b2d7b8 <col:9> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|     |     `-CXXThisExpr 0x55a0b8b2d7a8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55a0b8b2d8e0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55a0b8b2d8c8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a0b8b2d7e8 <col:16> 'const unsigned char *' lvalue ParmVar 0x55a0b8b2bce8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55a0b8b2d8f8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55a0b8b2d808 <col:22> 'int' 6
|-CXXConstructorDecl 0x55a0b8b2bec8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55a0b8b2be38 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55a0b8b2d980 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55a0b8b2d958 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55a0b8b2d928 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55a0b8b2be38 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55a0b8b2bfc8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55a0b8b2e0c8 <col:42, line:34:5>
|   `-ReturnStmt 0x55a0b8b2e0b8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55a0b8b2e0a0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55a0b8b2e070 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a0b8b2dea8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55a0b8b2de20 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55a0b8b2dd10 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55a0b8b2dcf8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55a0b8b2d9a8 <col:22> 'int' 65535
|-CXXMethodDecl 0x55a0b8b2c088 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55a0b8b2c128 <col:59> "" ""
|-TypedefDecl 0x55a0b8b2c2a8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55a0b8b2c220 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55a0b8a4c680 'EtherAddress'
|   | `-CXXRecord 0x55a0b8b2b9d8 'EtherAddress'
|   `-ParenType 0x55a0b8b2c1c0 'bool () const' sugar
|     `-FunctionProtoType 0x55a0b8592d70 'bool () const' const cdecl
|       `-BuiltinType 0x55a0b84ea2f0 'bool'
|-CXXConversionDecl 0x55a0b8b2c3e8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55a0b8b2e4a8 <col:51, line:43:5>
|   `-ReturnStmt 0x55a0b8b2e498 <line:42:2, col:70>
|     `-ConditionalOperator 0x55a0b8b2e468 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55a0b8b2e390 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55a0b8b2e2a8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55a0b8b2e260 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55a0b8b2e248 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55a0b8b2e190 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55a0b8b2e178 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55a0b8b2e0f0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       | | |     |   `-CXXThisExpr 0x55a0b8b2e0e0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55a0b8b2e120 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55a0b8b2e290 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55a0b8b2e278 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55a0b8b2e228 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55a0b8b2e210 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55a0b8b2e1c0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       | |       |   `-CXXThisExpr 0x55a0b8b2e1b0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55a0b8b2e1f0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55a0b8b2e378 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55a0b8b2e360 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55a0b8b2e340 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55a0b8b2e328 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55a0b8b2e2d8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       |       |   `-CXXThisExpr 0x55a0b8b2e2c8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55a0b8b2e308 <col:39> 'int' 2
|       |-UnaryOperator 0x55a0b8b2e418 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55a0b8b2e3e8 <col:45, col:59> 'bool () const' CXXMethod 0x55a0b8b2c4b8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55a0b8b2e450 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55a0b8b2e430 <col:70> 'int' 0
|-CXXMethodDecl 0x55a0b8b2c4b8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55a0b8b2e668 <col:34, line:51:5>
|   `-ReturnStmt 0x55a0b8b2e658 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55a0b8b2e640 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55a0b8b2e620 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55a0b8b2e608 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a0b8b2e5f0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a0b8b2e5b0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55a0b8b2e570 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55a0b8b2e540 <col:9> '<bound member function type>' ->data 0x55a0b8b2c950
|         |     |   `-CXXThisExpr 0x55a0b8b2e530 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55a0b8b2e590 <col:16> 'int' 0
|         `-IntegerLiteral 0x55a0b8b2e5d0 <col:21> 'int' 1
|-CXXMethodDecl 0x55a0b8b2c578 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55a0b8b2e828 <col:34, line:59:5>
|   `-ReturnStmt 0x55a0b8b2e818 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55a0b8b2e800 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55a0b8b2e7e0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55a0b8b2e7c8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a0b8b2e7b0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a0b8b2e770 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55a0b8b2e730 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55a0b8b2e700 <col:9> '<bound member function type>' ->data 0x55a0b8b2c950
|         |     |   `-CXXThisExpr 0x55a0b8b2e6f0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55a0b8b2e750 <col:16> 'int' 0
|         `-IntegerLiteral 0x55a0b8b2e790 <col:21> 'int' 2
|-CXXMethodDecl 0x55a0b8b2c638 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55a0b8b2eb28 <col:38, line:66:5>
|   `-ReturnStmt 0x55a0b8b2eb18 <line:65:2, col:43>
|     `-BinaryOperator 0x55a0b8b2eaf8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55a0b8b2eab8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55a0b8b2e9d0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55a0b8b2e988 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55a0b8b2e970 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55a0b8b2e8b8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55a0b8b2e8a0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55a0b8b2e850 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       | | |     |   `-CXXThisExpr 0x55a0b8b2e840 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55a0b8b2e880 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55a0b8b2e9b8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55a0b8b2e9a0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55a0b8b2e950 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55a0b8b2e938 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55a0b8b2e8e8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       | |       |   `-CXXThisExpr 0x55a0b8b2e8d8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55a0b8b2e918 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55a0b8b2eaa0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55a0b8b2ea88 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55a0b8b2ea68 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55a0b8b2ea50 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55a0b8b2ea00 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       |       |   `-CXXThisExpr 0x55a0b8b2e9f0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55a0b8b2ea30 <col:37> 'int' 2
|       `-IntegerLiteral 0x55a0b8b2ead8 <col:43> 'int' 196605
|-CXXMethodDecl 0x55a0b8b2c7b8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55a0b8b2c6f0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55a0b8b2ec78 <col:64, line:75:5>
|   `-ReturnStmt 0x55a0b8b2ec68 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55a0b8b2ec48 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55a0b8b2ec18 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55a0b8b2c638
|         `-CXXReinterpretCastExpr 0x55a0b8b2eb88 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55a0b8b2eb70 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55a0b8b2eb40 <col:48> 'const unsigned char *' lvalue ParmVar 0x55a0b8b2c6f0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55a0b8b2c888 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55a0b8b2ed40 <col:34, line:80:5>
|   `-ReturnStmt 0x55a0b8b2ed30 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a0b8b2ed00 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55a0b8b2ece8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55a0b8b2eca0 <col:43> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|           `-CXXThisExpr 0x55a0b8b2ec90 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55a0b8b2c950 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55a0b8b2ee08 <col:46, line:85:5>
|   `-ReturnStmt 0x55a0b8b2edf8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55a0b8b2edc8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55a0b8b2edb0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55a0b8b2ed68 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|           `-CXXThisExpr 0x55a0b8b2ed58 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a0b8b2ca98 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55a0b8b2ee88 <col:42, line:91:5>
|   `-ReturnStmt 0x55a0b8b2ee78 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55a0b8b2ee60 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55a0b8b2ee30 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|         `-CXXThisExpr 0x55a0b8b2ee20 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a0b8b2cb88 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55a0b8b2f298 <col:36, line:97:5>
|   `-ReturnStmt 0x55a0b8b2f288 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55a0b8b2f268 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55a0b8b2f0e8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55a0b8b2f0c8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55a0b8b2f0b0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55a0b8b2f098 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55a0b8b2ef18 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55a0b8b2ef00 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55a0b8b2eeb0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       |   |     |   `-CXXThisExpr 0x55a0b8b2eea0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55a0b8b2eee0 <col:16> 'int' 2
|       |   `-ParenExpr 0x55a0b8b2f078 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55a0b8b2f058 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55a0b8b2f010 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55a0b8b2eff8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55a0b8b2efe0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55a0b8b2efb0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55a0b8b2ef98 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55a0b8b2ef48 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|       |       |       |   `-CXXThisExpr 0x55a0b8b2ef38 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55a0b8b2ef78 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55a0b8b2f038 <col:43> 'int' 16
|       `-ParenExpr 0x55a0b8b2f248 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55a0b8b2f228 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55a0b8b2f1e0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55a0b8b2f1c8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55a0b8b2f1b0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55a0b8b2f180 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55a0b8b2f168 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55a0b8b2f118 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55a0b8b2d248
|           |       |   `-CXXThisExpr 0x55a0b8b2f108 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55a0b8b2f148 <col:24> 'int' 0
|           `-IntegerLiteral 0x55a0b8b2f208 <col:30> 'int' 9
|-CXXMethodDecl 0x55a0b8b2cc48 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55a0b8b2f3a8 <col:35, line:111:5>
|   `-ReturnStmt 0x55a0b8b2f398 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55a0b8b2f380 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55a0b8b2f350 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a0b8b2f338 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55a0b8b2f318 <col:9, col:22> 'String' (CXXTemporary 0x55a0b8b2f318)
|             `-CXXMemberCallExpr 0x55a0b8b2f2f0 <col:9, col:22> 'String'
|               `-MemberExpr 0x55a0b8b2f2c0 <col:9> '<bound member function type>' ->unparse_dash 0x55a0b8b2cdc8
|                 `-CXXThisExpr 0x55a0b8b2f2b0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a0b8b2cd08 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55a0b8b2cdc8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55a0b8b2ce88 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55a0b8b2cf28 <col:44> "" ""
|-CXXConversionDecl 0x55a0b8b2cfc8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55a0b8b2d070 <col:51> "" ""
|-TypedefDecl 0x55a0b8b2d128 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55a0b8b2d0f0 'const EtherAddress &'
|   `-QualType 0x55a0b8a4c681 'const EtherAddress' const
|     `-RecordType 0x55a0b8a4c680 'EtherAddress'
|       `-CXXRecord 0x55a0b8b2b9d8 'EtherAddress'
|-AccessSpecDecl 0x55a0b8b2d180 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55a0b8b2d248 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55a0b8b2d398 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55a0b8b2d2a8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a0b8b2f650 <col:30, line:146:5>
|   `-BinaryOperator 0x55a0b8b2f630 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55a0b8b2f438 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55a0b8b2f420 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a0b8b2f3d0 <col:2> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|     | |   `-CXXThisExpr 0x55a0b8b2f3c0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55a0b8b2f400 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55a0b8b2f618 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55a0b8b2f5f8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55a0b8b2f4d0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55a0b8b2f4b8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55a0b8b2f468 <col:13> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|         | |   `-CXXThisExpr 0x55a0b8b2f458 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55a0b8b2f498 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55a0b8b2f5e0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55a0b8b2f5c0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55a0b8b2f568 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55a0b8b2f550 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55a0b8b2f500 <col:24> 'uint16_t [3]' lvalue ->_data 0x55a0b8b2d248
|             | |   `-CXXThisExpr 0x55a0b8b2f4f0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55a0b8b2f530 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55a0b8b2f5a8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55a0b8b2f588 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a0b8b2d2a8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55a0b8b2d9c8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55a0b8b2d9c8
| `-ParmVarDecl 0x55a0b8b2dad8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55a0b8b2db78 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8b2dc88 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55a0b8b2d248 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55a0b8b2e010 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55a0b8b2df98 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55a0b8b2df50 <col:7> 'uint16_t [3]' xvalue ._data 0x55a0b8b2d248
| |   |   `-CXXStaticCastExpr 0x55a0b8b2df20 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55a0b8b2def0 <col:7> 'EtherAddress' lvalue ParmVar 0x55a0b8b2dc88 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55a0b8b2dff8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55a0b8b2dfd8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55a0b8b2dfc0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55a0b8b2df98 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55a0b8b2df50 <col:7> 'uint16_t [3]' xvalue ._data 0x55a0b8b2d248
| |       |     `-CXXStaticCastExpr 0x55a0b8b2df20 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55a0b8b2def0 <col:7> 'EtherAddress' lvalue ParmVar 0x55a0b8b2dc88 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55a0b8b2dfb0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55a0b8b2e060 <col:7>
`-CXXDestructorDecl 0x55a0b8b2dd40 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a0b885a100 prev 0x55a0b884d988 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a0b885a1f8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55a0b885a288 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55a0b885a6b0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55a0b885a2c8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55a0b885a348 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55a0b885a480 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55a0b885a530 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55a0b885a978 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55a0b885a780 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a0b885a7f8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55a0b885a898 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55a0b885f298 <col:34> 'const ArgContext' lvalue Var 0x55a0b884d920 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55a0b885ece8 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55a0b885aa40 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a0b885ab30 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55a0b885aba8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a0b885f2b8 <col:34> 'const ArgContext' lvalue Var 0x55a0b884d920 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a0b885f498 <col:46, line:375:5>
|   `-ReturnStmt 0x55a0b885f488 <line:374:2, col:63>
|     `-CallExpr 0x55a0b885f450 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55a0b885f438 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a0b885f3f0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55a0b885a978 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55a0b885f350 <col:15> 'const String' lvalue ParmVar 0x55a0b885aa40 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55a0b885f3a0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55a0b885f370 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55a0b885ab30 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55a0b885f3d0 <col:59> 'const ArgContext' lvalue ParmVar 0x55a0b885aba8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55a0b885f1c8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55a0b885edb0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a0b885f030 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55a0b885f0a8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55a0b885f2d8 <col:34> 'const ArgContext' lvalue Var 0x55a0b884d920 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55a0b8c1b268 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55a0b8c1b340 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8c1b478 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55a0b8c1b478
| `-ParmVarDecl 0x55a0b8c1b588 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55a0b8c1b628 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a0b8c1b738 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55a0b8c1c390 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8860608 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x55a0b8860868 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a0b8c1b178 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8c1b7a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x55a0b8c1b7a8
| `-ParmVarDecl 0x55a0b8c1b8b8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x55a0b8c1b958 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8c1ba68 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55a0b8c1c3a0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a0b8c1c370 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55a0b8c1c340 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8c1c310 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x55a0b8c1ba68 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x55a0b8c1c410 <col:19>
`-CXXDestructorDecl 0x55a0b8c1bb08 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a0b8b24658 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55a0b8b248b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a0b8c23d98 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a0b8c23e98 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55a0b8c23e98
| `-ParmVarDecl 0x55a0b8c23fa8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55a0b8c24048 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a0b8c24158 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55a0b8c24a90 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a0b8c24a60 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55a0b8c24a30 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55a0b8c24a00 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55a0b8c24158 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55a0b8c24b00 <col:19>
`-CXXDestructorDecl 0x55a0b8c241f8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
