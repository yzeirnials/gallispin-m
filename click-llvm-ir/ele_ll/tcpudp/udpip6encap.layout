
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb1d6c8 prev 0x5555afb12e88 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afb1d7c0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5555afb1d850 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5555afb1d8c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5555afb1d988 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5555afb1da50 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5555afb1dbc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5555afb1db00 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5555afb1dc70 <col:24>
| `-OptimizeNoneAttr 0x5555afb1dcc8 <col:34>
|-CXXMethodDecl 0x5555afb1dd10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5555afb1dfc8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5555afb1ddc0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5555afb1de38 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5555afb1deb8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5555afb1e080 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5555afb1e0b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5555afb1e120 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5555afb1e1a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5555afb1e4c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5555afb1e260 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5555afb1e2d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5555afb1e350 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5555afb1e3d0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5555afb1e5e0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5555afb26450 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5555afb26450
| `-ParmVarDecl 0x5555afb26568 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5555afb26608 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5555afb26608
| `-ParmVarDecl 0x5555afb26718 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5555afc198f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb0c0d0 prev 0x5555afb0be50 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5555afb0c1c8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5555afb0c258 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5555afb0c2b8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5555afb0c3a8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5555afb0c4a8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5555afb0c678 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5555afb0c528 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5555afb0c5a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5555afb0edd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5555afb0ed10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5555afb0ee80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5555afb0efb8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5555afb0eef0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5555afb0f158 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5555afb0f098 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5555afb0f2f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5555afb0f238 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5555afb0f3a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5555afb0f4a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5555afb0f580 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb0f480 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5555afb0f460 <col:26> 'int' 1
| `-EnumConstantDecl 0x5555afb0f530 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5555afb0f598 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afb0f510 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5555afb0f4f0 <col:44> 'int' 2
|-CXXMethodDecl 0x5555afb0f6e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5555afb0f5c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5555afb0f648 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5555afb0f838 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5555afb0f7a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5555afb0fa78 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5555afb0f8f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5555afb0f970 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5555afb0fb28 <col:20>
| `-OptimizeNoneAttr 0x5555afb0fb80 <col:30>
|-CXXMethodDecl 0x5555afb0fc88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5555afb0fbc0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5555afb0fd30 <col:20>
| `-OptimizeNoneAttr 0x5555afb0fd88 <col:30>
|-CXXMethodDecl 0x5555afb0fdd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5555afb0fea0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5555afb0ffb8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5555afb10040 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5555afb100c8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5555afb10150 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5555afb101d8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5555afb10268 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5555afb10328 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5555afb103b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5555afb10438 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5555afb104c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5555afb10548 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5555afb105d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5555afb10660 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5555afb10720 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5555afb107b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5555afb10900 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5555afb10868 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5555afb10a90 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5555afb109c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5555afb10d30 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5555afb10b48 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5555afb10bc8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5555afb10c48 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5555afb10de8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5555afb10ef0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5555afb11180 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb10ed0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5555afb10eb0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5555afb10f80 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5555afb11198 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb10f60 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5555afb10f40 <col:32> 'int' 20
| |-EnumConstantDecl 0x5555afb11010 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5555afb111b0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb10ff0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5555afb10fd0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5555afb110a0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5555afb111c8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb11080 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5555afb11060 <col:35> 'int' 100
| `-EnumConstantDecl 0x5555afb11130 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5555afb111e0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afb11110 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5555afb110f0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5555afb11220 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5555afb11660 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5555afb114d0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5555afb11548 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb11730 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5555afb118b0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5555afb117e0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb11ab8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5555afb11968 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5555afb119e0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb11bb8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5555afb11c58 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5555afb11d20 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11db0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5555afb11fe0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb11d90 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5555afb11d70 <col:36> 'int' EnumConstant 0x5555afb11d20 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11e00 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11e50 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11ea0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11ef0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5555afb11f40 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5555afb11f90 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5555afb120c8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5555afb12008 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5555afb12190 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5555afb12250 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5555afb12310 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5555afb123d0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5555afb124e8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5555afb125b0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5555afb12730 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5555afb12660 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5555afb12858 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5555afb12a58 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5555afb12908 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5555afb12988 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5555afb22908 <col:54, line:127:5>
|   |-ParenExpr 0x5555afb227b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5555afb22788 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5555afb22478 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5555afb22450 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5555afb22438 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5555afb22420 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5555afb223f0 <col:31> 'Router *' lvalue ->_router 0x5555afb1ed90
|   |   |         `-CXXThisExpr 0x5555afb223e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5555afb224d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afb224b8 <col:48> 'int' 0
|   |   `-CallExpr 0x5555afb226e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5555afb226d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afb226b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afb22728 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afb22548 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5555afb22740 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afb22568 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5555afb22758 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afb225a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5555afb22770 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afb22698 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afb22680 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afb22638 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5555afb22850 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5555afb227e8 <col:9> 'Router *' lvalue ->_router 0x5555afb1ed90
|   | | `-CXXThisExpr 0x5555afb227d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5555afb22838 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5555afb22818 <col:19> 'Router *' lvalue ParmVar 0x5555afb12908 'r' 'Router *'
|   `-BinaryOperator 0x5555afb228e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5555afb22880 <col:9> 'int' lvalue ->_eindex 0x5555afb1edf8
|     | `-CXXThisExpr 0x5555afb22870 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5555afb228d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5555afb228b0 <col:19> 'int' lvalue ParmVar 0x5555afb12988 'eindex' 'int'
|-CXXMethodDecl 0x5555afb12be0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5555afb12b18 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5555afb12d20 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5555afb12de8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5555afb12e88 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5555afb130d8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5555afb12f50 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5555afb12fd0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5555afb13188 <col:20>
| `-OptimizeNoneAttr 0x5555afb131e0 <col:30>
|-CXXMethodDecl 0x5555afb132e8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5555afb13220 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5555afb13390 <col:20>
| `-OptimizeNoneAttr 0x5555afb133e8 <col:30>
|-CXXMethodDecl 0x5555afb134b8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5555afb13428 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5555afb13560 <col:20>
| `-OptimizeNoneAttr 0x5555afb135b8 <col:30>
|-CXXMethodDecl 0x5555afb13748 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5555afb135f0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5555afb13670 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5555afb138d8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5555afb13810 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5555afb13a28 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5555afb13998 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5555afb13b78 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5555afb13ae8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5555afb13cc8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5555afb13c38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5555afb13f88 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5555afb13d80 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5555afb13e00 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5555afb13ea8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5555afb14060 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5555afb14120 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5555afb143f0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5555afb142a0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5555afb14318 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb14518 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5555afb146f0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5555afb145d0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5555afb14650 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5555afb148d8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5555afb147b8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5555afb14838 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5555afb14c48 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5555afb14998 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5555afb14a10 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5555afb14a90 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5555afb209b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb20990 <col:106> 'int' 0
| `-ParmVarDecl 0x5555afb14b08 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb209e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb209c8 <col:126> 'int' 0
|-CXXMethodDecl 0x5555afb14fc8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5555afb14d18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5555afb14d90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5555afb14e10 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5555afb14e88 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb20a20 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb20a00 <col:114> 'int' 0
|-CXXMethodDecl 0x5555afb15358 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5555afb150a0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5555afb15118 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5555afb15198 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5555afb20a38 <col:96> 'int' 0
| `-ParmVarDecl 0x5555afb15210 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb20a78 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb20a58 <col:116> 'int' 0
|-CXXMethodDecl 0x5555afb156d8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5555afb15428 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5555afb154a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb15520 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5555afb20ab0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb20a90 <col:109> 'int' 0
| `-ParmVarDecl 0x5555afb15598 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb20ae8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb20ac8 <col:129> 'int' 0
|-CXXMethodDecl 0x5555afb15a58 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5555afb157a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5555afb15820 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb158a0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5555afb15918 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb20b20 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb20b00 <col:117> 'int' 0
|-CXXMethodDecl 0x5555afb15de8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5555afb15b30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb15ba8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb15c28 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5555afb20b38 <col:99> 'int' 0
| `-ParmVarDecl 0x5555afb15ca0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5555afb20b78 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5555afb20b58 <col:119> 'int' 0
|-CXXMethodDecl 0x5555afb16208 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5555afb15eb8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5555afb15f38 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5555afb15fb0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb16030 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5555afb20bb0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb20b90 <col:108> 'int' 0
| `-ParmVarDecl 0x5555afb160b0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5555afb20be8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5555afb20bc8 <col:141> 'int' 0
|-CXXMethodDecl 0x5555afb16628 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5555afb162e0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5555afb16360 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5555afb163d8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb16458 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5555afb164d8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5555afb20c00 <col:121> 'int' 0
|-CXXMethodDecl 0x5555afb16a58 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5555afb16708 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5555afb16788 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5555afb16800 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb16880 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5555afb20c20 <col:98> 'int' 0
| `-ParmVarDecl 0x5555afb16900 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5555afb20c40 <col:123> 'int' 0
|-CXXMethodDecl 0x5555afb17d40 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5555afb16b30 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5555afb16bb0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5555afb16c30 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5555afb20c60 <col:80> 'int' 0
|-EnumDecl 0x5555afb17df8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5555afb17f00 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5555afb18190 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb17ee0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5555afb17ec0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5555afb17f90 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5555afb181a8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb17f70 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5555afb17f50 <col:40> 'int' 2
| |-EnumConstantDecl 0x5555afb18020 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5555afb181c0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb18000 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5555afb17fe0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5555afb180b0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5555afb181d8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afb18090 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5555afb18070 <col:36> 'int' 7
| `-EnumConstantDecl 0x5555afb18140 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5555afb181f0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afb18120 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5555afb18100 <col:34> 'int' 6
|-CXXMethodDecl 0x5555afb184a8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5555afb18218 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5555afb182b8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5555afb18338 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5555afb183b0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5555afb20d18 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5555afb20d00 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5555afb20ce8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5555afb20cc8 <col:98, col:105> 'String' (CXXTemporary 0x5555afb20cc8)
|           `-CXXTemporaryObjectExpr 0x5555afb20c90 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5555afb18748 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5555afb18578 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5555afb185f0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5555afb18668 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5555afb22308 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5555afb222f0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5555afb222d8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5555afb222b8 <col:94, col:101> 'String' (CXXTemporary 0x5555afb222b8)
| |         `-CXXTemporaryObjectExpr 0x5555afb22280 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5555afb22af0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5555afb22a68 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5555afb22a38 <col:9> '<bound member function type>' ->add_task_handlers 0x5555afb184a8
|     | `-CXXThisExpr 0x5555afb22a28 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5555afb22aa8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5555afb229a8 <col:27> 'Task *' lvalue ParmVar 0x5555afb18578 'task' 'Task *'
|     |-ImplicitCastExpr 0x5555afb22ac0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5555afb229c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5555afb185f0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5555afb22ad8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5555afb229e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5555afb18140 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5555afb22a08 <col:62> 'const String' lvalue ParmVar 0x5555afb18668 'prefix' 'const String &'
|-CXXMethodDecl 0x5555afb18958 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5555afb18810 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5555afb18888 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5555afb223b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5555afb223a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5555afb22388 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5555afb22368 <col:70, col:77> 'String' (CXXTemporary 0x5555afb22368)
| |         `-CXXTemporaryObjectExpr 0x5555afb22330 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5555afb22cc8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5555afb22c40 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5555afb22c10 <col:9> '<bound member function type>' ->add_task_handlers 0x5555afb184a8
|     | `-CXXThisExpr 0x5555afb22c00 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5555afb22c80 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5555afb22b80 <col:27> 'Task *' lvalue ParmVar 0x5555afb18810 'task' 'Task *'
|     |-ImplicitCastExpr 0x5555afb22c98 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5555afb22ba0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5555afb22cb0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5555afb22bc0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5555afb18140 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5555afb22be0 <col:57> 'const String' lvalue ParmVar 0x5555afb18888 'prefix' 'const String &'
|-CXXMethodDecl 0x5555afb18c38 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5555afb18a20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb18aa0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb18b18 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5555afb18ee8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5555afb18d08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb18d88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb18e08 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5555afb191d8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5555afb18fb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb19038 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb190b0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5555afb19488 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5555afb192a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb19328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb193a8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5555afb19738 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5555afb19558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb195d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb19658 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5555afb199e8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5555afb19808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb19888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb19900 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5555afb19c98 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5555afb19ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb19b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb19bb8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5555afb19f48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5555afb19d68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb19de8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb19e68 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5555afb1a228 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5555afb1a018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1a098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1a140 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5555afb1a508 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5555afb1a2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1a378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1a420 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5555afb1a770 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5555afb1a5d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5555afb1a658 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5555afb1a6d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5555afb1aa18 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5555afb1a840 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5555afb1a8c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5555afb1a938 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5555afb1acc8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5555afb1aae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1ab68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1abe8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5555afb1af78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5555afb1ad98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1ae18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1ae90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5555afb1b228 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5555afb1b048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1b0c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1b140 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5555afb1b4f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5555afb1b2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1b378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5555afb1b418 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5555afb1b828 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5555afb1b5c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5555afb1b648 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5555afb1b6c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5555afb1b738 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5555afb223d0 <col:93> 'bool' false
|-CXXMethodDecl 0x5555afb1ba10 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5555afb1b8f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5555afb1b978 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5555afb1bbe8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5555afb1bad0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5555afb1bb50 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5555afb1cf08 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5555afb1bca8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5555afb1cd60 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5555afb1cde0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5555afb1ce58 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb1d1f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5555afb1cfd8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5555afb1d050 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5555afb1d0d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5555afb1d148 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb1d430 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5555afb1d2d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5555afb1d350 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5555afb1d618 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5555afb1d4f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5555afb1d578 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5555afb1d6c8 prev 0x5555afb12e88 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5555afb1d7c0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5555afb1d850 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5555afb1d8c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5555afb1d988 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5555afb1da50 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5555afb1dbc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5555afb1db00 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5555afb1dc70 <col:24>
| | `-OptimizeNoneAttr 0x5555afb1dcc8 <col:34>
| |-CXXMethodDecl 0x5555afb1dd10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5555afb1dfc8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5555afb1ddc0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5555afb1de38 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5555afb1deb8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5555afb1e080 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5555afb1e0b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5555afb1e120 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5555afb1e1a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5555afb1e4c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5555afb1e260 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5555afb1e2d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5555afb1e350 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5555afb1e3d0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5555afb1e5e0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5555afb26450 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5555afb26450
| | `-ParmVarDecl 0x5555afb26568 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5555afb26608 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5555afb26608
| | `-ParmVarDecl 0x5555afb26718 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5555afc198f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5555afb1e658 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5555afb1e6f8 <col:38> "" ""
|-CXXMethodDecl 0x5555afb1e788 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5555afb1e828 <col:44> "" ""
|-AccessSpecDecl 0x5555afb1e898 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5555afb1e8c0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5555afb1e9c0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5555afb1ea10 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afb1e9a0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5555afb1e980 <col:27> 'int' 4
|-FieldDecl 0x5555afb1eac8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5555afb1ec78 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5555afb1ed30 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5555afb1ed90 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5555afb1edf8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5555afb1ef48 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5555afb1ee88 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5555afb1f0f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5555afb1f008 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5555afb1f2d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5555afb1f1b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5555afb1f238 <col:25> col:28 'int'
|-CXXMethodDecl 0x5555afb1f580 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb1f3a0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5555afb1f420 <col:28> col:31 'int'
| `-ParmVarDecl 0x5555afb1f498 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5555afb1f638 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5555afb1f700 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5555afb1f750 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5555afb1f7a0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5555afb1f980 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5555afb1f830 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5555afb1f8a8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb1fc28 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5555afb1fa48 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5555afb1fac8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5555afb1fb40 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb1fe48 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5555afb1fcf8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5555afb1fd78 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5555afb20180 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5555afb1ff08 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5555afb1ff88 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5555afb20000 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5555afb20080 <col:57> col:60 'int'
|-CXXMethodDecl 0x5555afb20368 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5555afb20250 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5555afb202d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5555afb204b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5555afb20428 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5555afb20838 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5555afb20578 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5555afb205f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5555afb20670 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5555afb206f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5555afb20950 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class UDPIP6Encap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in6_addr _saddr
       108 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       108 |       uint8_t [16] __u6_addr8
       108 |       uint16_t [8] __u6_addr16
       108 |       uint32_t [4] __u6_addr32
       124 |   struct in6_addr _daddr
       124 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       124 |       uint8_t [16] __u6_addr8
       124 |       uint16_t [8] __u6_addr16
       124 |       uint32_t [4] __u6_addr32
       140 |   uint16_t _sport
       142 |   uint16_t _dport
       144 |   _Bool _use_dst_anno
           | [sizeof=152, dsize=145, align=8,
           |  nvsize=145, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7d47f8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5555af7d4a18 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x5555af7d4b48 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x5555af7d4c78 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x5555afa964d8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x5555afa96ce8 <col:5>
|-CXXDestructorDecl 0x5555afa965b0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5555afa966b8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa967c8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x5555afb43700 <col:5>
|-CXXConstructorDecl 0x5555afa96868 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa96978 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x5555afb4e4f8 <col:5>
|-CXXMethodDecl 0x5555afa97418 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa97528 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x5555afb52300 <col:5>
|   `-ReturnStmt 0x5555afb522f0 <col:5>
|     `-UnaryOperator 0x5555afb522d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afb522c8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x5555afa97598 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x5555afa97598
  `-ParmVarDecl 0x5555afa976a8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7d4650 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555af7d4768 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x5555af7d47f8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5555af7d4a18 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x5555af7d4b48 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x5555af7d4c78 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x5555afa964d8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5555afa96ce8 <col:5>
| |-CXXDestructorDecl 0x5555afa965b0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5555afa966b8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555afa967c8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x5555afb43700 <col:5>
| |-CXXConstructorDecl 0x5555afa96868 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555afa96978 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x5555afb4e4f8 <col:5>
| |-CXXMethodDecl 0x5555afa97418 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555afa97528 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x5555afb52300 <col:5>
| |   `-ReturnStmt 0x5555afb522f0 <col:5>
| |     `-UnaryOperator 0x5555afb522d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5555afb522c8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x5555afa97598 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x5555afa97598
|   `-ParmVarDecl 0x5555afa976a8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x5555af7d4d38 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x5555afa963e8 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5555af7d4d38 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5555afa96cf8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x5555afa96d50 <col:8>
|-CXXConstructorDecl 0x5555afa969e8 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa96ac8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x5555af7d4d38 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5555afb43710 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x5555afb436d0 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
| |     `-DeclRefExpr 0x5555afb436b0 <col:8> 'const in6_addr' lvalue ParmVar 0x5555afa96ac8 '' 'const in6_addr &'
| `-CompoundStmt 0x5555afb43770 <col:8>
|-CXXConstructorDecl 0x5555afa96b68 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa96c78 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x5555af7d4d38 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5555afb4e508 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x5555afb4e4c8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x5555af7d4d38
| |     `-CXXStaticCastExpr 0x5555afb4e498 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5555afb4e468 <col:8> 'in6_addr' lvalue ParmVar 0x5555afa96c78 '' 'in6_addr &&'
| `-CompoundStmt 0x5555afb4e568 <col:8>
|-CXXMethodDecl 0x5555afa97718 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afa97828 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x5555afb52378 <col:8>
|   |-CXXMemberCallExpr 0x5555afb52318 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x5555afb52258 <col:8> '<bound member function type>' .operator= 0x5555afa97418
|   | | `-MemberExpr 0x5555afb52168 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x5555af7d4d38
|   | |   `-CXXThisExpr 0x5555afb52158 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x5555afb52228 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|   |   `-DeclRefExpr 0x5555afb52208 <col:8> 'const in6_addr' lvalue ParmVar 0x5555afa97828 '' 'const in6_addr &'
|   `-ReturnStmt 0x5555afb52368 <col:8>
|     `-UnaryOperator 0x5555afb52350 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afb52340 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x5555afa97898 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x5555afa97898
| `-ParmVarDecl 0x5555afa979a8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x5555afb42d98 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb57460 <../elements/tcpudp/udpip6encap.hh:56:1, line:86:1> line:56:7 class UDPIP6Encap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5555afb575b8 <col:1, col:7> col:7 implicit referenced class UDPIP6Encap
|-AccessSpecDecl 0x5555afb57648 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x5555afb576d0 <line:58:5, col:17> col:5 UDPIP6Encap 'void ()'
|-CXXDestructorDecl 0x5555afb577c0 <line:59:5, col:18> col:5 ~UDPIP6Encap 'void ()' noexcept-unevaluated 0x5555afb577c0
| `-Overrides: [ 0x5555afb0c3a8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5555afb578f0 <line:61:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5555afb0fdd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5555afb58878 <col:36, col:60>
|   `-ReturnStmt 0x5555afb58868 <col:38, col:45>
|     `-ImplicitCastExpr 0x5555afb58850 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5555afb58828 <col:45> 'const char [12]' lvalue "UDPIP6Encap"
|-CXXMethodDecl 0x5555afb579b8 <line:62:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5555afb0fea0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5555afb588d8 <col:36, col:56>
|   `-ReturnStmt 0x5555afb588c8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5555afb588b0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5555afb58890 <col:45> 'const char []' lvalue Var 0x5555afb10150 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5555afb57a80 <line:63:5, col:45> col:17 flags 'const char *() const'
| |-Overrides: [ 0x5555afb107b0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5555afb58938 <col:31, col:45>
|   `-ReturnStmt 0x5555afb58928 <col:33, col:40>
|     `-ImplicitCastExpr 0x5555afb58910 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5555afb588f0 <col:40> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x5555afb57d50 <line:65:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5555afb11660 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5555afb57c00 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5555afb57c78 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5555afb57e20 <line:66:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5555afb14120 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5555afb58970 <col:39, col:54>
|   `-ReturnStmt 0x5555afb58960 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5555afb58950 <col:48> 'bool' true
|-CXXMethodDecl 0x5555afb57ee0 <line:67:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5555afb11730 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5555afb58020 <line:69:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5555afb0efb8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5555afb57f90 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5555afb580c8 <line:71:3, col:10> col:3 private
|-FieldDecl 0x5555afb58110 <line:73:5, col:21> col:21 _saddr 'struct in6_addr':'in6_addr'
|-FieldDecl 0x5555afb58180 <line:74:5, col:21> col:21 _daddr 'struct in6_addr':'in6_addr'
|-FieldDecl 0x5555afb581e0 <line:75:5, col:14> col:14 _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5555afb58240 <line:76:5, col:14> col:14 _dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5555afb582a0 <line:77:5, col:10> col:10 _use_dst_anno 'bool'
|-CXXMethodDecl 0x5555afb58418 <line:83:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5555afb58300 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x5555afb58380 <col:43, col:48> col:49 'void *'
|-CXXConstructorDecl 0x5555afb584f8 <line:56:7> col:7 implicit UDPIP6Encap 'void (const UDPIP6Encap &)' inline default_delete noexcept-unevaluated 0x5555afb584f8
| `-ParmVarDecl 0x5555afb58608 <col:7> col:7 'const UDPIP6Encap &'
`-CXXMethodDecl 0x5555afb586a8 <col:7> col:7 implicit operator= 'UDPIP6Encap &(const UDPIP6Encap &)' inline default_delete noexcept-unevaluated 0x5555afb586a8
  `-ParmVarDecl 0x5555afb587b8 <col:7> col:7 'const UDPIP6Encap &'

Layout: <CGRecordLayout
  LLVMType:%class.UDPIP6Encap = type <{ %class.Element.base, %struct.in6_addr, %struct.in6_addr, i16, i16, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.UDPIP6Encap.base = type <{ %class.Element.base, %struct.in6_addr, %struct.in6_addr, i16, i16, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af8e4330 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5555af8e4448 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5555af8e44e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5555af8e4548 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5555af8e45a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5555af8e4658 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af8e4960 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555af8e4a78 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5555af8e4b20 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5555af8e4b88 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5555af8e4c18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5555af8e71b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5555af8e75e8 <col:12>
|-CXXConstructorDecl 0x5555af8e72b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555af8e73c8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5555af8e4b20 'data' 'const char *'
| | `-ImplicitCastExpr 0x5555af8eba50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5555af8eba20 <col:12> 'const char *const' lvalue .data 0x5555af8e4b20
| |     `-DeclRefExpr 0x5555af8eba00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5555af8e4b88 'length' 'int'
| | `-ImplicitCastExpr 0x5555af8ebae0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5555af8ebab0 <col:12> 'const int' lvalue .length 0x5555af8e4b88
| |     `-DeclRefExpr 0x5555af8eba90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5555af8e4c18 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5555af8ebb70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5555af8ebb40 <col:12> 'String::memo_t *const' lvalue .memo 0x5555af8e4c18
| |     `-DeclRefExpr 0x5555af8ebb20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5555af8ebbc8 <col:12>
|-CXXConstructorDecl 0x5555af8e7468 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5555af8e7468
| `-ParmVarDecl 0x5555af8e7578 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5555af8f0950 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5555af8fa348 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555af8fa458 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5555af8fa990 <col:12>
|   |-BinaryOperator 0x5555af8fa7a8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5555af8fa760 <col:12> 'const char *' lvalue ->data 0x5555af8e4b20
|   | | `-CXXThisExpr 0x5555af8fa750 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5555af8fa790 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5555af8fa720 <col:12> 'const char *const' lvalue .data 0x5555af8e4b20
|   |     `-DeclRefExpr 0x5555af8fa700 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5555af8fa870 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5555af8fa828 <col:12> 'int' lvalue ->length 0x5555af8e4b88
|   | | `-CXXThisExpr 0x5555af8fa818 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5555af8fa858 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5555af8fa7e8 <col:12> 'const int' lvalue .length 0x5555af8e4b88
|   |     `-DeclRefExpr 0x5555af8fa7c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5555af8fa938 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5555af8fa8f0 <col:12> 'String::memo_t *' lvalue ->memo 0x5555af8e4c18
|   | | `-CXXThisExpr 0x5555af8fa8e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5555af8fa920 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5555af8fa8b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5555af8e4c18
|   |     `-DeclRefExpr 0x5555af8fa890 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5555af8fa980 <col:12>
|     `-UnaryOperator 0x5555af8fa968 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555af8fa958 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5555af8fa4c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5555af8fa4c8
  `-ParmVarDecl 0x5555af8fa5d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af8d9f80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5555af8da098 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5555af8da128 <col:16, col:22> col:16 public
|-TypedefDecl 0x5555af8da168 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5555af5a8dc0 'const char *'
|   `-QualType 0x5555af5a8311 'const char' const
|     `-BuiltinType 0x5555af5a8310 'char'
|-TypedefDecl 0x5555af8da1f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5555af8da1c0 'String::const_iterator' sugar
|   |-Typedef 0x5555af8da168 'const_iterator'
|   `-PointerType 0x5555af5a8dc0 'const char *'
|     `-QualType 0x5555af5a8311 'const char' const
|       `-BuiltinType 0x5555af5a8310 'char'
|-TypedefDecl 0x5555af8da360 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5555af8da2d0 'int (String::*)() const'
|   |-RecordType 0x5555af8da010 'String'
|   | `-CXXRecord 0x5555af8d9f80 'String'
|   `-ParenType 0x5555af8da270 'int () const' sugar
|     `-FunctionProtoType 0x5555af8afe50 'int () const' const cdecl
|       `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555af8da3c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5555af6fe3f0 'int64_t' sugar
|   |-Typedef 0x5555af6112d0 'int64_t'
|   `-TypedefType 0x5555af5ea4d0 '__int64_t' sugar
|     |-Typedef 0x5555af5ea0a8 '__int64_t'
|     `-BuiltinType 0x5555af5a8390 'long'
|-TypedefDecl 0x5555af8da430 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5555af6fe310 'uint64_t' sugar
|   |-Typedef 0x5555af611470 'uint64_t'
|   `-TypedefType 0x5555af5ea560 '__uint64_t' sugar
|     |-Typedef 0x5555af5ea118 '__uint64_t'
|     `-BuiltinType 0x5555af5a8430 'unsigned long'
|-TypedefDecl 0x5555af8da4c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5555af8da490 'String::intmax_t' sugar
|   |-Typedef 0x5555af8da3c8 'intmax_t'
|   `-TypedefType 0x5555af6fe3f0 'int64_t' sugar
|     |-Typedef 0x5555af6112d0 'int64_t'
|     `-TypedefType 0x5555af5ea4d0 '__int64_t' sugar
|       |-Typedef 0x5555af5ea0a8 '__int64_t'
|       `-BuiltinType 0x5555af5a8390 'long'
|-TypedefDecl 0x5555af8da550 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5555af8da520 'String::uintmax_t' sugar
|   |-Typedef 0x5555af8da430 'uintmax_t'
|   `-TypedefType 0x5555af6fe310 'uint64_t' sugar
|     |-Typedef 0x5555af611470 'uint64_t'
|     `-TypedefType 0x5555af5ea560 '__uint64_t' sugar
|       |-Typedef 0x5555af5ea118 '__uint64_t'
|       `-BuiltinType 0x5555af5a8430 'unsigned long'
|-CXXConstructorDecl 0x5555af8da610 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5555af8da7b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5555af8da6f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5555af8da9b0 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5555af8da8a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5555af8dab08 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5555af8daa78 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5555af8dad28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5555af8dabd0 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5555af8dac50 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5555af8daf48 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5555af8dadf8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5555af8dae78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5555af8db168 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5555af8db018 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5555af8db098 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5555af8db388 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5555af8db238 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5555af8db2b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5555af8db518 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5555af8db450 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5555af8db698 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5555af8db5d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5555af8db828 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5555af8db760 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5555af8db980 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5555af8db8f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5555af8dbad8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5555af8dba48 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5555af8dbc30 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5555af8dbba0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5555af8dbdb8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5555af8dbcf8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5555af8dbf48 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5555af8dbe80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5555af8dc0d8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5555af8dc010 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5555af8dc268 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5555af8dc1a0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5555af8dc360 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5555af8dc488 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5555af8dc608 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5555af8dc540 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5555af8dc758 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5555af8dc6c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5555af8dc800 <col:63> "" ""
|-CXXMethodDecl 0x5555af8dc948 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5555af8dc888 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5555af8dcb58 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5555af8dca08 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5555af8dca88 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5555af8dcd78 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5555af8dcc20 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5555af8dcca0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5555af8dd058 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5555af8dce38 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5555af8dceb8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5555af8e6c80 <col:55> 'int' 10
| `-ParmVarDecl 0x5555af8dcf30 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5555af8e6ca0 <col:76> 'bool' true
|-CXXMethodDecl 0x5555af8dd338 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5555af8dd120 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5555af8dd1a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5555af8e6cb0 <col:56> 'int' 10
| `-ParmVarDecl 0x5555af8dd218 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5555af8e6cd0 <col:77> 'bool' true
|-CXXMethodDecl 0x5555af8dd440 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5555af8dd508 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5555af8dd5d0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5555af8dd670 <col:20>
| `-OptimizeNoneAttr 0x5555af8dd6c8 <col:30>
|-CXXConversionDecl 0x5555af8dd7b8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5555af8dd888 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5555af8dd948 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5555af8dda38 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5555af8ddaf8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5555af8ddc78 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5555af8ddbb0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5555af8dddc8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5555af8ddd38 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5555af8ddeb8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5555af8ddf78 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5555af8de1c8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5555af8de030 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5555af8de0b0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5555af8de428 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5555af8de290 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5555af8de310 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5555af8de4f8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5555af8de708 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5555af8de5b0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5555af8de630 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5555af8df9d0 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5555af8de7d0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5555af8de850 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5555af8dfb58 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5555af8dfa98 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5555af8dfc48 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5555af8dfdb8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5555af8dfcf8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5555af8dffc8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5555af8dfe78 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5555af8dfef8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5555af8e01e0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5555af8e0088 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5555af8e0100 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5555af8e0370 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5555af8e02a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5555af8e0590 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5555af8e0430 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5555af8e04b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5555af8e06e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5555af8e0650 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5555af8e08b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5555af8e07a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5555af8e0820 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5555af8e0a08 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5555af8e0978 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5555af8e0c20 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5555af8e0ac0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5555af8e0b40 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5555af8e6ce0 <col:39> 'int' 0
|-CXXMethodDecl 0x5555af8e0e40 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5555af8e0ce0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5555af8e0d60 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5555af8e6d00 <col:48> 'int' 0
|-CXXMethodDecl 0x5555af8e1020 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5555af8e0f00 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5555af8e0f80 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5555af8e6d20 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5555af8e10f0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5555af8e11b0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5555af8e1270 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5555af8e1330 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5555af8e13f0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5555af8e1598 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5555af8e14a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5555af8e1718 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5555af8e1650 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5555af8e1898 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5555af8e17d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5555af8e1a18 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5555af8e1950 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5555af8e1b60 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5555af8e1ad0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5555af8e1cb0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5555af8e1c20 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5555af8e1e88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5555af8e1d70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5555af8e1df0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5555af8e2068 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5555af8e1f50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5555af8e1fd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5555af8e21b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5555af8e2128 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5555af8e23c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5555af8e2278 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5555af8e22f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5555af8e2528 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5555af8e2490 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5555af8e2680 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5555af8e25e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5555af8e2728 <col:57> "" ""
|-CXXMethodDecl 0x5555af8e2838 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5555af8e27a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5555af8e2988 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5555af8e28f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5555af8e2b08 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5555af8e2a40 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5555af8e2bd0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5555af8e2c90 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5555af8e2d50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5555af8e2df0 <col:49> "" ""
|-CXXMethodDecl 0x5555af8e2e80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5555af8e2f40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5555af8e3030 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5555af8e30f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5555af8e31b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5555af8e3278 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5555af8e3370 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5555af8e3438 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5555af8e3500 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5555af8e36d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5555af8e35b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5555af8e3638 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5555af8e3900 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5555af8e37a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5555af8e3820 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5555af8e42a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5555af8e4308 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5555af8e4330 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5555af8e4448 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5555af8e44e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5555af8e4548 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5555af8e45a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5555af8e4658 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5555af8e46c0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5555af8e48f8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5555af8e4948 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555af8e48d8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5555af8e47e8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5555af8e4790 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5555af8e47d0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5555af8e47b0 <col:32> 'int' 8
|-CXXRecordDecl 0x5555af8e4960 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5555af8e4a78 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5555af8e4b20 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5555af8e4b88 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5555af8e4c18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5555af8e71b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5555af8e75e8 <col:12>
| |-CXXConstructorDecl 0x5555af8e72b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555af8e73c8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5555af8e4b20 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5555af8eba50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5555af8eba20 <col:12> 'const char *const' lvalue .data 0x5555af8e4b20
| | |     `-DeclRefExpr 0x5555af8eba00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5555af8e4b88 'length' 'int'
| | | `-ImplicitCastExpr 0x5555af8ebae0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5555af8ebab0 <col:12> 'const int' lvalue .length 0x5555af8e4b88
| | |     `-DeclRefExpr 0x5555af8eba90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5555af8e4c18 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5555af8ebb70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5555af8ebb40 <col:12> 'String::memo_t *const' lvalue .memo 0x5555af8e4c18
| | |     `-DeclRefExpr 0x5555af8ebb20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8e73c8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5555af8ebbc8 <col:12>
| |-CXXConstructorDecl 0x5555af8e7468 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5555af8e7468
| | `-ParmVarDecl 0x5555af8e7578 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5555af8f0950 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5555af8fa348 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555af8fa458 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5555af8fa990 <col:12>
| |   |-BinaryOperator 0x5555af8fa7a8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5555af8fa760 <col:12> 'const char *' lvalue ->data 0x5555af8e4b20
| |   | | `-CXXThisExpr 0x5555af8fa750 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5555af8fa790 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5555af8fa720 <col:12> 'const char *const' lvalue .data 0x5555af8e4b20
| |   |     `-DeclRefExpr 0x5555af8fa700 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5555af8fa870 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5555af8fa828 <col:12> 'int' lvalue ->length 0x5555af8e4b88
| |   | | `-CXXThisExpr 0x5555af8fa818 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5555af8fa858 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5555af8fa7e8 <col:12> 'const int' lvalue .length 0x5555af8e4b88
| |   |     `-DeclRefExpr 0x5555af8fa7c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5555af8fa938 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5555af8fa8f0 <col:12> 'String::memo_t *' lvalue ->memo 0x5555af8e4c18
| |   | | `-CXXThisExpr 0x5555af8fa8e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5555af8fa920 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5555af8fa8b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5555af8e4c18
| |   |     `-DeclRefExpr 0x5555af8fa890 <col:12> 'const String::rep_t' lvalue ParmVar 0x5555af8fa458 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5555af8fa980 <col:12>
| |     `-UnaryOperator 0x5555af8fa968 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5555af8fa958 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5555af8fa4c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5555af8fa4c8
|   `-ParmVarDecl 0x5555af8fa5d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5555af8e4c90 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5555af8e4ed8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5555af8e4cf8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5555af8e4d78 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5555af8e4df0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5555af8e7170 <col:79, line:261:5>
|   |-BinaryOperator 0x5555af8e6de8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5555af8e6d80 <col:2, col:5> 'const char *' lvalue .data 0x5555af8e4b20
|   | | `-MemberExpr 0x5555af8e6d50 <col:2> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|   | |   `-CXXThisExpr 0x5555af8e6d40 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5555af8e6dd0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5555af8e6db0 <col:12> 'const char *' lvalue ParmVar 0x5555af8e4cf8 'data' 'const char *'
|   |-BinaryOperator 0x5555af8e6eb0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5555af8e6e48 <col:2, col:5> 'int' lvalue .length 0x5555af8e4b88
|   | | `-MemberExpr 0x5555af8e6e18 <col:2> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|   | |   `-CXXThisExpr 0x5555af8e6e08 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5555af8e6e98 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5555af8e6e78 <col:14> 'int' lvalue ParmVar 0x5555af8e4d78 'length' 'int'
|   `-IfStmt 0x5555af8e7158 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5555af8e6fd0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5555af8e6fb8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5555af8e6f98 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5555af8e6f78 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5555af8e6f10 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|     |       | `-MemberExpr 0x5555af8e6ee0 <col:7> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|     |       |   `-CXXThisExpr 0x5555af8e6ed0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5555af8e6f60 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5555af8e6f40 <col:17> 'String::memo_t *' lvalue ParmVar 0x5555af8e4df0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5555af8e7130 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5555af8e7118 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5555af8e7020 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5555af8d2bf8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5555af8e7088 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5555af8e44e8
|         `-ImplicitCastExpr 0x5555af8e7070 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5555af8e7050 <col:27> 'String::memo_t *' lvalue ParmVar 0x5555af8e4df0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5555af8e5188 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5555af8e4fa8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5555af8e5028 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5555af8e50a0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5555af8e4c90 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5555af8e75f8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5555af8e7788 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5555af8e76f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5555af8e7660 <col:2> '<bound member function type>' ->assign_memo 0x5555af8e4ed8
|     | `-ImplicitCastExpr 0x5555af8e7728 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5555af8e7650 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5555af8e7740 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5555af8e7690 <col:14> 'const char *' lvalue ParmVar 0x5555af8e4fa8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5555af8e7758 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5555af8e76b0 <col:20> 'int' lvalue ParmVar 0x5555af8e5028 'length' 'int'
|     `-ImplicitCastExpr 0x5555af8e7770 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5555af8e76d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5555af8e50a0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5555af8e5318 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5555af8e5258 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5555af8e79e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5555af8e7960 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5555af8e77b0 <col:2> '<bound member function type>' ->assign_memo 0x5555af8e4ed8
|     | `-CXXThisExpr 0x5555af8e77a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5555af8e7998 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5555af8e7830 <col:14, col:19> 'const char *' lvalue .data 0x5555af8e4b20
|     |   `-MemberExpr 0x5555af8e7800 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5555af8e4c90
|     |     `-DeclRefExpr 0x5555af8e77e0 <col:14> 'const String' lvalue ParmVar 0x5555af8e5258 'x' 'const String &'
|     |-ImplicitCastExpr 0x5555af8e79b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5555af8e78b0 <col:25, col:30> 'int' lvalue .length 0x5555af8e4b88
|     |   `-MemberExpr 0x5555af8e7880 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5555af8e4c90
|     |     `-DeclRefExpr 0x5555af8e7860 <col:25> 'const String' lvalue ParmVar 0x5555af8e5258 'x' 'const String &'
|     `-ImplicitCastExpr 0x5555af8e79c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5555af8e7930 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|         `-MemberExpr 0x5555af8e7900 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5555af8e4c90
|           `-DeclRefExpr 0x5555af8e78e0 <col:38> 'const String' lvalue ParmVar 0x5555af8e5258 'x' 'const String &'
|-CXXMethodDecl 0x5555af8e53e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5555af8ea280 <col:31, line:278:5>
|   `-IfStmt 0x5555af8ea268 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5555af8e7a80 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5555af8e7a68 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5555af8e7a38 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|     |     `-MemberExpr 0x5555af8e7a08 <col:6> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|     |       `-CXXThisExpr 0x5555af8e79f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5555af8ea240 <col:15, line:277:2>
|       |-ParenExpr 0x5555af8e7f30 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5555af8e7f00 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5555af8e7b90 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5555af8e7b78 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5555af8e7b60 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5555af8e7b20 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5555af8e44e8
|       |   |       `-ImplicitCastExpr 0x5555af8e7b08 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5555af8e7ad8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|       |   |           `-MemberExpr 0x5555af8e7aa8 <col:27> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|       |   |             `-CXXThisExpr 0x5555af8e7a98 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5555af8e7bf0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5555af8e7bd0 <col:54> 'int' 0
|       |   `-CallExpr 0x5555af8e7e60 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5555af8e7e48 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5555af8e7dc8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5555af8e7ea0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5555af8e7cd8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5555af8e7eb8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5555af8e7d08 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5555af8e7ed0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5555af8e7d40 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5555af8e7ee8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5555af8e7db0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5555af8e7d98 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5555af8e7d60 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5555af8ea160 <line:274:6, line:275:22>
|       | |-CallExpr 0x5555af8e8140 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5555af8e8128 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5555af8e80a0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5555af8d6ca0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5555af8e8070 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5555af8e44e8
|       | |   `-ImplicitCastExpr 0x5555af8e8058 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5555af8e8028 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|       | |       `-MemberExpr 0x5555af8e7ff8 <col:40> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|       | |         `-CXXThisExpr 0x5555af8e7fe8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5555af8ea120 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5555af8e8228 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5555af8e8168 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5555af8e60b8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5555af8ea148 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5555af8e81c8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|       |       `-MemberExpr 0x5555af8e8198 <col:15> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|       |         `-CXXThisExpr 0x5555af8e8188 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5555af8ea220 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5555af8ea1b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5555af8e4c18
|         | `-MemberExpr 0x5555af8ea188 <col:6> 'String::rep_t' lvalue ->_r 0x5555af8e4c90
|         |   `-CXXThisExpr 0x5555af8ea178 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5555af8ea208 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5555af8ea1e8 <col:16> 'int' 0
|-CXXMethodDecl 0x5555af8e5678 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5555af8e5498 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5555af8e5518 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5555af8e5590 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5555af8e5750 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5555af8e59a0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5555af8e5808 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5555af8e5888 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5555af8e5900 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5555af8e5b88 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5555af8e5a70 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5555af8e5af0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5555af8e5c88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5555af8ea358 <col:41, line:286:5>
|   `-ReturnStmt 0x5555af8ea348 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5555af8ea318 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5555af8ea2e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5555af8ea2c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5555af8ea2a8 <col:46> 'int' 1
|-CXXMethodDecl 0x5555af8e5f28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5555af8e5d40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5555af8e5dc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5555af8e5e40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5555af8e60b8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5555af8e5ff0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5555af8e6188 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5555af8e6358 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5555af8e6240 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5555af8e62c0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5555af8e6418 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5555af8e64e0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5555af8e65e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5555af8e6660 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5555af8e66d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5555af8e6740 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5555af8e6840 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5555af8e6890 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555af8e6820 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5555af8e6800 <col:22> 'int' 14
|-CXXMethodDecl 0x5555af8e6aa8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5555af8e68c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5555af8e6940 <col:38> col:41 'int'
| `-ParmVarDecl 0x5555af8e69c0 <col:43> col:46 'int'
|-FriendDecl 0x5555af8e6bb0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5555af8e6c40 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555af9a97e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5555af9a99b8 prev 0x5555af9a97e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5555af9a9a48 <col:46, col:52> col:46 public
|-TypedefDecl 0x5555af9a9a70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afb85880 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5555afb85830 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5555af9ab360 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5555af9a9c88 'type'
|     `-SubstTemplateTypeParmType 0x5555af9a9c50 'String' sugar
|       |-TemplateTypeParmType 0x5555af89f2d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af89f278 'T'
|       `-RecordType 0x5555af8da010 'String'
|         `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb85938 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5555afb85900 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5555afb858e0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5555afb85880 'type'
|     `-ElaboratedType 0x5555afb85830 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5555af9ab360 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5555af9a9c88 'type'
|         `-SubstTemplateTypeParmType 0x5555af9a9c50 'String' sugar
|           |-TemplateTypeParmType 0x5555af89f2d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5555af89f278 'T'
|           `-RecordType 0x5555af8da010 'String'
|             `-CXXRecord 0x5555af8d9f80 'String'
|-CXXMethodDecl 0x5555afb85ab8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5555afb859c8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5555afb85ba8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5555afb85c88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5555afb85c88
|-CXXMethodDecl 0x5555afb85f58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5555afb85e60 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5555afb86198 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5555afb86010 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afb86088 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb86368 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5555afb86258 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afb862d0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb864c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5555afb86598 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5555afb867e8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5555afb86658 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5555afb866d0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb86a48 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5555afb868b8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5555afb86930 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb86c08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5555afb86b18 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb86dc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5555afb86cd0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb86e80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5555afb86f30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5555afb87168 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5555afb86fe0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afb87058 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5555afb87408 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5555afb87310 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5555afb874d0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5555afb87520 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5555afb87570 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555afb112d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5555af9a8248 prev 0x5555afb112d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5555af9a9750 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5555af9a9700 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5555af9a96e0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5555af9a9590 'type'
|     `-SubstTemplateTypeParmType 0x5555af9a9420 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5555af875dc0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5555af875d68 'F'
|       `-RecordType 0x5555af9a9080 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5555af9a8fa0 'typed_array_memory'
|-FieldDecl 0x5555afb875c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5555afb87610 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5555afb87648 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|   |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5555af8acfe8 'T'
|   `-RecordType 0x5555af8da010 'String'
|     `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb876d8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5555afb876a0 'String &'
|   `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-RecordType 0x5555af8da010 'String'
|       `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb87768 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5555afb87730 'const String &'
|   `-QualType 0x5555af9a82e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-RecordType 0x5555af8da010 'String'
|         `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb877f8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5555afb877c0 'String *'
|   `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-RecordType 0x5555af8da010 'String'
|       `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb87888 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5555afb87850 'const String *'
|   `-QualType 0x5555af9a82e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-RecordType 0x5555af8da010 'String'
|         `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb884e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5555afb88490 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5555afb88470 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5555afb883a8 'type'
|     `-LValueReferenceType 0x5555afb88370 'const String &'
|       `-QualType 0x5555afb88111 'const String' const
|         `-SubstTemplateTypeParmType 0x5555afb88110 'String' sugar
|           |-TemplateTypeParmType 0x5555af880330 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5555af8802d8 'T'
|           `-RecordType 0x5555af8da010 'String'
|             `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb88548 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5555afb87730 'const String &'
|   `-QualType 0x5555af9a82e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-RecordType 0x5555af8da010 'String'
|         `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb885a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afb88608 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5555afb877c0 'String *'
|   `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-RecordType 0x5555af8da010 'String'
|       `-CXXRecord 0x5555af8d9f80 'String'
|-TypedefDecl 0x5555afb88670 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5555afb87850 'const String *'
|   `-QualType 0x5555af9a82e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5555af9a82e0 'String' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-RecordType 0x5555af8da010 'String'
|         `-CXXRecord 0x5555af8d9f80 'String'
|-EnumDecl 0x5555afb886c8 <line:134:5> col:5
| `-EnumConstantDecl 0x5555afb887c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5555afb887a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5555af8ae208 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5555af8ae1e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5555af8ae1c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5555afb88848 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5555afb88ad8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afb88900 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afb889a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5555afb88d68 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5555afb88c50 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5555afb89028 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5555afb88f10 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5555afb89340 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5555afb89220 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5555afb89650 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5555afb89530 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5555afb89940 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afb89788 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afb89800 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5555afb89a68 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5555afb89b18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb89b70 <col:30> Inherited
|-CXXMethodDecl 0x5555afb89bb8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5555afb89c68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb89cc0 <col:30> Inherited
|-CXXMethodDecl 0x5555afb89d88 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5555afb89e38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb89e90 <col:30> Inherited
|-CXXMethodDecl 0x5555afb89ed8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5555afb89f88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb89fe0 <col:30> Inherited
|-CXXMethodDecl 0x5555afb8a028 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5555afb8a0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb8a130 <col:30> Inherited
|-CXXMethodDecl 0x5555afb8a178 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5555afb8a228 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afb8a280 <col:30> Inherited
|-CXXMethodDecl 0x5555afb8a2a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5555afb8a358 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5555afb8a408 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5555afb8a5c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afb8a4b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afb8a530 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5555afb8a718 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5555afb8a688 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afb8a8c8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5555afb8a7d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5555afb8a980 <col:20>
| `-OptimizeNoneAttr 0x5555afb8a9d8 <col:30>
|-CXXMethodDecl 0x5555afb8aaf8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5555afb8aa00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5555afb8abb0 <col:20>
| `-OptimizeNoneAttr 0x5555afb8ac08 <col:30>
|-CXXMethodDecl 0x5555afb8acc0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5555afb8ac30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afb8ae08 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5555afb8ad78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afb8af38 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5555afb8b038 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5555afb8b108 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5555afb8b1d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5555afb8b318 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5555afb8b288 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afb8b460 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5555afb8b3d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afb8b5a8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5555afb8b518 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5555afb8b660 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5555afb8b760 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5555afb8b6d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5555afb8b818 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5555afb8b8d8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5555afb8b9d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5555afb8bb58 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5555afb8ba98 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5555afb8c318 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5555afb8bc10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5555afb8c278 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5555afb8c178 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5555afb8c3f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5555afb8c548 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5555afb8c4b8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5555afb8c600 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5555afb8c848 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afb8c6c0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5555afb8c738 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5555afb8c9d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5555afb8c918 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5555afb8cbe8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5555afb8caa0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5555afb8cb18 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5555afb8cca8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5555afb8cf08 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5555afb8ce10 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5555afb8cfd8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5555afb8cfd8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afc07268 prev 0x5555afb98e78 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5555afc07360 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5555afc073f0 <col:22, col:28> col:22 public
|-EnumDecl 0x5555afc07418 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5555afc07538 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07518 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5555afc07500 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5555afc074e0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5555afc075e0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc075c0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5555afc075a8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5555afc07588 <col:14> 'int' 1
| |-EnumConstantDecl 0x5555afc07670 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07650 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5555afc07630 <col:17> 'int' 0
| |-EnumConstantDecl 0x5555afc07700 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc076e0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5555afc076c0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5555afc07790 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07770 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5555afc07750 <col:16> 'int' 2
| |-EnumConstantDecl 0x5555afc07820 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07800 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5555afc077e0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5555afc078b0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07890 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5555afc07870 <col:15> 'int' 4
| |-EnumConstantDecl 0x5555afc07940 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc07920 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5555afc07900 <col:14> 'int' 5
| |-EnumConstantDecl 0x5555afc079d0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5555afc079b0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5555afc07990 <col:12> 'int' 6
| `-EnumConstantDecl 0x5555afc07a60 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5555afc07a40 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5555afc07a20 <col:13> 'int' 7
|-VarDecl 0x5555afc07ad0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5555afc07b58 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5555afc07be0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5555afc07c68 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5555afc07cf0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5555afc07d78 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5555afc07e00 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5555afc07e88 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5555afc07f10 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5555afc07f98 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5555afc08020 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5555afc08120 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5555afc0d428 '_nerrors' 'int'
| | `-IntegerLiteral 0x5555afc0dbb8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5555afc0dc28 <col:16, line:129:5>
|-CXXDestructorDecl 0x5555afc08210 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5555afc0dc38 <col:29, line:132:5>
|-CXXMethodDecl 0x5555afc083c8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5555afc08300 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afc08490 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5555afc08578 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5555afc0dc90 <col:44, line:161:5>
|   `-ReturnStmt 0x5555afc0dc80 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5555afc0dc68 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5555afc0dc48 <col:9> 'ErrorHandler *' lvalue Var 0x5555afc0d488 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5555afc086b8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5555afc08628 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5555afc08780 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5555afc0dcf0 <col:43, line:173:5>
|   `-ReturnStmt 0x5555afc0dce0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5555afc0dcc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5555afc0dca8 <col:9> 'ErrorHandler *' lvalue Var 0x5555afc0d500 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5555afc08838 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5555afc088b8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5555afc089c8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5555afc08938 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5555afc08b18 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5555afc08a88 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5555afc08c70 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5555afc08bd8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5555afc08dc8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5555afc08d30 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5555afc08f20 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5555afc08e88 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5555afc09130 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5555afc08fd8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5555afc09058 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5555afc09308 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5555afc091f0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5555afc09270 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5555afc09528 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5555afc093c8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5555afc09448 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5555afc09708 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5555afc095e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5555afc09668 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5555afc098e8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5555afc097c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5555afc09848 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5555afc09a70 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5555afc099a8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5555afc09c40 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5555afc09b28 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5555afc09ba0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5555afc0df48 <col:57, line:234:5>
|   `-ReturnStmt 0x5555afc0df38 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5555afc0df20 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5555afc0dec8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5555afc0de98 <col:9> '<bound member function type>' ->xmessage 0x5555afc09a70
|         | `-CXXThisExpr 0x5555afc0de88 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5555afc0df08 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5555afc0def0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5555afc0de68 <col:18, col:40> 'String' (CXXTemporary 0x5555afc0de68)
|               `-CallExpr 0x5555afc0de30 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5555afc0de18 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5555afc0dd90 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5555afc0bc38 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5555afc0ddb0 <col:31> 'const String' lvalue ParmVar 0x5555afc09ba0 'str' 'const String &'
|                 `-DeclRefExpr 0x5555afc0ddd0 <col:36> 'const String' lvalue ParmVar 0x5555afc09b28 'anno' 'const String &'
|-CXXMethodDecl 0x5555afc09f20 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5555afc09d00 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5555afc09d80 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5555afc09df8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5555afc0e1d8 <col:68, line:243:5>
|   `-ReturnStmt 0x5555afc0e1c8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5555afc0e1b0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5555afc0e150 <col:9, col:41> 'int'
|         |-MemberExpr 0x5555afc0e120 <col:9> '<bound member function type>' ->xmessage 0x5555afc09c40
|         | `-CXXThisExpr 0x5555afc0e110 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5555afc0dfe8 <col:18> 'const String' lvalue ParmVar 0x5555afc09d00 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5555afc0e198 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5555afc0e180 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5555afc0e0f0 <col:24, col:40> 'String' (CXXTemporary 0x5555afc0e0f0)
|               `-CXXMemberCallExpr 0x5555afc0e088 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5555afc0e018 <col:24> '<bound member function type>' ->vformat 0x5555afc0b100
|                 | `-CXXThisExpr 0x5555afc0e008 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5555afc0e0b8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5555afc0e048 <col:32> 'const char *' lvalue ParmVar 0x5555afc09d80 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5555afc0e0d0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5555afc0e068 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5555afc09df8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5555afc0a1c0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5555afc09fe8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5555afc0a060 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5555afc0a0d8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5555afc0e518 <col:23, line:254:5>
|   `-ReturnStmt 0x5555afc0e508 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5555afc0e4f0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5555afc0e490 <col:9, col:71> 'int'
|         |-MemberExpr 0x5555afc0e460 <col:9> '<bound member function type>' ->xmessage 0x5555afc09c40
|         | `-CXXThisExpr 0x5555afc0e450 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5555afc0e4d8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5555afc0e4c0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5555afc0e410 <col:18, col:65> 'String' (CXXTemporary 0x5555afc0e410)
|         |     `-CallExpr 0x5555afc0e3a8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5555afc0e390 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5555afc0e278 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5555afc0bc38 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5555afc0e298 <col:31> 'const String' lvalue ParmVar 0x5555afc0a060 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5555afc0e3f0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5555afc0e3d8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5555afc0e370 <col:37, col:64> 'String' (CXXTemporary 0x5555afc0e370)
|         |             `-CallExpr 0x5555afc0e340 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5555afc0e328 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5555afc0e2b8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5555afc0c2a8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5555afc0e2d8 <col:56> 'const String' lvalue ParmVar 0x5555afc09fe8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5555afc0e430 <col:68> 'const String' lvalue ParmVar 0x5555afc0a0d8 'str' 'const String &'
|-CXXMethodDecl 0x5555afc0a540 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5555afc0a288 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5555afc0a300 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5555afc0a380 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5555afc0a3f8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5555afc0e7d0 <col:34, line:267:5>
|   `-ReturnStmt 0x5555afc0e7c0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5555afc0e7a8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5555afc0e740 <col:9, col:51> 'int'
|         |-MemberExpr 0x5555afc0e710 <col:9> '<bound member function type>' ->xmessage 0x5555afc0a1c0
|         | `-CXXThisExpr 0x5555afc0e700 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5555afc0e5b8 <col:18> 'const String' lvalue ParmVar 0x5555afc0a288 'landmark' 'const String &'
|         |-DeclRefExpr 0x5555afc0e5d8 <col:28> 'const String' lvalue ParmVar 0x5555afc0a300 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5555afc0e790 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5555afc0e778 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5555afc0e6e0 <col:34, col:50> 'String' (CXXTemporary 0x5555afc0e6e0)
|               `-CXXMemberCallExpr 0x5555afc0e678 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5555afc0e608 <col:34> '<bound member function type>' ->vformat 0x5555afc0b100
|                 | `-CXXThisExpr 0x5555afc0e5f8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5555afc0e6a8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5555afc0e638 <col:42> 'const char *' lvalue ParmVar 0x5555afc0a380 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5555afc0e6c0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5555afc0e658 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5555afc0a3f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5555afc0a650 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5555afc0e850 <col:25, line:288:5>
|   `-ReturnStmt 0x5555afc0e840 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5555afc0e828 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5555afc0e7f8 <col:9> 'const int' lvalue ->_nerrors 0x5555afc0d428
|         `-CXXThisExpr 0x5555afc0e7e8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5555afc0a860 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5555afc0a708 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5555afc0a788 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5555afc0ab48 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5555afc0a928 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5555afc0a9a8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5555afc0aa20 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5555afc0ace0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5555afc0ac18 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5555afc0af28 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5555afc0ada0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5555afc0ae18 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5555afc0eab0 <col:58, line:357:5>
|   `-ReturnStmt 0x5555afc0eaa0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5555afc0ea88 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5555afc0ea58 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5555afc0ea40 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5555afc0ea20 <col:9, col:29> 'String' (CXXTemporary 0x5555afc0ea20)
|             `-CallExpr 0x5555afc0e9b0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5555afc0e998 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5555afc0e918 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5555afc0ab48 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5555afc0e8b8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5555afc0e9e8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5555afc0e8d8 <col:21> 'const char *' lvalue ParmVar 0x5555afc0ada0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5555afc0ea00 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5555afc0e8f8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5555afc0ae18 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5555afc0b100 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5555afc0aff0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5555afc0b068 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5555afc0b258 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5555afc0b1c8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5555afc0b3a0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5555afc0b310 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5555afc0b640 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5555afc0b458 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5555afc0b4d8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5555afc0b550 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5555afc0b7a0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5555afc0b710 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5555afc0ebc8 <col:37, line:441:5>
|   `-IfStmt 0x5555afc0ebb0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5555afc0eb38 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5555afc0eb08 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5555afc0eac8 <col:6> 'int' lvalue ParmVar 0x5555afc0b710 'level' 'int'
|     | `-ImplicitCastExpr 0x5555afc0eb20 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5555afc0eae8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5555afc07820 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5555afc0eb98 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5555afc0eb68 <col:8> 'int' lvalue ->_nerrors 0x5555afc0d428
|         `-CXXThisExpr 0x5555afc0eb58 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5555afc0b868 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5555afc0ec60 <col:26, line:448:5>
|   `-BinaryOperator 0x5555afc0ec40 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5555afc0ebf0 <col:2> 'int' lvalue ->_nerrors 0x5555afc0d428
|     | `-CXXThisExpr 0x5555afc0ebe0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5555afc0ec20 <col:13> 'int' 0
|-CXXMethodDecl 0x5555afc0ba30 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5555afc0b920 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5555afc0b998 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5555afc0bc38 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5555afc0baf0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5555afc0bb68 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5555afc0bf08 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5555afc0bd10 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5555afc0bd90 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5555afc0be10 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5555afc0bfc0 <col:59> 0 0
|-CXXMethodDecl 0x5555afc0c158 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5555afc0c038 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5555afc0c0b8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5555afc0f2d0 <col:70, line:534:5>
|   |-DeclStmt 0x5555afc0edd0 <line:528:2, col:20>
|   | |-VarDecl 0x5555afc0ec88 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5555afc0ecf0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5555afc0ed28 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5555afc0ed90 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5555afc0eea0 <line:529:2, col:23>
|   | `-VarDecl 0x5555afc0ee00 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5555afc0ee88 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5555afc0ee68 <col:18> 'const char *' lvalue ParmVar 0x5555afc0c038 'begin' 'const char *'
|   |-DoStmt 0x5555afc0f268 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5555afc0f198 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5555afc0f180 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5555afc0f160 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5555afc0eeb8 <col:6> 'const char *' lvalue Var 0x5555afc0ee00 'x' 'const char *'
|   | |     `-CallExpr 0x5555afc0f0b0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5555afc0f098 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5555afc0f050 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5555afc0d900 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5555afc0f118 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5555afc0f100 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5555afc0ef70 <col:20, col:27> 'String' (CXXTemporary 0x5555afc0ef70)
|   | |       |     `-CXXTemporaryObjectExpr 0x5555afc0ef38 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5555afc0f130 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5555afc0ef90 <col:30> 'const char *' lvalue Var 0x5555afc0ee00 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5555afc0f148 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5555afc0efb0 <col:33> 'const char *' lvalue ParmVar 0x5555afc0c0b8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5555afc0eff0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5555afc0efd0 <col:39> 'String' lvalue Var 0x5555afc0ec88 'name' 'String'
|   | |       |-UnaryOperator 0x5555afc0f028 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5555afc0f008 <col:46> 'String' lvalue Var 0x5555afc0ed28 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5555afc0f040 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5555afc0f250 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5555afc0f238 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5555afc0f218 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5555afc0f1e8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|   |         `-ImplicitCastExpr 0x5555afc0f1d0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5555afc0f1b0 <col:11> 'String' lvalue Var 0x5555afc0ec88 'name' 'String'
|   `-ReturnStmt 0x5555afc0f2c0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5555afc0f2a8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5555afc0f288 <col:9> 'const char *' lvalue Var 0x5555afc0ee00 'x' 'const char *'
|-CXXMethodDecl 0x5555afc0c2a8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5555afc0c218 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5555afc0f8d8 <col:55, line:550:5>
|   `-IfStmt 0x5555afc0f8b0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5555afc0f510 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5555afc0f4f8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5555afc0f4e0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5555afc0f4c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5555afc0f490 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|     | |       `-DeclRefExpr 0x5555afc0f330 <col:6> 'const String' lvalue ParmVar 0x5555afc0c218 'x' 'const String &'
|     | `-BinaryOperator 0x5555afc0f470 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5555afc0f440 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5555afc0f3f0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5555afc0f3d8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5555afc0f390 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5555af8f6c50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5555afc0f350 <col:11> 'const String' lvalue ParmVar 0x5555afc0c218 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5555afc0f370 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5555afc0f458 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5555afc0f428 <col:19> 'char' 123
|     |-ReturnStmt 0x5555afc0f580 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5555afc0f550 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5555afc0f530 <col:13> 'const String' lvalue ParmVar 0x5555afc0c218 'x' 'const String &'
|     `-IfStmt 0x5555afc0f888 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5555afc0f618 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5555afc0f600 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5555afc0f5e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5555afc0f5b0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |       `-DeclRefExpr 0x5555afc0f590 <col:11> 'const String' lvalue ParmVar 0x5555afc0c218 'x' 'const String &'
|       |-ReturnStmt 0x5555afc0f7a0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5555afc0f788 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5555afc0f758 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5555afc0f740 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5555afc0f720 <col:13, col:29> 'String' (CXXTemporary 0x5555afc0f720)
|       |         `-CallExpr 0x5555afc0f6d0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5555afc0f6b8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5555afc0f630 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5555afc0ba30 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5555afc0f700 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5555afc0f650 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5555afc0f670 <col:28> 'const String' lvalue ParmVar 0x5555afc0c218 'x' 'const String &'
|       `-ReturnStmt 0x5555afc0f878 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5555afc0f860 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5555afc0f830 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5555afc0f818 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5555afc0f7f8 <col:13, col:20> 'String' (CXXTemporary 0x5555afc0f7f8)
|                 `-CXXTemporaryObjectExpr 0x5555afc0f7c0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5555afc0c470 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5555afc0c360 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5555afc0c3d8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5555afc0dba8 <col:71> 'bool' false
|-CXXRecordDecl 0x5555afc0c520 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5555afc0c818 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5555afc0c7b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5555afc0c750 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5555afc0c710 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5555af8da010 'String'
|       | `-CXXRecord 0x5555af8d9f80 'String'
|       |-BuiltinType 0x5555af5a8370 'int'
|       `-DecayedType 0x5555afb99ec0 '__va_list_tag *' sugar
|         |-TypedefType 0x5555afb99e90 'va_list' sugar
|         | |-Typedef 0x5555af7efa70 'va_list'
|         | `-TypedefType 0x5555af7efa20 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5555af7e8d28 '__gnuc_va_list'
|         |   `-TypedefType 0x5555af7e8c90 '__builtin_va_list' sugar
|         |     |-Typedef 0x5555af5e9bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5555af5e9b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5555af5a90c0 '__va_list_tag'
|         |         `-CXXRecord 0x5555af5a9028 '__va_list_tag'
|         `-PointerType 0x5555af7f6340 '__va_list_tag *'
|           `-RecordType 0x5555af5a90c0 '__va_list_tag'
|             `-CXXRecord 0x5555af5a9028 '__va_list_tag'
|-EnumDecl 0x5555afc0c870 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5555afc0c970 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0ced0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0c950 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5555afc0c930 <col:16> 'int' 1
| |-EnumConstantDecl 0x5555afc0ca00 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cee8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0c9e0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5555afc0c9c0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5555afc0ca90 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf00 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0ca70 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5555afc0ca50 <col:22> 'int' 4
| |-EnumConstantDecl 0x5555afc0cb20 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf18 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0cb00 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5555afc0cae0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5555afc0cbb0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf30 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0cb90 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5555afc0cb70 <col:22> 'int' 16
| |-EnumConstantDecl 0x5555afc0cc40 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0cc20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5555afc0cc00 <col:19> 'int' 32
| |-EnumConstantDecl 0x5555afc0ccd0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf60 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0ccb0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5555afc0cc90 <col:17> 'int' 64
| |-EnumConstantDecl 0x5555afc0cd60 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0cd40 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5555afc0cd20 <col:14> 'int' 128
| |-EnumConstantDecl 0x5555afc0cdf0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5555afc0cf90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afc0cdd0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5555afc0cdb0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5555afc0ce80 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5555afc0cfa8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afc0ce60 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5555afc0ce40 <col:12> 'int' 1024
|-CXXMethodDecl 0x5555afc0d1b8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5555afc0cfd0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5555afc0d070 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5555afc0d340 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5555afc0d278 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5555afc0d3e8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5555afc0d428 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5555afc0d488 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5555afc0d500 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5555afc0d900 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5555afc0d578 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5555afc0d5f8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5555afc0d678 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5555afc0d6f0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5555afc0d768 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5555afc0d7e0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5555afc0da28 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5555afc0da28
| `-ParmVarDecl 0x5555afc0db38 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5555afc0fc38 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5555afc0fc38
  `-ParmVarDecl 0x5555afc0fd48 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afa92cd0 prev 0x5555afad2950 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afa92dc8 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x5555afa92e58 <col:20, col:26> col:20 public
|-TypedefDecl 0x5555afa92e90 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5555af6fde60 'uninitialized_type'
|   `-CXXRecord 0x5555af6fddc8 'uninitialized_type'
|-CXXConstructorDecl 0x5555afa92f50 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afa96d60 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5555afa96f80 <col:25, line:21:5>
|   `-CallExpr 0x5555afa96f30 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x5555afa96f18 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5555afa96ef8 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x5555af833b48 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5555afa96f68 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x5555afa96e40 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x5555afa96e10 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|     |     `-CXXThisExpr 0x5555afa96e00 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x5555afa96e58 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5555afa96ed8 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x5555afa96eb8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x5555afa96e88 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5555afa96e78 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x5555afa930a0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5555afa93010 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afa96f98 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5555afa971e8 <col:56, line:26:5>
|   `-CallExpr 0x5555afa97168 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x5555afa97150 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5555afa97130 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5555af833018 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5555afa971a0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x5555afa97078 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x5555afa97048 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|     |     `-CXXThisExpr 0x5555afa97038 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x5555afa971d0 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5555afa971b8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5555afa97090 <col:17> 'const unsigned char *' lvalue ParmVar 0x5555afa93010 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x5555afa97110 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x5555afa970f0 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x5555afa970c0 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5555afa970b0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x5555afa931f0 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x5555afa93160 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afa97200 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5555afb435f0 <col:45, line:33:5>
|   `-ExprWithCleanups 0x5555afb435d8 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x5555afb435a0 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x5555afb43588 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5555afb43508 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x5555afa95d08 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x5555afa97268 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x5555afa97258 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x5555afb434f0 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x5555afb434d8 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x5555afb434c0 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x5555afb434a0 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x5555afb43470 <col:10> '<bound member function type>' .operator in_addr 0x5555af910e90
|                 `-ImplicitCastExpr 0x5555afb43458 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x5555afa97280 <col:10> 'IPAddress' lvalue ParmVar 0x5555afa93160 'x' 'IPAddress'
|-CXXConstructorDecl 0x5555afa93340 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x5555afa932b0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x5555afa93568 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x5555afa93470 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afb43780 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x5555afb43608 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x5555afa93470 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x5555afb437e0 <col:13, line:41:5>
|-CXXConstructorDecl 0x5555afa93738 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x5555afa93670 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afb437f0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5555afb43900 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x5555afb438c8 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x5555afb438b0 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5555afb43890 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x5555afa95d08 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x5555afb43858 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x5555afb43848 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x5555afb43870 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x5555afa93670 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x5555afa93888 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5555afa937f8 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afb43918 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5555afb439c8 <col:57, line:51:5>
|   `-CStyleCastExpr 0x5555afb439a0 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5555afb43970 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5555afa937f8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5555afa93a18 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x5555afa93950 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x5555afa93b68 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x5555afa93ad8 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x5555afa93d18 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x5555afa93c90 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x5555afad29e0 'IP6Address'
|   | `-CXXRecord 0x5555afa92cd0 'IP6Address'
|   `-ParenType 0x5555afa93c30 'uint32_t () const' sugar
|     `-FunctionProtoType 0x5555af8cf490 'uint32_t () const' const cdecl
|       `-TypedefType 0x5555af6fe150 'uint32_t' sugar
|         |-Typedef 0x5555af611408 'uint32_t'
|         `-TypedefType 0x5555af5ea440 '__uint32_t' sugar
|           |-Typedef 0x5555af5ea038 '__uint32_t'
|           `-BuiltinType 0x5555af5a8410 'unsigned int'
|-CXXConversionDecl 0x5555afa93e58 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x5555afa93fe0 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x5555afb43a30 <col:46, col:62>
|   `-ReturnStmt 0x5555afb43a20 <col:48, col:55>
|     `-MemberExpr 0x5555afb439f0 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|       `-CXXThisExpr 0x5555afb439e0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x5555afa941d0 <line:75:5, col:50> col:5 used operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x5555afb43a98 <col:34, col:50>
|   `-ReturnStmt 0x5555afb43a88 <col:36, col:43>
|     `-MemberExpr 0x5555afb43a58 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|       `-CXXThisExpr 0x5555afb43a48 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x5555afa942d0 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x5555afb43b00 <col:45, col:61>
|   `-ReturnStmt 0x5555afb43af0 <col:47, col:54>
|     `-MemberExpr 0x5555afb43ac0 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|       `-CXXThisExpr 0x5555afb43ab0 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x5555afa943a8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x5555afb43b68 <col:33, col:49>
|   `-ReturnStmt 0x5555afb43b58 <col:35, col:42>
|     `-MemberExpr 0x5555afb43b28 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|       `-CXXThisExpr 0x5555afb43b18 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x5555afa94470 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x5555afb43ca0 <col:27, col:66>
|   `-ReturnStmt 0x5555afb43c90 <col:29, col:63>
|     `-UnaryOperator 0x5555afb43c78 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afb43c58 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5555afb43c40 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afb43bf0 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x5555af7d4a18
|         |   `-MemberExpr 0x5555afb43bc0 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|         |     `-MemberExpr 0x5555afb43b90 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|         |       `-CXXThisExpr 0x5555afb43b80 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x5555afb43c20 <col:62> 'int' 0
|-CXXMethodDecl 0x5555afa94538 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x5555afb43e18 <col:39, col:78>
|   `-ReturnStmt 0x5555afb43e08 <col:41, col:75>
|     `-UnaryOperator 0x5555afb43df0 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afb43dd0 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5555afb43db8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afb43d28 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|         |   `-MemberExpr 0x5555afb43cf8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|         |     `-MemberExpr 0x5555afb43cc8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|         |       `-CXXThisExpr 0x5555afb43cb8 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x5555afb43d58 <col:74> 'int' 0
|-CXXMethodDecl 0x5555afa94658 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x5555afb43f88 <col:24, col:75>
|   `-ReturnStmt 0x5555afb43f78 <col:26, col:72>
|     `-CStyleCastExpr 0x5555afb43f50 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x5555afb43f28 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x5555afb43f08 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x5555afb43ef0 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x5555afb43ea0 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x5555af7d4a18
|           |   `-MemberExpr 0x5555afb43e70 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|           |     `-MemberExpr 0x5555afb43e40 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|           |       `-CXXThisExpr 0x5555afb43e30 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x5555afb43ed0 <col:71> 'int' 0
|-CXXMethodDecl 0x5555afa94718 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x5555afb44110 <col:36, col:87>
|   `-ReturnStmt 0x5555afb44100 <col:38, col:84>
|     `-ImplicitCastExpr 0x5555afb440e8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x5555afb440c0 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x5555afb44098 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x5555afb44078 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x5555afb44060 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afb44010 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|             |   `-MemberExpr 0x5555afb43fe0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|             |     `-MemberExpr 0x5555afb43fb0 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|             |       `-CXXThisExpr 0x5555afb43fa0 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x5555afb44040 <col:83> 'int' 0
|-CXXMethodDecl 0x5555afa947d8 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x5555afb44280 <col:24, col:75>
|   `-ReturnStmt 0x5555afb44270 <col:26, col:72>
|     `-CStyleCastExpr 0x5555afb44248 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x5555afb44220 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x5555afb44200 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x5555afb441e8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x5555afb44198 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x5555af7d4a18
|           |   `-MemberExpr 0x5555afb44168 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|           |     `-MemberExpr 0x5555afb44138 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5555afa96368
|           |       `-CXXThisExpr 0x5555afb44128 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x5555afb441c8 <col:71> 'int' 0
|-CXXMethodDecl 0x5555afa94898 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x5555afb44408 <col:36, col:87>
|   `-ReturnStmt 0x5555afb443f8 <col:38, col:84>
|     `-ImplicitCastExpr 0x5555afb443e0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x5555afb443b8 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x5555afb44390 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x5555afb44370 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x5555afb44358 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afb44308 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|             |   `-MemberExpr 0x5555afb442d8 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|             |     `-MemberExpr 0x5555afb442a8 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|             |       `-CXXThisExpr 0x5555afb44298 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x5555afb44338 <col:83> 'int' 0
|-CXXMethodDecl 0x5555afa94958 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afa94a20 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5555afa94c48 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x5555afa94af8 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x5555afa94b70 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x5555afa94dc8 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x5555afa94d08 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x5555afa94e90 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x5555afb44720 <col:36, line:99:5>
|   `-ReturnStmt 0x5555afb44710 <line:98:2, col:81>
|     `-BinaryOperator 0x5555afb446f0 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x5555afb44568 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x5555afb44550 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x5555afb44538 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x5555afb444f8 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x5555afb444e0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x5555afb44490 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|       | |     |   `-MemberExpr 0x5555afb44460 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|       | |     |     `-MemberExpr 0x5555afb44430 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|       | |     |       `-CXXThisExpr 0x5555afb44420 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x5555afb444c0 <col:34> 'int' 11
|       | `-IntegerLiteral 0x5555afb44518 <col:41> 'int' 255
|       `-BinaryOperator 0x5555afb446d0 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afb446b8 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5555afb446a0 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5555afb44660 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5555afb44648 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5555afb445f8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|         |     |   `-MemberExpr 0x5555afb445c8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|         |     |     `-MemberExpr 0x5555afb44598 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|         |     |       `-CXXThisExpr 0x5555afb44588 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x5555afb44628 <col:74> 'int' 12
|         `-IntegerLiteral 0x5555afb44680 <col:81> 'int' 254
|-CXXMethodDecl 0x5555afa95008 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x5555afa94f40 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x5555afa950d0 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x5555afb44c08 <col:43, line:114:5>
|   `-ReturnStmt 0x5555afb44bf8 <line:112:2, line:113:24>
|     `-BinaryOperator 0x5555afb44bd8 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x5555afb44a38 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x5555afb44898 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x5555afb44868 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x5555afb44828 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x5555afb447e8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x5555afb447b8 <col:9> '<bound member function type>' ->data32 0x5555afa94898
|       | | |   |   `-CXXThisExpr 0x5555afb447a8 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x5555afb44808 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x5555afb44880 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x5555afb44848 <col:24> 'int' 0
|       | `-BinaryOperator 0x5555afb44a18 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5555afb449e8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x5555afb449a8 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x5555afb44968 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x5555afb44938 <col:29> '<bound member function type>' ->data32 0x5555afa94898
|       |   |   |   `-CXXThisExpr 0x5555afb44928 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x5555afb44988 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x5555afb44a00 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5555afb449c8 <col:44> 'int' 0
|       `-BinaryOperator 0x5555afb44bb8 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afb44b88 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5555afb44b48 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5555afb44b08 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x5555afb44ad8 <col:9> '<bound member function type>' ->data32 0x5555afa94898
|         |   |   `-CXXThisExpr 0x5555afb44ac8 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5555afb44b28 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x5555afb44ba0 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x5555afb44b68 <col:24> 'int' 0
|-CXXMethodDecl 0x5555afa95190 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x5555afb45180 <col:39, line:123:5>
|   `-ReturnStmt 0x5555afb45170 <line:121:2, line:122:41>
|     `-BinaryOperator 0x5555afb45150 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x5555afb44f20 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x5555afb44d80 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x5555afb44d50 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x5555afb44d10 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x5555afb44cd0 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x5555afb44ca0 <col:9> '<bound member function type>' ->data32 0x5555afa94898
|       | | |   |   `-CXXThisExpr 0x5555afb44c90 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x5555afb44cf0 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x5555afb44d68 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x5555afb44d30 <col:24> 'int' 0
|       | `-BinaryOperator 0x5555afb44f00 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5555afb44ed0 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x5555afb44e90 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x5555afb44e50 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x5555afb44e20 <col:29> '<bound member function type>' ->data32 0x5555afa94898
|       |   |   |   `-CXXThisExpr 0x5555afb44e10 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x5555afb44e70 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x5555afb44ee8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5555afb44eb0 <col:44> 'int' 0
|       `-BinaryOperator 0x5555afb45130 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afb45118 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5555afb45030 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5555afb44ff0 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x5555afb44fc0 <col:9> '<bound member function type>' ->data32 0x5555afa94898
|         |   |   `-CXXThisExpr 0x5555afb44fb0 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5555afb45010 <col:18> 'int' 2
|         `-CallExpr 0x5555afb450f0 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x5555afb450d8 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5555afb450b8 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x5555af7daf88 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x5555afb45098 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x5555afa95250 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5555afb45310 <col:38, line:131:5>
|   `-ReturnStmt 0x5555afb45300 <line:130:9, col:47>
|     `-BinaryOperator 0x5555afb452e0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x5555afb452c8 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x5555afb452b0 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x5555afb45270 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x5555afb45258 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x5555afb45208 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x5555af7d4a18
|       |     |   `-MemberExpr 0x5555afb451d8 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5555af7d4d38
|       |     |     `-MemberExpr 0x5555afb451a8 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5555afa96368
|       |     |       `-CXXThisExpr 0x5555afb45198 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x5555afb45238 <col:41> 'int' 0
|       `-IntegerLiteral 0x5555afb45290 <col:47> 'int' 255
|-CXXMethodDecl 0x5555afa95310 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5555afb456e8 <col:39, line:139:5>
|   `-ReturnStmt 0x5555afb456d8 <line:138:9, col:67>
|     `-BinaryOperator 0x5555afb456b8 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x5555afb45518 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x5555afb45500 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x5555afb45418 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x5555afb453d8 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x5555afb453a8 <col:16> '<bound member function type>' ->data32 0x5555afa94898
|       | |   |   `-CXXThisExpr 0x5555afb45398 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x5555afb453f8 <col:25> 'int' 0
|       | `-CallExpr 0x5555afb454d8 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x5555afb454c0 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5555afb454a0 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x5555af7daf88 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x5555afb45480 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x5555afb45698 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afb45668 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5555afb45628 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5555afb455e8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x5555afb455b8 <col:52> '<bound member function type>' ->data32 0x5555afa94898
|         |   |   `-CXXThisExpr 0x5555afb455a8 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5555afb45608 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x5555afb45680 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x5555afb45648 <col:67> 'int' 0
|-CXXMethodDecl 0x5555afa953d0 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x5555afa95578 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x5555afa95480 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x5555afa95738 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5555afa95648 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x5555afa95880 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x5555afa957f0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x5555afa959e0 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5555afa95950 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x5555afa95b40 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5555afa95ab0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x5555afa95d08 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x5555afa95c10 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x5555afa95e88 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x5555afa95dc0 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x5555afa95f50 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5555afa96010 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x5555afa960d0 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x5555afb45868 <col:22, col:42>
|   `-ReturnStmt 0x5555afb45858 <col:24, col:39>
|     `-ExprWithCleanups 0x5555afb45840 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x5555afb45810 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5555afb457f8 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5555afb457d8 <col:31, col:39> 'String' (CXXTemporary 0x5555afb457d8)
|             `-CXXMemberCallExpr 0x5555afb457b0 <col:31, col:39> 'String'
|               `-MemberExpr 0x5555afb45780 <col:31> '<bound member function type>' ->unparse 0x5555afa95f50
|                 `-CXXThisExpr 0x5555afb45770 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x5555afa961a0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5555afa96248 <col:51> "" ""
|-TypedefDecl 0x5555afa962c8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x5555afa94ac0 'const IP6Address &'
|   `-QualType 0x5555afad29e1 'const IP6Address' const
|     `-RecordType 0x5555afad29e0 'IP6Address'
|       `-CXXRecord 0x5555afa92cd0 'IP6Address'
|-AccessSpecDecl 0x5555afa96320 <line:171:3, col:10> col:3 private
|-FieldDecl 0x5555afa96368 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x5555afa972a0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x5555afa972a0
| `-ParmVarDecl 0x5555afa97378 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x5555afa97a48 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x5555afa97a48
| `-ParmVarDecl 0x5555afa97b58 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x5555afa97bc8 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x5555afa97bc8
| `-ParmVarDecl 0x5555afb42d28 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x5555afb42e80 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afb42f98 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x5555afa96368 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5555afb4e578 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x5555afb4e420 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x5555afa96368
| |     `-CXXStaticCastExpr 0x5555afb4e3f0 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x5555afb4e3c0 <col:7> 'IP6Address' lvalue ParmVar 0x5555afb42f98 '' 'IP6Address &&'
| `-CompoundStmt 0x5555afb4e5d8 <col:7>
`-CXXDestructorDecl 0x5555afb4e228 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb98f08 prev 0x5555afa90688 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afb99000 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5555afb99090 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5555afb991c8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5555afb990c8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5555afb9a5f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb9a5d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5555afb9a168 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5555afb9a680 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5555afb9a640 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5555afb990c8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5555afb9a1d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5555afb9a700 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb9a6c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5555afb9a230 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5555afb9a740 <col:54> 'bool' false
| `-CompoundStmt 0x5555afb9a848 <col:61, line:38:5>
|   `-BinaryOperator 0x5555afb9a828 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5555afb9a7c0 <col:9> 'const Element *' lvalue ->_context 0x5555afb9a108
|     | `-CXXThisExpr 0x5555afb9a7b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5555afb9a810 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5555afb9a7f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5555afb993d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afb99288 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5555afb99300 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5555afb9a628 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb9a608 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5555afb9a108 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5555afb9a8a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5555afb9a860 <col:20> 'const Element *' lvalue ParmVar 0x5555afb99288 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5555afb9a168 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5555afb9a920 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5555afb9a8e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5555afb99300 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5555afb9a1d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5555afb9a9a0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5555afb9a960 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5555afb9a230 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5555afb9a9e0 <col:73> 'bool' false
| `-CompoundStmt 0x5555afb9aa58 <col:80, line:46:5>
|-CXXMethodDecl 0x5555afb99508 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5555afb9aad0 <col:36, line:51:5>
|   `-ReturnStmt 0x5555afb9aac0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5555afb9aaa8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5555afb9aa78 <col:16> 'const Element *const' lvalue ->_context 0x5555afb9a108
|         `-CXXThisExpr 0x5555afb9aa68 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5555afb995f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5555afb9ab50 <col:32, line:57:5>
|   `-ReturnStmt 0x5555afb9ab40 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5555afb9ab28 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5555afb9aaf8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5555afb9a168
|         `-CXXThisExpr 0x5555afb9aae8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5555afb996b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5555afb99840 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5555afb99770 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5555afb99990 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5555afb99900 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5555afb99ae0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5555afb99a50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5555afb99ce8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5555afb99b98 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5555afb99c10 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5555afb9a018 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5555afb99da8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5555afb99e28 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5555afb99ef0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5555afb9a0d0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5555afb9a108 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5555afb9a168 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5555afb9a1d0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5555afb9a230 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5555afb9a280 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5555afb9a280
| `-ParmVarDecl 0x5555afb9a398 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5555afb9a438 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5555afb9a438
| `-ParmVarDecl 0x5555afb9a548 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5555afc1a608 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555afbc3800 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5555afbc39d8 prev 0x5555afbc3800 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5555afbc3a68 <col:46, col:52> col:46 public
|-TypedefDecl 0x5555afbc3a90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbc5660 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5555afbc5610 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5555afbc3f40 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5555afbc3e40 'type'
|     `-TemplateSpecializationType 0x5555afbc3dd0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5555afbc3cb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5555afbc3c90 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5555afbc3c70 <col:24> 'unsigned long' 4
|       `-RecordType 0x5555afbc3db0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5555afbc3cd0 'char_array'
|-TypedefDecl 0x5555afbc5718 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5555afbc56e0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5555afbc56c0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5555afbc5660 'type'
|     `-ElaboratedType 0x5555afbc5610 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5555afbc3f40 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5555afbc3e40 'type'
|         `-TemplateSpecializationType 0x5555afbc3dd0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5555afbc3cb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5555afbc3c90 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5555afbc3c70 <col:24> 'unsigned long' 4
|           `-RecordType 0x5555afbc3db0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5555afbc3cd0 'char_array'
|-CXXMethodDecl 0x5555afbc5898 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5555afbc57a8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5555afbc5988 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5555afbc5a68 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5555afbc5d38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5555afbc5c40 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5555afbc5f78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5555afbc5df0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afbc5e68 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbce5f0 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5555afbc6038 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afbc60b0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbce748 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5555afbce818 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5555afbcea68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5555afbce8d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5555afbce950 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbcecc8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5555afbceb38 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5555afbcebb0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbcee88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5555afbced98 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbcf048 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5555afbcef50 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbcf100 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5555afbcf1b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5555afbcf3e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5555afbcf260 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5555afbcf2d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5555afbcf688 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5555afbcf590 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5555afbcf750 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5555afbcf7a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5555afbcf7f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555afbc2208 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5555afbc2418 prev 0x5555afbc2208 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5555afbc3770 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5555afbc3720 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5555afbc3700 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5555afbc35b0 'type'
|     `-SubstTemplateTypeParmType 0x5555afbc33d0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5555af875640 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8755e8 'T'
|       `-RecordType 0x5555afbc2f20 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5555afbc2e38 'sized_array_memory'
|-FieldDecl 0x5555afbcf840 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5555afbcf890 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5555afbcf8c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|   |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5555af8acfe8 'T'
|   `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbcf958 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5555afbcf920 'int &'
|   `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbcfa18 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5555afbcf9e0 'const int &'
|   `-QualType 0x5555afbc24b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbcfaa8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5555afbcfa70 'int *'
|   `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbcfb38 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5555afbcfb00 'const int *'
|   `-QualType 0x5555afbc24b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbd0720 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5555afbd06d0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5555afbd06b0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5555afbd0640 'type'
|     `-SubstTemplateTypeParmType 0x5555afbd0400 'int' sugar
|       |-TemplateTypeParmType 0x5555af880a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af880a10 'T'
|       `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbd0788 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5555afbcf9e0 'const int &'
|   `-QualType 0x5555afbc24b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbd07e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbd0848 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5555afbcfa70 'int *'
|   `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|     |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5555af8acfe8 'T'
|     `-BuiltinType 0x5555af5a8370 'int'
|-TypedefDecl 0x5555afbd08b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5555afbcfb00 'const int *'
|   `-QualType 0x5555afbc24b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5555afbc24b0 'int' sugar
|       |-TemplateTypeParmType 0x5555af8ad040 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5555af8acfe8 'T'
|       `-BuiltinType 0x5555af5a8370 'int'
|-EnumDecl 0x5555afbd0908 <line:134:5> col:5
| `-EnumConstantDecl 0x5555afbd0a00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5555afbd09e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5555af8ae208 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5555af8ae1e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5555af8ae1c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5555afbd0a88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5555afbd0cd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afbd0b40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afbd0be0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5555afbd0f98 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5555afbd0e80 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5555afbd1258 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5555afbd1140 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5555afbd15a0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5555afbd1480 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5555afbd18b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5555afbd1790 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5555afbd1ba0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afbd19e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afbd1a60 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5555afbd1cc8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5555afbd1da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd1e00 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd1e48 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5555afbd1ef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd1f50 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd2018 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5555afbd20c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd2120 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd2168 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5555afbd2218 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd2270 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd22b8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5555afbd2368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd23c0 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd2408 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5555afbd24b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5555afbd2510 <col:30> Inherited
|-CXXMethodDecl 0x5555afbd2538 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5555afbd25e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5555afbd2698 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5555afbd2858 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afbd2748 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5555afbd27c0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5555afbd29a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5555afbd2918 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afbd2b58 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5555afbd2a60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5555afbd2c10 <col:20>
| `-OptimizeNoneAttr 0x5555afbd2c68 <col:30>
|-CXXMethodDecl 0x5555afbd2d88 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5555afbd2c90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5555afbd2e40 <col:20>
| `-OptimizeNoneAttr 0x5555afbd2e98 <col:30>
|-CXXMethodDecl 0x5555afbd2f50 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5555afbd2ec0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afbd3098 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5555afbd3008 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afbd31c8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5555afbd32f8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5555afbd33c8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5555afbd3498 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5555afbd35d8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5555afbd3548 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afbd3720 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5555afbd3690 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5555afbd3868 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5555afbd37d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5555afbd3920 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5555afbd3a20 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5555afbd3990 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5555afbd3ad8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5555afbd3b98 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5555afbd3c98 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5555afbd3e18 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5555afbd3d58 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5555afbd45d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5555afbd3ed0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5555afbd4538 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5555afbd4438 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5555afbd46b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5555afbd4808 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5555afbd4778 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5555afbd48c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5555afbd4b08 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5555afbd4980 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5555afbd49f8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5555afbd4cc8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5555afbd4bd8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5555afbd4f18 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5555afbd4d90 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5555afbd4e08 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5555afbd4fd8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5555afbd5238 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5555afbd5140 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5555afbd5308 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afbc0378 prev 0x5555afba2d70 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5555afbc0470 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5555afbc0560 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5555afbe7060 <col:16, line:828:9>
|-CXXDestructorDecl 0x5555afbc0650 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5555afbe7070 <col:25, line:830:9>
|-CXXMethodDecl 0x5555afbc0750 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5555afbc0800 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5555afbc08a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5555afbc08a8
| `-ParmVarDecl 0x5555afbc09b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5555afbc1178 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5555afbc1178
  `-ParmVarDecl 0x5555afbc1288 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afba2ba8 prev 0x5555afa90718 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5555afba2ce0 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5555afba2d70 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5555afba2e20 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5555afba2f28 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5555afba2e58 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5555afbd8248 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5555afbd8228 <col:31> 'int' 0
|-CXXConstructorDecl 0x5555afba3248 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5555afba30c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5555afba3138 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5555afbd8280 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5555afbd8260 <col:59> 'int' 0
|-CXXConstructorDecl 0x5555afba3420 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afba3310 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5555afba3388 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5555afbd82b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5555afbd8298 <col:55> 'int' 0
|-CXXConstructorDecl 0x5555afba37d8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5555afba35c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5555afba3638 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5555afba36b0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5555afbd82f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5555afbd82d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5555afba3998 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5555afba38d8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5555afba3a90 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5555afba3c48 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5555afba3b80 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5555afba3d38 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5555afbd86a0 <col:24, line:291:5>
|   `-ReturnStmt 0x5555afbd8690 <line:290:9, col:79>
|     `-BinaryOperator 0x5555afbd8670 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5555afbd8548 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5555afbd84a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5555afbd8480 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5555afbd8378 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5555afbd8360 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5555afbd8348 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5555afbd8318 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5555afbc21a0
|       | |   |       `-CXXThisExpr 0x5555afbd8308 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5555afbd8468 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5555afbd8450 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5555afbd8418 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5555afbd83e8 <col:28, col:35> '<bound member function type>' ->size 0x5555afb8a2a8
|       | |           `-ImplicitCastExpr 0x5555afbd8438 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5555afbd83d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5555afbd83a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5555afbc21a0
|       | |                 `-CXXThisExpr 0x5555afbd8390 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5555afbd8530 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5555afbd8518 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5555afbd8500 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5555afbd84d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5555afbd5450
|       |         `-CXXThisExpr 0x5555afbd84c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5555afbd8650 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afbd8638 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5555afbd8620 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5555afbd85e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5555afbd85c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5555afbd8578 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5555afbd5500
|         |     |   `-CXXThisExpr 0x5555afbd8568 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5555afbd85a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5555afbd8600 <col:79> 'int' 0
|-CXXMethodDecl 0x5555afba3df8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5555afbd8878 <col:32, line:296:5>
|   `-ReturnStmt 0x5555afbd8868 <line:295:9, col:49>
|     `-BinaryOperator 0x5555afbd8848 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5555afbd8728 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5555afbd8710 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5555afbd86f8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5555afbd86c8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5555afbd5450
|       |       `-CXXThisExpr 0x5555afbd86b8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5555afbd8828 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5555afbd8810 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5555afbd87f8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5555afbd87b8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5555afbd87a0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5555afbd8750 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5555afbd5500
|         |     |   `-CXXThisExpr 0x5555afbd8740 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5555afbd8780 <col:43> 'int' 0
|         `-IntegerLiteral 0x5555afbd87d8 <col:49> 'int' 0
|-CXXMethodDecl 0x5555afba3ee8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5555afbd8a88 <col:19, line:306:5>
|   |-IfStmt 0x5555afbd89a8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5555afbd88e8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5555afbd88d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5555afbd88a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5555afbc21a0
|   | |     `-CXXThisExpr 0x5555afbd8890 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5555afbd8988 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5555afbd8958 <col:13, col:20> '<bound member function type>' ->clear 0x5555afb8cca8
|   |     `-ImplicitCastExpr 0x5555afbd8940 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5555afbd8910 <col:13> 'Vector<String> *' lvalue ->_conf 0x5555afbc21a0
|   |         `-CXXThisExpr 0x5555afbd8900 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5555afbd8a30 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5555afbd8a00 <col:9, col:16> '<bound member function type>' .clear 0x5555afbd4fd8
|   |   `-MemberExpr 0x5555afbd89d0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5555afbd53f0
|   |     `-CXXThisExpr 0x5555afbd89c0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5555afbd8a78 <line:305:9, col:17>
|     `-UnaryOperator 0x5555afbd8a60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbd8a50 <col:17> 'Args *' this
|-CXXMethodDecl 0x5555afba4168 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5555afba4070 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5555afba42e8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5555afba4220 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5555afba4668 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5555afba4390 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5555afba45c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5555afba4438 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5555afba44b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5555afbd8db8 <col:67, line:327:5>
|     |-WhileStmt 0x5555afbd8d68 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5555afbd8b80 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5555afbd8af0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5555afb46e38 0x5555afa900a8 0x5555afac9618 0x5555af917668 0x5555af917340 0x5555af908640 0x5555af9082f0 0x5555af907be0 0x5555af8d90d0 0x5555af866040
|     | | |-DeclRefExpr 0x5555afbd8ab0 <col:16> 'Iter' lvalue ParmVar 0x5555afba4438 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5555afbd8ad0 <col:25> 'Iter' lvalue ParmVar 0x5555afba44b0 'end' 'Iter'
|     | `-CompoundStmt 0x5555afbd8d48 <col:30, line:325:9>
|     |   |-CallExpr 0x5555afbd8ce8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5555afbd8bc8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5555afbd8cb8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5555afbd8c48 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|     |   |   `-DeclRefExpr 0x5555afbd8c28 <col:24> 'Iter' lvalue ParmVar 0x5555afba4438 'begin' 'Iter'
|     |   `-UnaryOperator 0x5555afbd8d30 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5555afbd8d10 <col:15> 'Iter' lvalue ParmVar 0x5555afba4438 'begin' 'Iter'
|     `-ReturnStmt 0x5555afbd8da8 <line:326:9, col:17>
|       `-UnaryOperator 0x5555afbd8d90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbd8d80 <col:17> 'Args *' this
|-CXXMethodDecl 0x5555afba4770 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5555afba46e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5555afba48b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5555afba4828 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5555afba4980 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5555afbd8e98 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5555afbd8e38 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5555afbd8de8 <col:9> '<bound member function type>' ->reset_from 0x5555afbd5878
|   | | `-CXXThisExpr 0x5555afbd8dd8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5555afbd8e18 <col:20> 'int' 0
|   `-ReturnStmt 0x5555afbd8e88 <line:352:9, col:17>
|     `-UnaryOperator 0x5555afbd8e70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbd8e60 <col:17> 'Args *' this
|-VarDecl 0x5555afba4a38 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5555afba4aa0 <col:38> 'int' 1
|-VarDecl 0x5555afba4b30 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5555afba4b98 <col:39> 'int' 2
|-VarDecl 0x5555afba4c28 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5555afba4c90 <col:39> 'int' 4
|-VarDecl 0x5555afba4d20 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5555afba4d88 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5555afba5108 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5555afba4e00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afba5068 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5555afba4eb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba4f58 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd8ff0 <col:43, line:371:5>
|     `-ReturnStmt 0x5555afbd8fe0 <line:370:9, col:34>
|       `-CallExpr 0x5555afbd8fa8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd8ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd8f48 <col:21> 'const char *' lvalue ParmVar 0x5555afba4eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbd8f68 <col:30> 'int' 0
|         `-DeclRefExpr 0x5555afbd8f88 <col:33> 'T' lvalue ParmVar 0x5555afba4f58 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba5438 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5555afba5170 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afba5398 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5555afba5220 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba52c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd9140 <col:45, line:375:5>
|     `-ReturnStmt 0x5555afbd9130 <line:374:9, col:42>
|       `-CallExpr 0x5555afbd90f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd9098 <col:21> 'const char *' lvalue ParmVar 0x5555afba5220 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbd90b8 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int'
|         `-DeclRefExpr 0x5555afbd90d8 <col:41> 'T' lvalue ParmVar 0x5555afba52c8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba5768 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5555afba54a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afba56c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5555afba5550 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba55f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd9290 <col:45, line:379:5>
|     `-ReturnStmt 0x5555afbd9280 <line:378:9, col:43>
|       `-CallExpr 0x5555afbd9248 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd91e8 <col:21> 'const char *' lvalue ParmVar 0x5555afba5550 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbd9208 <col:30> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         `-DeclRefExpr 0x5555afbd9228 <col:42> 'T' lvalue ParmVar 0x5555afba55f8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba5a98 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5555afba57d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5555afba59f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5555afba5880 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5555afba5928 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5555afbd9490 <col:46, line:383:5>
| |   `-ReturnStmt 0x5555afbd9480 <line:382:9, col:55>
| |     `-CallExpr 0x5555afbd9448 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5555afbd92b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5555afbd9338 <col:21> 'const char *' lvalue ParmVar 0x5555afba5880 'keyword' 'const char *'
| |       |-BinaryOperator 0x5555afbd9408 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5555afbd93b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5555afbd9398 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5555afbd93f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5555afbd93d0 <col:42> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5555afbd9428 <col:54> 'T' lvalue ParmVar 0x5555afba5928 'x' 'T &'
| `-CXXMethodDecl 0x5555afc1aa78 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
|   |-TemplateArgument type 'IP6Address'
|   |-ParmVarDecl 0x5555afc1a890 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5555afc1a968 <col:40, col:43> col:43 x 'IP6Address &'
|-FunctionTemplateDecl 0x5555afba5e98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5555afba5b00 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afba5df8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5555afba5bb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba5c30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5555afba5cd8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd95d0 <col:54, line:388:5>
|     |-CallExpr 0x5555afbd9558 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbd94a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5555afbd94e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5555afbd94f8 <col:30> 'const char *' lvalue ParmVar 0x5555afba5bb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbd9518 <col:39> 'int' lvalue ParmVar 0x5555afba5c30 'flags' 'int'
|     | `-DeclRefExpr 0x5555afbd9538 <col:46> 'T' lvalue ParmVar 0x5555afba5cd8 'x' 'T &'
|     `-ReturnStmt 0x5555afbd95c0 <line:387:9, col:17>
|       `-UnaryOperator 0x5555afbd95a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbd9598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afba6348 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5555afba5f08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afba5f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5555afba62a8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5555afba6048 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba60e8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba6188 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbd9740 <col:74, line:403:5>
|     `-ReturnStmt 0x5555afbd9730 <line:402:9, col:56>
|       `-CallExpr 0x5555afbd96f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd9670 <col:28> 'const char *' lvalue ParmVar 0x5555afba6048 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbd9690 <col:37> 'int' 0
|         |-DeclRefExpr 0x5555afbd96b0 <col:40> 'T' lvalue ParmVar 0x5555afba60e8 'x' 'T &'
|         `-DeclRefExpr 0x5555afbd96d0 <col:43> 'const V' lvalue ParmVar 0x5555afba6188 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5555afba67b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5555afba63b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afba6438 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5555afba6718 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5555afba64f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba6598 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba6638 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbd98a8 <col:76, line:407:5>
|     `-ReturnStmt 0x5555afbd9898 <line:406:9, col:65>
|       `-CallExpr 0x5555afbd9858 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd97d8 <col:28> 'const char *' lvalue ParmVar 0x5555afba64f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbd97f8 <col:37> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         |-DeclRefExpr 0x5555afbd9818 <col:49> 'T' lvalue ParmVar 0x5555afba6598 'x' 'T &'
|         `-DeclRefExpr 0x5555afbd9838 <col:52> 'const V' lvalue ParmVar 0x5555afba6638 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5555afba6d08 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5555afba6828 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afba68a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5555afba6c68 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5555afba6968 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba69e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5555afba6a88 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba6b28 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbd9a10 <col:85, line:412:5>
|     |-CallExpr 0x5555afbd9990 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbd98c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5555afbd9900 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5555afbd9910 <col:37> 'const char *' lvalue ParmVar 0x5555afba6968 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbd9930 <col:46> 'int' lvalue ParmVar 0x5555afba69e8 'flags' 'int'
|     | |-DeclRefExpr 0x5555afbd9950 <col:53> 'T' lvalue ParmVar 0x5555afba6a88 'x' 'T &'
|     | `-DeclRefExpr 0x5555afbd9970 <col:56> 'const V' lvalue ParmVar 0x5555afba6b28 'default_value' 'const V &'
|     `-ReturnStmt 0x5555afbd9a00 <line:411:9, col:17>
|       `-UnaryOperator 0x5555afbd99e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbd99d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afba7198 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5555afba6d80 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba6df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afba70f8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afba6eb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba6f30 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba6fd8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd9b90 <col:53, line:425:5>
|     `-ReturnStmt 0x5555afbd9b80 <line:424:9, col:42>
|       `-CallExpr 0x5555afbd9b40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9a40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd9ac0 <col:21> 'const char *' lvalue ParmVar 0x5555afba6eb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbd9ae0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5555afbd9b00 <col:33> 'P' lvalue ParmVar 0x5555afba6f30 'parser' 'P'
|         `-DeclRefExpr 0x5555afbd9b20 <col:41> 'T' lvalue ParmVar 0x5555afba6fd8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba75e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5555afba7208 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba7288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afba7548 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afba7348 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba73c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba7468 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd9d08 <col:55, line:429:5>
|     `-ReturnStmt 0x5555afbd9cf8 <line:428:9, col:50>
|       `-CallExpr 0x5555afbd9cb8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9bb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd9c38 <col:21> 'const char *' lvalue ParmVar 0x5555afba7348 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbd9c58 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int'
|         |-DeclRefExpr 0x5555afbd9c78 <col:41> 'P' lvalue ParmVar 0x5555afba73c0 'parser' 'P'
|         `-DeclRefExpr 0x5555afbd9c98 <col:49> 'T' lvalue ParmVar 0x5555afba7468 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba7a38 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5555afba7658 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba76d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afba7998 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afba7798 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba7810 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba78b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5555afbd9e80 <col:55, line:433:5>
|     `-ReturnStmt 0x5555afbd9e70 <line:432:9, col:51>
|       `-CallExpr 0x5555afbd9e30 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbd9d30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbd9db0 <col:21> 'const char *' lvalue ParmVar 0x5555afba7798 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbd9dd0 <col:30> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         |-DeclRefExpr 0x5555afbd9df0 <col:42> 'P' lvalue ParmVar 0x5555afba7810 'parser' 'P'
|         `-DeclRefExpr 0x5555afbd9e10 <col:50> 'T' lvalue ParmVar 0x5555afba78b8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afba7e88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5555afba7aa8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba7b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5555afba7de8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5555afba7be8 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5555afba7c60 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5555afba7d08 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5555afbda0a8 <col:56, line:437:5>
| |   `-ReturnStmt 0x5555afbda098 <line:436:9, col:63>
| |     `-CallExpr 0x5555afbda058 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5555afbd9ea8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5555afbd9f28 <col:21> 'const char *' lvalue ParmVar 0x5555afba7be8 'keyword' 'const char *'
| |       |-BinaryOperator 0x5555afbd9ff8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5555afbd9fa8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5555afbd9f88 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5555afbd9fe0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5555afbd9fc0 <col:42> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5555afbda018 <col:54> 'P' lvalue ParmVar 0x5555afba7c60 'parser' 'P'
| |       `-DeclRefExpr 0x5555afbda038 <col:62> 'T' lvalue ParmVar 0x5555afba7d08 'x' 'T &'
| |-CXXMethodDecl 0x5555afc1b508 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
| | |-TemplateArgument type 'IPPortArg'
| | |-TemplateArgument type 'unsigned short'
| | |-ParmVarDecl 0x5555afc1b270 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x5555afc1b318 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
| | `-ParmVarDecl 0x5555afc1b3e8 <col:50, col:53> col:53 x 'unsigned short &'
| `-CXXMethodDecl 0x5555afc2a738 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5555afc2a4a0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5555afc2a548 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x5555afc2a618 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x5555afba83b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5555afba7ef8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba7f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afba8318 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5555afba8038 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba80b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5555afba8130 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba81d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5555afbda210 <col:64, line:442:5>
|     |-CallExpr 0x5555afbda190 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbda0c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5555afbda100 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5555afbda110 <col:30> 'const char *' lvalue ParmVar 0x5555afba8038 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbda130 <col:39> 'int' lvalue ParmVar 0x5555afba80b8 'flags' 'int'
|     | |-DeclRefExpr 0x5555afbda150 <col:46> 'P' lvalue ParmVar 0x5555afba8130 'parser' 'P'
|     | `-DeclRefExpr 0x5555afbda170 <col:54> 'T' lvalue ParmVar 0x5555afba81d8 'x' 'T &'
|     `-ReturnStmt 0x5555afbda200 <line:441:9, col:17>
|       `-UnaryOperator 0x5555afbda1e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbda1d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afba89b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5555afba8430 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba84a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5555afba8528 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5555afba8918 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5555afba85f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba8668 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba8708 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba87d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbda3a8 <col:84, line:458:5>
|     `-ReturnStmt 0x5555afbda398 <line:457:9, col:64>
|       `-CallExpr 0x5555afbda350 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbda240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbda2b0 <col:28> 'const char *' lvalue ParmVar 0x5555afba85f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbda2d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5555afbda2f0 <col:40> 'P' lvalue ParmVar 0x5555afba8668 'parser' 'P'
|         |-DeclRefExpr 0x5555afbda310 <col:48> 'T' lvalue ParmVar 0x5555afba8708 'x' 'T &'
|         `-DeclRefExpr 0x5555afbda330 <col:51> 'const V' lvalue ParmVar 0x5555afba87d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5555afba8f38 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5555afba8a30 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba8aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5555afba8b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5555afba8e98 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5555afba8bf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba8c68 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba8d08 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba8da8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbda538 <col:86, line:462:5>
|     `-ReturnStmt 0x5555afbda528 <line:461:9, col:73>
|       `-CallExpr 0x5555afbda4e0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbda3d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbda440 <col:28> 'const char *' lvalue ParmVar 0x5555afba8bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbda460 <col:37> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         |-DeclRefExpr 0x5555afbda480 <col:49> 'P' lvalue ParmVar 0x5555afba8c68 'parser' 'P'
|         |-DeclRefExpr 0x5555afbda4a0 <col:57> 'T' lvalue ParmVar 0x5555afba8d08 'x' 'T &'
|         `-DeclRefExpr 0x5555afbda4c0 <col:60> 'const V' lvalue ParmVar 0x5555afba8da8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5555afba9598 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5555afba8fb0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba9028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5555afba90a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5555afba94f8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5555afba9170 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba91f0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5555afba9268 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba9308 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5555afba93a8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5555afbda6c8 <col:95, line:467:5>
|     |-CallExpr 0x5555afbda640 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbda550 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5555afbda590 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5555afbda5a0 <col:37> 'const char *' lvalue ParmVar 0x5555afba9170 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbda5c0 <col:46> 'int' lvalue ParmVar 0x5555afba91f0 'flags' 'int'
|     | |-DeclRefExpr 0x5555afbda5e0 <col:53> 'P' lvalue ParmVar 0x5555afba9268 'parser' 'P'
|     | |-DeclRefExpr 0x5555afbda600 <col:61> 'T' lvalue ParmVar 0x5555afba9308 'x' 'T &'
|     | `-DeclRefExpr 0x5555afbda620 <col:64> 'const V' lvalue ParmVar 0x5555afba93a8 'default_value' 'const V &'
|     `-ReturnStmt 0x5555afbda6b8 <line:466:9, col:17>
|       `-UnaryOperator 0x5555afbda6a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbda690 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afba9b78 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5555afba9618 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba9698 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afba9718 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afba9ad8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afba97e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afba9858 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5555afba98f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5555afba9998 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5555afbda870 <col:63, line:481:5>
|     `-ReturnStmt 0x5555afbda860 <line:480:9, col:47>
|       `-CallExpr 0x5555afbda818 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbda6f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbda778 <col:21> 'const char *' lvalue ParmVar 0x5555afba97e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbda798 <col:30> 'int' 0
|         |-DeclRefExpr 0x5555afbda7b8 <col:33> 'P' lvalue ParmVar 0x5555afba9858 'parser' 'P'
|         |-DeclRefExpr 0x5555afbda7d8 <col:41> 'T1' lvalue ParmVar 0x5555afba98f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5555afbda7f8 <col:45> 'T2' lvalue ParmVar 0x5555afba9998 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5555afbae3d8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5555afba9bf0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afba9c68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afba9ce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afbae338 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afbae090 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbae108 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbae1a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5555afbae248 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5555afbdaa10 <col:65, line:485:5>
|     `-ReturnStmt 0x5555afbdaa00 <line:484:9, col:55>
|       `-CallExpr 0x5555afbda9b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbda898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbda918 <col:21> 'const char *' lvalue ParmVar 0x5555afbae090 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbda938 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int'
|         |-DeclRefExpr 0x5555afbda958 <col:41> 'P' lvalue ParmVar 0x5555afbae108 'parser' 'P'
|         |-DeclRefExpr 0x5555afbda978 <col:49> 'T1' lvalue ParmVar 0x5555afbae1a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5555afbda998 <col:53> 'T2' lvalue ParmVar 0x5555afbae248 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5555afbae958 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5555afbae450 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbae4c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afbae548 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afbae8b8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afbae610 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbae688 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbae728 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5555afbae7c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5555afbdabb0 <col:65, line:489:5>
|     `-ReturnStmt 0x5555afbdaba0 <line:488:9, col:56>
|       `-CallExpr 0x5555afbdab58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdaa38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdaab8 <col:21> 'const char *' lvalue ParmVar 0x5555afbae610 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdaad8 <col:30> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         |-DeclRefExpr 0x5555afbdaaf8 <col:42> 'P' lvalue ParmVar 0x5555afbae688 'parser' 'P'
|         |-DeclRefExpr 0x5555afbdab18 <col:50> 'T1' lvalue ParmVar 0x5555afbae728 'x1' 'T1 &'
|         `-DeclRefExpr 0x5555afbdab38 <col:54> 'T2' lvalue ParmVar 0x5555afbae7c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5555afbaeed8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5555afbae9d0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbaea48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afbaeac8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afbaee38 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afbaeb90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbaec08 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbaeca8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5555afbaed48 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5555afbdae00 <col:66, line:493:5>
|     `-ReturnStmt 0x5555afbdadf0 <line:492:9, col:68>
|       `-CallExpr 0x5555afbdada8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdabd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdac58 <col:21> 'const char *' lvalue ParmVar 0x5555afbaeb90 'keyword' 'const char *'
|         |-BinaryOperator 0x5555afbdad28 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5555afbdacd8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5555afbdacb8 <col:30> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5555afbdad10 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5555afbdacf0 <col:42> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5555afbdad48 <col:54> 'P' lvalue ParmVar 0x5555afbaec08 'parser' 'P'
|         |-DeclRefExpr 0x5555afbdad68 <col:62> 'T1' lvalue ParmVar 0x5555afbaeca8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5555afbdad88 <col:66> 'T2' lvalue ParmVar 0x5555afbaed48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5555afbaf538 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5555afbaef50 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbaefc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afbaf048 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afbaf498 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afbaf110 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbaf190 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbaf208 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbaf2a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5555afbaf348 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5555afbdaf90 <col:74, line:498:5>
|     |-CallExpr 0x5555afbdaf08 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbdae18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5555afbdae58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5555afbdae68 <col:30> 'const char *' lvalue ParmVar 0x5555afbaf110 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbdae88 <col:39> 'int' lvalue ParmVar 0x5555afbaf190 'flags' 'int'
|     | |-DeclRefExpr 0x5555afbdaea8 <col:46> 'P' lvalue ParmVar 0x5555afbaf208 'parser' 'P'
|     | |-DeclRefExpr 0x5555afbdaec8 <col:54> 'T1' lvalue ParmVar 0x5555afbaf2a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5555afbdaee8 <col:58> 'T2' lvalue ParmVar 0x5555afbaf348 'x2' 'T2 &'
|     `-ReturnStmt 0x5555afbdaf80 <line:497:9, col:17>
|       `-UnaryOperator 0x5555afbdaf68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbdaf58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbaf898 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5555afbaf5b8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbaf7f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5555afbaf670 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbaf6e8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdb0d8 <col:52, line:509:5>
|     `-ReturnStmt 0x5555afbdb0c8 <line:508:9, col:44>
|       `-CallExpr 0x5555afbdb090 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdafc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb030 <col:26> 'const char *' lvalue ParmVar 0x5555afbaf670 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbdb050 <col:35> 'int' 0
|         `-DeclRefExpr 0x5555afbdb070 <col:38> 'P' lvalue ParmVar 0x5555afbaf6e8 'parser' 'P'
|-FunctionTemplateDecl 0x5555afbafb98 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5555afbaf900 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbafaf8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5555afbaf9b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbafa28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdb218 <col:54, line:513:5>
|     `-ReturnStmt 0x5555afbdb208 <line:512:9, col:52>
|       `-CallExpr 0x5555afbdb1d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb170 <col:26> 'const char *' lvalue ParmVar 0x5555afbaf9b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdb190 <col:35> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int'
|         `-DeclRefExpr 0x5555afbdb1b0 <col:46> 'P' lvalue ParmVar 0x5555afbafa28 'parser' 'P'
|-FunctionTemplateDecl 0x5555afbafe98 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5555afbafc00 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbafdf8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5555afbafcb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbafd28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdb358 <col:54, line:517:5>
|     `-ReturnStmt 0x5555afbdb348 <line:516:9, col:53>
|       `-CallExpr 0x5555afbdb310 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb2b0 <col:26> 'const char *' lvalue ParmVar 0x5555afbafcb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdb2d0 <col:35> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int'
|         `-DeclRefExpr 0x5555afbdb2f0 <col:47> 'P' lvalue ParmVar 0x5555afbafd28 'parser' 'P'
|-FunctionTemplateDecl 0x5555afbb0198 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5555afbaff00 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbb00f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5555afbaffb0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb0028 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdb548 <col:55, line:521:5>
|     `-ReturnStmt 0x5555afbdb538 <line:520:9, col:65>
|       `-CallExpr 0x5555afbdb500 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb3f0 <col:26> 'const char *' lvalue ParmVar 0x5555afbaffb0 'keyword' 'const char *'
|         |-BinaryOperator 0x5555afbdb4c0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5555afbdb470 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5555afbdb450 <col:35> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5555afbdb4a8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5555afbdb488 <col:47> 'const int' lvalue Var 0x5555afba4b30 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5555afbdb4e0 <col:59> 'P' lvalue ParmVar 0x5555afbb0028 'parser' 'P'
|-FunctionTemplateDecl 0x5555afbb0568 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5555afbb0200 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbb04c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5555afbb02b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb0330 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb03a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdb688 <col:63, line:526:5>
|     |-CallExpr 0x5555afbdb610 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbdb560 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5555afbdb5a0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5555afbdb5b0 <col:35> 'const char *' lvalue ParmVar 0x5555afbb02b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5555afbdb5d0 <col:44> 'int' lvalue ParmVar 0x5555afbb0330 'flags' 'int'
|     | `-DeclRefExpr 0x5555afbdb5f0 <col:51> 'P' lvalue ParmVar 0x5555afbb03a8 'parser' 'P'
|     `-ReturnStmt 0x5555afbdb678 <line:525:9, col:17>
|       `-UnaryOperator 0x5555afbdb660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbdb650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbb09b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5555afbb05d8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb0658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb0918 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afbb0718 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb0790 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb0838 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdb7e0 <col:58, line:541:5>
|     `-ReturnStmt 0x5555afbdb7d0 <line:540:9, col:39>
|       `-CallExpr 0x5555afbdb798 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb6b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb738 <col:21> 'const char *' lvalue ParmVar 0x5555afbb0718 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdb758 <col:30> 'P' lvalue ParmVar 0x5555afbb0790 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdb778 <col:38> 'T' lvalue ParmVar 0x5555afbb0838 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb0e08 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5555afbb0a28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb0aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb0d68 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afbb0b68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb0be0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb0c88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdb918 <col:60, line:545:5>
|     `-ReturnStmt 0x5555afbdb908 <line:544:9, col:41>
|       `-CallExpr 0x5555afbdb8d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb870 <col:23> 'const char *' lvalue ParmVar 0x5555afbb0b68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdb890 <col:32> 'P' lvalue ParmVar 0x5555afbb0be0 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdb8b0 <col:40> 'T' lvalue ParmVar 0x5555afbb0c88 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb1258 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5555afbb0e78 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb0ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb11b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afbb0fb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb1030 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb10d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdba50 <col:60, line:549:5>
|     `-ReturnStmt 0x5555afbdba40 <line:548:9, col:41>
|       `-CallExpr 0x5555afbdba08 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdb940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdb9a8 <col:23> 'const char *' lvalue ParmVar 0x5555afbb0fb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdb9c8 <col:32> 'P' lvalue ParmVar 0x5555afbb1030 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdb9e8 <col:40> 'T' lvalue ParmVar 0x5555afbb10d8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb16a8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5555afbb12c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb1348 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb1608 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afbb1408 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb1480 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb1528 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdbb88 <col:61, line:553:5>
|     `-ReturnStmt 0x5555afbdbb78 <line:552:9, col:42>
|       `-CallExpr 0x5555afbdbb40 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdba78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdbae0 <col:24> 'const char *' lvalue ParmVar 0x5555afbb1408 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdbb00 <col:33> 'P' lvalue ParmVar 0x5555afbb1480 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdbb20 <col:41> 'T' lvalue ParmVar 0x5555afbb1528 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb1b88 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5555afbb1718 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb1798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb1ae8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5555afbb1858 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb18d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb1950 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb19f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdbd00 <col:69, line:557:5>
|     `-ReturnStmt 0x5555afbdbcf0 <line:556:9, col:46>
|       `-CallExpr 0x5555afbdbcb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdbbb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdbc30 <col:21> 'const char *' lvalue ParmVar 0x5555afbb1858 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdbc50 <col:30> 'int' lvalue ParmVar 0x5555afbb18d8 'flags' 'int'
|         |-DeclRefExpr 0x5555afbdbc70 <col:37> 'P' lvalue ParmVar 0x5555afbb1950 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdbc90 <col:45> 'T' lvalue ParmVar 0x5555afbb19f8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb1e98 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5555afbb1c00 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbb1df8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5555afbb1cb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb1d28 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdbe40 <col:56, line:571:5>
|     `-ReturnStmt 0x5555afbdbe30 <line:570:9, col:48>
|       `-CallExpr 0x5555afbdbdf8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdbd28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdbd98 <col:30> 'const char *' lvalue ParmVar 0x5555afbb1cb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbdbdb8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5555afbdbdd8 <col:42> 'P' lvalue ParmVar 0x5555afbb1d28 'parser' 'P'
|-FunctionTemplateDecl 0x5555afbb2228 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5555afbb1f00 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbb2188 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5555afbb1fb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb2030 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb20a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5555afbdc010 <col:67, line:576:5>
|     |-CallExpr 0x5555afbdbf98 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbdbe58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5555afbdbe98 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5555afbdbea8 <col:39> 'const char *' lvalue ParmVar 0x5555afbb1fb0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5555afbdbf58 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5555afbdbf08 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5555afbdbec8 <col:48> 'int' lvalue ParmVar 0x5555afbb2030 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5555afbdbf40 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5555afbdbf20 <col:56> 'const int' lvalue Var 0x5555afba4d20 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5555afbdbf78 <col:68> 'P' lvalue ParmVar 0x5555afbb20a8 'parser' 'P'
|     `-ReturnStmt 0x5555afbdc000 <line:575:9, col:17>
|       `-UnaryOperator 0x5555afbdbfe8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbdbfd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbb2678 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5555afbb2298 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb2318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb25d8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5555afbb23d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb2450 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb24f8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdc180 <col:62, line:592:5>
|     `-ReturnStmt 0x5555afbdc170 <line:591:9, col:51>
|       `-CallExpr 0x5555afbdc130 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdc040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdc0b0 <col:30> 'const char *' lvalue ParmVar 0x5555afbb23d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbdc0d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5555afbdc0f0 <col:42> 'P' lvalue ParmVar 0x5555afbb2450 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdc110 <col:50> 'T' lvalue ParmVar 0x5555afbb24f8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb2b58 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5555afbb26e8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb2768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb2ab8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5555afbb2828 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb28a8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb2920 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb29c8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdc378 <col:73, line:597:5>
|     |-CallExpr 0x5555afbdc2f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbdc198 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5555afbdc1d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5555afbdc1e8 <col:39> 'const char *' lvalue ParmVar 0x5555afbb2828 'keyword' 'const char *'
|     | |-BinaryOperator 0x5555afbdc298 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5555afbdc248 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5555afbdc208 <col:48> 'int' lvalue ParmVar 0x5555afbb28a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5555afbdc280 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5555afbdc260 <col:56> 'const int' lvalue Var 0x5555afba4d20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5555afbdc2b8 <col:68> 'P' lvalue ParmVar 0x5555afbb2920 'parser' 'P'
|     | `-DeclRefExpr 0x5555afbdc2d8 <col:76> 'T' lvalue ParmVar 0x5555afbb29c8 'x' 'T &'
|     `-ReturnStmt 0x5555afbdc368 <line:596:9, col:17>
|       `-UnaryOperator 0x5555afbdc350 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbdc340 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbb3108 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5555afbb2bd0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb2c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb3068 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5555afbb2d08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb2d80 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb2f40 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5555afbdc4e8 <col:65, line:614:5>
|     `-ReturnStmt 0x5555afbdc4d8 <line:613:9, col:46>
|       `-CallExpr 0x5555afbdc498 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdc3a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdc418 <col:25> 'const char *' lvalue ParmVar 0x5555afbb2d08 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbdc438 <col:34> 'int' 0
|         |-DeclRefExpr 0x5555afbdc458 <col:37> 'P' lvalue ParmVar 0x5555afbb2d80 'parser' 'P'
|         `-DeclRefExpr 0x5555afbdc478 <col:45> 'Vector<T>' lvalue ParmVar 0x5555afbb2f40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5555afbb3538 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5555afbb3178 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afbb3498 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5555afbb3230 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb3380 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5555afbdc700 <col:55, line:618:5>
|     `-ReturnStmt 0x5555afbdc6f0 <line:617:9, col:55>
|       `-CallExpr 0x5555afbdc6b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdc510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdc580 <col:25> 'const char *' lvalue ParmVar 0x5555afbb3230 'keyword' 'const char *'
|         |-IntegerLiteral 0x5555afbdc5a0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5555afbdc670 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5555afbdc690 <col:54> 'Vector<T>' lvalue ParmVar 0x5555afbb3380 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5555afbb3b08 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5555afbb35a0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb3618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb3a68 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5555afbb36d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb3758 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb37d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbb3920 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5555afbdc8f8 <col:76, line:623:5>
|     |-CallExpr 0x5555afbdc878 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5555afbdc718 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5555afbdc758 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5555afbdc768 <col:34> 'const char *' lvalue ParmVar 0x5555afbb36d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5555afbdc818 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5555afbdc7c8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5555afbdc788 <col:43> 'int' lvalue ParmVar 0x5555afbb3758 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5555afbdc800 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5555afbdc7e0 <col:51> 'const int' lvalue Var 0x5555afba4d20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5555afbdc838 <col:63> 'P' lvalue ParmVar 0x5555afbb37d0 'parser' 'P'
|     | `-DeclRefExpr 0x5555afbdc858 <col:71> 'Vector<T>' lvalue ParmVar 0x5555afbb3920 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5555afbdc8e8 <line:622:9, col:17>
|       `-UnaryOperator 0x5555afbdc8d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbdc8c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbb4048 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5555afbb3b80 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb3bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbb3fa8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5555afbb3cb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb3d38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb3e80 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5555afbdcb60 <col:66, line:627:5>
|     `-ReturnStmt 0x5555afbdcb50 <line:626:9, col:59>
|       `-CallExpr 0x5555afbdcb10 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5555afbdc928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5555afbdc998 <col:25> 'const char *' lvalue ParmVar 0x5555afbb3cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5555afbdc9b8 <col:34> 'int' lvalue ParmVar 0x5555afbb3d38 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5555afbdcad0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5555afbdcaf0 <col:58> 'Vector<T>' lvalue ParmVar 0x5555afbb3e80 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5555afbb40d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5555afbdcbe0 <col:25, line:633:5>
|   `-ReturnStmt 0x5555afbdcbd0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5555afbdcbb8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5555afbdcb88 <col:16> 'const bool' lvalue ->_status 0x5555afbc2008
|         `-CXXThisExpr 0x5555afbdcb78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5555afbb4258 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5555afbb4190 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5555afbdccc8 <col:27, line:639:5>
|   |-BinaryOperator 0x5555afbdcc70 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5555afbdcbf8 <col:9> 'bool' lvalue ParmVar 0x5555afbb4190 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5555afbdcc58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5555afbdcc28 <col:13> 'bool' lvalue ->_status 0x5555afbc2008
|   |     `-CXXThisExpr 0x5555afbdcc18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5555afbdccb8 <line:638:9, col:17>
|     `-UnaryOperator 0x5555afbdcca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbdcc90 <col:17> 'Args *' this
|-CXXMethodDecl 0x5555afbb43d8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5555afbb4318 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5555afbdcdb8 <col:39, line:644:5>
|   |-BinaryOperator 0x5555afbdcd60 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5555afbdcce8 <col:9> 'bool' lvalue ParmVar 0x5555afbb4318 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5555afbdcd48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5555afbdcd18 <col:13> 'const bool' lvalue ->_status 0x5555afbc2008
|   |     `-CXXThisExpr 0x5555afbdcd08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5555afbdcda8 <line:643:9, col:17>
|     `-UnaryOperator 0x5555afbdcd90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbdcd80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5555afbb44a0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5555afbdce60 <col:30, line:651:5>
|   `-ReturnStmt 0x5555afbdce50 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5555afbdce38 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5555afbdce08 <col:16> 'bool' lvalue ->_read_status 0x5555afb9a230
|         `-ImplicitCastExpr 0x5555afbdcde8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5555afbdcdd8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5555afbb45e8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5555afbb4558 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5555afbdcf68 <col:32, line:658:5>
|   |-BinaryOperator 0x5555afbdcf10 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5555afbdce78 <col:9> 'bool' lvalue ParmVar 0x5555afbb4558 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5555afbdcef8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5555afbdcec8 <col:13> 'bool' lvalue ->_read_status 0x5555afb9a230
|   |     `-ImplicitCastExpr 0x5555afbdcea8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5555afbdce98 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5555afbdcf58 <line:657:9, col:17>
|     `-UnaryOperator 0x5555afbdcf40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbdcf30 <col:17> 'Args *' this
|-CXXMethodDecl 0x5555afbb4738 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5555afbb46a8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5555afbdd078 <col:44, line:663:5>
|   |-BinaryOperator 0x5555afbdd020 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5555afbdcf88 <col:9> 'bool' lvalue ParmVar 0x5555afbb46a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5555afbdd008 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5555afbdcfd8 <col:13> 'bool' lvalue ->_read_status 0x5555afb9a230
|   |     `-ImplicitCastExpr 0x5555afbdcfb8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5555afbdcfa8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5555afbdd068 <line:662:9, col:17>
|     `-UnaryOperator 0x5555afbdd050 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afbdd040 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5555afbb4800 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5555afbb48c8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5555afbb4990 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5555afbb4a58 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5555afbb4d68 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5555afbb4af8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afbb4cc8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5555afbb4bd8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdd440 <col:19, line:706:5>
|     `-IfStmt 0x5555afbdd418 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5555afbdd178 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5555afbdd348 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5555afbdd318 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5555afbdd2d8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5555afbdd1d0 <col:42> '<bound member function type>' ->simple_slot 0x5555afbd7eb0
|       |     | `-CXXThisExpr 0x5555afbdd1c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5555afbdd278 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5555afbdd220 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5555afb4f2d8 0x5555afb4dce8 0x5555af919378
|       |     | `-DeclRefExpr 0x5555afbdd200 <col:55> 'T' lvalue ParmVar 0x5555afbb4bd8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5555afbdd2b8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5555afbdd408 <line:705:13, col:34>
|         `-CallExpr 0x5555afbdd3e0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5555afbdd368 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5555afbdd3c0 <col:33> 'T' lvalue ParmVar 0x5555afbb4bd8 'x' 'T &'
|-FunctionTemplateDecl 0x5555afbb5038 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5555afbb4dc8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afbb4f98 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5555afbb4ea8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5555afbdd820 <col:31, line:717:5>
|     |-DeclStmt 0x5555afbdd580 <line:713:9, col:23>
|     | `-VarDecl 0x5555afbdd468 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5555afbdd558 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5555afbdd4e0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5555afbdd538 <col:21> 'T' lvalue ParmVar 0x5555afbb4ea8 'x' 'T &'
|     |-IfStmt 0x5555afbdd7d0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5555afbdd678 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5555afbdd7b0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5555afbdd750 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5555afbdd6e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|     |   | `-DeclRefExpr 0x5555afbdd6c0 <col:14> 'T *' lvalue Var 0x5555afbdd468 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5555afbdd790 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5555afbdd808 <line:716:9, col:16>
|       `-DeclRefExpr 0x5555afbdd7e8 <col:16> 'T *' lvalue Var 0x5555afbdd468 's' 'T *'
|-FunctionTemplateDecl 0x5555afbb5448 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5555afbb5098 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afbb5118 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5555afbb53a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5555afbb51f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5555afbb5298 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5555afbddb30 <col:37, line:726:5>
|     |-IfStmt 0x5555afbddac0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5555afbddae0 <line:723:13, col:26>
|     | | `-VarDecl 0x5555afbdd888 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5555afbdd978 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5555afbdd900 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5555afbdd958 <col:25> 'T' lvalue ParmVar 0x5555afbb51f8 'x' 'T &'
|     | |-DeclRefExpr 0x5555afbdd9a0 <col:16> 'T *' lvalue Var 0x5555afbdd888 's' 'T *'
|     | `-BinaryOperator 0x5555afbddaa0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5555afbdda50 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5555afbdd9e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|     |   | `-DeclRefExpr 0x5555afbdd9c0 <col:14> 'T *' lvalue Var 0x5555afbdd888 's' 'T *'
|     |   `-DeclRefExpr 0x5555afbdda80 <col:18> 'const V' lvalue ParmVar 0x5555afbb5298 'value' 'const V &'
|     `-ReturnStmt 0x5555afbddb20 <line:725:9, col:17>
|       `-UnaryOperator 0x5555afbddb08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5555afbddaf8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5555afbb5848 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5555afbb54b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5555afbb57a8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5555afbb5560 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb55e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb5688 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5555afbde950 <col:65, line:737:5>
|     |-DeclStmt 0x5555afbddbc8 <line:732:9, col:26>
|     | `-VarDecl 0x5555afbddb60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5555afbde918 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5555afbde938 <line:733:13, col:58>
|       | `-VarDecl 0x5555afbddbf0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5555afbdddd0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5555afbddda0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5555afbddd88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5555afbddd68 <col:26, col:58> 'String' (CXXTemporary 0x5555afbddd68)
|       |           `-CXXMemberCallExpr 0x5555afbddcf8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5555afbddc68 <col:26> '<bound member function type>' ->find 0x5555afbd5b48
|       |             | `-CXXThisExpr 0x5555afbddc58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5555afbddd30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbddc98 <col:31> 'const char *' lvalue ParmVar 0x5555afbb5560 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5555afbddd48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbddcb8 <col:40> 'int' lvalue ParmVar 0x5555afbb55e0 'flags' 'int'
|       |             `-DeclRefExpr 0x5555afbddcd8 <col:47> 'Args::Slot *' lvalue Var 0x5555afbddb60 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5555afbdde88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5555afbdde70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5555afbdde50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5555afbdde20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |       `-ImplicitCastExpr 0x5555afbdde08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5555afbddde8 <col:20> 'String' lvalue Var 0x5555afbddbf0 'str' 'String'
|       `-CompoundStmt 0x5555afbde8f8 <col:61, line:736:9>
|         |-DeclStmt 0x5555afbde340 <line:734:13, col:76>
|         | `-VarDecl 0x5555afbdded8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5555afbde310 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5555afbde280 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5555afbde2c8 <col:60> 'T' lvalue ParmVar 0x5555afbb5688 'variable' 'T &'
|         |     `-UnaryOperator 0x5555afbde2f8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5555afbde2e8 <col:71> 'Args *' this
|         `-CallExpr 0x5555afbde8c8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5555afbde368 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|           | `-CXXThisExpr 0x5555afbde358 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5555afbde888 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5555afbde398 <col:23> 'T *' lvalue Var 0x5555afbdded8 's' 'T *'
|           | `-CallExpr 0x5555afbde848 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5555afbde620 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5555afbde720 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5555afbde740 <col:86> 'String' lvalue Var 0x5555afbddbf0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5555afbde7f0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5555afbde780 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|           |   | `-DeclRefExpr 0x5555afbde760 <col:92> 'T *' lvalue Var 0x5555afbdded8 's' 'T *'
|           |   `-UnaryOperator 0x5555afbde830 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5555afbde820 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5555afbde8a8 <col:103> 'Args::Slot *' lvalue Var 0x5555afbddb60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbb5d98 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5555afbb58b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afbb5938 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5555afbb5cf8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5555afbb59f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb5a78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbb5b18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5555afbb5bb8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5555afbdf7f0 <col:88, line:745:5>
|     |-DeclStmt 0x5555afbde9e8 <line:741:9, col:26>
|     | `-VarDecl 0x5555afbde980 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5555afbdec08 <line:742:9, col:55>
|     | `-VarDecl 0x5555afbdea10 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5555afbdebf0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5555afbdebc0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5555afbdeba8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5555afbdeb88 <col:22, col:54> 'String' (CXXTemporary 0x5555afbdeb88)
|     |           `-CXXMemberCallExpr 0x5555afbdeb18 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5555afbdea88 <col:22> '<bound member function type>' ->find 0x5555afbd5b48
|     |             | `-CXXThisExpr 0x5555afbdea78 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5555afbdeb50 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5555afbdeab8 <col:27> 'const char *' lvalue ParmVar 0x5555afbb59f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5555afbdeb68 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5555afbdead8 <col:36> 'int' lvalue ParmVar 0x5555afbb5a78 'flags' 'int'
|     |             `-DeclRefExpr 0x5555afbdeaf8 <col:43> 'Args::Slot *' lvalue Var 0x5555afbde980 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5555afbdefe0 <line:743:9, col:72>
|     | `-VarDecl 0x5555afbdec58 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5555afbdefb0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5555afbdef20 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5555afbdef68 <col:56> 'T' lvalue ParmVar 0x5555afbb5b18 'variable' 'T &'
|     |     `-UnaryOperator 0x5555afbdef98 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5555afbdef88 <col:67> 'Args *' this
|     `-CallExpr 0x5555afbdf7c0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5555afbdf008 <col:9> '<bound member function type>' ->postparse 0x5555afbd5d58
|       | `-CXXThisExpr 0x5555afbdeff8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5555afbdf780 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5555afbdf038 <col:19> 'T *' lvalue Var 0x5555afbdec58 's' 'T *'
|       | `-ParenExpr 0x5555afbdf760 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5555afbdf730 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5555afbdf718 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5555afbdf700 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5555afbdf6e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5555afbdf6b0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |     |       `-ImplicitCastExpr 0x5555afbdf698 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5555afbdf058 <col:25> 'String' lvalue Var 0x5555afbdea10 'str' 'String'
|       |     |-CallExpr 0x5555afbdf508 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5555afbdf2e0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5555afbdf3e0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5555afbdf400 <col:89> 'String' lvalue Var 0x5555afbdea10 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5555afbdf4b0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5555afbdf440 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|       |     | | `-DeclRefExpr 0x5555afbdf420 <col:95> 'T *' lvalue Var 0x5555afbdec58 's' 'T *'
|       |     | `-UnaryOperator 0x5555afbdf4f0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5555afbdf4e0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5555afbdf678 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5555afbdf658 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5555afbdf628 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5555afbdf5d8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5555afbdf568 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|       |         | | `-DeclRefExpr 0x5555afbdf548 <col:109> 'T *' lvalue Var 0x5555afbdec58 's' 'T *'
|       |         | `-DeclRefExpr 0x5555afbdf608 <col:113> 'const V' lvalue ParmVar 0x5555afbb5bb8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5555afbdf648 <col:120> 'bool' true
|       `-DeclRefExpr 0x5555afbdf7a0 <col:128> 'Args::Slot *' lvalue Var 0x5555afbde980 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbbe3b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5555afbb5e10 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbb5e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbbe318 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5555afbb5f48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbb5fc8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbe130 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbbe1d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5555afbe2698 <col:75, line:754:5>
|     |-DeclStmt 0x5555afbdf898 <line:749:9, col:26>
|     | `-VarDecl 0x5555afbdf830 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5555afbe2660 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5555afbe2680 <line:750:13, col:58>
|       | `-VarDecl 0x5555afbdf8c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5555afbdfaa0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5555afbdfa70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5555afbdfa58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5555afbdfa38 <col:26, col:58> 'String' (CXXTemporary 0x5555afbdfa38)
|       |           `-CXXMemberCallExpr 0x5555afbdf9c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5555afbdf938 <col:26> '<bound member function type>' ->find 0x5555afbd5b48
|       |             | `-CXXThisExpr 0x5555afbdf928 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5555afbdfa00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbdf968 <col:31> 'const char *' lvalue ParmVar 0x5555afbb5f48 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5555afbdfa18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbdf988 <col:40> 'int' lvalue ParmVar 0x5555afbb5fc8 'flags' 'int'
|       |             `-DeclRefExpr 0x5555afbdf9a8 <col:47> 'Args::Slot *' lvalue Var 0x5555afbdf830 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5555afbdfb58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5555afbdfb40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5555afbdfb20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5555afbdfaf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |       `-ImplicitCastExpr 0x5555afbdfad8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5555afbdfab8 <col:20> 'String' lvalue Var 0x5555afbdf8c0 'str' 'String'
|       `-CompoundStmt 0x5555afbe2640 <col:61, line:753:9>
|         |-DeclStmt 0x5555afbe21e0 <line:751:13, col:63>
|         | `-VarDecl 0x5555afbdfba8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5555afbe21b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5555afbe2120 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5555afbe2168 <col:47> 'T' lvalue ParmVar 0x5555afbbe1d8 'variable' 'T &'
|         |     `-UnaryOperator 0x5555afbe2198 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5555afbe2188 <col:58> 'Args *' this
|         `-CallExpr 0x5555afbe2610 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5555afbe2208 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|           | `-CXXThisExpr 0x5555afbe21f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5555afbe25d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5555afbe2238 <col:23> 'T *' lvalue Var 0x5555afbdfba8 's' 'T *'
|           | `-CallExpr 0x5555afbe2590 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5555afbe2420 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5555afbe2468 <col:56> 'P' lvalue ParmVar 0x5555afbbe130 'parser' 'P'
|           |   |-DeclRefExpr 0x5555afbe2488 <col:64> 'String' lvalue Var 0x5555afbdf8c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5555afbe2538 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5555afbe24c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|           |   | `-DeclRefExpr 0x5555afbe24a8 <col:70> 'T *' lvalue Var 0x5555afbdfba8 's' 'T *'
|           |   `-UnaryOperator 0x5555afbe2578 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5555afbe2568 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5555afbe25f0 <col:81> 'Args::Slot *' lvalue Var 0x5555afbdf830 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbbea18 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5555afbbe430 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5555afbbe4a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5555afbbe528 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5555afbbe978 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5555afbbe5f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbe670 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbe6e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbbe788 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5555afbbe828 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5555afbe3428 <col:98, line:762:5>
|     |-DeclStmt 0x5555afbe2730 <line:758:9, col:26>
|     | `-VarDecl 0x5555afbe26c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5555afbe2950 <line:759:9, col:55>
|     | `-VarDecl 0x5555afbe2758 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5555afbe2938 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5555afbe2908 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5555afbe28f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5555afbe28d0 <col:22, col:54> 'String' (CXXTemporary 0x5555afbe28d0)
|     |           `-CXXMemberCallExpr 0x5555afbe2860 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5555afbe27d0 <col:22> '<bound member function type>' ->find 0x5555afbd5b48
|     |             | `-CXXThisExpr 0x5555afbe27c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5555afbe2898 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5555afbe2800 <col:27> 'const char *' lvalue ParmVar 0x5555afbbe5f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5555afbe28b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5555afbe2820 <col:36> 'int' lvalue ParmVar 0x5555afbbe670 'flags' 'int'
|     |             `-DeclRefExpr 0x5555afbe2840 <col:43> 'Args::Slot *' lvalue Var 0x5555afbe26c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5555afbe2d70 <line:760:9, col:59>
|     | `-VarDecl 0x5555afbe29a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5555afbe2d40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5555afbe2cb0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5555afbe2cf8 <col:43> 'T' lvalue ParmVar 0x5555afbbe788 'variable' 'T &'
|     |     `-UnaryOperator 0x5555afbe2d28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5555afbe2d18 <col:54> 'Args *' this
|     `-CallExpr 0x5555afbe33f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5555afbe2d98 <col:9> '<bound member function type>' ->postparse 0x5555afbd5d58
|       | `-CXXThisExpr 0x5555afbe2d88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5555afbe33b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5555afbe2dc8 <col:19> 'T *' lvalue Var 0x5555afbe29a8 's' 'T *'
|       | `-ParenExpr 0x5555afbe3398 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5555afbe3368 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5555afbe3350 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5555afbe3338 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5555afbe3318 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5555afbe32e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |     |       `-ImplicitCastExpr 0x5555afbe32d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5555afbe2de8 <col:25> 'String' lvalue Var 0x5555afbe2758 'str' 'String'
|       |     |-CallExpr 0x5555afbe3140 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5555afbe2fd0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5555afbe3018 <col:59> 'P' lvalue ParmVar 0x5555afbbe6e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5555afbe3038 <col:67> 'String' lvalue Var 0x5555afbe2758 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5555afbe30e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5555afbe3078 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|       |     | | `-DeclRefExpr 0x5555afbe3058 <col:73> 'T *' lvalue Var 0x5555afbe29a8 's' 'T *'
|       |     | `-UnaryOperator 0x5555afbe3128 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5555afbe3118 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5555afbe32b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5555afbe3290 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5555afbe3260 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5555afbe3210 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5555afbe31a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|       |         | | `-DeclRefExpr 0x5555afbe3180 <col:87> 'T *' lvalue Var 0x5555afbe29a8 's' 'T *'
|       |         | `-DeclRefExpr 0x5555afbe3240 <col:91> 'const V' lvalue ParmVar 0x5555afbbe828 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5555afbe3280 <col:98> 'bool' true
|       `-DeclRefExpr 0x5555afbe33d8 <col:106> 'Args::Slot *' lvalue Var 0x5555afbe26c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbbf088 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5555afbbea98 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbbeb18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5555afbbeb98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5555afbbefe8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5555afbbec60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbece0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbed58 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbbedf8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5555afbbee98 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5555afbe4408 <col:60, line:773:5>
|     |-DeclStmt 0x5555afbe34d0 <line:767:9, col:26>
|     | `-VarDecl 0x5555afbe3468 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5555afbe43d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5555afbe43f0 <line:768:13, col:58>
|       | `-VarDecl 0x5555afbe34f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5555afbe36d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5555afbe36a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5555afbe3690 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5555afbe3670 <col:26, col:58> 'String' (CXXTemporary 0x5555afbe3670)
|       |           `-CXXMemberCallExpr 0x5555afbe3600 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5555afbe3570 <col:26> '<bound member function type>' ->find 0x5555afbd5b48
|       |             | `-CXXThisExpr 0x5555afbe3560 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5555afbe3638 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbe35a0 <col:31> 'const char *' lvalue ParmVar 0x5555afbbec60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5555afbe3650 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbe35c0 <col:40> 'int' lvalue ParmVar 0x5555afbbece0 'flags' 'int'
|       |             `-DeclRefExpr 0x5555afbe35e0 <col:47> 'Args::Slot *' lvalue Var 0x5555afbe3468 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5555afbe3790 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5555afbe3778 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5555afbe3758 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5555afbe3728 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |       `-ImplicitCastExpr 0x5555afbe3710 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5555afbe36f0 <col:20> 'String' lvalue Var 0x5555afbe34f8 'str' 'String'
|       `-CompoundStmt 0x5555afbe43a8 <col:61, line:772:9>
|         |-DeclStmt 0x5555afbe3ad0 <line:769:13, col:66>
|         | `-VarDecl 0x5555afbe37e8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5555afbe3aa0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5555afbe3a10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5555afbe3a58 <col:49> 'T1' lvalue ParmVar 0x5555afbbedf8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5555afbe3a88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5555afbe3a78 <col:61> 'Args *' this
|         |-DeclStmt 0x5555afbe3e40 <line:770:13, col:66>
|         | `-VarDecl 0x5555afbe3b58 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5555afbe3e10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5555afbe3d80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5555afbe3dc8 <col:49> 'T2' lvalue ParmVar 0x5555afbbee98 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5555afbe3df8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5555afbe3de8 <col:61> 'Args *' this
|         `-CallExpr 0x5555afbe4378 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5555afbe3e68 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|           | `-CXXThisExpr 0x5555afbe3e58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5555afbe4338 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5555afbe3ed8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5555afbe3e98 <col:23> 'T1 *' lvalue Var 0x5555afbe37e8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5555afbe3eb8 <col:29> 'T2 *' lvalue Var 0x5555afbe3b58 's2' 'T2 *'
|           | `-CallExpr 0x5555afbe42f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5555afbe40c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5555afbe4108 <col:63> 'P' lvalue ParmVar 0x5555afbbed58 'parser' 'P'
|           |   |-DeclRefExpr 0x5555afbe4128 <col:71> 'String' lvalue Var 0x5555afbe34f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5555afbe41d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5555afbe4168 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|           |   | `-DeclRefExpr 0x5555afbe4148 <col:77> 'T1 *' lvalue Var 0x5555afbe37e8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5555afbe4298 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5555afbe4228 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|           |   | `-DeclRefExpr 0x5555afbe4208 <col:82> 'T2 *' lvalue Var 0x5555afbe3b58 's2' 'T2 *'
|           |   `-UnaryOperator 0x5555afbe42d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5555afbe42c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5555afbe4358 <col:94> 'Args::Slot *' lvalue Var 0x5555afbe3468 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbbf478 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5555afbbf108 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbbf3d8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5555afbbf1c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbf240 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbf2b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5555afbe4920 <col:67, line:780:5>
|     |-DeclStmt 0x5555afbe44a0 <line:777:9, col:26>
|     | `-VarDecl 0x5555afbe4438 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5555afbe48e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5555afbe4908 <line:778:13, col:58>
|       | `-VarDecl 0x5555afbe44c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5555afbe46a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5555afbe4678 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5555afbe4660 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5555afbe4640 <col:26, col:58> 'String' (CXXTemporary 0x5555afbe4640)
|       |           `-CXXMemberCallExpr 0x5555afbe45d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5555afbe4540 <col:26> '<bound member function type>' ->find 0x5555afbd5b48
|       |             | `-CXXThisExpr 0x5555afbe4530 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5555afbe4608 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbe4570 <col:31> 'const char *' lvalue ParmVar 0x5555afbbf1c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5555afbe4620 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5555afbe4590 <col:40> 'int' lvalue ParmVar 0x5555afbbf240 'flags' 'int'
|       |             `-DeclRefExpr 0x5555afbe45b0 <col:47> 'Args::Slot *' lvalue Var 0x5555afbe4438 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5555afbe4760 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5555afbe4748 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5555afbe4728 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5555afbe46f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|       |       `-ImplicitCastExpr 0x5555afbe46e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5555afbe46c0 <col:20> 'String' lvalue Var 0x5555afbe44c8 'str' 'String'
|       `-CallExpr 0x5555afbe48b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5555afbe4788 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|         | `-CXXThisExpr 0x5555afbe4778 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5555afbe4868 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5555afbe47d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5555afbe47b8 <col:23> 'P' lvalue ParmVar 0x5555afbbf2b8 'parser' 'P'
|         | |-DeclRefExpr 0x5555afbe4820 <col:36> 'String' lvalue Var 0x5555afbe44c8 'str' 'String'
|         | `-UnaryOperator 0x5555afbe4850 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5555afbe4840 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5555afbe4898 <col:49> 'Args::Slot *' lvalue Var 0x5555afbe4438 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5555afbbf818 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5555afbbf4e8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5555afbbf778 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5555afbbf5a0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbf620 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbf698 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5555afbe5290 <col:71, line:792:5>
|     |-DeclStmt 0x5555afbe49b8 <line:784:9, col:26>
|     | `-VarDecl 0x5555afbe4950 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5555afbe4a88 <line:785:9, col:29>
|     | `-VarDecl 0x5555afbe49e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5555afbe4a70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5555afbe4a50 <col:28> 'int' 1
|     |-WhileStmt 0x5555afbe5140 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5555afbe5160 <line:786:16, col:61>
|     | | `-VarDecl 0x5555afbe4ab0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5555afbe4c90 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5555afbe4c60 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5555afbe4c48 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5555afbe4c28 <col:29, col:61> 'String' (CXXTemporary 0x5555afbe4c28)
|     | |           `-CXXMemberCallExpr 0x5555afbe4bb8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5555afbe4b28 <col:29> '<bound member function type>' ->find 0x5555afbd5b48
|     | |             | `-CXXThisExpr 0x5555afbe4b18 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5555afbe4bf0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe4b58 <col:34> 'const char *' lvalue ParmVar 0x5555afbbf5a0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5555afbe4c08 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe4b78 <col:43> 'int' lvalue ParmVar 0x5555afbbf620 'flags' 'int'
|     | |             `-DeclRefExpr 0x5555afbe4b98 <col:50> 'Args::Slot *' lvalue Var 0x5555afbe4950 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5555afbe4d48 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5555afbe4d30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5555afbe4d10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5555afbe4ce0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|     | |       `-ImplicitCastExpr 0x5555afbe4cc8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5555afbe4ca8 <col:23> 'String' lvalue Var 0x5555afbe4ab0 'str' 'String'
|     | `-CompoundStmt 0x5555afbe5118 <col:64, line:790:9>
|     |   |-CallExpr 0x5555afbe4ea0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5555afbe4d70 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|     |   | | `-CXXThisExpr 0x5555afbe4d60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5555afbe4e50 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5555afbe4dc0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5555afbe4da0 <col:23> 'P' lvalue ParmVar 0x5555afbbf698 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5555afbe4e08 <col:36> 'String' lvalue Var 0x5555afbe4ab0 'str' 'String'
|     |   | | `-UnaryOperator 0x5555afbe4e38 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5555afbe4e28 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5555afbe4e80 <col:49> 'Args::Slot *' lvalue Var 0x5555afbe4950 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5555afbe5038 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5555afbe4ed0 <col:13> 'int' lvalue Var 0x5555afbe49e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5555afbe5020 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5555afbe5000 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5555afbe4f68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5555afbe4f48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5555afbe4f30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5555afbe4ef0 <col:28> 'int' lvalue Var 0x5555afbe49e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5555afbe4f10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5555afbe4fe8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5555afbe4fb8 <col:49> 'bool' lvalue ->_read_status 0x5555afb9a230
|     |   |         `-ImplicitCastExpr 0x5555afbe4f98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5555afbe4f88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5555afbe50e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5555afbe5058 <col:13> 'int' lvalue ParmVar 0x5555afbbf620 'flags' 'int'
|     |     `-UnaryOperator 0x5555afbe50d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5555afbe50b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5555afbe5098 <col:23> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5555afbe5270 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5555afbe51a8 <col:9> 'bool' lvalue ->_read_status 0x5555afb9a230
|       | `-ImplicitCastExpr 0x5555afbe5188 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5555afbe5178 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5555afbe5250 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5555afbe5230 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5555afbe5218 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5555afbe51d8 <col:25> 'int' lvalue Var 0x5555afbe49e8 'read_status' 'int'
|           `-IntegerLiteral 0x5555afbe51f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5555afbbfcf8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5555afbbf888 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbbf908 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbbfc58 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5555afbbf9c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbfa48 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbfac0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbbfb68 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5555afbe6220 <col:84, line:805:5>
|     |-DeclStmt 0x5555afbe5338 <line:796:9, col:26>
|     | `-VarDecl 0x5555afbe52d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5555afbe5408 <line:797:9, col:29>
|     | `-VarDecl 0x5555afbe5368 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5555afbe53f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5555afbe53d0 <col:28> 'int' 1
|     |-DeclStmt 0x5555afbe5740 <line:798:9, col:71>
|     | `-VarDecl 0x5555afbe5458 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5555afbe5710 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5555afbe5680 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5555afbe56c8 <col:55> 'T' lvalue ParmVar 0x5555afbbfb68 'variable' 'T &'
|     |     `-UnaryOperator 0x5555afbe56f8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5555afbe56e8 <col:66> 'Args *' this
|     |-WhileStmt 0x5555afbe60d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5555afbe60f0 <line:799:16, col:61>
|     | | `-VarDecl 0x5555afbe5768 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5555afbe5948 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5555afbe5918 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5555afbe5900 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5555afbe58e0 <col:29, col:61> 'String' (CXXTemporary 0x5555afbe58e0)
|     | |           `-CXXMemberCallExpr 0x5555afbe5870 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5555afbe57e0 <col:29> '<bound member function type>' ->find 0x5555afbd5b48
|     | |             | `-CXXThisExpr 0x5555afbe57d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5555afbe58a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe5810 <col:34> 'const char *' lvalue ParmVar 0x5555afbbf9c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5555afbe58c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe5830 <col:43> 'int' lvalue ParmVar 0x5555afbbfa48 'flags' 'int'
|     | |             `-DeclRefExpr 0x5555afbe5850 <col:50> 'Args::Slot *' lvalue Var 0x5555afbe52d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5555afbe5a00 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5555afbe59e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5555afbe59c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5555afbe5998 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|     | |       `-ImplicitCastExpr 0x5555afbe5980 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5555afbe5960 <col:23> 'String' lvalue Var 0x5555afbe5768 'str' 'String'
|     | `-CompoundStmt 0x5555afbe60a8 <col:64, line:803:9>
|     |   |-CallExpr 0x5555afbe5e30 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5555afbe5a28 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|     |   | | `-CXXThisExpr 0x5555afbe5a18 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5555afbe5df0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5555afbe5a58 <col:23> 'T *' lvalue Var 0x5555afbe5458 's' 'T *'
|     |   | | `-CallExpr 0x5555afbe5db0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5555afbe5c40 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5555afbe5c88 <col:56> 'P' lvalue ParmVar 0x5555afbbfac0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5555afbe5ca8 <col:64> 'String' lvalue Var 0x5555afbe5768 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5555afbe5d58 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5555afbe5ce8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|     |   | |   | `-DeclRefExpr 0x5555afbe5cc8 <col:70> 'T *' lvalue Var 0x5555afbe5458 's' 'T *'
|     |   | |   `-UnaryOperator 0x5555afbe5d98 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5555afbe5d88 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5555afbe5e10 <col:81> 'Args::Slot *' lvalue Var 0x5555afbe52d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5555afbe5fc8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5555afbe5e60 <col:13> 'int' lvalue Var 0x5555afbe5368 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5555afbe5fb0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5555afbe5f90 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5555afbe5ef8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5555afbe5ed8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5555afbe5ec0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5555afbe5e80 <col:28> 'int' lvalue Var 0x5555afbe5368 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5555afbe5ea0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5555afbe5f78 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5555afbe5f48 <col:49> 'bool' lvalue ->_read_status 0x5555afb9a230
|     |   |         `-ImplicitCastExpr 0x5555afbe5f28 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5555afbe5f18 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5555afbe6078 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5555afbe5fe8 <col:13> 'int' lvalue ParmVar 0x5555afbbfa48 'flags' 'int'
|     |     `-UnaryOperator 0x5555afbe6060 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5555afbe6048 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5555afbe6028 <col:23> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5555afbe6200 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5555afbe6138 <col:9> 'bool' lvalue ->_read_status 0x5555afb9a230
|       | `-ImplicitCastExpr 0x5555afbe6118 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5555afbe6108 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5555afbe61e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5555afbe61c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5555afbe61a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5555afbe6168 <col:25> 'int' lvalue Var 0x5555afbe5368 'read_status' 'int'
|           `-IntegerLiteral 0x5555afbe6188 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5555afbc02d8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5555afbbfd70 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5555afbbfde8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5555afbc0238 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5555afbbfea8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5555afbbff28 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5555afbbffa0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5555afbc00f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5555afbe7028 <col:87, line:821:5>
|     |-DeclStmt 0x5555afbe62d0 <line:809:9, col:26>
|     | `-VarDecl 0x5555afbe6268 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5555afbe63a0 <line:810:9, col:29>
|     | `-VarDecl 0x5555afbe6300 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5555afbe6388 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5555afbe6368 <col:28> 'int' 1
|     |-DeclStmt 0x5555afbe65e8 <line:811:9, col:38>
|     | `-VarDecl 0x5555afbe64d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5555afbe65c0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5555afbe6548 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5555afbe65a0 <col:29> 'Vector<T>' lvalue ParmVar 0x5555afbc00f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5555afbe6ed8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5555afbe6ef8 <line:812:16, col:61>
|     | | `-VarDecl 0x5555afbe6610 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5555afbe67f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5555afbe67c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5555afbe67a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5555afbe6788 <col:29, col:61> 'String' (CXXTemporary 0x5555afbe6788)
|     | |           `-CXXMemberCallExpr 0x5555afbe6718 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5555afbe6688 <col:29> '<bound member function type>' ->find 0x5555afbd5b48
|     | |             | `-CXXThisExpr 0x5555afbe6678 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5555afbe6750 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe66b8 <col:34> 'const char *' lvalue ParmVar 0x5555afbbfea8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5555afbe6768 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5555afbe66d8 <col:43> 'int' lvalue ParmVar 0x5555afbbff28 'flags' 'int'
|     | |             `-DeclRefExpr 0x5555afbe66f8 <col:50> 'Args::Slot *' lvalue Var 0x5555afbe6268 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5555afbe68a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5555afbe6890 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5555afbe6870 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5555afbe6840 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5555af8dd7b8
|     | |       `-ImplicitCastExpr 0x5555afbe6828 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5555afbe6808 <col:23> 'String' lvalue Var 0x5555afbe6610 'str' 'String'
|     | `-CompoundStmt 0x5555afbe6ea0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5555afbe6968 <line:813:13, col:23>
|     |   | `-VarDecl 0x5555afbe68d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5555afbe6948 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5555afbe6ae8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5555afbe6990 <col:13> '<bound member function type>' ->postparse 0x5555afbd5d58
|     |   | | `-CXXThisExpr 0x5555afbe6980 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5555afbe6a90 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5555afbe69e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5555afbe69c0 <col:23> 'P' lvalue ParmVar 0x5555afbbffa0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5555afbe6a28 <col:36> 'String' lvalue Var 0x5555afbe6610 'str' 'String'
|     |   | | |-DeclRefExpr 0x5555afbe6a48 <col:41> 'T' lvalue Var 0x5555afbe68d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5555afbe6a78 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5555afbe6a68 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5555afbe6ac8 <col:53> 'Args::Slot *' lvalue Var 0x5555afbe6268 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5555afbe6c40 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5555afbe6b78 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5555afbe6b48 <col:17> 'bool' lvalue ->_read_status 0x5555afb9a230
|     |   | |   `-ImplicitCastExpr 0x5555afbe6b28 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5555afbe6b18 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5555afbe6c18 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5555afbe6bb0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5555afbe6b90 <col:17> 'Vector<T> *' lvalue Var 0x5555afbe64d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5555afbe6bf8 <col:30> 'T' lvalue Var 0x5555afbe68d0 'sx' 'T'
|     |   |-BinaryOperator 0x5555afbe6dc0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5555afbe6c58 <col:13> 'int' lvalue Var 0x5555afbe6300 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5555afbe6da8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5555afbe6d88 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5555afbe6cf0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5555afbe6cd0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5555afbe6cb8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5555afbe6c78 <col:28> 'int' lvalue Var 0x5555afbe6300 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5555afbe6c98 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5555afbe6d70 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5555afbe6d40 <col:49> 'bool' lvalue ->_read_status 0x5555afb9a230
|     |   |         `-ImplicitCastExpr 0x5555afbe6d20 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5555afbe6d10 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5555afbe6e70 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5555afbe6de0 <col:13> 'int' lvalue ParmVar 0x5555afbbff28 'flags' 'int'
|     |     `-UnaryOperator 0x5555afbe6e58 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5555afbe6e40 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5555afbe6e20 <col:23> 'const int' lvalue Var 0x5555afba4a38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5555afbe7008 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5555afbe6f40 <col:9> 'bool' lvalue ->_read_status 0x5555afb9a230
|       | `-ImplicitCastExpr 0x5555afbe6f20 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5555afbe6f10 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5555afbe6fe8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5555afbe6fc8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5555afbe6fb0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5555afbe6f70 <col:25> 'int' lvalue Var 0x5555afbe6300 'read_status' 'int'
|           `-IntegerLiteral 0x5555afbe6f90 <col:40> 'int' 1
|-AccessSpecDecl 0x5555afbc0350 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5555afbc0378 prev 0x5555afba2d70 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5555afbc0470 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5555afbc0560 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5555afbe7060 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5555afbc0650 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5555afbe7070 <col:25, line:830:9>
| |-CXXMethodDecl 0x5555afbc0750 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5555afbc0800 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5555afbc08a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5555afbc08a8
| | `-ParmVarDecl 0x5555afbc09b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5555afbc1178 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5555afbc1178
|   `-ParmVarDecl 0x5555afbc1288 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5555afbc0a28 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5555afbc0b88 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5555afbc0d80 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5555afbc0c30 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5555afbc0ca8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5555afbe7250 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5555afbc1038 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5555afbe70c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5555afbe7080 <col:20> 'void *' lvalue ParmVar 0x5555afbc0c30 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5555afbc10a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5555afbe7148 <col:32, col:45> 'char *' array Function 0x5555af6fbdc8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5555afbe7130 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5555afbe7100 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5555afbc0ca8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5555afbc1100 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5555afbe7210 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5555afbe71d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5555afbc0ca8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5555afbe72d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5555afbc0e80 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5555afbc0650 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5555afbe7358 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5555afbe7338 <line:840:13, col:22> 'void' array Function 0x5555af6fc128 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5555afbe7320 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5555afbe72f0 <col:22> 'char *' lvalue ->_slot 0x5555afbc10a0
| |         `-CXXThisExpr 0x5555afbe72e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5555afbc0f80 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5555afbc0750 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5555afbe7548 <col:22, line:844:9>
| |   `-CallExpr 0x5555afbe74b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5555afbe7498 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5555afbe7478 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5555af833018 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5555afbe74e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5555afbe73c8 <col:20> 'void *' lvalue ->_ptr 0x5555afbc1038
| |     |   `-CXXThisExpr 0x5555afbe73b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5555afbe7518 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5555afbe7500 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5555afbe7408 <col:26> 'char *' lvalue ->_slot 0x5555afbc10a0
| |     |     `-CXXThisExpr 0x5555afbe73f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5555afbe7530 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5555afbe7448 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5555afbc1100
| |         `-CXXThisExpr 0x5555afbe7438 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5555afbc1038 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5555afbc10a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5555afbc1100 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5555afbc12f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5555afbc12f8
| | `-ParmVarDecl 0x5555afbc1408 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5555afbc14a8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5555afbc14a8
|   `-ParmVarDecl 0x5555afbc15b8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5555afbc1758 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5555afbc1628 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5555afbc16c8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5555afbc19f0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5555afbc1be8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5555afbc1ab8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5555afbc1d68 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5555afbe7580 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5555afbe7560 <col:20> 'T *' lvalue ParmVar 0x5555afbc1ab8 'ptr' 'T *'
|   | `-CompoundStmt 0x5555afbe75d0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5555afbc1cb8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5555afbc0750 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5555afbe7780 <col:22, line:857:9>
|   |   `-CallExpr 0x5555afbe7750 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5555afbe75e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5555af8c6558 0x5555af86fe38
|   |     |-CXXOperatorCallExpr 0x5555afbe76e0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5555afbe7670 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5555aface7c8 0x5555aface3e8 0x5555aface018 0x5555afacdc38 0x5555afacd850 0x5555afacd3e8
|   |     | `-MemberExpr 0x5555afbe7640 <col:29> 'T *' lvalue ->_ptr 0x5555afbc1d68
|   |     |   `-CXXThisExpr 0x5555afbe7630 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5555afbe7720 <col:35> 'T' lvalue ->_slot 0x5555afbc1dc8
|   |       `-CXXThisExpr 0x5555afbe7710 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5555afbc1d68 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5555afbc1dc8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5555afbc1e30 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5555afbc1f30 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5555afbc1f80 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afbc1f10 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5555afbc1ef0 <col:31> 'int' 48
|-FieldDecl 0x5555afbc1fa8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5555afbc2008 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5555afbc2068 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5555afbc21a0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5555afbd53f0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5555afbd5450 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5555afbd5500 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5555afbd5728 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5555afbd5630 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5555afbd5878 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5555afbd57e8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5555afbd5b48 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5555afbd5938 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5555afbd59b8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5555afbd5a60 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5555afbd5d58 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5555afbd5c10 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5555afbd5c88 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5555afbd5e28 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5555afbd5f78 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5555afbd5ee0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5555afbd6308 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5555afbd6038 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5555afbd60b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5555afbd6160 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5555afbd6218 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5555afbd7eb0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5555afbd63e0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5555afbd6458 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5555afbd81c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5555afbd7f60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5555afbd8128 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5555afbd8038 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af922ce0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555af922df8 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x5555af922e88 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5555af922fa8 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x5555af922ed8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x5555af9233d8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5555af9234a0 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5555af923460 <col:9> 'int' lvalue ParmVar 0x5555af922ed8 'p' 'int'
| `-CompoundStmt 0x5555af923a68 <col:12, line:412:5>
|   `-ParenExpr 0x5555af923a48 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x5555af923a18 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x5555af923648 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5555af923618 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x5555af923560 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x5555af923548 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x5555af9234f8 <col:23> 'int' lvalue ->ip_p 0x5555af9233d8
|       |   | |   `-CXXThisExpr 0x5555af9234e8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x5555af923528 <col:30> 'int' 0
|       |   `-BinaryOperator 0x5555af9235f8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x5555af9235e0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x5555af923590 <col:35> 'int' lvalue ->ip_p 0x5555af9233d8
|       |     |   `-CXXThisExpr 0x5555af923580 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x5555af9235c0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x5555af9236a8 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5555af923688 <col:55> 'int' 0
|       `-CallExpr 0x5555af923978 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x5555af923960 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5555af923940 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5555af9239b8 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5555af923798 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x5555af9239d0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5555af923808 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x5555af9239e8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5555af923840 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x5555af923a00 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5555af923928 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5555af923910 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5555af9238d8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x5555af923308 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x5555af923068 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5555af923138 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x5555af9231b0 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5555af923440 <col:34> 'const ArgContext' lvalue Var 0x5555af90f500 'blank_args' 'const ArgContext'
|-FieldDecl 0x5555af9233d8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x5555afc1acf8 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x5555afc1acf8
| `-ParmVarDecl 0x5555afc1ae08 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x5555afc1aea8 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afc1afb8 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x5555af9233d8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5555afc1b7a0 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5555afc1b770 <col:7> 'int' xvalue .ip_p 0x5555af9233d8
| |     `-CXXStaticCastExpr 0x5555afc1b740 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x5555afc1b710 <col:7> 'IPPortArg' lvalue ParmVar 0x5555afc1afb8 '' 'IPPortArg &&'
| `-CompoundStmt 0x5555afc1b7e8 <col:7>
`-CXXDestructorDecl 0x5555afc1b058 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afc027e0 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afc028f8 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x5555afc02988 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x5555afc02b38 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afc029c0 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x5555afc02a38 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5555afc03248 <col:60> 'const ArgContext' lvalue Var 0x5555afbe77a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5555afc032c8 <col:72, line:1329:5>
|   `-ReturnStmt 0x5555afc032b8 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x5555afc032a8 <col:16> 'bool' true
|-CXXMethodDecl 0x5555afc02dc8 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afc02bf8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5555afc02c70 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5555afc02ce8 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5555afc03268 <col:79> 'const ArgContext' lvalue Var 0x5555afbe77a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5555afc036a8 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x5555afc03650 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x5555afc03638 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5555afc03618 <col:16> 'String &(const String &)' lvalue CXXMethod 0x5555af8f9a10 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x5555afc032e0 <col:9> 'String' lvalue ParmVar 0x5555afc02c70 'result' 'String &'
|   | `-DeclRefExpr 0x5555afc03300 <col:18> 'const String' lvalue ParmVar 0x5555afc02bf8 'str' 'const String &'
|   `-ReturnStmt 0x5555afc03698 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x5555afc03688 <col:16> 'bool' true
|-CXXMethodDecl 0x5555afc03178 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afc02e90 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5555afc02fe0 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x5555afc03058 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5555afc03288 <col:87> 'const ArgContext' lvalue Var 0x5555afbe77a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5555afc037e0 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x5555afc03798 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x5555afc03768 <col:9, col:16> '<bound member function type>' .push_back 0x5555afb8bb58
|   | | `-DeclRefExpr 0x5555afc036c8 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x5555afc02fe0 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x5555afc03748 <col:26> 'const String' lvalue ParmVar 0x5555afc02e90 'str' 'const String &'
|   `-ReturnStmt 0x5555afc037d0 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x5555afc037c0 <col:16> 'bool' true
|-CXXConstructorDecl 0x5555afc1b8d8 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5555afc1b9d8 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x5555afc1b9d8
| `-ParmVarDecl 0x5555afc1bae8 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x5555afc1bb88 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afc1bc98 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x5555afc2a940 <col:7>
`-CXXDestructorDecl 0x5555afc2a340 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af8cf260 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555af8cf378 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5555af8cf408 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5555af8cf4d8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5555af8cf5c0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5555af8cf7d8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5555af8cf680 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8cf988 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5555af8cf890 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5555af8cfad0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5555af8cfa40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5555af8cfc18 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5555af8cfb88 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8cfd88 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5555af8cfcd0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8cfe50 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5555af8cff98 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5555af8cff08 <col:28> col:31 'int'
|-CXXMethodDecl 0x5555af8d0060 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5555af8d01a8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5555af8d0118 <col:28> col:31 'int'
|-CXXMethodDecl 0x5555af8d0328 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5555af8d0260 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d0470 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5555af8d03e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d0538 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5555af8d06f8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5555af8d05e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5555af8d0660 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d0948 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5555af8d07b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555af8d0830 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5555af8d09f8 <col:86> "" ""
|-CXXMethodDecl 0x5555af8d0c68 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5555af8d0ad8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5555af8d0b50 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d0e18 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5555af8d0d28 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5555af8d0fc8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5555af8d0ed0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5555af8d1298 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5555af8d1080 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5555af8d10f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5555af8d1170 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d1578 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5555af8d1360 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5555af8d13d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555af8d1450 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5555af8d1630 <col:115> "" ""
|-AccessSpecDecl 0x5555af8d16a0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5555af8d16d8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555af8d1b88 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5555af8d1b88
| `-ParmVarDecl 0x5555af8d1c98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5555af8d1d38 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5555af8d1d38
| `-ParmVarDecl 0x5555af8d1e48 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5555af907ce8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5555afaf9c70 <col:7>
|-CXXConstructorDecl 0x5555af907dc0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5555af907dc0
| `-ParmVarDecl 0x5555af907ed8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5555af907f48 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5555af907f48
| `-ParmVarDecl 0x5555af908058 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5555afafc5e0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afae8858 prev 0x5555afad9380 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afae8950 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5555afae8a40 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5555afae8b68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5555afae8ce8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5555afae8e68 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5555afae8fe8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5555afaf9dd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5555afafa648 <col:11>
|-CXXDestructorDecl 0x5555afaf9eb0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5555afaf9fe8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5555afaf9fe8
| `-ParmVarDecl 0x5555afafa0f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5555afafa198 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5555afafa198
| `-ParmVarDecl 0x5555afafa2a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5555afade1a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afade2b8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5555afade538 <col:11>
|   `-ReturnStmt 0x5555afade528 <col:11>
|     `-UnaryOperator 0x5555afade510 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5555afade500 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5555afade328 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5555afade328
  `-ParmVarDecl 0x5555afade438 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afae9050 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afae9168 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5555afae9208 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5555afae9270 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5555afae92d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5555afae9340 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5555afae93a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5555afae9460 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5555afae94c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5555afae9520 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5555afaf9ce8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5555afae9208 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5555afafa658 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5555afafa6b0 <col:12>
|-CXXConstructorDecl 0x5555afafa318 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5555afafa318
| `-ParmVarDecl 0x5555afafa428 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5555afafa4c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5555afafa4c8
| `-ParmVarDecl 0x5555afafa5d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5555afadd890 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afad2ab0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5555afad2bc8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5555afad2c58 <col:16, col:22> col:16 public
|-EnumDecl 0x5555afad2c80 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5555afad2d80 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5555afad2e60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afad2d60 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5555afad2d40 <col:21> 'int' 28
| `-EnumConstantDecl 0x5555afad2e10 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5555afad2e78 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afad2df0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5555afad2dd0 <col:22> 'int' 64
|-CXXMethodDecl 0x5555afad31b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5555afad2ea0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555afad2f20 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5555afad2f98 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555afad3010 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad3278 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5555afad3478 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5555afad32f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5555afad3368 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad3528 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5555afad3688 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5555afad3598 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad3730 <col:72> warn_unused_result ""
|-TypedefDecl 0x5555afad3a60 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5555afad39f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5555afad3990 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5555afad3950 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5555af5a82d0 'void'
|       |-PointerType 0x5555af7e0fd0 'unsigned char *'
|       | `-BuiltinType 0x5555af5a83d0 'unsigned char'
|       |-TypedefType 0x5555af64de10 'size_t' sugar
|       | |-Typedef 0x5555af618b20 'size_t'
|       | `-BuiltinType 0x5555af5a8430 'unsigned long'
|       `-PointerType 0x5555af5a8ad0 'void *'
|         `-BuiltinType 0x5555af5a82d0 'void'
|-CXXMethodDecl 0x5555afad3ed8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5555afad3ad0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5555afad3b48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555afad3be0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5555afad3c60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5555afaea9b0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5555afaea998 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5555afaea960 <col:58> 'int' 0
| |-ParmVarDecl 0x5555afad3ce0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5555afaea9d8 <col:76> 'int' 0
| |-ParmVarDecl 0x5555afad3d60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5555afaea9f8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5555afad3fa8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5555afad4028 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5555afad40e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5555afad4188 <col:20>
| `-OptimizeNoneAttr 0x5555afad41e0 <col:30>
|-CXXMethodDecl 0x5555afad4258 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5555afad42f8 <col:20>
| `-OptimizeNoneAttr 0x5555afad4350 <col:30>
|-CXXMethodDecl 0x5555afad43c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5555afad4468 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5555afad4518 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5555afad45b8 <col:20>
| |-OptimizeNoneAttr 0x5555afad4610 <col:30>
| `-WarnUnusedResultAttr 0x5555afad4638 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5555afad4690 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5555afad4730 <col:20>
| `-OptimizeNoneAttr 0x5555afad4788 <col:30>
|-CXXMethodDecl 0x5555afad47d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5555afad4878 <col:20>
| `-OptimizeNoneAttr 0x5555afad48d0 <col:30>
|-CXXMethodDecl 0x5555afad4918 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5555afad49b8 <col:20>
| `-OptimizeNoneAttr 0x5555afad4a10 <col:30>
|-CXXMethodDecl 0x5555afad4a58 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad4b18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad4be0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5555afad4ca8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5555afad4d68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad4e88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5555afaeaac0 <col:54, line:99:5>
|   `-ReturnStmt 0x5555afaeaab0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5555afaeaa98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5555afaeaa68 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5555afae9858
|         `-CXXThisExpr 0x5555afaeaa58 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5555afad5028 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5555afad4f38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5555afaeab70 <col:67, line:103:5>
|   `-BinaryOperator 0x5555afaeab50 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5555afaeaae8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5555afae9858
|     | `-CXXThisExpr 0x5555afaeaad8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5555afaeab38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaeab18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5555afad4f38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5555afad5120 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5555afaeabf0 <col:33, line:107:5>
|   `-ReturnStmt 0x5555afaeabe0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5555afaeabc8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5555afaeab98 <col:16> 'void *' lvalue ->_destructor_argument 0x5555afae98c0
|         `-CXXThisExpr 0x5555afaeab88 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5555afad51e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5555afaeb220 <col:25, line:113:5>
|   |-ParenExpr 0x5555afaeaf68 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5555afaeaf38 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaeaca8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5555afaeac80 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5555afaeac48 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5555afaeac18 <col:24> '<bound member function type>' ->shared 0x5555afad4258
|   |   |       `-ImplicitCastExpr 0x5555afaeac68 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5555afaeac08 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5555afaead08 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaeace8 <col:42> 'int' 0
|   |   `-CallExpr 0x5555afaeae98 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5555afaeae80 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaeae60 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaeaed8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaead78 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5555afaeaef0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaeada0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaeaf08 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaeadd8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5555afaeaf20 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaeae48 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaeae30 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaeadf8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5555afaeb168 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5555afaeaf98 <col:2> 'unsigned char *' lvalue ->_head 0x5555afae9660
|   | | `-CXXThisExpr 0x5555afaeaf88 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5555afaeb150 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5555afaeb130 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5555afaeafd8 <col:10> 'unsigned char *' lvalue ->_data 0x5555afae96c8
|   |     | `-CXXThisExpr 0x5555afaeafc8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5555afaeb118 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5555afaeb0f8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5555afaeb018 <col:18> 'unsigned char *' lvalue ->_tail 0x5555afae9730
|   |         | `-CXXThisExpr 0x5555afaeb008 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5555afaeb0e0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5555afaeb0c0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5555afaeb058 <col:26> 'unsigned char *' lvalue ->_end 0x5555afae9798
|   |             | `-CXXThisExpr 0x5555afaeb048 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5555afaeb0a8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5555afaeb088 <col:33> 'int' 0
|   `-BinaryOperator 0x5555afaeb200 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5555afaeb198 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5555afae9858
|     | `-CXXThisExpr 0x5555afaeb188 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5555afaeb1e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5555afaeb1c8 <col:16> 'int' 0
|-CXXMethodDecl 0x5555afad5320 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5555afad5290 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad53c8 <col:20>
| |-OptimizeNoneAttr 0x5555afad5420 <col:30>
| `-WarnUnusedResultAttr 0x5555afad5448 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5555afad5518 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5555afad5488 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad55c0 <col:20>
| |-OptimizeNoneAttr 0x5555afad5618 <col:30>
| `-WarnUnusedResultAttr 0x5555afad5640 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5555afad5778 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5555afad5680 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad5820 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5555afad5940 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5555afad58b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad59e8 <col:20>
| `-OptimizeNoneAttr 0x5555afad5a40 <col:30>
|-CXXMethodDecl 0x5555afad5b08 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5555afad5a78 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad5bb0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5555afad5cb0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5555afad5c20 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5555afad5d58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5555afad5e58 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5555afad5dc8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad5f00 <col:20>
| `-OptimizeNoneAttr 0x5555afad5f58 <col:30>
|-CXXMethodDecl 0x5555afad60e8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5555afad5f98 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5555afad6010 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5555afaeaa18 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5555afad6198 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5555afad6398 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5555afad6210 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5555afad6288 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afad65a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5555afad6458 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5555afad64d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afad67b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5555afad6668 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5555afad66e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5555afaeaa28 <col:39> 'int' 0
|-CXXMethodDecl 0x5555afad6888 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5555afad6950 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5555afad6a18 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5555afad6ad8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad6ba0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5555afad6ce8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5555afad6c58 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5555afad6eb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5555afad6da8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5555afad6e20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afad6f88 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5555afad7048 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5555afad70e8 <col:20>
| `-OptimizeNoneAttr 0x5555afad7140 <col:30>
|-CXXMethodDecl 0x5555afad7190 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5555afad7230 <col:20>
| `-OptimizeNoneAttr 0x5555afad7288 <col:30>
|-CXXMethodDecl 0x5555afad72d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5555afad7398 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad7460 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5555afad7500 <col:20>
| `-OptimizeNoneAttr 0x5555afad7558 <col:30>
|-CXXMethodDecl 0x5555afad76a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5555afad7598 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5555afad7610 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afad77f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5555afad7768 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afad78c0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5555afad7980 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5555afad7a20 <col:20>
| `-OptimizeNoneAttr 0x5555afad7a78 <col:30>
|-CXXMethodDecl 0x5555afad7ac8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5555afad7b68 <col:20>
| `-OptimizeNoneAttr 0x5555afad7bc0 <col:30>
|-CXXMethodDecl 0x5555afad7c10 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5555afad7cd8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5555afad7d78 <col:20>
| `-OptimizeNoneAttr 0x5555afad7dd0 <col:30>
|-CXXMethodDecl 0x5555afad7e18 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5555afad7f38 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5555afad80a8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5555afad7fe8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5555afad8198 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5555afad8238 <col:20>
| `-OptimizeNoneAttr 0x5555afad8290 <col:30>
|-CXXMethodDecl 0x5555afad82e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5555afad83a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5555afad85d8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5555afad8450 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5555afad84c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad8688 <col:20>
| `-OptimizeNoneAttr 0x5555afad86e0 <col:30>
|-CXXMethodDecl 0x5555afad8788 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5555afad8828 <col:20>
| `-OptimizeNoneAttr 0x5555afad8880 <col:30>
|-CXXMethodDecl 0x5555afad88d0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5555afad8970 <col:20>
| `-OptimizeNoneAttr 0x5555afad89c8 <col:30>
|-CXXMethodDecl 0x5555afad8a10 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5555afad8ab0 <col:20>
| `-OptimizeNoneAttr 0x5555afad8b08 <col:30>
|-CXXMethodDecl 0x5555afad8c08 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5555afad8b40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5555afad8cb0 <col:20>
| `-OptimizeNoneAttr 0x5555afad8d08 <col:30>
|-CXXMethodDecl 0x5555afad8ec8 <line:316:5, col:95> col:45 used set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5555afad8d40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5555afad8db8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afad8f78 <col:20>
| `-OptimizeNoneAttr 0x5555afad8fd0 <col:30>
|-CXXMethodDecl 0x5555afad9078 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5555afad9198 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5555afad92b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5555afad9358 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5555afad9380 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5555afad94a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5555afad9548 <col:20>
| `-OptimizeNoneAttr 0x5555afad95a0 <col:30>
|-CXXMethodDecl 0x5555afad9648 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5555afad96e8 <col:20>
| `-OptimizeNoneAttr 0x5555afad9740 <col:30>
|-AccessSpecDecl 0x5555afad9768 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5555afad9790 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5555afad98a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5555afad98f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afad9880 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5555afad9850 <col:14> 'int' 48
|-CXXMethodDecl 0x5555afad9958 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5555afad99f8 <col:20>
| `-OptimizeNoneAttr 0x5555afad9a50 <col:30>
|-CXXMethodDecl 0x5555afad9ac8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5555afad9b68 <col:20>
| `-OptimizeNoneAttr 0x5555afad9bc0 <col:30>
|-CXXMethodDecl 0x5555afad9c88 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5555afad9bf8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5555afad9e28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5555afad9fc8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5555afad9ed8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5555afada070 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5555afada170 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada520 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada150 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5555afada130 <col:9> 'int' 0
| |-EnumConstantDecl 0x5555afada200 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada538 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada1e0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5555afada1c0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5555afada290 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada550 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada270 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5555afada250 <col:14> 'int' 2
| |-EnumConstantDecl 0x5555afada320 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada568 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada300 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5555afada2e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5555afada3b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada580 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada390 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5555afada370 <col:13> 'int' 4
| |-EnumConstantDecl 0x5555afada440 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5555afada598 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afada420 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5555afada400 <col:13> 'int' 5
| `-EnumConstantDecl 0x5555afada4d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5555afada5b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afada4b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5555afada490 <col:14> 'int' 6
|-CXXMethodDecl 0x5555afada618 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5555afada6b8 <col:20>
| `-OptimizeNoneAttr 0x5555afada710 <col:30>
|-CXXMethodDecl 0x5555afada808 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5555afada748 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5555afada8b0 <col:20>
| `-OptimizeNoneAttr 0x5555afada908 <col:30>
|-CXXMethodDecl 0x5555afada978 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5555afadaaa0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5555afadac18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5555afadab50 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5555afadace0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5555afadada8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5555afadaee8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5555afadae58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5555afadaf90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5555afadb090 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5555afadb290 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afadb070 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5555afadb050 <col:23> 'int' 0
| |-EnumConstantDecl 0x5555afadb120 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5555afadb2a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afadb100 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5555afadb0e0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5555afadb1b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5555afadb2c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afadb190 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5555afadb170 <col:24> 'int' 0
| `-EnumConstantDecl 0x5555afadb240 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5555afadb2d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afadb220 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5555afadb200 <col:47> 'int' 16
|-CXXMethodDecl 0x5555afadb338 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5555afadb4a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5555afadb3e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5555afadb550 <col:20>
| `-OptimizeNoneAttr 0x5555afadb5a8 <col:30>
|-CXXMethodDecl 0x5555afadb5f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5555afaeb340 <col:18, col:36>
|   `-ReturnStmt 0x5555afaeb330 <col:20, col:33>
|     `-ImplicitCastExpr 0x5555afaeb318 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5555afaeb2f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5555afaeb2c8 <col:27> '<bound member function type>' ->xanno 0x5555afad9648
|           `-CXXThisExpr 0x5555afaeb2b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5555afadb6f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5555afaeb450 <col:30, col:48>
|   `-ReturnStmt 0x5555afaeb440 <col:32, col:45>
|     `-ImplicitCastExpr 0x5555afaeb428 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5555afaeb408 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5555afaeb3d8 <col:39> '<bound member function type>' ->xanno 0x5555afad94a8
|           `-CXXThisExpr 0x5555afaeb3c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5555afadb7d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5555afaeb5e8 <col:24, col:50>
|   `-ReturnStmt 0x5555afaeb5d8 <col:26, col:47>
|     `-UnaryOperator 0x5555afaeb5c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afaeb5a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5555afaeb588 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afaeb538 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5555afae8b68
|         |   `-CXXMemberCallExpr 0x5555afaeb518 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5555afaeb4e8 <col:34> '<bound member function type>' ->xanno 0x5555afad9648
|         |       `-CXXThisExpr 0x5555afaeb4d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5555afaeb568 <col:46> 'int' 0
|-CXXMethodDecl 0x5555afadb8c8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5555afaeb7b8 <col:36, col:62>
|   `-ReturnStmt 0x5555afaeb7a8 <col:38, col:59>
|     `-UnaryOperator 0x5555afaeb790 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afaeb770 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5555afaeb758 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afaeb6d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5555afae8b68
|         |   `-CXXMemberCallExpr 0x5555afaeb6b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5555afaeb680 <col:46> '<bound member function type>' ->xanno 0x5555afad94a8
|         |       `-CXXThisExpr 0x5555afaeb670 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5555afaeb700 <col:58> 'int' 0
|-CXXMethodDecl 0x5555afadb9e8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5555afaeb950 <col:26, col:53>
|   `-ReturnStmt 0x5555afaeb940 <col:28, col:50>
|     `-UnaryOperator 0x5555afaeb928 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afaeb908 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5555afaeb8f0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afaeb8a0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5555afae8e68
|         |   `-CXXMemberCallExpr 0x5555afaeb880 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5555afaeb850 <col:36> '<bound member function type>' ->xanno 0x5555afad9648
|         |       `-CXXThisExpr 0x5555afaeb840 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5555afaeb8d0 <col:49> 'int' 0
|-CXXMethodDecl 0x5555afadbb08 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5555afaebb28 <col:38, col:65>
|   `-ReturnStmt 0x5555afaebb18 <col:40, col:62>
|     `-UnaryOperator 0x5555afaebb00 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5555afaebae0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5555afaebac8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afaeba38 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5555afae8e68
|         |   `-CXXMemberCallExpr 0x5555afaeba18 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5555afaeb9e8 <col:48> '<bound member function type>' ->xanno 0x5555afad94a8
|         |       `-CXXThisExpr 0x5555afaeb9d8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5555afaeba68 <col:61> 'int' 0
|-CXXMethodDecl 0x5555afadbcb8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5555afadbbc0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5555afaec1f8 <col:34, line:463:5>
|   |-ParenExpr 0x5555afaec040 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5555afaec010 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaebc78 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaebc48 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaebb98 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaebb80 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaebb40 <col:23> 'int' lvalue ParmVar 0x5555afadbbc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaebb60 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaebc28 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaebbf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaebbb8 <col:33> 'int' lvalue ParmVar 0x5555afadbbc0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5555afaebc10 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5555afaebbd8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5555afaebcd8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaebcb8 <col:56> 'int' 0
|   |   `-CallExpr 0x5555afaebf70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5555afaebf58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaebf38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaebfb0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaebdc8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5555afaebfc8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaebdf8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaebfe0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaebe30 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5555afaebff8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaebf20 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaebf08 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaebec8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5555afaec1e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5555afaec1d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5555afaec1b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5555afaec180 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5555afaec130 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5555afae8b68
|         |   `-CXXMemberCallExpr 0x5555afaec110 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5555afaec0e0 <col:9> '<bound member function type>' ->xanno 0x5555afad94a8
|         |       `-CXXThisExpr 0x5555afaec0d0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5555afaec198 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5555afaec160 <col:21> 'int' lvalue ParmVar 0x5555afadbbc0 'i' 'int'
|-CXXMethodDecl 0x5555afadbf08 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5555afadbd78 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5555afadbdf0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5555afaf4b58 <col:40, line:472:5>
|   |-ParenExpr 0x5555afaf4970 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5555afaf4940 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaec350 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaec320 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaec270 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaec258 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaec218 <col:23> 'int' lvalue ParmVar 0x5555afadbd78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaec238 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaec300 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaec2d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaec290 <col:33> 'int' lvalue ParmVar 0x5555afadbd78 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5555afaec2e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5555afaec2b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5555afaec3b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaec390 <col:56> 'int' 0
|   |   `-CallExpr 0x5555afaf48a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf4888 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf4868 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf48e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf46f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5555afaf48f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf4720 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf4910 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf4758 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5555afaf4928 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf4850 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf4838 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf47f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5555afaf4b38 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5555afaf4ae0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5555afaf4ab0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5555afaf4a60 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5555afae8b68
|     | |   `-CXXMemberCallExpr 0x5555afaf4a40 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5555afaf4a10 <col:2> '<bound member function type>' ->xanno 0x5555afad9648
|     | |       `-CXXThisExpr 0x5555afaf4a00 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5555afaf4ac8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5555afaf4a90 <col:14> 'int' lvalue ParmVar 0x5555afadbd78 'i' 'int'
|     `-ImplicitCastExpr 0x5555afaf4b20 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaf4b00 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5555afadbdf0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5555afadc0c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5555afadbfd0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5555afaf52d8 <col:36, line:485:5>
|   |-ParenExpr 0x5555afaf5040 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf5010 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf4cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf4cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf4bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf4bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf4b78 <col:23> 'int' lvalue ParmVar 0x5555afadbfd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf4b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf4ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf4c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf4bf0 <col:33> 'int' lvalue ParmVar 0x5555afadbfd0 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf4c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf4c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf4c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf4c30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5555afaf4d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf4d30 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf4f70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf4f58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf4f38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf4fb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf4dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5555afaf4fc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf4df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf4fe0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf4e30 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5555afaf4ff8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf4f20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf4f08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf4ec8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5555afaf52c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5555afaf52b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf5298 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf5268 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf5208 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf51d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf5150 <col:61, col:70> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf5130 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf5100 <col:61> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf50f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf51f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf5180 <col:74> 'int' lvalue ParmVar 0x5555afadbfd0 'i' 'int'
|-CXXMethodDecl 0x5555afadc318 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5555afadc188 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5555afadc200 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5555afaf5a28 <col:42, line:500:5>
|   |-ParenExpr 0x5555afaf57c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf5790 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf5470 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf5440 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf5350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf5338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf52f8 <col:23> 'int' lvalue ParmVar 0x5555afadc188 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf5318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf5420 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf5408 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf5370 <col:33> 'int' lvalue ParmVar 0x5555afadc188 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf53e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf53d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf5390 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf53b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5555afaf54d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf54b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf56f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf56d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf56b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf5730 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf5540 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5555afaf5748 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf5578 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf5760 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf55b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5555afaf5778 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf56a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf5688 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf5648 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5555afaf5a08 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5555afaf59b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5555afaf5988 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5555afaf5930 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5555afaf5900 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5555afaf58b0 <col:48, col:57> 'char [48]' lvalue ->c 0x5555afae8a40
|     |     |   `-CXXMemberCallExpr 0x5555afaf5890 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5555afaf5860 <col:48> '<bound member function type>' ->xanno 0x5555afad9648
|     |     |       `-CXXThisExpr 0x5555afaf5850 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5555afaf5918 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5555afaf58e0 <col:61> 'int' lvalue ParmVar 0x5555afadc188 'i' 'int'
|     `-ImplicitCastExpr 0x5555afaf59f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaf59d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5555afadc200 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5555afadc4d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5555afadc3e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5555afaf6188 <col:35, line:513:5>
|   |-ParenExpr 0x5555afaf5e98 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf5e68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf5bc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf5b90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf5aa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf5a88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf5a48 <col:23> 'int' lvalue ParmVar 0x5555afadc3e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf5a68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf5b70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf5b58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf5ac0 <col:33> 'int' lvalue ParmVar 0x5555afadc3e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf5b38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf5b20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf5ae0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf5b00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5555afaf5c20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf5c00 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf5dc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf5db0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf5d90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf5e08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf5c90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5555afaf5e20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf5cc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf5e38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf5d00 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5555afaf5e50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf5d78 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf5d60 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf5d20 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5555afaf6178 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5555afaf6160 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf6148 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf6118 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf6090 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf6060 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf6010 <col:60, col:69> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf5ff0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf5fc0 <col:60> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf5fb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf6078 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf6040 <col:73> 'int' lvalue ParmVar 0x5555afadc3e0 'i' 'int'
|-CXXMethodDecl 0x5555afadc728 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5555afadc598 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5555afadc610 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5555afaf6898 <col:41, line:528:5>
|   |-ParenExpr 0x5555afaf6630 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf6600 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf6320 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf62f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf6200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf61e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf61a8 <col:23> 'int' lvalue ParmVar 0x5555afadc598 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf61c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf62d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf62b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf6220 <col:33> 'int' lvalue ParmVar 0x5555afadc598 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf6298 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf6280 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf6240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf6260 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5555afaf6380 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf6360 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf6560 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf6548 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf6528 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf65a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf63f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5555afaf65b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf6428 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf65d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf6460 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5555afaf65e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf6510 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf64f8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf64b8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5555afaf6878 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5555afaf6828 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5555afaf67f8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5555afaf67a0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5555afaf6770 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5555afaf6720 <col:47, col:56> 'char [48]' lvalue ->c 0x5555afae8a40
|     |     |   `-CXXMemberCallExpr 0x5555afaf6700 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5555afaf66d0 <col:47> '<bound member function type>' ->xanno 0x5555afad9648
|     |     |       `-CXXThisExpr 0x5555afaf66c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5555afaf6788 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5555afaf6750 <col:60> 'int' lvalue ParmVar 0x5555afadc598 'i' 'int'
|     `-ImplicitCastExpr 0x5555afaf6860 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaf6840 <col:65> 'int16_t':'short' lvalue ParmVar 0x5555afadc610 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5555afadc8e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5555afadc7f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5555afaf6f68 <col:36, line:541:5>
|   |-ParenExpr 0x5555afaf6d08 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf6cd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf6a30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf6a00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf6910 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf68f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf68b8 <col:23> 'int' lvalue ParmVar 0x5555afadc7f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf68d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf69e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf69c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf6930 <col:33> 'int' lvalue ParmVar 0x5555afadc7f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf69a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf6990 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf6950 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf6970 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5555afaf6a90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf6a70 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf6c38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf6c20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf6c00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf6c78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf6b00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5555afaf6c90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf6b38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf6ca8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf6b70 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5555afaf6cc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf6be8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf6bd0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf6b90 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5555afaf6f58 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5555afaf6f40 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf6f28 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf6ef8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf6ea0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf6e70 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf6e20 <col:61, col:70> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf6e00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf6dd0 <col:61> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf6dc0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf6e88 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf6e50 <col:74> 'int' lvalue ParmVar 0x5555afadc7f0 'i' 'int'
|-CXXMethodDecl 0x5555afadcab8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5555afadc9a8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5555afadca20 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5555afadcb68 <col:20>
| `-OptimizeNoneAttr 0x5555afadcbc0 <col:30>
|-CXXMethodDecl 0x5555afadccf8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5555afadcc00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5555afaf7638 <col:35, line:562:5>
|   |-ParenExpr 0x5555afaf73d8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf73a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf7100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf70d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf6fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf6fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf6f88 <col:23> 'int' lvalue ParmVar 0x5555afadcc00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf6fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf70b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf7098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf7000 <col:33> 'int' lvalue ParmVar 0x5555afadcc00 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf7078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf7060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf7020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf7040 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5555afaf7160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf7140 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf7308 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf72f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf72d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf7348 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf71d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5555afaf7360 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf7208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf7378 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf7240 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5555afaf7390 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf72b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf72a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf7260 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5555afaf7628 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5555afaf7610 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf75f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf75c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf7570 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf7540 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf74f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf74d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf74a0 <col:60> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf7490 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf7558 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf7520 <col:73> 'int' lvalue ParmVar 0x5555afadcc00 'i' 'int'
|-CXXMethodDecl 0x5555afadcf08 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5555afadcdb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5555afadce30 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5555afaf7d18 <col:41, line:577:5>
|   |-ParenExpr 0x5555afaf7aa8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf7a78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf77d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf77a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf76b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf7698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf7658 <col:23> 'int' lvalue ParmVar 0x5555afadcdb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf7678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf7780 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf7768 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf76d0 <col:33> 'int' lvalue ParmVar 0x5555afadcdb8 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf7748 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf7730 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf76f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf7710 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5555afaf7830 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf7810 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf79d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf79c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf79a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf7a18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf78a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5555afaf7a30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf78d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf7a48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf7910 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5555afaf7a60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf7988 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf7970 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf7930 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5555afaf7cf8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5555afaf7ca8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5555afaf7c78 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5555afaf7c18 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5555afaf7be8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5555afaf7b98 <col:47, col:56> 'char [48]' lvalue ->c 0x5555afae8a40
|     |     |   `-CXXMemberCallExpr 0x5555afaf7b78 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5555afaf7b48 <col:47> '<bound member function type>' ->xanno 0x5555afad9648
|     |     |       `-CXXThisExpr 0x5555afaf7b38 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5555afaf7c00 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5555afaf7bc8 <col:60> 'int' lvalue ParmVar 0x5555afadcdb8 'i' 'int'
|     `-ImplicitCastExpr 0x5555afaf7ce0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaf7cc0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5555afadce30 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5555afadd0c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5555afadcfd0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5555afaf8448 <col:36, line:591:5>
|   |-ParenExpr 0x5555afaf8188 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf8158 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf7eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf7e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf7d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf7d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf7d38 <col:23> 'int' lvalue ParmVar 0x5555afadcfd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf7d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf7e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf7e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf7db0 <col:33> 'int' lvalue ParmVar 0x5555afadcfd0 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf7e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf7e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf7dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf7df0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5555afaf7f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf7ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf80b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf80a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf8080 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf80f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf7f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5555afaf8110 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf7fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf8128 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf7ff0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5555afaf8140 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf8068 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf8050 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf8010 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5555afaf8438 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5555afaf8420 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf8408 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf83d8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf8350 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf8320 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf82d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf82b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf8280 <col:61> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf8270 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf8338 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf8300 <col:74> 'int' lvalue ParmVar 0x5555afadcfd0 'i' 'int'
|-CXXMethodDecl 0x5555afadd318 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5555afadd188 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5555afadd200 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5555afaf8b38 <col:42, line:606:5>
|   |-ParenExpr 0x5555afaf88d0 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5555afaf88a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf85e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf85b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf84c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf84a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf8468 <col:23> 'int' lvalue ParmVar 0x5555afadd188 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf8488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf8590 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5555afaf8578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf84e0 <col:33> 'int' lvalue ParmVar 0x5555afadd188 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf8558 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf8540 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf8500 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5555afaf8520 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5555afaf8640 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf8620 <col:60> 'int' 0
|   |   `-CallExpr 0x5555afaf8800 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf87e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf87c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf8840 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf86b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5555afaf8858 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf8700 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf8870 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf8738 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5555afaf8888 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf87b0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf8798 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf8758 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5555afaf8b18 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5555afaf8ac8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5555afaf8a98 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5555afaf8a40 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5555afaf8a10 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5555afaf89c0 <col:48, col:57> 'char [48]' lvalue ->c 0x5555afae8a40
|     |     |   `-CXXMemberCallExpr 0x5555afaf89a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5555afaf8970 <col:48> '<bound member function type>' ->xanno 0x5555afad9648
|     |     |       `-CXXThisExpr 0x5555afaf8960 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5555afaf8a28 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5555afaf89f0 <col:61> 'int' lvalue ParmVar 0x5555afadd188 'i' 'int'
|     `-ImplicitCastExpr 0x5555afaf8b00 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5555afaf8ae0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5555afadd200 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5555afadd4b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5555afadd3e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5555afaf93a8 <col:33, line:620:5>
|   |-ParenExpr 0x5555afaf9120 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5555afaf90f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf8d40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf8d10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf8bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf8b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf8b58 <col:23> 'int' lvalue ParmVar 0x5555afadd3e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf8b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf8cf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5555afaf8cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf8bd0 <col:33> 'int' lvalue ParmVar 0x5555afadd3e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf8cb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf8ca0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf8bf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5555afaf8c78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5555afaf8c60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5555afaf8c28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5555afaf8da0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf8d80 <col:79> 'int' 0
|   |   `-CallExpr 0x5555afaf9050 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf9038 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf9018 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf9090 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf8e88 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5555afaf90a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf8ed0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf90c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf8f08 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5555afaf90d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf9000 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf8fe8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf8fa8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5555afaf9398 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5555afaf9380 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5555afaf9368 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5555afaf9338 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5555afaf92b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5555afaf9280 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5555afaf9230 <col:67, col:76> 'char const[48]' lvalue ->c 0x5555afae8a40
|             |   `-CXXMemberCallExpr 0x5555afaf9210 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5555afaf91e0 <col:67> '<bound member function type>' ->xanno 0x5555afad94a8
|             |       `-CXXThisExpr 0x5555afaf91d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5555afaf9298 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5555afaf9260 <col:80> 'int' lvalue ParmVar 0x5555afadd3e0 'i' 'int'
|-CXXMethodDecl 0x5555afadd6c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5555afadd570 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5555afadd5f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5555afaf9bd0 <col:45, line:635:5>
|   |-ParenExpr 0x5555afaf9918 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5555afaf98e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5555afaf95b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5555afaf9580 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5555afaf9420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5555afaf9408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5555afaf93c8 <col:23> 'int' lvalue ParmVar 0x5555afadd570 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5555afaf93e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5555afaf9560 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5555afaf9548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5555afaf9440 <col:33> 'int' lvalue ParmVar 0x5555afadd570 'i' 'int'
|   |   |     `-BinaryOperator 0x5555afaf9528 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5555afaf9510 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5555afaf9460 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5555afad98a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5555afaf94e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5555afaf94d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5555afaf9498 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5555afaf9610 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5555afaf95f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5555afaf9848 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5555afaf9830 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5555afaf9810 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5555af644c20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5555afaf9888 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf9680 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5555afaf98a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5555afaf96c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5555afaf98b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5555afaf9700 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5555afaf98d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5555afaf97f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5555afaf97e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5555afaf9798 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5555afaf9bb0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5555afaf9b18 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5555afaf9ae8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5555afaf9a88 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5555afaf9a58 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5555afaf9a08 <col:54, col:63> 'char [48]' lvalue ->c 0x5555afae8a40
|     |     |   `-CXXMemberCallExpr 0x5555afaf99e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5555afaf99b8 <col:54> '<bound member function type>' ->xanno 0x5555afad9648
|     |     |       `-CXXThisExpr 0x5555afaf99a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5555afaf9a70 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5555afaf9a38 <col:67> 'int' lvalue ParmVar 0x5555afadd570 'i' 'int'
|     `-CXXConstCastExpr 0x5555afaf9b80 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5555afaf9b68 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5555afaf9b30 <col:91> 'const void *' lvalue ParmVar 0x5555afadd5f0 'x' 'const void *'
|-CXXMethodDecl 0x5555afadd798 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5555afaf9c58 <col:34, line:640:5>
|   `-ReturnStmt 0x5555afaf9c48 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5555afaf9c30 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5555afaf9c00 <col:16> 'Packet *' lvalue ->_data_packet 0x5555afae95f8
|         `-CXXThisExpr 0x5555afaf9bf0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5555afae3350 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5555afae32c0 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5555afaeaa48 <col:46> 'bool' true
|-CXXMethodDecl 0x5555afae34c8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5555afae3408 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5555afae3570 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5555afae3d20 <line:660:22> "" ""
| |-EnumConstantDecl 0x5555afae3670 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3d90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3650 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5555afae3630 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5555afad2d80 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5555afae3700 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3da8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae36e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5555afae36c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5555afad2e10 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5555afae3790 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3dc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3770 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5555afae3750 <col:21> 'int' 0
| |-EnumConstantDecl 0x5555afae3820 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3dd8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3800 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5555afae37e0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5555afae38b0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3df0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3890 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5555afae3870 <col:21> 'int' 16
| |-EnumConstantDecl 0x5555afae3940 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3e08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3920 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5555afae3900 <col:19> 'int' 32
| |-EnumConstantDecl 0x5555afae39d0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3e20 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae39b0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5555afae3990 <col:19> 'int' EnumConstant 0x5555afae3820 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5555afae3a60 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3e38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3a40 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5555afae3a20 <col:19> 'int' EnumConstant 0x5555afae3940 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5555afae3b30 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3e50 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3b10 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5555afae3af0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5555afae3ab0 <col:23> 'int' EnumConstant 0x5555afae3a60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5555afae3ad0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5555afae3c00 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5555afae3e68 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5555afae3be0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5555afae3bc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5555afae3b80 <col:23> 'int' EnumConstant 0x5555afae3a60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5555afae3ba0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5555afae3cd0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5555afae3e80 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5555afae3cb0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5555afae3c90 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5555afae3c50 <col:23> 'int' EnumConstant 0x5555afae3a60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5555afae3c70 <col:40> 'int' 8
|-CXXMethodDecl 0x5555afae3ec0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5555afae3f60 <col:68> "" ""
|-CXXMethodDecl 0x5555afae3ff8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5555afae4098 <col:45> "" ""
|-CXXMethodDecl 0x5555afae4130 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5555afae41d0 <col:57> "" ""
|-CXXMethodDecl 0x5555afae4268 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5555afae4308 <col:45> "" ""
|-CXXMethodDecl 0x5555afae43a0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5555afae4440 <col:57> "" ""
|-CXXMethodDecl 0x5555afae44d0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5555afae4570 <col:51> "" ""
|-CXXMethodDecl 0x5555afae4600 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5555afae46a0 <col:63> "" ""
|-CXXMethodDecl 0x5555afae4730 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5555afae47d0 <col:53> "" ""
|-CXXMethodDecl 0x5555afae4860 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5555afae4900 <col:65> "" ""
|-CXXMethodDecl 0x5555afae4a18 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5555afae4988 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5555afae4ac0 <col:61> "" ""
|-CXXMethodDecl 0x5555afae4c58 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5555afae4b48 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5555afae4bc0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5555afae4d08 <col:67> "" ""
|-CXXMethodDecl 0x5555afae4e20 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5555afae4d90 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5555afae4ec8 <col:63> "" ""
|-CXXMethodDecl 0x5555afae5060 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5555afae4f50 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5555afae4fc8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5555afae5110 <col:69> "" ""
|-CXXMethodDecl 0x5555afae5228 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5555afae5198 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5555afae52d0 <col:63> "" ""
|-CXXMethodDecl 0x5555afae5468 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5555afae5358 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5555afae53d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5555afae5518 <col:69> "" ""
|-CXXMethodDecl 0x5555afae5630 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5555afae55a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5555afae56d8 <col:62> "" ""
|-CXXMethodDecl 0x5555afae5870 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5555afae5760 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5555afae57d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5555afae5920 <col:68> "" ""
|-CXXMethodDecl 0x5555afae5a38 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5555afae59a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5555afae5ae0 <col:63> "" ""
|-CXXMethodDecl 0x5555afae5c78 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5555afae5b68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5555afae5be0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5555afae5d28 <col:69> "" ""
|-CXXMethodDecl 0x5555afae5db8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5555afae5e58 <col:64> "" ""
|-CXXMethodDecl 0x5555afae5ee8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5555afae5f88 <col:52> "" ""
|-CXXMethodDecl 0x5555afae6018 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5555afae60b8 <col:67> "" ""
|-CXXMethodDecl 0x5555afae6148 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5555afae61e8 <col:55> "" ""
|-CXXMethodDecl 0x5555afae6300 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5555afae6270 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5555afae63a8 <col:58> "" ""
|-CXXMethodDecl 0x5555afae6540 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5555afae6430 <col:33> col:36 'int'
| |-ParmVarDecl 0x5555afae64a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5555afae65f0 <col:62> "" ""
|-CXXMethodDecl 0x5555afae6708 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5555afae6678 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5555afae67b0 <col:58> "" ""
|-CXXMethodDecl 0x5555afae6948 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5555afae6838 <col:33> col:36 'int'
| |-ParmVarDecl 0x5555afae68b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5555afae69f8 <col:62> "" ""
|-CXXMethodDecl 0x5555afae6b10 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5555afae6a80 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5555afae6bb8 <col:60> "" ""
|-CXXMethodDecl 0x5555afae6d50 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5555afae6c40 <col:34> col:37 'int'
| |-ParmVarDecl 0x5555afae6cb8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5555afae6e00 <col:64> "" ""
|-CXXMethodDecl 0x5555afae6f18 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5555afae6e88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5555afae6fc0 <col:58> "" ""
|-CXXMethodDecl 0x5555afae7158 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5555afae7048 <col:33> col:36 'int'
| |-ParmVarDecl 0x5555afae70c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5555afae7208 <col:62> "" ""
|-CXXMethodDecl 0x5555afae84d0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5555afae8440 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5555afae8578 <col:59> "" ""
|-CXXMethodDecl 0x5555afae8710 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5555afae8600 <col:33> col:36 'int'
| |-ParmVarDecl 0x5555afae8678 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5555afae87c0 <col:63> "" ""
|-AccessSpecDecl 0x5555afae8830 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5555afae8858 prev 0x5555afad9380 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5555afae8950 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5555afae8a40 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5555afae8b68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5555afae8ce8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5555afae8e68 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5555afae8fe8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5555afaf9dd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5555afafa648 <col:11>
| |-CXXDestructorDecl 0x5555afaf9eb0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5555afaf9fe8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5555afaf9fe8
| | `-ParmVarDecl 0x5555afafa0f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5555afafa198 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5555afafa198
| | `-ParmVarDecl 0x5555afafa2a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5555afade1a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5555afade2b8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5555afade538 <col:11>
| |   `-ReturnStmt 0x5555afade528 <col:11>
| |     `-UnaryOperator 0x5555afade510 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5555afade500 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5555afade328 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5555afade328
|   `-ParmVarDecl 0x5555afade438 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5555afae9050 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5555afae9168 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5555afae9208 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5555afae9270 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5555afae92d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5555afae9340 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5555afae93a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5555afae9460 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5555afae94c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5555afae9520 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5555afaf9ce8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5555afae9208 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5555afafa658 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5555afafa6b0 <col:12>
| |-CXXConstructorDecl 0x5555afafa318 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5555afafa318
| | `-ParmVarDecl 0x5555afafa428 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5555afafa4c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5555afafa4c8
| | `-ParmVarDecl 0x5555afafa5d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5555afadd890 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5555afae9598 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5555afae95f8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5555afae9660 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5555afae96c8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5555afae9730 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5555afae9798 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5555afae97f8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5555afae9858 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5555afae98c0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5555afae9948 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5555afae9598 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5555afaf9c80 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5555afae97f8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5555afafa6c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5555afafa720 <col:21, line:755:5>
|-CXXConstructorDecl 0x5555afae9ae8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5555afae9a28 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5555afae9be0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5555afae9dc8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5555afae9cd0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5555afaea098 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5555afae9e80 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555afae9ef8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5555afae9f70 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afaea2b8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5555afaea168 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5555afaea1e0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5555afaea588 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5555afaea378 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5555afaea3f0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5555afaea468 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5555afaea6e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5555afaea650 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afaea828 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5555afaea798 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5555afaea920 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afafa730 prev 0x5555afad2a00 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5555afafa868 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5555afafa8f8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5555afafa9a0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5555afafaa40 <col:20>
| `-OptimizeNoneAttr 0x5555afafaa98 <col:30>
|-CXXMethodDecl 0x5555afafaae8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5555afafab88 <col:20>
| `-OptimizeNoneAttr 0x5555afafabe0 <col:30>
|-CXXMethodDecl 0x5555afafac30 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5555afafacf8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5555afafadc0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5555afafaed8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5555afafafa0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5555afafb040 <col:20>
| `-OptimizeNoneAttr 0x5555afafb098 <col:30>
|-CXXMethodDecl 0x5555afafb108 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5555afafb1a8 <col:20>
| `-OptimizeNoneAttr 0x5555afafb200 <col:30>
|-CXXMethodDecl 0x5555afafb2a8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5555afafb348 <col:20>
| `-OptimizeNoneAttr 0x5555afafb3a0 <col:30>
|-CXXMethodDecl 0x5555afafb3f0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5555afafb508 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5555afafb628 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5555afafb748 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5555afafb810 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5555afafb8b0 <col:62> "" ""
|-AccessSpecDecl 0x5555afafb920 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5555afafb980 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5555afafc578 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5555afadd970 <col:29, col:31>
|-CXXMethodDecl 0x5555afafba48 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5555afafbb88 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5555afafbaf8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5555afafbc80 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5555afadd980 <col:23, col:25>
|-CXXMethodDecl 0x5555afafbe38 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5555afafbd70 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5555afafc108 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5555afafbef0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5555afafbf68 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5555afafbfe0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5555afafc298 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5555afafc1d0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5555afafc390 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5555afafc3f8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5555afafc3f8
  `-ParmVarDecl 0x5555afafc508 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7e72b8 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5555af7e73e8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x5555af7e7448 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x5555af7e74a8 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x5555af7e7508 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7e7690 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5555af7e7800 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x5555af7e77e0 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x5555af7e77a8 <col:28> 'int' 4
`-FieldDecl 0x5555af7e78a8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x5555af7e7888 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x5555af7e7850 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7e7198 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5555af7e72b8 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5555af7e73e8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x5555af7e7448 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x5555af7e74a8 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x5555af7e7508 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x5555af7e75c8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x5555af7e7640 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x5555af7e7690 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5555af7e7800 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x5555af7e77e0 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x5555af7e77a8 <col:28> 'int' 4
| `-FieldDecl 0x5555af7e78a8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x5555af7e7888 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x5555af7e7850 <col:27> 'int' 4
`-FieldDecl 0x5555af7e7968 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon.2 = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555af7e6ff0 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5555af7e7108 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x5555af7e7198 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5555af7e72b8 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x5555af7e73e8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x5555af7e7448 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x5555af7e74a8 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x5555af7e7508 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x5555af7e75c8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x5555af7e7640 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x5555af7e7690 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x5555af7e7800 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x5555af7e77e0 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x5555af7e77a8 <col:28> 'int' 4
| | `-FieldDecl 0x5555af7e78a8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x5555af7e7888 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x5555af7e7850 <col:27> 'int' 4
| `-FieldDecl 0x5555af7e7968 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x5555af7e7b18 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x5555af7e7ba0 <line:40:5, col:21> col:21 referenced ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x5555af7e7c10 <line:41:5, col:21> col:21 referenced ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb295b8 prev 0x5555afad28a0 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5555afb296b0 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x5555afb29750 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5555afb297b0 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5555afb29810 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x5555afb29870 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5555afb53ce8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5555afb53e08 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x5555afb540b0 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afb53ea8 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x5555afb53f20 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x5555afb53f98 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5555afb55770 <col:33> 'const ArgContext' lvalue Var 0x5555afa907e0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5555afb54348 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afb54178 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5555afb541f0 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x5555afb54268 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5555afb55790 <col:34> 'const ArgContext' lvalue Var 0x5555afa907e0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5555afb556a0 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5555afb54410 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5555afb544a0 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x5555afb54518 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5555afb557b0 <col:34> 'const ArgContext' lvalue Var 0x5555afa907e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5555afb55968 <col:46, line:381:5>
|   `-ReturnStmt 0x5555afb55958 <line:380:9, col:71>
|     `-CallExpr 0x5555afb55920 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x5555afb55908 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5555afb558c0 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x5555afb54348 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x5555afb55820 <col:22> 'const String' lvalue ParmVar 0x5555afb54410 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5555afb55870 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x5555afb55840 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x5555afb544a0 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x5555afb558a0 <col:67> 'const ArgContext' lvalue ParmVar 0x5555afb54518 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x5555afc844d8 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5555afc845b0 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5555afc846e8 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x5555afc846e8
| `-ParmVarDecl 0x5555afc847f8 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x5555afc84898 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5555afc849a8 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x5555afc85600 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555afb56af0 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x5555afb56d48 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5555afc843e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5555afc84a18 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x5555afc84a18
| `-ParmVarDecl 0x5555afc84b28 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x5555afc84bc8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5555afc84cd8 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x5555afc85610 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5555afc855e0 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x5555afc855b0 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x5555afc85580 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x5555afc84cd8 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x5555afc85680 <col:19>
`-CXXDestructorDecl 0x5555afc84d78 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5555afc96d98 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5555afc971a8 prev 0x5555afc96d98 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5555afc973a0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5555afc972a8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5555afc98d68 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5555afc97520 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5555afc98d28 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5555afc98ce8 <col:20> 'String *' lvalue ParmVar 0x5555afc972a8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5555afc97580 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5555afc98dc8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5555afbe75d0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5555afc97460 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5555afbc0750 Slot::store 'void ()' ]
| `-CompoundStmt 0x5555afc99488 <col:22, line:857:9>
|   `-CallExpr 0x5555afc99440 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5555afc99428 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5555afc993a8 <col:13> 'void (String &, const String &)' lvalue Function 0x5555afc99288 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x5555af86fe38 'assign_consume')
|     |-UnaryOperator 0x5555afc98f58 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5555afc98f40 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5555afc98f10 <col:29> 'String *' lvalue ->_ptr 0x5555afc97520
|     |     `-CXXThisExpr 0x5555afc98f00 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5555afc99470 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5555afc98f80 <col:35> 'String':'String' lvalue ->_slot 0x5555afc97580
|         `-CXXThisExpr 0x5555afc98f70 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5555afc97520 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5555afc97580 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5555afc975f8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5555afc975f8
| `-ParmVarDecl 0x5555afc97708 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5555afc977a8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5555afc977a8
| `-ParmVarDecl 0x5555afc978b8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5555afc97958 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5555afc97958
| `-ParmVarDecl 0x5555afc97a68 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5555afc97ad8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5555afc97ad8
| `-ParmVarDecl 0x5555afc98650 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5555afc986d8 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5555afbc0650 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5555afc98e30 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
