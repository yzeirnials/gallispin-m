
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Port
         0 |   int idx
         4 |   int port
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Router::element_landmark_t
         0 |   uint32_t first_landmarkid
         8 |   class String filename
         8 |     struct String::rep_t _r
         8 |       const char * data
        16 |       int length
        24 |       struct String::memo_t * memo
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Connection
         0 |   struct Router::Port [2] p
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b807c328 prev 0x5592b8073ac8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b807c420 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5592b807c4b0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5592b807c528 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5592b807c5e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5592b807c6b0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5592b807c828 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5592b807c760 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5592b807c8d0 <col:24>
| `-OptimizeNoneAttr 0x5592b807c928 <col:34>
|-CXXMethodDecl 0x5592b807c970 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5592b807cc28 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5592b807ca20 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5592b807ca98 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5592b807cb18 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5592b807cce0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5592b807cd18 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5592b807cd80 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5592b807ce08 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5592b807d128 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5592b807cec0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5592b807cf38 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5592b807cfb0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5592b807d030 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5592b807d240 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5592b8084bb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5592b8084bb8
| `-ParmVarDecl 0x5592b8084cc8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5592b8084d68 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5592b8084d68
| `-ParmVarDecl 0x5592b8084e78 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5592b8232448 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Element *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<struct Router::element_landmark_t> >
         0 |   vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::element_landmark_t>
         0 |   class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
         0 |     vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::Connection>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<void *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Router
         0 |   class Master * _master
         8 |   class atomic_uint32_t _runcount
         8 |     uint32_t _val
        12 |   volatile int _state
    16:0-0 |   _Bool _have_connections
    16:1-1 |   _Bool _conn_sorted
    16:2-2 |   _Bool _have_configuration
        20 |   volatile int _running
        24 |   class atomic_uint32_t _refcount
        24 |     uint32_t _val
        32 |   class Vector<class Element *> _elements
        32 |     class vector_memory<class sized_array_memory<8> > vm_
        32 |       vector_memory<class sized_array_memory<8> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
        48 |   class Vector<class String> _element_names
        48 |     class vector_memory<class typed_array_memory<class String> > vm_
        48 |       vector_memory<class typed_array_memory<class String> >::type * l_
        56 |       vector_memory::size_type n_
        60 |       vector_memory::size_type capacity_
        64 |   class Vector<class String> _element_configurations
        64 |     class vector_memory<class typed_array_memory<class String> > vm_
        64 |       vector_memory<class typed_array_memory<class String> >::type * l_
        72 |       vector_memory::size_type n_
        76 |       vector_memory::size_type capacity_
        80 |   class Vector<unsigned int> _element_landmarkids
        80 |     class vector_memory<class sized_array_memory<4> > vm_
        80 |       vector_memory<class sized_array_memory<4> >::type * l_
        88 |       vector_memory::size_type n_
        92 |       vector_memory::size_type capacity_
        96 |   class Vector<int> _element_home_thread_ids
        96 |     class vector_memory<class sized_array_memory<4> > vm_
        96 |       vector_memory<class sized_array_memory<4> >::type * l_
       104 |       vector_memory::size_type n_
       108 |       vector_memory::size_type capacity_
       112 |   class Vector<struct Router::element_landmark_t> _element_landmarks
       112 |     class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
       112 |       vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   uint32_t _last_landmarkid
       136 |   class Vector<int> _element_name_sorter
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
       152 |   Vector<int> [2] _element_gport_offset
       184 |   class Vector<int> _element_configure_order
       184 |     class vector_memory<class sized_array_memory<4> > vm_
       184 |       vector_memory<class sized_array_memory<4> >::type * l_
       192 |       vector_memory::size_type n_
       196 |       vector_memory::size_type capacity_
       200 |   class Vector<struct Router::Connection> _conn
       200 |     class vector_memory<class sized_array_memory<16> > vm_
       200 |       vector_memory<class sized_array_memory<16> >::type * l_
       208 |       vector_memory::size_type n_
       212 |       vector_memory::size_type capacity_
       216 |   class Vector<int> _conn_output_sorter
       216 |     class vector_memory<class sized_array_memory<4> > vm_
       216 |       vector_memory<class sized_array_memory<4> >::type * l_
       224 |       vector_memory::size_type n_
       228 |       vector_memory::size_type capacity_
       232 |   class Vector<class String> _requirements
       232 |     class vector_memory<class typed_array_memory<class String> > vm_
       232 |       vector_memory<class typed_array_memory<class String> >::type * l_
       240 |       vector_memory::size_type n_
       244 |       vector_memory::size_type capacity_
       248 |   class Vector<int> _ehandler_first_by_element
       248 |     class vector_memory<class sized_array_memory<4> > vm_
       248 |       vector_memory<class sized_array_memory<4> >::type * l_
       256 |       vector_memory::size_type n_
       260 |       vector_memory::size_type capacity_
       264 |   class Vector<int> _ehandler_to_handler
       264 |     class vector_memory<class sized_array_memory<4> > vm_
       264 |       vector_memory<class sized_array_memory<4> >::type * l_
       272 |       vector_memory::size_type n_
       276 |       vector_memory::size_type capacity_
       280 |   class Vector<int> _ehandler_next
       280 |     class vector_memory<class sized_array_memory<4> > vm_
       280 |       vector_memory<class sized_array_memory<4> >::type * l_
       288 |       vector_memory::size_type n_
       292 |       vector_memory::size_type capacity_
       296 |   class Vector<int> _handler_first_by_name
       296 |     class vector_memory<class sized_array_memory<4> > vm_
       296 |       vector_memory<class sized_array_memory<4> >::type * l_
       304 |       vector_memory::size_type n_
       308 |       vector_memory::size_type capacity_
       312 |   class Handler ** _handler_bufs
       320 |   int _nhandlers_bufs
       324 |   int _free_handler
       328 |   class Vector<class String> _attachment_names
       328 |     class vector_memory<class typed_array_memory<class String> > vm_
       328 |       vector_memory<class typed_array_memory<class String> >::type * l_
       336 |       vector_memory::size_type n_
       340 |       vector_memory::size_type capacity_
       344 |   class Vector<void *> _attachments
       344 |     class vector_memory<class sized_array_memory<8> > vm_
       344 |       vector_memory<class sized_array_memory<8> >::type * l_
       352 |       vector_memory::size_type n_
       356 |       vector_memory::size_type capacity_
       360 |   class Element * _root_element
       368 |   class String _configuration
       368 |     struct String::rep_t _r
       368 |       const char * data
       376 |       int length
       384 |       struct String::memo_t * memo
       392 |   struct Router::notifier_signals_t * _notifier_signals
       400 |   class HashMap_ArenaFactory * _arena_factory
       408 |   class Router * _hotswap_router
       416 |   class ThreadSched * _thread_sched
       424 |   class NameInfo * _name_info
       432 |   class Vector<int> _flow_code_override_eindex
       432 |     class vector_memory<class sized_array_memory<4> > vm_
       432 |       vector_memory<class sized_array_memory<4> >::type * l_
       440 |       vector_memory::size_type n_
       444 |       vector_memory::size_type capacity_
       448 |   class Vector<class String> _flow_code_override
       448 |     class vector_memory<class typed_array_memory<class String> > vm_
       448 |       vector_memory<class typed_array_memory<class String> >::type * l_
       456 |       vector_memory::size_type n_
       460 |       vector_memory::size_type capacity_
       464 |   class Router * _next_router
           | [sizeof=472, dsize=472, align=8,
           |  nvsize=472, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e2ddf0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7e2df08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5592b7e2df98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5592b7e2e068 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5592b7e2e150 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b7e2e368 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5592b7e2e210 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2e518 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5592b7e2e420 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5592b7e2e660 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5592b7e2e5d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5592b7e2e7a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5592b7e2e718 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2e8f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5592b7e2e860 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2e9b8 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x5592b7e2eb00 <line:68:5, col:31> col:17 used operator++ 'void (int)' inline
| `-ParmVarDecl 0x5592b7e2ea70 <col:28> col:31 'int'
|-CXXMethodDecl 0x5592b7e2ebc8 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x5592b7e2ed10 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5592b7e2ec80 <col:28> col:31 'int'
|-CXXMethodDecl 0x5592b7e2ee88 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5592b7e2edc8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2efd0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5592b7e2ef40 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2f098 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5592b7e2f258 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5592b7e2f148 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b7e2f1c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2f4a8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5592b7e2f318 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b7e2f390 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b7e2f558 <col:86> "" ""
|-CXXMethodDecl 0x5592b7e2f7c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5592b7e2f638 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5592b7e2f6b0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e2f978 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5592b7e2f888 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5592b7e2fb28 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5592b7e2fa30 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5592b7e2fdf8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5592b7e2fbe0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5592b7e2fc58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b7e2fcd0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e300d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5592b7e2fec0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5592b7e2ff38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b7e2ffb0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b7e30190 <col:115> "" ""
|-AccessSpecDecl 0x5592b7e30200 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5592b7e30238 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b7e30740 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5592b7e30740
| `-ParmVarDecl 0x5592b7e30848 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5592b7e308e8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e308e8
| `-ParmVarDecl 0x5592b7e309f8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5592b7e66028 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b8058e30 <col:7>
|-CXXConstructorDecl 0x5592b7e66100 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5592b7e66100
| `-ParmVarDecl 0x5592b7e66218 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5592b7e66288 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e66288
| `-ParmVarDecl 0x5592b7e66398 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5592b805b830 <col:7> col:7 implicit referenced ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b817f4f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5592b817f6c8 prev 0x5592b817f4f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b817f758 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b817f780 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8181350 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5592b8181300 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5592b817fc30 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5592b817fb30 'type'
|     `-TemplateSpecializationType 0x5592b817fac0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5592b817f9a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5592b817f980 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5592b817f960 <col:24> 'unsigned long' 8
|       `-RecordType 0x5592b817faa0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5592b817f9c0 'char_array'
|-TypedefDecl 0x5592b8181408 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5592b81813d0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5592b81813b0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5592b8181350 'type'
|     `-ElaboratedType 0x5592b8181300 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5592b817fc30 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5592b817fb30 'type'
|         `-TemplateSpecializationType 0x5592b817fac0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5592b817f9a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5592b817f980 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5592b817f960 <col:24> 'unsigned long' 8
|           `-RecordType 0x5592b817faa0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5592b817f9c0 'char_array'
|-CXXMethodDecl 0x5592b8181588 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5592b8181498 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5592b8181678 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b8181758 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b8181758
|-CXXMethodDecl 0x5592b8181a28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5592b8181930 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5592b8181c68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5592b8181ae0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8181b58 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8181e38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5592b8181d28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8181da0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8181f98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5592b8182068 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5592b81822b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5592b8182128 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5592b81821a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8182518 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5592b8182388 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5592b8182400 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b81826d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5592b81825e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8182898 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5592b81827a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8182950 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8182a00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8182c38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5592b8182ab0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8182b28 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5592b8182ed8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5592b8182de0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5592b8182fa0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5592b8182ff0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b8183040 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b81de9e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Element *'
|-CXXRecordDecl 0x5592b81edd88 prev 0x5592b81de9e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b81eeda0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Element *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5592b81eed50 'typename array_memory<Element *>::type' sugar
|   `-TypedefType 0x5592b81eed30 'conditional<true, sized_array_memory<8>, typed_array_memory<Element *> >::type' sugar
|     |-Typedef 0x5592b81eebe0 'type'
|     `-SubstTemplateTypeParmType 0x5592b817f0c0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b817ec10 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5592b817eb28 'sized_array_memory'
|-FieldDecl 0x5592b81eeea0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Element *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5592b81eeef0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b81eef28 <line:118:5, col:15> col:15 value_type 'Element *':'Element *'
| `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-PointerType 0x5592b8065870 'Element *'
|     `-RecordType 0x5592b80655f0 'Element'
|       `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81eefb8 <line:119:5, col:16> col:16 reference 'Element *&'
| `-LValueReferenceType 0x5592b81eef80 'Element *&'
|   `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b8065870 'Element *'
|       `-RecordType 0x5592b80655f0 'Element'
|         `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81ef078 <line:120:5, col:22> col:22 const_reference 'Element *const &'
| `-LValueReferenceType 0x5592b81ef040 'Element *const &'
|   `-QualType 0x5592b81ede21 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b8065870 'Element *'
|         `-RecordType 0x5592b80655f0 'Element'
|           `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81ef108 <line:121:5, col:16> col:16 pointer 'Element **'
| `-PointerType 0x5592b81ef0d0 'Element **'
|   `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b8065870 'Element *'
|       `-RecordType 0x5592b80655f0 'Element'
|         `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81ef1c8 <line:122:5, col:22> col:22 const_pointer 'Element *const *'
| `-PointerType 0x5592b81ef190 'Element *const *'
|   `-QualType 0x5592b81ede21 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b8065870 'Element *'
|         `-RecordType 0x5592b80655f0 'Element'
|           `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81efda0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Element *>::type':'Element *'
| `-ElaboratedType 0x5592b81efd50 'typename fast_argument<Element *>::type' sugar
|   `-TypedefType 0x5592b81efd30 'fast_argument<Element *, false>::type' sugar
|     |-Typedef 0x5592b81efcc0 'type'
|     `-SubstTemplateTypeParmType 0x5592b81efa80 'Element *' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-PointerType 0x5592b8065870 'Element *'
|         `-RecordType 0x5592b80655f0 'Element'
|           `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81efe08 <line:126:5, col:22> col:22 const_access_type 'Element *const &'
| `-LValueReferenceType 0x5592b81ef040 'Element *const &'
|   `-QualType 0x5592b81ede21 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b8065870 'Element *'
|         `-RecordType 0x5592b80655f0 'Element'
|           `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81efe60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81efec8 <line:130:5, col:16> col:16 iterator 'Element **'
| `-PointerType 0x5592b81ef0d0 'Element **'
|   `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b8065870 'Element *'
|       `-RecordType 0x5592b80655f0 'Element'
|         `-CXXRecord 0x5592b806f340 'Element'
|-TypedefDecl 0x5592b81eff30 <line:131:5, col:22> col:22 const_iterator 'Element *const *'
| `-PointerType 0x5592b81ef190 'Element *const *'
|   `-QualType 0x5592b81ede21 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5592b81ede20 'Element *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b8065870 'Element *'
|         `-RecordType 0x5592b80655f0 'Element'
|           `-CXXRecord 0x5592b806f340 'Element'
|-EnumDecl 0x5592b81eff88 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b81f0080 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Element *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b81f0060 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b81f0108 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b81f0398 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81f01c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81f0260 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXConstructorDecl 0x5592b81f0628 <line:139:5, col:37> col:12 Vector 'void (const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5592b81f0510 <col:19, col:36> col:36 x 'const Vector<Element *> &'
|-CXXConstructorDecl 0x5592b81f08e8 <line:141:5, col:32> col:12 Vector 'void (Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5592b81f07d0 <col:19, col:31> col:31 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5592b81f0c00 <line:144:5, col:51> col:23 operator= 'Vector<Element *> &(const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5592b81f0ae0 <col:33, col:50> col:50 x 'const Vector<Element *> &'
|-CXXMethodDecl 0x5592b81f0f10 <line:146:5, col:46> col:23 operator= 'Vector<Element *> &(Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5592b81f0df0 <col:33, col:45> col:45 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5592b81f1200 <line:148:5, col:70> col:23 assign 'Vector<Element *> &(Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81f1048 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81f10c0 <col:43, col:69> col:63 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5592b81f1358 <line:150:5, col:55> col:49 begin 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5592b81f1438 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f1490 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f14d8 <line:151:5, col:53> col:49 end 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5592b81f1588 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f15e0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f16a8 <line:152:5, col:63> col:55 begin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81f1758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f17b0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f17f8 <line:153:5, col:61> col:55 end 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81f18a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f1900 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f1948 <line:154:5, col:64> col:55 cbegin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81f19f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f1a50 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f1a98 <line:155:5, col:62> col:55 cend 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81f1b48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81f1ba0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81f1bc8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81f1c78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81f1d28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b81f1ee8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81f1dd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81f1e50 <col:37, col:63> col:57 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5592b81f2038 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81f1fa8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81f21e8 <line:163:5, col:65> col:43 operator[] 'Element *&(Vector::size_type)'
| |-ParmVarDecl 0x5592b81f20f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81f22a0 <col:20>
| `-OptimizeNoneAttr 0x5592b81f22f8 <col:30>
|-CXXMethodDecl 0x5592b81f2418 <line:164:5, col:73> col:49 operator[] 'Element *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b81f2320 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81f24d0 <col:20>
| `-OptimizeNoneAttr 0x5592b81f2528 <col:30>
|-CXXMethodDecl 0x5592b81f25e0 <line:165:5, col:29> col:15 at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81f2550 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81f2728 <line:166:5, col:37> col:21 at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81f2698 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81f2858 <line:167:5, col:21> col:15 front 'Element *&()' inline
|-CXXMethodDecl 0x5592b81f2988 <line:168:5, col:29> col:21 front 'Element *const &() const' inline
|-CXXMethodDecl 0x5592b81f2a58 <line:169:5, col:20> col:15 back 'Element *&()' inline
|-CXXMethodDecl 0x5592b81f2b28 <line:170:5, col:28> col:21 back 'Element *const &() const' inline
|-CXXMethodDecl 0x5592b81f2c68 <line:172:5, col:39> col:15 unchecked_at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81f2bd8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81f2db0 <line:173:5, col:47> col:21 unchecked_at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81f2d20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81f2ef8 <line:174:5, col:59> col:15 at_u 'Element *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b81f2e68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81f2fb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b81f30b0 <line:175:5, col:71> col:21 at_u 'Element *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b81f3020 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81f3168 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b81f3228 <line:177:5, col:20> col:15 data 'Element **()' inline
|-CXXMethodDecl 0x5592b81f3328 <line:178:5, col:28> col:21 data 'Element *const *() const' inline
|-CXXMethodDecl 0x5592b81f34a8 <line:180:5, col:48> col:17 push_back 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81f33e8 <col:27, col:47> col:47 v 'Vector<Element *>::value_argument_type':'Element *'
|-FunctionTemplateDecl 0x5592b81f3c68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b81f3560 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Element *>':'fast_argument<Element *, false>'
| `-CXXMethodDecl 0x5592b81f3bc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Element *&&)' inline
|   `-ParmVarDecl 0x5592b81f3ac8 <col:58, col:62> col:62 v 'Element *&&'
|-CXXMethodDecl 0x5592b81f3d48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b81f3e98 <line:186:5, col:49> col:17 push_front 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81f3e08 <col:28, col:48> col:48 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5592b81f3f50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b81f4198 <line:189:5, col:62> col:21 insert 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81f4010 <col:28, col:37> col:37 it 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5592b81f4088 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5592b81f4358 <line:190:5, col:38> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator)' inline
| `-ParmVarDecl 0x5592b81f4268 <col:27, col:36> col:36 it 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5592b81f7c00 <line:191:5, col:49> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::iterator)' inline
| |-ParmVarDecl 0x5592b81f4420 <col:27, col:36> col:36 a 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5592b81f4498 <col:39, col:48> col:48 b 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5592b81f7cc0 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b81f7f18 <line:195:5, col:34> col:17 swap 'void (Vector<Element *> &)' inline
| `-ParmVarDecl 0x5592b81f7e20 <col:22, col:33> col:33 x 'Vector<Element *> &'
`-CXXDestructorDecl 0x5592b81f7fe8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b81f7fe8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e421d0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5592b7e422e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5592b7e42388 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5592b7e423e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5592b7e42448 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5592b7e424f8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e42800 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7e42918 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5592b7e429c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5592b7e42a28 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5592b7e42ab8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5592b7e48b50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b7e48f88 <col:12>
|-CXXConstructorDecl 0x5592b7e48c58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b7e48d68 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5592b7e429c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5592b7e4b510 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5592b7e4b4e0 <col:12> 'const char *const' lvalue .data 0x5592b7e429c0
| |     `-DeclRefExpr 0x5592b7e4b4c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5592b7e42a28 'length' 'int'
| | `-ImplicitCastExpr 0x5592b7e4b5a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5592b7e4b570 <col:12> 'const int' lvalue .length 0x5592b7e42a28
| |     `-DeclRefExpr 0x5592b7e4b550 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5592b7e42ab8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5592b7e4b630 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5592b7e4b600 <col:12> 'String::memo_t *const' lvalue .memo 0x5592b7e42ab8
| |     `-DeclRefExpr 0x5592b7e4b5e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| `-CompoundStmt 0x5592b7e4b688 <col:12>
|-CXXConstructorDecl 0x5592b7e48e08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e48e08
| `-ParmVarDecl 0x5592b7e48f18 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5592b7e4e470 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5592b7e59e88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b7e59f98 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5592b7e5a4b0 <col:12>
|   |-BinaryOperator 0x5592b7e5a2c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5592b7e5a280 <col:12> 'const char *' lvalue ->data 0x5592b7e429c0
|   | | `-CXXThisExpr 0x5592b7e5a270 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5592b7e5a2b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5592b7e5a240 <col:12> 'const char *const' lvalue .data 0x5592b7e429c0
|   |     `-DeclRefExpr 0x5592b7e5a220 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5592b7e5a390 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5592b7e5a348 <col:12> 'int' lvalue ->length 0x5592b7e42a28
|   | | `-CXXThisExpr 0x5592b7e5a338 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5592b7e5a378 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5592b7e5a308 <col:12> 'const int' lvalue .length 0x5592b7e42a28
|   |     `-DeclRefExpr 0x5592b7e5a2e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5592b7e5a458 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5592b7e5a410 <col:12> 'String::memo_t *' lvalue ->memo 0x5592b7e42ab8
|   | | `-CXXThisExpr 0x5592b7e5a400 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5592b7e5a440 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5592b7e5a3d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5592b7e42ab8
|   |     `-DeclRefExpr 0x5592b7e5a3b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5592b7e5a4a0 <col:12>
|     `-UnaryOperator 0x5592b7e5a488 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b7e5a478 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5592b7e5a008 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e5a008
  `-ParmVarDecl 0x5592b7e5a118 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e39740 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b7e39858 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5592b7e398e8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5592b7e39928 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5592b7b0afd0 'const char *'
|   `-QualType 0x5592b7b0a521 'const char' const
|     `-BuiltinType 0x5592b7b0a520 'char'
|-TypedefDecl 0x5592b7e399b0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5592b7e39980 'String::const_iterator' sugar
|   |-Typedef 0x5592b7e39928 'const_iterator'
|   `-PointerType 0x5592b7b0afd0 'const char *'
|     `-QualType 0x5592b7b0a521 'const char' const
|       `-BuiltinType 0x5592b7b0a520 'char'
|-TypedefDecl 0x5592b7e39b20 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5592b7e39a90 'int (String::*)() const'
|   |-RecordType 0x5592b7e397d0 'String'
|   | `-CXXRecord 0x5592b7e39740 'String'
|   `-ParenType 0x5592b7e39a30 'int () const' sugar
|     `-FunctionProtoType 0x5592b7e0e5d0 'int () const' const cdecl
|       `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b7e39b88 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5592b7c631d0 'int64_t' sugar
|   |-Typedef 0x5592b7b73390 'int64_t'
|   `-TypedefType 0x5592b7b4c630 '__int64_t' sugar
|     |-Typedef 0x5592b7b4c208 '__int64_t'
|     `-BuiltinType 0x5592b7b0a5a0 'long'
|-TypedefDecl 0x5592b7e39bf0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5592b7c630f0 'uint64_t' sugar
|   |-Typedef 0x5592b7b73530 'uint64_t'
|   `-TypedefType 0x5592b7b4c6c0 '__uint64_t' sugar
|     |-Typedef 0x5592b7b4c278 '__uint64_t'
|     `-BuiltinType 0x5592b7b0a640 'unsigned long'
|-TypedefDecl 0x5592b7e39c80 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5592b7e39c50 'String::intmax_t' sugar
|   |-Typedef 0x5592b7e39b88 'intmax_t'
|   `-TypedefType 0x5592b7c631d0 'int64_t' sugar
|     |-Typedef 0x5592b7b73390 'int64_t'
|     `-TypedefType 0x5592b7b4c630 '__int64_t' sugar
|       |-Typedef 0x5592b7b4c208 '__int64_t'
|       `-BuiltinType 0x5592b7b0a5a0 'long'
|-TypedefDecl 0x5592b7e39d10 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5592b7e39ce0 'String::uintmax_t' sugar
|   |-Typedef 0x5592b7e39bf0 'uintmax_t'
|   `-TypedefType 0x5592b7c630f0 'uint64_t' sugar
|     |-Typedef 0x5592b7b73530 'uint64_t'
|     `-TypedefType 0x5592b7b4c6c0 '__uint64_t' sugar
|       |-Typedef 0x5592b7b4c278 '__uint64_t'
|       `-BuiltinType 0x5592b7b0a640 'unsigned long'
|-CXXConstructorDecl 0x5592b7e39dd0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5592b7e39f78 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5592b7e39eb8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5592b7e3a128 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5592b7e3a068 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5592b7e3a280 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5592b7e3a1f0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5592b7e3a498 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5592b7e3a348 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5592b7e3a3c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5592b7e3a6b8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5592b7e3a568 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5592b7e3a5e8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5592b7e3a8d8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5592b7e3a788 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5592b7e3a808 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5592b7e3aaf8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5592b7e3a9a8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5592b7e3aa28 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5592b7e3ac88 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5592b7e3abc0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5592b7e3ae08 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5592b7e3ad48 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5592b7e3af98 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5592b7e3aed0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5592b7e3b0f0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5592b7e3b060 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5592b7e3b248 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5592b7e3b1b8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5592b7e3b3a0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5592b7e3b310 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5592b7e3b528 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5592b7e3b468 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5592b7e3b6b8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5592b7e3b5f0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5592b7e3b848 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5592b7e3b780 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5592b7e3b9d8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5592b7e3b910 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5592b7e3bad0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5592b7e3bbf8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5592b7e3bd78 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5592b7e3bcb0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5592b7e3bec8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5592b7e3be38 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5592b7e3bf80 <col:63> "" ""
|-CXXMethodDecl 0x5592b7e3c0c8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5592b7e3c008 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5592b7e3c2d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5592b7e3c188 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5592b7e3c208 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5592b7e3c4f8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5592b7e3c3a0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5592b7e3c420 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5592b7e3c7d8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5592b7e3c5b8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5592b7e3c638 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5592b7e48620 <col:55> 'int' 10
| `-ParmVarDecl 0x5592b7e3c6b0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b7e48640 <col:76> 'bool' true
|-CXXMethodDecl 0x5592b7e3cab8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5592b7e3c8a0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5592b7e3c920 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5592b7e48650 <col:56> 'int' 10
| `-ParmVarDecl 0x5592b7e3c998 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b7e48670 <col:77> 'bool' true
|-CXXMethodDecl 0x5592b7e3cbc0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5592b7e3cc88 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5592b7e3cd50 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5592b7e3cdf0 <col:20>
| `-OptimizeNoneAttr 0x5592b7e3ce48 <col:30>
|-CXXConversionDecl 0x5592b7e3cf38 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5592b7e3d008 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5592b7e3d0c8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5592b7e3d1b8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5592b7e3d278 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5592b7e3d3f8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5592b7e3d330 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5592b7e3d548 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5592b7e3d4b8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5592b7e3d638 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5592b7e3d6f8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5592b7e3d948 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5592b7e3d7b0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5592b7e3d830 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5592b7e3dba8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5592b7e3da10 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5592b7e3da90 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5592b7e3dc78 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b7e3de88 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5592b7e3dd30 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5592b7e3ddb0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5592b7e3e0a8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5592b7e3df50 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5592b7e3dfd0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5592b7e3e238 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5592b7e3e170 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5592b7e3e328 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5592b7e3e498 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5592b7e3e3d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5592b7e3e6a8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5592b7e3e558 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5592b7e3e5d8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5592b7e3e8c0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5592b7e3e768 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5592b7e3e7e0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5592b7e3ea50 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5592b7e3e980 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5592b7e3ec70 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5592b7e3eb10 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5592b7e3eb90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5592b7e3edc0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5592b7e3ed30 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5592b7e3ef98 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5592b7e3ee80 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5592b7e3ef00 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5592b7e3f0e8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5592b7e3f058 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5592b7e3f300 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5592b7e3f1a0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5592b7e3f220 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5592b7e48680 <col:39> 'int' 0
|-CXXMethodDecl 0x5592b7e3f520 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5592b7e3f3c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5592b7e3f440 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5592b7e486a0 <col:48> 'int' 0
|-CXXMethodDecl 0x5592b7e3f700 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5592b7e3f5e0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5592b7e3f660 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5592b7e486c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5592b7e3f7d0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5592b7e3f890 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5592b7e3f950 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5592b7e3fa10 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5592b7e3fad0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5592b7e3fc78 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5592b7e3fb80 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5592b7e3fdf8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5592b7e3fd30 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5592b7e3ffd0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5592b7e3feb8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5592b7e40148 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5592b7e40088 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5592b7e40290 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5592b7e40200 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5592b7e403e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5592b7e40350 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5592b7e405b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5592b7e404a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5592b7e40520 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5592b7e40798 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5592b7e40680 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5592b7e40700 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5592b7e408e8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5592b7e40858 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5592b7e40af8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5592b7e409a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5592b7e40a28 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5592b7e40c58 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5592b7e40bc0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5592b7e40db0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5592b7e40d18 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5592b7e40e58 <col:57> "" ""
|-CXXMethodDecl 0x5592b7e40f68 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5592b7e40ed8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5592b7e410b8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5592b7e41028 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5592b7e41238 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5592b7e41170 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5592b7e41300 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5592b7e413c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5592b7e41480 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5592b7e41520 <col:49> "" ""
|-CXXMethodDecl 0x5592b7e415b0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5592b7e41670 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5592b7e41760 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5592b7e41828 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5592b7e418e8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5592b7e419a8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5592b7e41aa0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5592b7e41b68 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5592b7e41c30 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5592b7e41e08 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5592b7e41ce8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5592b7e41d68 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5592b7e42030 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5592b7e41ed0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5592b7e41f50 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5592b7e42140 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5592b7e421a8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b7e421d0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b7e422e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5592b7e42388 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5592b7e423e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5592b7e42448 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5592b7e424f8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5592b7e42560 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5592b7e42798 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5592b7e427e8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b7e42778 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5592b7e42688 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5592b7e42630 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5592b7e42670 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5592b7e42650 <col:32> 'int' 8
|-CXXRecordDecl 0x5592b7e42800 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b7e42918 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5592b7e429c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5592b7e42a28 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5592b7e42ab8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5592b7e48b50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5592b7e48f88 <col:12>
| |-CXXConstructorDecl 0x5592b7e48c58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b7e48d68 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5592b7e429c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5592b7e4b510 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5592b7e4b4e0 <col:12> 'const char *const' lvalue .data 0x5592b7e429c0
| | |     `-DeclRefExpr 0x5592b7e4b4c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5592b7e42a28 'length' 'int'
| | | `-ImplicitCastExpr 0x5592b7e4b5a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5592b7e4b570 <col:12> 'const int' lvalue .length 0x5592b7e42a28
| | |     `-DeclRefExpr 0x5592b7e4b550 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5592b7e42ab8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5592b7e4b630 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5592b7e4b600 <col:12> 'String::memo_t *const' lvalue .memo 0x5592b7e42ab8
| | |     `-DeclRefExpr 0x5592b7e4b5e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e48d68 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5592b7e4b688 <col:12>
| |-CXXConstructorDecl 0x5592b7e48e08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e48e08
| | `-ParmVarDecl 0x5592b7e48f18 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5592b7e4e470 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5592b7e59e88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b7e59f98 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5592b7e5a4b0 <col:12>
| |   |-BinaryOperator 0x5592b7e5a2c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5592b7e5a280 <col:12> 'const char *' lvalue ->data 0x5592b7e429c0
| |   | | `-CXXThisExpr 0x5592b7e5a270 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5592b7e5a2b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5592b7e5a240 <col:12> 'const char *const' lvalue .data 0x5592b7e429c0
| |   |     `-DeclRefExpr 0x5592b7e5a220 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5592b7e5a390 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5592b7e5a348 <col:12> 'int' lvalue ->length 0x5592b7e42a28
| |   | | `-CXXThisExpr 0x5592b7e5a338 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5592b7e5a378 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5592b7e5a308 <col:12> 'const int' lvalue .length 0x5592b7e42a28
| |   |     `-DeclRefExpr 0x5592b7e5a2e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5592b7e5a458 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5592b7e5a410 <col:12> 'String::memo_t *' lvalue ->memo 0x5592b7e42ab8
| |   | | `-CXXThisExpr 0x5592b7e5a400 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5592b7e5a440 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5592b7e5a3d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5592b7e42ab8
| |   |     `-DeclRefExpr 0x5592b7e5a3b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5592b7e59f98 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5592b7e5a4a0 <col:12>
| |     `-UnaryOperator 0x5592b7e5a488 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5592b7e5a478 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5592b7e5a008 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5592b7e5a008
|   `-ParmVarDecl 0x5592b7e5a118 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5592b7e42b30 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5592b7e42d78 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5592b7e42b98 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5592b7e42c18 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5592b7e42c90 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5592b7e48b10 <col:79, line:261:5>
|   |-BinaryOperator 0x5592b7e48788 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5592b7e48720 <col:2, col:5> 'const char *' lvalue .data 0x5592b7e429c0
|   | | `-MemberExpr 0x5592b7e486f0 <col:2> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|   | |   `-CXXThisExpr 0x5592b7e486e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5592b7e48770 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5592b7e48750 <col:12> 'const char *' lvalue ParmVar 0x5592b7e42b98 'data' 'const char *'
|   |-BinaryOperator 0x5592b7e48850 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5592b7e487e8 <col:2, col:5> 'int' lvalue .length 0x5592b7e42a28
|   | | `-MemberExpr 0x5592b7e487b8 <col:2> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|   | |   `-CXXThisExpr 0x5592b7e487a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5592b7e48838 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5592b7e48818 <col:14> 'int' lvalue ParmVar 0x5592b7e42c18 'length' 'int'
|   `-IfStmt 0x5592b7e48af8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5592b7e48970 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5592b7e48958 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5592b7e48938 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5592b7e48918 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5592b7e488b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|     |       | `-MemberExpr 0x5592b7e48880 <col:7> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|     |       |   `-CXXThisExpr 0x5592b7e48870 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5592b7e48900 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5592b7e488e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5592b7e42c90 'memo' 'String::memo_t *'
|     `-CallExpr 0x5592b7e48ad0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5592b7e48ab8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b7e489c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5592b7e317a8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5592b7e48a28 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5592b7e42388
|         `-ImplicitCastExpr 0x5592b7e48a10 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5592b7e489f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5592b7e42c90 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5592b7e43028 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5592b7e42e48 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5592b7e42ec8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5592b7e42f40 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5592b7e42b30 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5592b7e48f98 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b7e49128 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5592b7e49090 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5592b7e49000 <col:2> '<bound member function type>' ->assign_memo 0x5592b7e42d78
|     | `-ImplicitCastExpr 0x5592b7e490c8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5592b7e48ff0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5592b7e490e0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b7e49030 <col:14> 'const char *' lvalue ParmVar 0x5592b7e42e48 'data' 'const char *'
|     |-ImplicitCastExpr 0x5592b7e490f8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b7e49050 <col:20> 'int' lvalue ParmVar 0x5592b7e42ec8 'length' 'int'
|     `-ImplicitCastExpr 0x5592b7e49110 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b7e49070 <col:28> 'String::memo_t *' lvalue ParmVar 0x5592b7e42f40 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5592b7e431b8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5592b7e430f8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5592b7e49380 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5592b7e49300 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5592b7e49150 <col:2> '<bound member function type>' ->assign_memo 0x5592b7e42d78
|     | `-CXXThisExpr 0x5592b7e49140 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5592b7e49338 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5592b7e491d0 <col:14, col:19> 'const char *' lvalue .data 0x5592b7e429c0
|     |   `-MemberExpr 0x5592b7e491a0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5592b7e42b30
|     |     `-DeclRefExpr 0x5592b7e49180 <col:14> 'const String' lvalue ParmVar 0x5592b7e430f8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5592b7e49350 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5592b7e49250 <col:25, col:30> 'int' lvalue .length 0x5592b7e42a28
|     |   `-MemberExpr 0x5592b7e49220 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5592b7e42b30
|     |     `-DeclRefExpr 0x5592b7e49200 <col:25> 'const String' lvalue ParmVar 0x5592b7e430f8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5592b7e49368 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5592b7e492d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|         `-MemberExpr 0x5592b7e492a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5592b7e42b30
|           `-DeclRefExpr 0x5592b7e49280 <col:38> 'const String' lvalue ParmVar 0x5592b7e430f8 'x' 'const String &'
|-CXXMethodDecl 0x5592b7e43280 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5592b7e49d40 <col:31, line:278:5>
|   `-IfStmt 0x5592b7e49d28 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5592b7e49420 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5592b7e49408 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5592b7e493d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|     |     `-MemberExpr 0x5592b7e493a8 <col:6> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|     |       `-CXXThisExpr 0x5592b7e49398 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5592b7e49d00 <col:15, line:277:2>
|       |-ParenExpr 0x5592b7e498d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5592b7e498a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5592b7e49530 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5592b7e49518 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5592b7e49500 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5592b7e494c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5592b7e42388
|       |   |       `-ImplicitCastExpr 0x5592b7e494a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5592b7e49478 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|       |   |           `-MemberExpr 0x5592b7e49448 <col:27> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|       |   |             `-CXXThisExpr 0x5592b7e49438 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5592b7e49590 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5592b7e49570 <col:54> 'int' 0
|       |   `-CallExpr 0x5592b7e49800 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5592b7e497e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5592b7e49768 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5592b7e49840 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5592b7e49678 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5592b7e49858 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5592b7e496a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5592b7e49870 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5592b7e496e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5592b7e49888 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5592b7e49750 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5592b7e49738 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5592b7e49700 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5592b7e49c20 <line:274:6, line:275:22>
|       | |-CallExpr 0x5592b7e49ae0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5592b7e49ac8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5592b7e49a40 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5592b7e32bf0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5592b7e49a10 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5592b7e42388
|       | |   `-ImplicitCastExpr 0x5592b7e499f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5592b7e499c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|       | |       `-MemberExpr 0x5592b7e49998 <col:40> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|       | |         `-CXXThisExpr 0x5592b7e49988 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5592b7e49be0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5592b7e49bc8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5592b7e49b08 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5592b7e47a60 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5592b7e49c08 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5592b7e49b68 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|       |       `-MemberExpr 0x5592b7e49b38 <col:15> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|       |         `-CXXThisExpr 0x5592b7e49b28 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5592b7e49ce0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5592b7e49c78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5592b7e42ab8
|         | `-MemberExpr 0x5592b7e49c48 <col:6> 'String::rep_t' lvalue ->_r 0x5592b7e42b30
|         |   `-CXXThisExpr 0x5592b7e49c38 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5592b7e49cc8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5592b7e49ca8 <col:16> 'int' 0
|-CXXMethodDecl 0x5592b7e43518 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5592b7e43338 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5592b7e433b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5592b7e43430 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5592b7e435f0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5592b7e43840 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5592b7e436a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5592b7e43728 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5592b7e437a0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5592b7e43a28 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5592b7e43910 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5592b7e43990 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5592b7e43b28 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5592b7e49e18 <col:41, line:286:5>
|   `-ReturnStmt 0x5592b7e49e08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5592b7e49dd8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5592b7e49da0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5592b7e49d88 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5592b7e49d68 <col:46> 'int' 1
|-CXXMethodDecl 0x5592b7e43dc8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5592b7e43be0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5592b7e43c60 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5592b7e43ce0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5592b7e47a60 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5592b7e43e90 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5592b7e47b30 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5592b7e47d00 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5592b7e47be8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5592b7e47c68 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5592b7e47dc0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5592b7e47e88 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5592b7e47f88 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5592b7e48000 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5592b7e48078 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5592b7e480e0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5592b7e481e0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5592b7e48230 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b7e481c0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5592b7e481a0 <col:22> 'int' 14
|-CXXMethodDecl 0x5592b7e48448 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5592b7e48260 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5592b7e482e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5592b7e48360 <col:43> col:46 'int'
|-FriendDecl 0x5592b7e48550 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5592b7e485e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b80b7cd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5592b80b7ea8 prev 0x5592b80b7cd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b80b7f38 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b80b7f60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b80b98c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5592b80b9870 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5592b80b9850 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5592b80b8178 'type'
|     `-SubstTemplateTypeParmType 0x5592b80b8140 'String' sugar
|       |-TemplateTypeParmType 0x5592b7dfdff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dfdfa0 'T'
|       `-RecordType 0x5592b7e397d0 'String'
|         `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80b9978 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5592b80b9940 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5592b80b9920 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5592b80b98c0 'type'
|     `-ElaboratedType 0x5592b80b9870 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5592b80b9850 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5592b80b8178 'type'
|         `-SubstTemplateTypeParmType 0x5592b80b8140 'String' sugar
|           |-TemplateTypeParmType 0x5592b7dfdff0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dfdfa0 'T'
|           `-RecordType 0x5592b7e397d0 'String'
|             `-CXXRecord 0x5592b7e39740 'String'
|-CXXMethodDecl 0x5592b80b9af8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5592b80b9a08 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5592b80b9be8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b80b9cc8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b80b9cc8
|-CXXMethodDecl 0x5592b80bdfb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5592b80bdec0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5592b80be1f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5592b80be070 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b80be0e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80be3c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5592b80be2b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b80be330 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80be528 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5592b80be5f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5592b80be848 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5592b80be6b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5592b80be730 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80beaa8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5592b80be918 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5592b80be990 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80bec68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5592b80beb78 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80bee28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5592b80bed30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80beee0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b80bef90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b80bf1c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5592b80bf040 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b80bf0b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5592b80bf468 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5592b80bf370 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5592b80bf530 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5592b80bf580 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b80bf5d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8071f80 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5592b80b6738 prev 0x5592b8071f80 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b80b7c40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5592b80b7bf0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5592b80b7bd0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5592b80b7a80 'type'
|     `-SubstTemplateTypeParmType 0x5592b80b7910 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3da0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5592b7dd3d48 'F'
|       `-RecordType 0x5592b80b7570 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5592b80b7490 'typed_array_memory'
|-FieldDecl 0x5592b80bf620 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5592b80bf670 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b80bf6a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b7e397d0 'String'
|     `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80bf738 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5592b80bf700 'String &'
|   `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b7e397d0 'String'
|       `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80bf7c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5592b80bf790 'const String &'
|   `-QualType 0x5592b80b67d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b7e397d0 'String'
|         `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80bf858 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5592b80bf820 'String *'
|   `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b7e397d0 'String'
|       `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80bf8e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5592b80bf8b0 'const String *'
|   `-QualType 0x5592b80b67d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b7e397d0 'String'
|         `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80c0540 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5592b80c04f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5592b80c04d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5592b80c0408 'type'
|     `-LValueReferenceType 0x5592b80c03d0 'const String &'
|       `-QualType 0x5592b80c0171 'const String' const
|         `-SubstTemplateTypeParmType 0x5592b80c0170 'String' sugar
|           |-TemplateTypeParmType 0x5592b7dddcf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dddc98 'T'
|           `-RecordType 0x5592b7e397d0 'String'
|             `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80c05a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5592b80bf790 'const String &'
|   `-QualType 0x5592b80b67d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b7e397d0 'String'
|         `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80c0600 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b80c0668 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5592b80bf820 'String *'
|   `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b7e397d0 'String'
|       `-CXXRecord 0x5592b7e39740 'String'
|-TypedefDecl 0x5592b80c06d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5592b80bf8b0 'const String *'
|   `-QualType 0x5592b80b67d1 'const String' const
|     `-SubstTemplateTypeParmType 0x5592b80b67d0 'String' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b7e397d0 'String'
|         `-CXXRecord 0x5592b7e39740 'String'
|-EnumDecl 0x5592b80c0728 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b80c0820 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b80c0800 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b80c08a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b80c0b38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b80c0960 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b80c0a00 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5592b80c0dc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5592b80c0cb0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5592b80c1088 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5592b80c0f70 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5592b80c13a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5592b80c1280 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5592b80c16b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5592b80c1590 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5592b80c19a0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b80c17e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b80c1860 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5592b80c1ac8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5592b80c1b78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c1bd0 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c1c18 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5592b80c1cc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c1d20 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c1de8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5592b80c1e98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c1ef0 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c1f38 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5592b80c1fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c2040 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c2088 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5592b80c2138 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c2190 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c21d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5592b80c2288 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b80c22e0 <col:30> Inherited
|-CXXMethodDecl 0x5592b80c2308 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b80c23b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b80c2468 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b80c2628 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b80c2518 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b80c2590 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5592b80c2778 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b80c26e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b80c2928 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5592b80c2830 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b80c29e0 <col:20>
| `-OptimizeNoneAttr 0x5592b80c2a38 <col:30>
|-CXXMethodDecl 0x5592b80c2b58 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b80c2a60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b80c2c10 <col:20>
| `-OptimizeNoneAttr 0x5592b80c2c68 <col:30>
|-CXXMethodDecl 0x5592b80c2d20 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b80c2c90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b80c2e68 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b80c2dd8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b80c2f98 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5592b80c3098 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5592b80c3168 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5592b80c3238 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5592b80c3378 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b80c32e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b80c34c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b80c3430 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b80c3608 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b80c3578 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b80c36c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b80c37c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b80c3730 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b80c3878 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b80c3938 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5592b80c3a38 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5592b80c3bb8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b80c3af8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5592b80c4378 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b80c3c70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5592b80c42d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5592b80c41d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5592b80c4458 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b80c45a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b80c4518 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5592b80c4660 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b80c48a8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b80c4720 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5592b80c4798 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5592b80c4a38 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5592b80c4978 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5592b80c4c48 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5592b80c4b00 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5592b80c4b78 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5592b80c4d08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5592b80c4f68 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5592b80c4e70 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5592b80c5038 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b80c5038

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b80fd080 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5592b80fd258 prev 0x5592b80fd080 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b80fd2e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b80fd310 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b80feee0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5592b80fee90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5592b80fd7c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5592b80fd6c0 'type'
|     `-TemplateSpecializationType 0x5592b80fd650 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5592b80fd530 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5592b80fd510 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5592b80fd4f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5592b80fd630 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5592b80fd550 'char_array'
|-TypedefDecl 0x5592b80fef98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5592b80fef60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5592b80fef40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5592b80feee0 'type'
|     `-ElaboratedType 0x5592b80fee90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5592b80fd7c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5592b80fd6c0 'type'
|         `-TemplateSpecializationType 0x5592b80fd650 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5592b80fd530 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5592b80fd510 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5592b80fd4f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5592b80fd630 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5592b80fd550 'char_array'
|-CXXMethodDecl 0x5592b80ff118 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5592b80ff028 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5592b80ff208 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b80ff2e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b80ff2e8
|-CXXMethodDecl 0x5592b80ff5b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5592b80ff4c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5592b80ff7f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5592b80ff670 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b80ff6e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b80ff9c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5592b80ff8b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b80ff930 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b80ffb28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5592b80ffbf8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5592b80ffe48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5592b80ffcb8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5592b80ffd30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b8107d28 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5592b8107ba0 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5592b8107c18 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b8107ee8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5592b8107df8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b81080a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5592b8107fb0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b8108160 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8108210 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8108448 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5592b81082c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8108338 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5592b81086e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5592b81085f0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5592b81087b0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5592b8108800 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b8108850 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b81f8330 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5592b81f8538 prev 0x5592b81f8330 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b81f9550 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5592b81f9500 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x5592b81f94e0 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x5592b81f9390 'type'
|     `-SubstTemplateTypeParmType 0x5592b80fcc50 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b80fc7a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5592b80fc6b8 'sized_array_memory'
|-FieldDecl 0x5592b81f9650 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5592b81f96a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b81f96d8 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81f9768 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x5592b81f9730 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81f9828 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x5592b81f97f0 'const unsigned int &'
|   `-QualType 0x5592b81f85d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81f98b8 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x5592b81f9880 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81f9948 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x5592b81f9910 'const unsigned int *'
|   `-QualType 0x5592b81f85d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81fa530 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x5592b81fa4e0 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x5592b81fa4c0 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x5592b81fa450 'type'
|     `-SubstTemplateTypeParmType 0x5592b81fa210 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81fa598 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x5592b81f97f0 'const unsigned int &'
|   `-QualType 0x5592b81f85d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81fa5f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81fa658 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x5592b81f9880 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-TypedefDecl 0x5592b81fa6c0 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x5592b81f9910 'const unsigned int *'
|   `-QualType 0x5592b81f85d1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5592b81f85d0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-EnumDecl 0x5592b81fa718 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b81fa810 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b81fa7f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b81fa898 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b81faae8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81fa950 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81fa9f0 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x5592b81fada8 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5592b81fac90 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x5592b81fb068 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5592b81faf50 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5592b81fb3b0 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5592b81fb290 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x5592b81fb6c0 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5592b81fb5a0 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5592b81fb9b0 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81fb7f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81fb870 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5592b81fbad8 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5592b81fbbb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fbc10 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fbc58 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5592b81fbd08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fbd60 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fbdf8 <line:152:5, col:63> col:55 begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5592b81fbea8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fbf00 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fbf48 <line:153:5, col:61> col:55 end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5592b81fbff8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fc050 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fc098 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5592b81fc148 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fc1a0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fc1e8 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5592b81fc298 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81fc2f0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81fc318 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81fc3c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81fc478 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b81fc638 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81fc528 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81fc5a0 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5592b81fc788 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81fc6f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81fc938 <line:163:5, col:65> col:43 operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x5592b81fc840 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81fc9f0 <col:20>
| `-OptimizeNoneAttr 0x5592b81fca48 <col:30>
|-CXXMethodDecl 0x5592b81fcb68 <line:164:5, col:73> col:49 operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b81fca70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81fcc20 <col:20>
| `-OptimizeNoneAttr 0x5592b81fcc78 <col:30>
|-CXXMethodDecl 0x5592b81fcd30 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81fcca0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81fce78 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81fcde8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81fcfa8 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x5592b81fd0d8 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5592b81fd1a8 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x5592b81fd278 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5592b81fd3b8 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81fd328 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81fd500 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81fd470 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81fd648 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b81fd5b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81fd700 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b81fd800 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b81fd770 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81fd8b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b81fd978 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x5592b81fda78 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x5592b81fdbf8 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81fdb38 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x5592b81fe3b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b81fdcb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x5592b81fe318 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x5592b81fe218 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x5592b81fe498 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b81fe5e8 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81fe558 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5592b81fe6a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b81fe8e8 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81fe760 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5592b81fe7d8 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5592b81feaa8 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x5592b81fe9b8 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5592b81fecf8 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x5592b81feb70 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5592b81febe8 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5592b81fedb8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b81ff018 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5592b81fef20 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x5592b81ff0e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b81ff0e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b80fba88 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5592b80fbc98 prev 0x5592b80fba88 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b80fcff0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5592b80fcfa0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5592b80fcf80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5592b80fce30 'type'
|     `-SubstTemplateTypeParmType 0x5592b80fcc50 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b80fc7a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5592b80fc6b8 'sized_array_memory'
|-FieldDecl 0x5592b81088a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5592b81088f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b8108928 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81089b8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5592b8108980 'int &'
|   `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8108a78 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5592b8108a40 'const int &'
|   `-QualType 0x5592b80fbd31 'const int' const
|     `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8108b08 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5592b8108ad0 'int *'
|   `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8108b98 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5592b8108b60 'const int *'
|   `-QualType 0x5592b80fbd31 'const int' const
|     `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8109780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5592b8109730 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5592b8109710 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5592b81096a0 'type'
|     `-SubstTemplateTypeParmType 0x5592b8109460 'int' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81097e8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5592b8108a40 'const int &'
|   `-QualType 0x5592b80fbd31 'const int' const
|     `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8109840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81098a8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5592b8108ad0 'int *'
|   `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8109910 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5592b8108b60 'const int *'
|   `-QualType 0x5592b80fbd31 'const int' const
|     `-SubstTemplateTypeParmType 0x5592b80fbd30 'int' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-BuiltinType 0x5592b7b0a580 'int'
|-EnumDecl 0x5592b8109968 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b8109a60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b8109a40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b8109ae8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b8109d38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8109ba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8109c40 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5592b8109ff8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5592b8109ee0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5592b810a2b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5592b810a1a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5592b810a600 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5592b810a4e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5592b810a910 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5592b810a7f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5592b810ac00 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b810aa48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b810aac0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5592b810ad28 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5592b810ae08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810ae60 <col:30> Inherited
|-CXXMethodDecl 0x5592b810aea8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5592b810af58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810afb0 <col:30> Inherited
|-CXXMethodDecl 0x5592b810b078 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5592b810b128 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810b180 <col:30> Inherited
|-CXXMethodDecl 0x5592b810b1c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5592b810b278 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810b2d0 <col:30> Inherited
|-CXXMethodDecl 0x5592b810b318 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5592b810b3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810b420 <col:30> Inherited
|-CXXMethodDecl 0x5592b810b468 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5592b810b518 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b810b570 <col:30> Inherited
|-CXXMethodDecl 0x5592b810b598 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b810b648 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b810b6f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b810b8b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b810b7a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b810b820 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5592b810ba08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b810b978 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b810bbb8 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5592b810bac0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b810bc70 <col:20>
| `-OptimizeNoneAttr 0x5592b810bcc8 <col:30>
|-CXXMethodDecl 0x5592b810bde8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b810bcf0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b810bea0 <col:20>
| `-OptimizeNoneAttr 0x5592b810bef8 <col:30>
|-CXXMethodDecl 0x5592b810bfb0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b810bf20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b810c0f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b810c068 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b810c228 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5592b810c358 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5592b810c428 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5592b810c4f8 <line:170:5, col:28> col:21 used back 'const int &() const' inline
|-CXXMethodDecl 0x5592b810c638 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b810c5a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b810c780 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b810c6f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b810c8c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b810c838 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b810c980 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b810ca80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b810c9f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b810cb38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b810cbf8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5592b810ccf8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5592b810ce78 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b810cdb8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5592b810d638 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b810cf30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5592b810d598 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5592b810d498 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5592b810d718 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b810d868 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b810d7d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5592b810d920 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b810db68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b810d9e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5592b810da58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5592b810dd28 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5592b810dc38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5592b810df78 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5592b810ddf0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5592b810de68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5592b810e038 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5592b810e298 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5592b810e1a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5592b810e368 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b810e368

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81ff330 <../dummy_inc/click/router.hh:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
|-DefinitionData aggregate standard_layout has_mutable_fields
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5592b81ff448 <col:5, col:12> col:12 implicit struct element_landmark_t
|-FieldDecl 0x5592b81ff4e8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5592b81ff548 <line:249:9, col:16> col:16 filename 'String'
|-CXXConstructorDecl 0x5592b81ff5e0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5592b81ff5e0
| `-ParmVarDecl 0x5592b81ff6f8 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5592b81ff798 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5592b81ff798
| `-ParmVarDecl 0x5592b81ff8a8 <col:12> col:12 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5592b81ff948 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5592b81ff948
| `-ParmVarDecl 0x5592b81ffa58 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5592b81ffac8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5592b81ffac8
| `-ParmVarDecl 0x5592b8202130 <col:12> col:12 'Router::element_landmark_t &&'
`-CXXDestructorDecl 0x5592b82021b8 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5592b82021b8

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  NonVirtualBaseLLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8203750 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<Router::element_landmark_t>'
|-CXXRecordDecl 0x5592b8203928 prev 0x5592b8203750 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b82039b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b82039e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b82053a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<element_landmark_t>::type':'Router::element_landmark_t'
| `-ElaboratedType 0x5592b8205350 'typename typed_array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5592b8205330 'typed_array_memory<Router::element_landmark_t>::type' sugar
|     |-Typedef 0x5592b8203bf8 'type'
|     `-SubstTemplateTypeParmType 0x5592b8203bc0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5592b7dfdff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dfdfa0 'T'
|       `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|         `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8205458 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-PointerType 0x5592b8205420 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|   `-TypedefType 0x5592b8205400 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5592b82053a0 'type'
|     `-ElaboratedType 0x5592b8205350 'typename typed_array_memory<element_landmark_t>::type' sugar
|       `-TypedefType 0x5592b8205330 'typed_array_memory<Router::element_landmark_t>::type' sugar
|         |-Typedef 0x5592b8203bf8 'type'
|         `-SubstTemplateTypeParmType 0x5592b8203bc0 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x5592b7dfdff0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dfdfa0 'T'
|           `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|             `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-CXXMethodDecl 0x5592b82055d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *) const' inline
| `-ParmVarDecl 0x5592b82054e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXConstructorDecl 0x5592b82056c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b82057a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b82057a8
|-CXXMethodDecl 0x5592b8205a78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5592b8205980 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-CXXMethodDecl 0x5592b8205cb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5592b8205b30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8205ba8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b8205e88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5592b8205d78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8205df0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b8205fe8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5592b82060b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5592b8206308 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5592b8206178 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5592b82061f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b8206568 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator)'
| |-ParmVarDecl 0x5592b82063d8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5592b8206450 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b8206728 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5592b8206638 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b82068e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5592b82067f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b82069a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8206a50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8206c88 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5592b8206b00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8206b78 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5592b8206f28 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5592b8206e30 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-FieldDecl 0x5592b8206ff0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-FieldDecl 0x5592b8207040 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b8207090 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b82022b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::element_landmark_t'
|-CXXRecordDecl 0x5592b82024b8 prev 0x5592b82022b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b82036c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<element_landmark_t>::type':'typed_array_memory<Router::element_landmark_t>'
| `-ElaboratedType 0x5592b8203670 'typename array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5592b8203650 'conditional<false, sized_array_memory<32>, typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5592b8203500 'type'
|     `-SubstTemplateTypeParmType 0x5592b8203390 'typed_array_memory<Router::element_landmark_t>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3da0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5592b7dd3d48 'F'
|       `-RecordType 0x5592b8202ff0 'typed_array_memory<Router::element_landmark_t>'
|         `-ClassTemplateSpecialization 0x5592b8202f10 'typed_array_memory'
|-FieldDecl 0x5592b82070e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::element_landmark_t>::array_memory_type>':'vector_memory<typed_array_memory<Router::element_landmark_t> >' mutable
|-AccessSpecDecl 0x5592b8207130 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b8207168 <line:118:5, col:15> col:15 value_type 'Router::element_landmark_t':'Router::element_landmark_t'
| `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|     `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b82071f8 <line:119:5, col:16> col:16 reference 'Router::element_landmark_t &'
| `-LValueReferenceType 0x5592b82071c0 'Router::element_landmark_t &'
|   `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|       `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8207288 <line:120:5, col:22> col:22 const_reference 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5592b8207250 'const Router::element_landmark_t &'
|   `-QualType 0x5592b8202551 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|         `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8207318 <line:121:5, col:16> col:16 pointer 'Router::element_landmark_t *'
| `-PointerType 0x5592b82072e0 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|       `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b82073a8 <line:122:5, col:22> col:22 const_pointer 'const Router::element_landmark_t *'
| `-PointerType 0x5592b8207370 'const Router::element_landmark_t *'
|   `-QualType 0x5592b8202551 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|         `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8208000 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<element_landmark_t>::type':'const Router::element_landmark_t &'
| `-ElaboratedType 0x5592b8207fb0 'typename fast_argument<element_landmark_t>::type' sugar
|   `-TypedefType 0x5592b8207f90 'fast_argument<Router::element_landmark_t, true>::type' sugar
|     |-Typedef 0x5592b8207ec8 'type'
|     `-LValueReferenceType 0x5592b8207e90 'const Router::element_landmark_t &'
|       `-QualType 0x5592b8207c31 'const Router::element_landmark_t' const
|         `-SubstTemplateTypeParmType 0x5592b8207c30 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x5592b7dddcf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dddc98 'T'
|           `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|             `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8208068 <line:126:5, col:22> col:22 const_access_type 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5592b8207250 'const Router::element_landmark_t &'
|   `-QualType 0x5592b8202551 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|         `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b82080c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8208128 <line:130:5, col:16> col:16 iterator 'Router::element_landmark_t *'
| `-PointerType 0x5592b82072e0 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|       `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-TypedefDecl 0x5592b8208190 <line:131:5, col:22> col:22 const_iterator 'const Router::element_landmark_t *'
| `-PointerType 0x5592b8207370 'const Router::element_landmark_t *'
|   `-QualType 0x5592b8202551 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5592b8202550 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81ff3c0 'Router::element_landmark_t'
|         `-CXXRecord 0x5592b81ff330 'element_landmark_t'
|-EnumDecl 0x5592b82081e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b82082e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::element_landmark_t>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b82082c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b8208368 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b82085f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8208420 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b82084c0 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5592b82088b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5592b82087a0 <col:19, col:36> col:36 x 'const Vector<Router::element_landmark_t> &'
|-CXXConstructorDecl 0x5592b8208b78 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5592b8208a60 <col:19, col:31> col:31 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5592b8208ec0 <line:144:5, col:51> col:23 operator= 'Vector<Router::element_landmark_t> &(const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5592b8208da0 <col:33, col:50> col:50 x 'const Vector<Router::element_landmark_t> &'
|-CXXMethodDecl 0x5592b82091d0 <line:146:5, col:46> col:23 operator= 'Vector<Router::element_landmark_t> &(Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5592b82090b0 <col:33, col:45> col:45 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5592b82094c0 <line:148:5, col:70> col:23 assign 'Vector<Router::element_landmark_t> &(Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8209308 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8209380 <col:43, col:69> col:63 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5592b82095e8 <line:150:5, col:55> col:49 begin 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5592b82096c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209720 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209768 <line:151:5, col:53> col:49 end 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5592b8209818 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209870 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209938 <line:152:5, col:63> col:55 begin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5592b82099e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209a40 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209a88 <line:153:5, col:61> col:55 end 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5592b8209b38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209b90 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209bd8 <line:154:5, col:64> col:55 cbegin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5592b8209c88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209ce0 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209d28 <line:155:5, col:62> col:55 cend 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5592b8209dd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8209e30 <col:30> Inherited
|-CXXMethodDecl 0x5592b8209e58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b8209f08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b8209fb8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b820b678 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b820a068 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b820b5e0 <col:37, col:63> col:57 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5592b820b7c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b820b738 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b820b978 <line:163:5, col:65> col:43 operator[] 'Router::element_landmark_t &(Vector::size_type)'
| |-ParmVarDecl 0x5592b820b880 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b820ba30 <col:20>
| `-OptimizeNoneAttr 0x5592b820ba88 <col:30>
|-CXXMethodDecl 0x5592b820bba8 <line:164:5, col:73> col:49 operator[] 'const Router::element_landmark_t &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b820bab0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b820bc60 <col:20>
| `-OptimizeNoneAttr 0x5592b820bcb8 <col:30>
|-CXXMethodDecl 0x5592b820bd70 <line:165:5, col:29> col:15 at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b820bce0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b820beb8 <line:166:5, col:37> col:21 at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b820be28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b820bfe8 <line:167:5, col:21> col:15 front 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5592b820c118 <line:168:5, col:29> col:21 front 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5592b820c1e8 <line:169:5, col:20> col:15 back 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5592b820c2b8 <line:170:5, col:28> col:21 back 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5592b820c3f8 <line:172:5, col:39> col:15 unchecked_at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b820c368 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b820c540 <line:173:5, col:47> col:21 unchecked_at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b820c4b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b820c688 <line:174:5, col:59> col:15 at_u 'Router::element_landmark_t &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b820c5f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b820c740 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b820c840 <line:175:5, col:71> col:21 at_u 'const Router::element_landmark_t &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b820c7b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b820c8f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b820c9b8 <line:177:5, col:20> col:15 data 'Router::element_landmark_t *()' inline
|-CXXMethodDecl 0x5592b820cab8 <line:178:5, col:28> col:21 data 'const Router::element_landmark_t *() const' inline
|-CXXMethodDecl 0x5592b820cc38 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b820cb78 <col:27, col:47> col:47 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-FunctionTemplateDecl 0x5592b820d3c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b820ccf0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::element_landmark_t>':'fast_argument<Router::element_landmark_t, true>'
| `-CXXMethodDecl 0x5592b820d328 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::element_landmark_t &&)' inline
|   `-ParmVarDecl 0x5592b820d228 <col:58, col:62> col:62 v 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5592b820d4a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b820d5f8 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b820d568 <col:28, col:48> col:48 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5592b820d6b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b820d8f8 <line:189:5, col:62> col:21 insert 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b820d770 <col:28, col:37> col:37 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5592b820d7e8 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5592b820da88 <line:190:5, col:38> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator)' inline
| `-ParmVarDecl 0x5592b820d9c8 <col:27, col:36> col:36 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5592b820dc98 <line:191:5, col:49> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::iterator)' inline
| |-ParmVarDecl 0x5592b820db50 <col:27, col:36> col:36 a 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5592b820dbc8 <col:39, col:48> col:48 b 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5592b820dd58 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b820dfb8 <line:195:5, col:34> col:17 swap 'void (Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5592b820dec0 <col:22, col:33> col:33 x 'Vector<Router::element_landmark_t> &'
`-CXXDestructorDecl 0x5592b820e088 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b820e088

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8173730 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5592b8173908 prev 0x5592b8173730 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b8173998 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b81739c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8175590 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5592b8175540 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5592b8173e70 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5592b8173d70 'type'
|     `-TemplateSpecializationType 0x5592b8173d00 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5592b8173be0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5592b8173bc0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5592b8173ba0 <col:24> 'unsigned long' 16
|       `-RecordType 0x5592b8173ce0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5592b8173c00 'char_array'
|-TypedefDecl 0x5592b8175648 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5592b8175610 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5592b81755f0 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5592b8175590 'type'
|     `-ElaboratedType 0x5592b8175540 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5592b8173e70 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5592b8173d70 'type'
|         `-TemplateSpecializationType 0x5592b8173d00 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5592b8173be0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5592b8173bc0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5592b8173ba0 <col:24> 'unsigned long' 16
|           `-RecordType 0x5592b8173ce0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5592b8173c00 'char_array'
|-CXXMethodDecl 0x5592b81757c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5592b81756d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5592b81758b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b8175998 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b8175998
|-CXXMethodDecl 0x5592b8175c68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5592b8175b70 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5592b8175ea8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5592b8175d20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8175d98 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8176078 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5592b8175f68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8175fe0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b81761d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5592b81762a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5592b81764f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5592b8176368 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5592b81763e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8176758 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5592b81765c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5592b8176640 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8176918 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5592b8176828 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8176ad8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5592b81769e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8176b90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8176c40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8176e78 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5592b8176cf0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b8176d68 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5592b8177118 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5592b8177020 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5592b81771e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5592b8177230 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b8177280 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b820e7a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::Connection'
|-CXXRecordDecl 0x5592b820e9a8 prev 0x5592b820e7a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b820fa70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Connection>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5592b820fa20 'typename array_memory<Connection>::type' sugar
|   `-TypedefType 0x5592b820fa00 'conditional<true, sized_array_memory<16>, typed_array_memory<Router::Connection> >::type' sugar
|     |-Typedef 0x5592b820f8b0 'type'
|     `-SubstTemplateTypeParmType 0x5592b8173300 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b8172e50 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5592b8172d68 'sized_array_memory'
|-FieldDecl 0x5592b820fb70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::Connection>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5592b820fbc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b820fbf8 <line:118:5, col:15> col:15 value_type 'Router::Connection':'Router::Connection'
| `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b81e90f0 'Router::Connection'
|     `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b820fcb8 <line:119:5, col:16> col:16 reference 'Router::Connection &'
| `-LValueReferenceType 0x5592b820fc80 'Router::Connection &'
|   `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81e90f0 'Router::Connection'
|       `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b820fd48 <line:120:5, col:22> col:22 const_reference 'const Router::Connection &'
| `-LValueReferenceType 0x5592b820fd10 'const Router::Connection &'
|   `-QualType 0x5592b820ea41 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81e90f0 'Router::Connection'
|         `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b820fdd8 <line:121:5, col:16> col:16 pointer 'Router::Connection *'
| `-PointerType 0x5592b820fda0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81e90f0 'Router::Connection'
|       `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b820fe68 <line:122:5, col:22> col:22 const_pointer 'const Router::Connection *'
| `-PointerType 0x5592b820fe30 'const Router::Connection *'
|   `-QualType 0x5592b820ea41 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81e90f0 'Router::Connection'
|         `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b8210ac0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Connection>::type':'const Router::Connection &'
| `-ElaboratedType 0x5592b8210a70 'typename fast_argument<Connection>::type' sugar
|   `-TypedefType 0x5592b8210a50 'fast_argument<Router::Connection, true>::type' sugar
|     |-Typedef 0x5592b8210988 'type'
|     `-LValueReferenceType 0x5592b8210950 'const Router::Connection &'
|       `-QualType 0x5592b82106f1 'const Router::Connection' const
|         `-SubstTemplateTypeParmType 0x5592b82106f0 'Router::Connection' sugar
|           |-TemplateTypeParmType 0x5592b7dddcf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dddc98 'T'
|           `-RecordType 0x5592b81e90f0 'Router::Connection'
|             `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b8210b28 <line:126:5, col:22> col:22 const_access_type 'const Router::Connection &'
| `-LValueReferenceType 0x5592b820fd10 'const Router::Connection &'
|   `-QualType 0x5592b820ea41 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81e90f0 'Router::Connection'
|         `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b8210b80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8210be8 <line:130:5, col:16> col:16 iterator 'Router::Connection *'
| `-PointerType 0x5592b820fda0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81e90f0 'Router::Connection'
|       `-CXXRecord 0x5592b81e9060 'Connection'
|-TypedefDecl 0x5592b8210c50 <line:131:5, col:22> col:22 const_iterator 'const Router::Connection *'
| `-PointerType 0x5592b820fe30 'const Router::Connection *'
|   `-QualType 0x5592b820ea41 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5592b820ea40 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81e90f0 'Router::Connection'
|         `-CXXRecord 0x5592b81e9060 'Connection'
|-EnumDecl 0x5592b8210ca8 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b8210da0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::Connection>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b8210d80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b8210e28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b82110b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8210ee0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8210f80 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXConstructorDecl 0x5592b8211378 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5592b8211260 <col:19, col:36> col:36 x 'const Vector<Router::Connection> &'
|-CXXConstructorDecl 0x5592b8211638 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5592b8211520 <col:19, col:31> col:31 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5592b8211980 <line:144:5, col:51> col:23 operator= 'Vector<Router::Connection> &(const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5592b8211860 <col:33, col:50> col:50 x 'const Vector<Router::Connection> &'
|-CXXMethodDecl 0x5592b8211c90 <line:146:5, col:46> col:23 operator= 'Vector<Router::Connection> &(Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5592b8211b70 <col:33, col:45> col:45 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5592b8211f80 <line:148:5, col:70> col:23 assign 'Vector<Router::Connection> &(Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8211dc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8211e40 <col:43, col:69> col:63 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5592b82120d8 <line:150:5, col:55> col:49 begin 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5592b82121b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8212210 <col:30> Inherited
|-CXXMethodDecl 0x5592b8212258 <line:151:5, col:53> col:49 end 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5592b8212308 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8212360 <col:30> Inherited
|-CXXMethodDecl 0x5592b8212428 <line:152:5, col:63> col:55 begin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5592b82124d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8212530 <col:30> Inherited
|-CXXMethodDecl 0x5592b8212578 <line:153:5, col:61> col:55 end 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5592b8212628 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8212680 <col:30> Inherited
|-CXXMethodDecl 0x5592b82126c8 <line:154:5, col:64> col:55 cbegin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5592b8212778 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b82127d0 <col:30> Inherited
|-CXXMethodDecl 0x5592b8212818 <line:155:5, col:62> col:55 cend 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5592b82128c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8212920 <col:30> Inherited
|-CXXMethodDecl 0x5592b8212948 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b82129f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b8212aa8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b8212c68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8212b58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8212bd0 <col:37, col:63> col:57 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5592b8212db8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b8212d28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8212f68 <line:163:5, col:65> col:43 operator[] 'Router::Connection &(Vector::size_type)'
| |-ParmVarDecl 0x5592b8212e70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b8213020 <col:20>
| `-OptimizeNoneAttr 0x5592b8213078 <col:30>
|-CXXMethodDecl 0x5592b8213198 <line:164:5, col:73> col:49 operator[] 'const Router::Connection &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b82130a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b8213250 <col:20>
| `-OptimizeNoneAttr 0x5592b82132a8 <col:30>
|-CXXMethodDecl 0x5592b8213360 <line:165:5, col:29> col:15 at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b82132d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b82134a8 <line:166:5, col:37> col:21 at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b8213418 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8214bf0 <line:167:5, col:21> col:15 front 'Router::Connection &()' inline
|-CXXMethodDecl 0x5592b8214d18 <line:168:5, col:29> col:21 front 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5592b8214de8 <line:169:5, col:20> col:15 back 'Router::Connection &()' inline
|-CXXMethodDecl 0x5592b8214eb8 <line:170:5, col:28> col:21 back 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5592b8214ff8 <line:172:5, col:39> col:15 unchecked_at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b8214f68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8215140 <line:173:5, col:47> col:21 unchecked_at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b82150b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8215288 <line:174:5, col:59> col:15 at_u 'Router::Connection &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b82151f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b8215340 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b8215440 <line:175:5, col:71> col:21 at_u 'const Router::Connection &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b82153b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b82154f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b82155b8 <line:177:5, col:20> col:15 data 'Router::Connection *()' inline
|-CXXMethodDecl 0x5592b82156b8 <line:178:5, col:28> col:21 data 'const Router::Connection *() const' inline
|-CXXMethodDecl 0x5592b8215868 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b8215778 <col:27, col:47> col:47 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-FunctionTemplateDecl 0x5592b8216028 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b8215920 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::Connection>':'fast_argument<Router::Connection, true>'
| `-CXXMethodDecl 0x5592b8215f88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::Connection &&)' inline
|   `-ParmVarDecl 0x5592b8215e88 <col:58, col:62> col:62 v 'Router::Connection &&'
|-CXXMethodDecl 0x5592b8216108 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8216258 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b82161c8 <col:28, col:48> col:48 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5592b8216310 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b8216558 <line:189:5, col:62> col:21 insert 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b82163d0 <col:28, col:37> col:37 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5592b8216448 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5592b8216718 <line:190:5, col:38> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator)' inline
| `-ParmVarDecl 0x5592b8216628 <col:27, col:36> col:36 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5592b8216968 <line:191:5, col:49> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::iterator)' inline
| |-ParmVarDecl 0x5592b82167e0 <col:27, col:36> col:36 a 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5592b8216858 <col:39, col:48> col:48 b 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5592b8216a28 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8216c88 <line:195:5, col:34> col:17 swap 'void (Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5592b8216b90 <col:22, col:33> col:33 x 'Vector<Router::Connection> &'
`-CXXDestructorDecl 0x5592b8216d58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b8216d58

Layout: <CGRecordLayout
  LLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5)
         0 |   HandlerCallback h
         0 |   ReadHandlerCallback r
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5)
         0 |   HandlerCallback h
         0 |   WriteHandlerCallback w
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Handler
         0 |   class String _name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5) _read_hook
        24 |     HandlerCallback h
        24 |     ReadHandlerCallback r
        32 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5) _write_hook
        32 |     HandlerCallback h
        32 |     WriteHandlerCallback w
        40 |   void * _read_user_data
        48 |   void * _write_user_data
        56 |   uint32_t _flags
        60 |   int _use_count
        64 |   int _next_by_name
           | [sizeof=72, dsize=68, align=8,
           |  nvsize=68, nvalign=8]

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8140188 prev 0x5592b7ff02a8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b8140280 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5592b8140310 <col:22, col:28> col:22 public
|-EnumDecl 0x5592b8140338 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5592b8140458 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140438 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5592b8140420 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b8140400 <col:14> 'int' 999
| |-EnumConstantDecl 0x5592b8140500 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b81404e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5592b81404c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b81404a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5592b8140590 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140570 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5592b8140550 <col:17> 'int' 0
| |-EnumConstantDecl 0x5592b8140620 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140600 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5592b81405e0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5592b81406b0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140690 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5592b8140670 <col:16> 'int' 2
| |-EnumConstantDecl 0x5592b8140740 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140720 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5592b8140700 <col:13> 'int' 3
| |-EnumConstantDecl 0x5592b81407d0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b81407b0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5592b8140790 <col:15> 'int' 4
| |-EnumConstantDecl 0x5592b8140860 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b8140840 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5592b8140820 <col:14> 'int' 5
| |-EnumConstantDecl 0x5592b81408f0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5592b81408d0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5592b81408b0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5592b8140980 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5592b8140960 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5592b8140940 <col:13> 'int' 7
|-VarDecl 0x5592b81409f0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5592b8140a78 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5592b8140b00 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5592b8140b88 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5592b8140c10 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5592b8140c98 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5592b8140d20 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5592b8140da8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5592b8140e30 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5592b8140eb8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5592b8140f40 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5592b8141040 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5592b8146348 '_nerrors' 'int'
| | `-IntegerLiteral 0x5592b8146ad8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5592b8146b48 <col:16, line:129:5>
|-CXXDestructorDecl 0x5592b8141130 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5592b8146b58 <col:29, line:132:5>
|-CXXMethodDecl 0x5592b81412e8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5592b8141220 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81413b0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5592b8141498 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5592b8146bb0 <col:44, line:161:5>
|   `-ReturnStmt 0x5592b8146ba0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5592b8146b88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8146b68 <col:9> 'ErrorHandler *' lvalue Var 0x5592b81463a8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81415d8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5592b8141548 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81416a0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5592b8146c10 <col:43, line:173:5>
|   `-ReturnStmt 0x5592b8146c00 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5592b8146be8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8146bc8 <col:9> 'ErrorHandler *' lvalue Var 0x5592b8146420 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5592b8141758 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5592b81417d8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5592b81418e8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5592b8141858 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5592b8141a38 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5592b81419a8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5592b8141b90 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5592b8141af8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5592b8141ce8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5592b8141c50 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5592b8141e40 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5592b8141da8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142050 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5592b8141ef8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5592b8141f78 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142228 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5592b8142110 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5592b8142190 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142448 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5592b81422e8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5592b8142368 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142628 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5592b8142508 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5592b8142588 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142808 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5592b81426e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5592b8142768 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5592b8142990 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5592b81428c8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5592b8142b60 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5592b8142a48 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5592b8142ac0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5592b8146e68 <col:57, line:234:5>
|   `-ReturnStmt 0x5592b8146e58 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5592b8146e40 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5592b8146de8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5592b8146db8 <col:9> '<bound member function type>' ->xmessage 0x5592b8142990
|         | `-CXXThisExpr 0x5592b8146da8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5592b8146e28 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5592b8146e10 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5592b8146d88 <col:18, col:40> 'String' (CXXTemporary 0x5592b8146d88)
|               `-CallExpr 0x5592b8146d50 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5592b8146d38 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5592b8146cb0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5592b8144b58 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5592b8146cd0 <col:31> 'const String' lvalue ParmVar 0x5592b8142ac0 'str' 'const String &'
|                 `-DeclRefExpr 0x5592b8146cf0 <col:36> 'const String' lvalue ParmVar 0x5592b8142a48 'anno' 'const String &'
|-CXXMethodDecl 0x5592b8142e40 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5592b8142c20 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5592b8142ca0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5592b8142d18 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5592b81470f8 <col:68, line:243:5>
|   `-ReturnStmt 0x5592b81470e8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5592b81470d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5592b8147070 <col:9, col:41> 'int'
|         |-MemberExpr 0x5592b8147040 <col:9> '<bound member function type>' ->xmessage 0x5592b8142b60
|         | `-CXXThisExpr 0x5592b8147030 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5592b8146f08 <col:18> 'const String' lvalue ParmVar 0x5592b8142c20 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5592b81470b8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5592b81470a0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5592b8147010 <col:24, col:40> 'String' (CXXTemporary 0x5592b8147010)
|               `-CXXMemberCallExpr 0x5592b8146fa8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5592b8146f38 <col:24> '<bound member function type>' ->vformat 0x5592b8144020
|                 | `-CXXThisExpr 0x5592b8146f28 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5592b8146fd8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5592b8146f68 <col:32> 'const char *' lvalue ParmVar 0x5592b8142ca0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5592b8146ff0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5592b8146f88 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5592b8142d18 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5592b81430e0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5592b8142f08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5592b8142f80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5592b8142ff8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5592b8147438 <col:23, line:254:5>
|   `-ReturnStmt 0x5592b8147428 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5592b8147410 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5592b81473b0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5592b8147380 <col:9> '<bound member function type>' ->xmessage 0x5592b8142b60
|         | `-CXXThisExpr 0x5592b8147370 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5592b81473f8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5592b81473e0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5592b8147330 <col:18, col:65> 'String' (CXXTemporary 0x5592b8147330)
|         |     `-CallExpr 0x5592b81472c8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5592b81472b0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5592b8147198 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5592b8144b58 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5592b81471b8 <col:31> 'const String' lvalue ParmVar 0x5592b8142f80 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5592b8147310 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5592b81472f8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5592b8147290 <col:37, col:64> 'String' (CXXTemporary 0x5592b8147290)
|         |             `-CallExpr 0x5592b8147260 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5592b8147248 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5592b81471d8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5592b81451a8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5592b81471f8 <col:56> 'const String' lvalue ParmVar 0x5592b8142f08 'landmark' 'const String &'
|         `-DeclRefExpr 0x5592b8147350 <col:68> 'const String' lvalue ParmVar 0x5592b8142ff8 'str' 'const String &'
|-CXXMethodDecl 0x5592b8143460 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5592b81431a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5592b8143220 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5592b81432a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5592b8143318 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5592b81476f0 <col:34, line:267:5>
|   `-ReturnStmt 0x5592b81476e0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5592b81476c8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5592b8147660 <col:9, col:51> 'int'
|         |-MemberExpr 0x5592b8147630 <col:9> '<bound member function type>' ->xmessage 0x5592b81430e0
|         | `-CXXThisExpr 0x5592b8147620 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5592b81474d8 <col:18> 'const String' lvalue ParmVar 0x5592b81431a8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5592b81474f8 <col:28> 'const String' lvalue ParmVar 0x5592b8143220 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5592b81476b0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5592b8147698 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5592b8147600 <col:34, col:50> 'String' (CXXTemporary 0x5592b8147600)
|               `-CXXMemberCallExpr 0x5592b8147598 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5592b8147528 <col:34> '<bound member function type>' ->vformat 0x5592b8144020
|                 | `-CXXThisExpr 0x5592b8147518 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5592b81475c8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5592b8147558 <col:42> 'const char *' lvalue ParmVar 0x5592b81432a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5592b81475e0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5592b8147578 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5592b8143318 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5592b8143570 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5592b8147770 <col:25, line:288:5>
|   `-ReturnStmt 0x5592b8147760 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5592b8147748 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5592b8147718 <col:9> 'const int' lvalue ->_nerrors 0x5592b8146348
|         `-CXXThisExpr 0x5592b8147708 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5592b8143780 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5592b8143628 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5592b81436a8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5592b8143a68 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5592b8143848 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5592b81438c8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5592b8143940 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5592b8143c00 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5592b8143b38 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5592b8143e48 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5592b8143cc0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5592b8143d38 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5592b81479d0 <col:58, line:357:5>
|   `-ReturnStmt 0x5592b81479c0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5592b81479a8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5592b8147978 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5592b8147960 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5592b8147940 <col:9, col:29> 'String' (CXXTemporary 0x5592b8147940)
|             `-CallExpr 0x5592b81478d0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5592b81478b8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5592b8147838 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5592b8143a68 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5592b81477d8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5592b8147908 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5592b81477f8 <col:21> 'const char *' lvalue ParmVar 0x5592b8143cc0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5592b8147920 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b8147818 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5592b8143d38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5592b8144020 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5592b8143f10 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5592b8143f88 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5592b8144178 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5592b81440e8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5592b81442c0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5592b8144230 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5592b8144560 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5592b8144378 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5592b81443f8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5592b8144470 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5592b81446c0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5592b8144630 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5592b8147ae8 <col:37, line:441:5>
|   `-IfStmt 0x5592b8147ad0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5592b8147a58 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5592b8147a28 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5592b81479e8 <col:6> 'int' lvalue ParmVar 0x5592b8144630 'level' 'int'
|     | `-ImplicitCastExpr 0x5592b8147a40 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5592b8147a08 <col:15> 'ErrorHandler::Level' EnumConstant 0x5592b8140740 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5592b8147ab8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5592b8147a88 <col:8> 'int' lvalue ->_nerrors 0x5592b8146348
|         `-CXXThisExpr 0x5592b8147a78 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5592b8144788 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5592b8147b80 <col:26, line:448:5>
|   `-BinaryOperator 0x5592b8147b60 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5592b8147b10 <col:2> 'int' lvalue ->_nerrors 0x5592b8146348
|     | `-CXXThisExpr 0x5592b8147b00 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5592b8147b40 <col:13> 'int' 0
|-CXXMethodDecl 0x5592b8144950 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5592b8144840 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5592b81448b8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5592b8144b58 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5592b8144a10 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5592b8144a88 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5592b8144e08 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5592b8144c18 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5592b8144c98 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5592b8144d18 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5592b8144ec0 <col:59> 0 0
|-CXXMethodDecl 0x5592b8145058 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5592b8144f38 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5592b8144fb8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5592b81481f0 <col:70, line:534:5>
|   |-DeclStmt 0x5592b8147cf0 <line:528:2, col:20>
|   | |-VarDecl 0x5592b8147ba8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5592b8147c10 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5592b8147c48 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5592b8147cb0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5592b8147dc0 <line:529:2, col:23>
|   | `-VarDecl 0x5592b8147d20 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5592b8147da8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5592b8147d88 <col:18> 'const char *' lvalue ParmVar 0x5592b8144f38 'begin' 'const char *'
|   |-DoStmt 0x5592b8148188 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5592b81480b8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5592b81480a0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5592b8148080 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5592b8147dd8 <col:6> 'const char *' lvalue Var 0x5592b8147d20 'x' 'const char *'
|   | |     `-CallExpr 0x5592b8147fd0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5592b8147fb8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5592b8147f70 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5592b8146820 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5592b8148038 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5592b8148020 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5592b8147e90 <col:20, col:27> 'String' (CXXTemporary 0x5592b8147e90)
|   | |       |     `-CXXTemporaryObjectExpr 0x5592b8147e58 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5592b8148050 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5592b8147eb0 <col:30> 'const char *' lvalue Var 0x5592b8147d20 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5592b8148068 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5592b8147ed0 <col:33> 'const char *' lvalue ParmVar 0x5592b8144fb8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5592b8147f10 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5592b8147ef0 <col:39> 'String' lvalue Var 0x5592b8147ba8 'name' 'String'
|   | |       |-UnaryOperator 0x5592b8147f48 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5592b8147f28 <col:46> 'String' lvalue Var 0x5592b8147c48 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5592b8147f60 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5592b8148170 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5592b8148158 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5592b8148138 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5592b8148108 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|   |         `-ImplicitCastExpr 0x5592b81480f0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5592b81480d0 <col:11> 'String' lvalue Var 0x5592b8147ba8 'name' 'String'
|   `-ReturnStmt 0x5592b81481e0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5592b81481c8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b81481a8 <col:9> 'const char *' lvalue Var 0x5592b8147d20 'x' 'const char *'
|-CXXMethodDecl 0x5592b81451a8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5592b8145118 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5592b81487f8 <col:55, line:550:5>
|   `-IfStmt 0x5592b81487d0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5592b8148430 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5592b8148418 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5592b8148400 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5592b81483e0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5592b81483b0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|     | |       `-DeclRefExpr 0x5592b8148250 <col:6> 'const String' lvalue ParmVar 0x5592b8145118 'x' 'const String &'
|     | `-BinaryOperator 0x5592b8148390 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5592b8148360 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5592b8148310 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5592b81482f8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5592b81482b0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5592b7e56770 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5592b8148270 <col:11> 'const String' lvalue ParmVar 0x5592b8145118 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5592b8148290 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5592b8148378 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5592b8148348 <col:19> 'char' 123
|     |-ReturnStmt 0x5592b81484a0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5592b8148470 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5592b8148450 <col:13> 'const String' lvalue ParmVar 0x5592b8145118 'x' 'const String &'
|     `-IfStmt 0x5592b81487a8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5592b8148538 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5592b8148520 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5592b8148500 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5592b81484d0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |       `-DeclRefExpr 0x5592b81484b0 <col:11> 'const String' lvalue ParmVar 0x5592b8145118 'x' 'const String &'
|       |-ReturnStmt 0x5592b81486c0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5592b81486a8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5592b8148678 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5592b8148660 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5592b8148640 <col:13, col:29> 'String' (CXXTemporary 0x5592b8148640)
|       |         `-CallExpr 0x5592b81485f0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5592b81485d8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5592b8148550 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5592b8144950 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5592b8148620 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5592b8148570 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5592b8148590 <col:28> 'const String' lvalue ParmVar 0x5592b8145118 'x' 'const String &'
|       `-ReturnStmt 0x5592b8148798 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5592b8148780 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5592b8148750 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5592b8148738 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5592b8148718 <col:13, col:20> 'String' (CXXTemporary 0x5592b8148718)
|                 `-CXXTemporaryObjectExpr 0x5592b81486e0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5592b8145390 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5592b8145280 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5592b81452f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b8146ac8 <col:71> 'bool' false
|-CXXRecordDecl 0x5592b8145440 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5592b8145738 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5592b81456d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5592b8145670 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5592b8145630 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5592b7e397d0 'String'
|       | `-CXXRecord 0x5592b7e39740 'String'
|       |-BuiltinType 0x5592b7b0a580 'int'
|       `-DecayedType 0x5592b7ff12f0 '__va_list_tag *' sugar
|         |-TypedefType 0x5592b7ff12c0 'va_list' sugar
|         | |-Typedef 0x5592b7d2b890 'va_list'
|         | `-TypedefType 0x5592b7d2b840 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5592b7c63488 '__gnuc_va_list'
|         |   `-TypedefType 0x5592b7c633f0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5592b7b4bd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5592b7b4bce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5592b7b0b2d0 '__va_list_tag'
|         |         `-CXXRecord 0x5592b7b0b238 '__va_list_tag'
|         `-PointerType 0x5592b7d31130 '__va_list_tag *'
|           `-RecordType 0x5592b7b0b2d0 '__va_list_tag'
|             `-CXXRecord 0x5592b7b0b238 '__va_list_tag'
|-EnumDecl 0x5592b8145790 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5592b8145890 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145df0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145870 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b8145850 <col:16> 'int' 1
| |-EnumConstantDecl 0x5592b8145920 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e08 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145900 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5592b81458e0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5592b81459b0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145990 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5592b8145970 <col:22> 'int' 4
| |-EnumConstantDecl 0x5592b8145a40 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e38 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145a20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5592b8145a00 <col:17> 'int' 8
| |-EnumConstantDecl 0x5592b8145ad0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145ab0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5592b8145a90 <col:22> 'int' 16
| |-EnumConstantDecl 0x5592b8145b60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145b40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5592b8145b20 <col:19> 'int' 32
| |-EnumConstantDecl 0x5592b8145bf0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e80 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145bd0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5592b8145bb0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5592b8145c80 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145e98 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145c60 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5592b8145c40 <col:14> 'int' 128
| |-EnumConstantDecl 0x5592b8145d10 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5592b8145eb0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8145cf0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5592b8145cd0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5592b8145da0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5592b8145ec8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8145d80 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5592b8145d60 <col:12> 'int' 1024
|-CXXMethodDecl 0x5592b81460d8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5592b8145ef0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5592b8145f90 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5592b8146260 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5592b8146198 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5592b8146308 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5592b8146348 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5592b81463a8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5592b8146420 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5592b8146820 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5592b8146498 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5592b8146518 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5592b8146598 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5592b8146610 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5592b8146688 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5592b8146700 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5592b8146948 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5592b8146948
| `-ParmVarDecl 0x5592b8146a58 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5592b8148b58 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5592b8148b58
  `-ParmVarDecl 0x5592b8148c68 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b806a8a0 <../dummy_inc/click/handler.hh:290:5, line:293:5> line:290:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5592b806a9f0 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5592b806aa70 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
|-CXXConstructorDecl 0x5592b806b868 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5592b806b868
| `-ParmVarDecl 0x5592b806b978 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXConstructorDecl 0x5592b806ba18 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806ba18
| `-ParmVarDecl 0x5592b806bb28 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-CXXDestructorDecl 0x5592b806bb98 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b806bb98
|-CXXMethodDecl 0x5592b806c468 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5592b806c468
| `-ParmVarDecl 0x5592b806c578 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXMethodDecl 0x5592b806c5e8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806c5e8
| `-ParmVarDecl 0x5592b806c6f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
`-CXXConstructorDecl 0x5592b8231e30 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5592b8231f10 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b806aba0 <../dummy_inc/click/handler.hh:294:5, line:297:5> line:294:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5592b806acc8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5592b806ad50 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
|-CXXConstructorDecl 0x5592b806bcc8 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5592b806bcc8
| `-ParmVarDecl 0x5592b806bdd8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXConstructorDecl 0x5592b806be78 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806be78
| `-ParmVarDecl 0x5592b806bf88 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-CXXDestructorDecl 0x5592b806bff8 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b806bff8
|-CXXMethodDecl 0x5592b806c798 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5592b806c798
| `-ParmVarDecl 0x5592b806c8a8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXMethodDecl 0x5592b806c918 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806c918
| `-ParmVarDecl 0x5592b806ca28 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
`-CXXConstructorDecl 0x5592b8231f70 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5592b8232050 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon.11 = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8066228 prev 0x5592b80656c0 <../dummy_inc/click/handler.hh:19:1, line:313:1> line:19:7 class Handler definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5592b8066320 <col:1, col:7> col:7 implicit referenced class Handler
|-AccessSpecDecl 0x5592b80663b0 <col:17, col:23> col:17 public
|-EnumDecl 0x5592b80663d8 <line:21:5, line:59:5> line:21:10 Flags
| |-EnumConstantDecl 0x5592b80664e0 <line:22:2, col:11> col:2 referenced f_read 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067230 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80664c0 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b80664a0 <col:11> 'int' 1
| |-EnumConstantDecl 0x5592b8066570 <line:23:2, col:12> col:2 referenced f_write 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067248 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066550 <col:12> 'int' Int: 2
| |     `-IntegerLiteral 0x5592b8066530 <col:12> 'int' 2
| |-EnumConstantDecl 0x5592b8066600 <line:24:2, col:17> col:2 referenced f_read_param 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067260 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80665e0 <col:17> 'int' Int: 4
| |     `-IntegerLiteral 0x5592b80665c0 <col:17> 'int' 4
| |-EnumConstantDecl 0x5592b8066690 <line:25:2, col:16> col:2 referenced f_exclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067278 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066670 <col:16> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b8066650 <col:16> 'int' 0
| |-EnumConstantDecl 0x5592b8066720 <line:28:2, col:19> col:2 referenced f_nonexclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067290 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066700 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5592b80666e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5592b80667b0 <line:31:2, col:10> col:2 referenced f_raw 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b80672a8 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066790 <col:10> 'int' Int: 64
| |     `-IntegerLiteral 0x5592b8066770 <col:10> 'int' 64
| |-EnumConstantDecl 0x5592b8066840 <line:32:2, col:19> col:2 referenced f_read_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b80672c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066820 <col:19> 'int' Int: 128
| |     `-IntegerLiteral 0x5592b8066800 <col:19> 'int' 128
| |-EnumConstantDecl 0x5592b80668d0 <line:34:2, col:20> col:2 referenced f_write_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b80672d8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80668b0 <col:20> 'int' Int: 256
| |     `-IntegerLiteral 0x5592b8066890 <col:20> 'int' 256
| |-EnumConstantDecl 0x5592b8066960 <line:36:2, col:17> col:2 referenced f_deprecated 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b80672f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066940 <col:17> 'int' Int: 512
| |     `-IntegerLiteral 0x5592b8066920 <col:17> 'int' 512
| |-EnumConstantDecl 0x5592b80669f0 <line:38:2, col:15> col:2 referenced f_uncommon 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067308 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80669d0 <col:15> 'int' Int: 1024
| |     `-IntegerLiteral 0x5592b80669b0 <col:15> 'int' 1024
| |-EnumConstantDecl 0x5592b8066a80 <line:40:2, col:11> col:2 referenced f_calm 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067320 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066a60 <col:11> 'int' Int: 2048
| |     `-IntegerLiteral 0x5592b8066a40 <col:11> 'int' 2048
| |-EnumConstantDecl 0x5592b8066b10 <line:41:2, col:16> col:2 referenced f_expensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067338 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066af0 <col:16> 'int' Int: 4096
| |     `-IntegerLiteral 0x5592b8066ad0 <col:16> 'int' 4096
| |-EnumConstantDecl 0x5592b8066ba0 <line:42:2, col:13> col:2 referenced f_button 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067350 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066b80 <col:13> 'int' Int: 8192
| |     `-IntegerLiteral 0x5592b8066b60 <col:13> 'int' 8192
| |-EnumConstantDecl 0x5592b8066c30 <line:43:2, col:15> col:2 referenced f_checkbox 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067368 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066c10 <col:15> 'int' Int: 16384
| |     `-IntegerLiteral 0x5592b8066bf0 <col:15> 'int' 16384
| |-EnumConstantDecl 0x5592b8066d00 <line:45:2, col:20> col:2 referenced f_driver0 'Handler::Flags'
| | `-ConstantExpr 0x5592b8066ce0 <col:14, col:20> 'unsigned int' Int: 67108864
| |   `-BinaryOperator 0x5592b8066cc0 <col:14, col:20> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5592b8066c80 <col:14> 'unsigned int' 1
| |     `-IntegerLiteral 0x5592b8066ca0 <col:20> 'int' 26
| |-EnumConstantDecl 0x5592b8066dd0 <line:46:9, col:27> col:9 referenced f_driver1 'Handler::Flags'
| | `-ConstantExpr 0x5592b8066db0 <col:21, col:27> 'unsigned int' Int: 134217728
| |   `-BinaryOperator 0x5592b8066d90 <col:21, col:27> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5592b8066d50 <col:21> 'unsigned int' 1
| |     `-IntegerLiteral 0x5592b8066d70 <col:27> 'int' 27
| |-EnumConstantDecl 0x5592b8066e60 <line:48:2, col:17> col:2 referenced f_user_shift 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067380 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066e40 <col:17> 'int' Int: 28
| |     `-IntegerLiteral 0x5592b8066e20 <col:17> 'int' 28
| |-EnumConstantDecl 0x5592b8066f30 <line:49:2, col:18> col:2 referenced f_user0 'Handler::Flags'
| | `-ConstantExpr 0x5592b8066f10 <col:12, col:18> 'unsigned int' Int: 268435456
| |   `-BinaryOperator 0x5592b8066ef0 <col:12, col:18> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5592b8066eb0 <col:12> 'unsigned int' 1
| |     `-DeclRefExpr 0x5592b8066ed0 <col:18> 'int' EnumConstant 0x5592b8066e60 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8066fc0 <line:54:2, col:25> col:2 referenced f_read_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b8067398 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8066fa0 <col:25> 'int' Int: 8
| |     `-IntegerLiteral 0x5592b8066f80 <col:25> 'int' 8
| |-EnumConstantDecl 0x5592b8067050 <line:55:2, col:26> col:2 referenced f_write_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5592b80673b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8067030 <col:26> 'int' Int: 16
| |     `-IntegerLiteral 0x5592b8067010 <col:26> 'int' 16
| `-EnumConstantDecl 0x5592b80671e0 <line:56:2, col:71> col:2 referenced f_special 'Handler::Flags'
|   `-ImplicitCastExpr 0x5592b80673c8 <col:14, col:71> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b80671c0 <col:14, col:71> 'int' Int: 31
|       `-BinaryOperator 0x5592b80671a0 <col:14, col:71> 'int' '|'
|         |-BinaryOperator 0x5592b8067160 <col:14, col:48> 'int' '|'
|         | |-BinaryOperator 0x5592b8067120 <col:14, col:33> 'int' '|'
|         | | |-BinaryOperator 0x5592b80670e0 <col:14, col:23> 'int' '|'
|         | | | |-DeclRefExpr 0x5592b80670a0 <col:14> 'int' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|         | | | `-DeclRefExpr 0x5592b80670c0 <col:23> 'int' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
|         | | `-DeclRefExpr 0x5592b8067100 <col:33> 'int' EnumConstant 0x5592b8066600 'f_read_param' 'Handler::Flags'
|         | `-DeclRefExpr 0x5592b8067140 <col:48> 'int' EnumConstant 0x5592b8066fc0 'f_read_comprehensive' 'Handler::Flags'
|         `-DeclRefExpr 0x5592b8067180 <col:71> 'int' EnumConstant 0x5592b8067050 'f_write_comprehensive' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067428 <line:62:5, line:64:5> line:62:26 name 'const String &() const' inline
| `-CompoundStmt 0x5592b806ce48 <col:39, line:64:5>
|   `-ReturnStmt 0x5592b806ce38 <line:63:2, col:9>
|     `-MemberExpr 0x5592b806ce08 <col:9> 'const String' lvalue ->_name 0x5592b806a850
|       `-CXXThisExpr 0x5592b806cdf8 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b80674e8 <line:69:5, line:71:5> line:69:21 flags 'uint32_t () const' inline
| `-CompoundStmt 0x5592b806cec8 <col:35, line:71:5>
|   `-ReturnStmt 0x5592b806ceb8 <line:70:2, col:9>
|     `-ImplicitCastExpr 0x5592b806cea0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5592b806ce70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|         `-CXXThisExpr 0x5592b806ce60 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b8067638 <line:75:5, line:77:5> line:75:18 user_data 'void *(int) const' inline
| |-ParmVarDecl 0x5592b80675a0 <col:28, col:32> col:32 used op 'int'
| `-CompoundStmt 0x5592b806d048 <col:42, line:77:5>
|   `-ReturnStmt 0x5592b806d038 <line:76:2, col:44>
|     `-ImplicitCastExpr 0x5592b806d020 <col:9, col:44> 'void *' <LValueToRValue>
|       `-ConditionalOperator 0x5592b806cff0 <col:9, col:44> 'void *const' lvalue
|         |-BinaryOperator 0x5592b806cf50 <col:9, col:15> 'bool' '=='
|         | |-ImplicitCastExpr 0x5592b806cf20 <col:9> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5592b806cee0 <col:9> 'int' lvalue ParmVar 0x5592b80675a0 'op' 'int'
|         | `-ImplicitCastExpr 0x5592b806cf38 <col:15> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5592b806cf00 <col:15> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
|         |-MemberExpr 0x5592b806cf80 <col:25> 'void *const' lvalue ->_write_user_data 0x5592b806af00
|         | `-CXXThisExpr 0x5592b806cf70 <col:25> 'const Handler *' implicit this
|         `-MemberExpr 0x5592b806cfc0 <col:44> 'void *const' lvalue ->_read_user_data 0x5592b806ae98
|           `-CXXThisExpr 0x5592b806cfb0 <col:44> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b8067708 <line:80:5, line:82:5> line:80:18 read_user_data 'void *() const' inline
| `-CompoundStmt 0x5592b806d0c8 <col:41, line:82:5>
|   `-ReturnStmt 0x5592b806d0b8 <line:81:2, col:9>
|     `-ImplicitCastExpr 0x5592b806d0a0 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5592b806d070 <col:9> 'void *const' lvalue ->_read_user_data 0x5592b806ae98
|         `-CXXThisExpr 0x5592b806d060 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b80677d0 <line:85:5, line:87:5> line:85:18 write_user_data 'void *() const' inline
| `-CompoundStmt 0x5592b806d148 <col:42, line:87:5>
|   `-ReturnStmt 0x5592b806d138 <line:86:2, col:9>
|     `-ImplicitCastExpr 0x5592b806d120 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5592b806d0f0 <col:9> 'void *const' lvalue ->_write_user_data 0x5592b806af00
|         `-CXXThisExpr 0x5592b806d0e0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b8067898 <line:90:5, col:63> col:18 user_data1 'void *() const' inline
| `-DeprecatedAttr 0x5592b8067938 <col:52> "" ""
|-CXXMethodDecl 0x5592b80679d0 <line:91:5, col:63> col:18 user_data2 'void *() const' inline
| `-DeprecatedAttr 0x5592b8067a70 <col:52> "" ""
|-CXXMethodDecl 0x5592b8067b00 <line:96:5, line:98:5> line:96:17 readable 'bool () const' inline
| `-CompoundStmt 0x5592b806d238 <col:34, line:98:5>
|   `-ReturnStmt 0x5592b806d228 <line:97:2, col:18>
|     `-ImplicitCastExpr 0x5592b806d210 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5592b806d1f0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5592b806d1c0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5592b806d170 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|         |   `-CXXThisExpr 0x5592b806d160 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5592b806d1d8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5592b806d1a0 <col:18> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067bc0 <line:102:5, line:104:5> line:102:17 read_param 'bool () const' inline
| `-CompoundStmt 0x5592b806d328 <col:36, line:104:5>
|   `-ReturnStmt 0x5592b806d318 <line:103:2, col:18>
|     `-ImplicitCastExpr 0x5592b806d300 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5592b806d2e0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5592b806d2b0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5592b806d260 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|         |   `-CXXThisExpr 0x5592b806d250 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5592b806d2c8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5592b806d290 <col:18> 'Handler::Flags' EnumConstant 0x5592b8066600 'f_read_param' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067c80 <line:111:5, line:113:5> line:111:17 used read_visible 'bool () const' inline
| `-CompoundStmt 0x5592b806d508 <col:38, line:113:5>
|   `-ReturnStmt 0x5592b806d4f8 <line:112:2, col:49>
|     `-BinaryOperator 0x5592b806d4d8 <col:9, col:49> 'bool' '=='
|       |-ParenExpr 0x5592b806d480 <col:9, col:44> 'unsigned int'
|       | `-BinaryOperator 0x5592b806d460 <col:10, col:43> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5592b806d430 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5592b806d350 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|       |   |   `-CXXThisExpr 0x5592b806d340 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5592b806d448 <col:19, col:43> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5592b806d410 <col:19, col:43> 'int'
|       |       `-BinaryOperator 0x5592b806d3f0 <col:20, col:29> 'int' '|'
|       |         |-ImplicitCastExpr 0x5592b806d3c0 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5592b806d380 <col:20> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5592b806d3d8 <col:29> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5592b806d3a0 <col:29> 'Handler::Flags' EnumConstant 0x5592b8066840 'f_read_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5592b806d4c0 <col:49> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5592b806d4a0 <col:49> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067d40 <line:116:5, line:118:5> line:116:17 writable 'bool () const' inline
| `-CompoundStmt 0x5592b806d5f8 <col:34, line:118:5>
|   `-ReturnStmt 0x5592b806d5e8 <line:117:2, col:18>
|     `-ImplicitCastExpr 0x5592b806d5d0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5592b806d5b0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5592b806d580 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5592b806d530 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|         |   `-CXXThisExpr 0x5592b806d520 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5592b806d598 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5592b806d560 <col:18> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067e00 <line:125:5, line:127:5> line:125:17 used write_visible 'bool () const' inline
| `-CompoundStmt 0x5592b806d7d8 <col:39, line:127:5>
|   `-ReturnStmt 0x5592b806d7c8 <line:126:2, col:51>
|     `-BinaryOperator 0x5592b806d7a8 <col:9, col:51> 'bool' '=='
|       |-ParenExpr 0x5592b806d750 <col:9, col:46> 'unsigned int'
|       | `-BinaryOperator 0x5592b806d730 <col:10, col:45> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5592b806d700 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5592b806d620 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|       |   |   `-CXXThisExpr 0x5592b806d610 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5592b806d718 <col:19, col:45> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5592b806d6e0 <col:19, col:45> 'int'
|       |       `-BinaryOperator 0x5592b806d6c0 <col:20, col:30> 'int' '|'
|       |         |-ImplicitCastExpr 0x5592b806d690 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5592b806d650 <col:20> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5592b806d6a8 <col:30> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5592b806d670 <col:30> 'Handler::Flags' EnumConstant 0x5592b80668d0 'f_write_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5592b806d790 <col:51> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5592b806d770 <col:51> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8067ec0 <line:130:5, line:132:5> line:130:17 visible 'bool () const' inline
| `-CompoundStmt 0x5592b806d8e0 <col:33, line:132:5>
|   `-ReturnStmt 0x5592b806d8d0 <line:131:2, col:41>
|     `-BinaryOperator 0x5592b806d8b0 <col:9, col:41> 'bool' '||'
|       |-CXXMemberCallExpr 0x5592b806d830 <col:9, col:22> 'bool'
|       | `-MemberExpr 0x5592b806d800 <col:9> '<bound member function type>' ->read_visible 0x5592b8067c80
|       |   `-CXXThisExpr 0x5592b806d7f0 <col:9> 'const Handler *' implicit this
|       `-CXXMemberCallExpr 0x5592b806d890 <col:27, col:41> 'bool'
|         `-MemberExpr 0x5592b806d860 <col:27> '<bound member function type>' ->write_visible 0x5592b8067e00
|           `-CXXThisExpr 0x5592b806d850 <col:27> 'const Handler *' implicit this
|-CXXMethodDecl 0x5592b8067f80 <line:136:5, line:138:5> line:136:17 allow_concurrent_handlers 'bool () const' inline
| `-CompoundStmt 0x5592b806da18 <col:51, line:138:5>
|   `-ReturnStmt 0x5592b806da08 <line:137:9, col:40>
|     `-ImplicitCastExpr 0x5592b806d9f0 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5592b806d9d0 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5592b806d988 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5592b806d958 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5592b806d908 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|           |   `-CXXThisExpr 0x5592b806d8f8 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5592b806d970 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5592b806d938 <col:26> 'Handler::Flags' EnumConstant 0x5592b8066720 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8068040 <line:142:5, line:144:5> line:142:17 allow_concurrent_threads 'bool () const' inline
| `-CompoundStmt 0x5592b806db28 <col:50, line:144:5>
|   `-ReturnStmt 0x5592b806db18 <line:143:9, col:40>
|     `-ImplicitCastExpr 0x5592b806db00 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5592b806dae0 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5592b806dac0 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5592b806da90 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5592b806da40 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|           |   `-CXXThisExpr 0x5592b806da30 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5592b806daa8 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5592b806da70 <col:26> 'Handler::Flags' EnumConstant 0x5592b8066720 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8068100 <line:164:5, line:166:5> line:164:17 raw 'bool () const' inline
| `-CompoundStmt 0x5592b806dc18 <col:29, line:166:5>
|   `-ReturnStmt 0x5592b806dc08 <line:165:2, col:18>
|     `-ImplicitCastExpr 0x5592b806dbf0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5592b806dbd0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5592b806dba0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5592b806db50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|         |   `-CXXThisExpr 0x5592b806db40 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5592b806dbb8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5592b806db80 <col:18> 'Handler::Flags' EnumConstant 0x5592b80667b0 'f_raw' 'Handler::Flags'
|-CXXMethodDecl 0x5592b8068388 <line:177:5, col:75> col:12 used call_read 'String (Element *, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b80681b0 <col:22, col:31> col:31 e 'Element *'
| |-ParmVarDecl 0x5592b8068228 <col:34, col:48> col:48 param 'const String &'
| `-ParmVarDecl 0x5592b80682a0 <col:55, col:69> col:69 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8068598 <line:186:5, line:188:5> line:186:19 call_read 'String (Element *, ErrorHandler *) const' inline
| |-ParmVarDecl 0x5592b8068450 <col:29, col:38> col:38 used e 'Element *'
| |-ParmVarDecl 0x5592b80684c8 <col:41, col:62> col:55 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5592b806cd30 <col:62> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b806cd10 <col:62> 'int' 0
| `-CompoundStmt 0x5592b806deb8 <col:71, line:188:5>
|   `-ReturnStmt 0x5592b806dea8 <line:187:2, col:36>
|     `-ExprWithCleanups 0x5592b806de90 <col:9, col:36> 'String'
|       `-CXXConstructExpr 0x5592b806de60 <col:9, col:36> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5592b806de48 <col:9, col:36> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5592b806de28 <col:9, col:36> 'String' (CXXTemporary 0x5592b806de28)
|             `-CXXMemberCallExpr 0x5592b806dd88 <col:9, col:36> 'String'
|               |-MemberExpr 0x5592b806dd58 <col:9> '<bound member function type>' ->call_read 0x5592b8068388
|               | `-CXXThisExpr 0x5592b806dd48 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5592b806ddc0 <col:19> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5592b806dca0 <col:19> 'Element *' lvalue ParmVar 0x5592b8068450 'e' 'Element *'
|               |-MaterializeTemporaryExpr 0x5592b806ddf0 <col:22, col:29> 'const String' lvalue
|               | `-ImplicitCastExpr 0x5592b806ddd8 <col:22, col:29> 'const String' <NoOp>
|               |   `-CXXBindTemporaryExpr 0x5592b806dd08 <col:22, col:29> 'String' (CXXTemporary 0x5592b806dd08)
|               |     `-CXXTemporaryObjectExpr 0x5592b806dcd0 <col:22, col:29> 'String' 'void ()'
|               `-ImplicitCastExpr 0x5592b806de08 <col:32> 'ErrorHandler *' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b806dd28 <col:32> 'ErrorHandler *' lvalue ParmVar 0x5592b80684c8 'errh' 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8068830 <line:198:5, col:73> col:9 call_write 'int (const String &, Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b8068658 <col:20, col:34> col:34 value 'const String &'
| |-ParmVarDecl 0x5592b80686d0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5592b8068748 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b80689b8 <line:207:5, col:37> col:12 unparse_name 'String (Element *) const'
| `-ParmVarDecl 0x5592b80688f8 <col:25, col:34> col:34 e 'Element *'
|-CXXMethodDecl 0x5592b8068be8 <line:216:5, col:63> col:19 unparse_name 'String (Element *, const String &)' static
| |-ParmVarDecl 0x5592b8068a70 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x5592b8068ae8 <col:44, col:58> col:58 hname 'const String &'
|-CXXMethodDecl 0x5592b8068ce8 <line:223:5, line:225:5> line:223:34 blank_handler 'const Handler *()' static inline
| `-CompoundStmt 0x5592b806df18 <col:50, line:225:5>
|   `-ReturnStmt 0x5592b806df08 <line:224:2, col:9>
|     `-ImplicitCastExpr 0x5592b806def0 <col:9> 'const Handler *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b806ded0 <col:9> 'const Handler *' lvalue Var 0x5592b806b090 'the_blank_handler' 'const Handler *'
|-EnumDecl 0x5592b8068d88 <line:229:5, line:251:5> line:229:5
| |-EnumConstantDecl 0x5592b8068e90 <line:230:2, col:11> col:2 h_read 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069a30 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8068e70 <col:11> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5592b8068e50 <col:11> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8068f20 <line:231:2, col:12> col:2 h_write 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069a48 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8068f00 <col:12> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5592b8068ee0 <col:12> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8068fb0 <line:232:2, col:17> col:2 h_read_param 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069a60 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8068f90 <col:17> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5592b8068f70 <col:17> 'Handler::Flags' EnumConstant 0x5592b8066600 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069040 <line:233:2, col:16> col:2 h_exclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069a78 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069020 <col:16> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5592b8069000 <col:16> 'Handler::Flags' EnumConstant 0x5592b8066690 'f_exclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80690d0 <line:234:2, col:19> col:2 h_nonexclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069a90 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80690b0 <col:19> 'Handler::Flags' Int: 32
| |     `-DeclRefExpr 0x5592b8069090 <col:19> 'Handler::Flags' EnumConstant 0x5592b8066720 'f_nonexclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069160 <line:235:2, col:10> col:2 h_raw 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069aa8 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069140 <col:10> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5592b8069120 <col:10> 'Handler::Flags' EnumConstant 0x5592b80667b0 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80691f0 <line:236:2, col:19> col:2 h_read_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069ac0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80691d0 <col:19> 'Handler::Flags' Int: 128
| |     `-DeclRefExpr 0x5592b80691b0 <col:19> 'Handler::Flags' EnumConstant 0x5592b8066840 'f_read_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069280 <line:237:2, col:20> col:2 h_write_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069ad8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069260 <col:20> 'Handler::Flags' Int: 256
| |     `-DeclRefExpr 0x5592b8069240 <col:20> 'Handler::Flags' EnumConstant 0x5592b80668d0 'f_write_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069310 <line:238:2, col:17> col:2 h_deprecated 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069af0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80692f0 <col:17> 'Handler::Flags' Int: 512
| |     `-DeclRefExpr 0x5592b80692d0 <col:17> 'Handler::Flags' EnumConstant 0x5592b8066960 'f_deprecated' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80693a0 <line:239:2, col:15> col:2 h_uncommon 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b08 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069380 <col:15> 'Handler::Flags' Int: 1024
| |     `-DeclRefExpr 0x5592b8069360 <col:15> 'Handler::Flags' EnumConstant 0x5592b80669f0 'f_uncommon' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069430 <line:240:2, col:11> col:2 h_calm 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b20 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069410 <col:11> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5592b80693f0 <col:11> 'Handler::Flags' EnumConstant 0x5592b8066a80 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80694c0 <line:241:2, col:16> col:2 h_expensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b38 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80694a0 <col:16> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5592b8069480 <col:16> 'Handler::Flags' EnumConstant 0x5592b8066b10 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069550 <line:242:2, col:13> col:2 h_button 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b50 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069530 <col:13> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5592b8069510 <col:13> 'Handler::Flags' EnumConstant 0x5592b8066ba0 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80695e0 <line:243:2, col:15> col:2 h_checkbox 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b68 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80695c0 <col:15> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5592b80695a0 <col:15> 'Handler::Flags' EnumConstant 0x5592b8066c30 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069670 <line:244:2, col:20> col:2 h_driver_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b80 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069650 <col:20> 'Handler::Flags' Int: 67108864
| |     `-DeclRefExpr 0x5592b8069630 <col:20> 'Handler::Flags' EnumConstant 0x5592b8066d00 'f_driver0' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069700 <line:245:9, col:27> col:9 h_driver_flag_1 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069b98 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80696e0 <col:27> 'Handler::Flags' Int: 134217728
| |     `-DeclRefExpr 0x5592b80696c0 <col:27> 'Handler::Flags' EnumConstant 0x5592b8066dd0 'f_driver1' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069790 <line:246:2, col:22> col:2 h_user_flag_shift 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069bb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069770 <col:22> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5592b8069750 <col:22> 'Handler::Flags' EnumConstant 0x5592b8066e60 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069820 <line:247:2, col:18> col:2 h_user_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069bc8 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069800 <col:18> 'Handler::Flags' Int: 268435456
| |     `-DeclRefExpr 0x5592b80697e0 <col:18> 'Handler::Flags' EnumConstant 0x5592b8066f30 'f_user0' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b80698b0 <line:248:2, col:25> col:2 h_read_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069be0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069890 <col:25> 'Handler::Flags' Int: 8
| |     `-DeclRefExpr 0x5592b8069870 <col:25> 'Handler::Flags' EnumConstant 0x5592b8066fc0 'f_read_comprehensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069940 <line:249:2, col:26> col:2 h_write_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5592b8069bf8 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069920 <col:26> 'Handler::Flags' Int: 16
| |     `-DeclRefExpr 0x5592b8069900 <col:26> 'Handler::Flags' EnumConstant 0x5592b8067050 'f_write_comprehensive' 'Handler::Flags'
| `-EnumConstantDecl 0x5592b80699e0 <line:250:2, col:20> col:2 h_special_flags 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
|   `-ImplicitCastExpr 0x5592b8069c10 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b80699c0 <col:20> 'Handler::Flags' Int: 31
|       `-DeclRefExpr 0x5592b8069990 <col:20> 'Handler::Flags' EnumConstant 0x5592b80671e0 'f_special' 'Handler::Flags'
|-EnumDecl 0x5592b8069c28 <line:252:5, line:267:5> line:252:10 DeprecatedFlags
| |-EnumConstantDecl 0x5592b8069d30 <line:253:2, col:12> col:2 OP_READ 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a290 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069d10 <col:12> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5592b8069cf0 <col:12> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069dc0 <line:254:2, col:13> col:2 OP_WRITE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a2a8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069da0 <col:13> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5592b8069d80 <col:13> 'Handler::Flags' EnumConstant 0x5592b8066570 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069e50 <line:255:2, col:15> col:2 READ_PARAM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a2c0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069e30 <col:15> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5592b8069e10 <col:15> 'Handler::Flags' EnumConstant 0x5592b8066600 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069ee0 <line:256:2, col:8> col:2 RAW 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a2d8 <col:8> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069ec0 <col:8> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5592b8069ea0 <col:8> 'Handler::Flags' EnumConstant 0x5592b80667b0 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b8069f70 <line:261:2, col:9> col:2 CALM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a2f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069f50 <col:9> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5592b8069f30 <col:9> 'Handler::Flags' EnumConstant 0x5592b8066a80 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b806a000 <line:262:2, col:14> col:2 EXPENSIVE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a308 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8069fe0 <col:14> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5592b8069fc0 <col:14> 'Handler::Flags' EnumConstant 0x5592b8066b10 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b806a090 <line:263:2, col:11> col:2 BUTTON 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a320 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b806a070 <col:11> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5592b806a050 <col:11> 'Handler::Flags' EnumConstant 0x5592b8066ba0 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b806a120 <line:264:2, col:13> col:2 CHECKBOX 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a338 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b806a100 <col:13> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5592b806a0e0 <col:13> 'Handler::Flags' EnumConstant 0x5592b8066c30 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5592b806a1b0 <line:265:2, col:20> col:2 USER_FLAG_SHIFT 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5592b806a350 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b806a190 <col:20> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5592b806a170 <col:20> 'Handler::Flags' EnumConstant 0x5592b8066e60 'f_user_shift' 'Handler::Flags'
| `-EnumConstantDecl 0x5592b806a240 <line:266:2, col:16> col:2 USER_FLAG_0 'Handler::DeprecatedFlags'
|   `-ImplicitCastExpr 0x5592b806a368 <col:16> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b806a220 <col:16> 'Handler::Flags' Int: 268435456
|       `-DeclRefExpr 0x5592b806a200 <col:16> 'Handler::Flags' EnumConstant 0x5592b8066f30 'f_user0' 'Handler::Flags'
|-EnumDecl 0x5592b806a380 <line:268:5, line:271:5> line:268:5
| |-DeprecatedAttr 0x5592b806a440 <col:25> "" ""
| |-EnumConstantDecl 0x5592b806a4f0 <line:269:2, col:14> col:2 EXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
| | `-ImplicitCastExpr 0x5592b806a5d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b806a4d0 <col:14> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5592b806a4b0 <col:14> 'Handler::Flags' EnumConstant 0x5592b8066690 'f_exclusive' 'Handler::Flags'
| `-EnumConstantDecl 0x5592b806a580 <line:270:2, col:17> col:2 NONEXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
|   `-ImplicitCastExpr 0x5592b806a5e8 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b806a560 <col:17> 'Handler::Flags' Int: 32
|       `-DeclRefExpr 0x5592b806a540 <col:17> 'Handler::Flags' EnumConstant 0x5592b8066720 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5592b806a768 <line:281:5, line:284:5> line:281:19 __call_read 'String (Element *, void *) const' inline
| |-ParmVarDecl 0x5592b806a610 <col:31, col:40> col:40 used e 'Element *'
| |-ParmVarDecl 0x5592b806a690 <col:43, col:49> col:49 used new_user_data 'void *'
| `-CompoundStmt 0x5592b806e5d8 <col:70, line:284:5>
|   |-ParenExpr 0x5592b806e3f8 <line:282:2, col:233> 'void'
|   | `-ConditionalOperator 0x5592b806e3c8 <col:3, col:232> 'void'
|   |   |-CXXStaticCastExpr 0x5592b806e0f8 <col:3, col:75> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b806e0c8 <col:23, col:69> 'bool' '=='
|   |   |   |-ParenExpr 0x5592b806e070 <col:23, col:64> 'unsigned int'
|   |   |   | `-BinaryOperator 0x5592b806e050 <col:24, col:63> 'unsigned int' '&'
|   |   |   |   |-ImplicitCastExpr 0x5592b806e020 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x5592b806df40 <col:24> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5592b806af60
|   |   |   |   |   `-CXXThisExpr 0x5592b806df30 <col:24> 'const Handler *' implicit this
|   |   |   |   `-ImplicitCastExpr 0x5592b806e038 <col:33, col:63> 'unsigned int' <IntegralCast>
|   |   |   |     `-ParenExpr 0x5592b806e000 <col:33, col:63> 'int'
|   |   |   |       `-BinaryOperator 0x5592b806dfe0 <col:34, col:43> 'int' '|'
|   |   |   |         |-ImplicitCastExpr 0x5592b806dfb0 <col:34> 'int' <IntegralCast>
|   |   |   |         | `-DeclRefExpr 0x5592b806df70 <col:34> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|   |   |   |         `-ImplicitCastExpr 0x5592b806dfc8 <col:43> 'int' <IntegralCast>
|   |   |   |           `-DeclRefExpr 0x5592b806df90 <col:43> 'Handler::Flags' EnumConstant 0x5592b8066fc0 'f_read_comprehensive' 'Handler::Flags'
|   |   |   `-ImplicitCastExpr 0x5592b806e0b0 <col:69> 'unsigned int' <IntegralCast>
|   |   |     `-DeclRefExpr 0x5592b806e090 <col:69> 'Handler::Flags' EnumConstant 0x5592b80664e0 'f_read' 'Handler::Flags'
|   |   |-CXXFunctionalCastExpr 0x5592b806e158 <col:79, col:86> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b806e138 <col:85> 'int' 0
|   |   `-CallExpr 0x5592b806e328 <col:90, col:232> 'void'
|   |     |-ImplicitCastExpr 0x5592b806e310 <col:90> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b806e2f0 <col:90> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b806e368 <col:105> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b806e1c8 <col:105> 'const char [53]' lvalue "(_flags & (f_read | f_read_comprehensive)) == f_read"
|   |     |-ImplicitCastExpr 0x5592b806e380 <col:161> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b806e218 <col:161> 'const char [30]' lvalue "../dummy_inc/click/handler.hh"
|   |     |-ImplicitCastExpr 0x5592b806e398 <col:194> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b806e250 <col:194> 'int' 282
|   |     `-ImplicitCastExpr 0x5592b806e3b0 <col:199, col:213> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b806e2d8 <col:199, col:213> 'const char [53]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b806e2c0 <col:213> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b806e270 <col:213> 'const char [53]' lvalue "String Handler::__call_read(Element *, void *) const"
|   `-ReturnStmt 0x5592b806e5c8 <line:283:2, col:38>
|     `-ExprWithCleanups 0x5592b806e5b0 <col:9, col:38> 'String'
|       `-CXXConstructExpr 0x5592b806e580 <col:9, col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5592b806e568 <col:9, col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5592b806e548 <col:9, col:38> 'String' (CXXTemporary 0x5592b806e548)
|             `-CallExpr 0x5592b806e4e0 <col:9, col:38> 'String'
|               |-ImplicitCastExpr 0x5592b806e4c8 <col:9, col:20> 'ReadHandlerCallback':'String (*)(Element *, void *)' <LValueToRValue>
|               | `-MemberExpr 0x5592b806e458 <col:9, col:20> 'const ReadHandlerCallback':'String (*const)(Element *, void *)' lvalue .r 0x5592b806aa70
|               |   `-MemberExpr 0x5592b806e428 <col:9> 'const union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)' lvalue ->_read_hook 0x5592b806ab38
|               |     `-CXXThisExpr 0x5592b806e418 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5592b806e510 <col:22> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5592b806e488 <col:22> 'Element *' lvalue ParmVar 0x5592b806a610 'e' 'Element *'
|               `-ImplicitCastExpr 0x5592b806e528 <col:25> 'void *' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b806e4a8 <col:25> 'void *' lvalue ParmVar 0x5592b806a690 'new_user_data' 'void *'
|-AccessSpecDecl 0x5592b806a818 <line:287:3, col:10> col:3 private
|-FieldDecl 0x5592b806a850 <line:289:5, col:12> col:12 referenced _name 'String'
|-CXXRecordDecl 0x5592b806a8a0 <line:290:5, line:293:5> line:290:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5592b806a9f0 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5592b806aa70 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-CXXConstructorDecl 0x5592b806b868 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5592b806b868
| | `-ParmVarDecl 0x5592b806b978 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXConstructorDecl 0x5592b806ba18 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806ba18
| | `-ParmVarDecl 0x5592b806bb28 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| |-CXXDestructorDecl 0x5592b806bb98 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b806bb98
| |-CXXMethodDecl 0x5592b806c468 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5592b806c468
| | `-ParmVarDecl 0x5592b806c578 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXMethodDecl 0x5592b806c5e8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806c5e8
| | `-ParmVarDecl 0x5592b806c6f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| `-CXXConstructorDecl 0x5592b8231e30 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5592b8231f10 <col:5>
|-FieldDecl 0x5592b806ab38 <col:5, line:293:7> col:7 referenced _read_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)'
|-CXXRecordDecl 0x5592b806aba0 <line:294:5, line:297:5> line:294:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5592b806acc8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5592b806ad50 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-CXXConstructorDecl 0x5592b806bcc8 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5592b806bcc8
| | `-ParmVarDecl 0x5592b806bdd8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXConstructorDecl 0x5592b806be78 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806be78
| | `-ParmVarDecl 0x5592b806bf88 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| |-CXXDestructorDecl 0x5592b806bff8 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b806bff8
| |-CXXMethodDecl 0x5592b806c798 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5592b806c798
| | `-ParmVarDecl 0x5592b806c8a8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXMethodDecl 0x5592b806c918 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5592b806c918
| | `-ParmVarDecl 0x5592b806ca28 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| `-CXXConstructorDecl 0x5592b8231f70 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5592b8232050 <col:5>
|-FieldDecl 0x5592b806ae18 <col:5, line:297:7> col:7 referenced _write_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:294:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5)'
|-FieldDecl 0x5592b806ae98 <line:298:5, col:11> col:11 referenced _read_user_data 'void *'
|-FieldDecl 0x5592b806af00 <line:299:5, col:11> col:11 referenced _write_user_data 'void *'
|-FieldDecl 0x5592b806af60 <line:300:5, col:14> col:14 referenced _flags 'uint32_t':'unsigned int'
|-FieldDecl 0x5592b806afc8 <line:301:5, col:9> col:9 _use_count 'int'
|-FieldDecl 0x5592b806b030 <line:302:5, col:9> col:9 _next_by_name 'int'
|-VarDecl 0x5592b806b090 <line:304:5, col:27> col:27 used the_blank_handler 'const Handler *' static
|-CXXConstructorDecl 0x5592b806b1b0 <line:306:5, col:38> col:5 Handler 'void (const String &)'
| `-ParmVarDecl 0x5592b806b108 <col:13, col:37> col:28 'const String &' cinit
|   `-ExprWithCleanups 0x5592b806cde0 <col:30, col:37> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b806cdc8 <col:30, col:37> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b806cdb0 <col:30, col:37> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b806cd90 <col:30, col:37> 'String' (CXXTemporary 0x5592b806cd90)
|           `-CXXTemporaryObjectExpr 0x5592b806cd58 <col:30, col:37> 'String' 'void ()'
|-CXXMethodDecl 0x5592b806b358 <line:308:5, col:41> col:17 combine 'void (const Handler &)' inline
| `-ParmVarDecl 0x5592b806b298 <col:25, col:40> col:40 x 'const Handler &'
|-CXXMethodDecl 0x5592b806b4d8 <line:309:5, col:46> col:17 compatible 'bool (const Handler &) const' inline
| `-ParmVarDecl 0x5592b806b410 <col:28, col:43> col:43 x 'const Handler &'
|-FriendDecl 0x5592b806b698 <line:311:5, col:18> col:12 'class Router':'Router'
|-CXXConstructorDecl 0x5592b806b6d8 <line:19:7> col:7 implicit Handler 'void (const Handler &)' inline default noexcept-unevaluated 0x5592b806b6d8
| `-ParmVarDecl 0x5592b806b7b8 <col:7> col:7 'const Handler &'
|-CXXConstructorDecl 0x5592b806c108 <col:7> col:7 implicit Handler 'void (Handler &&)' inline default noexcept-unevaluated 0x5592b806c108
| `-ParmVarDecl 0x5592b806c218 <col:7> col:7 'Handler &&'
|-CXXMethodDecl 0x5592b806c2b8 <col:7> col:7 implicit operator= 'Handler &(const Handler &)' inline default noexcept-unevaluated 0x5592b806c2b8
| `-ParmVarDecl 0x5592b806c3c8 <col:7> col:7 'const Handler &'
|-CXXMethodDecl 0x5592b806ca98 <col:7> col:7 implicit operator= 'Handler &(Handler &&)' inline default noexcept-unevaluated 0x5592b806ca98
| `-ParmVarDecl 0x5592b806cba8 <col:7> col:7 'Handler &&'
`-CXXDestructorDecl 0x5592b806cc30 <col:7> col:7 implicit ~Handler 'void ()' inline default noexcept-unevaluated 0x5592b806cc30

Layout: <CGRecordLayout
  LLVMType:%class.Handler = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Handler.base = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b82178c8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'void *'
|-CXXRecordDecl 0x5592b8217ad8 prev 0x5592b82178c8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b8218af0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<void *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5592b8218aa0 'typename array_memory<void *>::type' sugar
|   `-TypedefType 0x5592b8218a80 'conditional<true, sized_array_memory<8>, typed_array_memory<void *> >::type' sugar
|     |-Typedef 0x5592b8218930 'type'
|     `-SubstTemplateTypeParmType 0x5592b817f0c0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b817ec10 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5592b817eb28 'sized_array_memory'
|-FieldDecl 0x5592b8218bf0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<void *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5592b8218c40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b8218c78 <line:118:5, col:15> col:15 value_type 'void *':'void *'
| `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-PointerType 0x5592b7b0ace0 'void *'
|     `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8218d08 <line:119:5, col:16> col:16 reference 'void *&'
| `-LValueReferenceType 0x5592b8218cd0 'void *&'
|   `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b7b0ace0 'void *'
|       `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8218dc8 <line:120:5, col:22> col:22 const_reference 'void *const &'
| `-LValueReferenceType 0x5592b8218d90 'void *const &'
|   `-QualType 0x5592b8217b71 'void *const' const
|     `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8218e58 <line:121:5, col:16> col:16 pointer 'void **'
| `-PointerType 0x5592b8218e20 'void **'
|   `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b7b0ace0 'void *'
|       `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8218ee8 <line:122:5, col:22> col:22 const_pointer 'void *const *'
| `-PointerType 0x5592b8218eb0 'void *const *'
|   `-QualType 0x5592b8217b71 'void *const' const
|     `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8219ad0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<void *>::type':'void *'
| `-ElaboratedType 0x5592b8219a80 'typename fast_argument<void *>::type' sugar
|   `-TypedefType 0x5592b8219a60 'fast_argument<void *, false>::type' sugar
|     |-Typedef 0x5592b82199f0 'type'
|     `-SubstTemplateTypeParmType 0x5592b82197b0 'void *' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8219b38 <line:126:5, col:22> col:22 const_access_type 'void *const &'
| `-LValueReferenceType 0x5592b8218d90 'void *const &'
|   `-QualType 0x5592b8217b71 'void *const' const
|     `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8219b90 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8219bf8 <line:130:5, col:16> col:16 iterator 'void **'
| `-PointerType 0x5592b8218e20 'void **'
|   `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b7b0ace0 'void *'
|       `-BuiltinType 0x5592b7b0a4e0 'void'
|-TypedefDecl 0x5592b8219c60 <line:131:5, col:22> col:22 const_iterator 'void *const *'
| `-PointerType 0x5592b8218eb0 'void *const *'
|   `-QualType 0x5592b8217b71 'void *const' const
|     `-SubstTemplateTypeParmType 0x5592b8217b70 'void *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-EnumDecl 0x5592b8219cb8 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b8219db0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<void *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b8219d90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b8219e38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b821a088 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8219ef0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8219f90 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXConstructorDecl 0x5592b821a348 <line:139:5, col:37> col:12 Vector 'void (const Vector<void *> &)' inline
| `-ParmVarDecl 0x5592b821a230 <col:19, col:36> col:36 x 'const Vector<void *> &'
|-CXXConstructorDecl 0x5592b821a608 <line:141:5, col:32> col:12 Vector 'void (Vector<void *> &&)' inline
| `-ParmVarDecl 0x5592b821a4f0 <col:19, col:31> col:31 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5592b821a950 <line:144:5, col:51> col:23 operator= 'Vector<void *> &(const Vector<void *> &)' inline
| `-ParmVarDecl 0x5592b821a830 <col:33, col:50> col:50 x 'const Vector<void *> &'
|-CXXMethodDecl 0x5592b821ac60 <line:146:5, col:46> col:23 operator= 'Vector<void *> &(Vector<void *> &&)' inline
| `-ParmVarDecl 0x5592b821ab40 <col:33, col:45> col:45 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5592b821af50 <line:148:5, col:70> col:23 assign 'Vector<void *> &(Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b821ad98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b821ae10 <col:43, col:69> col:63 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5592b821b0a8 <line:150:5, col:55> col:49 begin 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5592b821b188 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b1e0 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b228 <line:151:5, col:53> col:49 end 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5592b821b2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b330 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b3f8 <line:152:5, col:63> col:55 begin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5592b821b4a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b500 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b548 <line:153:5, col:61> col:55 end 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5592b821b5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b650 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b698 <line:154:5, col:64> col:55 cbegin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5592b821b748 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b7a0 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b7e8 <line:155:5, col:62> col:55 cend 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5592b821b898 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b821b8f0 <col:30> Inherited
|-CXXMethodDecl 0x5592b821b918 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b821b9c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b821ba78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b821bc38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b821bb28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b821bba0 <col:37, col:63> col:57 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5592b821bd88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b821bcf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b821bf38 <line:163:5, col:65> col:43 operator[] 'void *&(Vector::size_type)'
| |-ParmVarDecl 0x5592b821be40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b821bff0 <col:20>
| `-OptimizeNoneAttr 0x5592b821c048 <col:30>
|-CXXMethodDecl 0x5592b821c168 <line:164:5, col:73> col:49 operator[] 'void *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b821c070 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b821c220 <col:20>
| `-OptimizeNoneAttr 0x5592b821c278 <col:30>
|-CXXMethodDecl 0x5592b821c330 <line:165:5, col:29> col:15 at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b821c2a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b821c478 <line:166:5, col:37> col:21 at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b821c3e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b821c5a8 <line:167:5, col:21> col:15 front 'void *&()' inline
|-CXXMethodDecl 0x5592b821c6d8 <line:168:5, col:29> col:21 front 'void *const &() const' inline
|-CXXMethodDecl 0x5592b821c7a8 <line:169:5, col:20> col:15 back 'void *&()' inline
|-CXXMethodDecl 0x5592b821c878 <line:170:5, col:28> col:21 back 'void *const &() const' inline
|-CXXMethodDecl 0x5592b821c9b8 <line:172:5, col:39> col:15 unchecked_at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b821c928 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b821cb00 <line:173:5, col:47> col:21 unchecked_at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b821ca70 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b82200a0 <line:174:5, col:59> col:15 at_u 'void *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b8220010 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b8220158 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b8220258 <line:175:5, col:71> col:21 at_u 'void *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b82201c8 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b8220310 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b82203c8 <line:177:5, col:20> col:15 data 'void **()' inline
|-CXXMethodDecl 0x5592b82204c8 <line:178:5, col:28> col:21 data 'void *const *() const' inline
|-CXXMethodDecl 0x5592b8220648 <line:180:5, col:48> col:17 push_back 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b8220588 <col:27, col:47> col:47 v 'Vector<void *>::value_argument_type':'void *'
|-FunctionTemplateDecl 0x5592b8220e08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b8220700 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<void *>':'fast_argument<void *, false>'
| `-CXXMethodDecl 0x5592b8220d68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (void *&&)' inline
|   `-ParmVarDecl 0x5592b8220c68 <col:58, col:62> col:62 v 'void *&&'
|-CXXMethodDecl 0x5592b8220ee8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8221038 <line:186:5, col:49> col:17 push_front 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b8220fa8 <col:28, col:48> col:48 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5592b82210f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b8221338 <line:189:5, col:62> col:21 insert 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b82211b0 <col:28, col:37> col:37 it 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5592b8221228 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5592b82214f8 <line:190:5, col:38> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator)' inline
| `-ParmVarDecl 0x5592b8221408 <col:27, col:36> col:36 it 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5592b8221748 <line:191:5, col:49> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::iterator)' inline
| |-ParmVarDecl 0x5592b82215c0 <col:27, col:36> col:36 a 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5592b8221638 <col:39, col:48> col:48 b 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5592b8221808 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b8221a68 <line:195:5, col:34> col:17 swap 'void (Vector<void *> &)' inline
| `-ParmVarDecl 0x5592b8221970 <col:22, col:33> col:33 x 'Vector<void *> &'
`-CXXDestructorDecl 0x5592b8221b38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b8221b38

Layout: <CGRecordLayout
  LLVMType:%class.Vector.12 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.12 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Router::notifier_signals_t
         0 |   class String name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   int nsig
        28 |   class atomic_uint32_t [128] sig
       544 |   struct Router::notifier_signals_t * next
           | [sizeof=552, dsize=552, align=8,
           |  nvsize=552, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8221d30 <../dummy_inc/click/router.hh:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5592b8221e48 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
|-EnumDecl 0x5592b8221ed8 <line:281:9, col:32> col:9
| `-EnumConstantDecl 0x5592b8221fe0 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
|   `-ImplicitCastExpr 0x5592b8222030 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8221fc0 <col:27> 'int' Int: 4096
|       `-IntegerLiteral 0x5592b8221fa0 <col:27> 'int' 4096
|-FieldDecl 0x5592b8222058 <line:282:9, col:16> col:16 name 'String'
|-FieldDecl 0x5592b82220c0 <line:283:9, col:13> col:13 nsig 'int'
|-FieldDecl 0x5592b82222b8 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
|-FieldDecl 0x5592b8222348 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
|-CXXConstructorDecl 0x5592b8222508 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| |-ParmVarDecl 0x5592b82223a8 <col:28, col:42> col:42 used n 'const String &'
| |-ParmVarDecl 0x5592b8222420 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| |-CXXCtorInitializer Field 0x5592b8222058 'name' 'String'
| | `-CXXConstructExpr 0x5592b822ce18 <line:287:15, col:21> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x5592b822cdd8 <col:20> 'const String' lvalue ParmVar 0x5592b82223a8 'n' 'const String &'
| |-CXXCtorInitializer Field 0x5592b82220c0 'nsig' 'int'
| | `-IntegerLiteral 0x5592b822ce70 <col:29> 'int' 0
| |-CXXCtorInitializer Field 0x5592b82222b8 'sig' 'atomic_uint32_t [128]'
| | `-CXXConstructExpr 0x5592b822cf58 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5592b8222348 'next' 'Router::notifier_signals_t *'
| | `-ImplicitCastExpr 0x5592b822cf18 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b822ced8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5592b8222420 'nx' 'Router::notifier_signals_t *'
| `-CompoundStmt 0x5592b822d1e8 <col:42, line:289:9>
|   `-CallExpr 0x5592b822d198 <line:288:13, col:43> 'void *'
|     |-ImplicitCastExpr 0x5592b822d180 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5592b822d160 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x5592b7d6dcd8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5592b822d1d0 <col:20, col:26> 'void *' <BitCast>
|     | `-UnaryOperator 0x5592b822d0a8 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
|     |   `-ArraySubscriptExpr 0x5592b822d088 <col:21, col:26> 'atomic_uint32_t' lvalue
|     |     |-ImplicitCastExpr 0x5592b822d070 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b822d020 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5592b82222b8
|     |     |   `-CXXThisExpr 0x5592b822d010 <col:21> 'Router::notifier_signals_t *' implicit this
|     |     `-IntegerLiteral 0x5592b822d050 <col:25> 'int' 0
|     |-IntegerLiteral 0x5592b822d0c0 <col:29> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5592b822d140 <col:32, col:42> 'unsigned long' sizeof
|       `-ParenExpr 0x5592b822d120 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
|         `-MemberExpr 0x5592b822d0f0 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5592b82222b8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5592b822d0e0 <col:39> 'Router::notifier_signals_t *' implicit this
|-CXXConstructorDecl 0x5592b82225e8 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5592b82225e8
| `-ParmVarDecl 0x5592b82226f8 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXConstructorDecl 0x5592b8222798 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5592b8222798
| `-ParmVarDecl 0x5592b82228a8 <col:12> col:12 'Router::notifier_signals_t &&'
|-CXXMethodDecl 0x5592b8222948 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5592b8222948
| `-ParmVarDecl 0x5592b8222a58 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXMethodDecl 0x5592b8222ac8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5592b8222ac8
| `-ParmVarDecl 0x5592b8222bd8 <col:12> col:12 'Router::notifier_signals_t &&'
`-CXXDestructorDecl 0x5592b8222c60 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5592b8222c60

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  NonVirtualBaseLLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ThreadSched
         0 |   (ThreadSched vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81dcef0 <../dummy_inc/click/standard/threadsched.hh:6:1, line:15:1> line:6:7 class ThreadSched definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b81dd008 <col:1, col:7> col:7 implicit referenced class ThreadSched
|-AccessSpecDecl 0x5592b81dd098 <col:21, col:27> col:21 public
|-EnumDecl 0x5592b81dd0c0 <line:8:5, col:58> col:5
| |-EnumConstantDecl 0x5592b81dd1d8 <col:12, col:32> col:12 THREAD_QUIESCENT 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
| | `-ConstantExpr 0x5592b81dd1b8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5592b81dd1a0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b81dd180 <col:32> 'int' 1
| `-EnumConstantDecl 0x5592b81dd280 <col:35, col:53> col:35 THREAD_UNKNOWN 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
|   `-ConstantExpr 0x5592b81dd260 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5592b81dd248 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5592b81dd228 <col:53> 'int' 1000
|-CXXConstructorDecl 0x5592b81dd330 <line:10:5, col:21> col:5 ThreadSched 'void ()'
| `-CompoundStmt 0x5592b81dd868 <col:19, col:21>
|-CXXDestructorDecl 0x5592b81dd420 <line:11:5, col:30> col:13 ~ThreadSched 'void () noexcept' virtual
| `-CompoundStmt 0x5592b81dd878 <col:28, col:30>
|-CXXMethodDecl 0x5592b81dd5e0 <line:13:5, col:56> col:17 initial_home_thread_id 'int (const Element *)' virtual
| `-ParmVarDecl 0x5592b81dd510 <col:40, col:55> col:55 e 'const Element *'
`-CXXMethodDecl 0x5592b81dd6e8 <line:6:7> col:7 implicit operator= 'ThreadSched &(const ThreadSched &)' inline default noexcept-unevaluated 0x5592b81dd6e8
  `-ParmVarDecl 0x5592b81dd7f8 <col:7> col:7 'const ThreadSched &'

Layout: <CGRecordLayout
  LLVMType:%class.ThreadSched = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.ThreadSched = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81dde20 prev 0x5592b81b2260 <../dummy_inc/click/router.hh:23:1, line:352:1> line:23:7 referenced class Router definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5592b81ddf18 <col:1, col:7> col:7 implicit referenced class Router
|-AccessSpecDecl 0x5592b81ddfa8 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x5592b81de018 <line:28:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5592b81de0d8 <line:31:5, col:31> col:17 used initialized 'bool () const' inline
|-CXXMethodDecl 0x5592b81de198 <line:32:5, col:34> col:17 handlers_ready 'bool () const' inline
|-CXXMethodDecl 0x5592b81de258 <line:33:5, col:27> col:17 running 'bool () const' inline
|-CXXMethodDecl 0x5592b81de318 <line:34:5, col:25> col:17 dying 'bool () const' inline
|-EnumDecl 0x5592b81de3b8 <line:37:5, col:44> col:5
| `-EnumConstantDecl 0x5592b81de518 <col:12, col:42> col:12 STOP_RUNCOUNT 'Router::(anonymous enum at ../dummy_inc/click/router.hh:37:5)'
|   `-ConstantExpr 0x5592b81de4f8 <col:28, col:42> 'int' Int: -2147483648
|     `-BinaryOperator 0x5592b81de4d8 <col:28, col:42> 'int' '-'
|       |-UnaryOperator 0x5592b81de4a0 <col:28, col:29> 'int' prefix '-'
|       | `-IntegerLiteral 0x5592b81de480 <col:29> 'int' 2147483647
|       `-IntegerLiteral 0x5592b81de4b8 <col:42> 'int' 1
|-CXXMethodDecl 0x5592b81de5b8 <line:38:5, col:31> col:20 runcount 'int32_t () const' inline
|-CXXMethodDecl 0x5592b81de728 <line:39:5, col:39> col:10 used adjust_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5592b81de668 <col:26, col:34> col:34 delta 'int32_t':'int'
|-CXXMethodDecl 0x5592b81de870 <line:40:5, col:33> col:10 set_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5592b81de7e0 <col:23, col:31> col:31 rc 'int32_t':'int'
|-CXXMethodDecl 0x5592b81de938 <line:41:5, col:36> col:17 please_stop_driver 'void ()' inline
|-CXXMethodDecl 0x5592b81dec60 <line:44:5, col:47> col:36 elements 'const Vector<Element *> &() const' inline
|-CXXMethodDecl 0x5592b81ded28 <line:45:5, col:28> col:16 nelements 'int () const' inline
|-CXXMethodDecl 0x5592b81deea8 <line:46:5, col:36> col:21 element 'Element *(int) const' inline
| `-ParmVarDecl 0x5592b81dede0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5592b81def70 <line:47:5, col:36> col:21 root_element 'Element *() const' inline
|-CXXMethodDecl 0x5592b81df178 <line:48:5, col:56> col:21 used element 'Element *(const Router *, int)' static
| |-ParmVarDecl 0x5592b81df020 <col:29, col:43> col:43 router 'const Router *'
| `-ParmVarDecl 0x5592b81df0a0 <col:51, col:55> col:55 i 'int'
|-CXXMethodDecl 0x5592b81df2d0 <line:50:5, col:32> col:19 ename 'const String &(int) const'
| `-ParmVarDecl 0x5592b81df240 <col:25, col:29> col:29 i 'int'
|-CXXMethodDecl 0x5592b81e1350 <line:51:5, col:33> col:12 ename_context 'String (int) const'
| `-ParmVarDecl 0x5592b81e12c0 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5592b81e14a0 <line:52:5, col:29> col:12 elandmark 'String (int) const'
| `-ParmVarDecl 0x5592b81e1410 <col:22, col:26> col:26 i 'int'
|-CXXMethodDecl 0x5592b81e15f0 <line:53:5, col:41> col:19 econfiguration 'const String &(int) const'
| `-ParmVarDecl 0x5592b81e1560 <col:34, col:38> col:38 i 'int'
|-CXXMethodDecl 0x5592b81e17c0 <line:54:5, col:54> col:10 set_econfiguration 'void (int, const String &)'
| |-ParmVarDecl 0x5592b81e16b0 <col:29, col:33> col:33 i 'int'
| `-ParmVarDecl 0x5592b81e1728 <col:36, col:50> col:50 conf 'const String &'
|-CXXMethodDecl 0x5592b81e19c8 <line:56:5, col:63> col:14 find 'Element *(const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b81e1880 <col:19, col:33> col:33 name 'const String &'
| `-ParmVarDecl 0x5592b81e18f8 <col:39, col:60> col:53 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b8226500 <col:60> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b82264e0 <col:60> 'int' 0
|-CXXMethodDecl 0x5592b81e1c58 <line:57:5, col:79> col:14 used find 'Element *(const String &, String, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b81e1a88 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5592b81e1b00 <col:39, col:46> col:46 context 'String' destroyed
| `-ParmVarDecl 0x5592b81e1b78 <col:55, col:76> col:69 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b8226538 <col:76> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b8226518 <col:76> 'int' 0
|-CXXMethodDecl 0x5592b81e1ef8 <line:58:5, col:87> col:14 find 'Element *(const String &, const Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b81e1d20 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5592b81e1d98 <col:39, col:54> col:54 context 'const Element *'
| `-ParmVarDecl 0x5592b81e1e10 <col:63, col:84> col:77 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b8226570 <col:84> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b8226550 <col:84> 'int' 0
|-CXXMethodDecl 0x5592b81e2250 <line:60:5, col:76> col:9 used visit 'int (Element *, bool, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5592b81e1fc0 <col:15, col:24> col:24 e 'Element *'
| |-ParmVarDecl 0x5592b81e2038 <col:27, col:32> col:32 isoutput 'bool'
| |-ParmVarDecl 0x5592b81e20b8 <col:42, col:46> col:46 port 'int'
| `-ParmVarDecl 0x5592b81e2158 <col:52, col:67> col:67 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5592b81e2500 <line:61:5, col:72> col:9 visit_downstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5592b81e2320 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x5592b81e23a0 <col:38, col:42> col:42 port 'int'
| `-ParmVarDecl 0x5592b81e2418 <col:48, col:63> col:63 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5592b81e2768 <line:62:5, col:70> col:9 visit_upstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5592b81e25c8 <col:24, col:33> col:33 e 'Element *'
| |-ParmVarDecl 0x5592b81e2648 <col:36, col:40> col:40 port 'int'
| `-ParmVarDecl 0x5592b81e26c0 <col:46, col:61> col:61 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5592b81e2c20 <line:64:5, col:126> col:9 downstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5592b81e2830 <col:29, col:38> col:38 e 'Element *'
| |-ParmVarDecl 0x5592b81e28b0 <col:41, col:45> col:45 port 'int'
| |-ParmVarDecl 0x5592b81e2958 <col:51, col:66> col:66 filter 'ElementFilter *'
| |-ParmVarDecl 0x5592b81e2ad0 <col:74, col:92> col:92 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5592b81e2ce0 <col:115> "" ""
|-CXXMethodDecl 0x5592b81e30a0 <line:65:5, col:124> col:9 upstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5592b81e2d60 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x5592b81e2de0 <col:39, col:43> col:43 port 'int'
| |-ParmVarDecl 0x5592b81e2e58 <col:49, col:64> col:64 filter 'ElementFilter *'
| |-ParmVarDecl 0x5592b81e2fa0 <col:72, col:90> col:90 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5592b81e3160 <col:113> "" ""
|-CXXMethodDecl 0x5592b81e32b0 <line:67:5, col:55> col:24 flow_code_override 'const char *(int) const' inline
| `-ParmVarDecl 0x5592b81e31e8 <col:43, col:47> col:47 eindex 'int'
|-CXXMethodDecl 0x5592b81e3480 <line:68:5, col:68> col:10 set_flow_code_override 'void (int, const String &)'
| |-ParmVarDecl 0x5592b81e3370 <col:33, col:37> col:37 eindex 'int'
| `-ParmVarDecl 0x5592b81e33e8 <col:45, col:59> col:59 flow_code 'const String &'
|-CXXMethodDecl 0x5592b81e3688 <line:72:5, col:72> col:27 handler 'const Handler *(const Element *, const String &)' static
| |-ParmVarDecl 0x5592b81e3540 <col:35, col:50> col:50 e 'const Element *'
| `-ParmVarDecl 0x5592b81e35b8 <col:53, col:67> col:67 hname 'const String &'
|-CXXMethodDecl 0x5592b81e3a88 <line:73:5, col:138> col:17 add_read_handler 'void (const Element *, const String &, ReadHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5592b81e3748 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5592b81e37c0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5592b81e3838 <col:73, col:93> col:93 callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5592b81e38b8 <col:103, col:109> col:109 user_data 'void *'
| `-ParmVarDecl 0x5592b81e3930 <col:120, col:137> col:129 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b82265a8 <col:137> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8226588 <col:137> 'int' 0
|-CXXMethodDecl 0x5592b81e3e98 <line:74:5, col:140> col:17 add_write_handler 'void (const Element *, const String &, WriteHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5592b81e3b60 <col:35, col:50> col:50 e 'const Element *'
| |-ParmVarDecl 0x5592b81e3bd8 <col:53, col:67> col:67 hname 'const String &'
| |-ParmVarDecl 0x5592b81e3c50 <col:74, col:95> col:95 callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b81e3cd0 <col:105, col:111> col:111 user_data 'void *'
| `-ParmVarDecl 0x5592b81e3d48 <col:122, col:139> col:131 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b82265e0 <col:139> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b82265c0 <col:139> 'int' 0
|-CXXMethodDecl 0x5592b81e4348 <line:75:5, col:161> col:17 set_handler 'void (const Element *, const String &, uint32_t, HandlerCallback, void *, void *)' static
| |-ParmVarDecl 0x5592b81e3f70 <col:29, col:44> col:44 e 'const Element *'
| |-ParmVarDecl 0x5592b81e3fe8 <col:47, col:61> col:61 hname 'const String &'
| |-ParmVarDecl 0x5592b81e4060 <col:68, col:77> col:77 flags 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b81e40d8 <col:84, col:100> col:100 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b81e4158 <col:110, col:133> col:116 read_user_data 'void *' cinit
| | `-ImplicitCastExpr 0x5592b8226618 <col:133> 'void *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b82265f8 <col:133> 'int' 0
| `-ParmVarDecl 0x5592b81e41d8 <col:136, col:160> col:142 write_user_data 'void *' cinit
|   `-ImplicitCastExpr 0x5592b8226650 <col:160> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x5592b8226630 <col:160> 'int' 0
|-CXXMethodDecl 0x5592b81e46e0 <line:76:5, col:117> col:16 set_handler_flags 'int (const Element *, const String &, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5592b81e4428 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5592b81e44a0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5592b81e4518 <col:73, col:82> col:82 set_flags 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b81e4590 <col:93, col:116> col:102 clear_flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b8226688 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8226668 <col:116> 'int' 0
|-EnumDecl 0x5592b81e47a0 <line:78:5, col:46> col:5
| `-EnumConstantDecl 0x5592b81e48a0 <col:12, col:35> col:12 FIRST_GLOBAL_HANDLER 'Router::(anonymous enum at ../dummy_inc/click/router.hh:78:5)'
|   `-ImplicitCastExpr 0x5592b81e48f0 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b81e4880 <col:35> 'int' Int: 1073741824
|       `-IntegerLiteral 0x5592b81e4860 <col:35> 'int' 1073741824
|-CXXMethodDecl 0x5592b81e4a70 <line:79:5, col:60> col:16 hindex 'int (const Element *, const String &)' static
| |-ParmVarDecl 0x5592b81e4918 <col:23, col:38> col:38 e 'const Element *'
| `-ParmVarDecl 0x5592b81e4990 <col:41, col:55> col:55 hname 'const String &'
|-CXXMethodDecl 0x5592b81e4c88 <line:80:5, col:67> col:27 handler 'const Handler *(const Router *, int)' static
| |-ParmVarDecl 0x5592b81e4b30 <col:35, col:49> col:49 router 'const Router *'
| `-ParmVarDecl 0x5592b81e4bb0 <col:57, col:61> col:61 hindex 'int'
|-CXXMethodDecl 0x5592b81e4fb8 <line:81:5, col:71> col:17 element_hindexes 'void (const Element *, Vector<int> &)' static
| |-ParmVarDecl 0x5592b81e4d48 <col:34, col:49> col:49 e 'const Element *'
| `-ParmVarDecl 0x5592b81e4ea0 <col:52, col:65> col:65 result 'Vector<int> &'
|-CXXMethodDecl 0x5592b81e5140 <line:84:5, col:43> col:11 attachment 'void *(const String &) const'
| `-ParmVarDecl 0x5592b81e5078 <col:22, col:36> col:36 aname 'const String &'
|-CXXMethodDecl 0x5592b81e52c0 <line:85:5, col:48> col:12 force_attachment 'void *&(const String &)'
| `-ParmVarDecl 0x5592b81e51f8 <col:29, col:43> col:43 aname 'const String &'
|-CXXMethodDecl 0x5592b81e54d0 <line:86:5, col:58> col:11 set_attachment 'void *(const String &, void *)'
| |-ParmVarDecl 0x5592b81e5378 <col:26, col:40> col:40 aname 'const String &'
| `-ParmVarDecl 0x5592b81e53f8 <col:47, col:53> col:53 value 'void *'
|-CXXMethodDecl 0x5592b81e5658 <line:88:5, col:63> col:19 chatter_channel 'ErrorHandler *(const String &) const'
| `-ParmVarDecl 0x5592b81e5590 <col:35, col:49> col:49 channel_name 'const String &'
|-CXXMethodDecl 0x5592b81e5778 <line:89:5, col:43> col:27 arena_factory 'HashMap_ArenaFactory *() const'
|-CXXMethodDecl 0x5592b81e5868 <line:91:5, col:40> col:25 thread_sched 'ThreadSched *() const' inline
|-CXXMethodDecl 0x5592b81e59d8 <line:92:5, col:56> col:17 set_thread_sched 'void (ThreadSched *)' inline
| `-ParmVarDecl 0x5592b81e5918 <col:34, col:47> col:47 scheduler 'ThreadSched *'
|-CXXMethodDecl 0x5592b81e5b60 <line:93:5, col:49> col:16 home_thread_id 'int (const Element *) const' inline
| `-ParmVarDecl 0x5592b81e5a90 <col:31, col:46> col:46 e 'const Element *'
|-CXXMethodDecl 0x5592b81e5d68 <line:94:5, col:69> col:17 set_home_thread_id 'void (const Element *, int)' inline
| |-ParmVarDecl 0x5592b81e5c18 <col:36, col:51> col:51 e 'const Element *'
| `-ParmVarDecl 0x5592b81e5c98 <col:54, col:58> col:58 home_thread 'int'
|-CXXMethodDecl 0x5592b81e5e98 <line:98:5, col:34> col:22 name_info 'NameInfo *() const' inline
|-CXXMethodDecl 0x5592b81e5f88 <line:99:5, col:31> col:15 force_name_info 'NameInfo *()'
|-CXXMethodDecl 0x5592b81e6048 <line:103:5, col:35> col:12 configuration_string 'String () const'
|-CXXMethodDecl 0x5592b81e6248 <line:104:5, col:68> col:10 unparse 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5592b81e60f8 <col:18, col:31> col:31 sa 'StringAccum &'
| `-ParmVarDecl 0x5592b81e6170 <col:35, col:65> col:49 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5592b8226738 <col:58, col:65> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b8226720 <col:58, col:65> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b8226708 <col:58, col:65> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b82266e8 <col:58, col:65> 'String' (CXXTemporary 0x5592b82266e8)
|           `-CXXTemporaryObjectExpr 0x5592b82266b0 <col:58, col:65> 'String' 'void ()'
|-CXXMethodDecl 0x5592b81e6418 <line:105:5, col:81> col:10 unparse_requirements 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5592b81e6308 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5592b81e6380 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5592b82267e8 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b82267d0 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b82267b8 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b8226798 <col:71, col:78> 'String' (CXXTemporary 0x5592b8226798)
|           `-CXXTemporaryObjectExpr 0x5592b8226760 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5592b81e65e8 <line:106:5, col:81> col:10 unparse_declarations 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5592b81e64d8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5592b81e6550 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5592b8226898 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b8226880 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b8226868 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b8226848 <col:71, col:78> 'String' (CXXTemporary 0x5592b8226848)
|           `-CXXTemporaryObjectExpr 0x5592b8226810 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5592b81e67b8 <line:107:5, col:80> col:10 unparse_connections 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5592b81e66a8 <col:30, col:43> col:43 sa 'StringAccum &'
| `-ParmVarDecl 0x5592b81e6720 <col:47, col:77> col:61 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5592b8226948 <col:70, col:77> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b8226930 <col:70, col:77> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b8226918 <col:70, col:77> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b82268f8 <col:70, col:77> 'String' (CXXTemporary 0x5592b82268f8)
|           `-CXXTemporaryObjectExpr 0x5592b82268c0 <col:70, col:77> 'String' 'void ()'
|-CXXMethodDecl 0x5592b81e6938 <line:109:5, col:51> col:12 element_ports_string 'String (const Element *) const'
| `-ParmVarDecl 0x5592b81e6878 <col:33, col:48> col:48 e 'const Element *'
|-CXXConstructorDecl 0x5592b81e6b58 <line:115:5, col:55> col:5 Router 'void (const String &, Master *)'
| |-ParmVarDecl 0x5592b81e69f0 <col:12, col:26> col:26 configuration 'const String &'
| `-ParmVarDecl 0x5592b81e6a68 <col:41, col:49> col:49 master 'Master *'
|-CXXDestructorDecl 0x5592b81e6c58 <line:116:5, col:13> col:5 ~Router 'void ()' noexcept-unevaluated 0x5592b81e6c58
|-CXXMethodDecl 0x5592b81e6d60 <line:118:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5592b81e6e20 <line:119:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5592b81e6ee0 <line:121:5, col:21> col:17 use 'void ()' inline
|-CXXMethodDecl 0x5592b81e6fa0 <line:122:5, col:16> col:10 unuse 'void ()'
|-CXXMethodDecl 0x5592b81e7198 <line:124:5, col:65> col:10 add_requirement 'void (const String &, const String &)'
| |-ParmVarDecl 0x5592b81e7050 <col:26, col:40> col:40 type 'const String &'
| `-ParmVarDecl 0x5592b81e70c8 <col:46, col:60> col:60 value 'const String &'
|-CXXMethodDecl 0x5592b81e7550 <line:125:5, col:112> col:9 add_element 'int (Element *, const String &, const String &, const String &, unsigned int)'
| |-ParmVarDecl 0x5592b81e7258 <col:21, col:30> col:30 e 'Element *'
| |-ParmVarDecl 0x5592b81e72d0 <col:33, col:47> col:47 name 'const String &'
| |-ParmVarDecl 0x5592b81e7348 <col:53, col:67> col:67 conf 'const String &'
| |-ParmVarDecl 0x5592b81e73c0 <col:73, col:87> col:87 filename 'const String &'
| `-ParmVarDecl 0x5592b81e7440 <col:97, col:106> col:106 lineno 'unsigned int'
|-CXXMethodDecl 0x5592b81e78b0 <line:126:5, col:76> col:9 add_connection 'int (int, int, int, int)'
| |-ParmVarDecl 0x5592b81e7630 <col:24, col:28> col:28 from_idx 'int'
| |-ParmVarDecl 0x5592b81e76b0 <col:38, col:42> col:42 from_port 'int'
| |-ParmVarDecl 0x5592b81e7730 <col:53, col:57> col:57 to_idx 'int'
| `-ParmVarDecl 0x5592b81e77b0 <col:65, col:69> col:69 to_port 'int'
|-CXXMethodDecl 0x5592b81e7990 <line:131:5, col:37> col:20 hotswap_router 'Router *() const' inline
|-CXXMethodDecl 0x5592b81e7ad0 <line:132:5, col:43> col:10 set_hotswap_router 'void (Router *)'
| `-ParmVarDecl 0x5592b81e7a40 <col:29, col:37> col:37 router 'Router *'
|-CXXMethodDecl 0x5592b81e7c20 <line:134:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5592b81e7b88 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81e7e28 <line:135:5, col:54> col:10 used activate 'void (bool, ErrorHandler *)'
| |-ParmVarDecl 0x5592b81e7cd8 <col:19, col:24> col:24 foreground 'bool'
| `-ParmVarDecl 0x5592b81e7d50 <col:36, col:50> col:50 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81e7f78 <line:136:5, col:44> col:17 activate 'void (ErrorHandler *)' inline
| `-ParmVarDecl 0x5592b81e7ee8 <col:26, col:40> col:40 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b81e80c0 <line:137:5, col:47> col:17 set_foreground 'void (bool)' inline
| `-ParmVarDecl 0x5592b81e8030 <col:32, col:37> col:37 foreground 'bool'
|-CXXMethodDecl 0x5592b81e8300 <line:139:5, col:69> col:9 new_notifier_signal 'int (const char *, NotifierSignal &)'
| |-ParmVarDecl 0x5592b81e8180 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5592b81e8228 <col:47, col:63> col:63 signal 'NotifierSignal &'
|-CXXMethodDecl 0x5592b81e8488 <line:140:5, col:64> col:12 notifier_signal_name 'String (const atomic_uint32_t *) const'
| `-ParmVarDecl 0x5592b81e83c0 <col:33, col:56> col:56 signal 'const atomic_uint32_t *'
|-CXXRecordDecl 0x5592b81e8530 <line:145:5, line:167:5> line:145:12 referenced struct Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b81e8648 <col:5, col:12> col:12 implicit referenced struct Port
| |-FieldDecl 0x5592b81e86f0 <line:146:9, col:13> col:13 referenced idx 'int'
| |-FieldDecl 0x5592b81e8758 <line:147:9, col:13> col:13 referenced port 'int'
| |-CXXConstructorDecl 0x5592b81e8810 <line:149:9, line:150:9> line:149:9 used Port 'void ()'
| | `-CompoundStmt 0x5592b8226970 <col:16, line:150:9>
| |-CXXConstructorDecl 0x5592b81e89e8 <line:151:9, line:153:9> line:151:9 used Port 'void (int, int)'
| | |-ParmVarDecl 0x5592b81e88d0 <col:14, col:18> col:18 used i 'int'
| | |-ParmVarDecl 0x5592b81e8950 <col:21, col:25> col:25 used p 'int'
| | |-CXXCtorInitializer Field 0x5592b81e86f0 'idx' 'int'
| | | `-ImplicitCastExpr 0x5592b82269c0 <line:152:19> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5592b8226980 <col:19> 'int' lvalue ParmVar 0x5592b81e88d0 'i' 'int'
| | |-CXXCtorInitializer Field 0x5592b81e8758 'port' 'int'
| | | `-ImplicitCastExpr 0x5592b8226a40 <col:28> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5592b8226a00 <col:28> 'int' lvalue ParmVar 0x5592b81e8950 'p' 'int'
| | `-CompoundStmt 0x5592b8226a90 <col:31, line:153:9>
| |-CXXMethodDecl 0x5592b81e8bc8 <line:155:9, line:157:9> line:155:14 used operator== 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5592b81e8ad8 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5592b8226c90 <col:46, line:157:9>
| |   `-ReturnStmt 0x5592b8226c80 <line:156:13, col:46>
| |     `-BinaryOperator 0x5592b8226c60 <col:20, col:46> 'bool' '&&'
| |       |-BinaryOperator 0x5592b8226b60 <col:20, col:29> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5592b8226b30 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b8226ab0 <col:20> 'const int' lvalue ->idx 0x5592b81e86f0
| |       | |   `-CXXThisExpr 0x5592b8226aa0 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5592b8226b48 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5592b8226b00 <col:27, col:29> 'const int' lvalue .idx 0x5592b81e86f0
| |       |     `-DeclRefExpr 0x5592b8226ae0 <col:27> 'const Router::Port' lvalue ParmVar 0x5592b81e8ad8 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5592b8226c40 <col:36, col:46> 'bool' '=='
| |         |-ImplicitCastExpr 0x5592b8226c10 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5592b8226b90 <col:36> 'const int' lvalue ->port 0x5592b81e8758
| |         |   `-CXXThisExpr 0x5592b8226b80 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5592b8226c28 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5592b8226be0 <col:44, col:46> 'const int' lvalue .port 0x5592b81e8758
| |             `-DeclRefExpr 0x5592b8226bc0 <col:44> 'const Router::Port' lvalue ParmVar 0x5592b81e8ad8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5592b81e8d10 <line:158:9, line:160:9> line:158:14 operator!= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5592b81e8c80 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5592b8226e98 <col:46, line:160:9>
| |   `-ReturnStmt 0x5592b8226e88 <line:159:13, col:46>
| |     `-BinaryOperator 0x5592b8226e68 <col:20, col:46> 'bool' '||'
| |       |-BinaryOperator 0x5592b8226d68 <col:20, col:29> 'bool' '!='
| |       | |-ImplicitCastExpr 0x5592b8226d38 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b8226cb8 <col:20> 'const int' lvalue ->idx 0x5592b81e86f0
| |       | |   `-CXXThisExpr 0x5592b8226ca8 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5592b8226d50 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5592b8226d08 <col:27, col:29> 'const int' lvalue .idx 0x5592b81e86f0
| |       |     `-DeclRefExpr 0x5592b8226ce8 <col:27> 'const Router::Port' lvalue ParmVar 0x5592b81e8c80 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5592b8226e48 <col:36, col:46> 'bool' '!='
| |         |-ImplicitCastExpr 0x5592b8226e18 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5592b8226d98 <col:36> 'const int' lvalue ->port 0x5592b81e8758
| |         |   `-CXXThisExpr 0x5592b8226d88 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5592b8226e30 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5592b8226de8 <col:44, col:46> 'const int' lvalue .port 0x5592b81e8758
| |             `-DeclRefExpr 0x5592b8226dc8 <col:44> 'const Router::Port' lvalue ParmVar 0x5592b81e8c80 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5592b81e8e58 <line:161:9, line:163:9> line:161:14 used operator< 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5592b81e8dc8 <col:24, col:36> col:36 used x 'const Router::Port &'
| | `-CompoundStmt 0x5592b82271c0 <col:45, line:163:9>
| |   `-ReturnStmt 0x5592b82271b0 <line:162:13, col:65>
| |     `-BinaryOperator 0x5592b8227190 <col:20, col:65> 'bool' '||'
| |       |-BinaryOperator 0x5592b8226f70 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5592b8226f40 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b8226ec0 <col:20> 'const int' lvalue ->idx 0x5592b81e86f0
| |       | |   `-CXXThisExpr 0x5592b8226eb0 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5592b8226f58 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5592b8226f10 <col:26, col:28> 'const int' lvalue .idx 0x5592b81e86f0
| |       |     `-DeclRefExpr 0x5592b8226ef0 <col:26> 'const Router::Port' lvalue ParmVar 0x5592b81e8dc8 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5592b8227170 <col:35, col:65> 'bool'
| |         `-BinaryOperator 0x5592b8227150 <col:36, col:61> 'bool' '&&'
| |           |-BinaryOperator 0x5592b8227050 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5592b8227020 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5592b8226fa0 <col:36> 'const int' lvalue ->idx 0x5592b81e86f0
| |           | |   `-CXXThisExpr 0x5592b8226f90 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5592b8227038 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5592b8226ff0 <col:43, col:45> 'const int' lvalue .idx 0x5592b81e86f0
| |           |     `-DeclRefExpr 0x5592b8226fd0 <col:43> 'const Router::Port' lvalue ParmVar 0x5592b81e8dc8 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5592b8227130 <col:52, col:61> 'bool' '<'
| |             |-ImplicitCastExpr 0x5592b8227100 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5592b8227080 <col:52> 'const int' lvalue ->port 0x5592b81e8758
| |             |   `-CXXThisExpr 0x5592b8227070 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5592b8227118 <col:59, col:61> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5592b82270d0 <col:59, col:61> 'const int' lvalue .port 0x5592b81e8758
| |                 `-DeclRefExpr 0x5592b82270b0 <col:59> 'const Router::Port' lvalue ParmVar 0x5592b81e8dc8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5592b81e8fa0 <line:164:9, line:166:9> line:164:14 operator<= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5592b81e8f10 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5592b82274e8 <col:46, line:166:9>
| |   `-ReturnStmt 0x5592b82274d8 <line:165:13, col:66>
| |     `-BinaryOperator 0x5592b82274b8 <col:20, col:66> 'bool' '||'
| |       |-BinaryOperator 0x5592b8227298 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5592b8227268 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b82271e8 <col:20> 'const int' lvalue ->idx 0x5592b81e86f0
| |       | |   `-CXXThisExpr 0x5592b82271d8 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5592b8227280 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5592b8227238 <col:26, col:28> 'const int' lvalue .idx 0x5592b81e86f0
| |       |     `-DeclRefExpr 0x5592b8227218 <col:26> 'const Router::Port' lvalue ParmVar 0x5592b81e8f10 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5592b8227498 <col:35, col:66> 'bool'
| |         `-BinaryOperator 0x5592b8227478 <col:36, col:62> 'bool' '&&'
| |           |-BinaryOperator 0x5592b8227378 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5592b8227348 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5592b82272c8 <col:36> 'const int' lvalue ->idx 0x5592b81e86f0
| |           | |   `-CXXThisExpr 0x5592b82272b8 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5592b8227360 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5592b8227318 <col:43, col:45> 'const int' lvalue .idx 0x5592b81e86f0
| |           |     `-DeclRefExpr 0x5592b82272f8 <col:43> 'const Router::Port' lvalue ParmVar 0x5592b81e8f10 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5592b8227458 <col:52, col:62> 'bool' '<='
| |             |-ImplicitCastExpr 0x5592b8227428 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5592b82273a8 <col:52> 'const int' lvalue ->port 0x5592b81e8758
| |             |   `-CXXThisExpr 0x5592b8227398 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5592b8227440 <col:60, col:62> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5592b82273f8 <col:60, col:62> 'const int' lvalue .port 0x5592b81e8758
| |                 `-DeclRefExpr 0x5592b82273d8 <col:60> 'const Router::Port' lvalue ParmVar 0x5592b81e8f10 'x' 'const Router::Port &'
| |-CXXConstructorDecl 0x5592b8227500 <line:145:12> col:12 implicit constexpr Port 'void (const Router::Port &)' inline default trivial noexcept-unevaluated 0x5592b8227500
| | `-ParmVarDecl 0x5592b8227618 <col:12> col:12 'const Router::Port &'
| |-CXXConstructorDecl 0x5592b82276b8 <col:12> col:12 implicit constexpr Port 'void (Router::Port &&)' inline default trivial noexcept-unevaluated 0x5592b82276b8
| | `-ParmVarDecl 0x5592b82277c8 <col:12> col:12 'Router::Port &&'
| |-CXXDestructorDecl 0x5592b8227860 <col:12> col:12 implicit referenced ~Port 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5592b8227b30 <col:12> col:12 implicit operator= 'Router::Port &(const Router::Port &)' inline default trivial noexcept-unevaluated 0x5592b8227b30
| | `-ParmVarDecl 0x5592b8227c38 <col:12> col:12 'const Router::Port &'
| `-CXXMethodDecl 0x5592b8227ca8 <col:12> col:12 implicit used operator= 'Router::Port &(Router::Port &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5592b8227db8 <col:12> col:12 used 'Router::Port &&'
|   `-CompoundStmt 0x5592b822b630 <col:12>
|     |-BinaryOperator 0x5592b8227f78 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5592b8227f30 <col:12> 'int' lvalue ->idx 0x5592b81e86f0
|     | | `-CXXThisExpr 0x5592b8227f20 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5592b8227f60 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5592b8227ef0 <col:12> 'int' xvalue .idx 0x5592b81e86f0
|     |     `-CXXStaticCastExpr 0x5592b8227ec0 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5592b8227e90 <col:12> 'Router::Port' lvalue ParmVar 0x5592b8227db8 '' 'Router::Port &&'
|     |-BinaryOperator 0x5592b822b5d8 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5592b822b590 <col:12> 'int' lvalue ->port 0x5592b81e8758
|     | | `-CXXThisExpr 0x5592b822b580 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5592b822b5c0 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5592b822b550 <col:12> 'int' xvalue .port 0x5592b81e8758
|     |     `-CXXStaticCastExpr 0x5592b8227fc8 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5592b8227f98 <col:12> 'Router::Port' lvalue ParmVar 0x5592b8227db8 '' 'Router::Port &&'
|     `-ReturnStmt 0x5592b822b620 <col:12>
|       `-UnaryOperator 0x5592b822b608 <col:12> 'Router::Port' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b822b5f8 <col:12> 'Router::Port *' this
|-CXXRecordDecl 0x5592b81e9060 <line:169:5, line:194:5> line:169:12 referenced struct Connection definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b81e9178 <col:5, col:12> col:12 implicit referenced struct Connection
| |-FieldDecl 0x5592b81ec698 <line:170:9, col:17> col:14 referenced p 'Router::Port [2]'
| |-CXXConstructorDecl 0x5592b81ec750 <line:172:9, line:173:9> line:172:9 Connection 'void ()'
| | |-CXXCtorInitializer Field 0x5592b81ec698 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5592b8227838 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5592b8227970 <col:22, line:173:9>
| |-CXXConstructorDecl 0x5592b81eca88 <line:174:9, line:177:9> line:174:9 Connection 'void (int, int, int, int)'
| | |-ParmVarDecl 0x5592b81ec810 <col:20, col:24> col:24 used from_idx 'int'
| | |-ParmVarDecl 0x5592b81ec890 <col:34, col:38> col:38 used from_port 'int'
| | |-ParmVarDecl 0x5592b81ec910 <col:49, col:53> col:53 used to_idx 'int'
| | |-ParmVarDecl 0x5592b81ec990 <col:61, col:65> col:65 used to_port 'int'
| | |-CXXCtorInitializer Field 0x5592b81ec698 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5592b8227980 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5592b822b918 <col:74, line:177:9>
| |   |-ExprWithCleanups 0x5592b822b708 <line:175:13, col:40> 'Router::Port' lvalue
| |   | `-CXXOperatorCallExpr 0x5592b822b6d0 <col:13, col:40> 'Router::Port' lvalue
| |   |   |-ImplicitCastExpr 0x5592b822b6b8 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5592b8227e40 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5592b8227ca8 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |   |   |-ArraySubscriptExpr 0x5592b8227a50 <col:13, col:16> 'Router::Port' lvalue
| |   |   | |-ImplicitCastExpr 0x5592b8227a38 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |   |   | | `-MemberExpr 0x5592b82279e8 <col:13> 'Router::Port [2]' lvalue ->p 0x5592b81ec698
| |   |   | |   `-CXXThisExpr 0x5592b82279d8 <col:13> 'Router::Connection *' implicit this
| |   |   | `-IntegerLiteral 0x5592b8227a18 <col:15> 'int' 0
| |   |   `-MaterializeTemporaryExpr 0x5592b8227e28 <col:20, col:40> 'Router::Port' xvalue
| |   |     `-CXXTemporaryObjectExpr 0x5592b8227af0 <col:20, col:40> 'Router::Port' 'void (int, int)'
| |   |       |-ImplicitCastExpr 0x5592b8227ac0 <col:25> 'int' <LValueToRValue>
| |   |       | `-DeclRefExpr 0x5592b8227a80 <col:25> 'int' lvalue ParmVar 0x5592b81ec910 'to_idx' 'int'
| |   |       `-ImplicitCastExpr 0x5592b8227ad8 <col:33> 'int' <LValueToRValue>
| |   |         `-DeclRefExpr 0x5592b8227aa0 <col:33> 'int' lvalue ParmVar 0x5592b81ec990 'to_port' 'int'
| |   `-ExprWithCleanups 0x5592b822b900 <line:176:13, col:44> 'Router::Port' lvalue
| |     `-CXXOperatorCallExpr 0x5592b822b8c8 <col:13, col:44> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5592b822b8b0 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5592b822b890 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5592b8227ca8 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |       |-ArraySubscriptExpr 0x5592b822b798 <col:13, col:16> 'Router::Port' lvalue
| |       | |-ImplicitCastExpr 0x5592b822b780 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |       | | `-MemberExpr 0x5592b822b730 <col:13> 'Router::Port [2]' lvalue ->p 0x5592b81ec698
| |       | |   `-CXXThisExpr 0x5592b822b720 <col:13> 'Router::Connection *' implicit this
| |       | `-IntegerLiteral 0x5592b822b760 <col:15> 'int' 1
| |       `-MaterializeTemporaryExpr 0x5592b822b878 <col:20, col:44> 'Router::Port' xvalue
| |         `-CXXTemporaryObjectExpr 0x5592b822b838 <col:20, col:44> 'Router::Port' 'void (int, int)'
| |           |-ImplicitCastExpr 0x5592b822b808 <col:25> 'int' <LValueToRValue>
| |           | `-DeclRefExpr 0x5592b822b7c8 <col:25> 'int' lvalue ParmVar 0x5592b81ec810 'from_idx' 'int'
| |           `-ImplicitCastExpr 0x5592b822b820 <col:35> 'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5592b822b7e8 <col:35> 'int' lvalue ParmVar 0x5592b81ec890 'from_port' 'int'
| |-CXXMethodDecl 0x5592b81ecc58 <line:179:9, line:182:9> line:179:21 operator[] 'const Router::Port &(int) const'
| | |-ParmVarDecl 0x5592b81ecb68 <col:32, col:36> col:36 used i 'int'
| | `-CompoundStmt 0x5592b822bed8 <col:45, line:182:9>
| |   |-ParenExpr 0x5592b822bdb8 <line:180:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5592b822bd88 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5592b822ba58 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5592b822ba28 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5592b822b990 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5592b822b978 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5592b822b938 <col:34> 'int' lvalue ParmVar 0x5592b81ecb68 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5592b822b958 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5592b822ba08 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5592b822b9f0 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5592b822b9b0 <col:44> 'int' lvalue ParmVar 0x5592b81ecb68 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5592b822b9d0 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5592b822bab8 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5592b822ba98 <col:59> 'int' 0
| |   |   `-CallExpr 0x5592b822bce8 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5592b822bcd0 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5592b822bcb0 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5592b822bd28 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5592b822bb28 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5592b822bd40 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5592b822bb50 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5592b822bd58 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5592b822bb88 <col:130> 'int' 180
| |   |     `-ImplicitCastExpr 0x5592b822bd70 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5592b822bc98 <col:135, col:149> 'const char [62]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5592b822bc80 <col:149> 'const char [62]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5592b822bc28 <col:149> 'const char [62]' lvalue "const Router::Port &Router::Connection::operator[](int) const"
| |   `-ReturnStmt 0x5592b822bec8 <line:181:13, col:23>
| |     `-ArraySubscriptExpr 0x5592b822bea8 <col:20, col:23> 'const Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5592b822be78 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5592b822bde8 <col:20> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
| |       |   `-CXXThisExpr 0x5592b822bdd8 <col:20> 'const Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5592b822be90 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5592b822be18 <col:22> 'int' lvalue ParmVar 0x5592b81ecb68 'i' 'int'
| |-CXXMethodDecl 0x5592b81ece08 <line:183:9, line:186:9> line:183:15 operator[] 'Router::Port &(int)'
| | |-ParmVarDecl 0x5592b81ecd18 <col:26, col:30> col:30 used i 'int'
| | `-CompoundStmt 0x5592b822c450 <col:33, line:186:9>
| |   |-ParenExpr 0x5592b822c370 <line:184:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5592b822c340 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5592b822c018 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5592b822bfe8 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5592b822bf50 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5592b822bf38 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5592b822bef8 <col:34> 'int' lvalue ParmVar 0x5592b81ecd18 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5592b822bf18 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5592b822bfc8 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5592b822bfb0 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5592b822bf70 <col:44> 'int' lvalue ParmVar 0x5592b81ecd18 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5592b822bf90 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5592b822c078 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5592b822c058 <col:59> 'int' 0
| |   |   `-CallExpr 0x5592b822c2a0 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5592b822c288 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5592b822c268 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5592b822c2e0 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5592b822c0e8 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5592b822c2f8 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5592b822c110 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5592b822c310 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5592b822c148 <col:130> 'int' 184
| |   |     `-ImplicitCastExpr 0x5592b822c328 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5592b822c250 <col:135, col:149> 'const char [50]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5592b822c238 <col:149> 'const char [50]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5592b822c1e8 <col:149> 'const char [50]' lvalue "Router::Port &Router::Connection::operator[](int)"
| |   `-ReturnStmt 0x5592b822c440 <line:185:13, col:23>
| |     `-ArraySubscriptExpr 0x5592b822c420 <col:20, col:23> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5592b822c3f0 <col:20> 'Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5592b822c3a0 <col:20> 'Router::Port [2]' lvalue ->p 0x5592b81ec698
| |       |   `-CXXThisExpr 0x5592b822c390 <col:20> 'Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5592b822c408 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5592b822c3d0 <col:22> 'int' lvalue ParmVar 0x5592b81ecd18 'i' 'int'
| |-CXXMethodDecl 0x5592b81ecfa8 <line:188:9, line:190:9> line:188:14 operator== 'bool (const Router::Connection &) const'
| | |-ParmVarDecl 0x5592b81ecee8 <col:25, col:43> col:43 used x 'const Router::Connection &'
| | `-CompoundStmt 0x5592b822c828 <col:52, line:190:9>
| |   `-ReturnStmt 0x5592b822c818 <line:189:13, col:51>
| |     `-BinaryOperator 0x5592b822c7f8 <col:20, col:51> 'bool' '&&'
| |       |-CXXOperatorCallExpr 0x5592b822c610 <col:20, col:33> 'bool'
| |       | |-ImplicitCastExpr 0x5592b822c5f8 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5592b822c5b0 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5592b81e8bc8 'operator==' 'bool (const Router::Port &) const'
| |       | |-ArraySubscriptExpr 0x5592b822c4e8 <col:20, col:23> 'const Router::Port' lvalue
| |       | | |-ImplicitCastExpr 0x5592b822c4d0 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | | | `-MemberExpr 0x5592b822c480 <col:20> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
| |       | | |   `-CXXThisExpr 0x5592b822c470 <col:20> 'const Router::Connection *' implicit this
| |       | | `-IntegerLiteral 0x5592b822c4b0 <col:22> 'int' 0
| |       | `-ArraySubscriptExpr 0x5592b822c590 <col:28, col:33> 'const Router::Port' lvalue
| |       |   |-ImplicitCastExpr 0x5592b822c578 <col:28, col:30> 'const Router::Port *' <ArrayToPointerDecay>
| |       |   | `-MemberExpr 0x5592b822c528 <col:28, col:30> 'Router::Port const[2]' lvalue .p 0x5592b81ec698
| |       |   |   `-DeclRefExpr 0x5592b822c508 <col:28> 'const Router::Connection' lvalue ParmVar 0x5592b81ecee8 'x' 'const Router::Connection &'
| |       |   `-IntegerLiteral 0x5592b822c558 <col:32> 'int' 0
| |       `-CXXOperatorCallExpr 0x5592b822c7c0 <col:38, col:51> 'bool'
| |         |-ImplicitCastExpr 0x5592b822c7a8 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5592b822c788 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5592b81e8bc8 'operator==' 'bool (const Router::Port &) const'
| |         |-ArraySubscriptExpr 0x5592b822c6c0 <col:38, col:41> 'const Router::Port' lvalue
| |         | |-ImplicitCastExpr 0x5592b822c6a8 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
| |         | | `-MemberExpr 0x5592b822c658 <col:38> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
| |         | |   `-CXXThisExpr 0x5592b822c648 <col:38> 'const Router::Connection *' implicit this
| |         | `-IntegerLiteral 0x5592b822c688 <col:40> 'int' 1
| |         `-ArraySubscriptExpr 0x5592b822c768 <col:46, col:51> 'const Router::Port' lvalue
| |           |-ImplicitCastExpr 0x5592b822c750 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
| |           | `-MemberExpr 0x5592b822c700 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5592b81ec698
| |           |   `-DeclRefExpr 0x5592b822c6e0 <col:46> 'const Router::Connection' lvalue ParmVar 0x5592b81ecee8 'x' 'const Router::Connection &'
| |           `-IntegerLiteral 0x5592b822c730 <col:50> 'int' 1
| `-CXXMethodDecl 0x5592b81ed0f0 <line:191:9, line:193:9> line:191:14 operator< 'bool (const Router::Connection &) const'
|   |-ParmVarDecl 0x5592b81ed060 <col:24, col:42> col:42 used x 'const Router::Connection &'
|   `-CompoundStmt 0x5592b822cdc0 <col:51, line:193:9>
|     `-ReturnStmt 0x5592b822cdb0 <line:192:13, col:69>
|       `-BinaryOperator 0x5592b822cd90 <col:20, col:69> 'bool' '||'
|         |-CXXOperatorCallExpr 0x5592b822c9b8 <col:20, col:32> 'bool'
|         | |-ImplicitCastExpr 0x5592b822c9a0 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5592b822c980 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5592b81e8e58 'operator<' 'bool (const Router::Port &) const'
|         | |-ArraySubscriptExpr 0x5592b822c8b8 <col:20, col:23> 'const Router::Port' lvalue
|         | | |-ImplicitCastExpr 0x5592b822c8a0 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
|         | | | `-MemberExpr 0x5592b822c850 <col:20> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
|         | | |   `-CXXThisExpr 0x5592b822c840 <col:20> 'const Router::Connection *' implicit this
|         | | `-IntegerLiteral 0x5592b822c880 <col:22> 'int' 0
|         | `-ArraySubscriptExpr 0x5592b822c960 <col:27, col:32> 'const Router::Port' lvalue
|         |   |-ImplicitCastExpr 0x5592b822c948 <col:27, col:29> 'const Router::Port *' <ArrayToPointerDecay>
|         |   | `-MemberExpr 0x5592b822c8f8 <col:27, col:29> 'Router::Port const[2]' lvalue .p 0x5592b81ec698
|         |   |   `-DeclRefExpr 0x5592b822c8d8 <col:27> 'const Router::Connection' lvalue ParmVar 0x5592b81ed060 'x' 'const Router::Connection &'
|         |   `-IntegerLiteral 0x5592b822c928 <col:31> 'int' 0
|         `-ParenExpr 0x5592b822cd70 <col:37, col:69> 'bool'
|           `-BinaryOperator 0x5592b822cd50 <col:38, col:68> 'bool' '&&'
|             |-CXXOperatorCallExpr 0x5592b822cb68 <col:38, col:51> 'bool'
|             | |-ImplicitCastExpr 0x5592b822cb50 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x5592b822cb30 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5592b81e8bc8 'operator==' 'bool (const Router::Port &) const'
|             | |-ArraySubscriptExpr 0x5592b822ca68 <col:38, col:41> 'const Router::Port' lvalue
|             | | |-ImplicitCastExpr 0x5592b822ca50 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
|             | | | `-MemberExpr 0x5592b822ca00 <col:38> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
|             | | |   `-CXXThisExpr 0x5592b822c9f0 <col:38> 'const Router::Connection *' implicit this
|             | | `-IntegerLiteral 0x5592b822ca30 <col:40> 'int' 0
|             | `-ArraySubscriptExpr 0x5592b822cb10 <col:46, col:51> 'const Router::Port' lvalue
|             |   |-ImplicitCastExpr 0x5592b822caf8 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
|             |   | `-MemberExpr 0x5592b822caa8 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5592b81ec698
|             |   |   `-DeclRefExpr 0x5592b822ca88 <col:46> 'const Router::Connection' lvalue ParmVar 0x5592b81ed060 'x' 'const Router::Connection &'
|             |   `-IntegerLiteral 0x5592b822cad8 <col:50> 'int' 0
|             `-CXXOperatorCallExpr 0x5592b822cd18 <col:56, col:68> 'bool'
|               |-ImplicitCastExpr 0x5592b822cd00 <col:61> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5592b822cce0 <col:61> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5592b81e8e58 'operator<' 'bool (const Router::Port &) const'
|               |-ArraySubscriptExpr 0x5592b822cc18 <col:56, col:59> 'const Router::Port' lvalue
|               | |-ImplicitCastExpr 0x5592b822cc00 <col:56> 'const Router::Port *' <ArrayToPointerDecay>
|               | | `-MemberExpr 0x5592b822cbb0 <col:56> 'Router::Port const[2]' lvalue ->p 0x5592b81ec698
|               | |   `-CXXThisExpr 0x5592b822cba0 <col:56> 'const Router::Connection *' implicit this
|               | `-IntegerLiteral 0x5592b822cbe0 <col:58> 'int' 1
|               `-ArraySubscriptExpr 0x5592b822ccc0 <col:63, col:68> 'const Router::Port' lvalue
|                 |-ImplicitCastExpr 0x5592b822cca8 <col:63, col:65> 'const Router::Port *' <ArrayToPointerDecay>
|                 | `-MemberExpr 0x5592b822cc58 <col:63, col:65> 'Router::Port const[2]' lvalue .p 0x5592b81ec698
|                 |   `-DeclRefExpr 0x5592b822cc38 <col:63> 'const Router::Connection' lvalue ParmVar 0x5592b81ed060 'x' 'const Router::Connection &'
|                 `-IntegerLiteral 0x5592b822cc88 <col:67> 'int' 1
|-AccessSpecDecl 0x5592b81ed1b0 <line:216:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b81ed1d8 <line:218:5, col:11> col:11 class RouterContextErrh
|-EnumDecl 0x5592b81ed290 <line:220:5, line:223:5> line:220:5
| |-EnumConstantDecl 0x5592b81ed350 <line:221:9> col:9 ROUTER_NEW 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5592b81ed3a0 <col:21> col:21 referenced ROUTER_PRECONFIGURE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5592b81ed3f0 <col:42> col:42 ROUTER_PREINITIALIZE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5592b81ed440 <line:222:9> col:9 referenced ROUTER_LIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| `-EnumConstantDecl 0x5592b81ed490 <col:22> col:22 ROUTER_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
|-EnumDecl 0x5592b81ed4e0 <line:224:5, line:227:5> line:224:5
| |-EnumConstantDecl 0x5592b81ed5f8 <line:225:9, col:25> col:9 referenced RUNNING_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5592b81ed5d8 <col:24, col:25> 'int' Int: -2
| |   `-UnaryOperator 0x5592b81ed5c0 <col:24, col:25> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b81ed5a0 <col:25> 'int' 2
| |-EnumConstantDecl 0x5592b81ed6a0 <col:28, col:48> col:28 RUNNING_INACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5592b81ed680 <col:47, col:48> 'int' Int: -1
| |   `-UnaryOperator 0x5592b81ed668 <col:47, col:48> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b81ed648 <col:48> 'int' 1
| |-EnumConstantDecl 0x5592b81ed730 <col:51, col:71> col:51 RUNNING_PREPARING 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5592b81ed710 <col:71> 'int' Int: 0
| |   `-IntegerLiteral 0x5592b81ed6f0 <col:71> 'int' 0
| |-EnumConstantDecl 0x5592b81ed7c0 <line:226:9, col:30> col:9 referenced RUNNING_BACKGROUND 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5592b81ed7a0 <col:30> 'int' Int: 1
| |   `-IntegerLiteral 0x5592b81ed780 <col:30> 'int' 1
| `-EnumConstantDecl 0x5592b81ed850 <col:33, col:50> col:33 referenced RUNNING_ACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
|   `-ConstantExpr 0x5592b81ed830 <col:50> 'int' Int: 2
|     `-IntegerLiteral 0x5592b81ed810 <col:50> 'int' 2
|-FieldDecl 0x5592b81ed8b0 <line:229:5, col:13> col:13 referenced _master 'Master *'
|-FieldDecl 0x5592b81ed910 <line:231:5, col:21> col:21 referenced _runcount 'atomic_uint32_t'
|-FieldDecl 0x5592b81ed978 <line:233:5, col:18> col:18 referenced _state 'volatile int'
|-FieldDecl 0x5592b81eda18 <line:234:5, col:30> col:10 _have_connections 'bool'
| `-ConstantExpr 0x5592b81ed9f8 <col:30> 'int' Int: 1
|   `-IntegerLiteral 0x5592b81ed9c8 <col:30> 'int' 1
|-FieldDecl 0x5592b81edab8 <line:235:5, col:33> col:18 _conn_sorted 'bool' mutable
| `-ConstantExpr 0x5592b81eda98 <col:33> 'int' Int: 1
|   `-IntegerLiteral 0x5592b81eda68 <col:33> 'int' 1
|-FieldDecl 0x5592b81edb58 <line:236:5, col:32> col:10 _have_configuration 'bool'
| `-ConstantExpr 0x5592b81edb38 <col:32> 'int' Int: 1
|   `-IntegerLiteral 0x5592b81edb08 <col:32> 'int' 1
|-FieldDecl 0x5592b81edbc0 <line:237:5, col:18> col:18 referenced _running 'volatile int'
|-FieldDecl 0x5592b81edc20 <line:239:5, col:21> col:21 referenced _refcount 'atomic_uint32_t'
|-FieldDecl 0x5592b81f80d0 <line:241:5, col:23> col:23 referenced _elements 'Vector<Element *>':'Vector<Element *>'
|-FieldDecl 0x5592b81f81d0 <line:242:5, col:20> col:20 _element_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5592b81f82d0 <line:243:5, col:20> col:20 _element_configurations 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5592b81ff1d0 <line:244:5, col:22> col:22 _element_landmarkids 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x5592b81ff2e0 <line:245:5, col:25> col:25 referenced _element_home_thread_ids 'Vector<int>':'Vector<int>' mutable
|-CXXRecordDecl 0x5592b81ff330 <line:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
| |-DefinitionData aggregate standard_layout has_mutable_fields
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5592b81ff448 <col:5, col:12> col:12 implicit struct element_landmark_t
| |-FieldDecl 0x5592b81ff4e8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
| |-FieldDecl 0x5592b81ff548 <line:249:9, col:16> col:16 filename 'String'
| |-CXXConstructorDecl 0x5592b81ff5e0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5592b81ff5e0
| | `-ParmVarDecl 0x5592b81ff6f8 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXConstructorDecl 0x5592b81ff798 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5592b81ff798
| | `-ParmVarDecl 0x5592b81ff8a8 <col:12> col:12 'Router::element_landmark_t &&'
| |-CXXMethodDecl 0x5592b81ff948 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5592b81ff948
| | `-ParmVarDecl 0x5592b81ffa58 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXMethodDecl 0x5592b81ffac8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5592b81ffac8
| | `-ParmVarDecl 0x5592b8202130 <col:12> col:12 'Router::element_landmark_t &&'
| `-CXXDestructorDecl 0x5592b82021b8 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5592b82021b8
|-FieldDecl 0x5592b820e170 <line:251:5, col:32> col:32 _element_landmarks 'Vector<Router::element_landmark_t>':'Vector<Router::element_landmark_t>'
|-FieldDecl 0x5592b820e1d0 <line:252:5, col:14> col:14 _last_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5592b820e2e0 <line:254:5, col:25> col:25 _element_name_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5592b820e638 <line:255:5, col:40> col:17 referenced _element_gport_offset 'Vector<int> [2]'
|-FieldDecl 0x5592b820e740 <line:256:5, col:17> col:17 _element_configure_order 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b8216e40 <line:258:5, col:32> col:32 _conn 'Vector<Router::Connection>':'Vector<Router::Connection>' mutable
|-FieldDecl 0x5592b8216f50 <line:259:5, col:25> col:25 _conn_output_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5592b8217050 <line:261:5, col:20> col:20 _requirements 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5592b8217160 <line:263:5, col:17> col:17 _ehandler_first_by_element 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b8217270 <line:264:5, col:17> col:17 _ehandler_to_handler 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b8217380 <line:265:5, col:17> col:17 _ehandler_next 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b8217490 <line:267:5, col:17> col:17 _handler_first_by_name 'Vector<int>':'Vector<int>'
|-EnumDecl 0x5592b82174e0 <line:269:5, col:33> col:5
| `-EnumConstantDecl 0x5592b82175e0 <col:12, col:29> col:12 HANDLER_BUFSIZ 'Router::(anonymous enum at ../dummy_inc/click/router.hh:269:5)'
|   `-ImplicitCastExpr 0x5592b8217630 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b82175c0 <col:29> 'int' Int: 256
|       `-IntegerLiteral 0x5592b82175a0 <col:29> 'int' 256
|-FieldDecl 0x5592b8217690 <line:270:5, col:15> col:15 _handler_bufs 'Handler **'
|-FieldDecl 0x5592b82176f8 <line:271:5, col:9> col:9 _nhandlers_bufs 'int'
|-FieldDecl 0x5592b8217760 <line:272:5, col:9> col:9 _free_handler 'int'
|-FieldDecl 0x5592b8217860 <line:274:5, col:20> col:20 _attachment_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5592b8221c20 <line:275:5, col:19> col:19 _attachments 'Vector<void *>':'Vector<void *>'
|-FieldDecl 0x5592b8221c80 <line:277:5, col:14> col:14 referenced _root_element 'Element *'
|-FieldDecl 0x5592b8221ce0 <line:278:5, col:12> col:12 _configuration 'String'
|-CXXRecordDecl 0x5592b8221d30 <line:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
| |-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5592b8221e48 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
| |-EnumDecl 0x5592b8221ed8 <line:281:9, col:32> col:9
| | `-EnumConstantDecl 0x5592b8221fe0 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
| |   `-ImplicitCastExpr 0x5592b8222030 <col:27> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x5592b8221fc0 <col:27> 'int' Int: 4096
| |       `-IntegerLiteral 0x5592b8221fa0 <col:27> 'int' 4096
| |-FieldDecl 0x5592b8222058 <line:282:9, col:16> col:16 name 'String'
| |-FieldDecl 0x5592b82220c0 <line:283:9, col:13> col:13 nsig 'int'
| |-FieldDecl 0x5592b82222b8 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
| |-FieldDecl 0x5592b8222348 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
| |-CXXConstructorDecl 0x5592b8222508 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| | |-ParmVarDecl 0x5592b82223a8 <col:28, col:42> col:42 used n 'const String &'
| | |-ParmVarDecl 0x5592b8222420 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| | |-CXXCtorInitializer Field 0x5592b8222058 'name' 'String'
| | | `-CXXConstructExpr 0x5592b822ce18 <line:287:15, col:21> 'String' 'void (const String &)'
| | |   `-DeclRefExpr 0x5592b822cdd8 <col:20> 'const String' lvalue ParmVar 0x5592b82223a8 'n' 'const String &'
| | |-CXXCtorInitializer Field 0x5592b82220c0 'nsig' 'int'
| | | `-IntegerLiteral 0x5592b822ce70 <col:29> 'int' 0
| | |-CXXCtorInitializer Field 0x5592b82222b8 'sig' 'atomic_uint32_t [128]'
| | | `-CXXConstructExpr 0x5592b822cf58 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| | |-CXXCtorInitializer Field 0x5592b8222348 'next' 'Router::notifier_signals_t *'
| | | `-ImplicitCastExpr 0x5592b822cf18 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5592b822ced8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5592b8222420 'nx' 'Router::notifier_signals_t *'
| | `-CompoundStmt 0x5592b822d1e8 <col:42, line:289:9>
| |   `-CallExpr 0x5592b822d198 <line:288:13, col:43> 'void *'
| |     |-ImplicitCastExpr 0x5592b822d180 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5592b822d160 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x5592b7d6dcd8 'memset' 'void *(void *, int, size_t) throw()'
| |     |-ImplicitCastExpr 0x5592b822d1d0 <col:20, col:26> 'void *' <BitCast>
| |     | `-UnaryOperator 0x5592b822d0a8 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
| |     |   `-ArraySubscriptExpr 0x5592b822d088 <col:21, col:26> 'atomic_uint32_t' lvalue
| |     |     |-ImplicitCastExpr 0x5592b822d070 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
| |     |     | `-MemberExpr 0x5592b822d020 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5592b82222b8
| |     |     |   `-CXXThisExpr 0x5592b822d010 <col:21> 'Router::notifier_signals_t *' implicit this
| |     |     `-IntegerLiteral 0x5592b822d050 <col:25> 'int' 0
| |     |-IntegerLiteral 0x5592b822d0c0 <col:29> 'int' 0
| |     `-UnaryExprOrTypeTraitExpr 0x5592b822d140 <col:32, col:42> 'unsigned long' sizeof
| |       `-ParenExpr 0x5592b822d120 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
| |         `-MemberExpr 0x5592b822d0f0 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5592b82222b8 non_odr_use_unevaluated
| |           `-CXXThisExpr 0x5592b822d0e0 <col:39> 'Router::notifier_signals_t *' implicit this
| |-CXXConstructorDecl 0x5592b82225e8 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5592b82225e8
| | `-ParmVarDecl 0x5592b82226f8 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXConstructorDecl 0x5592b8222798 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5592b8222798
| | `-ParmVarDecl 0x5592b82228a8 <col:12> col:12 'Router::notifier_signals_t &&'
| |-CXXMethodDecl 0x5592b8222948 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5592b8222948
| | `-ParmVarDecl 0x5592b8222a58 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXMethodDecl 0x5592b8222ac8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5592b8222ac8
| | `-ParmVarDecl 0x5592b8222bd8 <col:12> col:12 'Router::notifier_signals_t &&'
| `-CXXDestructorDecl 0x5592b8222c60 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5592b8222c60
|-FieldDecl 0x5592b8222d50 <line:291:5, col:25> col:25 _notifier_signals 'Router::notifier_signals_t *'
|-FieldDecl 0x5592b8222db0 <line:292:5, col:27> col:27 referenced _arena_factory 'HashMap_ArenaFactory *'
|-FieldDecl 0x5592b8222e10 <line:293:5, col:13> col:13 referenced _hotswap_router 'Router *'
|-FieldDecl 0x5592b8222e70 <line:294:5, col:18> col:18 referenced _thread_sched 'ThreadSched *'
|-FieldDecl 0x5592b8222ed0 <line:295:5, col:23> col:23 referenced _name_info 'NameInfo *' mutable
|-FieldDecl 0x5592b8222fe0 <line:296:5, col:17> col:17 _flow_code_override_eindex 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b82230e0 <line:297:5, col:20> col:20 referenced _flow_code_override 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5592b8223140 <line:299:5, col:13> col:13 _next_router 'Router *'
|-CXXConstructorDecl 0x5592b8223288 <line:305:5, col:25> col:5 Router 'void (const Router &)'
| `-ParmVarDecl 0x5592b82231c8 <col:12, col:24> col:25 'const Router &'
|-CXXMethodDecl 0x5592b8223438 <line:306:5, col:36> col:13 operator= 'Router &(const Router &)'
| `-ParmVarDecl 0x5592b8223348 <col:23, col:35> col:36 'const Router &'
|-CXXMethodDecl 0x5592b8223580 <line:308:5, col:49> col:17 remove_connection 'Router::Connection *(Router::Connection *)'
| `-ParmVarDecl 0x5592b82234f0 <col:35, col:47> col:47 cp 'Router::Connection *'
|-CXXMethodDecl 0x5592b8223928 <line:309:5, line:310:62> line:309:10 hookup_error 'void (const Router::Port &, bool, const char *, ErrorHandler *, bool)'
| |-ParmVarDecl 0x5592b8223638 <col:23, col:35> col:35 p 'const Router::Port &'
| |-ParmVarDecl 0x5592b82236b0 <col:38, col:43> col:43 isoutput 'bool'
| |-ParmVarDecl 0x5592b8223730 <col:53, col:65> col:65 message 'const char *'
| |-ParmVarDecl 0x5592b82237a8 <line:310:23, col:37> col:37 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5592b8223820 <col:43, col:57> col:48 active 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b8226960 <col:57> 'bool' false
|-CXXMethodDecl 0x5592b8223a98 <line:311:5, col:44> col:9 check_hookup_elements 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5592b8223a00 <col:31, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8223be8 <line:312:5, col:41> col:9 check_hookup_range 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5592b8223b50 <col:28, col:40> col:41 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8223d38 <line:313:5, col:48> col:9 check_hookup_completeness 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5592b8223ca0 <col:35, col:47> col:48 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8223e90 <line:315:5, col:48> col:17 used hard_flow_code_override 'const char *(int) const'
| `-ParmVarDecl 0x5592b8223df8 <col:41, col:45> col:45 e 'int'
|-CXXMethodDecl 0x5592b82241b0 <line:316:5, col:74> col:9 processing_error 'int (const Router::Connection &, bool, int, ErrorHandler *)'
| |-ParmVarDecl 0x5592b8223f48 <col:26, col:44> col:44 conn 'const Router::Connection &'
| |-ParmVarDecl 0x5592b8223fc0 <col:50> col:54 'bool'
| |-ParmVarDecl 0x5592b8224040 <col:56> col:59 'int'
| `-ParmVarDecl 0x5592b82240b8 <col:61, col:73> col:74 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8224318 <line:317:5, col:42> col:9 check_push_and_pull 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5592b8224280 <col:29, col:41> col:42 'ErrorHandler *'
|-CXXMethodDecl 0x5592b82243e0 <line:319:5, col:26> col:10 set_connections 'void ()'
|-CXXMethodDecl 0x5592b82244a0 <line:320:5, col:29> col:10 sort_connections 'void () const'
|-CXXMethodDecl 0x5592b82246a0 <line:321:5, col:64> col:9 connindex_lower_bound 'int (bool, const Router::Port &) const'
| |-ParmVarDecl 0x5592b8224550 <col:31, col:36> col:36 isoutput 'bool'
| `-ParmVarDecl 0x5592b82245c8 <col:46, col:58> col:58 port 'const Router::Port &'
|-CXXMethodDecl 0x5592b8224770 <line:323:5, col:22> col:10 make_gports 'void ()'
|-CXXMethodDecl 0x5592b82248b8 <line:324:5, line:326:5> line:324:16 ngports 'int (bool) const' inline
| |-ParmVarDecl 0x5592b8224820 <col:24, col:29> col:29 used isout 'bool'
| `-CompoundStmt 0x5592b822d420 <col:42, line:326:5>
|   `-ReturnStmt 0x5592b822d410 <line:325:9, col:50>
|     `-ImplicitCastExpr 0x5592b822d3f8 <col:16, col:50> 'int':'int' <LValueToRValue>
|       `-CXXMemberCallExpr 0x5592b822d3d8 <col:16, col:50> 'const int':'const int' lvalue
|         `-MemberExpr 0x5592b822d3a8 <col:16, col:45> '<bound member function type>' .back 0x5592b810c4f8
|           `-ArraySubscriptExpr 0x5592b822d328 <col:16, col:43> 'const Vector<int>':'const Vector<int>' lvalue
|             |-ImplicitCastExpr 0x5592b822d2f8 <col:16> 'const Vector<int> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b822d210 <col:16> 'Vector<int> const[2]' lvalue ->_element_gport_offset 0x5592b820e638
|             |   `-CXXThisExpr 0x5592b822d200 <col:16> 'const Router *' implicit this
|             `-ImplicitCastExpr 0x5592b822d310 <col:38> 'bool' <LValueToRValue>
|               `-DeclRefExpr 0x5592b822d240 <col:38> 'bool' lvalue ParmVar 0x5592b8224820 'isout' 'bool'
|-CXXMethodDecl 0x5592b8224a88 <line:327:5, col:55> col:16 gport 'int (bool, const Router::Port &) const' inline
| |-ParmVarDecl 0x5592b8224970 <col:22, col:27> col:27 isoutput 'bool'
| `-ParmVarDecl 0x5592b82249e8 <col:37, col:49> col:49 port 'const Router::Port &'
|-CXXMethodDecl 0x5592b8224be0 <line:329:5, col:47> col:9 used hard_home_thread_id 'int (const Element *) const'
| `-ParmVarDecl 0x5592b8224b48 <col:29, col:44> col:44 e 'const Element *'
|-CXXMethodDecl 0x5592b8224e88 <line:331:5, col:67> col:9 element_lerror 'int (ErrorHandler *, Element *, const char *, ...) const'
| |-ParmVarDecl 0x5592b8224c98 <col:24, col:36> col:37 'ErrorHandler *'
| |-ParmVarDecl 0x5592b8224d10 <col:39, col:46> col:47 'Element *'
| `-ParmVarDecl 0x5592b8224d90 <col:49, col:59> col:60 'const char *'
|-CXXMethodDecl 0x5592b8225060 <line:334:5, col:40> col:10 initialize_handlers 'void (bool, bool)'
| |-ParmVarDecl 0x5592b8224f50 <col:30> col:34 'bool'
| `-ParmVarDecl 0x5592b8224fc8 <col:36> col:40 'bool'
|-CXXMethodDecl 0x5592b82251e8 <line:335:5, col:35> col:21 xhandler 'Handler *(int) const' inline
| `-ParmVarDecl 0x5592b8225128 <col:30> col:33 'int'
|-CXXMethodDecl 0x5592b8225480 <line:336:5, col:60> col:9 find_ehandler 'int (int, const String &, bool) const'
| |-ParmVarDecl 0x5592b82252a8 <col:23> col:26 'int'
| |-ParmVarDecl 0x5592b8225320 <col:28, col:40> col:41 'const String &'
| `-ParmVarDecl 0x5592b8225398 <col:43, col:48> col:48 allow_star 'bool'
|-CXXMethodDecl 0x5592b8225698 <line:337:5, col:70> col:27 fetch_handler 'Handler (const Element *, const String &)' static inline
| |-ParmVarDecl 0x5592b8225548 <col:41, col:54> col:55 'const Element *'
| `-ParmVarDecl 0x5592b82255c0 <col:57, col:69> col:70 'const String &'
|-CXXMethodDecl 0x5592b82258a8 <line:338:5, col:52> col:10 store_local_handler 'void (int, Handler &)'
| |-ParmVarDecl 0x5592b8225760 <col:30, col:34> col:34 eindex 'int'
| `-ParmVarDecl 0x5592b82257d8 <col:42, col:51> col:51 h 'Handler &'
|-CXXMethodDecl 0x5592b8225a28 <line:339:5, col:48> col:17 store_global_handler 'void (Handler &)' static
| `-ParmVarDecl 0x5592b8225968 <col:38, col:47> col:47 h 'Handler &'
|-CXXMethodDecl 0x5592b8225c28 <line:340:5, col:72> col:24 store_handler 'void (const Element *, Handler &)' static inline
| |-ParmVarDecl 0x5592b8225ae0 <col:38, col:53> col:53 element 'const Element *'
| `-ParmVarDecl 0x5592b8225b58 <col:62, col:71> col:71 h 'Handler &'
|-CXXMethodDecl 0x5592b8225e00 <line:343:5, col:66> col:19 router_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5592b8225ce8 <col:39, col:48> col:48 e 'Element *'
| `-ParmVarDecl 0x5592b8225d68 <col:51, col:57> col:57 user_data 'void *'
|-CXXMethodDecl 0x5592b82260e0 <line:344:5, col:103> col:16 router_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5592b8225ec0 <col:37, col:51> col:51 str 'const String &'
| |-ParmVarDecl 0x5592b8225f38 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5592b8225fb8 <col:68, col:74> col:74 user_data 'void *'
| `-ParmVarDecl 0x5592b8226030 <col:85, col:99> col:99 errh 'ErrorHandler *'
|-FriendDecl 0x5592b82261c0 <line:347:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5592b8226220 <line:348:5, col:18> col:12 'class Task':'Task'
`-FriendDecl 0x5592b82264a0 <line:349:5, col:44> col:25
  `-CXXMethodDecl 0x5592b82263a0 parent 0x5592b806f340 prev 0x5592b807ef68 <col:5, col:44> col:25 set_nports 'int (int, int)'
    |-ParmVarDecl 0x5592b8226280 <col:36> col:39 'int'
    `-ParmVarDecl 0x5592b8226300 <col:41> col:44 'int'

Layout: <CGRecordLayout
  LLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  NonVirtualBaseLLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:2 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b806f340 prev 0x5592b806f0c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b806f438 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5592b806f4c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5592b806f528 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5592b806f618 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5592b806f718 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5592b806f8e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5592b806f798 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5592b806f810 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5592b806fa78 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5592b806f9b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5592b806fb20 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5592b806fc58 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5592b806fb90 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5592b806fdf8 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5592b806fd38 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5592b806ff98 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5592b806fed8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5592b8070040 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5592b8070140 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5592b8070220 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8070120 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b8070100 <col:26> 'int' 1
| `-EnumConstantDecl 0x5592b80701d0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5592b8070238 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b80701b0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5592b8070190 <col:44> 'int' 2
|-CXXMethodDecl 0x5592b8070380 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5592b8070268 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5592b80702e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5592b80704d8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5592b8070448 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5592b8070718 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5592b8070598 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5592b8070610 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5592b80707c8 <col:20>
| `-OptimizeNoneAttr 0x5592b8070820 <col:30>
|-CXXMethodDecl 0x5592b8070928 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5592b8070860 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5592b80709d0 <col:20>
| `-OptimizeNoneAttr 0x5592b8070a28 <col:30>
|-CXXMethodDecl 0x5592b8070a78 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5592b8070b40 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5592b8070c58 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5592b8070ce0 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x5592b8070d68 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5592b8070df0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5592b8070e78 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5592b8070f08 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5592b8070fc8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5592b8071050 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5592b80710d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5592b8071160 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5592b80711e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5592b8071270 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5592b8071300 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5592b80713c0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5592b8071450 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5592b80715a0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5592b8071508 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5592b8071730 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5592b8071660 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5592b80719e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5592b80717e8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5592b8071868 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5592b80718e8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5592b8071a98 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5592b8071ba0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5592b8071e30 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8071b80 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b8071b60 <col:33> 'int' 0
| |-EnumConstantDecl 0x5592b8071c30 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5592b8071e48 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8071c10 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5592b8071bf0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5592b8071cc0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5592b8071e60 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8071ca0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5592b8071c80 <col:38> 'int' 90
| |-EnumConstantDecl 0x5592b8071d50 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5592b8071e78 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8071d30 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5592b8071d10 <col:35> 'int' 100
| `-EnumConstantDecl 0x5592b8071de0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5592b8071e90 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8071dc0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5592b8071da0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5592b8071ed0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5592b8072310 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5592b8072180 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5592b80721f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b80723e0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5592b8072560 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5592b8072490 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8072768 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5592b8072618 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5592b8072690 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8072868 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5592b8072908 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5592b80729d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072a60 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5592b8072c90 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8072a40 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5592b8072a20 <col:36> 'int' EnumConstant 0x5592b80729d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072ab0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072b00 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072b50 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072ba0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5592b8072bf0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5592b8072c40 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5592b8072d78 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5592b8072cb8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5592b8072e40 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5592b8072f00 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5592b8072fc0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5592b8073080 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5592b8073198 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5592b8073260 <line:117:5, col:25> col:16 used eindex 'int () const' inline
|-CXXMethodDecl 0x5592b80733e0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5592b8073310 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5592b8073508 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5592b8073708 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5592b80735b8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5592b8073638 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5592b8081058 <col:54, line:127:5>
|   |-ParenExpr 0x5592b8080f08 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5592b8080ed8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8080bc8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5592b8080ba0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5592b8080b88 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5592b8080b70 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5592b8080b40 <col:31> 'Router *' lvalue ->_router 0x5592b807ea20
|   |   |         `-CXXThisExpr 0x5592b8080b30 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5592b8080c28 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8080c08 <col:48> 'int' 0
|   |   `-CallExpr 0x5592b8080e38 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5592b8080e20 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8080e00 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8080e78 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8080c98 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5592b8080e90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8080cb8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5592b8080ea8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8080cf0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5592b8080ec0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8080de8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8080dd0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8080d88 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5592b8080fa0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5592b8080f38 <col:9> 'Router *' lvalue ->_router 0x5592b807ea20
|   | | `-CXXThisExpr 0x5592b8080f28 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5592b8080f88 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5592b8080f68 <col:19> 'Router *' lvalue ParmVar 0x5592b80735b8 'r' 'Router *'
|   `-BinaryOperator 0x5592b8081038 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5592b8080fd0 <col:9> 'int' lvalue ->_eindex 0x5592b807ea88
|     | `-CXXThisExpr 0x5592b8080fc0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5592b8081020 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8081000 <col:19> 'int' lvalue ParmVar 0x5592b8073638 'eindex' 'int'
|-CXXMethodDecl 0x5592b8073890 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5592b80737c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5592b8073960 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5592b8073a28 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5592b8073ac8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5592b8073d18 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5592b8073b90 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5592b8073c10 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5592b8073dc8 <col:20>
| `-OptimizeNoneAttr 0x5592b8073e20 <col:30>
|-CXXMethodDecl 0x5592b8073f28 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5592b8073e60 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5592b8073fd0 <col:20>
| `-OptimizeNoneAttr 0x5592b8074028 <col:30>
|-CXXMethodDecl 0x5592b80740f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5592b8074068 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5592b80741a0 <col:20>
| `-OptimizeNoneAttr 0x5592b80741f8 <col:30>
|-CXXMethodDecl 0x5592b8074388 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5592b8074230 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5592b80742b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5592b8074518 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5592b8074450 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5592b8074668 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5592b80745d8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5592b80747b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5592b8074728 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5592b8074908 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5592b8074878 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5592b8074bc8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5592b80749c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5592b8074a40 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5592b8074ae8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5592b8074ca0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5592b8074d60 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5592b8075030 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5592b8074ee0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5592b8074f58 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8075158 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5592b8075330 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5592b8075210 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5592b8075290 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5592b8075518 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5592b80753f8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5592b8075478 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5592b8075888 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5592b80755d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5592b8075650 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5592b80756d0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5592b8080640 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b8080620 <col:106> 'int' 0
| `-ParmVarDecl 0x5592b8075748 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b8080678 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8080658 <col:126> 'int' 0
|-CXXMethodDecl 0x5592b8075c28 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5592b8075958 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5592b80759f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5592b8075a70 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5592b8075ae8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b80806b0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8080690 <col:114> 'int' 0
|-CXXMethodDecl 0x5592b8075fb8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5592b8075d00 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5592b8075d78 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5592b8075df8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5592b80806c8 <col:96> 'int' 0
| `-ParmVarDecl 0x5592b8075e70 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b8080708 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b80806e8 <col:116> 'int' 0
|-CXXMethodDecl 0x5592b8076338 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5592b8076088 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5592b8076100 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b8076180 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5592b8080740 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b8080720 <col:109> 'int' 0
| `-ParmVarDecl 0x5592b80761f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b8080778 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8080758 <col:129> 'int' 0
|-CXXMethodDecl 0x5592b80766b8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5592b8076408 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5592b8076480 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b8076500 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5592b8076578 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b80807b0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b8080790 <col:117> 'int' 0
|-CXXMethodDecl 0x5592b8076a48 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5592b8076790 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8076808 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b8076888 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5592b80807c8 <col:99> 'int' 0
| `-ParmVarDecl 0x5592b8076900 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5592b8080808 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5592b80807e8 <col:119> 'int' 0
|-CXXMethodDecl 0x5592b8076e68 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5592b8076b18 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5592b8076b98 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5592b8076c10 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b8076c90 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5592b8080840 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b8080820 <col:108> 'int' 0
| `-ParmVarDecl 0x5592b8076d10 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5592b8080878 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5592b8080858 <col:141> 'int' 0
|-CXXMethodDecl 0x5592b8077288 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5592b8076f40 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5592b8076fc0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5592b8077038 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b80770b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5592b8077138 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5592b8080890 <col:121> 'int' 0
|-CXXMethodDecl 0x5592b80776b8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5592b8077368 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5592b80773e8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5592b8077460 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b80774e0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5592b80808b0 <col:98> 'int' 0
| `-ParmVarDecl 0x5592b8077560 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5592b80808d0 <col:123> 'int' 0
|-CXXMethodDecl 0x5592b8077980 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5592b8077790 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5592b8077810 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5592b8077890 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5592b80808f0 <col:80> 'int' 0
|-EnumDecl 0x5592b8077a38 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5592b8077b40 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5592b8077dd0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8077b20 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b8077b00 <col:42> 'int' 1
| |-EnumConstantDecl 0x5592b8077bd0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5592b8077de8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8077bb0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5592b8077b90 <col:40> 'int' 2
| |-EnumConstantDecl 0x5592b8077c60 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5592b8077e00 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8077c40 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5592b8077c20 <col:44> 'int' 4
| |-EnumConstantDecl 0x5592b8077cf0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5592b8077e18 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8077cd0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5592b8077cb0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5592b8077d80 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5592b8077e30 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8077d60 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5592b8077d40 <col:34> 'int' 6
|-CXXMethodDecl 0x5592b80780e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5592b8077e58 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5592b8077ef8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5592b8077f78 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5592b8077ff0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5592b80809a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5592b8080990 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5592b8080978 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5592b8080958 <col:98, col:105> 'String' (CXXTemporary 0x5592b8080958)
|           `-CXXTemporaryObjectExpr 0x5592b8080920 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5592b8078388 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5592b80781b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5592b8078230 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5592b80782a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5592b8080a58 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5592b8080a40 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5592b8080a28 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5592b8080a08 <col:94, col:101> 'String' (CXXTemporary 0x5592b8080a08)
| |         `-CXXTemporaryObjectExpr 0x5592b80809d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5592b8081240 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5592b80811b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5592b8081188 <col:9> '<bound member function type>' ->add_task_handlers 0x5592b80780e8
|     | `-CXXThisExpr 0x5592b8081178 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5592b80811f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b80810f8 <col:27> 'Task *' lvalue ParmVar 0x5592b80781b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5592b8081210 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b8081118 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5592b8078230 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5592b8081228 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5592b8081138 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5592b8077d80 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5592b8081158 <col:62> 'const String' lvalue ParmVar 0x5592b80782a8 'prefix' 'const String &'
|-CXXMethodDecl 0x5592b8078598 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5592b8078450 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5592b80784c8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5592b8080b08 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5592b8080af0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5592b8080ad8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5592b8080ab8 <col:70, col:77> 'String' (CXXTemporary 0x5592b8080ab8)
| |         `-CXXTemporaryObjectExpr 0x5592b8080a80 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5592b8081418 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5592b8081390 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5592b8081360 <col:9> '<bound member function type>' ->add_task_handlers 0x5592b80780e8
|     | `-CXXThisExpr 0x5592b8081350 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5592b80813d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b80812d0 <col:27> 'Task *' lvalue ParmVar 0x5592b8078450 'task' 'Task *'
|     |-ImplicitCastExpr 0x5592b80813e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5592b80812f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5592b8081400 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5592b8081310 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5592b8077d80 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5592b8081330 <col:57> 'const String' lvalue ParmVar 0x5592b80784c8 'prefix' 'const String &'
|-CXXMethodDecl 0x5592b8078878 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5592b8078660 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b80786e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8078758 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5592b8078b28 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5592b8078948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b80789c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8078a48 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5592b8078e18 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5592b8078bf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8078c78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8078cf0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5592b80790c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5592b8078ee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8078f68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8078fe8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5592b8079378 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5592b8079198 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8079218 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8079298 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5592b8079628 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5592b8079448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b80794c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8079540 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5592b80798d8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5592b80796f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8079778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b80797f8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5592b8079be8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5592b8079a00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8079a80 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8079b00 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5592b8079ec8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5592b8079cb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b8079d38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b8079de0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5592b807a1a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5592b8079f98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807a018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b807a0c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5592b807a410 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5592b807a278 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5592b807a2f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5592b807a370 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5592b807a6b8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5592b807a4e0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5592b807a560 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5592b807a5d8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5592b807a968 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5592b807a788 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807a808 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b807a888 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5592b807ac18 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5592b807aa38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807aab8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b807ab30 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5592b807aec8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5592b807ace8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807ad68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b807ade0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5592b807b198 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5592b807af98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807b018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5592b807b0b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5592b807b4c8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5592b807b268 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5592b807b2e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5592b807b360 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5592b807b3d8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b8080b20 <col:93> 'bool' false
|-CXXMethodDecl 0x5592b807b6b0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5592b807b598 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5592b807b618 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5592b807b888 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5592b807b770 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5592b807b7f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5592b807bb68 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5592b807b948 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5592b807b9c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5592b807ba40 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5592b807bab8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5592b807be58 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5592b807bc38 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5592b807bcb0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5592b807bd30 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5592b807bda8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5592b807c090 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5592b807bf30 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5592b807bfb0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5592b807c278 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5592b807c158 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5592b807c1d8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5592b807c328 prev 0x5592b8073ac8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b807c420 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5592b807c4b0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5592b807c528 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5592b807c5e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5592b807c6b0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5592b807c828 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5592b807c760 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5592b807c8d0 <col:24>
| | `-OptimizeNoneAttr 0x5592b807c928 <col:34>
| |-CXXMethodDecl 0x5592b807c970 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5592b807cc28 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5592b807ca20 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5592b807ca98 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5592b807cb18 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5592b807cce0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5592b807cd18 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5592b807cd80 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5592b807ce08 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5592b807d128 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5592b807cec0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5592b807cf38 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5592b807cfb0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5592b807d030 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5592b807d240 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5592b8084bb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5592b8084bb8
| | `-ParmVarDecl 0x5592b8084cc8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5592b8084d68 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5592b8084d68
| | `-ParmVarDecl 0x5592b8084e78 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5592b8232448 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5592b807d2b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5592b807d358 <col:38> "" ""
|-CXXMethodDecl 0x5592b807d3e8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5592b807d488 <col:44> "" ""
|-AccessSpecDecl 0x5592b807d4f8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5592b807d520 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5592b807d620 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5592b807d670 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b807d600 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5592b807d5e0 <col:27> 'int' 4
|-FieldDecl 0x5592b807d728 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5592b807d8d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5592b807d990 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5592b807ea20 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5592b807ea88 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5592b807ebd8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5592b807eb18 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5592b807ed88 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5592b807ec98 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5592b807ef68 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5592b807ee48 <col:20> col:23 'int'
| `-ParmVarDecl 0x5592b807eec8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5592b807f210 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5592b807f030 <col:23> col:26 'int'
| |-ParmVarDecl 0x5592b807f0b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5592b807f128 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5592b807f2c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5592b807f390 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5592b807f3e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5592b807f430 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5592b807f610 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5592b807f4c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5592b807f538 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b807f8b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5592b807f6d8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5592b807f758 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5592b807f7d0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5592b807fad8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5592b807f988 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5592b807fa08 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5592b807fe10 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5592b807fb98 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5592b807fc18 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5592b807fc90 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5592b807fd10 <col:57> col:60 'int'
|-CXXMethodDecl 0x5592b807fff8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5592b807fee0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5592b807ff60 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5592b8080148 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5592b80800b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5592b80804c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5592b8080208 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5592b8080288 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5592b8080300 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5592b8080380 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5592b80805e0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TCPIPSend
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80883a8 <../elements/tcpudp/tcpipsend.hh:28:1, line:43:1> line:28:7 class TCPIPSend definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5592b8088508 <col:1, col:7> col:7 implicit referenced class TCPIPSend
|-AccessSpecDecl 0x5592b8088598 <line:29:1, col:7> col:1 public
|-CXXConstructorDecl 0x5592b8088620 <line:30:3, col:13> col:3 TCPIPSend 'void ()'
|-CXXDestructorDecl 0x5592b8088710 <line:31:3, col:14> col:3 ~TCPIPSend 'void ()' noexcept-unevaluated 0x5592b8088710
| `-Overrides: [ 0x5592b806f618 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5592b8088840 <line:33:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5592b8070a78 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5592b8089708 <col:34, col:56>
|   `-ReturnStmt 0x5592b80896f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5592b80896e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5592b80896b8 <col:43> 'const char [10]' lvalue "TCPIPSend"
|-CXXMethodDecl 0x5592b8088908 <line:34:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5592b8070b40 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5592b8089768 <col:34, col:54>
|   `-ReturnStmt 0x5592b8089758 <col:36, col:43>
|     `-ImplicitCastExpr 0x5592b8089740 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5592b8089720 <col:43> 'const char []' lvalue Var 0x5592b8070ce0 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x5592b80889d0 <line:35:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5592b8070f08 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5592b80897c8 <col:34, col:49>
|   `-ReturnStmt 0x5592b80897b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5592b80897a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5592b8089780 <col:43> 'const char []' lvalue Var 0x5592b8071050 'PUSH' 'const char []'
|-AccessSpecDecl 0x5592b8088a70 <line:37:1, col:8> col:1 private
|-CXXMethodDecl 0x5592b8088ab8 <line:38:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5592b80723e0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5592b8088d88 <line:39:3, line:40:64> line:39:14 send_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5592b8088b68 <line:40:6, col:20> col:20 conf 'const String &'
| |-ParmVarDecl 0x5592b8088be0 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x5592b8088c60 <col:38, col:43> col:44 'void *'
| `-ParmVarDecl 0x5592b8088cd8 <col:46, col:60> col:60 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5592b8089288 <line:41:3, line:42:73> line:41:12 make_packet 'Packet *(unsigned int, unsigned int, unsigned short, unsigned short, unsigned int, unsigned int, unsigned char)'
| |-ParmVarDecl 0x5592b8088e60 <col:24, col:33> col:36 'unsigned int'
| |-ParmVarDecl 0x5592b8088ee0 <col:38, col:47> col:50 'unsigned int'
| |-ParmVarDecl 0x5592b8088f60 <col:52, col:61> col:66 'unsigned short'
| |-ParmVarDecl 0x5592b8088fe0 <line:42:24, col:33> col:38 'unsigned short'
| |-ParmVarDecl 0x5592b8089060 <col:40> col:48 'unsigned int'
| |-ParmVarDecl 0x5592b80890e0 <col:50> col:58 'unsigned int'
| `-ParmVarDecl 0x5592b8089160 <col:60, col:69> col:73 'unsigned char'
|-CXXConstructorDecl 0x5592b8089388 <line:28:7> col:7 implicit TCPIPSend 'void (const TCPIPSend &)' inline default_delete noexcept-unevaluated 0x5592b8089388
| `-ParmVarDecl 0x5592b8089498 <col:7> col:7 'const TCPIPSend &'
`-CXXMethodDecl 0x5592b8089538 <col:7> col:7 implicit operator= 'TCPIPSend &(const TCPIPSend &)' inline default_delete noexcept-unevaluated 0x5592b8089538
  `-ParmVarDecl 0x5592b8089648 <col:7> col:7 'const TCPIPSend &'

Layout: <CGRecordLayout
  LLVMType:%class.TCPIPSend = type { %class.Element.base, [4 x i8] }
  NonVirtualBaseLLVMType:%class.TCPIPSend.base = type { %class.Element.base }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7ff0338 prev 0x5592b8034a28 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7ff0430 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5592b7ff04c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5592b7ff05f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5592b7ff04f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5592b7ff1a20 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b7ff1a00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5592b7ff1598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5592b7ff1ab0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b7ff1a70 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5592b7ff04f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5592b7ff1600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5592b7ff1b30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b7ff1af0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5592b7ff1660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5592b7ff1b70 <col:54> 'bool' false
| `-CompoundStmt 0x5592b7ff1c78 <col:61, line:38:5>
|   `-BinaryOperator 0x5592b7ff1c58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5592b7ff1bf0 <col:9> 'const Element *' lvalue ->_context 0x5592b7ff1538
|     | `-CXXThisExpr 0x5592b7ff1be0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5592b7ff1c40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5592b7ff1c20 <col:20> 'int' 0
|-CXXConstructorDecl 0x5592b7ff0808 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b7ff06b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5592b7ff0730 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5592b7ff1a58 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b7ff1a38 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5592b7ff1538 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5592b7ff1cd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b7ff1c90 <col:20> 'const Element *' lvalue ParmVar 0x5592b7ff06b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5592b7ff1598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5592b7ff1d50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b7ff1d10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5592b7ff0730 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5592b7ff1600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5592b7ff1dd0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5592b7ff1d90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5592b7ff1660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5592b7ff1e10 <col:73> 'bool' false
| `-CompoundStmt 0x5592b7ff1e88 <col:80, line:46:5>
|-CXXMethodDecl 0x5592b7ff0938 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5592b7ff1f00 <col:36, line:51:5>
|   `-ReturnStmt 0x5592b7ff1ef0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5592b7ff1ed8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5592b7ff1ea8 <col:16> 'const Element *const' lvalue ->_context 0x5592b7ff1538
|         `-CXXThisExpr 0x5592b7ff1e98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5592b7ff0a28 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5592b7ff1f80 <col:32, line:57:5>
|   `-ReturnStmt 0x5592b7ff1f70 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5592b7ff1f58 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5592b7ff1f28 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5592b7ff1598
|         `-CXXThisExpr 0x5592b7ff1f18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5592b7ff0ae8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5592b7ff0c70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5592b7ff0ba0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5592b7ff0dc0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5592b7ff0d30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5592b7ff0f10 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5592b7ff0e80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5592b7ff1118 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5592b7ff0fc8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5592b7ff1040 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5592b7ff1448 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5592b7ff11d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5592b7ff1258 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5592b7ff1320 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5592b7ff1500 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5592b7ff1538 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5592b7ff1598 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5592b7ff1600 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5592b7ff1660 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5592b7ff16b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5592b7ff16b0
| `-ParmVarDecl 0x5592b7ff17c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5592b7ff1868 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5592b7ff1868
| `-ParmVarDecl 0x5592b7ff1978 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5592b824f658 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80f9bf8 prev 0x5592b80e0888 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b80f9cf0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5592b80f9de0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5592b8120000 <col:16, line:828:9>
|-CXXDestructorDecl 0x5592b80f9ed0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5592b8120010 <col:25, line:830:9>
|-CXXMethodDecl 0x5592b80f9fd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5592b80fa080 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5592b80fa128 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5592b80fa128
| `-ParmVarDecl 0x5592b80fa238 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5592b80fa9f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5592b80fa9f8
  `-ParmVarDecl 0x5592b80fab08 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80e0698 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5592b80e07f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5592b80e0888 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5592b80e0940 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5592b80e0a48 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5592b80e0978 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b810f928 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b810f908 <col:31> 'int' 0
|-CXXConstructorDecl 0x5592b80e0d68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5592b80e0be0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5592b80e0c58 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b810f960 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b810f940 <col:59> 'int' 0
|-CXXConstructorDecl 0x5592b80e0f40 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b80e0e30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5592b80e0ea8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b810f998 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b810f978 <col:55> 'int' 0
|-CXXConstructorDecl 0x5592b80e12f8 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5592b80e10e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5592b80e1158 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5592b80e11d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5592b810f9d0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5592b810f9b0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5592b80e14b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5592b80e13f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5592b80e15b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5592b80e1798 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5592b80e16a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5592b80e1888 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5592b8111670 <col:24, line:291:5>
|   `-ReturnStmt 0x5592b8111660 <line:290:9, col:79>
|     `-BinaryOperator 0x5592b8111640 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5592b8111518 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5592b810fb80 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5592b810fb60 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5592b810fa58 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5592b810fa40 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5592b810fa28 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5592b810f9f8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5592b80fba20
|       | |   |       `-CXXThisExpr 0x5592b810f9e8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5592b810fb48 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5592b810fb30 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5592b810faf8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5592b810fac8 <col:28, col:35> '<bound member function type>' ->size 0x5592b80c2308
|       | |           `-ImplicitCastExpr 0x5592b810fb18 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5592b810fab0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5592b810fa80 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5592b80fba20
|       | |                 `-CXXThisExpr 0x5592b810fa70 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5592b8111500 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5592b81114e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5592b81114d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5592b81114a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5592b810e4b0
|       |         `-CXXThisExpr 0x5592b8111490 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5592b8111620 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5592b8111608 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5592b81115f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5592b81115b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5592b8111598 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5592b8111548 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5592b810e560
|         |     |   `-CXXThisExpr 0x5592b8111538 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5592b8111578 <col:73> 'int' 0
|         `-IntegerLiteral 0x5592b81115d0 <col:79> 'int' 0
|-CXXMethodDecl 0x5592b80e1948 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5592b8111848 <col:32, line:296:5>
|   `-ReturnStmt 0x5592b8111838 <line:295:9, col:49>
|     `-BinaryOperator 0x5592b8111818 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5592b81116f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5592b81116e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5592b81116c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5592b8111698 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5592b810e4b0
|       |       `-CXXThisExpr 0x5592b8111688 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5592b81117f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5592b81117e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5592b81117c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5592b8111788 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5592b8111770 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5592b8111720 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5592b810e560
|         |     |   `-CXXThisExpr 0x5592b8111710 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5592b8111750 <col:43> 'int' 0
|         `-IntegerLiteral 0x5592b81117a8 <col:49> 'int' 0
|-CXXMethodDecl 0x5592b80e1a38 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5592b8111a58 <col:19, line:306:5>
|   |-IfStmt 0x5592b8111978 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5592b81118b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5592b81118a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5592b8111870 <col:13> 'Vector<String> *' lvalue ->_conf 0x5592b80fba20
|   | |     `-CXXThisExpr 0x5592b8111860 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5592b8111958 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5592b8111928 <col:13, col:20> '<bound member function type>' ->clear 0x5592b80c4d08
|   |     `-ImplicitCastExpr 0x5592b8111910 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5592b81118e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5592b80fba20
|   |         `-CXXThisExpr 0x5592b81118d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5592b8111a00 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5592b81119d0 <col:9, col:16> '<bound member function type>' .clear 0x5592b810e038
|   |   `-MemberExpr 0x5592b81119a0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5592b810e450
|   |     `-CXXThisExpr 0x5592b8111990 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5592b8111a48 <line:305:9, col:17>
|     `-UnaryOperator 0x5592b8111a30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8111a20 <col:17> 'Args *' this
|-CXXMethodDecl 0x5592b80e1cb8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5592b80e1bc0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5592b80e1e38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5592b80e1d70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5592b80e21b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5592b80e1ee0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5592b80e2118 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5592b80e1f88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5592b80e2000 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5592b8111d78 <col:67, line:327:5>
|     |-WhileStmt 0x5592b8111d28 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5592b8111b40 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5592b8111ac0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5592b802cef8 0x5592b7e764d8 0x5592b7e761b0 0x5592b7e66980 0x5592b7e66630 0x5592b7e65f20 0x5592b7e38890 0x5592b7dc5d60
|     | | |-DeclRefExpr 0x5592b8111a80 <col:16> 'Iter' lvalue ParmVar 0x5592b80e1f88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5592b8111aa0 <col:25> 'Iter' lvalue ParmVar 0x5592b80e2000 'end' 'Iter'
|     | `-CompoundStmt 0x5592b8111d08 <col:30, line:325:9>
|     |   |-CallExpr 0x5592b8111ca8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5592b8111b88 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5592b8111c78 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5592b8111c08 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|     |   |   `-DeclRefExpr 0x5592b8111be8 <col:24> 'Iter' lvalue ParmVar 0x5592b80e1f88 'begin' 'Iter'
|     |   `-UnaryOperator 0x5592b8111cf0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5592b8111cd0 <col:15> 'Iter' lvalue ParmVar 0x5592b80e1f88 'begin' 'Iter'
|     `-ReturnStmt 0x5592b8111d68 <line:326:9, col:17>
|       `-UnaryOperator 0x5592b8111d50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8111d40 <col:17> 'Args *' this
|-CXXMethodDecl 0x5592b80e22c0 <line:331:5, col:44> col:11 used push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5592b80e2230 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5592b80e2408 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5592b80e2378 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5592b80e24d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5592b8111e58 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5592b8111df8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5592b8111da8 <col:9> '<bound member function type>' ->reset_from 0x5592b810e8d8
|   | | `-CXXThisExpr 0x5592b8111d98 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5592b8111dd8 <col:20> 'int' 0
|   `-ReturnStmt 0x5592b8111e48 <line:352:9, col:17>
|     `-UnaryOperator 0x5592b8111e30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8111e20 <col:17> 'Args *' this
|-VarDecl 0x5592b80e2588 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5592b80e25f0 <col:38> 'int' 1
|-VarDecl 0x5592b80e2680 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5592b80e26e8 <col:39> 'int' 2
|-VarDecl 0x5592b80e2778 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5592b80e27e0 <col:39> 'int' 4
|-VarDecl 0x5592b80e2870 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5592b80e28d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5592b80e2c58 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5592b80e2950 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80e2bb8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5592b80e2a00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e2aa8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5592b8111fb0 <col:43, line:371:5>
|     `-ReturnStmt 0x5592b8111fa0 <line:370:9, col:34>
|       `-CallExpr 0x5592b8111f68 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8111e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8111f08 <col:21> 'const char *' lvalue ParmVar 0x5592b80e2a00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8111f28 <col:30> 'int' 0
|         `-DeclRefExpr 0x5592b8111f48 <col:33> 'T' lvalue ParmVar 0x5592b80e2aa8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80e2f88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5592b80e2cc0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80e2ee8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5592b80e2d70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e2e18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5592b8112100 <col:45, line:375:5>
|     `-ReturnStmt 0x5592b81120f0 <line:374:9, col:42>
|       `-CallExpr 0x5592b81120b8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8111fd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112058 <col:21> 'const char *' lvalue ParmVar 0x5592b80e2d70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8112078 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int'
|         `-DeclRefExpr 0x5592b8112098 <col:41> 'T' lvalue ParmVar 0x5592b80e2e18 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80e32b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5592b80e2ff0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5592b80e3218 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5592b80e30a0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5592b80e3148 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5592b8112250 <col:45, line:379:5>
| |   `-ReturnStmt 0x5592b8112240 <line:378:9, col:43>
| |     `-CallExpr 0x5592b8112208 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5592b8112128 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5592b81121a8 <col:21> 'const char *' lvalue ParmVar 0x5592b80e30a0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5592b81121c8 <col:30> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
| |       `-DeclRefExpr 0x5592b81121e8 <col:42> 'T' lvalue ParmVar 0x5592b80e3148 'x' 'T &'
| |-CXXMethodDecl 0x5592b8251748 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x5592b82515a8 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x5592b8251678 <col:39, col:42> col:42 x 'unsigned int &'
| `-CXXMethodDecl 0x5592b8251c28 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5592b8251a40 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5592b8251b18 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x5592b80e35e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5592b80e3320 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5592b80e3548 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5592b80e33d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5592b80e3478 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5592b8112450 <col:46, line:383:5>
| |   `-ReturnStmt 0x5592b8112440 <line:382:9, col:55>
| |     `-CallExpr 0x5592b8112408 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5592b8112278 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5592b81122f8 <col:21> 'const char *' lvalue ParmVar 0x5592b80e33d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5592b81123c8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5592b8112378 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5592b8112358 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5592b81123b0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5592b8112390 <col:42> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5592b81123e8 <col:54> 'T' lvalue ParmVar 0x5592b80e3478 'x' 'T &'
| |-CXXMethodDecl 0x5592b824fb48 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x5592b824f960 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5592b824fa38 <col:40, col:43> col:43 x 'unsigned int &'
| `-CXXMethodDecl 0x5592b82512a8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x5592b82510c0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5592b8251198 <col:40, col:43> col:43 x 'unsigned char &'
|-FunctionTemplateDecl 0x5592b80e39e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5592b80e3650 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80e3948 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5592b80e3700 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e3780 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80e3828 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5592b8112590 <col:54, line:388:5>
|     |-CallExpr 0x5592b8112518 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8112468 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5592b81124a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5592b81124b8 <col:30> 'const char *' lvalue ParmVar 0x5592b80e3700 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b81124d8 <col:39> 'int' lvalue ParmVar 0x5592b80e3780 'flags' 'int'
|     | `-DeclRefExpr 0x5592b81124f8 <col:46> 'T' lvalue ParmVar 0x5592b80e3828 'x' 'T &'
|     `-ReturnStmt 0x5592b8112580 <line:387:9, col:17>
|       `-UnaryOperator 0x5592b8112568 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8112558 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80e3e98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5592b80e3a58 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80e3ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5592b80e3df8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e3b98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e3c38 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e3cd8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b8112700 <col:74, line:403:5>
|     `-ReturnStmt 0x5592b81126f0 <line:402:9, col:56>
|       `-CallExpr 0x5592b81126b0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81125c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112630 <col:28> 'const char *' lvalue ParmVar 0x5592b80e3b98 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8112650 <col:37> 'int' 0
|         |-DeclRefExpr 0x5592b8112670 <col:40> 'T' lvalue ParmVar 0x5592b80e3c38 'x' 'T &'
|         `-DeclRefExpr 0x5592b8112690 <col:43> 'const V' lvalue ParmVar 0x5592b80e3cd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5592b80e4308 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5592b80e3f08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80e3f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5592b80e4268 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e4048 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e40e8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e4188 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b8112868 <col:76, line:407:5>
|     `-ReturnStmt 0x5592b8112858 <line:406:9, col:65>
|       `-CallExpr 0x5592b8112818 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8112728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112798 <col:28> 'const char *' lvalue ParmVar 0x5592b80e4048 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b81127b8 <col:37> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
|         |-DeclRefExpr 0x5592b81127d8 <col:49> 'T' lvalue ParmVar 0x5592b80e40e8 'x' 'T &'
|         `-DeclRefExpr 0x5592b81127f8 <col:52> 'const V' lvalue ParmVar 0x5592b80e4188 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5592b80e4858 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5592b80e4378 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80e43f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5592b80e47b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e44b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e4538 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80e45d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e4678 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b81129d0 <col:85, line:412:5>
|     |-CallExpr 0x5592b8112950 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8112880 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5592b81128c0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5592b81128d0 <col:37> 'const char *' lvalue ParmVar 0x5592b80e44b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b81128f0 <col:46> 'int' lvalue ParmVar 0x5592b80e4538 'flags' 'int'
|     | |-DeclRefExpr 0x5592b8112910 <col:53> 'T' lvalue ParmVar 0x5592b80e45d8 'x' 'T &'
|     | `-DeclRefExpr 0x5592b8112930 <col:56> 'const V' lvalue ParmVar 0x5592b80e4678 'default_value' 'const V &'
|     `-ReturnStmt 0x5592b81129c0 <line:411:9, col:17>
|       `-UnaryOperator 0x5592b81129a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8112998 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80e4ce8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5592b80e48d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e4948 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80e4c48 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80e4a08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e4a80 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e4b28 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5592b8112b50 <col:53, line:425:5>
|     `-ReturnStmt 0x5592b8112b40 <line:424:9, col:42>
|       `-CallExpr 0x5592b8112b00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8112a00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112a80 <col:21> 'const char *' lvalue ParmVar 0x5592b80e4a08 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8112aa0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5592b8112ac0 <col:33> 'P' lvalue ParmVar 0x5592b80e4a80 'parser' 'P'
|         `-DeclRefExpr 0x5592b8112ae0 <col:41> 'T' lvalue ParmVar 0x5592b80e4b28 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80e5138 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5592b80e4d58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e4dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80e5098 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80e4e98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e4f10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e4fb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5592b8112cc8 <col:55, line:429:5>
|     `-ReturnStmt 0x5592b8112cb8 <line:428:9, col:50>
|       `-CallExpr 0x5592b8112c78 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8112b78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112bf8 <col:21> 'const char *' lvalue ParmVar 0x5592b80e4e98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8112c18 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int'
|         |-DeclRefExpr 0x5592b8112c38 <col:41> 'P' lvalue ParmVar 0x5592b80e4f10 'parser' 'P'
|         `-DeclRefExpr 0x5592b8112c58 <col:49> 'T' lvalue ParmVar 0x5592b80e4fb8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80e5588 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5592b80e51a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e5228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80e54e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80e52e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e5360 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e5408 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5592b8112e40 <col:55, line:433:5>
|     `-ReturnStmt 0x5592b8112e30 <line:432:9, col:51>
|       `-CallExpr 0x5592b8112df0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8112cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8112d70 <col:21> 'const char *' lvalue ParmVar 0x5592b80e52e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8112d90 <col:30> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
|         |-DeclRefExpr 0x5592b8112db0 <col:42> 'P' lvalue ParmVar 0x5592b80e5360 'parser' 'P'
|         `-DeclRefExpr 0x5592b8112dd0 <col:50> 'T' lvalue ParmVar 0x5592b80e5408 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80e59d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5592b80e55f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e5678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5592b80e5938 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5592b80e5738 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5592b80e57b0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5592b80e5858 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5592b8113068 <col:56, line:437:5>
| |   `-ReturnStmt 0x5592b8113058 <line:436:9, col:63>
| |     `-CallExpr 0x5592b8113018 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5592b8112e68 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5592b8112ee8 <col:21> 'const char *' lvalue ParmVar 0x5592b80e5738 'keyword' 'const char *'
| |       |-BinaryOperator 0x5592b8112fb8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5592b8112f68 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5592b8112f48 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5592b8112fa0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5592b8112f80 <col:42> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5592b8112fd8 <col:54> 'P' lvalue ParmVar 0x5592b80e57b0 'parser' 'P'
| |       `-DeclRefExpr 0x5592b8112ff8 <col:62> 'T' lvalue ParmVar 0x5592b80e5858 'x' 'T &'
| `-CXXMethodDecl 0x5592b82505d8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5592b8250340 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5592b82503e8 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x5592b82504b8 <col:50, col:53> col:53 x 'unsigned short &'
|-FunctionTemplateDecl 0x5592b80e5f08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5592b80e5a48 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e5ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80e5e68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5592b80e5b88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e5c08 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80e5c80 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e5d28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5592b81131d0 <col:64, line:442:5>
|     |-CallExpr 0x5592b8113150 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8113080 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5592b81130c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5592b81130d0 <col:30> 'const char *' lvalue ParmVar 0x5592b80e5b88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b81130f0 <col:39> 'int' lvalue ParmVar 0x5592b80e5c08 'flags' 'int'
|     | |-DeclRefExpr 0x5592b8113110 <col:46> 'P' lvalue ParmVar 0x5592b80e5c80 'parser' 'P'
|     | `-DeclRefExpr 0x5592b8113130 <col:54> 'T' lvalue ParmVar 0x5592b80e5d28 'x' 'T &'
|     `-ReturnStmt 0x5592b81131c0 <line:441:9, col:17>
|       `-UnaryOperator 0x5592b81131a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8113198 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80e6508 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5592b80e5f80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e5ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5592b80e6078 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5592b80e6468 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e6140 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e61b8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e6258 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e6328 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b8113368 <col:84, line:458:5>
|     `-ReturnStmt 0x5592b8113358 <line:457:9, col:64>
|       `-CallExpr 0x5592b8113310 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8113200 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113270 <col:28> 'const char *' lvalue ParmVar 0x5592b80e6140 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8113290 <col:37> 'int' 0
|         |-DeclRefExpr 0x5592b81132b0 <col:40> 'P' lvalue ParmVar 0x5592b80e61b8 'parser' 'P'
|         |-DeclRefExpr 0x5592b81132d0 <col:48> 'T' lvalue ParmVar 0x5592b80e6258 'x' 'T &'
|         `-DeclRefExpr 0x5592b81132f0 <col:51> 'const V' lvalue ParmVar 0x5592b80e6328 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5592b80e6a88 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5592b80e6580 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e65f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5592b80e6678 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5592b80e69e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e6740 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e67b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e6858 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e68f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b81134f8 <col:86, line:462:5>
|     `-ReturnStmt 0x5592b81134e8 <line:461:9, col:73>
|       `-CallExpr 0x5592b81134a0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8113390 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113400 <col:28> 'const char *' lvalue ParmVar 0x5592b80e6740 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8113420 <col:37> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
|         |-DeclRefExpr 0x5592b8113440 <col:49> 'P' lvalue ParmVar 0x5592b80e67b8 'parser' 'P'
|         |-DeclRefExpr 0x5592b8113460 <col:57> 'T' lvalue ParmVar 0x5592b80e6858 'x' 'T &'
|         `-DeclRefExpr 0x5592b8113480 <col:60> 'const V' lvalue ParmVar 0x5592b80e68f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5592b80e70e8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5592b80e6b00 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e6b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5592b80e6bf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5592b80e7048 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5592b80e6cc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e6d40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80e6db8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e6e58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80e6ef8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5592b8113688 <col:95, line:467:5>
|     |-CallExpr 0x5592b8113600 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8113510 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5592b8113550 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5592b8113560 <col:37> 'const char *' lvalue ParmVar 0x5592b80e6cc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b8113580 <col:46> 'int' lvalue ParmVar 0x5592b80e6d40 'flags' 'int'
|     | |-DeclRefExpr 0x5592b81135a0 <col:53> 'P' lvalue ParmVar 0x5592b80e6db8 'parser' 'P'
|     | |-DeclRefExpr 0x5592b81135c0 <col:61> 'T' lvalue ParmVar 0x5592b80e6e58 'x' 'T &'
|     | `-DeclRefExpr 0x5592b81135e0 <col:64> 'const V' lvalue ParmVar 0x5592b80e6ef8 'default_value' 'const V &'
|     `-ReturnStmt 0x5592b8113678 <line:466:9, col:17>
|       `-UnaryOperator 0x5592b8113660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8113650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80e76c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5592b80e7168 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e71e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80e7268 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80e7628 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80e7330 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e73a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e7448 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5592b80e74e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5592b8113830 <col:63, line:481:5>
|     `-ReturnStmt 0x5592b8113820 <line:480:9, col:47>
|       `-CallExpr 0x5592b81137d8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81136b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113738 <col:21> 'const char *' lvalue ParmVar 0x5592b80e7330 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8113758 <col:30> 'int' 0
|         |-DeclRefExpr 0x5592b8113778 <col:33> 'P' lvalue ParmVar 0x5592b80e73a8 'parser' 'P'
|         |-DeclRefExpr 0x5592b8113798 <col:41> 'T1' lvalue ParmVar 0x5592b80e7448 'x1' 'T1 &'
|         `-DeclRefExpr 0x5592b81137b8 <col:45> 'T2' lvalue ParmVar 0x5592b80e74e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5592b80e7c48 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5592b80e7740 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e77b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80e7838 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80e7ba8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80e7900 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e7978 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e7a18 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5592b80e7ab8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5592b81139d0 <col:65, line:485:5>
|     `-ReturnStmt 0x5592b81139c0 <line:484:9, col:55>
|       `-CallExpr 0x5592b8113978 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8113858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b81138d8 <col:21> 'const char *' lvalue ParmVar 0x5592b80e7900 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b81138f8 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int'
|         |-DeclRefExpr 0x5592b8113918 <col:41> 'P' lvalue ParmVar 0x5592b80e7978 'parser' 'P'
|         |-DeclRefExpr 0x5592b8113938 <col:49> 'T1' lvalue ParmVar 0x5592b80e7a18 'x1' 'T1 &'
|         `-DeclRefExpr 0x5592b8113958 <col:53> 'T2' lvalue ParmVar 0x5592b80e7ab8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5592b80e8c38 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5592b80e7cc0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e7d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80e7db8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80e8b98 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80e88f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e8968 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e8a08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5592b80e8aa8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5592b8113b70 <col:65, line:489:5>
|     `-ReturnStmt 0x5592b8113b60 <line:488:9, col:56>
|       `-CallExpr 0x5592b8113b18 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81139f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113a78 <col:21> 'const char *' lvalue ParmVar 0x5592b80e88f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8113a98 <col:30> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
|         |-DeclRefExpr 0x5592b8113ab8 <col:42> 'P' lvalue ParmVar 0x5592b80e8968 'parser' 'P'
|         |-DeclRefExpr 0x5592b8113ad8 <col:50> 'T1' lvalue ParmVar 0x5592b80e8a08 'x1' 'T1 &'
|         `-DeclRefExpr 0x5592b8113af8 <col:54> 'T2' lvalue ParmVar 0x5592b80e8aa8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5592b80e91b8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5592b80e8cb0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e8d28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80e8da8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80e9118 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80e8e70 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e8ee8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e8f88 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5592b80e9028 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5592b8113dc0 <col:66, line:493:5>
|     `-ReturnStmt 0x5592b8113db0 <line:492:9, col:68>
|       `-CallExpr 0x5592b8113d68 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8113b98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113c18 <col:21> 'const char *' lvalue ParmVar 0x5592b80e8e70 'keyword' 'const char *'
|         |-BinaryOperator 0x5592b8113ce8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5592b8113c98 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5592b8113c78 <col:30> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5592b8113cd0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5592b8113cb0 <col:42> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5592b8113d08 <col:54> 'P' lvalue ParmVar 0x5592b80e8ee8 'parser' 'P'
|         |-DeclRefExpr 0x5592b8113d28 <col:62> 'T1' lvalue ParmVar 0x5592b80e8f88 'x1' 'T1 &'
|         `-DeclRefExpr 0x5592b8113d48 <col:66> 'T2' lvalue ParmVar 0x5592b80e9028 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5592b80e9818 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5592b80e9230 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80e92a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80e9328 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80e9778 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80e93f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e9470 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80e94e8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80e9588 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5592b80e9628 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5592b8113f50 <col:74, line:498:5>
|     |-CallExpr 0x5592b8113ec8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8113dd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5592b8113e18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5592b8113e28 <col:30> 'const char *' lvalue ParmVar 0x5592b80e93f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b8113e48 <col:39> 'int' lvalue ParmVar 0x5592b80e9470 'flags' 'int'
|     | |-DeclRefExpr 0x5592b8113e68 <col:46> 'P' lvalue ParmVar 0x5592b80e94e8 'parser' 'P'
|     | |-DeclRefExpr 0x5592b8113e88 <col:54> 'T1' lvalue ParmVar 0x5592b80e9588 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5592b8113ea8 <col:58> 'T2' lvalue ParmVar 0x5592b80e9628 'x2' 'T2 &'
|     `-ReturnStmt 0x5592b8113f40 <line:497:9, col:17>
|       `-UnaryOperator 0x5592b8113f28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8113f18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80e9b78 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5592b80e9898 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80e9ad8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5592b80e9950 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e99c8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114098 <col:52, line:509:5>
|     `-ReturnStmt 0x5592b8114088 <line:508:9, col:44>
|       `-CallExpr 0x5592b8114050 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8113f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8113ff0 <col:26> 'const char *' lvalue ParmVar 0x5592b80e9950 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8114010 <col:35> 'int' 0
|         `-DeclRefExpr 0x5592b8114030 <col:38> 'P' lvalue ParmVar 0x5592b80e99c8 'parser' 'P'
|-FunctionTemplateDecl 0x5592b80e9e78 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5592b80e9be0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80e9dd8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5592b80e9c90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80e9d08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5592b81141d8 <col:54, line:513:5>
|     `-ReturnStmt 0x5592b81141c8 <line:512:9, col:52>
|       `-CallExpr 0x5592b8114190 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81140c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114130 <col:26> 'const char *' lvalue ParmVar 0x5592b80e9c90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114150 <col:35> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int'
|         `-DeclRefExpr 0x5592b8114170 <col:46> 'P' lvalue ParmVar 0x5592b80e9d08 'parser' 'P'
|-FunctionTemplateDecl 0x5592b80ea178 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5592b80e9ee0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80ea0d8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5592b80e9f90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ea008 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114318 <col:54, line:517:5>
|     `-ReturnStmt 0x5592b8114308 <line:516:9, col:53>
|       `-CallExpr 0x5592b81142d0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114200 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114270 <col:26> 'const char *' lvalue ParmVar 0x5592b80e9f90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114290 <col:35> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int'
|         `-DeclRefExpr 0x5592b81142b0 <col:47> 'P' lvalue ParmVar 0x5592b80ea008 'parser' 'P'
|-FunctionTemplateDecl 0x5592b80ea478 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5592b80ea1e0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80ea3d8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5592b80ea290 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ea308 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114508 <col:55, line:521:5>
|     `-ReturnStmt 0x5592b81144f8 <line:520:9, col:65>
|       `-CallExpr 0x5592b81144c0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b81143b0 <col:26> 'const char *' lvalue ParmVar 0x5592b80ea290 'keyword' 'const char *'
|         |-BinaryOperator 0x5592b8114480 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5592b8114430 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5592b8114410 <col:35> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5592b8114468 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5592b8114448 <col:47> 'const int' lvalue Var 0x5592b80e2680 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5592b81144a0 <col:59> 'P' lvalue ParmVar 0x5592b80ea308 'parser' 'P'
|-FunctionTemplateDecl 0x5592b80ea848 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5592b80ea4e0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80ea7a8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5592b80ea590 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ea610 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ea688 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114648 <col:63, line:526:5>
|     |-CallExpr 0x5592b81145d0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8114520 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5592b8114560 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5592b8114570 <col:35> 'const char *' lvalue ParmVar 0x5592b80ea590 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5592b8114590 <col:44> 'int' lvalue ParmVar 0x5592b80ea610 'flags' 'int'
|     | `-DeclRefExpr 0x5592b81145b0 <col:51> 'P' lvalue ParmVar 0x5592b80ea688 'parser' 'P'
|     `-ReturnStmt 0x5592b8114638 <line:525:9, col:17>
|       `-UnaryOperator 0x5592b8114620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8114610 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80eac98 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5592b80ea8b8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80ea938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80eabf8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80ea9f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80eaa70 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80eab18 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5592b81147a0 <col:58, line:541:5>
|     `-ReturnStmt 0x5592b8114790 <line:540:9, col:39>
|       `-CallExpr 0x5592b8114758 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b81146f8 <col:21> 'const char *' lvalue ParmVar 0x5592b80ea9f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114718 <col:30> 'P' lvalue ParmVar 0x5592b80eaa70 'parser' 'P'
|         `-DeclRefExpr 0x5592b8114738 <col:38> 'T' lvalue ParmVar 0x5592b80eab18 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80eb0e8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5592b80ead08 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80ead88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80eb048 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80eae48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80eaec0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80eaf68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5592b81148d8 <col:60, line:545:5>
|     `-ReturnStmt 0x5592b81148c8 <line:544:9, col:41>
|       `-CallExpr 0x5592b8114890 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81147c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114830 <col:23> 'const char *' lvalue ParmVar 0x5592b80eae48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114850 <col:32> 'P' lvalue ParmVar 0x5592b80eaec0 'parser' 'P'
|         `-DeclRefExpr 0x5592b8114870 <col:40> 'T' lvalue ParmVar 0x5592b80eaf68 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80eb538 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5592b80eb158 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80eb1d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80eb498 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80eb298 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80eb310 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80eb3b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5592b8114a10 <col:60, line:549:5>
|     `-ReturnStmt 0x5592b8114a00 <line:548:9, col:41>
|       `-CallExpr 0x5592b81149c8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114968 <col:23> 'const char *' lvalue ParmVar 0x5592b80eb298 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114988 <col:32> 'P' lvalue ParmVar 0x5592b80eb310 'parser' 'P'
|         `-DeclRefExpr 0x5592b81149a8 <col:40> 'T' lvalue ParmVar 0x5592b80eb3b8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80eb988 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5592b80eb5a8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80eb628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80eb8e8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80eb6e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80eb760 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80eb808 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5592b8114b48 <col:61, line:553:5>
|     `-ReturnStmt 0x5592b8114b38 <line:552:9, col:42>
|       `-CallExpr 0x5592b8114b00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114a38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114aa0 <col:24> 'const char *' lvalue ParmVar 0x5592b80eb6e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114ac0 <col:33> 'P' lvalue ParmVar 0x5592b80eb760 'parser' 'P'
|         `-DeclRefExpr 0x5592b8114ae0 <col:41> 'T' lvalue ParmVar 0x5592b80eb808 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80ebe68 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5592b80eb9f8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80eba78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80ebdc8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5592b80ebb38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ebbb8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ebc30 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80ebcd8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5592b8114cc0 <col:69, line:557:5>
|     `-ReturnStmt 0x5592b8114cb0 <line:556:9, col:46>
|       `-CallExpr 0x5592b8114c70 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114bf0 <col:21> 'const char *' lvalue ParmVar 0x5592b80ebb38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8114c10 <col:30> 'int' lvalue ParmVar 0x5592b80ebbb8 'flags' 'int'
|         |-DeclRefExpr 0x5592b8114c30 <col:37> 'P' lvalue ParmVar 0x5592b80ebc30 'parser' 'P'
|         `-DeclRefExpr 0x5592b8114c50 <col:45> 'T' lvalue ParmVar 0x5592b80ebcd8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80ec178 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5592b80ebee0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80ec0d8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5592b80ebf90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ec008 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114e00 <col:56, line:571:5>
|     `-ReturnStmt 0x5592b8114df0 <line:570:9, col:48>
|       `-CallExpr 0x5592b8114db8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8114ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8114d58 <col:30> 'const char *' lvalue ParmVar 0x5592b80ebf90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8114d78 <col:39> 'int' 0
|         `-DeclRefExpr 0x5592b8114d98 <col:42> 'P' lvalue ParmVar 0x5592b80ec008 'parser' 'P'
|-FunctionTemplateDecl 0x5592b80ec508 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5592b80ec1e0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80ec468 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5592b80ec290 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ec310 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ec388 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5592b8114fd0 <col:67, line:576:5>
|     |-CallExpr 0x5592b8114f58 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8114e18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5592b8114e58 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5592b8114e68 <col:39> 'const char *' lvalue ParmVar 0x5592b80ec290 'keyword' 'const char *'
|     | |-BinaryOperator 0x5592b8114f18 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5592b8114ec8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5592b8114e88 <col:48> 'int' lvalue ParmVar 0x5592b80ec310 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5592b8114f00 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5592b8114ee0 <col:56> 'const int' lvalue Var 0x5592b80e2870 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5592b8114f38 <col:68> 'P' lvalue ParmVar 0x5592b80ec388 'parser' 'P'
|     `-ReturnStmt 0x5592b8114fc0 <line:575:9, col:17>
|       `-UnaryOperator 0x5592b8114fa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8114f98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80ec958 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5592b80ec578 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80ec5f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80ec8b8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5592b80ec6b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ec730 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80ec7d8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5592b8115140 <col:62, line:592:5>
|     `-ReturnStmt 0x5592b8115130 <line:591:9, col:51>
|       `-CallExpr 0x5592b81150f0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8115000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8115070 <col:30> 'const char *' lvalue ParmVar 0x5592b80ec6b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8115090 <col:39> 'int' 0
|         |-DeclRefExpr 0x5592b81150b0 <col:42> 'P' lvalue ParmVar 0x5592b80ec730 'parser' 'P'
|         `-DeclRefExpr 0x5592b81150d0 <col:50> 'T' lvalue ParmVar 0x5592b80ec7d8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80ece38 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5592b80ec9c8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80eca48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80ecd98 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5592b80ecb08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ecb88 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ecc00 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80ecca8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5592b8115338 <col:73, line:597:5>
|     |-CallExpr 0x5592b81152b8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b8115158 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5592b8115198 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5592b81151a8 <col:39> 'const char *' lvalue ParmVar 0x5592b80ecb08 'keyword' 'const char *'
|     | |-BinaryOperator 0x5592b8115258 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5592b8115208 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5592b81151c8 <col:48> 'int' lvalue ParmVar 0x5592b80ecb88 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5592b8115240 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5592b8115220 <col:56> 'const int' lvalue Var 0x5592b80e2870 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5592b8115278 <col:68> 'P' lvalue ParmVar 0x5592b80ecc00 'parser' 'P'
|     | `-DeclRefExpr 0x5592b8115298 <col:76> 'T' lvalue ParmVar 0x5592b80ecca8 'x' 'T &'
|     `-ReturnStmt 0x5592b8115328 <line:596:9, col:17>
|       `-UnaryOperator 0x5592b8115310 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8115300 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80ed3e8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5592b80eceb0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80ecf28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80ed348 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5592b80ecfe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ed060 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80ed220 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5592b81154a8 <col:65, line:614:5>
|     `-ReturnStmt 0x5592b8115498 <line:613:9, col:46>
|       `-CallExpr 0x5592b8115458 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b8115368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b81153d8 <col:25> 'const char *' lvalue ParmVar 0x5592b80ecfe8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b81153f8 <col:34> 'int' 0
|         |-DeclRefExpr 0x5592b8115418 <col:37> 'P' lvalue ParmVar 0x5592b80ed060 'parser' 'P'
|         `-DeclRefExpr 0x5592b8115438 <col:45> 'Vector<T>' lvalue ParmVar 0x5592b80ed220 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5592b80ed818 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5592b80ed458 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80ed778 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5592b80ed510 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ed660 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5592b81156c0 <col:55, line:618:5>
|     `-ReturnStmt 0x5592b81156b0 <line:617:9, col:55>
|       `-CallExpr 0x5592b8115670 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81154d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8115540 <col:25> 'const char *' lvalue ParmVar 0x5592b80ed510 'keyword' 'const char *'
|         |-IntegerLiteral 0x5592b8115560 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5592b8115630 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5592b8115650 <col:54> 'Vector<T>' lvalue ParmVar 0x5592b80ed660 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5592b80edde8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5592b80ed880 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80ed8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80edd48 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5592b80ed9b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80eda38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80edab0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80edc00 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5592b81158b8 <col:76, line:623:5>
|     |-CallExpr 0x5592b8115838 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5592b81156d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5592b8115718 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5592b8115728 <col:34> 'const char *' lvalue ParmVar 0x5592b80ed9b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5592b81157d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5592b8115788 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5592b8115748 <col:43> 'int' lvalue ParmVar 0x5592b80eda38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5592b81157c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5592b81157a0 <col:51> 'const int' lvalue Var 0x5592b80e2870 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5592b81157f8 <col:63> 'P' lvalue ParmVar 0x5592b80edab0 'parser' 'P'
|     | `-DeclRefExpr 0x5592b8115818 <col:71> 'Vector<T>' lvalue ParmVar 0x5592b80edc00 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5592b81158a8 <line:622:9, col:17>
|       `-UnaryOperator 0x5592b8115890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8115880 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80ee328 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5592b80ede60 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80eded8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80ee288 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5592b80edf98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ee018 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ee160 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5592b8115b20 <col:66, line:627:5>
|     `-ReturnStmt 0x5592b8115b10 <line:626:9, col:59>
|       `-CallExpr 0x5592b8115ad0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5592b81158e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5592b8115958 <col:25> 'const char *' lvalue ParmVar 0x5592b80edf98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5592b8115978 <col:34> 'int' lvalue ParmVar 0x5592b80ee018 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5592b8115a90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5592b8115ab0 <col:58> 'Vector<T>' lvalue ParmVar 0x5592b80ee160 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5592b80ee3b8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5592b8115ba0 <col:25, line:633:5>
|   `-ReturnStmt 0x5592b8115b90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5592b8115b78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5592b8115b48 <col:16> 'const bool' lvalue ->_status 0x5592b80fb888
|         `-CXXThisExpr 0x5592b8115b38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5592b80ee538 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5592b80ee470 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5592b8115c88 <col:27, line:639:5>
|   |-BinaryOperator 0x5592b8115c30 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5592b8115bb8 <col:9> 'bool' lvalue ParmVar 0x5592b80ee470 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5592b8115c18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5592b8115be8 <col:13> 'bool' lvalue ->_status 0x5592b80fb888
|   |     `-CXXThisExpr 0x5592b8115bd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5592b8115c78 <line:638:9, col:17>
|     `-UnaryOperator 0x5592b8115c60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8115c50 <col:17> 'Args *' this
|-CXXMethodDecl 0x5592b80ee6b8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5592b80ee5f8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5592b8115d78 <col:39, line:644:5>
|   |-BinaryOperator 0x5592b8115d20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5592b8115ca8 <col:9> 'bool' lvalue ParmVar 0x5592b80ee5f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5592b8115d08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5592b8115cd8 <col:13> 'const bool' lvalue ->_status 0x5592b80fb888
|   |     `-CXXThisExpr 0x5592b8115cc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5592b8115d68 <line:643:9, col:17>
|     `-UnaryOperator 0x5592b8115d50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8115d40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5592b80ee780 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5592b8115e20 <col:30, line:651:5>
|   `-ReturnStmt 0x5592b8115e10 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5592b8115df8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5592b8115dc8 <col:16> 'bool' lvalue ->_read_status 0x5592b7ff1660
|         `-ImplicitCastExpr 0x5592b8115da8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5592b8115d98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5592b80ee8c8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5592b80ee838 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5592b8115f28 <col:32, line:658:5>
|   |-BinaryOperator 0x5592b8115ed0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5592b8115e38 <col:9> 'bool' lvalue ParmVar 0x5592b80ee838 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5592b8115eb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5592b8115e88 <col:13> 'bool' lvalue ->_read_status 0x5592b7ff1660
|   |     `-ImplicitCastExpr 0x5592b8115e68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5592b8115e58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5592b8115f18 <line:657:9, col:17>
|     `-UnaryOperator 0x5592b8115f00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8115ef0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5592b80eea18 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5592b80ee988 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5592b8116038 <col:44, line:663:5>
|   |-BinaryOperator 0x5592b8115fe0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5592b8115f48 <col:9> 'bool' lvalue ParmVar 0x5592b80ee988 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5592b8115fc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5592b8115f98 <col:13> 'bool' lvalue ->_read_status 0x5592b7ff1660
|   |     `-ImplicitCastExpr 0x5592b8115f78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5592b8115f68 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5592b8116028 <line:662:9, col:17>
|     `-UnaryOperator 0x5592b8116010 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b8116000 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5592b80eeae0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5592b80eeba8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5592b80eec70 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5592b80eed38 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5592b80ef048 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5592b80eedd8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80eefa8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5592b80eeeb8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5592b81163f0 <col:19, line:706:5>
|     `-IfStmt 0x5592b81163c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5592b8116138 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5592b81162f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5592b81162c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5592b8116288 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5592b8116190 <col:42> '<bound member function type>' ->simple_slot 0x5592b810f590
|       |     | `-CXXThisExpr 0x5592b8116180 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5592b8116228 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5592b81161e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5592b7e7af78
|       |     | `-DeclRefExpr 0x5592b81161c0 <col:55> 'T' lvalue ParmVar 0x5592b80eeeb8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5592b8116268 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5592b81163b8 <line:705:13, col:34>
|         `-CallExpr 0x5592b8116390 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5592b8116318 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5592b8116370 <col:33> 'T' lvalue ParmVar 0x5592b80eeeb8 'x' 'T &'
|-FunctionTemplateDecl 0x5592b80ef318 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5592b80ef0a8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80ef278 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5592b80ef188 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5592b81167d0 <col:31, line:717:5>
|     |-DeclStmt 0x5592b8116530 <line:713:9, col:23>
|     | `-VarDecl 0x5592b8116418 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5592b8116508 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5592b8116490 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5592b81164e8 <col:21> 'T' lvalue ParmVar 0x5592b80ef188 'x' 'T &'
|     |-IfStmt 0x5592b8116780 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5592b8116628 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5592b8116760 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5592b8116700 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5592b8116690 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|     |   | `-DeclRefExpr 0x5592b8116670 <col:14> 'T *' lvalue Var 0x5592b8116418 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5592b8116740 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5592b81167b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5592b8116798 <col:16> 'T *' lvalue Var 0x5592b8116418 's' 'T *'
|-FunctionTemplateDecl 0x5592b80ef728 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5592b80ef378 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80ef3f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5592b80ef688 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5592b80ef4d8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5592b80ef578 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5592b8116ae0 <col:37, line:726:5>
|     |-IfStmt 0x5592b8116a70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5592b8116a90 <line:723:13, col:26>
|     | | `-VarDecl 0x5592b8116838 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5592b8116928 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5592b81168b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5592b8116908 <col:25> 'T' lvalue ParmVar 0x5592b80ef4d8 'x' 'T &'
|     | |-DeclRefExpr 0x5592b8116950 <col:16> 'T *' lvalue Var 0x5592b8116838 's' 'T *'
|     | `-BinaryOperator 0x5592b8116a50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5592b8116a00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5592b8116990 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|     |   | `-DeclRefExpr 0x5592b8116970 <col:14> 'T *' lvalue Var 0x5592b8116838 's' 'T *'
|     |   `-DeclRefExpr 0x5592b8116a30 <col:18> 'const V' lvalue ParmVar 0x5592b80ef578 'value' 'const V &'
|     `-ReturnStmt 0x5592b8116ad0 <line:725:9, col:17>
|       `-UnaryOperator 0x5592b8116ab8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b8116aa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5592b80efb28 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5592b80ef790 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5592b80efa88 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5592b80ef840 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80ef8c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80ef968 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5592b8117900 <col:65, line:737:5>
|     |-DeclStmt 0x5592b8116b78 <line:732:9, col:26>
|     | `-VarDecl 0x5592b8116b10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5592b81178c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5592b81178e8 <line:733:13, col:58>
|       | `-VarDecl 0x5592b8116ba0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5592b8116d80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5592b8116d50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5592b8116d38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5592b8116d18 <col:26, col:58> 'String' (CXXTemporary 0x5592b8116d18)
|       |           `-CXXMemberCallExpr 0x5592b8116ca8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5592b8116c18 <col:26> '<bound member function type>' ->find 0x5592b810eba8
|       |             | `-CXXThisExpr 0x5592b8116c08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5592b8116ce0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b8116c48 <col:31> 'const char *' lvalue ParmVar 0x5592b80ef840 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5592b8116cf8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b8116c68 <col:40> 'int' lvalue ParmVar 0x5592b80ef8c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5592b8116c88 <col:47> 'Args::Slot *' lvalue Var 0x5592b8116b10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5592b8116e38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5592b8116e20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5592b8116e00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5592b8116dd0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |       `-ImplicitCastExpr 0x5592b8116db8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5592b8116d98 <col:20> 'String' lvalue Var 0x5592b8116ba0 'str' 'String'
|       `-CompoundStmt 0x5592b81178a8 <col:61, line:736:9>
|         |-DeclStmt 0x5592b81172f0 <line:734:13, col:76>
|         | `-VarDecl 0x5592b8116e88 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5592b81172c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5592b8117230 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5592b8117278 <col:60> 'T' lvalue ParmVar 0x5592b80ef968 'variable' 'T &'
|         |     `-UnaryOperator 0x5592b81172a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5592b8117298 <col:71> 'Args *' this
|         `-CallExpr 0x5592b8117878 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5592b8117318 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|           | `-CXXThisExpr 0x5592b8117308 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5592b8117838 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5592b8117348 <col:23> 'T *' lvalue Var 0x5592b8116e88 's' 'T *'
|           | `-CallExpr 0x5592b81177f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5592b81175d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5592b81176d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5592b81176f0 <col:86> 'String' lvalue Var 0x5592b8116ba0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5592b81177a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5592b8117730 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|           |   | `-DeclRefExpr 0x5592b8117710 <col:92> 'T *' lvalue Var 0x5592b8116e88 's' 'T *'
|           |   `-UnaryOperator 0x5592b81177e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5592b81177d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5592b8117858 <col:103> 'Args::Slot *' lvalue Var 0x5592b8116b10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f0078 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5592b80efb98 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80efc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5592b80effd8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5592b80efcd8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80efd58 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80efdf8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5592b80efe98 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5592b81187a0 <col:88, line:745:5>
|     |-DeclStmt 0x5592b8117998 <line:741:9, col:26>
|     | `-VarDecl 0x5592b8117930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5592b8117bb8 <line:742:9, col:55>
|     | `-VarDecl 0x5592b81179c0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5592b8117ba0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5592b8117b70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5592b8117b58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5592b8117b38 <col:22, col:54> 'String' (CXXTemporary 0x5592b8117b38)
|     |           `-CXXMemberCallExpr 0x5592b8117ac8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5592b8117a38 <col:22> '<bound member function type>' ->find 0x5592b810eba8
|     |             | `-CXXThisExpr 0x5592b8117a28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5592b8117b00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5592b8117a68 <col:27> 'const char *' lvalue ParmVar 0x5592b80efcd8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5592b8117b18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5592b8117a88 <col:36> 'int' lvalue ParmVar 0x5592b80efd58 'flags' 'int'
|     |             `-DeclRefExpr 0x5592b8117aa8 <col:43> 'Args::Slot *' lvalue Var 0x5592b8117930 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5592b8117f90 <line:743:9, col:72>
|     | `-VarDecl 0x5592b8117c08 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5592b8117f60 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5592b8117ed0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5592b8117f18 <col:56> 'T' lvalue ParmVar 0x5592b80efdf8 'variable' 'T &'
|     |     `-UnaryOperator 0x5592b8117f48 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5592b8117f38 <col:67> 'Args *' this
|     `-CallExpr 0x5592b8118770 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5592b8117fb8 <col:9> '<bound member function type>' ->postparse 0x5592b810edb8
|       | `-CXXThisExpr 0x5592b8117fa8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5592b8118730 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5592b8117fe8 <col:19> 'T *' lvalue Var 0x5592b8117c08 's' 'T *'
|       | `-ParenExpr 0x5592b8118710 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5592b81186e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5592b81186c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5592b81186b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5592b8118690 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5592b8118660 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |     |       `-ImplicitCastExpr 0x5592b8118648 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5592b8118008 <col:25> 'String' lvalue Var 0x5592b81179c0 'str' 'String'
|       |     |-CallExpr 0x5592b81184b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5592b8118290 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5592b8118390 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5592b81183b0 <col:89> 'String' lvalue Var 0x5592b81179c0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5592b8118460 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5592b81183f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|       |     | | `-DeclRefExpr 0x5592b81183d0 <col:95> 'T *' lvalue Var 0x5592b8117c08 's' 'T *'
|       |     | `-UnaryOperator 0x5592b81184a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5592b8118490 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5592b8118628 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5592b8118608 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5592b81185d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5592b8118588 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5592b8118518 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|       |         | | `-DeclRefExpr 0x5592b81184f8 <col:109> 'T *' lvalue Var 0x5592b8117c08 's' 'T *'
|       |         | `-DeclRefExpr 0x5592b81185b8 <col:113> 'const V' lvalue ParmVar 0x5592b80efe98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5592b81185f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5592b8118750 <col:128> 'Args::Slot *' lvalue Var 0x5592b8117930 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f05a8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5592b80f00f0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80f0168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80f0508 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5592b80f0228 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f02a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f0320 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80f03c8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5592b8119398 <col:75, line:754:5>
|     |-DeclStmt 0x5592b8118848 <line:749:9, col:26>
|     | `-VarDecl 0x5592b81187e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5592b8119360 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5592b8119380 <line:750:13, col:58>
|       | `-VarDecl 0x5592b8118870 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5592b8118a50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5592b8118a20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5592b8118a08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5592b81189e8 <col:26, col:58> 'String' (CXXTemporary 0x5592b81189e8)
|       |           `-CXXMemberCallExpr 0x5592b8118978 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5592b81188e8 <col:26> '<bound member function type>' ->find 0x5592b810eba8
|       |             | `-CXXThisExpr 0x5592b81188d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5592b81189b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b8118918 <col:31> 'const char *' lvalue ParmVar 0x5592b80f0228 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5592b81189c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b8118938 <col:40> 'int' lvalue ParmVar 0x5592b80f02a8 'flags' 'int'
|       |             `-DeclRefExpr 0x5592b8118958 <col:47> 'Args::Slot *' lvalue Var 0x5592b81187e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5592b8118b08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5592b8118af0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5592b8118ad0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5592b8118aa0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |       `-ImplicitCastExpr 0x5592b8118a88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5592b8118a68 <col:20> 'String' lvalue Var 0x5592b8118870 'str' 'String'
|       `-CompoundStmt 0x5592b8119340 <col:61, line:753:9>
|         |-DeclStmt 0x5592b8118ee0 <line:751:13, col:63>
|         | `-VarDecl 0x5592b8118b58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5592b8118eb0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5592b8118e20 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5592b8118e68 <col:47> 'T' lvalue ParmVar 0x5592b80f03c8 'variable' 'T &'
|         |     `-UnaryOperator 0x5592b8118e98 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5592b8118e88 <col:58> 'Args *' this
|         `-CallExpr 0x5592b8119310 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5592b8118f08 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|           | `-CXXThisExpr 0x5592b8118ef8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5592b81192d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5592b8118f38 <col:23> 'T *' lvalue Var 0x5592b8118b58 's' 'T *'
|           | `-CallExpr 0x5592b8119290 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5592b8119120 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5592b8119168 <col:56> 'P' lvalue ParmVar 0x5592b80f0320 'parser' 'P'
|           |   |-DeclRefExpr 0x5592b8119188 <col:64> 'String' lvalue Var 0x5592b8118870 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5592b8119238 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5592b81191c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|           |   | `-DeclRefExpr 0x5592b81191a8 <col:70> 'T *' lvalue Var 0x5592b8118b58 's' 'T *'
|           |   `-UnaryOperator 0x5592b8119278 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5592b8119268 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5592b81192f0 <col:81> 'Args::Slot *' lvalue Var 0x5592b81187e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f8298 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5592b80f0620 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5592b80f0698 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5592b80f0718 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5592b80f81f8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5592b80f07e0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f0860 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f7f60 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80f8008 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5592b80f80a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5592b811c3c8 <col:98, line:762:5>
|     |-DeclStmt 0x5592b8119430 <line:758:9, col:26>
|     | `-VarDecl 0x5592b81193c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5592b811b8f8 <line:759:9, col:55>
|     | `-VarDecl 0x5592b811b700 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5592b811b8e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5592b811b8b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5592b811b898 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5592b811b878 <col:22, col:54> 'String' (CXXTemporary 0x5592b811b878)
|     |           `-CXXMemberCallExpr 0x5592b811b808 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5592b811b778 <col:22> '<bound member function type>' ->find 0x5592b810eba8
|     |             | `-CXXThisExpr 0x5592b811b768 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5592b811b840 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5592b811b7a8 <col:27> 'const char *' lvalue ParmVar 0x5592b80f07e0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5592b811b858 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5592b811b7c8 <col:36> 'int' lvalue ParmVar 0x5592b80f0860 'flags' 'int'
|     |             `-DeclRefExpr 0x5592b811b7e8 <col:43> 'Args::Slot *' lvalue Var 0x5592b81193c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5592b811bd10 <line:760:9, col:59>
|     | `-VarDecl 0x5592b811b948 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5592b811bce0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5592b811bc50 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5592b811bc98 <col:43> 'T' lvalue ParmVar 0x5592b80f8008 'variable' 'T &'
|     |     `-UnaryOperator 0x5592b811bcc8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5592b811bcb8 <col:54> 'Args *' this
|     `-CallExpr 0x5592b811c398 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5592b811bd38 <col:9> '<bound member function type>' ->postparse 0x5592b810edb8
|       | `-CXXThisExpr 0x5592b811bd28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5592b811c358 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5592b811bd68 <col:19> 'T *' lvalue Var 0x5592b811b948 's' 'T *'
|       | `-ParenExpr 0x5592b811c338 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5592b811c308 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5592b811c2f0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5592b811c2d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5592b811c2b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5592b811c288 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |     |       `-ImplicitCastExpr 0x5592b811c270 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5592b811bd88 <col:25> 'String' lvalue Var 0x5592b811b700 'str' 'String'
|       |     |-CallExpr 0x5592b811c0e0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5592b811bf70 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5592b811bfb8 <col:59> 'P' lvalue ParmVar 0x5592b80f7f60 'parser' 'P'
|       |     | |-DeclRefExpr 0x5592b811bfd8 <col:67> 'String' lvalue Var 0x5592b811b700 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5592b811c088 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5592b811c018 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|       |     | | `-DeclRefExpr 0x5592b811bff8 <col:73> 'T *' lvalue Var 0x5592b811b948 's' 'T *'
|       |     | `-UnaryOperator 0x5592b811c0c8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5592b811c0b8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5592b811c250 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5592b811c230 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5592b811c200 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5592b811c1b0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5592b811c140 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|       |         | | `-DeclRefExpr 0x5592b811c120 <col:87> 'T *' lvalue Var 0x5592b811b948 's' 'T *'
|       |         | `-DeclRefExpr 0x5592b811c1e0 <col:91> 'const V' lvalue ParmVar 0x5592b80f80a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5592b811c220 <col:98> 'bool' true
|       `-DeclRefExpr 0x5592b811c378 <col:106> 'Args::Slot *' lvalue Var 0x5592b81193c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f8908 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5592b80f8318 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80f8398 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5592b80f8418 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5592b80f8868 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5592b80f84e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f8560 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f85d8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80f8678 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5592b80f8718 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5592b811d3a8 <col:60, line:773:5>
|     |-DeclStmt 0x5592b811c470 <line:767:9, col:26>
|     | `-VarDecl 0x5592b811c408 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5592b811d370 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5592b811d390 <line:768:13, col:58>
|       | `-VarDecl 0x5592b811c498 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5592b811c678 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5592b811c648 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5592b811c630 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5592b811c610 <col:26, col:58> 'String' (CXXTemporary 0x5592b811c610)
|       |           `-CXXMemberCallExpr 0x5592b811c5a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5592b811c510 <col:26> '<bound member function type>' ->find 0x5592b810eba8
|       |             | `-CXXThisExpr 0x5592b811c500 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5592b811c5d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b811c540 <col:31> 'const char *' lvalue ParmVar 0x5592b80f84e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5592b811c5f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b811c560 <col:40> 'int' lvalue ParmVar 0x5592b80f8560 'flags' 'int'
|       |             `-DeclRefExpr 0x5592b811c580 <col:47> 'Args::Slot *' lvalue Var 0x5592b811c408 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5592b811c730 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5592b811c718 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5592b811c6f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5592b811c6c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |       `-ImplicitCastExpr 0x5592b811c6b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5592b811c690 <col:20> 'String' lvalue Var 0x5592b811c498 'str' 'String'
|       `-CompoundStmt 0x5592b811d348 <col:61, line:772:9>
|         |-DeclStmt 0x5592b811ca70 <line:769:13, col:66>
|         | `-VarDecl 0x5592b811c788 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5592b811ca40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5592b811c9b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5592b811c9f8 <col:49> 'T1' lvalue ParmVar 0x5592b80f8678 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5592b811ca28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5592b811ca18 <col:61> 'Args *' this
|         |-DeclStmt 0x5592b811cde0 <line:770:13, col:66>
|         | `-VarDecl 0x5592b811caf8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5592b811cdb0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5592b811cd20 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5592b811cd68 <col:49> 'T2' lvalue ParmVar 0x5592b80f8718 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5592b811cd98 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5592b811cd88 <col:61> 'Args *' this
|         `-CallExpr 0x5592b811d318 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5592b811ce08 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|           | `-CXXThisExpr 0x5592b811cdf8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5592b811d2d8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5592b811ce78 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5592b811ce38 <col:23> 'T1 *' lvalue Var 0x5592b811c788 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5592b811ce58 <col:29> 'T2 *' lvalue Var 0x5592b811caf8 's2' 'T2 *'
|           | `-CallExpr 0x5592b811d290 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5592b811d060 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5592b811d0a8 <col:63> 'P' lvalue ParmVar 0x5592b80f85d8 'parser' 'P'
|           |   |-DeclRefExpr 0x5592b811d0c8 <col:71> 'String' lvalue Var 0x5592b811c498 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5592b811d178 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5592b811d108 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|           |   | `-DeclRefExpr 0x5592b811d0e8 <col:77> 'T1 *' lvalue Var 0x5592b811c788 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5592b811d238 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5592b811d1c8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|           |   | `-DeclRefExpr 0x5592b811d1a8 <col:82> 'T2 *' lvalue Var 0x5592b811caf8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5592b811d278 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5592b811d268 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5592b811d2f8 <col:94> 'Args::Slot *' lvalue Var 0x5592b811c408 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f8cf8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5592b80f8988 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80f8c58 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5592b80f8a40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f8ac0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f8b38 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5592b811d8c0 <col:67, line:780:5>
|     |-DeclStmt 0x5592b811d440 <line:777:9, col:26>
|     | `-VarDecl 0x5592b811d3d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5592b811d888 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5592b811d8a8 <line:778:13, col:58>
|       | `-VarDecl 0x5592b811d468 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5592b811d648 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5592b811d618 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5592b811d600 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5592b811d5e0 <col:26, col:58> 'String' (CXXTemporary 0x5592b811d5e0)
|       |           `-CXXMemberCallExpr 0x5592b811d570 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5592b811d4e0 <col:26> '<bound member function type>' ->find 0x5592b810eba8
|       |             | `-CXXThisExpr 0x5592b811d4d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5592b811d5a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b811d510 <col:31> 'const char *' lvalue ParmVar 0x5592b80f8a40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5592b811d5c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5592b811d530 <col:40> 'int' lvalue ParmVar 0x5592b80f8ac0 'flags' 'int'
|       |             `-DeclRefExpr 0x5592b811d550 <col:47> 'Args::Slot *' lvalue Var 0x5592b811d3d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5592b811d700 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5592b811d6e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5592b811d6c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5592b811d698 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|       |       `-ImplicitCastExpr 0x5592b811d680 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5592b811d660 <col:20> 'String' lvalue Var 0x5592b811d468 'str' 'String'
|       `-CallExpr 0x5592b811d858 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5592b811d728 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|         | `-CXXThisExpr 0x5592b811d718 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5592b811d808 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5592b811d778 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5592b811d758 <col:23> 'P' lvalue ParmVar 0x5592b80f8b38 'parser' 'P'
|         | |-DeclRefExpr 0x5592b811d7c0 <col:36> 'String' lvalue Var 0x5592b811d468 'str' 'String'
|         | `-UnaryOperator 0x5592b811d7f0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5592b811d7e0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5592b811d838 <col:49> 'Args::Slot *' lvalue Var 0x5592b811d3d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5592b80f9098 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5592b80f8d68 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5592b80f8ff8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5592b80f8e20 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f8ea0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f8f18 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5592b811e230 <col:71, line:792:5>
|     |-DeclStmt 0x5592b811d958 <line:784:9, col:26>
|     | `-VarDecl 0x5592b811d8f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5592b811da28 <line:785:9, col:29>
|     | `-VarDecl 0x5592b811d988 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5592b811da10 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5592b811d9f0 <col:28> 'int' 1
|     |-WhileStmt 0x5592b811e0e0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5592b811e100 <line:786:16, col:61>
|     | | `-VarDecl 0x5592b811da50 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5592b811dc30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5592b811dc00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5592b811dbe8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5592b811dbc8 <col:29, col:61> 'String' (CXXTemporary 0x5592b811dbc8)
|     | |           `-CXXMemberCallExpr 0x5592b811db58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5592b811dac8 <col:29> '<bound member function type>' ->find 0x5592b810eba8
|     | |             | `-CXXThisExpr 0x5592b811dab8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5592b811db90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811daf8 <col:34> 'const char *' lvalue ParmVar 0x5592b80f8e20 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5592b811dba8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811db18 <col:43> 'int' lvalue ParmVar 0x5592b80f8ea0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5592b811db38 <col:50> 'Args::Slot *' lvalue Var 0x5592b811d8f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5592b811dce8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5592b811dcd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5592b811dcb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5592b811dc80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|     | |       `-ImplicitCastExpr 0x5592b811dc68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5592b811dc48 <col:23> 'String' lvalue Var 0x5592b811da50 'str' 'String'
|     | `-CompoundStmt 0x5592b811e0b8 <col:64, line:790:9>
|     |   |-CallExpr 0x5592b811de40 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5592b811dd10 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|     |   | | `-CXXThisExpr 0x5592b811dd00 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5592b811ddf0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5592b811dd60 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5592b811dd40 <col:23> 'P' lvalue ParmVar 0x5592b80f8f18 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5592b811dda8 <col:36> 'String' lvalue Var 0x5592b811da50 'str' 'String'
|     |   | | `-UnaryOperator 0x5592b811ddd8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5592b811ddc8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5592b811de20 <col:49> 'Args::Slot *' lvalue Var 0x5592b811d8f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5592b811dfd8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5592b811de70 <col:13> 'int' lvalue Var 0x5592b811d988 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5592b811dfc0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5592b811dfa0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5592b811df08 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5592b811dee8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5592b811ded0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5592b811de90 <col:28> 'int' lvalue Var 0x5592b811d988 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5592b811deb0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5592b811df88 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5592b811df58 <col:49> 'bool' lvalue ->_read_status 0x5592b7ff1660
|     |   |         `-ImplicitCastExpr 0x5592b811df38 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5592b811df28 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5592b811e088 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5592b811dff8 <col:13> 'int' lvalue ParmVar 0x5592b80f8ea0 'flags' 'int'
|     |     `-UnaryOperator 0x5592b811e070 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5592b811e058 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5592b811e038 <col:23> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5592b811e210 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5592b811e148 <col:9> 'bool' lvalue ->_read_status 0x5592b7ff1660
|       | `-ImplicitCastExpr 0x5592b811e128 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5592b811e118 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5592b811e1f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5592b811e1d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5592b811e1b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5592b811e178 <col:25> 'int' lvalue Var 0x5592b811d988 'read_status' 'int'
|           `-IntegerLiteral 0x5592b811e198 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5592b80f9578 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5592b80f9108 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80f9188 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80f94d8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5592b80f9248 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f92c8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f9340 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80f93e8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5592b811f1c0 <col:84, line:805:5>
|     |-DeclStmt 0x5592b811e2d8 <line:796:9, col:26>
|     | `-VarDecl 0x5592b811e270 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5592b811e3a8 <line:797:9, col:29>
|     | `-VarDecl 0x5592b811e308 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5592b811e390 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5592b811e370 <col:28> 'int' 1
|     |-DeclStmt 0x5592b811e6e0 <line:798:9, col:71>
|     | `-VarDecl 0x5592b811e3f8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5592b811e6b0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5592b811e620 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5592b811e668 <col:55> 'T' lvalue ParmVar 0x5592b80f93e8 'variable' 'T &'
|     |     `-UnaryOperator 0x5592b811e698 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5592b811e688 <col:66> 'Args *' this
|     |-WhileStmt 0x5592b811f070 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5592b811f090 <line:799:16, col:61>
|     | | `-VarDecl 0x5592b811e708 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5592b811e8e8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5592b811e8b8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5592b811e8a0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5592b811e880 <col:29, col:61> 'String' (CXXTemporary 0x5592b811e880)
|     | |           `-CXXMemberCallExpr 0x5592b811e810 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5592b811e780 <col:29> '<bound member function type>' ->find 0x5592b810eba8
|     | |             | `-CXXThisExpr 0x5592b811e770 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5592b811e848 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811e7b0 <col:34> 'const char *' lvalue ParmVar 0x5592b80f9248 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5592b811e860 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811e7d0 <col:43> 'int' lvalue ParmVar 0x5592b80f92c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5592b811e7f0 <col:50> 'Args::Slot *' lvalue Var 0x5592b811e270 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5592b811e9a0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5592b811e988 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5592b811e968 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5592b811e938 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|     | |       `-ImplicitCastExpr 0x5592b811e920 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5592b811e900 <col:23> 'String' lvalue Var 0x5592b811e708 'str' 'String'
|     | `-CompoundStmt 0x5592b811f048 <col:64, line:803:9>
|     |   |-CallExpr 0x5592b811edd0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5592b811e9c8 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|     |   | | `-CXXThisExpr 0x5592b811e9b8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5592b811ed90 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5592b811e9f8 <col:23> 'T *' lvalue Var 0x5592b811e3f8 's' 'T *'
|     |   | | `-CallExpr 0x5592b811ed50 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5592b811ebe0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5592b811ec28 <col:56> 'P' lvalue ParmVar 0x5592b80f9340 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5592b811ec48 <col:64> 'String' lvalue Var 0x5592b811e708 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5592b811ecf8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5592b811ec88 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|     |   | |   | `-DeclRefExpr 0x5592b811ec68 <col:70> 'T *' lvalue Var 0x5592b811e3f8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5592b811ed38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5592b811ed28 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5592b811edb0 <col:81> 'Args::Slot *' lvalue Var 0x5592b811e270 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5592b811ef68 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5592b811ee00 <col:13> 'int' lvalue Var 0x5592b811e308 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5592b811ef50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5592b811ef30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5592b811ee98 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5592b811ee78 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5592b811ee60 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5592b811ee20 <col:28> 'int' lvalue Var 0x5592b811e308 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5592b811ee40 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5592b811ef18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5592b811eee8 <col:49> 'bool' lvalue ->_read_status 0x5592b7ff1660
|     |   |         `-ImplicitCastExpr 0x5592b811eec8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5592b811eeb8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5592b811f018 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5592b811ef88 <col:13> 'int' lvalue ParmVar 0x5592b80f92c8 'flags' 'int'
|     |     `-UnaryOperator 0x5592b811f000 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5592b811efe8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5592b811efc8 <col:23> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5592b811f1a0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5592b811f0d8 <col:9> 'bool' lvalue ->_read_status 0x5592b7ff1660
|       | `-ImplicitCastExpr 0x5592b811f0b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5592b811f0a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5592b811f180 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5592b811f160 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5592b811f148 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5592b811f108 <col:25> 'int' lvalue Var 0x5592b811e308 'read_status' 'int'
|           `-IntegerLiteral 0x5592b811f128 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5592b80f9b58 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5592b80f95f0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5592b80f9668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5592b80f9ab8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5592b80f9728 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5592b80f97a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5592b80f9820 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5592b80f9970 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5592b811ffc8 <col:87, line:821:5>
|     |-DeclStmt 0x5592b811f270 <line:809:9, col:26>
|     | `-VarDecl 0x5592b811f208 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5592b811f340 <line:810:9, col:29>
|     | `-VarDecl 0x5592b811f2a0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5592b811f328 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5592b811f308 <col:28> 'int' 1
|     |-DeclStmt 0x5592b811f588 <line:811:9, col:38>
|     | `-VarDecl 0x5592b811f470 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5592b811f560 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5592b811f4e8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5592b811f540 <col:29> 'Vector<T>' lvalue ParmVar 0x5592b80f9970 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5592b811fe78 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5592b811fe98 <line:812:16, col:61>
|     | | `-VarDecl 0x5592b811f5b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5592b811f790 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5592b811f760 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5592b811f748 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5592b811f728 <col:29, col:61> 'String' (CXXTemporary 0x5592b811f728)
|     | |           `-CXXMemberCallExpr 0x5592b811f6b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5592b811f628 <col:29> '<bound member function type>' ->find 0x5592b810eba8
|     | |             | `-CXXThisExpr 0x5592b811f618 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5592b811f6f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811f658 <col:34> 'const char *' lvalue ParmVar 0x5592b80f9728 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5592b811f708 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5592b811f678 <col:43> 'int' lvalue ParmVar 0x5592b80f97a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5592b811f698 <col:50> 'Args::Slot *' lvalue Var 0x5592b811f208 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5592b811f848 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5592b811f830 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5592b811f810 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5592b811f7e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5592b7e3cf38
|     | |       `-ImplicitCastExpr 0x5592b811f7c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5592b811f7a8 <col:23> 'String' lvalue Var 0x5592b811f5b0 'str' 'String'
|     | `-CompoundStmt 0x5592b811fe40 <col:64, line:819:9>
|     |   |-DeclStmt 0x5592b811f908 <line:813:13, col:23>
|     |   | `-VarDecl 0x5592b811f870 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5592b811f8e8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5592b811fa88 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5592b811f930 <col:13> '<bound member function type>' ->postparse 0x5592b810edb8
|     |   | | `-CXXThisExpr 0x5592b811f920 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5592b811fa30 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5592b811f980 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5592b811f960 <col:23> 'P' lvalue ParmVar 0x5592b80f9820 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5592b811f9c8 <col:36> 'String' lvalue Var 0x5592b811f5b0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5592b811f9e8 <col:41> 'T' lvalue Var 0x5592b811f870 'sx' 'T'
|     |   | | `-UnaryOperator 0x5592b811fa18 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5592b811fa08 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5592b811fa68 <col:53> 'Args::Slot *' lvalue Var 0x5592b811f208 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5592b811fbe0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5592b811fb18 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5592b811fae8 <col:17> 'bool' lvalue ->_read_status 0x5592b7ff1660
|     |   | |   `-ImplicitCastExpr 0x5592b811fac8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5592b811fab8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5592b811fbb8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5592b811fb50 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5592b811fb30 <col:17> 'Vector<T> *' lvalue Var 0x5592b811f470 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5592b811fb98 <col:30> 'T' lvalue Var 0x5592b811f870 'sx' 'T'
|     |   |-BinaryOperator 0x5592b811fd60 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5592b811fbf8 <col:13> 'int' lvalue Var 0x5592b811f2a0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5592b811fd48 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5592b811fd28 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5592b811fc90 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5592b811fc70 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5592b811fc58 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5592b811fc18 <col:28> 'int' lvalue Var 0x5592b811f2a0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5592b811fc38 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5592b811fd10 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5592b811fce0 <col:49> 'bool' lvalue ->_read_status 0x5592b7ff1660
|     |   |         `-ImplicitCastExpr 0x5592b811fcc0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5592b811fcb0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5592b811fe10 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5592b811fd80 <col:13> 'int' lvalue ParmVar 0x5592b80f97a8 'flags' 'int'
|     |     `-UnaryOperator 0x5592b811fdf8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5592b811fde0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5592b811fdc0 <col:23> 'const int' lvalue Var 0x5592b80e2588 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5592b811ffa8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5592b811fee0 <col:9> 'bool' lvalue ->_read_status 0x5592b7ff1660
|       | `-ImplicitCastExpr 0x5592b811fec0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5592b811feb0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5592b811ff88 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5592b811ff68 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5592b811ff50 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5592b811ff10 <col:25> 'int' lvalue Var 0x5592b811f2a0 'read_status' 'int'
|           `-IntegerLiteral 0x5592b811ff30 <col:40> 'int' 1
|-AccessSpecDecl 0x5592b80f9bd0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b80f9bf8 prev 0x5592b80e0888 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5592b80f9cf0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5592b80f9de0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5592b8120000 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5592b80f9ed0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5592b8120010 <col:25, line:830:9>
| |-CXXMethodDecl 0x5592b80f9fd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5592b80fa080 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5592b80fa128 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5592b80fa128
| | `-ParmVarDecl 0x5592b80fa238 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5592b80fa9f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5592b80fa9f8
|   `-ParmVarDecl 0x5592b80fab08 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5592b80fa2a8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5592b80fa408 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5592b80fa600 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5592b80fa4b0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5592b80fa528 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5592b81201f0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5592b80fa8b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5592b8120060 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5592b8120020 <col:20> 'void *' lvalue ParmVar 0x5592b80fa4b0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5592b80fa920 '_slot' 'char *'
| | | `-CXXNewExpr 0x5592b81200e8 <col:32, col:45> 'char *' array Function 0x5592b7c60bd8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5592b81200d0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5592b81200a0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5592b80fa528 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5592b80fa980 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5592b81201b0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5592b8120170 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5592b80fa528 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5592b8120270 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5592b80fa700 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5592b80f9ed0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5592b81202f8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5592b81202d8 <line:840:13, col:22> 'void' array Function 0x5592b7c60f38 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5592b81202c0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5592b8120290 <col:22> 'char *' lvalue ->_slot 0x5592b80fa920
| |         `-CXXThisExpr 0x5592b8120280 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5592b80fa800 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5592b80f9fd0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5592b81204e8 <col:22, line:844:9>
| |   `-CallExpr 0x5592b8120450 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5592b8120438 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5592b8120418 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5592b7d6c998 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5592b8120488 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5592b8120368 <col:20> 'void *' lvalue ->_ptr 0x5592b80fa8b8
| |     |   `-CXXThisExpr 0x5592b8120358 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5592b81204b8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5592b81204a0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5592b81203a8 <col:26> 'char *' lvalue ->_slot 0x5592b80fa920
| |     |     `-CXXThisExpr 0x5592b8120398 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5592b81204d0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5592b81203e8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5592b80fa980
| |         `-CXXThisExpr 0x5592b81203d8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5592b80fa8b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5592b80fa920 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5592b80fa980 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5592b80fab78 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5592b80fab78
| | `-ParmVarDecl 0x5592b80fac88 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5592b80fad28 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5592b80fad28
|   `-ParmVarDecl 0x5592b80fae38 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5592b80fafd8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5592b80faea8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5592b80faf48 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5592b80fb270 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5592b80fb468 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5592b80fb338 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5592b80fb5e8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5592b8120520 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5592b8120500 <col:20> 'T *' lvalue ParmVar 0x5592b80fb338 'ptr' 'T *'
|   | `-CompoundStmt 0x5592b8120570 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5592b80fb538 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5592b80f9fd0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5592b8120720 <col:22, line:857:9>
|   |   `-CallExpr 0x5592b81206f0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5592b8120580 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5592b7e250c8 0x5592b7dcf3f8
|   |     |-CXXOperatorCallExpr 0x5592b8120680 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5592b8120610 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5592b8032078 0x5592b8031c98 0x5592b80318c8 0x5592b80314e8 0x5592b8031108 0x5592b8030d38
|   |     | `-MemberExpr 0x5592b81205e0 <col:29> 'T *' lvalue ->_ptr 0x5592b80fb5e8
|   |     |   `-CXXThisExpr 0x5592b81205d0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5592b81206c0 <col:35> 'T' lvalue ->_slot 0x5592b80fb648
|   |       `-CXXThisExpr 0x5592b81206b0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5592b80fb5e8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5592b80fb648 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5592b80fb6b0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5592b80fb7b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5592b80fb800 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b80fb790 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5592b80fb770 <col:31> 'int' 48
|-FieldDecl 0x5592b80fb828 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5592b80fb888 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5592b80fb8e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b80fba20 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5592b810e450 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5592b810e4b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5592b810e560 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5592b810e788 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5592b810e690 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5592b810e8d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5592b810e848 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5592b810eba8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5592b810e998 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5592b810ea18 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5592b810eac0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5592b810edb8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5592b810ec70 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5592b810ece8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5592b810ee88 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5592b810efd8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5592b810ef40 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5592b810f368 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5592b810f098 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5592b810f118 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5592b810f1c0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5592b810f278 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5592b810f590 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5592b810f440 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5592b810f4b8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5592b810f8a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5592b810f640 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5592b810f808 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5592b810f718 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e83940 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7e83a58 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x5592b7e83ae8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5592b7e83bf8 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x5592b7e83b28 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x5592b7e84028 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5592b7e840f0 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b7e840b0 <col:9> 'int' lvalue ParmVar 0x5592b7e83b28 'p' 'int'
| `-CompoundStmt 0x5592b7e846b8 <col:12, line:412:5>
|   `-ParenExpr 0x5592b7e84698 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x5592b7e84668 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x5592b7e84298 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5592b7e84268 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x5592b7e841b0 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x5592b7e84198 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x5592b7e84148 <col:23> 'int' lvalue ->ip_p 0x5592b7e84028
|       |   | |   `-CXXThisExpr 0x5592b7e84138 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x5592b7e84178 <col:30> 'int' 0
|       |   `-BinaryOperator 0x5592b7e84248 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x5592b7e84230 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x5592b7e841e0 <col:35> 'int' lvalue ->ip_p 0x5592b7e84028
|       |     |   `-CXXThisExpr 0x5592b7e841d0 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x5592b7e84210 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x5592b7e842f8 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5592b7e842d8 <col:55> 'int' 0
|       `-CallExpr 0x5592b7e845c8 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x5592b7e845b0 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5592b7e84590 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5592b7e84608 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5592b7e843e8 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x5592b7e84620 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5592b7e84458 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x5592b7e84638 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5592b7e84490 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x5592b7e84650 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5592b7e84578 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5592b7e84560 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5592b7e84528 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x5592b7e83f58 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x5592b7e83cb8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5592b7e83d88 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x5592b7e83e00 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5592b7e84090 <col:34> 'const ArgContext' lvalue Var 0x5592b7e6f060 'blank_args' 'const ArgContext'
|-FieldDecl 0x5592b7e84028 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x5592b824fdc8 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x5592b824fdc8
| `-ParmVarDecl 0x5592b824fed8 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x5592b824ff78 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b8250088 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x5592b7e84028 'ip_p' 'int'
| | `-ImplicitCastExpr 0x5592b8250870 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5592b8250840 <col:7> 'int' xvalue .ip_p 0x5592b7e84028
| |     `-CXXStaticCastExpr 0x5592b8250810 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82507e0 <col:7> 'IPPortArg' lvalue ParmVar 0x5592b8250088 '' 'IPPortArg &&'
| `-CompoundStmt 0x5592b82508b8 <col:7>
`-CXXDestructorDecl 0x5592b8250128 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80479d8 prev 0x5592b803cbe0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b8047ad0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5592b8047bc0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5592b8047ce8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5592b8047e68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5592b8047fe8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5592b8048168 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5592b8058f98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b8059808 <col:11>
|-CXXDestructorDecl 0x5592b8059070 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5592b80591a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5592b80591a8
| `-ParmVarDecl 0x5592b80592b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5592b8059358 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5592b8059358
| `-ParmVarDecl 0x5592b8059468 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5592b805c228 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b805c338 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5592b805c5b8 <col:11>
|   `-ReturnStmt 0x5592b805c5a8 <col:11>
|     `-UnaryOperator 0x5592b805c590 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b805c580 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5592b805c3a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5592b805c3a8
  `-ParmVarDecl 0x5592b805c4b8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80481d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b80482e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5592b8048388 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5592b80483f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5592b8048458 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5592b80484c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5592b8048520 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5592b80485e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5592b8048640 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5592b80486a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5592b8058ea8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5592b8048388 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5592b8059818 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5592b8059870 <col:12>
|-CXXConstructorDecl 0x5592b80594d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5592b80594d8
| `-ParmVarDecl 0x5592b80595e8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5592b8059688 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5592b8059688
| `-ParmVarDecl 0x5592b8059798 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5592b805b910 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b80362f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b8036408 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5592b8036498 <col:16, col:22> col:16 public
|-EnumDecl 0x5592b80364c0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5592b80365c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5592b80366a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80365a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5592b8036580 <col:21> 'int' 28
| `-EnumConstantDecl 0x5592b8036650 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5592b80366b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8036630 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5592b8036610 <col:22> 'int' 64
|-CXXMethodDecl 0x5592b80369f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5592b80366e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b8036760 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5592b80367d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b8036850 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b8036ab8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5592b8036cb8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5592b8036b30 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5592b8036ba8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b8036d68 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5592b8036ec8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5592b8036dd8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b8036f70 <col:72> warn_unused_result ""
|-TypedefDecl 0x5592b80372d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5592b8037260 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5592b8037200 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5592b80371c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5592b7b0a4e0 'void'
|       |-PointerType 0x5592b7db6690 'unsigned char *'
|       | `-BuiltinType 0x5592b7b0a5e0 'unsigned char'
|       |-TypedefType 0x5592b7bb2c80 'size_t' sugar
|       | |-Typedef 0x5592b7b7abe0 'size_t'
|       | `-BuiltinType 0x5592b7b0a640 'unsigned long'
|       `-PointerType 0x5592b7b0ace0 'void *'
|         `-BuiltinType 0x5592b7b0a4e0 'void'
|-CXXMethodDecl 0x5592b8037748 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5592b8037340 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5592b80373b8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b8037450 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5592b80374d0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5592b8051e40 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5592b8051e28 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5592b8051df0 <col:58> 'int' 0
| |-ParmVarDecl 0x5592b8037550 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5592b8051e68 <col:76> 'int' 0
| |-ParmVarDecl 0x5592b80375d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5592b8051e88 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5592b8037818 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5592b8037898 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5592b8037958 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5592b80379f8 <col:20>
| `-OptimizeNoneAttr 0x5592b8037a50 <col:30>
|-CXXMethodDecl 0x5592b8037ac8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5592b8037b68 <col:20>
| `-OptimizeNoneAttr 0x5592b8037bc0 <col:30>
|-CXXMethodDecl 0x5592b8037c38 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5592b8037cd8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5592b8037d88 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5592b8037e28 <col:20>
| |-OptimizeNoneAttr 0x5592b8037e80 <col:30>
| `-WarnUnusedResultAttr 0x5592b8037ea8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5592b8037f00 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5592b8037fa0 <col:20>
| `-OptimizeNoneAttr 0x5592b8037ff8 <col:30>
|-CXXMethodDecl 0x5592b8038048 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5592b80380e8 <col:20>
| `-OptimizeNoneAttr 0x5592b8038140 <col:30>
|-CXXMethodDecl 0x5592b8038188 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5592b8038228 <col:20>
| `-OptimizeNoneAttr 0x5592b8038280 <col:30>
|-CXXMethodDecl 0x5592b80382c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b8038388 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b8038450 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5592b8038518 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5592b80385d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b80386f8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5592b8051f50 <col:54, line:99:5>
|   `-ReturnStmt 0x5592b8051f40 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5592b8051f28 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5592b8051ef8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5592b80489d8
|         `-CXXThisExpr 0x5592b8051ee8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5592b8038898 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5592b80387a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5592b8052000 <col:67, line:103:5>
|   `-BinaryOperator 0x5592b8051fe0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5592b8051f78 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5592b80489d8
|     | `-CXXThisExpr 0x5592b8051f68 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5592b8051fc8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8051fa8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5592b80387a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5592b8038990 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5592b8052080 <col:33, line:107:5>
|   `-ReturnStmt 0x5592b8052070 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5592b8052058 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5592b8052028 <col:16> 'void *' lvalue ->_destructor_argument 0x5592b8048a40
|         `-CXXThisExpr 0x5592b8052018 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5592b8038a50 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5592b80526b0 <col:25, line:113:5>
|   |-ParenExpr 0x5592b80523f8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5592b80523c8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8052138 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5592b8052110 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5592b80520d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5592b80520a8 <col:24> '<bound member function type>' ->shared 0x5592b8037ac8
|   |   |       `-ImplicitCastExpr 0x5592b80520f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5592b8052098 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5592b8052198 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8052178 <col:42> 'int' 0
|   |   `-CallExpr 0x5592b8052328 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5592b8052310 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80522f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8052368 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8052208 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5592b8052380 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8052230 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8052398 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8052268 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5592b80523b0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80522d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80522c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8052288 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5592b80525f8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5592b8052428 <col:2> 'unsigned char *' lvalue ->_head 0x5592b80487e0
|   | | `-CXXThisExpr 0x5592b8052418 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5592b80525e0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5592b80525c0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5592b8052468 <col:10> 'unsigned char *' lvalue ->_data 0x5592b8048848
|   |     | `-CXXThisExpr 0x5592b8052458 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5592b80525a8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5592b8052588 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5592b80524a8 <col:18> 'unsigned char *' lvalue ->_tail 0x5592b80488b0
|   |         | `-CXXThisExpr 0x5592b8052498 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5592b8052570 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5592b8052550 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5592b80524e8 <col:26> 'unsigned char *' lvalue ->_end 0x5592b8048918
|   |             | `-CXXThisExpr 0x5592b80524d8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5592b8052538 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5592b8052518 <col:33> 'int' 0
|   `-BinaryOperator 0x5592b8052690 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5592b8052628 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5592b80489d8
|     | `-CXXThisExpr 0x5592b8052618 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5592b8052678 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5592b8052658 <col:16> 'int' 0
|-CXXMethodDecl 0x5592b8038b90 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5592b8038b00 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b8038c38 <col:20>
| |-OptimizeNoneAttr 0x5592b8038c90 <col:30>
| `-WarnUnusedResultAttr 0x5592b8038cb8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5592b8038d88 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5592b8038cf8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b8038e30 <col:20>
| |-OptimizeNoneAttr 0x5592b8038e88 <col:30>
| `-WarnUnusedResultAttr 0x5592b8038eb0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5592b8038fe8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5592b8038ef0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b8039090 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5592b8039190 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5592b8039100 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b8039238 <col:20>
| `-OptimizeNoneAttr 0x5592b8039290 <col:30>
|-CXXMethodDecl 0x5592b8039358 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5592b80392c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b8039400 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5592b8039500 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5592b8039470 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5592b80395a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5592b80396a8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5592b8039618 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b8039750 <col:20>
| `-OptimizeNoneAttr 0x5592b80397a8 <col:30>
|-CXXMethodDecl 0x5592b8039938 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5592b80397e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5592b8039860 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5592b8051ea8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5592b80399e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5592b8039be8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5592b8039a60 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5592b8039ad8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8039df8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5592b8039ca8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b8039d20 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b803a008 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5592b8039eb8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5592b8039f38 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5592b8051eb8 <col:39> 'int' 0
|-CXXMethodDecl 0x5592b803a0d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5592b803a1a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5592b803a268 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5592b803a328 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b803a3f0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5592b803a538 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5592b803a4a8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5592b803a708 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5592b803a5f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5592b803a670 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b803a7d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5592b803a898 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5592b803a938 <col:20>
| `-OptimizeNoneAttr 0x5592b803a990 <col:30>
|-CXXMethodDecl 0x5592b803a9e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5592b803aa80 <col:20>
| `-OptimizeNoneAttr 0x5592b803aad8 <col:30>
|-CXXMethodDecl 0x5592b803ab28 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5592b803abe8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b803acb0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5592b803ad50 <col:20>
| `-OptimizeNoneAttr 0x5592b803ada8 <col:30>
|-CXXMethodDecl 0x5592b803aef8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5592b803ade8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5592b803ae60 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b803b048 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5592b803afb8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b803b120 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5592b803b1e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5592b803b280 <col:20>
| `-OptimizeNoneAttr 0x5592b803b2d8 <col:30>
|-CXXMethodDecl 0x5592b803b328 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5592b803b3c8 <col:20>
| `-OptimizeNoneAttr 0x5592b803b420 <col:30>
|-CXXMethodDecl 0x5592b803b470 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5592b803b538 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5592b803b5d8 <col:20>
| `-OptimizeNoneAttr 0x5592b803b630 <col:30>
|-CXXMethodDecl 0x5592b803b678 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5592b803b798 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5592b803b908 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5592b803b848 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5592b803b9f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5592b803ba98 <col:20>
| `-OptimizeNoneAttr 0x5592b803baf0 <col:30>
|-CXXMethodDecl 0x5592b803bb40 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5592b803bc00 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b803be38 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5592b803bcb0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5592b803bd28 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b803bee8 <col:20>
| `-OptimizeNoneAttr 0x5592b803bf40 <col:30>
|-CXXMethodDecl 0x5592b803bfe8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5592b803c088 <col:20>
| `-OptimizeNoneAttr 0x5592b803c0e0 <col:30>
|-CXXMethodDecl 0x5592b803c130 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5592b803c1d0 <col:20>
| `-OptimizeNoneAttr 0x5592b803c228 <col:30>
|-CXXMethodDecl 0x5592b803c270 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5592b803c310 <col:20>
| `-OptimizeNoneAttr 0x5592b803c368 <col:30>
|-CXXMethodDecl 0x5592b803c468 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5592b803c3a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5592b803c510 <col:20>
| `-OptimizeNoneAttr 0x5592b803c568 <col:30>
|-CXXMethodDecl 0x5592b803c728 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5592b803c5a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5592b803c618 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b803c7d8 <col:20>
| `-OptimizeNoneAttr 0x5592b803c830 <col:30>
|-CXXMethodDecl 0x5592b803c8d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5592b803c9f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5592b803cb18 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5592b803cbb8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b803cbe0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5592b803cd08 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5592b803cda8 <col:20>
| `-OptimizeNoneAttr 0x5592b803ce00 <col:30>
|-CXXMethodDecl 0x5592b803cea8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5592b803cf48 <col:20>
| `-OptimizeNoneAttr 0x5592b803cfa0 <col:30>
|-AccessSpecDecl 0x5592b803cfc8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5592b803cff0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5592b803d0f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5592b803d140 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b803d0d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5592b803d0b0 <col:14> 'int' 48
|-CXXMethodDecl 0x5592b803d1a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5592b803d248 <col:20>
| `-OptimizeNoneAttr 0x5592b803d2a0 <col:30>
|-CXXMethodDecl 0x5592b803d318 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5592b803d3b8 <col:20>
| `-OptimizeNoneAttr 0x5592b803d410 <col:30>
|-CXXMethodDecl 0x5592b803d4d8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5592b803d448 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5592b803d678 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5592b803d818 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5592b803d728 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5592b803d8c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5592b803d9c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803dd70 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803d9a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b803d980 <col:9> 'int' 0
| |-EnumConstantDecl 0x5592b803da50 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803dd88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803da30 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b803da10 <col:14> 'int' 1
| |-EnumConstantDecl 0x5592b803dae0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803dda0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803dac0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5592b803daa0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5592b803db70 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803ddb8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803db50 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5592b803db30 <col:14> 'int' 3
| |-EnumConstantDecl 0x5592b803dc00 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803ddd0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803dbe0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5592b803dbc0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5592b803dc90 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5592b803dde8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803dc70 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5592b803dc50 <col:13> 'int' 5
| `-EnumConstantDecl 0x5592b803dd20 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5592b803de00 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b803dd00 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5592b803dce0 <col:14> 'int' 6
|-CXXMethodDecl 0x5592b803de68 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5592b803df08 <col:20>
| `-OptimizeNoneAttr 0x5592b803df60 <col:30>
|-CXXMethodDecl 0x5592b803e058 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5592b803df98 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5592b803e100 <col:20>
| `-OptimizeNoneAttr 0x5592b803e158 <col:30>
|-CXXMethodDecl 0x5592b803e1c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5592b803e2f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5592b803e468 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5592b803e3a0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5592b803e530 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5592b803e5f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5592b803e738 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5592b803e6a8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5592b803e7e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5592b803e8e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5592b803eae0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803e8c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b803e8a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5592b803e970 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5592b803eaf8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803e950 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5592b803e930 <col:45> 'int' 4
| |-EnumConstantDecl 0x5592b803ea00 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5592b803eb10 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b803e9e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b803e9c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5592b803ea90 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5592b803eb28 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b803ea70 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5592b803ea50 <col:47> 'int' 16
|-CXXMethodDecl 0x5592b803eb88 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5592b803ecf8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5592b803ec38 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5592b803eda0 <col:20>
| `-OptimizeNoneAttr 0x5592b803edf8 <col:30>
|-CXXMethodDecl 0x5592b803ee48 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5592b80527d0 <col:18, col:36>
|   `-ReturnStmt 0x5592b80527c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5592b80527a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5592b8052788 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5592b8052758 <col:27> '<bound member function type>' ->xanno 0x5592b803cea8
|           `-CXXThisExpr 0x5592b8052748 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5592b803ef40 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5592b80528e0 <col:30, col:48>
|   `-ReturnStmt 0x5592b80528d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5592b80528b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5592b8052898 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5592b8052868 <col:39> '<bound member function type>' ->xanno 0x5592b803cd08
|           `-CXXThisExpr 0x5592b8052858 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5592b803f028 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5592b8052a78 <col:24, col:50>
|   `-ReturnStmt 0x5592b8052a68 <col:26, col:47>
|     `-UnaryOperator 0x5592b8052a50 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5592b8052a30 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5592b8052a18 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5592b80529c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5592b8047ce8
|         |   `-CXXMemberCallExpr 0x5592b80529a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5592b8052978 <col:34> '<bound member function type>' ->xanno 0x5592b803cea8
|         |       `-CXXThisExpr 0x5592b8052968 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5592b80529f8 <col:46> 'int' 0
|-CXXMethodDecl 0x5592b803f130 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5592b8052c48 <col:36, col:62>
|   `-ReturnStmt 0x5592b8052c38 <col:38, col:59>
|     `-UnaryOperator 0x5592b8052c20 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5592b8052c00 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5592b8052be8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5592b8052b60 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5592b8047ce8
|         |   `-CXXMemberCallExpr 0x5592b8052b40 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5592b8052b10 <col:46> '<bound member function type>' ->xanno 0x5592b803cd08
|         |       `-CXXThisExpr 0x5592b8052b00 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5592b8052b90 <col:58> 'int' 0
|-CXXMethodDecl 0x5592b803f248 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5592b8052de0 <col:26, col:53>
|   `-ReturnStmt 0x5592b8052dd0 <col:28, col:50>
|     `-UnaryOperator 0x5592b8052db8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5592b8052d98 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5592b8052d80 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5592b8052d30 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5592b8047fe8
|         |   `-CXXMemberCallExpr 0x5592b8052d10 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5592b8052ce0 <col:36> '<bound member function type>' ->xanno 0x5592b803cea8
|         |       `-CXXThisExpr 0x5592b8052cd0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5592b8052d60 <col:49> 'int' 0
|-CXXMethodDecl 0x5592b803f368 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5592b8052fb8 <col:38, col:65>
|   `-ReturnStmt 0x5592b8052fa8 <col:40, col:62>
|     `-UnaryOperator 0x5592b8052f90 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5592b8052f70 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5592b8052f58 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5592b8052ec8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5592b8047fe8
|         |   `-CXXMemberCallExpr 0x5592b8052ea8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5592b8052e78 <col:48> '<bound member function type>' ->xanno 0x5592b803cd08
|         |       `-CXXThisExpr 0x5592b8052e68 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5592b8052ef8 <col:61> 'int' 0
|-CXXMethodDecl 0x5592b803f518 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5592b803f420 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5592b8053688 <col:34, line:463:5>
|   |-ParenExpr 0x5592b80534d0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5592b80534a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8053108 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b80530d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8053028 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8053010 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8052fd0 <col:23> 'int' lvalue ParmVar 0x5592b803f420 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8052ff0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b80530b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8053088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8053048 <col:33> 'int' lvalue ParmVar 0x5592b803f420 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5592b80530a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5592b8053068 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5592b8053168 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8053148 <col:56> 'int' 0
|   |   `-CallExpr 0x5592b8053400 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5592b80533e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80533c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8053440 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8053258 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5592b8053458 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8053288 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8053470 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b80532c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5592b8053488 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80533b0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8053398 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8053358 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5592b8053678 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5592b8053660 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5592b8053640 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5592b8053610 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5592b80535c0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5592b8047ce8
|         |   `-CXXMemberCallExpr 0x5592b80535a0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5592b8053570 <col:9> '<bound member function type>' ->xanno 0x5592b803cd08
|         |       `-CXXThisExpr 0x5592b8053560 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5592b8053628 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5592b80535f0 <col:21> 'int' lvalue ParmVar 0x5592b803f420 'i' 'int'
|-CXXMethodDecl 0x5592b803f768 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5592b803f5d8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5592b803f650 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5592b8053d18 <col:40, line:472:5>
|   |-ParenExpr 0x5592b8053b30 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5592b8053b00 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5592b80537e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b80537b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8053700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b80536e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b80536a8 <col:23> 'int' lvalue ParmVar 0x5592b803f5d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b80536c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8053790 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8053760 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8053720 <col:33> 'int' lvalue ParmVar 0x5592b803f5d8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5592b8053778 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5592b8053740 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5592b8053840 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8053820 <col:56> 'int' 0
|   |   `-CallExpr 0x5592b8053a60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5592b8053a48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8053a28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8053aa0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80538b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5592b8053ab8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80538e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8053ad0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8053918 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5592b8053ae8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8053a10 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80539f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b80539b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5592b8053cf8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5592b8053ca0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5592b8053c70 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5592b8053c20 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5592b8047ce8
|     | |   `-CXXMemberCallExpr 0x5592b8053c00 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5592b8053bd0 <col:2> '<bound member function type>' ->xanno 0x5592b803cea8
|     | |       `-CXXThisExpr 0x5592b8053bc0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5592b8053c88 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5592b8053c50 <col:14> 'int' lvalue ParmVar 0x5592b803f5d8 'i' 'int'
|     `-ImplicitCastExpr 0x5592b8053ce0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8053cc0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5592b803f650 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5592b803f928 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5592b803f830 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5592b8054498 <col:36, line:485:5>
|   |-ParenExpr 0x5592b8054200 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b80541d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8053eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8053e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8053d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8053d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8053d38 <col:23> 'int' lvalue ParmVar 0x5592b803f830 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8053d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8053e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8053e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8053db0 <col:33> 'int' lvalue ParmVar 0x5592b803f830 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8053e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8053e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8053dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8053df0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5592b8053f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8053ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8054130 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8054118 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80540f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8054170 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8053f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5592b8054188 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8053fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b80541a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8053ff0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5592b80541b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80540e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80540c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8054088 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5592b8054488 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5592b8054470 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5592b8054458 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b8054428 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5592b80543c8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b8054398 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b8054310 <col:61, col:70> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b80542f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b80542c0 <col:61> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b80542b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b80543b0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b8054340 <col:74> 'int' lvalue ParmVar 0x5592b803f830 'i' 'int'
|-CXXMethodDecl 0x5592b803fb78 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5592b803f9e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5592b803fa60 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5592b8054be8 <col:42, line:500:5>
|   |-ParenExpr 0x5592b8054980 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8054950 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8054630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8054600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8054510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b80544f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b80544b8 <col:23> 'int' lvalue ParmVar 0x5592b803f9e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b80544d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b80545e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b80545c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8054530 <col:33> 'int' lvalue ParmVar 0x5592b803f9e8 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b80545a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8054590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8054550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8054570 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5592b8054690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8054670 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b80548b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8054898 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8054878 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b80548f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8054700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5592b8054908 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8054738 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8054920 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8054770 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5592b8054938 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8054860 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8054848 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8054808 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5592b8054bc8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5592b8054b78 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5592b8054b48 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5592b8054af0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5592b8054ac0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b8054a70 <col:48, col:57> 'char [48]' lvalue ->c 0x5592b8047bc0
|     |     |   `-CXXMemberCallExpr 0x5592b8054a50 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5592b8054a20 <col:48> '<bound member function type>' ->xanno 0x5592b803cea8
|     |     |       `-CXXThisExpr 0x5592b8054a10 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5592b8054ad8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5592b8054aa0 <col:61> 'int' lvalue ParmVar 0x5592b803f9e8 'i' 'int'
|     `-ImplicitCastExpr 0x5592b8054bb0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8054b90 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5592b803fa60 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5592b803fd38 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5592b803fc40 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5592b8055348 <col:35, line:513:5>
|   |-ParenExpr 0x5592b8055058 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8055028 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8054d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8054d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8054c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8054c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8054c08 <col:23> 'int' lvalue ParmVar 0x5592b803fc40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8054c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8054d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8054d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8054c80 <col:33> 'int' lvalue ParmVar 0x5592b803fc40 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8054cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8054ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8054ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8054cc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5592b8054de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8054dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8054f88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8054f70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8054f50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8054fc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8054e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5592b8054fe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8054e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8054ff8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8054ec0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5592b8055010 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8054f38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8054f20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8054ee0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5592b8055338 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5592b8055320 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5592b8055308 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b80552d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5592b8055250 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b8055220 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b80551d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b80551b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b8055180 <col:60> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b8055170 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b8055238 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b8055200 <col:73> 'int' lvalue ParmVar 0x5592b803fc40 'i' 'int'
|-CXXMethodDecl 0x5592b803ff88 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5592b803fdf8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5592b803fe70 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5592b8055a68 <col:41, line:528:5>
|   |-ParenExpr 0x5592b80557f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b80557c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b80554e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b80554b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b80553c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b80553a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8055368 <col:23> 'int' lvalue ParmVar 0x5592b803fdf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8055388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8055490 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8055478 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b80553e0 <col:33> 'int' lvalue ParmVar 0x5592b803fdf8 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8055458 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8055440 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8055400 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8055420 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5592b8055540 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8055520 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8055720 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8055708 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80556e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8055760 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80555b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5592b8055778 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80555e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8055790 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8055620 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5592b80557a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80556d0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80556b8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8055678 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5592b8055a48 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5592b80559f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5592b80559c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5592b8055970 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5592b8055930 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b80558e0 <col:47, col:56> 'char [48]' lvalue ->c 0x5592b8047bc0
|     |     |   `-CXXMemberCallExpr 0x5592b80558c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5592b8055890 <col:47> '<bound member function type>' ->xanno 0x5592b803cea8
|     |     |       `-CXXThisExpr 0x5592b8055880 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5592b8055948 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5592b8055910 <col:60> 'int' lvalue ParmVar 0x5592b803fdf8 'i' 'int'
|     `-ImplicitCastExpr 0x5592b8055a30 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8055a10 <col:65> 'int16_t':'short' lvalue ParmVar 0x5592b803fe70 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5592b8040148 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5592b8040050 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5592b8056138 <col:36, line:541:5>
|   |-ParenExpr 0x5592b8055ed8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8055ea8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8055c00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8055bd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8055ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8055ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8055a88 <col:23> 'int' lvalue ParmVar 0x5592b8040050 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8055aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8055bb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8055b98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8055b00 <col:33> 'int' lvalue ParmVar 0x5592b8040050 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8055b78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8055b60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8055b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8055b40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5592b8055c60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8055c40 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8055e08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8055df0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8055dd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8055e48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8055cd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5592b8055e60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8055d08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8055e78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8055d40 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5592b8055e90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8055db8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8055da0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8055d60 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5592b8056128 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5592b8056110 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5592b80560f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b80560c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5592b8056070 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b8056040 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b8055ff0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b8055fd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b8055fa0 <col:61> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b8055f90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b8056058 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b8056020 <col:74> 'int' lvalue ParmVar 0x5592b8040050 'i' 'int'
|-CXXMethodDecl 0x5592b8040318 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5592b8040208 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5592b8040280 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5592b80403c8 <col:20>
| `-OptimizeNoneAttr 0x5592b8040420 <col:30>
|-CXXMethodDecl 0x5592b8040558 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5592b8040460 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5592b8056808 <col:35, line:562:5>
|   |-ParenExpr 0x5592b80565a8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8056578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b80562d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b80562a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b80561b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8056198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8056158 <col:23> 'int' lvalue ParmVar 0x5592b8040460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8056178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8056280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8056268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b80561d0 <col:33> 'int' lvalue ParmVar 0x5592b8040460 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8056248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8056230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b80561f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8056210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5592b8056330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8056310 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b80564d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b80564c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80564a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8056518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80563a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5592b8056530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80563d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8056548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8056410 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5592b8056560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8056488 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8056470 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8056430 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5592b80567f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5592b80567e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5592b80567c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b8056798 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5592b8056740 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b8056710 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b80566c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b80566a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b8056670 <col:60> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b8056660 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b8056728 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b80566f0 <col:73> 'int' lvalue ParmVar 0x5592b8040460 'i' 'int'
|-CXXMethodDecl 0x5592b8040768 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5592b8040618 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5592b8040690 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5592b8056ee8 <col:41, line:577:5>
|   |-ParenExpr 0x5592b8056c78 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8056c48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b80569a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8056970 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8056880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8056868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8056828 <col:23> 'int' lvalue ParmVar 0x5592b8040618 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8056848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8056950 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8056938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b80568a0 <col:33> 'int' lvalue ParmVar 0x5592b8040618 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8056918 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8056900 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b80568c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b80568e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5592b8056a00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b80569e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8056ba8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8056b90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8056b70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8056be8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8056a70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5592b8056c00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8056aa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8056c18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b8056ae0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5592b8056c30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8056b58 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8056b40 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8056b00 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5592b8056ec8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5592b8056e78 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5592b8056e48 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5592b8056de8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5592b8056db8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b8056d68 <col:47, col:56> 'char [48]' lvalue ->c 0x5592b8047bc0
|     |     |   `-CXXMemberCallExpr 0x5592b8056d48 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5592b8056d18 <col:47> '<bound member function type>' ->xanno 0x5592b803cea8
|     |     |       `-CXXThisExpr 0x5592b8056d08 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5592b8056dd0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5592b8056d98 <col:60> 'int' lvalue ParmVar 0x5592b8040618 'i' 'int'
|     `-ImplicitCastExpr 0x5592b8056eb0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8056e90 <col:65> 'int32_t':'int' lvalue ParmVar 0x5592b8040690 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5592b8040928 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5592b8040830 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5592b8057618 <col:36, line:591:5>
|   |-ParenExpr 0x5592b8057358 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8057328 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8057080 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8057050 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8056f60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8056f48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8056f08 <col:23> 'int' lvalue ParmVar 0x5592b8040830 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8056f28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8057030 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8057018 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8056f80 <col:33> 'int' lvalue ParmVar 0x5592b8040830 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8056ff8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8056fe0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8056fa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b8056fc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5592b80570e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b80570c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b8057288 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b8057270 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8057250 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b80572c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8057150 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5592b80572e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8057188 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b80572f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b80571c0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5592b8057310 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8057238 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8057220 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b80571e0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5592b8057608 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5592b80575f0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5592b80575d8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b80575a8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5592b8057520 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b80574f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b80574a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b8057480 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b8057450 <col:61> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b8057440 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b8057508 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b80574d0 <col:74> 'int' lvalue ParmVar 0x5592b8040830 'i' 'int'
|-CXXMethodDecl 0x5592b8040b78 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5592b80409e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5592b8040a60 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5592b8057cf8 <col:42, line:606:5>
|   |-ParenExpr 0x5592b8057a88 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5592b8057a58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5592b80577b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8057780 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8057690 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8057678 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8057638 <col:23> 'int' lvalue ParmVar 0x5592b80409e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8057658 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8057760 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5592b8057748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b80576b0 <col:33> 'int' lvalue ParmVar 0x5592b80409e8 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8057728 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8057710 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b80576d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5592b80576f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5592b8057810 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b80577f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5592b80579b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5592b80579a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b8057980 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b80579f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8057880 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5592b8057a10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b80578b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8057a28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b80578f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5592b8057a40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b8057968 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b8057950 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8057910 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5592b8057cd8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5592b8057c88 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5592b8057c58 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5592b8057bf8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5592b8057bc8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b8057b78 <col:48, col:57> 'char [48]' lvalue ->c 0x5592b8047bc0
|     |     |   `-CXXMemberCallExpr 0x5592b8057b58 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5592b8057b28 <col:48> '<bound member function type>' ->xanno 0x5592b803cea8
|     |     |       `-CXXThisExpr 0x5592b8057b18 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5592b8057be0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5592b8057ba8 <col:61> 'int' lvalue ParmVar 0x5592b80409e8 'i' 'int'
|     `-ImplicitCastExpr 0x5592b8057cc0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5592b8057ca0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5592b8040a60 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5592b8040d10 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5592b8040c40 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5592b8058568 <col:33, line:620:5>
|   |-ParenExpr 0x5592b80582e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5592b80582b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8057f00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8057ed0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b8057d70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b8057d58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8057d18 <col:23> 'int' lvalue ParmVar 0x5592b8040c40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b8057d38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8057eb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5592b8057e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8057d90 <col:33> 'int' lvalue ParmVar 0x5592b8040c40 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b8057e78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b8057e60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8057db0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5592b8057e38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5592b8057e20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5592b8057de8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5592b8057f60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b8057f40 <col:79> 'int' 0
|   |   `-CallExpr 0x5592b8058210 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5592b80581f8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80581d8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8058250 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8058048 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5592b8058268 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8058090 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8058280 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b80580c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5592b8058298 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80581c0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80581a8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8058168 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5592b8058558 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5592b8058540 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5592b8058528 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5592b80584f8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5592b8058470 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5592b8058440 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5592b80583f0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5592b8047bc0
|             |   `-CXXMemberCallExpr 0x5592b80583d0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5592b80583a0 <col:67> '<bound member function type>' ->xanno 0x5592b803cd08
|             |       `-CXXThisExpr 0x5592b8058390 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5592b8058458 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5592b8058420 <col:80> 'int' lvalue ParmVar 0x5592b8040c40 'i' 'int'
|-CXXMethodDecl 0x5592b8040f28 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5592b8040dd0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5592b8040e50 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5592b8058d90 <col:45, line:635:5>
|   |-ParenExpr 0x5592b8058ad8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5592b8058aa8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5592b8058770 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5592b8058740 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5592b80585e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5592b80585c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5592b8058588 <col:23> 'int' lvalue ParmVar 0x5592b8040dd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5592b80585a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5592b8058720 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5592b8058708 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5592b8058600 <col:33> 'int' lvalue ParmVar 0x5592b8040dd0 'i' 'int'
|   |   |     `-BinaryOperator 0x5592b80586e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5592b80586d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5592b8058620 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5592b803d0f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5592b80586a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5592b8058690 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5592b8058658 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5592b80587d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5592b80587b0 <col:79> 'int' 0
|   |   `-CallExpr 0x5592b8058a08 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5592b80589f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80589d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5592b8058a48 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8058840 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5592b8058a60 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5592b8058888 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5592b8058a78 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5592b80588c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5592b8058a90 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5592b80589b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5592b80589a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5592b8058958 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5592b8058d70 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5592b8058cd8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5592b8058ca8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5592b8058c48 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5592b8058c18 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5592b8058bc8 <col:54, col:63> 'char [48]' lvalue ->c 0x5592b8047bc0
|     |     |   `-CXXMemberCallExpr 0x5592b8058ba8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5592b8058b78 <col:54> '<bound member function type>' ->xanno 0x5592b803cea8
|     |     |       `-CXXThisExpr 0x5592b8058b68 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5592b8058c30 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5592b8058bf8 <col:67> 'int' lvalue ParmVar 0x5592b8040dd0 'i' 'int'
|     `-CXXConstCastExpr 0x5592b8058d40 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5592b8058d28 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5592b8058cf0 <col:91> 'const void *' lvalue ParmVar 0x5592b8040e50 'x' 'const void *'
|-CXXMethodDecl 0x5592b8040ff8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5592b8058e18 <col:34, line:640:5>
|   `-ReturnStmt 0x5592b8058e08 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5592b8058df0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5592b8058dc0 <col:16> 'Packet *' lvalue ->_data_packet 0x5592b8048778
|         `-CXXThisExpr 0x5592b8058db0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5592b8041138 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5592b80410a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b8051ed8 <col:46> 'bool' true
|-CXXMethodDecl 0x5592b80412b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5592b80411f0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5592b8041360 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5592b8041b10 <line:660:22> "" ""
| |-EnumConstantDecl 0x5592b8041460 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041b80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041440 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5592b8041420 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5592b80365c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5592b80414f0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041b98 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80414d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5592b80414b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5592b8036650 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5592b8041580 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041560 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b8041540 <col:21> 'int' 0
| |-EnumConstantDecl 0x5592b8041610 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041bc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80415f0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5592b80415d0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5592b80416a0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041680 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5592b8041660 <col:21> 'int' 16
| |-EnumConstantDecl 0x5592b8041730 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041710 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5592b80416f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5592b80417c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041c10 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80417a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5592b8041780 <col:19> 'int' EnumConstant 0x5592b8041610 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5592b8041850 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041c28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041830 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5592b8041810 <col:19> 'int' EnumConstant 0x5592b8041730 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5592b8041920 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041c40 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8041900 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5592b80418e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5592b80418a0 <col:23> 'int' EnumConstant 0x5592b8041850 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5592b80418c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5592b80419f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5592b8041c58 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b80419d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5592b80419b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5592b8041970 <col:23> 'int' EnumConstant 0x5592b8041850 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5592b8041990 <col:40> 'int' 4
| `-EnumConstantDecl 0x5592b8041ac0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5592b8041c70 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8041aa0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5592b8041a80 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5592b8041a40 <col:23> 'int' EnumConstant 0x5592b8041850 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5592b8041a60 <col:40> 'int' 8
|-CXXMethodDecl 0x5592b8041cb0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5592b8041d50 <col:68> "" ""
|-CXXMethodDecl 0x5592b8041de8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5592b8041e88 <col:45> "" ""
|-CXXMethodDecl 0x5592b8041f20 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5592b8041fc0 <col:57> "" ""
|-CXXMethodDecl 0x5592b8042058 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5592b80420f8 <col:45> "" ""
|-CXXMethodDecl 0x5592b8042190 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5592b8042230 <col:57> "" ""
|-CXXMethodDecl 0x5592b80422c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5592b8042360 <col:51> "" ""
|-CXXMethodDecl 0x5592b80423f0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5592b8042490 <col:63> "" ""
|-CXXMethodDecl 0x5592b8042520 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5592b80425c0 <col:53> "" ""
|-CXXMethodDecl 0x5592b8042650 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5592b80426f0 <col:65> "" ""
|-CXXMethodDecl 0x5592b8042808 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5592b8042778 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5592b80428b0 <col:61> "" ""
|-CXXMethodDecl 0x5592b8042a48 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5592b8042938 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5592b80429b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5592b8042af8 <col:67> "" ""
|-CXXMethodDecl 0x5592b8042c10 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5592b8042b80 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5592b8042cb8 <col:63> "" ""
|-CXXMethodDecl 0x5592b8042e50 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5592b8042d40 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5592b8042db8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5592b8042f00 <col:69> "" ""
|-CXXMethodDecl 0x5592b8043018 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5592b8042f88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5592b80430c0 <col:63> "" ""
|-CXXMethodDecl 0x5592b8045798 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5592b8045688 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5592b8045700 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8045848 <col:69> "" ""
|-CXXMethodDecl 0x5592b8045960 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5592b80458d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5592b8045a08 <col:62> "" ""
|-CXXMethodDecl 0x5592b8045ba0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5592b8045a90 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5592b8045b08 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5592b8045c50 <col:68> "" ""
|-CXXMethodDecl 0x5592b8045d68 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5592b8045cd8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5592b8045e10 <col:63> "" ""
|-CXXMethodDecl 0x5592b8045fa8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5592b8045e98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5592b8045f10 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5592b8046058 <col:69> "" ""
|-CXXMethodDecl 0x5592b80460e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5592b8046188 <col:64> "" ""
|-CXXMethodDecl 0x5592b8046218 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5592b80462b8 <col:52> "" ""
|-CXXMethodDecl 0x5592b8046348 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5592b80463e8 <col:67> "" ""
|-CXXMethodDecl 0x5592b8046478 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5592b8046518 <col:55> "" ""
|-CXXMethodDecl 0x5592b8046630 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5592b80465a0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5592b80466d8 <col:58> "" ""
|-CXXMethodDecl 0x5592b8046870 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5592b8046760 <col:33> col:36 'int'
| |-ParmVarDecl 0x5592b80467d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5592b8046920 <col:62> "" ""
|-CXXMethodDecl 0x5592b8046a38 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5592b80469a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5592b8046ae0 <col:58> "" ""
|-CXXMethodDecl 0x5592b8046c78 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5592b8046b68 <col:33> col:36 'int'
| |-ParmVarDecl 0x5592b8046be0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5592b8046d28 <col:62> "" ""
|-CXXMethodDecl 0x5592b8046e40 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5592b8046db0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5592b8046ee8 <col:60> "" ""
|-CXXMethodDecl 0x5592b8047080 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5592b8046f70 <col:34> col:37 'int'
| |-ParmVarDecl 0x5592b8046fe8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5592b8047130 <col:64> "" ""
|-CXXMethodDecl 0x5592b8047248 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5592b80471b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5592b80472f0 <col:58> "" ""
|-CXXMethodDecl 0x5592b8047488 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5592b8047378 <col:33> col:36 'int'
| |-ParmVarDecl 0x5592b80473f0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5592b8047538 <col:62> "" ""
|-CXXMethodDecl 0x5592b8047650 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5592b80475c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5592b80476f8 <col:59> "" ""
|-CXXMethodDecl 0x5592b8047890 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5592b8047780 <col:33> col:36 'int'
| |-ParmVarDecl 0x5592b80477f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8047940 <col:63> "" ""
|-AccessSpecDecl 0x5592b80479b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b80479d8 prev 0x5592b803cbe0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b8047ad0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5592b8047bc0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5592b8047ce8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5592b8047e68 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5592b8047fe8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5592b8048168 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5592b8058f98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5592b8059808 <col:11>
| |-CXXDestructorDecl 0x5592b8059070 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5592b80591a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5592b80591a8
| | `-ParmVarDecl 0x5592b80592b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5592b8059358 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5592b8059358
| | `-ParmVarDecl 0x5592b8059468 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5592b805c228 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b805c338 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5592b805c5b8 <col:11>
| |   `-ReturnStmt 0x5592b805c5a8 <col:11>
| |     `-UnaryOperator 0x5592b805c590 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5592b805c580 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5592b805c3a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5592b805c3a8
|   `-ParmVarDecl 0x5592b805c4b8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5592b80481d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b80482e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5592b8048388 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5592b80483f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5592b8048458 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5592b80484c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5592b8048520 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5592b80485e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5592b8048640 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5592b80486a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5592b8058ea8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5592b8048388 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5592b8059818 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5592b8059870 <col:12>
| |-CXXConstructorDecl 0x5592b80594d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5592b80594d8
| | `-ParmVarDecl 0x5592b80595e8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5592b8059688 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5592b8059688
| | `-ParmVarDecl 0x5592b8059798 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5592b805b910 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5592b8048718 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5592b8048778 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5592b80487e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5592b8048848 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5592b80488b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5592b8048918 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5592b8048978 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5592b80489d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5592b8048a40 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5592b8048ac8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5592b8048718 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5592b8058e40 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5592b8048978 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5592b8059880 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5592b80598e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5592b8048c68 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5592b8048ba8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5592b8048d60 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5592b8048f48 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5592b8048e50 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5592b8049218 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5592b8049000 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b8049078 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b80490f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8049438 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5592b80492e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5592b8049360 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5592b8051a18 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5592b80494f8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5592b8049570 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5592b80495e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5592b8051b70 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5592b8051ae0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8051cb8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5592b8051c28 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5592b8051db0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7da3f18 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7da4038 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5592b7da4100 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5592b7e746d0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b7e799e8 <col:8>
|-CXXConstructorDecl 0x5592b7e747d8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5592b7e747d8
| `-ParmVarDecl 0x5592b7e748e8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5592b7e74988 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b7e74a98 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5592b7da4100 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5592b7e79c00 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5592b7e79bd0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5592b7da4100
| |     `-CXXStaticCastExpr 0x5592b7e79ba0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5592b7e79b70 <col:8> 'in_addr' lvalue ParmVar 0x5592b7e74a98 '' 'in_addr &&'
| `-CompoundStmt 0x5592b7e79c48 <col:8>
`-CXXDestructorDecl 0x5592b7e79e80 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7e6c3b8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5592b7e6c4d8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5592b7e6c5c0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5592b7e6c5a0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5592b7e6c568 <col:22> 'int' 4
|-FieldDecl 0x5592b7e6c668 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x5592b7e6c648 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5592b7e6c610 <col:21> 'int' 4
|-FieldDecl 0x5592b7e6c6c8 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b7e6c728 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b7e6c788 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b7e6c7e8 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b7e6c848 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b7e6c8a8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b7e6c908 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b7e6c978 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5592b7e6c9e8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8087d90 prev 0x5592b8036030 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5592b8087e88 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5592b8087f28 <line:25:5, col:14> col:14 referenced th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b8087f88 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b8088010 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5592b8088070 <line:28:5, col:15> col:15 referenced th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5592b8088118 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5592b80880f8 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5592b80880c0 <col:26> 'int' 4
|-FieldDecl 0x5592b80881c0 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x5592b80881a0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5592b8088168 <col:23> 'int' 4
|-FieldDecl 0x5592b8088220 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b8088280 <line:48:5, col:14> col:14 referenced th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5592b80882e0 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5592b8088340 <line:50:5, col:14> col:14 referenced th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8059980 prev 0x5592b8036240 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5592b8059ab8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5592b8059b48 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5592b8059bf0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5592b8059c90 <col:20>
| `-OptimizeNoneAttr 0x5592b8059ce8 <col:30>
|-CXXMethodDecl 0x5592b8059d38 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5592b8059dd8 <col:20>
| `-OptimizeNoneAttr 0x5592b8059e30 <col:30>
|-CXXMethodDecl 0x5592b8059e80 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5592b8059f48 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5592b805a010 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5592b805a128 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5592b805a1f0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5592b805a290 <col:20>
| `-OptimizeNoneAttr 0x5592b805a2e8 <col:30>
|-CXXMethodDecl 0x5592b805a358 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5592b805a3f8 <col:20>
| `-OptimizeNoneAttr 0x5592b805a450 <col:30>
|-CXXMethodDecl 0x5592b805a4f8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5592b805a598 <col:20>
| `-OptimizeNoneAttr 0x5592b805a5f0 <col:30>
|-CXXMethodDecl 0x5592b805a640 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5592b805a758 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5592b805a878 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5592b805a998 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5592b805aa60 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5592b805ab00 <col:62> "" ""
|-AccessSpecDecl 0x5592b805ab70 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5592b805abd0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5592b805b7c8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5592b805b9f0 <col:29, col:31>
|-CXXMethodDecl 0x5592b805ac98 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5592b805add8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5592b805ad48 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5592b805aed0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5592b805ba00 <col:23, col:25>
|-CXXMethodDecl 0x5592b805b088 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5592b805afc0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5592b805b358 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5592b805b140 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5592b805b1b8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5592b805b230 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b805b4e8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5592b805b420 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5592b805b5e0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5592b805b648 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5592b805b648
  `-ParmVarDecl 0x5592b805b758 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8169f00 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b816a018 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x5592b816a0e8 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x5592b816a148 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x5592b816a1b0 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x5592b816a238 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x5592b816a4a0 <col:16, line:46:5>
|   |-BinaryOperator 0x5592b816a3e8 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x5592b816a308 <col:9> 'TaskLink *' lvalue ->_prev 0x5592b816a0e8
|   | | `-CXXThisExpr 0x5592b816a2f8 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x5592b816a3d0 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x5592b816a3b0 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x5592b816a348 <col:17> 'TaskLink *' lvalue ->_next 0x5592b816a148
|   |     | `-CXXThisExpr 0x5592b816a338 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x5592b816a398 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x5592b816a378 <col:25> 'int' 0
|   `-BinaryOperator 0x5592b816a480 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x5592b816a418 <col:9> 'unsigned int' lvalue ->_pass 0x5592b816a1b0
|     | `-CXXThisExpr 0x5592b816a408 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x5592b816a468 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5592b816a448 <col:17> 'int' 0
|-CXXConstructorDecl 0x5592b81ce2b8 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x5592b81ce2b8
| `-ParmVarDecl 0x5592b81ce3c8 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5592b81ce468 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5592b81ce468
| `-ParmVarDecl 0x5592b81ce578 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5592b81ce768 <col:8> col:8 implicit ~TaskLink 'void ()' inline default trivial noexcept-unevaluated 0x5592b81ce768
|-CXXMethodDecl 0x5592b81cef68 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5592b81cef68
| `-ParmVarDecl 0x5592b81cf078 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x5592b81cf0e8 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x5592b81cf0e8
  `-ParmVarDecl 0x5592b81cf1f8 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b816ca08 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5592b816cb38 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5592b816cb98 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b816cbf8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5592b81d8848 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5592b81d8920 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b81d8920
|-CXXConstructorDecl 0x5592b81d8bd8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5592b81d8bd8
| `-ParmVarDecl 0x5592b81d8ce8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x5592b81d8d88 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5592b81d8d88
  `-ParmVarDecl 0x5592b81d8e98 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b816c860 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5592b816c978 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x5592b816ca08 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5592b816cb38 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5592b816cb98 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x5592b816cbf8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5592b81d8848 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5592b81d8920 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b81d8920
| |-CXXConstructorDecl 0x5592b81d8bd8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5592b81d8bd8
| | `-ParmVarDecl 0x5592b81d8ce8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x5592b81d8d88 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5592b81d8d88
|   `-ParmVarDecl 0x5592b81d8e98 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5592b816ccb8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x5592b816cd18 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5592b816cb38 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x5592b816cd70 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5592b816cb98 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5592b816cdc8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5592b816cbf8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x5592b816ce20 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5592b81d8758 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b81d90b8 <col:11>
|-CXXConstructorDecl 0x5592b81d8a28 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5592b81d8a28
| `-ParmVarDecl 0x5592b81d8b38 <col:11> col:11 'const Task::Status &'
`-CXXConstructorDecl 0x5592b81d8f38 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5592b81d8f38
  `-ParmVarDecl 0x5592b81d9048 <col:11> col:11 'Task::Status &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8007c70 prev 0x5592b7ffeab0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b8007d68 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5592b8007e08 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5592b800ebd0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b800efb8 <col:11>
|-CXXConstructorDecl 0x5592b800ecb0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b800ed98 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5592b800f700 <col:11>
|-CXXConstructorDecl 0x5592b800ee38 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b800ef48 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5592b8010f58 <col:11>
|-CXXDestructorDecl 0x5592b8010268 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5592b7d16e18 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b7d16f28 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5592b7d177f0 <col:11>
|   `-ReturnStmt 0x5592b7d177e0 <col:11>
|     `-UnaryOperator 0x5592b7d177c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b7d177b8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5592b7d16f98 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5592b7d170a8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5592b815cff0 <col:11>
    `-ReturnStmt 0x5592b815cfe0 <col:11>
      `-UnaryOperator 0x5592b815cfc8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5592b815cfb8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b7ffdc68 prev 0x5592b7ffd978 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b7ffdd60 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5592b7ffddf0 <col:19, col:25> col:19 public
|-TypedefDecl 0x5592b7ffde28 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5592b7c63010 'int32_t' sugar
|   |-Typedef 0x5592b7b73328 'int32_t'
|   `-TypedefType 0x5592b7b4c510 '__int32_t' sugar
|     |-Typedef 0x5592b7b4c128 '__int32_t'
|     `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b7ffde90 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5592b7c631d0 'int64_t' sugar
|   |-Typedef 0x5592b7b73390 'int64_t'
|   `-TypedefType 0x5592b7b4c630 '__int64_t' sugar
|     |-Typedef 0x5592b7b4c208 '__int64_t'
|     `-BuiltinType 0x5592b7b0a5a0 'long'
|-EnumDecl 0x5592b7ffdee8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5592b7ffe060 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5592b7ffe040 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5592b7ffe018 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5592b7ffe000 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5592b7ffdfd0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5592b7ffe158 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5592b7ffe138 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5592b7ffe110 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5592b7ffe0f8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5592b7ffe0d0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5592b7ffe0b0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5592b7ffe1a8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5592b7ffe2b0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe800 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe290 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5592b7ffe270 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5592b7ffe340 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe818 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe320 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5592b7ffe300 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5592b7ffe3d0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe830 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe3b0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5592b7ffe390 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5592b7ffe460 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe848 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe440 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5592b7ffe420 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5592b7ffe4f0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe860 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe4d0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5592b7ffe4b0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5592b7ffe580 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe878 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe560 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5592b7ffe540 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5592b7ffe610 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe890 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe5f0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5592b7ffe5d0 <col:26> 'int' EnumConstant 0x5592b7ffe2b0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5592b7ffe6e0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5592b7ffe8a8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b7ffe6c0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5592b7ffe6a0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5592b7ffe660 <col:27> 'int' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5592b7ffe680 <col:44> 'int' EnumConstant 0x5592b7ffe580 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5592b7ffe7b0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5592b7ffe8c0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b7ffe790 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5592b7ffe770 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5592b7ffe730 <col:27> 'int' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5592b7ffe750 <col:44> 'int' EnumConstant 0x5592b7ffe460 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5592b7ffe8d8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5592b7ffe9e0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5592b7ffea30 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b7ffe9c0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5592b7ffe9a0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5592b7ffea58 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5592b7c62c40 'uninitialized_type'
|   `-CXXRecord 0x5592b7c62ba8 'uninitialized_type'
|-CXXRecordDecl 0x5592b7ffeab0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5592b7ffebc0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800efc8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f0e8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5592b800f0a0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5592b800f030 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b800f020 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5592b800f060 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5592b800f0d0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5592b800f080 <col:19> 'int' 0
|-CXXConstructorDecl 0x5592b7ffee08 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5592b7ffec80 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5592b7ffecf8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800a900 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a8e0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f100 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f250 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5592b800f1d8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5592b800f168 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b800f158 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b800f220 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5592b800f208 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5592b800f198 <col:16> 'long' lvalue ParmVar 0x5592b7ffec80 'sec' 'long'
|     `-ImplicitCastExpr 0x5592b800f238 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b800f1b8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b7ffecf8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5592b7fff068 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5592b7ffeed8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5592b7ffef50 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800a938 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a918 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f268 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f3a0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5592b800f340 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5592b800f2d0 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b800f2c0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b800f370 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b800f300 <col:16> 'int' lvalue ParmVar 0x5592b7ffeed8 'sec' 'int'
|     `-ImplicitCastExpr 0x5592b800f388 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b800f320 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b7ffef50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5592b7fff2c8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5592b7fff138 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5592b7fff1b0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800a970 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a950 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f3b8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f508 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5592b800f490 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5592b800f420 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b800f410 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b800f4d8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5592b800f4c0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5592b800f450 <col:16> 'unsigned long' lvalue ParmVar 0x5592b7fff138 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5592b800f4f0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b800f470 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b7fff1b0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5592b8000460 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5592b7fff398 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5592b7fff410 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800a9a8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a988 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f520 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f670 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5592b800f5f8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5592b800f588 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b800f578 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b800f640 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5592b800f628 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5592b800f5b8 <col:16> 'unsigned int' lvalue ParmVar 0x5592b7fff398 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5592b800f658 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5592b800f5d8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b7fff410 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5592b80005c0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5592b8000530 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5592b8000758 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5592b8000698 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5592b8000988 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5592b8000890 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5592b8000b38 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5592b8000a78 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f710 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5592b800f688 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5592b8000a78 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5592b800f770 <col:19, line:214:5>
|-CXXConstructorDecl 0x5592b8000d08 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5592b8000c48 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b800f780 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5592b800f830 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5592b800f808 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5592b800f7d8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5592b8000c48 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5592b8000ef8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5592b8000e70 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5592b7ffda10 'Timestamp'
|   | `-CXXRecord 0x5592b7ffdc68 'Timestamp'
|   `-ParenType 0x5592b8000e10 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5592b8000de0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5592b7ffdfb0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5592b7ffde28 'seconds_type'
|         `-TypedefType 0x5592b7c63010 'int32_t' sugar
|           |-Typedef 0x5592b7b73328 'int32_t'
|           `-TypedefType 0x5592b7b4c510 '__int32_t' sugar
|             |-Typedef 0x5592b7b4c128 '__int32_t'
|             `-BuiltinType 0x5592b7b0a580 'int'
|-CXXConversionDecl 0x5592b8001038 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5592b8001108 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5592b800f938 <col:37, line:231:5>
|   `-ReturnStmt 0x5592b800f928 <line:227:9, col:23>
|     `-BinaryOperator 0x5592b800f908 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5592b800f8d8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5592b800f888 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5592b8007e08
|       |   `-MemberExpr 0x5592b800f858 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|       |     `-CXXThisExpr 0x5592b800f848 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5592b800f8f0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5592b800f8b8 <col:23> 'int' 0
|-CXXMethodDecl 0x5592b80011c8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5592b8001288 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b8001348 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b8001408 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b80014c8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5592b8001638 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5592b8001578 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5592b8001780 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5592b80016f0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8001848 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5592b80018e8 <col:54> "" ""
|-CXXMethodDecl 0x5592b8001978 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5592b8001a18 <col:54> "" ""
|-CXXMethodDecl 0x5592b8001aa8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5592b8001b48 <col:54> "" ""
|-CXXMethodDecl 0x5592b8001c48 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5592b8001d18 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5592b8001e48 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5592b8001f40 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5592b8002078 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5592b800fb50 <col:39, line:271:5>
|   `-ReturnStmt 0x5592b800fb40 <line:267:9, col:61>
|     `-CallExpr 0x5592b800fae0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5592b800fac8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b800f950 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5592b80090e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5592b800fb10 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5592b800f9b0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5592b8007e08
|       |   `-MemberExpr 0x5592b800f980 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|       |     `-CXXThisExpr 0x5592b800f970 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5592b800fb28 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5592b800fa50 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5592b800fa20 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5592b800f9e0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5592b800fa38 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5592b800fa00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe580 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b8002138 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5592b800fd10 <col:39, line:279:5>
|   `-ReturnStmt 0x5592b800fd00 <line:275:9, col:61>
|     `-CallExpr 0x5592b800fca0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5592b800fc88 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b800fb68 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5592b80090e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5592b800fcd0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5592b800fbc8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5592b8007e08
|       |   `-MemberExpr 0x5592b800fb98 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|       |     `-CXXThisExpr 0x5592b800fb88 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5592b800fce8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5592b800fc68 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5592b800fc38 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5592b800fbf8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5592b800fc50 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5592b800fc18 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe460 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b80021f8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5592b800fea8 <col:39, line:287:5>
|   `-ReturnStmt 0x5592b800fe98 <line:283:9, col:53>
|     `-BinaryOperator 0x5592b800fe78 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5592b800fe48 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5592b800fd68 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5592b8007e08
|       |   `-MemberExpr 0x5592b800fd38 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|       |     `-CXXThisExpr 0x5592b800fd28 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5592b800fe60 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5592b800fe28 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5592b800fe08 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5592b800fdd8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b800fd98 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe2b0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b800fdf0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b800fdb8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b80022e8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5592b8011140 <col:40, line:293:5>
|   |-DeclStmt 0x5592b800fff0 <line:291:9, col:48>
|   | `-VarDecl 0x5592b800fed0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5592b800ffd0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5592b800ff78 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5592b800ff48 <col:22> '<bound member function type>' ->subsec 0x5592b8001288
|   |     |   `-CXXThisExpr 0x5592b800ff38 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5592b800ffb8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5592b800ff98 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe6e0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5592b8011130 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5592b8011118 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5592b80110e8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b80110d0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5592b80110b0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5592b8011080 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5592b8010e18 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5592b8010e00 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5592b8010008 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5592b800fed0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5592b8011020 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5592b8011008 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5592b8010fd8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5592b8010e30 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5592b8010da0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5592b8010d88 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5592b8010d38 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b7ffdbb8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5592b8010cd8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5592b8010038 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5592b8010028 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5592b8010d20 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5592b8010d08 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5592b80104f8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5592b8010060 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5592b80100f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5592b80100c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5592b8010080 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe6e0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5592b80100d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5592b80100a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5592b800fed0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5592b8011050 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5592b8010de8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5592b8010dd8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5592b80023a8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5592b8011698 <col:40, line:302:5>
|   |-DeclStmt 0x5592b8011290 <line:297:9, col:48>
|   | `-VarDecl 0x5592b8011170 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5592b8011270 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5592b8011218 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5592b80111e8 <col:22> '<bound member function type>' ->subsec 0x5592b8001288
|   |     |   `-CXXThisExpr 0x5592b80111d8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5592b8011258 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5592b8011238 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe7b0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5592b8011688 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5592b8011670 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5592b8011640 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b8011628 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5592b8011608 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5592b80115d8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5592b8011500 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5592b80114e8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5592b80112a8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5592b8011170 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5592b8011578 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5592b8011560 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5592b8011530 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5592b8011518 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5592b8011488 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5592b8011470 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5592b8011450 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b7ffdbb8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5592b80113f0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5592b80112d8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5592b80112c8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5592b8011438 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5592b8011420 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5592b80113b0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5592b8011300 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5592b8011390 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5592b8011360 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5592b8011320 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe7b0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5592b8011378 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5592b8011340 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5592b8011170 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5592b80115a8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5592b80114d0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5592b80114c0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5592b8002468 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5592b8011720 <col:40, line:306:5>
|   `-ReturnStmt 0x5592b8011710 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5592b80116e0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5592b80116c8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b80116b8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5592b8002608 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5592b8002518 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5592b80027d8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5592b80026e0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5592b80028c8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5592b8002a38 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5592b8002978 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5592b8011868 <col:56, line:320:5>
|   `-ReturnStmt 0x5592b8011858 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5592b8011840 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5592b8011810 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b80117f8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b80117b8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5592b8011788 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5592b8011748 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b8002978 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5592b80117a0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5592b8011768 <col:31> 'int' 0
|-CXXMethodDecl 0x5592b8002c78 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5592b8002af0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8002b68 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b8011a38 <col:72, line:326:5>
|   `-ReturnStmt 0x5592b8011a28 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5592b8011a10 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5592b80119e0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b80119c8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b8011988 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5592b8011970 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5592b8011890 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b8002af0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5592b8011930 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5592b8011918 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5592b80118b0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5592b8007560 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5592b8011958 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b80118d0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8002b68 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8002e28 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5592b8002d38 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5592b8012100 <col:56, line:337:5>
|   |-DeclStmt 0x5592b8011d38 <line:329:9, col:51>
|   | `-VarDecl 0x5592b8011a60 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5592b8011d20 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5592b8011cf0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5592b8011cd8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5592b8011cc0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5592b8011c90 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5592b8011c78 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5592b8011c60 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5592b8011b50 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5592b8011ef0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5592b8011da0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5592b8007e08
|   | | `-MemberExpr 0x5592b8011d70 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5592b8008db8
|   | |   `-DeclRefExpr 0x5592b8011d50 <col:9> 'Timestamp' lvalue Var 0x5592b8011a60 't' 'Timestamp'
|   | `-BinaryOperator 0x5592b8011ed0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5592b8011ea0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5592b8011dd0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5592b8002d38 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5592b8011eb8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5592b8011e80 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5592b8011e60 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5592b8011e30 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5592b8011df0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5592b8011e48 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5592b8011e10 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe580 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5592b80120e8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5592b80120b8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5592b80120a0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5592b8012080 <col:16> 'Timestamp' lvalue Var 0x5592b8011a60 't' 'Timestamp'
|-CXXMethodDecl 0x5592b8002ff0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5592b8002ee0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8002f58 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b80122b8 <col:72, line:343:5>
|   `-ReturnStmt 0x5592b80122a8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5592b8012290 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5592b8012260 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b8012248 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b8012208 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5592b80121f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5592b8012138 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b8002ee0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5592b80121b0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5592b8012198 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5592b8012158 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5592b80076a8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5592b80121d8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b8012178 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8002f58 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8003140 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5592b80030b0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5592b8012700 <col:56, line:354:5>
|   |-DeclStmt 0x5592b80124a8 <line:346:9, col:51>
|   | `-VarDecl 0x5592b80122e0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5592b8012490 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5592b8012460 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5592b8012448 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5592b8012430 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5592b8012400 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5592b80123e8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5592b80123d0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5592b80123a0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5592b8012660 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5592b8012510 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5592b8007e08
|   | | `-MemberExpr 0x5592b80124e0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5592b8008db8
|   | |   `-DeclRefExpr 0x5592b80124c0 <col:9> 'Timestamp' lvalue Var 0x5592b80122e0 't' 'Timestamp'
|   | `-BinaryOperator 0x5592b8012640 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5592b8012610 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5592b8012540 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5592b80030b0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5592b8012628 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5592b80125f0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5592b80125d0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5592b80125a0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5592b8012560 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5592b80125b8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5592b8012580 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe460 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5592b80126e8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5592b80126b8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5592b80126a0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5592b8012680 <col:16> 'Timestamp' lvalue Var 0x5592b80122e0 't' 'Timestamp'
|-CXXMethodDecl 0x5592b8003308 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5592b80031f8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003270 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b80128b8 <col:72, line:360:5>
|   `-ReturnStmt 0x5592b80128a8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5592b8012890 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5592b8012860 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b8012848 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b8012808 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5592b80127f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5592b8012738 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b80031f8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5592b80127b0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5592b8012798 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5592b8012758 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5592b80077f0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5592b80127d8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b8012778 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8003270 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8003458 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5592b80033c8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5592b801f228 <col:56, line:371:5>
|   |-DeclStmt 0x5592b8012aa8 <line:363:9, col:51>
|   | `-VarDecl 0x5592b80128e0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5592b8012a90 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5592b8012a60 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5592b8012a48 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5592b8012a30 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5592b8012a00 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5592b80129e8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5592b80129d0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5592b80129a0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5592b801f188 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5592b8012b10 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5592b8007e08
|   | | `-MemberExpr 0x5592b8012ae0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5592b8008db8
|   | |   `-DeclRefExpr 0x5592b8012ac0 <col:9> 'Timestamp' lvalue Var 0x5592b80128e0 't' 'Timestamp'
|   | `-CallExpr 0x5592b801f128 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5592b801f110 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5592b8012b40 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5592b80090e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5592b801f158 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5592b8012b60 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5592b80033c8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5592b801f170 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5592b801f0f0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5592b801f0c0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5592b8012b80 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe2b0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5592b801f0d8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5592b8012ba0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5592b801f210 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5592b801f1e0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5592b801f1c8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5592b801f1a8 <col:16> 'Timestamp' lvalue Var 0x5592b80128e0 't' 'Timestamp'
|-CXXMethodDecl 0x5592b8003548 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5592b801f368 <col:39, line:377:5>
|   `-ReturnStmt 0x5592b801f358 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5592b801f340 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5592b801f310 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b801f2f8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b801f2b8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5592b801f260 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5592b801f2a0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5592b801f280 <col:29> 'int' 1
|-CXXMethodDecl 0x5592b8003608 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5592b801f448 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5592b801f400 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5592b801f390 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b801f380 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5592b801f3c0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5592b801f430 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5592b801f3e0 <col:19> 'int' 0
|-CXXMethodDecl 0x5592b8003808 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b80036b8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003730 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800a9e0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a9c0 <col:60> 'int' 0
| `-CompoundStmt 0x5592b801f640 <col:63, line:395:5>
|   `-BinaryOperator 0x5592b801f620 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5592b801f4a0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5592b8007e08
|     | `-MemberExpr 0x5592b801f470 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|     |   `-CXXThisExpr 0x5592b801f460 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5592b801f600 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5592b801f590 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5592b801f530 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5592b801f518 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5592b801f500 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5592b801f4d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b80036b8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5592b801f578 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5592b801f558 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5592b801f5e8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5592b801f5d0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5592b801f5b0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8003730 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b80039d8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b80038c8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003940 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801f798 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5592b801f750 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5592b801f668 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b801f658 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b801f780 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b801f698 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b80038c8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5592b801f710 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5592b801f6f8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b801f6b8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5592b80076a8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5592b801f738 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5592b801f6d8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8003940 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8003ba8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b8003a98 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003b10 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801f8f0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5592b801f8a8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5592b801f7c0 <col:9> '<bound member function type>' ->assign 0x5592b8003808
|     | `-CXXThisExpr 0x5592b801f7b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5592b801f8d8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5592b801f7f0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5592b8003a98 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5592b801f868 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5592b801f850 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b801f810 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5592b80077f0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5592b801f890 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5592b801f830 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8003b10 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8003d78 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b8003c68 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003ce0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5592b800aa18 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5592b800a9f8 <col:57> 'int' 0
| `-DeprecatedAttr 0x5592b8003e28 <col:75> "" ""
|-CXXMethodDecl 0x5592b8003fb8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b8003ea8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8003f20 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8004068 <col:74> "" ""
|-CXXMethodDecl 0x5592b80041f8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5592b80040e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5592b8004160 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b80042a8 <col:74> "" ""
|-CXXMethodDecl 0x5592b8004338 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5592b80043d8 <col:42> "" ""
|-CXXMethodDecl 0x5592b8006c10 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5592b8006af0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5592b8006b70 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5592b8006ce0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b8006da0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5592b8006e40 <col:20>
| `-OptimizeNoneAttr 0x5592b8006e98 <col:30>
|-CXXMethodDecl 0x5592b8006ee0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b8006fa0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5592b8007060 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b8007120 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5592b80071e0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b80072a0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5592b8007360 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5592b8007420 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5592b8007560 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b80074d0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801fa38 <col:58, line:512:5>
|   `-ReturnStmt 0x5592b801fa28 <line:511:9, col:53>
|     `-BinaryOperator 0x5592b801fa08 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5592b801f9d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801f908 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b80074d0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b801f9f0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b801f9b8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5592b801f998 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801f968 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801f928 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801f980 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801f948 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe580 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b80076a8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b8007618 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801fb80 <col:58, line:516:5>
|   `-ReturnStmt 0x5592b801fb70 <line:515:9, col:53>
|     `-BinaryOperator 0x5592b801fb50 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5592b801fb20 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801fa50 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8007618 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b801fb38 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b801fb00 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5592b801fae0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801fab0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801fa70 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801fac8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801fa90 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe460 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b80077f0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b8007760 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801fcc8 <col:58, line:520:5>
|   `-ReturnStmt 0x5592b801fcb8 <line:519:9, col:53>
|     `-BinaryOperator 0x5592b801fc98 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5592b801fc68 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801fb98 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8007760 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b801fc80 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b801fc48 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5592b801fc28 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801fbf8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801fbb8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe2b0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801fc10 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801fbd8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b8007938 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b80078a8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801fe10 <col:60, line:524:5>
|   `-ReturnStmt 0x5592b801fe00 <line:523:9, col:55>
|     `-BinaryOperator 0x5592b801fde0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5592b801fdb0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801fce0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b80078a8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b801fdc8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b801fd90 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5592b801fd70 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801fd40 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801fd00 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801fd58 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801fd20 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe580 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b8007a80 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b80079f0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b801ff58 <col:60, line:528:5>
|   `-ReturnStmt 0x5592b801ff48 <line:527:9, col:55>
|     `-BinaryOperator 0x5592b801ff28 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5592b801fef8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801fe28 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b80079f0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b801ff10 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b801fed8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5592b801feb8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801fe88 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801fe48 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801fea0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801fe68 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe460 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5592b8007bc8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5592b8007b38 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b80200a0 <col:60, line:532:5>
|   `-ReturnStmt 0x5592b8020090 <line:531:9, col:55>
|     `-BinaryOperator 0x5592b8020070 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5592b8020040 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b801ff70 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8007b38 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5592b8020058 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5592b8020020 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5592b8020000 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5592b801ffd0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5592b801ff90 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe2b0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5592b801ffe8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5592b801ffb0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5592b7ffe610 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5592b8007c70 prev 0x5592b7ffeab0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b8007d68 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5592b8007e08 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5592b800ebd0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5592b800efb8 <col:11>
| |-CXXConstructorDecl 0x5592b800ecb0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b800ed98 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5592b800f700 <col:11>
| |-CXXConstructorDecl 0x5592b800ee38 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b800ef48 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5592b8010f58 <col:11>
| |-CXXDestructorDecl 0x5592b8010268 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5592b7d16e18 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5592b7d16f28 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5592b7d177f0 <col:11>
| |   `-ReturnStmt 0x5592b7d177e0 <col:11>
| |     `-UnaryOperator 0x5592b7d177c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5592b7d177b8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5592b7d16f98 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5592b7d170a8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5592b815cff0 <col:11>
|     `-ReturnStmt 0x5592b815cfe0 <col:11>
|       `-UnaryOperator 0x5592b815cfc8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5592b815cfb8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5592b8007e70 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5592b8007f70 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5592b8008170 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8007f50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b8007f30 <col:21> 'int' 0
| |-EnumConstantDecl 0x5592b8008000 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5592b8008188 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8007fe0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5592b8007fc0 <col:23> 'int' 1
| |-EnumConstantDecl 0x5592b8008090 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5592b80081a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b8008070 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5592b8008050 <col:23> 'int' 2
| `-EnumConstantDecl 0x5592b8008120 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5592b80081b8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8008100 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5592b80080e0 <col:27> 'int' 3
|-CXXMethodDecl 0x5592b80081f8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5592b80082c0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5592b80084c8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5592b8008370 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5592b80083f0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5592b800aa30 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5592b80086d8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5592b8008588 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5592b8008600 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5592b80087a8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5592b8008868 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5592b80089d8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5592b8008918 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5592b8008aa0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b8008b60 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5592b8008c20 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5592b8008ce0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5592b8008d80 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5592b8008db8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5592b8008e28 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5592b80200b8 <col:27, line:684:5>
|-CXXMethodDecl 0x5592b8008ee8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5592b80200c8 <col:27, line:696:5>
|-CXXMethodDecl 0x5592b80090e8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5592b8008f98 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5592b8009010 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b8020250 <col:66, line:700:5>
|   `-ReturnStmt 0x5592b8020240 <line:699:9, col:31>
|     `-CallExpr 0x5592b80201e0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5592b80201c8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b8020178 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5592b7e8b498 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5592b8020210 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5592b8020138 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5592b8008f98 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5592b8020228 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5592b8020158 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8009010 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8009458 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5592b80091a8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5592b8009220 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5592b8009298 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5592b8009310 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b80205a0 <col:64, line:707:5>
|   |-DeclStmt 0x5592b80202e0 <line:704:9, col:24>
|   | `-VarDecl 0x5592b8020278 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5592b80204f0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5592b80202f8 <col:9> 'int32_t':'int' lvalue ParmVar 0x5592b8009220 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5592b80204d8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5592b8020470 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5592b8020458 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5592b80203d8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5592b7e90768 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5592b80204a8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5592b8020378 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5592b8009298 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5592b80204c0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5592b8020398 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8009310 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5592b80203b8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5592b8020278 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5592b8020580 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5592b8020510 <col:9> 'int32_t':'int' lvalue ParmVar 0x5592b80091a8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5592b8020568 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5592b8020550 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5592b8020530 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5592b8020278 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5592b80096f8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5592b8009528 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5592b80095a0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5592b8009618 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5592b8009998 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5592b80097c0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5592b8009838 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5592b80098b0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5592b8009b28 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5592b8009a60 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5592b8009d28 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5592b8009be0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5592b8009c58 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5592b8009ff8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5592b8009f38 parent 0x5592b7b0a488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5592b8009de8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5592b8009e60 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5592b800a218 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5592b800a158 parent 0x5592b7b0a488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5592b800a048 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5592b800a0c0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5592b800a3e0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5592b800a328 parent 0x5592b7b0a488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5592b800a268 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5592b800a668 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5592b800a5a8 parent 0x5592b7b0a488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5592b800a458 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5592b800a4d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5592b800a888 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5592b800a7c8 parent 0x5592b7b0a488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5592b800a6b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5592b800a730 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5592b8010110 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b80101f8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b8010c68 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5592b8010c20 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5592b8008db8
| |     `-DeclRefExpr 0x5592b8010c00 <col:7> 'const Timestamp' lvalue ParmVar 0x5592b80101f8 '' 'const Timestamp &'
| `-CompoundStmt 0x5592b8010cc8 <col:7>
|-CXXConstructorDecl 0x5592b8010378 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b8010488 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5592b8008db8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5592b8010f68 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5592b8010f10 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5592b8008db8
| |     `-CXXStaticCastExpr 0x5592b8010ee0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5592b8010eb0 <col:7> 'Timestamp' lvalue ParmVar 0x5592b8010488 '' 'Timestamp &&'
| `-CompoundStmt 0x5592b8010fc8 <col:7>
|-CXXDestructorDecl 0x5592b8010538 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5592b7d16c68 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b7d16d78 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5592b7d17868 <col:7>
|   |-CXXMemberCallExpr 0x5592b7d17808 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5592b7d17748 <col:7> '<bound member function type>' .operator= 0x5592b7d16e18
|   | | `-MemberExpr 0x5592b7d17658 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
|   | |   `-CXXThisExpr 0x5592b7d17648 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5592b7d17718 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5592b8008db8
|   |   `-DeclRefExpr 0x5592b7d176f8 <col:7> 'const Timestamp' lvalue ParmVar 0x5592b7d16d78 '' 'const Timestamp &'
|   `-ReturnStmt 0x5592b7d17858 <col:7>
|     `-UnaryOperator 0x5592b7d17840 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5592b7d17830 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5592b7d17118 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5592b7d17228 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5592b815d068 <col:7>
    |-CXXMemberCallExpr 0x5592b815d008 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5592b815cf70 <col:7> '<bound member function type>' .operator= 0x5592b7d16f98
    | | `-MemberExpr 0x5592b815ce40 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5592b8008db8
    | |   `-CXXThisExpr 0x5592b815ce30 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5592b815cf40 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5592b8008db8
    |   `-CXXStaticCastExpr 0x5592b815cf10 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5592b815cee0 <col:7> 'Timestamp' lvalue ParmVar 0x5592b7d17228 '' 'Timestamp &&'
    `-ReturnStmt 0x5592b815d058 <col:7>
      `-UnaryOperator 0x5592b815d040 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5592b815d030 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8170e38 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x5592b8171048 prev 0x5592b8170e38 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b81736a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5592b8173650 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x5592b8173630 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x5592b81734e0 'type'
|     `-SubstTemplateTypeParmType 0x5592b8173300 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b8172e50 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5592b8172d68 'sized_array_memory'
|-FieldDecl 0x5592b81772d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5592b8177320 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b8177358 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|     `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b8177418 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x5592b81773e0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|       `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b81774a8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5592b8177470 'const TimerSet::heap_element &'
|   `-QualType 0x5592b81710e1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|         `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b8177538 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x5592b8177500 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|       `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b81775f8 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x5592b81775c0 'const TimerSet::heap_element *'
|   `-QualType 0x5592b81710e1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|         `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b8178250 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x5592b8178200 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x5592b81781e0 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x5592b8178118 'type'
|     `-LValueReferenceType 0x5592b81780e0 'const TimerSet::heap_element &'
|       `-QualType 0x5592b8177e81 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x5592b8177e80 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x5592b7dddcf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dddc98 'T'
|           `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|             `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b81782b8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5592b8177470 'const TimerSet::heap_element &'
|   `-QualType 0x5592b81710e1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|         `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b8178310 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b8178378 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x5592b8177500 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|       `-CXXRecord 0x5592b816ffb0 'heap_element'
|-TypedefDecl 0x5592b81783e0 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x5592b81775c0 'const TimerSet::heap_element *'
|   `-QualType 0x5592b81710e1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5592b81710e0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b8170040 'TimerSet::heap_element'
|         `-CXXRecord 0x5592b816ffb0 'heap_element'
|-EnumDecl 0x5592b8178438 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b8178530 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b8178510 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b81785b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b8178848 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8178670 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8178710 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x5592b8178b08 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5592b81789f0 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x5592b8178dc8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5592b8178cb0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5592b8179110 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5592b8178ff0 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5592b8179420 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5592b8179300 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5592b8179710 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8179558 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81795d0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5592b8179868 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5592b8179948 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81799a0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81799e8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5592b8179a98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8179af0 <col:30> Inherited
|-CXXMethodDecl 0x5592b8179bb8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5592b8179c68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8179cc0 <col:30> Inherited
|-CXXMethodDecl 0x5592b8179d08 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5592b8179db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8179e10 <col:30> Inherited
|-CXXMethodDecl 0x5592b8179e58 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5592b8179f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8179f60 <col:30> Inherited
|-CXXMethodDecl 0x5592b8179fa8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5592b817a058 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b817a0b0 <col:30> Inherited
|-CXXMethodDecl 0x5592b817a0d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b817a188 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b817a238 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5592b817a3f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b817a2e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b817a360 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5592b817a548 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b817a4b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b817a6f8 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x5592b817a600 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b817a7b0 <col:20>
| `-OptimizeNoneAttr 0x5592b817a808 <col:30>
|-CXXMethodDecl 0x5592b817ba18 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b817a830 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b817bad0 <col:20>
| `-OptimizeNoneAttr 0x5592b817bb28 <col:30>
|-CXXMethodDecl 0x5592b817bbe0 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b817bb50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b817bd28 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b817bc98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b817be58 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5592b817bf88 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5592b817c058 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5592b817c128 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5592b817c268 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b817c1d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b817c3b0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b817c320 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b817c4f8 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b817c468 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b817c5b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b817c6b0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b817c620 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b817c768 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b817c828 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x5592b817c928 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x5592b817cad8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b817c9e8 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x5592b817d298 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b817cb90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x5592b817d1f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x5592b817d0f8 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x5592b817d378 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b817d4c8 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b817d438 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5592b817d580 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b817d7c8 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b817d640 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5592b817d6b8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5592b817d988 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x5592b817d898 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5592b817dbd8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x5592b817da50 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5592b817dac8 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5592b817dc98 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b817def8 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5592b817de00 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x5592b817dfc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b817dfc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b817e110 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5592b817e318 prev 0x5592b817e110 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b817f460 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5592b817f410 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x5592b817f3f0 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x5592b817f2a0 'type'
|     `-SubstTemplateTypeParmType 0x5592b817f0c0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b817ec10 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5592b817eb28 'sized_array_memory'
|-FieldDecl 0x5592b8183090 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5592b81830e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b8183118 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-PointerType 0x5592b806fea0 'Timer *'
|     `-RecordType 0x5592b806eff0 'Timer'
|       `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b81831d8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x5592b81831a0 'Timer *&'
|   `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b806fea0 'Timer *'
|       `-RecordType 0x5592b806eff0 'Timer'
|         `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8183298 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x5592b8183260 'Timer *const &'
|   `-QualType 0x5592b817e3b1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b806fea0 'Timer *'
|         `-RecordType 0x5592b806eff0 'Timer'
|           `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8183358 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x5592b8183320 'Timer **'
|   `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b806fea0 'Timer *'
|       `-RecordType 0x5592b806eff0 'Timer'
|         `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8183418 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x5592b81833e0 'Timer *const *'
|   `-QualType 0x5592b817e3b1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b806fea0 'Timer *'
|         `-RecordType 0x5592b806eff0 'Timer'
|           `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b81857b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x5592b8185760 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x5592b8185740 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x5592b81856d0 'type'
|     `-SubstTemplateTypeParmType 0x5592b8185490 'Timer *' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-PointerType 0x5592b806fea0 'Timer *'
|         `-RecordType 0x5592b806eff0 'Timer'
|           `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8185818 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x5592b8183260 'Timer *const &'
|   `-QualType 0x5592b817e3b1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b806fea0 'Timer *'
|         `-RecordType 0x5592b806eff0 'Timer'
|           `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8185870 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81858d8 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x5592b8183320 'Timer **'
|   `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-PointerType 0x5592b806fea0 'Timer *'
|       `-RecordType 0x5592b806eff0 'Timer'
|         `-CXXRecord 0x5592b81568e8 'Timer'
|-TypedefDecl 0x5592b8185940 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x5592b81833e0 'Timer *const *'
|   `-QualType 0x5592b817e3b1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5592b817e3b0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-PointerType 0x5592b806fea0 'Timer *'
|         `-RecordType 0x5592b806eff0 'Timer'
|           `-CXXRecord 0x5592b81568e8 'Timer'
|-EnumDecl 0x5592b8185998 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b8185a90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b8185a70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b8185b18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b8185da8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8185bd0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8185c70 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x5592b8186068 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5592b8185f50 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x5592b8186328 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5592b8186210 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5592b8186670 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5592b8186550 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x5592b8186980 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5592b8186860 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5592b8186c70 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8186ab8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b8186b30 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5592b8186dc8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5592b8186ea8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8186f00 <col:30> Inherited
|-CXXMethodDecl 0x5592b8186f48 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5592b8186ff8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8187050 <col:30> Inherited
|-CXXMethodDecl 0x5592b8187118 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81871c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8187220 <col:30> Inherited
|-CXXMethodDecl 0x5592b8187268 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5592b8187318 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8187370 <col:30> Inherited
|-CXXMethodDecl 0x5592b81873b8 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5592b8187468 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81874c0 <col:30> Inherited
|-CXXMethodDecl 0x5592b8187508 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5592b81875b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b8187610 <col:30> Inherited
|-CXXMethodDecl 0x5592b8187638 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81876e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b8187798 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b8187958 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8187848 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81878c0 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5592b8187aa8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b8187a18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8187c58 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x5592b8187b60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b8187d10 <col:20>
| `-OptimizeNoneAttr 0x5592b8187d68 <col:30>
|-CXXMethodDecl 0x5592b8187e88 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b8187d90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b8187f40 <col:20>
| `-OptimizeNoneAttr 0x5592b8187f98 <col:30>
|-CXXMethodDecl 0x5592b8188050 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b8187fc0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8188198 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b8188108 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81882c8 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x5592b81883f8 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x5592b81884c8 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x5592b8188598 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x5592b81886d8 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b8188648 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8188820 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b8188790 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b8188968 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b81888d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b8188a20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b8188b20 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b8188a90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b8188bd8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b8188c98 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x5592b8188d98 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x5592b8188f18 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b8188e58 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x5592b81896d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b8188fd0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x5592b8189638 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x5592b8189538 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x5592b81897b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b8189908 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b8189878 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5592b81899c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b8189c08 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b8189a80 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5592b8189af8 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5592b8189dc8 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x5592b8189cd8 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5592b818a018 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x5592b8189e90 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5592b8189f08 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5592b818a0d8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b818a338 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5592b818a240 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x5592b818a408 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b818a408

Layout: <CGRecordLayout
  LLVMType:%class.Vector.14 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.14 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8153280 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b8153398 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x5592b8153428 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5592b81534b0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x5592b81535a0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5592b81536a0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x5592b8153760 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x5592b8153820 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x5592b8153948 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5592b8153948
| `-ParmVarDecl 0x5592b8153a58 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x5592b818b1b8 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5592b818b1b8
  `-ParmVarDecl 0x5592b818b2c8 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b816f130 prev 0x5592b815aaf8 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5592b816f228 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x5592b816f2b8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5592b816f340 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x5592b816f438 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x5592b818b630 <col:43, col:67>
|   `-ReturnStmt 0x5592b818b620 <col:45, col:52>
|     `-CXXConstructExpr 0x5592b818b5f0 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x5592b818b5c0 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x5592b8170c20
|         `-CXXThisExpr 0x5592b818b5b0 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5592b816f4f8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x5592b816f700 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5592b816f5a8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x5592b816f620 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x5592b816f7f8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5592b816f8c0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5592b818b6b0 <col:39, col:67>
|   `-ReturnStmt 0x5592b818b6a0 <col:41, col:48>
|     `-ImplicitCastExpr 0x5592b818b688 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5592b818b658 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x5592b8170d08
|         `-CXXThisExpr 0x5592b818b648 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5592b816f988 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5592b818b730 <col:35, col:59>
|   `-ReturnStmt 0x5592b818b720 <col:37, col:44>
|     `-ImplicitCastExpr 0x5592b818b708 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5592b818b6d8 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x5592b8170d70
|         `-CXXThisExpr 0x5592b818b6c8 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5592b816fad0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x5592b816fa40 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x5592b816fc18 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5592b816fb88 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5592b816fe18 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x5592b816fcd0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x5592b816fd48 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x5592b816fee8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5592b816ff88 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b816ffb0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b81700c8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x5592b8170168 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x5592b81701c8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x5592b81702f8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x5592b8170228 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x5592b8170168 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x5592b818b808 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x5592b818b7b0 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x5592b818b780 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x5592b8157f58
|   |       `-ImplicitCastExpr 0x5592b818b7d0 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x5592b818b768 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5592b818b748 <col:17> 'Timer *' lvalue ParmVar 0x5592b8170228 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x5592b81701c8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x5592b818b8a0 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5592b818b860 <col:41> 'Timer *' lvalue ParmVar 0x5592b8170228 't_' 'Timer *'
|   `-CompoundStmt 0x5592b818b8f0 <col:45, line:44:2>
|-CXXRecordDecl 0x5592b81703c0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b81704d8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5592b8170728 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x5592b81705a8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x5592b8170620 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x5592b818ba20 <col:71, line:49:2>
|     `-ReturnStmt 0x5592b818ba10 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x5592b818b9d8 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x5592b818b9c0 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5592b818b9a0 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5592b802d208 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x5592b818b920 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x5592b8170168
|         | `-DeclRefExpr 0x5592b818b900 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x5592b81705a8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x5592b818b970 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x5592b8170168
|           `-DeclRefExpr 0x5592b818b950 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x5592b8170620 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x5592b81707f0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b8170908 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5592b8170b28 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x5592b81709a8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x5592b8170a20 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x5592b818bc28 <col:63, line:54:2>
|     `-BinaryOperator 0x5592b818bc08 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x5592b818bab8 <col:6, col:12> 'int' lvalue ->_schedpos1 0x5592b8159f98
|       | `-ImplicitCastExpr 0x5592b818baa0 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x5592b818ba70 <col:6, col:9> 'Timer *' lvalue ->t 0x5592b81701c8
|       |     `-ImplicitCastExpr 0x5592b818ba58 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5592b818ba38 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x5592b8170a20 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x5592b818bbf0 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x5592b818bbd0 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x5592b818bb78 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x5592b818bb58 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x5592b818bb28 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x5592b818bae8 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x5592b8170a20 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x5592b818bb40 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5592b818bb08 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x5592b81709a8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x5592b818bbb8 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x5592b818bb98 <col:39> 'int' 1
|-FieldDecl 0x5592b8170c20 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x5592b8170c90 <col:44, col:53> aligned
|   `-ConstantExpr 0x5592b8170c70 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x5592b8170bf0 <col:52> 'int' 8
|-FieldDecl 0x5592b8170d08 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x5592b8170d70 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x5592b8170dd8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x5592b817e0b0 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x5592b818a4f0 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x5592b818a550 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x5592b818a5b0 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x5592b818a610 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b818a700 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x5592b818a670 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x5592b818a7c8 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x5592b818c080 <col:29, line:81:5>
|   `-IfStmt 0x5592b818c058 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x5592b818bd10 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x5592b818bcb0 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x5592b818bc80 <col:6, col:18> '<bound member function type>' .size 0x5592b817a0d8
|     |     `-ImplicitCastExpr 0x5592b818bcf8 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x5592b818bc50 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5592b817e0b0
|     |         `-CXXThisExpr 0x5592b818bc40 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x5592b818bf00 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x5592b818bee8 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5592b818bec8 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x5592b7d16c68 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x5592b818bd38 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5592b8170c20
|     | | `-CXXThisExpr 0x5592b818bd28 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x5592b818beb0 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x5592b818be80 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x5592b8170168
|     |     `-CXXMemberCallExpr 0x5592b818be58 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x5592b818be28 <col:22, col:34> '<bound member function type>' .unchecked_at 0x5592b817c268
|     |       | `-MemberExpr 0x5592b818bd78 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5592b817e0b0
|     |       |   `-CXXThisExpr 0x5592b818bd68 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x5592b818be08 <col:47> 'int' 0
|     `-ExprWithCleanups 0x5592b818c040 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x5592b818c008 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x5592b818bff0 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5592b818bfd0 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5592b7d17118 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x5592b818bf48 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5592b8170c20
|         | `-CXXThisExpr 0x5592b818bf38 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x5592b818bfb8 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5592b818bf88 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5592b818a908 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x5592b818a878 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x5592b818a9d0 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x5592b818aa90 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x5592b818ab50 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x5592b818ac40 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x5592b818aca8 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x5592b818aca8
| `-ParmVarDecl 0x5592b818adb8 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x5592b818ae58 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x5592b818ae58
| `-ParmVarDecl 0x5592b818af68 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x5592b818b008 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x5592b818b008
| `-ParmVarDecl 0x5592b818b118 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x5592b818b338 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x5592b818b338
| `-ParmVarDecl 0x5592b818b448 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x5592b818b4d0 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x5592b818b4d0

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b81b36c8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x5592b81b38d8 prev 0x5592b81b36c8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b81b49b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5592b81b4960 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x5592b81b4940 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x5592b81b47f0 'type'
|     `-SubstTemplateTypeParmType 0x5592b817f0c0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b817ec10 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5592b817eb28 'sized_array_memory'
|-FieldDecl 0x5592b81b4ab0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5592b81b4b00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b81b4b38 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b81b1780 'pollfd'
|     `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b4bf8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5592b81b4bc0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b1780 'pollfd'
|       `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b4cb8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x5592b81b4c80 'const pollfd &'
|   `-QualType 0x5592b81b3971 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b1780 'pollfd'
|         `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b4d48 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x5592b81b4d10 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b1780 'pollfd'
|       `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b4e08 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5592b81b4dd0 'const pollfd *'
|   `-QualType 0x5592b81b3971 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b1780 'pollfd'
|         `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b59e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5592b81b5990 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x5592b81b5970 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x5592b81b5900 'type'
|     `-SubstTemplateTypeParmType 0x5592b81b56c0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5592b7dde420 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dde3d0 'T'
|       `-RecordType 0x5592b81b1780 'pollfd'
|         `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b5a48 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x5592b81b4c80 'const pollfd &'
|   `-QualType 0x5592b81b3971 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b1780 'pollfd'
|         `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b5aa0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81b5b08 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x5592b81b4d10 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b1780 'pollfd'
|       `-CXXRecord 0x5592b81b16f0 'pollfd'
|-TypedefDecl 0x5592b81b5b70 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5592b81b4dd0 'const pollfd *'
|   `-QualType 0x5592b81b3971 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5592b81b3970 'pollfd' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b1780 'pollfd'
|         `-CXXRecord 0x5592b81b16f0 'pollfd'
|-EnumDecl 0x5592b81b5bc8 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b81b5cc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b81b5ca0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b81b5d48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b81b5fd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81b5e00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81b5ea0 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x5592b81b6298 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5592b81b6180 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x5592b81b6558 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5592b81b6440 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5592b81b68a0 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5592b81b6780 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5592b81b6bb0 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5592b81b6a90 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5592b81b6ea0 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81b6ce8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81b6d60 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5592b81b6ff8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5592b81b70d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b7130 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b7178 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5592b81b7228 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b7280 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b7348 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5592b81b73f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b7450 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b7498 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5592b81b7548 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b75a0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b75e8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5592b81b7698 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b76f0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b7738 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5592b81b77e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81b7840 <col:30> Inherited
|-CXXMethodDecl 0x5592b81b7868 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81b7918 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81b79c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b81b7b88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81b7a78 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81b7af0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5592b81b7cd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81b7c48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81b7e88 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5592b81b7d90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81b7f40 <col:20>
| `-OptimizeNoneAttr 0x5592b81b7f98 <col:30>
|-CXXMethodDecl 0x5592b81b80b8 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b81b7fc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81b8170 <col:20>
| `-OptimizeNoneAttr 0x5592b81b81c8 <col:30>
|-CXXMethodDecl 0x5592b81b8280 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81b81f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81b83c8 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81b8338 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81b84f8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x5592b81b8638 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x5592b81b8708 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x5592b81b87d8 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x5592b81b8918 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81b8888 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81b8a60 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81b89d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81b8ba8 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b81b8b18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81b8c60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b81b8d60 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b81b8cd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81b8e18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b81b8ed8 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5592b81b8fd8 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5592b81b9188 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81b9098 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x5592b81b9948 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b81b9240 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5592b81b98a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x5592b81b97a8 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x5592b81b9a28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b81b9b78 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81b9ae8 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5592b81b9c30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b81b9e78 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81b9cf0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5592b81b9d68 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5592b81ba038 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x5592b81b9f48 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5592b81ba288 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x5592b81ba100 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5592b81ba178 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5592b81ba348 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b81ba5a8 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5592b81ba4b0 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x5592b81ba678 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b81ba678

Layout: <CGRecordLayout
  LLVMType:%class.Vector.15 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.15 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b81bbb60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x5592b81bbd38 prev 0x5592b81bbb60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5592b81bbdc8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5592b81bbdf0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81bd9c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x5592b81bd970 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x5592b81bc2a0 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5592b81bc1a0 'type'
|     `-TemplateSpecializationType 0x5592b81bc130 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5592b81bc010 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x5592b81bbff0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5592b81bbfd0 <col:24> 'unsigned long' 24
|       `-RecordType 0x5592b81bc110 'char_array<24>'
|         `-ClassTemplateSpecialization 0x5592b81bc030 'char_array'
|-TypedefDecl 0x5592b81bda78 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x5592b81bda40 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5592b81bda20 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5592b81bd9c0 'type'
|     `-ElaboratedType 0x5592b81bd970 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x5592b81bc2a0 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5592b81bc1a0 'type'
|         `-TemplateSpecializationType 0x5592b81bc130 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5592b81bc010 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x5592b81bbff0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5592b81bbfd0 <col:24> 'unsigned long' 24
|           `-RecordType 0x5592b81bc110 'char_array<24>'
|             `-ClassTemplateSpecialization 0x5592b81bc030 'char_array'
|-CXXMethodDecl 0x5592b81bdbf8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5592b81bdb08 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x5592b81bdce8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5592b81bddc8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5592b81bddc8
|-CXXMethodDecl 0x5592b81be098 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5592b81bdfa0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x5592b81be2d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5592b81be150 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b81be1c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81be4a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5592b81be398 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b81be410 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81be608 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5592b81be6d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5592b81be928 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5592b81be798 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5592b81be810 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81beb88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5592b81be9f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5592b81bea70 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81bed48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5592b81bec58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81bef08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5592b81bee10 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81befc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b81bf070 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b81bf2a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5592b81bf120 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5592b81bf198 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5592b81bf548 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5592b81bf450 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5592b81bf610 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x5592b81bf660 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5592b81bf6b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b81ba7c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5592b81ba9c8 prev 0x5592b81ba7c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5592b81bbad0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5592b81bba80 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x5592b81bba60 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5592b81bb910 'type'
|     `-SubstTemplateTypeParmType 0x5592b81bb730 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x5592b7dd3620 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7dd35c8 'T'
|       `-RecordType 0x5592b80b73f0 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x5592b80b7308 'sized_array_memory'
|-FieldDecl 0x5592b81bf700 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x5592b81bf750 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5592b81bf788 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|   `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81bf848 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5592b81bf810 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81bf908 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5592b81bf8d0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5592b81baa61 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81bf998 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x5592b81bf960 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81bfa58 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5592b81bfa20 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5592b81baa61 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81c1b20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x5592b81c1ad0 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x5592b81c1ab0 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x5592b81c19e0 'type'
|     `-LValueReferenceType 0x5592b81c0540 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5592b81c02e1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5592b81c02e0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x5592b7dddcf0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5592b7dddc98 'T'
|           `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81c1b88 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5592b81bf8d0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5592b81baa61 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81c1be0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-TypedefDecl 0x5592b81c1c48 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x5592b81bf960 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|     `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-TypedefDecl 0x5592b81c1cb0 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5592b81bfa20 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5592b81baa61 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5592b81baa60 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5592b7e0b310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5592b7e0b2b8 'T'
|       `-RecordType 0x5592b81b3230 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5592b81b31a0 'SelectorInfo'
|-EnumDecl 0x5592b81c1d08 <line:134:5> col:5
| `-EnumConstantDecl 0x5592b81c1e00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5592b81c1de0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5592b7e0c998 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5592b7e0c970 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5592b7e0c950 <col:40> 'int' 1
|-CXXConstructorDecl 0x5592b81c1e88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5592b81c2118 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81c1f40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81c1fe0 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x5592b81c23d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5592b81c22c0 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5592b81c2698 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5592b81c2580 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5592b81c29e0 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5592b81c28c0 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x5592b81c2cf0 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5592b81c2bd0 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5592b81c2fe0 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81c2e28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81c2ea0 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5592b81c3138 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5592b81c3218 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c3270 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c32b8 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5592b81c3368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c33c0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c3488 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5592b81c3538 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c3590 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c35d8 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5592b81c3688 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c36e0 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c3728 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5592b81c37d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c3830 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c3878 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5592b81c3928 <col:20> Inherited
| `-OptimizeNoneAttr 0x5592b81c3980 <col:30> Inherited
|-CXXMethodDecl 0x5592b81c39a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81c3a58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5592b81c3b08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5592b81c3cc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81c3bb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5592b81c3c30 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5592b81c3e18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81c3d88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81c3fc8 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x5592b81c3ed0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81c4080 <col:20>
| `-OptimizeNoneAttr 0x5592b81c40d8 <col:30>
|-CXXMethodDecl 0x5592b81c41f8 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x5592b81c4100 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5592b81c42b0 <col:20>
| `-OptimizeNoneAttr 0x5592b81c4308 <col:30>
|-CXXMethodDecl 0x5592b81c43c0 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81c4330 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81c4508 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81c4478 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81c4638 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5592b81c4768 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5592b81c4838 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5592b81c4908 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5592b81c4a48 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5592b81c49b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81c4b90 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5592b81c4b00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5592b81c4cd8 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5592b81c4c48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81c4d90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5592b81c4e90 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5592b81c4e00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5592b81c4f48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5592b81c5008 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x5592b81c5108 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x5592b81c52b8 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81c51c8 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x5592b81c5a78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5592b81c5370 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x5592b81c59d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x5592b81c58d8 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x5592b81c5b58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5592b81c5ca8 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5592b81c5c18 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5592b81c5d60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5592b81c5fa8 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5592b81c5e20 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5592b81c5e98 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5592b81c6168 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x5592b81c6078 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5592b81c63b8 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x5592b81c6230 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5592b81c62a8 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5592b81c6478 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5592b81c66d8 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5592b81c65e0 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x5592b81c67a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5592b81c67a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  NonVirtualBaseLLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81b2380 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b81b2498 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x5592b81b2528 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5592b81b25b0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x5592b81b26a0 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x5592b81b26a0
|-CXXMethodDecl 0x5592b81b27a0 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5592b81b2a40 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5592b81b2858 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x5592b81b28d0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x5592b81b2950 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x5592b81b2cb0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5592b81b2b10 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x5592b81b2b88 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5592b81b2c08 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x5592b81b2e08 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x5592b81b2d78 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x5592b81b2ed0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x5592b81c7e58 <col:34, line:50:5>
|   |-BinaryOperator 0x5592b81c7828 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x5592b81c77e8 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x5592b81b3658
|   | | `-CXXThisExpr 0x5592b81c77d8 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x5592b81c7818 <col:23> 'bool' true
|   `-CallExpr 0x5592b81c7e30 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5592b81c7e18 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5592b81c7d98 <col:2> 'void (long)' lvalue Function 0x5592b81c7c98 'ignore_result' 'void (long)' (FunctionTemplate 0x5592b7dce5c8 'ignore_result')
|     `-CallExpr 0x5592b81c7a40 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x5592b81c7a28 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b81c79a8 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x5592b8192888 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x5592b81c7a78 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x5592b81c7950 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x5592b81c7938 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x5592b81c78e8 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5592b81b35f8
|       |   |   `-CXXThisExpr 0x5592b81c78d8 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x5592b81c7918 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x5592b81c7aa8 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x5592b81c7a90 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x5592b81c7970 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x5592b81c7ac0 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5592b81c7988 <col:41> 'int' 1
|-CXXMethodDecl 0x5592b81b3010 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5592b81b2f80 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5592b81b30d8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5592b81b3178 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x5592b81b31a0 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b81b32b8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x5592b81b3358 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x5592b81b33b8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5592b81b3420 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x5592b81b34d0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x5592b81b3358 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5592b81c7eb8 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5592b81c7e78 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x5592b81b33b8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x5592b81c7f38 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5592b81c7ef8 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5592b81b3420 'pollfd' 'int'
|   | `-UnaryOperator 0x5592b81c7f98 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5592b81c7f78 <col:35> 'int' 1
|   `-CompoundStmt 0x5592b81c8010 <line:64:2, line:65:2>
|-FieldDecl 0x5592b81b35f8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x5592b81b3658 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x5592b81ba760 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x5592b81c6890 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x5592b81c6ac8 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x5592b81c68f8 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x5592b81c6970 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x5592b81c69e8 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x5592b81c6cb0 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x5592b81c6b98 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x5592b81c6c18 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5592b81c6ef8 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x5592b81c6d78 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5592b81c6df8 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5592b81c7108 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x5592b81c6fb8 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x5592b81c7030 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x5592b81c7258 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5592b81c71c8 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x5592b81c7320 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5592b81c73e0 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x5592b81c74a8 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x5592b81c74a8
| `-ParmVarDecl 0x5592b81c75b8 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x5592b81c7658 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x5592b81c7658
  `-ParmVarDecl 0x5592b81c7768 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81521e8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b8152308 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x5592b8152398 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5592b8152420 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x5592b8152510 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5592b8152610 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x5592b81526d0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x5592b8152790 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x5592b8152878 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x5592b8152998 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x5592b8152998
| `-ParmVarDecl 0x5592b8152aa8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x5592b81cf298 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x5592b81cf298
  `-ParmVarDecl 0x5592b81cf3a8 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b816d0d8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b816d1f8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x5592b816d298 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5592b816d2f8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5592b81ce898 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5592b81ce898
| `-ParmVarDecl 0x5592b81ce9a8 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5592b81cea48 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5592b81cea48
| `-ParmVarDecl 0x5592b81ceb58 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x5592b81cebc8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x5592b81cebc8
|-CXXMethodDecl 0x5592b81cf448 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5592b81cf448
| `-ParmVarDecl 0x5592b81cf558 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x5592b81cf5c8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5592b81cf5c8
| `-ParmVarDecl 0x5592b81cf6d8 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5592b81d9118 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x5592b81d91f0 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81540e0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b81541f8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x5592b8154288 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5592b8154310 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x5592b81543d0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x5592b7b0a580 'int'
|-CXXMethodDecl 0x5592b8154498 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x5592b8154538 <col:45> always_inline
|-CXXMethodDecl 0x5592b8154668 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x5592b81545a0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x5592b8154710 <col:49> always_inline
|-CXXConstructorDecl 0x5592b8154808 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5592b8154808
| `-ParmVarDecl 0x5592b8154918 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x5592b81549b8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5592b81549b8
| `-ParmVarDecl 0x5592b8154ac8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x5592b81cecb0 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x5592b81cecb0
|-CXXMethodDecl 0x5592b81cf778 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5592b81cf778
| `-ParmVarDecl 0x5592b81cf888 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x5592b81cf8f8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5592b81cf8f8
  `-ParmVarDecl 0x5592b81cfa08 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81c8480 prev 0x5592b81b22f0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5592b81c8578 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5592b81c8608 <col:22, col:28> col:22 public
|-EnumDecl 0x5592b81c8630 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x5592b81c8748 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x5592b81c8728 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5592b81c8710 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5592b81c86f0 <col:32> 'int' 1
| `-EnumConstantDecl 0x5592b81c87f0 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x5592b81c87d0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5592b81c87b8 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5592b81c8798 <col:53> 'int' 1000
|-CXXMethodDecl 0x5592b81c8890 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x5592b81c8950 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5592b81c8a38 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x5592b81cfac8 <col:34, col:52>
|   `-ReturnStmt 0x5592b81cfab8 <col:36, col:43>
|     `-MemberExpr 0x5592b81cfa88 <col:43> 'TimerSet' lvalue ->_timers 0x5592b81ccd98
|       `-CXXThisExpr 0x5592b81cfa78 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5592b81c8b28 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x5592b81cfb30 <col:46, col:64>
|   `-ReturnStmt 0x5592b81cfb20 <col:48, col:55>
|     `-MemberExpr 0x5592b81cfaf0 <col:55> 'const TimerSet' lvalue ->_timers 0x5592b81ccd98
|       `-CXXThisExpr 0x5592b81cfae0 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5592b81c8c18 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5592b81cfb98 <col:36, col:55>
|   `-ReturnStmt 0x5592b81cfb88 <col:38, col:45>
|     `-MemberExpr 0x5592b81cfb58 <col:45> 'SelectSet' lvalue ->_selects 0x5592b81ccdf8
|       `-CXXThisExpr 0x5592b81cfb48 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5592b81c8d08 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x5592b81cfc00 <col:48, col:67>
|   `-ReturnStmt 0x5592b81cfbf0 <col:50, col:57>
|     `-MemberExpr 0x5592b81cfbc0 <col:57> 'const SelectSet' lvalue ->_selects 0x5592b81ccdf8
|       `-CXXThisExpr 0x5592b81cfbb0 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5592b81c8dc8 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5592b81c8eb8 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x5592b81c9028 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x5592b81c8f68 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5592b81c90f0 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x5592b81c9538 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x5592b81c91a0 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x5592b81c9420 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5592b81c9608 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x5592b81c96c8 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x5592b81c9788 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x5592b81c98c8 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x5592b81c9838 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x5592b81cc020 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x5592b81cc0e0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x5592b81cc1a0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x5592b81cc260 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x5592b81cc3a0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5592b81cc310 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5592b81cc468 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x5592b81cc528 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x5592b81cc5c8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5592b81cc690 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc6e0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc730 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc780 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc7d0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc820 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc870 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc8c0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc910 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5592b81cc960 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x5592b81cc9b0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x5592b81ccaa8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x5592b81cca18 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x5592b81ccbf8 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5592b81ccb68 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x5592b81ccca0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x5592b81cccd8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x5592b81ccd38 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x5592b81ccd98 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x5592b81ccdf8 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x5592b81cce78 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x5592b81ccee8 <col:40, col:50> aligned
|   `-ConstantExpr 0x5592b81ccec8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x5592b81cce48 <col:48> 'int' 64
|-FieldDecl 0x5592b81ccf58 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x5592b81ccfb8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x5592b81cd0b0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x5592b81cd1c0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x5592b81cd220 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x5592b81cd2a0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x5592b81cd310 <col:36, col:46> aligned
|   `-ConstantExpr 0x5592b81cd2f0 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x5592b81cd270 <col:44> 'int' 64
|-FieldDecl 0x5592b81cd388 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x5592b81cd3e8 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x5592b81cd438 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5592b81cd478 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x5592b81cd4e0 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x5592b81cd530 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x5592b81cd6d8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5592b81cd568 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x5592b81cd5e8 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x5592b81cd7d8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x5592b81cd7d8
|-CXXMethodDecl 0x5592b81cd8e0 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x5592b81cd9a8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x5592b81cfcf8 <col:34, line:217:5>
|   `-ReturnStmt 0x5592b81cfce8 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x5592b81cfcd0 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5592b81cfca0 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x5592b816a1b0
|         `-ImplicitCastExpr 0x5592b81cfc88 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5592b81cfc58 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x5592b816a148
|             `-MemberExpr 0x5592b81cfc28 <col:16> 'const TaskLink' lvalue ->_task_link 0x5592b81cccd8
|               `-CXXThisExpr 0x5592b81cfc18 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5592b81cda68 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x5592b81cdb28 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x5592b81d0420 <col:39, line:226:5>
|   |-DeclStmt 0x5592b81cff48 <line:223:9, col:68>
|   | `-VarDecl 0x5592b81cfd20 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x5592b81cff00 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x5592b81cfed0 <col:24, col:38> '<bound member function type>' .compare_swap 0x5592b7e33c00
|   |     | `-MemberExpr 0x5592b81cfd98 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x5592b81ccf58
|   |     |   `-CXXThisExpr 0x5592b81cfd88 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5592b81cfe88 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5592b81cfe70 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5592b81cfe48 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x5592b81cfe28 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5592b81cff30 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x5592b81cfeb0 <col:66> 'int' 0
|   |-CStyleCastExpr 0x5592b81cff90 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5592b81cff60 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5592b81cfd20 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x5592b81d0400 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x5592b81d03d0 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x5592b81d00a8 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5592b81d0078 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5592b81d0060 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5592b81cffb8 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x5592b81cfd20 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5592b81d0038 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x5592b81d0020 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x5592b81cfff8 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x5592b81cffd8 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x5592b81d0108 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5592b81d00e8 <col:60> 'int' 0
|       `-CallExpr 0x5592b81d0330 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x5592b81d0318 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5592b81d02f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5592b7ba99e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5592b81d0370 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5592b81d01f8 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5592b81d0388 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5592b81d0228 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x5592b81d03a0 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5592b81d0268 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x5592b81d03b8 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5592b81d02e0 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5592b81d02c8 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5592b81d0288 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5592b81cdc70 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x5592b81cdbe0 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x5592b81cdd38 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x5592b81cddf8 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x5592b81cdeb8 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5592b81cdf78 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5592b81ce038 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5592b81ce130 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x5592b81ce190 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5592b81ce220 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x5592b81ce5e8 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x5592b81ce5e8
| `-ParmVarDecl 0x5592b81ce6f8 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x5592b81cedb8 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x5592b81cedb8
  `-ParmVarDecl 0x5592b81ceec8 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b816a4c0 prev 0x5592b806eeb0 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x5592b816a5f8 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x5592b816a688 <col:33, col:39> col:33 public
|-EnumDecl 0x5592b816a6b0 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x5592b816a7f0 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x5592b816a7d0 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x5592b816a7b0 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5592b816a770 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x5592b816a790 <col:26> 'int' 16
| `-EnumConstantDecl 0x5592b816a8c0 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x5592b816a8a0 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x5592b816a880 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5592b816a840 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x5592b816a860 <col:47> 'int' 31
|-EnumDecl 0x5592b816a910 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x5592b816aa50 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x5592b816ab70 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b816aa30 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x5592b816aa10 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x5592b816a9d0 <col:26> 'int' 1
| |       `-IntegerLiteral 0x5592b816a9f0 <col:29> 'int' 15
| `-EnumConstantDecl 0x5592b816ab20 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x5592b816ab88 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b816ab00 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x5592b816aae0 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x5592b816aaa0 <col:51> 'int' 1
|         `-IntegerLiteral 0x5592b816aac0 <col:54> 'int' 10
|-CXXConstructorDecl 0x5592b816ad58 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x5592b816abb0 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x5592b816ac30 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x5592b816aeb0 <line:86:5, col:27> col:12 Task 'void (Element *)' inline
| `-ParmVarDecl 0x5592b816ae20 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x5592b816afa8 <line:91:5, col:11> col:5 ~Task 'void ()' noexcept-unevaluated 0x5592b816afa8
|-CXXMethodDecl 0x5592b816b138 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x5592b816e238 <col:42, line:100:5>
|   `-ReturnStmt 0x5592b816e228 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5592b816e210 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5592b816e1e0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x5592b816cf60
|         `-CXXThisExpr 0x5592b816e1d0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5592b816b200 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x5592b816e2b8 <col:36, line:105:5>
|   `-ReturnStmt 0x5592b816e2a8 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x5592b816e290 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5592b816e260 <col:16> 'void *const' lvalue ->_thunk 0x5592b816cfc8
|         `-CXXThisExpr 0x5592b816e250 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5592b816b2c0 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x5592b816e338 <col:37, line:110:5>
|   `-ReturnStmt 0x5592b816e328 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5592b816e310 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5592b816e2e0 <col:16> 'Element *const' lvalue ->_owner 0x5592b816d088
|         `-CXXThisExpr 0x5592b816e2d0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5592b816b380 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5592b816b448 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x5592b816b508 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x5592b816b5c8 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5592b816e420 <col:35, line:137:5>
|   `-ReturnStmt 0x5592b816e410 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5592b816e3d8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x5592b816e3a8 <col:16, col:24> '<bound member function type>' ->router 0x5592b80816c0
|         `-ImplicitCastExpr 0x5592b816e3f8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5592b816e390 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5592b816e360 <col:16> 'Element *const' lvalue ->_owner 0x5592b816d088
|               `-CXXThisExpr 0x5592b816e350 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5592b816b688 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x5592b816b848 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5592b816b738 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5592b816b7b0 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5592b816ba58 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5592b816b908 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x5592b816b980 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5592b816bb28 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x5592b816e530 <col:35, line:181:5>
|   `-ReturnStmt 0x5592b816e520 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5592b816e508 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5592b816e4f0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5592b816e4c0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5592b816cb98
|           `-MemberExpr 0x5592b816e478 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|             `-MemberExpr 0x5592b816e448 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5592b816cee8
|               `-CXXThisExpr 0x5592b816e438 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5592b816bbe8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x5592b816e648 <col:30, line:192:5>
|   `-BinaryOperator 0x5592b816e628 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5592b816e5d0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5592b816cb98
|     | `-MemberExpr 0x5592b816e588 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|     |   `-MemberExpr 0x5592b816e558 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|     |     `-CXXThisExpr 0x5592b816e548 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5592b816e610 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5592b816e600 <col:32> 'bool' false
|-CXXMethodDecl 0x5592b816bca8 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5592b816e998 <col:30, line:206:5>
|   |-BinaryOperator 0x5592b816e740 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5592b816e6e8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5592b816cb98
|   | | `-MemberExpr 0x5592b816e6a0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|   | |   `-MemberExpr 0x5592b816e670 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|   | |     `-CXXThisExpr 0x5592b816e660 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5592b816e728 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5592b816e718 <col:32> 'bool' true
|   |-CallExpr 0x5592b816e7e0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5592b816e7c8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5592b816e7a8 <col:9> 'void ()' lvalue Function 0x5592b8151da0 'click_fence' 'void ()'
|   `-IfStmt 0x5592b816e980 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5592b816e8c0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5592b816e890 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x5592b816e840 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5592b816d2f8
|     | |   `-MemberExpr 0x5592b816e810 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x5592b816d370
|     | |     `-CXXThisExpr 0x5592b816e800 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5592b816e8a8 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x5592b816e870 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x5592b816e940 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5592b816e8f0 <col:13> '<bound member function type>' ->complete_schedule 0x5592b816dd70
|       | `-CXXThisExpr 0x5592b816e8e0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x5592b816e968 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5592b816e920 <col:31> 'int' 0
|-CXXMethodDecl 0x5592b816bd68 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5592b816eac0 <col:35, line:240:5>
|   `-BinaryOperator 0x5592b816eaa0 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5592b816ea48 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5592b816cb98
|     | `-MemberExpr 0x5592b816ea00 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|     |   `-MemberExpr 0x5592b816e9d0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|     |     `-CXXThisExpr 0x5592b816e9c0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5592b816ea88 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5592b816ea78 <col:32> 'bool' true
|-CXXMethodDecl 0x5592b816be28 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5592b816ecd8 <col:37, line:253:5>
|   |-BinaryOperator 0x5592b816ebb8 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5592b816eb60 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5592b816cb98
|   | | `-MemberExpr 0x5592b816eb18 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|   | |   `-MemberExpr 0x5592b816eae8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|   | |     `-CXXThisExpr 0x5592b816ead8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5592b816eba0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5592b816eb90 <col:32> 'bool' false
|   `-BinaryOperator 0x5592b816ecb8 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5592b816ec60 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5592b816cbf8
|     | `-MemberExpr 0x5592b816ec18 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|     |   `-MemberExpr 0x5592b816ebe8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|     |     `-CXXThisExpr 0x5592b816ebd8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5592b816eca0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5592b816ec90 <col:41> 'bool' true
|-CXXMethodDecl 0x5592b816bee8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x5592b816ee58 <col:37, line:264:5>
|   |-BinaryOperator 0x5592b816edd8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5592b816ed80 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5592b816cbf8
|   | | `-MemberExpr 0x5592b816ed38 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5592b816ccb8
|   | |   `-MemberExpr 0x5592b816ed08 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5592b816cee8
|   | |     `-CXXThisExpr 0x5592b816ecf8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5592b816edc0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5592b816edb0 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x5592b816ee38 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x5592b816ee08 <col:9> '<bound member function type>' ->reschedule 0x5592b816bca8
|       `-CXXThisExpr 0x5592b816edf8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x5592b816c030 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5592b816bfa0 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5592b816c100 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x5592b816c248 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x5592b816c1b8 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x5592b816c398 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5592b816c308 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x5592b816c460 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5592b816c520 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x5592b816c5c0 <col:53> "" ""
|-CXXMethodDecl 0x5592b816c658 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5592b816c6f8 <col:47> "" ""
|-AccessSpecDecl 0x5592b816c768 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5592b816c7a8 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5592b816c810 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x5592b816c860 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5592b816c978 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x5592b816ca08 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x5592b816cb38 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5592b816cb98 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x5592b816cbf8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5592b81d8848 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5592b81d8920 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5592b81d8920
| | |-CXXConstructorDecl 0x5592b81d8bd8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5592b81d8bd8
| | | `-ParmVarDecl 0x5592b81d8ce8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x5592b81d8d88 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5592b81d8d88
| |   `-ParmVarDecl 0x5592b81d8e98 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5592b816ccb8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x5592b816cd18 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5592b816cb38 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x5592b816cd70 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5592b816cb98 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5592b816cdc8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5592b816ccb8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5592b816cbf8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x5592b816ce20 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5592b81d8758 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5592b81d90b8 <col:11>
| |-CXXConstructorDecl 0x5592b81d8a28 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5592b81d8a28
| | `-ParmVarDecl 0x5592b81d8b38 <col:11> col:11 'const Task::Status &'
| `-CXXConstructorDecl 0x5592b81d8f38 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5592b81d8f38
|   `-ParmVarDecl 0x5592b81d9048 <col:11> col:11 'Task::Status &&'
|-FieldDecl 0x5592b816cee8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x5592b816cf60 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5592b816cfc8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5592b816d028 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x5592b816d088 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5592b816d0d8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5592b816d1f8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x5592b816d298 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5592b816d2f8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5592b81ce898 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5592b81ce898
| | `-ParmVarDecl 0x5592b81ce9a8 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5592b81cea48 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5592b81cea48
| | `-ParmVarDecl 0x5592b81ceb58 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x5592b81cebc8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x5592b81cebc8
| |-CXXMethodDecl 0x5592b81cf448 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5592b81cf448
| | `-ParmVarDecl 0x5592b81cf558 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x5592b81cf5c8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5592b81cf5c8
| | `-ParmVarDecl 0x5592b81cf6d8 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5592b81d9118 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5592b81d91f0 <col:11>
|-FieldDecl 0x5592b816d370 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x5592b816d4b8 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5592b816d3f8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x5592b816d668 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x5592b816d578 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x5592b816d730 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5592b816d7f0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5592b816d8b0 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x5592b816ef68 <col:41, line:355:5>
|   `-ReturnStmt 0x5592b816ef58 <line:354:9, col:38>
|     `-BinaryOperator 0x5592b816ef38 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x5592b816ef08 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5592b816eeb8 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5592b816d2f8
|       |   `-MemberExpr 0x5592b816ee88 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x5592b816d370
|       |     `-CXXThisExpr 0x5592b816ee78 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x5592b816ef20 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5592b816eee8 <col:38> 'int' 0
|-CXXMethodDecl 0x5592b816d970 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5592b816dab0 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x5592b816da20 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x5592b816dc28 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x5592b816db68 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x5592b816dd70 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5592b816dce0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x5592b816de38 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5592b816e000 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5592b816dee8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x5592b816df68 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5592b816e100 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x5592b816e190 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b815a048 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5592b815a178 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5592b815ac68 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon.19 = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b81568e8 prev 0x5592b806ef60 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5592b81569e0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5592b8156a70 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5592b8156ad0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5592b8156b78 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5592b8156c98 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5592b8156e38 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5592b8156d78 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5592b8157088 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5592b8156ef8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5592b8156f78 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5592b8157218 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5592b8157150 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5592b8157398 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5592b81572d8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5592b8157548 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5592b8157488 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5592b8157640 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5592b815ae40 <col:21, line:58:5>
|   `-IfStmt 0x5592b815ae28 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5592b815ad90 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5592b815ad60 <col:6> '<bound member function type>' ->scheduled 0x5592b8157e98
|     |   `-ImplicitCastExpr 0x5592b815adb0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5592b815ad50 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5592b815ae08 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5592b815add8 <col:6> '<bound member function type>' ->unschedule 0x5592b81594f0
|         `-CXXThisExpr 0x5592b815adc8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5592b8157740 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5592b815afe0 <col:26, line:65:5>
|   |-BinaryOperator 0x5592b815af00 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5592b815ae98 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5592b815a178
|   | | `-MemberExpr 0x5592b815ae68 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5592b815a238
|   | |   `-CXXThisExpr 0x5592b815ae58 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5592b815aee8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5592b815aec8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5592b815a698 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5592b815afc0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5592b815af30 <col:2> 'void *' lvalue ->_thunk 0x5592b815a2b8
|     | `-CXXThisExpr 0x5592b815af20 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5592b815af98 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5592b815af60 <col:20> 'int' 1
|-CXXMethodDecl 0x5592b8157880 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5592b81577f0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5592b815b140 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5592b815b030 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5592b815b000 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5592b81577f0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5592b815b120 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5592b815b0f0 <col:2> '<bound member function type>' ->assign 0x5592b8157740
|       `-CXXThisExpr 0x5592b815b0e0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5592b8157a50 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5592b8157938 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5592b81579b8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5592b815b2c0 <col:58, line:79:5>
|   |-BinaryOperator 0x5592b815b208 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5592b815b1a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5592b815a178
|   | | `-MemberExpr 0x5592b815b170 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5592b815a238
|   | |   `-CXXThisExpr 0x5592b815b160 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5592b815b1f0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5592b815b1d0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5592b8157938 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5592b815b2a0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5592b815b238 <col:2> 'void *' lvalue ->_thunk 0x5592b815a2b8
|     | `-CXXThisExpr 0x5592b815b228 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5592b815b288 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5592b815b268 <col:11> 'void *' lvalue ParmVar 0x5592b81579b8 'user_data' 'void *'
|-CXXMethodDecl 0x5592b8157ba0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5592b8157b10 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5592b815b458 <col:35, line:87:5>
|   |-BinaryOperator 0x5592b815b388 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5592b815b320 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5592b815a178
|   | | `-MemberExpr 0x5592b815b2f0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5592b815a238
|   | |   `-CXXThisExpr 0x5592b815b2e0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5592b815b370 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5592b815b350 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5592b815a870 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5592b815b438 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5592b815b3b8 <col:2> 'void *' lvalue ->_thunk 0x5592b815a2b8
|     | `-CXXThisExpr 0x5592b815b3a8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5592b815b420 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5592b815b408 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5592b815b3e8 <col:11> 'Element *' lvalue ParmVar 0x5592b8157b10 'element' 'Element *'
|-CXXMethodDecl 0x5592b8157ce8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5592b8157c58 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5592b815b5f0 <col:29, line:94:5>
|   |-BinaryOperator 0x5592b815b520 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5592b815b4b8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5592b815a178
|   | | `-MemberExpr 0x5592b815b488 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5592b815a238
|   | |   `-CXXThisExpr 0x5592b815b478 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5592b815b508 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5592b815b4e8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5592b815aa48 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5592b815b5d0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5592b815b550 <col:2> 'void *' lvalue ->_thunk 0x5592b815a2b8
|     | `-CXXThisExpr 0x5592b815b540 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5592b815b5b8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5592b815b5a0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5592b815b580 <col:11> 'Task *' lvalue ParmVar 0x5592b8157c58 'task' 'Task *'
|-CXXMethodDecl 0x5592b8157dd8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5592b815b6d0 <col:37, line:100:5>
|   `-ReturnStmt 0x5592b815b6c0 <line:99:2, col:19>
|     `-BinaryOperator 0x5592b815b6a0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5592b815b670 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5592b815b620 <col:9> 'Element *const' lvalue ->_owner 0x5592b815a318
|       |   `-CXXThisExpr 0x5592b815b610 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5592b815b688 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5592b815b650 <col:19> 'int' 0
|-CXXMethodDecl 0x5592b8157e98 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5592b815b790 <col:35, line:105:5>
|   `-ReturnStmt 0x5592b815b780 <line:104:2, col:23>
|     `-BinaryOperator 0x5592b815b760 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5592b815b748 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5592b815b6f8 <col:9> 'const int' lvalue ->_schedpos1 0x5592b8159f98
|       |   `-CXXThisExpr 0x5592b815b6e8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5592b815b728 <col:23> 'int' 0
|-CXXMethodDecl 0x5592b8157f58 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5592b815b7f8 <col:51, line:118:5>
|   `-ReturnStmt 0x5592b815b7e8 <line:117:2, col:9>
|     `-MemberExpr 0x5592b815b7b8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|       `-CXXThisExpr 0x5592b815b7a8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5592b8158018 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5592b815bd50 <col:37, line:136:5>
|   `-IfStmt 0x5592b815bd28 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5592b815b8b8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5592b815b8a0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5592b815b880 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5592b815b850 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5592b8001038
|     |       `-MemberExpr 0x5592b815b820 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|     |         `-CXXThisExpr 0x5592b815b810 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5592b815bc98 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5592b815bc80 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5592b815bc50 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5592b815bc38 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5592b815bc00 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5592b815bbe8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5592b815bbc8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b802f810 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5592b815bb68 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5592b815bb50 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5592b815ba78 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5592b815ba60 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5592b815ba40 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b802f4d0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5592b815b9e0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5592b815b8e0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|     |         |     |   `-CXXThisExpr 0x5592b815b8d0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5592b815ba28 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5592b815ba10 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5592b815b9c0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5592b815b9a8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5592b815b948 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5592b8022b30 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5592b815bbb0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5592b815bb98 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5592b815bb30 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5592b815bb18 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5592b815bae8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5592b7e7e080 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5592b815bd18 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5592b815bce8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5592b815bcb8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|           `-CXXThisExpr 0x5592b815bca8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5592b81580d8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5592b815be38 <col:35, line:141:5>
|   `-ReturnStmt 0x5592b815be28 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5592b815bdf0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5592b815bdc0 <col:9, col:17> '<bound member function type>' ->router 0x5592b80816c0
|         `-ImplicitCastExpr 0x5592b815be10 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5592b815bda8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5592b815bd78 <col:9> 'Element *const' lvalue ->_owner 0x5592b815a318
|               `-CXXThisExpr 0x5592b815bd68 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5592b8158198 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5592b815beb8 <col:37, line:146:5>
|   `-ReturnStmt 0x5592b815bea8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5592b815be90 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5592b815be60 <col:9> 'Element *const' lvalue ->_owner 0x5592b815a318
|         `-CXXThisExpr 0x5592b815be50 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5592b8158258 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5592b815bf38 <col:41, line:151:5>
|   `-ReturnStmt 0x5592b815bf28 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5592b815bf10 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5592b815bee0 <col:9> 'RouterThread *const' lvalue ->_thread 0x5592b815a378
|         `-CXXThisExpr 0x5592b815bed0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5592b8158320 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5592b8158518 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5592b81583d0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5592b8158448 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5592b815ac58 <col:50> 'bool' false
|-CXXMethodDecl 0x5592b8158698 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5592b81585d8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5592b81587e0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5592b8158750 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5592b8158928 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5592b8158898 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5592b8158a70 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5592b81589e0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5592b8158bb8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5592b8158b28 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5592b8158c80 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5592b815c0a0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5592b815c088 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5592b815c030 <col:2, col:47> 'void'
|       |-MemberExpr 0x5592b815bf60 <col:2> '<bound member function type>' ->schedule_at_steady 0x5592b81587e0
|       | `-CXXThisExpr 0x5592b815bf50 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815c070 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815c058 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5592b815c010 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5592b815bff8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5592b815bfc8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5592b7e7e080 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5592b8158dc0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5592b8158d30 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5592b8158f08 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8158e78 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b815c228 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5592b815c210 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5592b815c1b8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5592b815c0c8 <col:2> '<bound member function type>' ->schedule_after 0x5592b8158dc0
|       | `-CXXThisExpr 0x5592b815c0b8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815c1f8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815c1e0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5592b815c178 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5592b815c148 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5592b815c108 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8158e78 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5592b815c160 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5592b815c128 <col:38> 'int' 0
|-CXXMethodDecl 0x5592b8159050 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8158fc0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b815c498 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5592b815c480 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5592b815c428 <col:2, col:49> 'void'
|       |-MemberExpr 0x5592b815c250 <col:2> '<bound member function type>' ->schedule_after 0x5592b8158dc0
|       | `-CXXThisExpr 0x5592b815c240 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815c468 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815c450 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5592b815c3d0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5592b815c3b8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5592b815c328 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5592b8002e28 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5592b815c410 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5592b815c3f8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5592b815c308 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8158fc0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b8159198 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5592b8159108 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5592b815c678 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5592b815c660 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5592b815c608 <col:2, col:38> 'void'
|       |-MemberExpr 0x5592b815c4c0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5592b81587e0
|       | `-CXXThisExpr 0x5592b815c4b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815c648 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815c630 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5592b815c5d0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5592b815c5b8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5592b815c598 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b802f4d0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5592b815c568 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5592b815c550 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5592b815c500 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|             |     `-CXXThisExpr 0x5592b815c4f0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5592b815c530 <col:33> 'const Timestamp' lvalue ParmVar 0x5592b8159108 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5592b81592e0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8159250 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b815c950 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5592b815c938 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5592b815c8e0 <col:2, col:79> 'void'
|       |-MemberExpr 0x5592b815c6a0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5592b81587e0
|       | `-CXXThisExpr 0x5592b815c690 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815c920 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815c908 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5592b815c8a0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5592b815c7d8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5592b815c7c0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5592b815c750 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5592b815c720 <col:31, col:41> '<bound member function type>' .sec 0x5592b7e7fb78
|             | |     `-ImplicitCastExpr 0x5592b815c770 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5592b815c6f0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|             | |         `-CXXThisExpr 0x5592b815c6e0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5592b815c7a8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5592b815c788 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8159250 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5592b815c868 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5592b815c838 <col:60, col:70> '<bound member function type>' .subsec 0x5592b7e80270
|                 `-ImplicitCastExpr 0x5592b815c888 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5592b815c808 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|                     `-CXXThisExpr 0x5592b815c7f8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5592b8159428 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8159398 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5592b815cc88 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5592b815cc70 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5592b815cc18 <col:2, col:65> 'void'
|       |-MemberExpr 0x5592b815c978 <col:2> '<bound member function type>' ->schedule_at_steady 0x5592b81587e0
|       | `-CXXThisExpr 0x5592b815c968 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815cc58 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5592b815cc40 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5592b815cbe0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5592b815cbc8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5592b815cba8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5592b802f4d0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5592b815cb48 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5592b815cb30 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5592b815c9b8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|             |     `-CXXThisExpr 0x5592b815c9a8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5592b815cb90 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5592b815cb78 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5592b815cad8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5592b815cac0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5592b815ca90 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5592b8002e28 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5592b815cb18 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5592b815cb00 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5592b815ca70 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5592b8159398 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5592b81594f0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5592b81595b0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5592b815d150 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5592b815cce0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5592b815ccb0 <col:2> '<bound member function type>' ->unschedule 0x5592b81594f0
|   |   `-CXXThisExpr 0x5592b815cca0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5592b815d138 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5592b815d100 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5592b815d0e8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5592b815cd98 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5592b7d17118 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5592b815cd10 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5592b8159ff8
|       | `-CXXThisExpr 0x5592b815cd00 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5592b815cd80 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5592b815cd50 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5592b8159670 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5592b815d4a8 <col:42, line:310:5>
|   |-IfStmt 0x5592b815d2f0 <line:306:2, line:307:23>
|   | |-CallExpr 0x5592b815d220 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5592b815d208 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5592b815d1a8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5592b8020fa0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5592b815d2e0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5592b815d2c8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5592b815d298 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5592b815d280 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5592b815d250 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5592b815d498 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5592b815d480 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5592b815d450 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5592b815d438 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5592b815d3f8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5592b815d3e0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5592b815d3b0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5592b8003140 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5592b815d420 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5592b815d390 <col:30> 'int' 500
|-CXXMethodDecl 0x5592b81597b0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8159720 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8159858 <col:69> "" ""
|-CXXMethodDecl 0x5592b8159968 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b81598d8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8159a10 <col:70> "" ""
|-CXXMethodDecl 0x5592b8159b20 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8159a90 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8159bc8 <col:71> "" ""
|-CXXMethodDecl 0x5592b8159cd8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5592b8159c48 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5592b8159d80 <col:72> "" ""
|-EnumDecl 0x5592b8159df0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5592b8159ef0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5592b8159f40 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5592b8159ed0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5592b8159eb0 <col:25> 'int' 1
|-AccessSpecDecl 0x5592b8159f58 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5592b8159f98 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5592b8159ff8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5592b815a048 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5592b815a178 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5592b815ac68 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5592b815a238 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5592b815a2b8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5592b815a318 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5592b815a378 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5592b815a4c8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5592b815a3d8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5592b815a698 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5592b815a580 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5592b815a600 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5592b815a870 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5592b815a758 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5592b815a7d8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5592b815aa48 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5592b815a930 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5592b815a9b0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5592b815ac18 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8173c00 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x5592b829cbd8 <line:167:18>
|-CXXRecordDecl 0x5592b829cc98 prev 0x5592b8173c00 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5592b829cda8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.10 = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.10 = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b812a9b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b812aac8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5592b812ab58 <col:16, col:22> col:16 public
|-EnumDecl 0x5592b812ab80 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5592b812ac80 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5592b812aed0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b812ac60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5592b812ac40 <col:21> 'int' 0
| |-EnumConstantDecl 0x5592b812ad10 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5592b812aee8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b812acf0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5592b812acd0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5592b812ada0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5592b812af00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b812ad80 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5592b812ad60 <col:24> 'int' 34
| |-EnumConstantDecl 0x5592b812ae30 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5592b812af18 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5592b812ae10 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5592b812adf0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5592b812ae80 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5592b812c890 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5592b812ccc8 <col:7>
|-CXXConstructorDecl 0x5592b812c998 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5592b812c998
| `-ParmVarDecl 0x5592b812caa8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5592b812cb48 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b812cc58 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5592b82a5b70 <col:7>
`-CXXDestructorDecl 0x5592b812ee28 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b812af48 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5592b812b0a8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5592b812b138 <col:32, col:38> col:32 public
|-TypedefDecl 0x5592b812b170 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5592b7c62f30 'uint32_t' sugar
|   |-Typedef 0x5592b7b734c8 'uint32_t'
|   `-TypedefType 0x5592b7b4c5a0 '__uint32_t' sugar
|     |-Typedef 0x5592b7b4c198 '__uint32_t'
|     `-BuiltinType 0x5592b7b0a620 'unsigned int'
|-CXXConstructorDecl 0x5592b812b2b8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5592b812b1e0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5592b812c798 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5592b812ccd8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5592b812c050 'base' 'int'
| | `-ImplicitCastExpr 0x5592b812c838 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5592b812c7f8 <col:16> 'int' lvalue ParmVar 0x5592b812b1e0 'b' 'int'
| `-CompoundStmt 0x5592b812cd48 <col:19, line:1046:5>
|-CXXMethodDecl 0x5592b812b7b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5592b812b380 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5592b812b400 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5592b812b478 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5592b812b4f8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5592b812b5b8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5592b812b638 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5592b812bc08 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5592b812b880 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5592b812bb68 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5592b812b928 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5592b812b9c8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5592b812ba40 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5592b812c7b8 <col:82> 'const ArgContext' lvalue Var 0x5592b8120748 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5592b812dcd8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5592b812ced8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5592b812cd68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5592b812ce90 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5592b812d0f8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5592b812cf08 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5592b812d0d0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5592b812d0b0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5592b812d060 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5592b812d040 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5592b812cfe8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5592b812cf98 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5592b812cfc8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5592b812d028 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5592b812d008 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5592b812d090 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5592b812d2b8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5592b812d250 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5592b812d700 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5592b812d630 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5592b812d5b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5592b802cef8 0x5592b7e764d8 0x5592b7e761b0 0x5592b7e66980 0x5592b7e66630 0x5592b7e65f20 0x5592b7e38890 0x5592b7dc5d60
| |   | | |-CallExpr 0x5592b812d4f0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5592b812d2e0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5592b812d390 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5592b812d360 <col:19, col:23> '<bound member function type>' .begin 0x5592b7e55b88
| |   | | | |   `-DeclRefExpr 0x5592b812d340 <col:19> 'const String' lvalue ParmVar 0x5592b812b928 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5592b812d400 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5592b812d3d0 <col:32, col:36> '<bound member function type>' .end 0x5592b7e55da0
| |   | | | |   `-DeclRefExpr 0x5592b812d3b0 <col:32> 'const String' lvalue ParmVar 0x5592b812b928 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5592b812d420 <col:43> 'const bool' lvalue Var 0x5592b812cd68 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5592b812d488 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5592b812d468 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5592b812d4b0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5592b812d250 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5592b812d4d0 <col:73> 'const int' lvalue Var 0x5592b812cf08 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5592b812d590 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5592b812d560 <col:16, col:20> '<bound member function type>' .end 0x5592b7e55da0
| |   | |     `-DeclRefExpr 0x5592b812d540 <col:16> 'const String' lvalue ParmVar 0x5592b812b928 'str' 'const String &'
| |   | `-BinaryOperator 0x5592b812d6e0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5592b812d678 <col:13> 'int' lvalue ->status 0x5592b812c0b8
| |   |   | `-CXXThisExpr 0x5592b812d668 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5592b812d6c8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5592b812d6a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ad10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5592b812d950 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5592b812d838 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5592b812d820 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5592b812d808 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5592b812d728 <col:13> 'int' lvalue ->status 0x5592b812c0b8
| |   | | |     `-CXXThisExpr 0x5592b812d718 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5592b812d7e8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5592b812d7b8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5592b812d768 <col:23> 'int' lvalue ->status 0x5592b812c0b8
| |   | |   |   `-CXXThisExpr 0x5592b812d758 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5592b812d7d0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5592b812d798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5592b812d930 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5592b812d8d0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5592b812d878 <col:13, col:18> '<bound member function type>' .error 0x5592b7ff0c70
| |   |   | | `-DeclRefExpr 0x5592b812d858 <col:13> 'const ArgContext' lvalue ParmVar 0x5592b812ba40 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5592b812d8f8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5592b812d8a8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5592b812d920 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5592b812d910 <col:20> 'bool' false
| |   |-DeclStmt 0x5592b812db28 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5592b812dad0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5592b812da60 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5592b812dc88 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5592b812db40 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5592b7df9d28
| |   | |-DeclRefExpr 0x5592b812db88 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5592b812d250 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5592b812dc58 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5592b812dbd0 <col:64> 'V' lvalue ParmVar 0x5592b812b9c8 'result' 'V &'
| |   `-ReturnStmt 0x5592b812dcc8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5592b812dcb8 <col:16> 'bool' true
| |-CXXMethodDecl 0x5592b82a92f8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x5592b82a90d0 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x5592b82a91a8 <col:46, col:49> col:49 used result 'unsigned int &'
| | |-ParmVarDecl 0x5592b82a9210 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x5592b82ab090 <col:94, line:1067:5>
| |   |-DeclStmt 0x5592b82a9b08 <line:1054:9, col:64>
| |   | `-VarDecl 0x5592b82a9928 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x5592b82a9a98 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5592b82a9a68 <col:36, col:55> 'const bool' lvalue Var 0x5592b7de8f40 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x5592b82a9ce8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5592b82a9b20 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5592b82a9c68 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x5592b82a9c50 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x5592b82a9c30 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x5592b82a9c10 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x5592b82a9bf0 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x5592b82a9bb8 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x5592b82a9b98 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x5592b812cfc8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x5592b82a9bd8 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x5592b812d008 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x5592b812d090 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5592b82a9e80 <line:1056:9, col:27>
| |   | `-VarDecl 0x5592b82a9e18 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x5592b82aa308 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x5592b82aa2b0 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x5592b82aa168 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x5592b82aa138 <col:13> '<bound member function type>' ->parse 0x5592b812b7b0
| |   | | | | `-CXXThisExpr 0x5592b82aa128 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x5592b82a9fc8 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5592b82a9f98 <col:19, col:23> '<bound member function type>' .begin 0x5592b7e55b88
| |   | | | |   `-DeclRefExpr 0x5592b82a9f78 <col:19> 'const String' lvalue ParmVar 0x5592b82a90d0 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5592b82aa038 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5592b82aa008 <col:32, col:36> '<bound member function type>' .end 0x5592b7e55da0
| |   | | | |   `-DeclRefExpr 0x5592b82a9fe8 <col:32> 'const String' lvalue ParmVar 0x5592b82a90d0 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x5592b82aa1d8 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x5592b82aa1b8 <col:43> 'const bool' lvalue Var 0x5592b82a9928 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x5592b82aa0c0 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x5592b82aa0a8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x5592b82aa088 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| |   | | | |-ImplicitCastExpr 0x5592b82aa1f0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x5592b82aa0e8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5592b82a9e18 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x5592b82aa228 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x5592b82aa208 <col:73> 'const int' lvalue Var 0x5592b82a9b20 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x5592b82aa290 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5592b82aa260 <col:16, col:20> '<bound member function type>' .end 0x5592b7e55da0
| |   | |     `-DeclRefExpr 0x5592b82aa240 <col:16> 'const String' lvalue ParmVar 0x5592b82a90d0 'str' 'const String &'
| |   | `-BinaryOperator 0x5592b82aa2e8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5592b812d678 <col:13> 'int' lvalue ->status 0x5592b812c0b8
| |   |   | `-CXXThisExpr 0x5592b812d668 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5592b82aa2d0 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5592b812d6a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ad10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5592b82aa480 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5592b82aa3a0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5592b82aa388 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5592b82aa370 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5592b812d728 <col:13> 'int' lvalue ->status 0x5592b812c0b8
| |   | | |     `-CXXThisExpr 0x5592b812d718 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5592b82aa350 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5592b82aa320 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5592b812d768 <col:23> 'int' lvalue ->status 0x5592b812c0b8
| |   | |   |   `-CXXThisExpr 0x5592b812d758 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5592b82aa338 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5592b812d798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5592b82aa460 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5592b82aa410 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5592b82aa3e0 <col:13, col:18> '<bound member function type>' .error 0x5592b7ff0c70
| |   |   | | `-DeclRefExpr 0x5592b82aa3c0 <col:13> 'const ArgContext' lvalue ParmVar 0x5592b82a9210 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5592b82aa438 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5592b812d8a8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5592b82aa450 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5592b812d910 <col:20> 'bool' false
| |   |-DeclStmt 0x5592b82aa9c8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5592b82aa970 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x5592b82aa920 'typename make_unsigned<unsigned int>::type' sugar
| |   |     `-TypedefType 0x5592b82aa900 'make_unsigned<unsigned int>::type' sugar
| |   |       |-Typedef 0x5592b82aa890 'type'
| |   |       `-ElaboratedType 0x5592b82aa840 'typename integer_traits<unsigned int>::unsigned_type' sugar
| |   |         `-TypedefType 0x5592b82aa820 'integer_traits<unsigned int>::unsigned_type' sugar
| |   |           |-Typedef 0x5592b7de9098 'unsigned_type'
| |   |           `-BuiltinType 0x5592b7b0a620 'unsigned int'
| |   |-CallExpr 0x5592b82ab020 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x5592b82ab008 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5592b82aaf88 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5592b82aae68 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5592b7df9d28 'extract_integer')
| |   | |-ImplicitCastExpr 0x5592b82ab068 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x5592b82ab050 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x5592b82aaa28 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5592b82a9e18 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x5592b82aaaf8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
| |   |   `-DeclRefExpr 0x5592b82aaaa8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5592b82a91a8 'result' 'unsigned int &'
| |   `-ReturnStmt 0x5592b82ab080 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5592b812dcb8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5592b82c6088 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x5592b82c5e60 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5592b82c5f38 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x5592b82c5fa0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5592b82cb880 <col:94, line:1067:5>
|     |-DeclStmt 0x5592b82c6898 <line:1054:9, col:64>
|     | `-VarDecl 0x5592b82c66b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5592b82c6828 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5592b82c67f8 <col:36, col:55> 'const bool' lvalue Var 0x5592b7de2c50 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5592b82ca638 <line:1055:9, col:91>
|     | `-VarDecl 0x5592b82ca470 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5592b82ca5b8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5592b82ca5a0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5592b82ca580 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5592b82ca560 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5592b82ca540 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5592b82ca508 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5592b82ca4e8 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5592b812cfc8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5592b82ca528 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5592b812d008 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5592b812d090 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5592b82ca750 <line:1056:9, col:27>
|     | `-VarDecl 0x5592b82ca6e8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5592b82cabd8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5592b82cab80 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5592b82caa38 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5592b82caa08 <col:13> '<bound member function type>' ->parse 0x5592b812b7b0
|     | | | | `-CXXThisExpr 0x5592b82ca9f8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5592b82ca898 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5592b82ca868 <col:19, col:23> '<bound member function type>' .begin 0x5592b7e55b88
|     | | | |   `-DeclRefExpr 0x5592b82ca848 <col:19> 'const String' lvalue ParmVar 0x5592b82c5e60 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5592b82ca908 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5592b82ca8d8 <col:32, col:36> '<bound member function type>' .end 0x5592b7e55da0
|     | | | |   `-DeclRefExpr 0x5592b82ca8b8 <col:32> 'const String' lvalue ParmVar 0x5592b82c5e60 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5592b82caaa8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5592b82caa88 <col:43> 'const bool' lvalue Var 0x5592b82c66b8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5592b82ca990 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5592b82ca978 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5592b82ca958 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x5592b82caac0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5592b82ca9b8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5592b82ca6e8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5592b82caaf8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5592b82caad8 <col:73> 'const int' lvalue Var 0x5592b82ca470 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5592b82cab60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5592b82cab30 <col:16, col:20> '<bound member function type>' .end 0x5592b7e55da0
|     | |     `-DeclRefExpr 0x5592b82cab10 <col:16> 'const String' lvalue ParmVar 0x5592b82c5e60 'str' 'const String &'
|     | `-BinaryOperator 0x5592b82cabb8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5592b812d678 <col:13> 'int' lvalue ->status 0x5592b812c0b8
|     |   | `-CXXThisExpr 0x5592b812d668 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5592b82caba0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5592b812d6a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ad10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5592b82cad50 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5592b82cac70 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5592b82cac58 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5592b82cac40 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5592b812d728 <col:13> 'int' lvalue ->status 0x5592b812c0b8
|     | | |     `-CXXThisExpr 0x5592b812d718 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5592b82cac20 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5592b82cabf0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5592b812d768 <col:23> 'int' lvalue ->status 0x5592b812c0b8
|     | |   |   `-CXXThisExpr 0x5592b812d758 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5592b82cac08 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5592b812d798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5592b82cad30 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5592b82cace0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5592b82cacb0 <col:13, col:18> '<bound member function type>' .error 0x5592b7ff0c70
|     |   | | `-DeclRefExpr 0x5592b82cac90 <col:13> 'const ArgContext' lvalue ParmVar 0x5592b82c5fa0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5592b82cad08 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5592b812d8a8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5592b82cad20 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5592b812d910 <col:20> 'bool' false
|     |-DeclStmt 0x5592b82cb298 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5592b82cb240 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x5592b82cb1f0 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x5592b82cb1d0 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x5592b82cb160 'type'
|     |       `-ElaboratedType 0x5592b82cb110 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x5592b82cb0f0 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x5592b7de2da8 'unsigned_type'
|     |           `-BuiltinType 0x5592b7b0a5e0 'unsigned char'
|     |-CallExpr 0x5592b82cb810 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5592b82cb7f8 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5592b82cb778 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x5592b82cb658 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x5592b7df9d28 'extract_integer')
|     | |-ImplicitCastExpr 0x5592b82cb858 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5592b82cb840 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5592b82cb2f8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5592b82ca6e8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5592b82cb3c8 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5592b82cb378 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x5592b82c5f38 'result' 'unsigned char &'
|     `-ReturnStmt 0x5592b82cb870 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5592b812dcb8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5592b812bfc8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5592b812bc78 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5592b812bf28 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5592b812bd28 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5592b812bdc8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5592b812be40 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5592b812c7d8 <col:71> 'const ArgContext' lvalue Var 0x5592b8120748 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5592b812e448 <col:83, line:1083:5>
| |   |-DeclStmt 0x5592b812dda0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5592b812dd38 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5592b812e420 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5592b812e030 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5592b812deb8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5592b812de80 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5592b812ddc8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5592b812de20 <col:31> 'const String' lvalue ParmVar 0x5592b812bd28 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5592b812de40 <col:36> 'V' lvalue Var 0x5592b812dd38 'x' 'V'
| |     | |   `-DeclRefExpr 0x5592b812de60 <col:39> 'const ArgContext' lvalue ParmVar 0x5592b812be40 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5592b812e010 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5592b812dff0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5592b812dfd8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5592b812dfc0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5592b812dee0 <col:17> 'int' lvalue ->status 0x5592b812c0b8
| |     |     |     `-CXXThisExpr 0x5592b812ded0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5592b812dfa0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5592b812df70 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5592b812df20 <col:27> 'int' lvalue ->status 0x5592b812c0b8
| |     |       |   `-CXXThisExpr 0x5592b812df10 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5592b812df88 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5592b812df50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5592b812e060 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5592b812e050 <col:20> 'bool' false
| |     `-IfStmt 0x5592b812e3f8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5592b812e100 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5592b812e0d0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b812e080 <col:18> 'int' lvalue ->status 0x5592b812c0b8
| |       | |   `-CXXThisExpr 0x5592b812e070 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5592b812e0e8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5592b812e0b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5592b812e338 <col:42, line:1079:9>
| |       | |-CallExpr 0x5592b812e2e0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5592b812e130 <line:1076:13> '<bound member function type>' ->range_error 0x5592b812c6c8
| |       | | | `-CXXThisExpr 0x5592b812e120 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5592b812e160 <col:25> 'const ArgContext' lvalue ParmVar 0x5592b812be40 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5592b812e240 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5592b812e2b8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5592b812e298 <col:43> 'V' lvalue Var 0x5592b812dd38 'x' 'V'
| |       | `-ReturnStmt 0x5592b812e328 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5592b812e318 <col:20> 'bool' false
| |       `-CompoundStmt 0x5592b812e3d8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5592b812e398 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5592b812e358 <col:13> 'V' lvalue ParmVar 0x5592b812bdc8 'result' 'V &'
| |         | `-DeclRefExpr 0x5592b812e378 <col:22> 'V' lvalue Var 0x5592b812dd38 'x' 'V'
| |         `-ReturnStmt 0x5592b812e3c8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5592b812e3b8 <col:20> 'bool' true
| |-CXXMethodDecl 0x5592b82a8cb8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x5592b82a8a90 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x5592b82a8b68 <col:35, col:38> col:38 used result 'unsigned int &'
| | |-ParmVarDecl 0x5592b82a8bd0 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x5592b82a9908 <col:83, line:1083:5>
| |   |-DeclStmt 0x5592b82a8f40 <line:1071:9, col:12>
| |   | `-VarDecl 0x5592b82a8ed8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
| |   `-IfStmt 0x5592b82a98e0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5592b82a9570 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x5592b82a9498 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x5592b82a9460 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x5592b82a9418 <col:14> '<bound member function type>' ->parse_saturating 0x5592b82a92f8
| |     | |   | `-CXXThisExpr 0x5592b82a9408 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x5592b82a8fb0 <col:31> 'const String' lvalue ParmVar 0x5592b82a8a90 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5592b82a8fd0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5592b82a8ed8 'x' 'unsigned int':'unsigned int'
| |     | |   `-DeclRefExpr 0x5592b82a8ff0 <col:39> 'const ArgContext' lvalue ParmVar 0x5592b82a8bd0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5592b82a9550 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5592b82a9530 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5592b82a9518 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5592b82a9500 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5592b812dee0 <col:17> 'int' lvalue ->status 0x5592b812c0b8
| |     |     |     `-CXXThisExpr 0x5592b812ded0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5592b82a94e0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5592b82a94b0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5592b812df20 <col:27> 'int' lvalue ->status 0x5592b812c0b8
| |     |       |   `-CXXThisExpr 0x5592b812df10 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5592b82a94c8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5592b812df50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5592b82a9590 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5592b812e050 <col:20> 'bool' false
| |     `-IfStmt 0x5592b82a98b8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5592b82a95d0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5592b82a95a0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5592b812e080 <col:18> 'int' lvalue ->status 0x5592b812c0b8
| |       | |   `-CXXThisExpr 0x5592b812e070 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5592b82a95b8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5592b812e0b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5592b82a97f0 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x5592b82a9760 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x5592b812e130 <line:1076:13> '<bound member function type>' ->range_error 0x5592b812c6c8
| |       | | | `-CXXThisExpr 0x5592b812e120 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5592b82a95f0 <col:25> 'const ArgContext' lvalue ParmVar 0x5592b82a8bd0 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x5592b82a97c8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x5592b82a9798 <col:31, col:50> 'const bool' lvalue Var 0x5592b7de8f40 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x5592b82a9738 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x5592b82a9720 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x5592b82a9708 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x5592b82a96e8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5592b82a8ed8 'x' 'unsigned int':'unsigned int'
| |       | `-ReturnStmt 0x5592b82a97e0 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5592b812e318 <col:20> 'bool' false
| |       `-CompoundStmt 0x5592b82a9898 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5592b82a9868 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
| |         | |-DeclRefExpr 0x5592b82a9810 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5592b82a8b68 'result' 'unsigned int &'
| |         | `-ImplicitCastExpr 0x5592b82a9850 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x5592b82a9830 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5592b82a8ed8 'x' 'unsigned int':'unsigned int'
| |         `-ReturnStmt 0x5592b82a9888 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5592b812e3b8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5592b82c5ac8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x5592b82c5860 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5592b82c5938 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x5592b82c59a0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5592b82c6698 <col:83, line:1083:5>
|     |-DeclStmt 0x5592b82c5d50 <line:1071:9, col:12>
|     | `-VarDecl 0x5592b82c5ce8 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x5592b82c6670 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5592b82c6300 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5592b82c6228 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5592b82c61f0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5592b82c61a8 <col:14> '<bound member function type>' ->parse_saturating 0x5592b82c6088
|       | |   | `-CXXThisExpr 0x5592b82c6198 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5592b82c5dc0 <col:31> 'const String' lvalue ParmVar 0x5592b82c5860 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5592b82c5de0 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x5592b82c5ce8 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x5592b82c5e00 <col:39> 'const ArgContext' lvalue ParmVar 0x5592b82c59a0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5592b82c62e0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5592b82c62c0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5592b82c62a8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5592b82c6290 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5592b812dee0 <col:17> 'int' lvalue ->status 0x5592b812c0b8
|       |     |     `-CXXThisExpr 0x5592b812ded0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5592b82c6270 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5592b82c6240 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5592b812df20 <col:27> 'int' lvalue ->status 0x5592b812c0b8
|       |       |   `-CXXThisExpr 0x5592b812df10 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5592b82c6258 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5592b812df50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5592b82c6320 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5592b812e050 <col:20> 'bool' false
|       `-IfStmt 0x5592b82c6648 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5592b82c6360 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5592b82c6330 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5592b812e080 <col:18> 'int' lvalue ->status 0x5592b812c0b8
|         | |   `-CXXThisExpr 0x5592b812e070 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5592b82c6348 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5592b812e0b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5592b812ada0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5592b82c6580 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5592b82c64f0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5592b812e130 <line:1076:13> '<bound member function type>' ->range_error 0x5592b812c6c8
|         | | | `-CXXThisExpr 0x5592b812e120 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5592b82c6380 <col:25> 'const ArgContext' lvalue ParmVar 0x5592b82c59a0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5592b82c6558 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5592b82c6528 <col:31, col:50> 'const bool' lvalue Var 0x5592b7de2c50 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5592b82c64c8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5592b82c64b0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5592b82c6498 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5592b82c6478 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x5592b82c5ce8 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x5592b82c6570 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5592b812e318 <col:20> 'bool' false
|         `-CompoundStmt 0x5592b82c6628 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5592b82c65f8 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x5592b82c65a0 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x5592b82c5938 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x5592b82c65e0 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x5592b82c65c0 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x5592b82c5ce8 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x5592b82c6618 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5592b812e3b8 <col:20> 'bool' true
|-FieldDecl 0x5592b812c050 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5592b812c0b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5592b812c108 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5592b812c3c0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5592b812c148 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5592b812c1c8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5592b812c240 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5592b812c2c0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5592b812c6c8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5592b812c490 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5592b812c508 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5592b812c5a0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5592b812eca8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5592b812eca8
| `-ParmVarDecl 0x5592b812edb8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5592b812ef38 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b812f048 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5592b82a5b80 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5592b82a5b50 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5592b82a5b20 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82a5af0 <col:7> 'IntArg' lvalue ParmVar 0x5592b812f048 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5592b812c050 'base' 'int'
| | `-ImplicitCastExpr 0x5592b82a5c78 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5592b82a5c48 <col:7> 'int' xvalue .base 0x5592b812c050
| |     `-CXXStaticCastExpr 0x5592b82a5c18 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82a5be8 <col:7> 'IntArg' lvalue ParmVar 0x5592b812f048 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5592b812c0b8 'status' 'int'
| | `-ImplicitCastExpr 0x5592b82a5d48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5592b82a5d18 <col:7> 'int' xvalue .status 0x5592b812c0b8
| |     `-CXXStaticCastExpr 0x5592b82a5ce8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82a5cb8 <col:7> 'IntArg' lvalue ParmVar 0x5592b812f048 '' 'IntArg &&'
| `-CompoundStmt 0x5592b82a5da0 <col:7>
`-CXXDestructorDecl 0x5592b82a2be0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8133240 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5592b8133498 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5592b82a2b08 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5592b82a3080 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5592b82a3060 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5592b82a30f0 <col:19>
|-CXXConstructorDecl 0x5592b82a2ce8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5592b82a2ce8
| `-ParmVarDecl 0x5592b82a2df8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5592b82a2e98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b82a2fa8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5592b82a5db0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5592b82a5ad0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5592b82a5aa0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82a5a70 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5592b82a2fa8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5592b82a5e20 <col:19>
`-CXXDestructorDecl 0x5592b82a3130 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8132248 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x5592b81324a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5592b82c1bf8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5592b82c2090 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5592b82c2070 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5592b82c2100 <col:19>
|-CXXConstructorDecl 0x5592b82c1cf8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x5592b82c1cf8
| `-ParmVarDecl 0x5592b82c1e08 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x5592b82c1ea8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b82c1fb8 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5592b82c29a0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5592b82c2980 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5592b82c2950 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82c2920 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x5592b82c1fb8 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x5592b82c2a10 <col:19>
`-CXXDestructorDecl 0x5592b82c2140 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5592b8138670 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5592b8138788 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5592b8138818 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5592b8138a58 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5592b8138850 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5592b81388d0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5592b8138948 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5592b8138c70 <col:81> 'const ArgContext' lvalue Var 0x5592b8120748 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5592b8138bb0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5592b8138b20 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5592b8138dc8 <col:35, line:1261:5>
|   `-ReturnStmt 0x5592b8138db8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5592b8138da0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5592b8138d70 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5592b8138d58 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5592b8138d30 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5592b8138d10 <col:16, col:24> 'String' (CXXTemporary 0x5592b8138d10)
|               `-CXXConstructExpr 0x5592b8138cd8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5592b8138cc0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5592b8138ca0 <col:23> 'bool' lvalue ParmVar 0x5592b8138b20 'x' 'bool'
|-CXXConstructorDecl 0x5592b82d1028 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5592b82d1100 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5592b82d1238 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5592b82d1238
| `-ParmVarDecl 0x5592b82d1348 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x5592b82d13e8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5592b82d14f8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x5592b82d2150 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5592b8138e08 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5592b8139068 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5592b82d0f38 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5592b82d1568 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5592b82d1568
| `-ParmVarDecl 0x5592b82d1678 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5592b82d1718 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5592b82d1828 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5592b82d2160 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5592b82d2130 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5592b82d2100 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5592b82d20d0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5592b82d1828 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5592b82d21d0 <col:19>
`-CXXDestructorDecl 0x5592b82d18c8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.21 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.21 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
