
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387db8978 prev 0x564387db0118 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387db8a70 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x564387db8b00 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x564387db8b78 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x564387db8c38 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x564387db8d00 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x564387db8e78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x564387db8db0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x564387db8f20 <col:24>
| `-OptimizeNoneAttr 0x564387db8f78 <col:34>
|-CXXMethodDecl 0x564387db8fc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x564387db9278 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x564387db9070 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564387db90e8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x564387db9168 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x564387db9330 <line:229:7, col:14> col:7 private
|-FieldDecl 0x564387db9368 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x564387db93d0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x564387db9458 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x564387db9778 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x564387db9510 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564387db9588 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x564387db9600 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x564387db9680 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x564387db9890 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x564387dc1208 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564387dc1208
| `-ParmVarDecl 0x564387dc1318 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x564387dc13b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564387dc13b8
| `-ParmVarDecl 0x564387dc14c8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x564387e8f4f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387dab990 prev 0x564387dab710 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564387daba88 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x564387dabb18 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x564387dabb78 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x564387dabc68 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x564387dabd68 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x564387dabf38 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x564387dabde8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x564387dabe60 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x564387dac0c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x564387dac000 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x564387dac170 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x564387dac2a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x564387dac1e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x564387dac448 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x564387dac388 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x564387dac5e8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x564387dac528 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x564387dac690 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x564387dac790 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x564387dac870 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387dac770 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x564387dac750 <col:26> 'int' 1
| `-EnumConstantDecl 0x564387dac820 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x564387dac888 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387dac800 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x564387dac7e0 <col:44> 'int' 2
|-CXXMethodDecl 0x564387dac9d0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x564387dac8b8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x564387dac938 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x564387dacb28 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x564387daca98 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x564387dacd68 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x564387dacbe8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x564387dacc60 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x564387dace18 <col:20>
| `-OptimizeNoneAttr 0x564387dace70 <col:30>
|-CXXMethodDecl 0x564387dacf78 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x564387daceb0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x564387dad020 <col:20>
| `-OptimizeNoneAttr 0x564387dad078 <col:30>
|-CXXMethodDecl 0x564387dad0c8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x564387dad190 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x564387dad2a8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x564387dad330 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x564387dad3b8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x564387dad440 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x564387dad4c8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x564387dad558 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x564387dad618 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x564387dad6a0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x564387dad728 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x564387dad7b0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x564387dad838 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x564387dad8c0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x564387dad950 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x564387dada10 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x564387dadaa0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x564387dadbf0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x564387dadb58 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x564387dadd80 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x564387dadcb0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x564387dae030 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x564387dade38 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x564387dadeb8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x564387dadf38 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x564387dae0e8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x564387dae1f0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564387dae480 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387dae1d0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x564387dae1b0 <col:33> 'int' 0
| |-EnumConstantDecl 0x564387dae280 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564387dae498 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387dae260 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x564387dae240 <col:32> 'int' 20
| |-EnumConstantDecl 0x564387dae310 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564387dae4b0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387dae2f0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x564387dae2d0 <col:38> 'int' 90
| |-EnumConstantDecl 0x564387dae3a0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564387dae4c8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387dae380 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x564387dae360 <col:35> 'int' 100
| `-EnumConstantDecl 0x564387dae430 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x564387dae4e0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387dae410 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x564387dae3f0 <col:32> 'int' 2000
|-CXXMethodDecl 0x564387dae520 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x564387dae960 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564387dae7d0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x564387dae848 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387daea30 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x564387daebb0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x564387daeae0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387daedb8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564387daec68 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x564387daece0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387daeeb8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x564387daef58 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x564387daf020 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf0b0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x564387daf2e0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387daf090 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x564387daf070 <col:36> 'int' EnumConstant 0x564387daf020 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf100 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf150 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf1a0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf1f0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564387daf240 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x564387daf290 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x564387daf3c8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x564387daf308 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x564387daf490 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x564387daf550 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x564387daf610 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x564387daf6d0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x564387daf7e8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x564387daf8b0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x564387dafa30 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x564387daf960 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x564387dafb58 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x564387dafd58 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x564387dafc08 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x564387dafc88 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x564387dbd6a8 <col:54, line:127:5>
|   |-ParenExpr 0x564387dbd558 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x564387dbd528 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x564387dbd218 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564387dbd1f0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x564387dbd1d8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x564387dbd1c0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x564387dbd190 <col:31> 'Router *' lvalue ->_router 0x564387dbb070
|   |   |         `-CXXThisExpr 0x564387dbd180 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564387dbd278 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387dbd258 <col:48> 'int' 0
|   |   `-CallExpr 0x564387dbd488 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x564387dbd470 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387dbd450 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387dbd4c8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387dbd2e8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x564387dbd4e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387dbd308 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x564387dbd4f8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387dbd340 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x564387dbd510 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387dbd438 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387dbd420 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387dbd3d8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x564387dbd5f0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x564387dbd588 <col:9> 'Router *' lvalue ->_router 0x564387dbb070
|   | | `-CXXThisExpr 0x564387dbd578 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x564387dbd5d8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564387dbd5b8 <col:19> 'Router *' lvalue ParmVar 0x564387dafc08 'r' 'Router *'
|   `-BinaryOperator 0x564387dbd688 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x564387dbd620 <col:9> 'int' lvalue ->_eindex 0x564387dbb0d8
|     | `-CXXThisExpr 0x564387dbd610 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x564387dbd670 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x564387dbd650 <col:19> 'int' lvalue ParmVar 0x564387dafc88 'eindex' 'int'
|-CXXMethodDecl 0x564387dafee0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x564387dafe18 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x564387daffb0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x564387db0078 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x564387db0118 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x564387db0368 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x564387db01e0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x564387db0260 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x564387db0418 <col:20>
| `-OptimizeNoneAttr 0x564387db0470 <col:30>
|-CXXMethodDecl 0x564387db0578 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564387db04b0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x564387db0620 <col:20>
| `-OptimizeNoneAttr 0x564387db0678 <col:30>
|-CXXMethodDecl 0x564387db0748 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564387db06b8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x564387db07f0 <col:20>
| `-OptimizeNoneAttr 0x564387db0848 <col:30>
|-CXXMethodDecl 0x564387db09d8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x564387db0880 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x564387db0900 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x564387db0b68 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564387db0aa0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564387db0cb8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564387db0c28 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564387db0e08 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564387db0d78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564387db0f58 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564387db0ec8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564387db1218 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x564387db1010 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x564387db1090 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x564387db1138 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x564387db12f0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x564387db13b0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x564387db1680 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564387db1530 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x564387db15a8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x564387db17a8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x564387db1980 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x564387db1860 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x564387db18e0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x564387db1b68 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x564387db1a48 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x564387db1ac8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x564387db1ed8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564387db1c28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564387db1ca0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564387db1d20 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564387dbcc90 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564387dbcc70 <col:106> 'int' 0
| `-ParmVarDecl 0x564387db1d98 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbccc8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbcca8 <col:126> 'int' 0
|-CXXMethodDecl 0x564387db2278 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564387db1fa8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564387db2040 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564387db20c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x564387db2138 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbcd00 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbcce0 <col:114> 'int' 0
|-CXXMethodDecl 0x564387db2608 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564387db2350 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x564387db23c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564387db2448 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x564387dbcd18 <col:96> 'int' 0
| `-ParmVarDecl 0x564387db24c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbcd58 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbcd38 <col:116> 'int' 0
|-CXXMethodDecl 0x564387db2988 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564387db26d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564387db2750 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db27d0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564387dbcd90 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564387dbcd70 <col:109> 'int' 0
| `-ParmVarDecl 0x564387db2848 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbcdc8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbcda8 <col:129> 'int' 0
|-CXXMethodDecl 0x564387db2d08 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564387db2a58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564387db2ad0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db2b50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x564387db2bc8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbce00 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbcde0 <col:117> 'int' 0
|-CXXMethodDecl 0x564387db3098 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564387db2de0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db2e58 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db2ed8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x564387dbce18 <col:99> 'int' 0
| `-ParmVarDecl 0x564387db2f50 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564387dbce58 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564387dbce38 <col:119> 'int' 0
|-CXXMethodDecl 0x564387db34b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x564387db3168 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564387db31e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564387db3260 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db32e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564387dbce90 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564387dbce70 <col:108> 'int' 0
| `-ParmVarDecl 0x564387db3360 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x564387dbcec8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x564387dbcea8 <col:141> 'int' 0
|-CXXMethodDecl 0x564387db38d8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564387db3590 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564387db3610 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564387db3688 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db3708 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x564387db3788 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564387dbcee0 <col:121> 'int' 0
|-CXXMethodDecl 0x564387db3d08 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564387db39b8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x564387db3a38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x564387db3ab0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564387db3b30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x564387dbcf00 <col:98> 'int' 0
| `-ParmVarDecl 0x564387db3bb0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564387dbcf20 <col:123> 'int' 0
|-CXXMethodDecl 0x564387db3fd0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x564387db3de0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564387db3e60 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x564387db3ee0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x564387dbcf40 <col:80> 'int' 0
|-EnumDecl 0x564387db4088 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x564387db4190 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564387db4420 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387db4170 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x564387db4150 <col:42> 'int' 1
| |-EnumConstantDecl 0x564387db4220 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564387db4438 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387db4200 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x564387db41e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x564387db42b0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564387db4450 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387db4290 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x564387db4270 <col:44> 'int' 4
| |-EnumConstantDecl 0x564387db4340 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564387db4468 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387db4320 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x564387db4300 <col:36> 'int' 7
| `-EnumConstantDecl 0x564387db43d0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x564387db4480 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387db43b0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x564387db4390 <col:34> 'int' 6
|-CXXMethodDecl 0x564387db4738 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x564387db44a8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x564387db4548 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x564387db45c8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x564387db4640 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x564387dbcff8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x564387dbcfe0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x564387dbcfc8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x564387dbcfa8 <col:98, col:105> 'String' (CXXTemporary 0x564387dbcfa8)
|           `-CXXTemporaryObjectExpr 0x564387dbcf70 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x564387db49d8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x564387db4808 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564387db4880 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x564387db48f8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564387dbd0a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564387dbd090 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564387dbd078 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564387dbd058 <col:94, col:101> 'String' (CXXTemporary 0x564387dbd058)
| |         `-CXXTemporaryObjectExpr 0x564387dbd020 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x564387dbd890 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x564387dbd808 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x564387dbd7d8 <col:9> '<bound member function type>' ->add_task_handlers 0x564387db4738
|     | `-CXXThisExpr 0x564387dbd7c8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564387dbd848 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564387dbd748 <col:27> 'Task *' lvalue ParmVar 0x564387db4808 'task' 'Task *'
|     |-ImplicitCastExpr 0x564387dbd860 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x564387dbd768 <col:33> 'NotifierSignal *' lvalue ParmVar 0x564387db4880 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x564387dbd878 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564387dbd788 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564387db43d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564387dbd7a8 <col:62> 'const String' lvalue ParmVar 0x564387db48f8 'prefix' 'const String &'
|-CXXMethodDecl 0x564387db4be8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x564387db4aa0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564387db4b18 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564387dbd158 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564387dbd140 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564387dbd128 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564387dbd108 <col:70, col:77> 'String' (CXXTemporary 0x564387dbd108)
| |         `-CXXTemporaryObjectExpr 0x564387dbd0d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x564387dbda68 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x564387dbd9e0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x564387dbd9b0 <col:9> '<bound member function type>' ->add_task_handlers 0x564387db4738
|     | `-CXXThisExpr 0x564387dbd9a0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564387dbda20 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564387dbd920 <col:27> 'Task *' lvalue ParmVar 0x564387db4aa0 'task' 'Task *'
|     |-ImplicitCastExpr 0x564387dbda38 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x564387dbd940 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x564387dbda50 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564387dbd960 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564387db43d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564387dbd980 <col:57> 'const String' lvalue ParmVar 0x564387db4b18 'prefix' 'const String &'
|-CXXMethodDecl 0x564387db4ec8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x564387db4cb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db4d30 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db4da8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x564387db5178 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x564387db4f98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db5018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db5098 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x564387db5468 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564387db5248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db52c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db5340 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x564387db5718 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x564387db5538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db55b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db5638 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x564387db59c8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x564387db57e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db5868 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db58e8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x564387db5c78 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x564387db5a98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db5b18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db5b90 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x564387db5f28 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x564387db5d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db5dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db5e48 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x564387db6238 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x564387db6050 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db60d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db6150 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x564387db6518 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x564387db6308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db6388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db6430 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x564387db67f8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x564387db65e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db6668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db6710 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x564387db6a60 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564387db68c8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564387db6948 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564387db69c0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x564387db6d08 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x564387db6b30 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564387db6bb0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564387db6c28 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x564387db6fb8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x564387db6dd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db6e58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db6ed8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x564387db7268 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x564387db7088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db7108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db7180 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x564387db7518 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x564387db7338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db73b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db7430 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x564387db77e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x564387db75e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db7668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564387db7708 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x564387db7b18 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x564387db78b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564387db7938 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x564387db79b0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x564387db7a28 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564387dbd170 <col:93> 'bool' false
|-CXXMethodDecl 0x564387db7d00 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564387db7be8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x564387db7c68 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x564387db7ed8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564387db7dc0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x564387db7e40 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x564387db81b8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564387db7f98 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x564387db8010 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x564387db8090 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x564387db8108 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x564387db84a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564387db8288 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x564387db8300 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x564387db8380 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x564387db83f8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x564387db86e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x564387db8580 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x564387db8600 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x564387db88c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x564387db87a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x564387db8828 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x564387db8978 prev 0x564387db0118 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564387db8a70 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x564387db8b00 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x564387db8b78 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x564387db8c38 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x564387db8d00 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x564387db8e78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x564387db8db0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x564387db8f20 <col:24>
| | `-OptimizeNoneAttr 0x564387db8f78 <col:34>
| |-CXXMethodDecl 0x564387db8fc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x564387db9278 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x564387db9070 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564387db90e8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x564387db9168 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x564387db9330 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x564387db9368 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x564387db93d0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x564387db9458 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x564387db9778 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x564387db9510 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564387db9588 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x564387db9600 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x564387db9680 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x564387db9890 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x564387dc1208 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564387dc1208
| | `-ParmVarDecl 0x564387dc1318 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x564387dc13b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564387dc13b8
| | `-ParmVarDecl 0x564387dc14c8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x564387e8f4f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564387db9908 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x564387db99a8 <col:38> "" ""
|-CXXMethodDecl 0x564387db9a38 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x564387db9ad8 <col:44> "" ""
|-AccessSpecDecl 0x564387db9b48 <line:260:3, col:10> col:3 private
|-EnumDecl 0x564387db9b70 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x564387db9c70 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x564387db9cc0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387db9c50 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x564387db9c30 <col:27> 'int' 4
|-FieldDecl 0x564387db9d78 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x564387db9f28 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x564387db9fe0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x564387dbb070 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x564387dbb0d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x564387dbb228 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x564387dbb168 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x564387dbb3d8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x564387dbb2e8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x564387dbb5b8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x564387dbb498 <col:20> col:23 'int'
| `-ParmVarDecl 0x564387dbb518 <col:25> col:28 'int'
|-CXXMethodDecl 0x564387dbb860 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x564387dbb680 <col:23> col:26 'int'
| |-ParmVarDecl 0x564387dbb700 <col:28> col:31 'int'
| `-ParmVarDecl 0x564387dbb778 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x564387dbb918 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x564387dbb9e0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x564387dbba30 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x564387dbba80 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x564387dbbc60 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x564387dbbb10 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x564387dbbb88 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387dbbf08 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x564387dbbd28 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x564387dbbda8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x564387dbbe20 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x564387dbc128 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x564387dbbfd8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x564387dbc058 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x564387dbc460 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x564387dbc1e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x564387dbc268 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x564387dbc2e0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x564387dbc360 <col:57> col:60 'int'
|-CXXMethodDecl 0x564387dbc648 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564387dbc530 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x564387dbc5b0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x564387dbc798 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x564387dbc708 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x564387dbcb18 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x564387dbc858 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x564387dbc8d8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x564387dbc950 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x564387dbc9d0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x564387dbcc30 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class DynamicUDPIPEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _saddr
       108 |     in_addr_t s_addr
       112 |   struct in_addr _daddr
       112 |     in_addr_t s_addr
       116 |   uint16_t _sport
       118 |   uint16_t _dport
   120:0-0 |   _Bool _cksum
       124 |   class atomic_uint32_t _id
       124 |     uint32_t _val
       128 |   class atomic_uint32_t _count
       128 |     uint32_t _val
       132 |   unsigned int _interval
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387a70db8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387a70ed8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x564387a70fa0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x564387bb1200 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564387bb60f8 <col:8>
|-CXXConstructorDecl 0x564387bb1308 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x564387bb1308
| `-ParmVarDecl 0x564387bb1418 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x564387bb14b8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387bb15c8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x564387a70fa0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb6310 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x564387bb62e0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x564387a70fa0
| |     `-CXXStaticCastExpr 0x564387bb62b0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x564387bb6280 <col:8> 'in_addr' lvalue ParmVar 0x564387bb15c8 '' 'in_addr &&'
| `-CompoundStmt 0x564387bb6358 <col:8>
`-CXXDestructorDecl 0x564387bb6590 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387b6fb18 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387b6fc38 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x564387b6fcc8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x564387b6fd98 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x564387b6fe80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x564387b70098 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564387b6ff40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b70248 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564387b70150 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564387b70390 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564387b70300 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564387b704d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564387b70448 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b70620 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564387b70590 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b706e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x564387b70830 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x564387b707a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x564387b708f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x564387b70a40 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x564387b709b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x564387b70bb8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564387b70af8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b70d00 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564387b70c70 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b70dc8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x564387b70f88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564387b70e78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564387b70ef0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b711d8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564387b71048 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387b710c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564387b71288 <col:86> "" ""
|-CXXMethodDecl 0x564387b714f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x564387b71368 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x564387b713e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b716a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564387b715b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564387b71858 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564387b71760 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564387b71b28 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564387b71910 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564387b71988 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564387b71a00 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b71e08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564387b71bf0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564387b71c68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387b71ce0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564387b71ec0 <col:115> "" ""
|-AccessSpecDecl 0x564387b71f30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x564387b71f68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387b72418 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564387b72418
| `-ParmVarDecl 0x564387b72528 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x564387b725c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564387b725c8
| `-ParmVarDecl 0x564387b726d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x564387ba7f98 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564387d95480 <col:7>
|-CXXConstructorDecl 0x564387ba8070 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564387ba8070
| `-ParmVarDecl 0x564387ba8188 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x564387ba81f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564387ba81f8
| `-ParmVarDecl 0x564387ba8308 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x564387d97e80 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387dc4698 <../elements/tcpudp/dynudpipencap.hh:35:1, line:62:1> line:35:7 class DynamicUDPIPEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x564387dc47f8 <col:1, col:7> col:7 implicit referenced class DynamicUDPIPEncap
|-FieldDecl 0x564387dc48a8 <line:37:3, col:18> col:18 _saddr 'struct in_addr':'in_addr'
|-FieldDecl 0x564387dc4918 <line:38:3, col:18> col:18 _daddr 'struct in_addr':'in_addr'
|-FieldDecl 0x564387dc4978 <line:39:3, col:12> col:12 _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x564387dc49d8 <line:40:3, col:12> col:12 _dport 'uint16_t':'unsigned short'
|-FieldDecl 0x564387dc4a78 <line:41:3, col:17> col:8 _cksum 'bool'
| `-ConstantExpr 0x564387dc4a58 <col:17> 'int' Int: 1
|   `-IntegerLiteral 0x564387dc4a28 <col:17> 'int' 1
|-FieldDecl 0x564387dc4ad8 <line:45:3, col:19> col:19 _id 'atomic_uint32_t'
|-FieldDecl 0x564387dc4b38 <line:46:3, col:19> col:19 _count 'atomic_uint32_t'
|-FieldDecl 0x564387dc4ba0 <line:47:3, col:12> col:12 _interval 'unsigned int'
|-AccessSpecDecl 0x564387dc4bf0 <line:49:2, col:8> col:2 public
|-CXXConstructorDecl 0x564387dc4c80 <line:51:3, col:21> col:3 DynamicUDPIPEncap 'void ()'
|-CXXDestructorDecl 0x564387dc4d70 <line:52:3, col:22> col:3 ~DynamicUDPIPEncap 'void ()' noexcept-unevaluated 0x564387dc4d70
| `-Overrides: [ 0x564387dabc68 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x564387dc4ea0 <line:54:3, col:64> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x564387dad0c8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x564387dc58b0 <col:34, col:64>
|   `-ReturnStmt 0x564387dc58a0 <col:36, col:43>
|     `-ImplicitCastExpr 0x564387dc5888 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x564387dc5858 <col:43> 'const char [18]' lvalue "DynamicUDPIPEncap"
|-CXXMethodDecl 0x564387dc4f68 <line:55:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x564387dad190 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x564387dc5910 <col:34, col:54>
|   `-ReturnStmt 0x564387dc5900 <col:36, col:43>
|     `-ImplicitCastExpr 0x564387dc58e8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x564387dc58c8 <col:43> 'const char []' lvalue Var 0x564387dad440 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x564387dc5030 <line:56:3, col:43> col:15 flags 'const char *() const'
| |-Overrides: [ 0x564387dadaa0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x564387dc5970 <col:29, col:43>
|   `-ReturnStmt 0x564387dc5960 <col:31, col:38>
|     `-ImplicitCastExpr 0x564387dc5948 <col:38> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x564387dc5928 <col:38> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x564387dc5300 <line:58:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x564387dae960 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x564387dc51b0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x564387dc5228 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x564387dc5450 <line:60:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x564387dac2a8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x564387dc53c0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x564387dc5528 <line:35:7> col:7 implicit DynamicUDPIPEncap 'void (const DynamicUDPIPEncap &)' inline default_delete noexcept-unevaluated 0x564387dc5528
| `-ParmVarDecl 0x564387dc5638 <col:7> col:7 'const DynamicUDPIPEncap &'
`-CXXMethodDecl 0x564387dc56d8 <col:7> col:7 implicit operator= 'DynamicUDPIPEncap &(const DynamicUDPIPEncap &)' inline default_delete noexcept-unevaluated 0x564387dc56d8
  `-ParmVarDecl 0x564387dc57e8 <col:7> col:7 'const DynamicUDPIPEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.DynamicUDPIPEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, %class.atomic_uint32_t, %class.atomic_uint32_t, i32 }
  NonVirtualBaseLLVMType:%class.DynamicUDPIPEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, %class.atomic_uint32_t, %class.atomic_uint32_t, i32 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:120>
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387b843a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564387b844b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x564387b84558 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x564387b845b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x564387b84618 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x564387b846c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387b849d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387b84ae8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x564387b84b90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x564387b84bf8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x564387b84c88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x564387b87220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564387b89868 <col:12>
|-CXXConstructorDecl 0x564387b87328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564387b87438 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564387b84b90 'data' 'const char *'
| | `-ImplicitCastExpr 0x564387b8bdf0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x564387b8bdc0 <col:12> 'const char *const' lvalue .data 0x564387b84b90
| |     `-DeclRefExpr 0x564387b8bda0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564387b84bf8 'length' 'int'
| | `-ImplicitCastExpr 0x564387b8be80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564387b8be50 <col:12> 'const int' lvalue .length 0x564387b84bf8
| |     `-DeclRefExpr 0x564387b8be30 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564387b84c88 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x564387b8bf10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x564387b8bee0 <col:12> 'String::memo_t *const' lvalue .memo 0x564387b84c88
| |     `-DeclRefExpr 0x564387b8bec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| `-CompoundStmt 0x564387b8bf68 <col:12>
|-CXXConstructorDecl 0x564387b896e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564387b896e8
| `-ParmVarDecl 0x564387b897f8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x564387b90cb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564387b9a6b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564387b9a7c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x564387b9ace0 <col:12>
|   |-BinaryOperator 0x564387b9aaf8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564387b9aab0 <col:12> 'const char *' lvalue ->data 0x564387b84b90
|   | | `-CXXThisExpr 0x564387b9aaa0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564387b9aae0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x564387b9aa70 <col:12> 'const char *const' lvalue .data 0x564387b84b90
|   |     `-DeclRefExpr 0x564387b9aa50 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564387b9abc0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x564387b9ab78 <col:12> 'int' lvalue ->length 0x564387b84bf8
|   | | `-CXXThisExpr 0x564387b9ab68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564387b9aba8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x564387b9ab38 <col:12> 'const int' lvalue .length 0x564387b84bf8
|   |     `-DeclRefExpr 0x564387b9ab18 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564387b9ac88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x564387b9ac40 <col:12> 'String::memo_t *' lvalue ->memo 0x564387b84c88
|   | | `-CXXThisExpr 0x564387b9ac30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564387b9ac70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x564387b9ac00 <col:12> 'String::memo_t *const' lvalue .memo 0x564387b84c88
|   |     `-DeclRefExpr 0x564387b9abe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x564387b9acd0 <col:12>
|     `-UnaryOperator 0x564387b9acb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387b9aca8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x564387b9a838 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564387b9a838
  `-ParmVarDecl 0x564387b9a948 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387b7a810 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564387b7a928 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x564387b7a9b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x564387b7a9f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56438784adc0 'const char *'
|   `-QualType 0x56438784a311 'const char' const
|     `-BuiltinType 0x56438784a310 'char'
|-TypedefDecl 0x564387b7aa80 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x564387b7aa50 'String::const_iterator' sugar
|   |-Typedef 0x564387b7a9f8 'const_iterator'
|   `-PointerType 0x56438784adc0 'const char *'
|     `-QualType 0x56438784a311 'const char' const
|       `-BuiltinType 0x56438784a310 'char'
|-TypedefDecl 0x564387b7abf0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x564387b7ab60 'int (String::*)() const'
|   |-RecordType 0x564387b7a8a0 'String'
|   | `-CXXRecord 0x564387b7a810 'String'
|   `-ParenType 0x564387b7ab00 'int () const' sugar
|     `-FunctionProtoType 0x564387b50640 'int () const' const cdecl
|       `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387b7ac58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56438799f8d0 'int64_t' sugar
|   |-Typedef 0x5643878b32d0 'int64_t'
|   `-TypedefType 0x56438788c4d0 '__int64_t' sugar
|     |-Typedef 0x56438788c0a8 '__int64_t'
|     `-BuiltinType 0x56438784a390 'long'
|-TypedefDecl 0x564387b7acc0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56438799f7f0 'uint64_t' sugar
|   |-Typedef 0x5643878b3470 'uint64_t'
|   `-TypedefType 0x56438788c560 '__uint64_t' sugar
|     |-Typedef 0x56438788c118 '__uint64_t'
|     `-BuiltinType 0x56438784a430 'unsigned long'
|-TypedefDecl 0x564387b7ad50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x564387b7ad20 'String::intmax_t' sugar
|   |-Typedef 0x564387b7ac58 'intmax_t'
|   `-TypedefType 0x56438799f8d0 'int64_t' sugar
|     |-Typedef 0x5643878b32d0 'int64_t'
|     `-TypedefType 0x56438788c4d0 '__int64_t' sugar
|       |-Typedef 0x56438788c0a8 '__int64_t'
|       `-BuiltinType 0x56438784a390 'long'
|-TypedefDecl 0x564387b7ade0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x564387b7adb0 'String::uintmax_t' sugar
|   |-Typedef 0x564387b7acc0 'uintmax_t'
|   `-TypedefType 0x56438799f7f0 'uint64_t' sugar
|     |-Typedef 0x5643878b3470 'uint64_t'
|     `-TypedefType 0x56438788c560 '__uint64_t' sugar
|       |-Typedef 0x56438788c118 '__uint64_t'
|       `-BuiltinType 0x56438784a430 'unsigned long'
|-CXXConstructorDecl 0x564387b7aea0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x564387b7b048 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x564387b7af88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x564387b7b1f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x564387b7b138 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x564387b7b350 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x564387b7b2c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x564387b7b568 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x564387b7b418 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x564387b7b498 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x564387b7b788 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x564387b7b638 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x564387b7b6b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x564387b7b9a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564387b7b858 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x564387b7b8d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x564387b7bbc8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x564387b7ba78 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x564387b7baf8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x564387b7bd58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x564387b7bc90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x564387b7bed8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x564387b7be18 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x564387b7c068 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x564387b7bfa0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x564387b7c1c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x564387b7c130 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x564387b7c318 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x564387b7c288 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x564387b7c470 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x564387b7c3e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x564387b7c5f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x564387b7c538 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x564387b7c788 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x564387b7c6c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x564387b7c918 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x564387b7c850 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x564387b7caa8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x564387b7c9e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x564387b7cba0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x564387b7ccc8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x564387b7ce48 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x564387b7cd80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x564387b7cf98 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x564387b7cf08 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x564387b7d040 <col:63> "" ""
|-CXXMethodDecl 0x564387b7d188 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x564387b7d0c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x564387b7d398 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x564387b7d248 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x564387b7d2c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x564387b7d5b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x564387b7d460 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x564387b7d4e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x564387b7d898 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x564387b7d678 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x564387b7d6f8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x564387b86cf0 <col:55> 'int' 10
| `-ParmVarDecl 0x564387b7d770 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564387b86d10 <col:76> 'bool' true
|-CXXMethodDecl 0x564387b7db78 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x564387b7d960 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x564387b7d9e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x564387b86d20 <col:56> 'int' 10
| `-ParmVarDecl 0x564387b7da58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564387b86d40 <col:77> 'bool' true
|-CXXMethodDecl 0x564387b7dc80 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x564387b7dd48 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x564387b7de10 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x564387b7deb0 <col:20>
| `-OptimizeNoneAttr 0x564387b7df08 <col:30>
|-CXXConversionDecl 0x564387b7dff8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x564387b7e0c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x564387b7e188 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x564387b7e278 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564387b7e338 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564387b7f518 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x564387b7f450 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x564387b7f668 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x564387b7f5d8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x564387b7f758 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x564387b7f818 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x564387b7fa68 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x564387b7f8d0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x564387b7f950 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x564387b7fcc8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x564387b7fb30 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x564387b7fbb0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x564387b7fd98 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x564387b7ffa8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x564387b7fe50 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x564387b7fed0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x564387b801c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x564387b80070 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x564387b800f0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x564387b80358 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x564387b80290 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x564387b80448 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x564387b805b8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x564387b804f8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564387b807c8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x564387b80678 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564387b806f8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564387b809e0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x564387b80888 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x564387b80900 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x564387b80b70 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x564387b80aa0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564387b80d90 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x564387b80c30 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x564387b80cb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564387b80ee0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x564387b80e50 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x564387b810b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x564387b80fa0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564387b81020 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x564387b81208 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x564387b81178 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x564387b81420 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x564387b812c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x564387b81340 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x564387b86d50 <col:39> 'int' 0
|-CXXMethodDecl 0x564387b81640 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x564387b814e0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x564387b81560 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x564387b86d70 <col:48> 'int' 0
|-CXXMethodDecl 0x564387b81820 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x564387b81700 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x564387b81780 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x564387b86d90 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x564387b818f0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x564387b819b0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x564387b81a70 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x564387b81b30 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x564387b81bf0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x564387b81d98 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x564387b81ca0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x564387b81f18 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x564387b81e50 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x564387b82098 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x564387b81fd8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x564387b82218 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x564387b82150 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x564387b82360 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x564387b822d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564387b824b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x564387b82420 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x564387b82688 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x564387b82570 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564387b825f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564387b82868 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564387b82750 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x564387b827d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x564387b829b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x564387b82928 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x564387b82bc8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x564387b82a78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x564387b82af8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x564387b82d28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x564387b82c90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564387b82e80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x564387b82de8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x564387b82f28 <col:57> "" ""
|-CXXMethodDecl 0x564387b83038 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x564387b82fa8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x564387b83188 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x564387b830f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x564387b83308 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x564387b83240 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x564387b834d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x564387b83590 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x564387b83650 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x564387b836f0 <col:49> "" ""
|-CXXMethodDecl 0x564387b83780 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x564387b83840 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x564387b83930 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x564387b839f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x564387b83ab8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x564387b83b78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x564387b83c70 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x564387b83d38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x564387b83e00 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x564387b83fd8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x564387b83eb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x564387b83f38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x564387b84200 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x564387b840a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x564387b84120 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x564387b84310 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x564387b84378 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x564387b843a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x564387b844b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x564387b84558 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x564387b845b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x564387b84618 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x564387b846c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x564387b84730 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x564387b84968 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x564387b849b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387b84948 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x564387b84858 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x564387b84800 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x564387b84840 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x564387b84820 <col:32> 'int' 8
|-CXXRecordDecl 0x564387b849d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564387b84ae8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x564387b84b90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x564387b84bf8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x564387b84c88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x564387b87220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564387b89868 <col:12>
| |-CXXConstructorDecl 0x564387b87328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564387b87438 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564387b84b90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x564387b8bdf0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x564387b8bdc0 <col:12> 'const char *const' lvalue .data 0x564387b84b90
| | |     `-DeclRefExpr 0x564387b8bda0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564387b84bf8 'length' 'int'
| | | `-ImplicitCastExpr 0x564387b8be80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x564387b8be50 <col:12> 'const int' lvalue .length 0x564387b84bf8
| | |     `-DeclRefExpr 0x564387b8be30 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564387b84c88 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x564387b8bf10 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x564387b8bee0 <col:12> 'String::memo_t *const' lvalue .memo 0x564387b84c88
| | |     `-DeclRefExpr 0x564387b8bec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b87438 '' 'const String::rep_t &'
| | `-CompoundStmt 0x564387b8bf68 <col:12>
| |-CXXConstructorDecl 0x564387b896e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564387b896e8
| | `-ParmVarDecl 0x564387b897f8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x564387b90cb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x564387b9a6b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564387b9a7c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x564387b9ace0 <col:12>
| |   |-BinaryOperator 0x564387b9aaf8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x564387b9aab0 <col:12> 'const char *' lvalue ->data 0x564387b84b90
| |   | | `-CXXThisExpr 0x564387b9aaa0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564387b9aae0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x564387b9aa70 <col:12> 'const char *const' lvalue .data 0x564387b84b90
| |   |     `-DeclRefExpr 0x564387b9aa50 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564387b9abc0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x564387b9ab78 <col:12> 'int' lvalue ->length 0x564387b84bf8
| |   | | `-CXXThisExpr 0x564387b9ab68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564387b9aba8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x564387b9ab38 <col:12> 'const int' lvalue .length 0x564387b84bf8
| |   |     `-DeclRefExpr 0x564387b9ab18 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564387b9ac88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x564387b9ac40 <col:12> 'String::memo_t *' lvalue ->memo 0x564387b84c88
| |   | | `-CXXThisExpr 0x564387b9ac30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564387b9ac70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x564387b9ac00 <col:12> 'String::memo_t *const' lvalue .memo 0x564387b84c88
| |   |     `-DeclRefExpr 0x564387b9abe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564387b9a7c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x564387b9acd0 <col:12>
| |     `-UnaryOperator 0x564387b9acb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564387b9aca8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x564387b9a838 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564387b9a838
|   `-ParmVarDecl 0x564387b9a948 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x564387b84d00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x564387b84f48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x564387b84d68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x564387b84de8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x564387b84e60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x564387b871e0 <col:79, line:261:5>
|   |-BinaryOperator 0x564387b86e58 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564387b86df0 <col:2, col:5> 'const char *' lvalue .data 0x564387b84b90
|   | | `-MemberExpr 0x564387b86dc0 <col:2> 'String::rep_t' lvalue ->_r 0x564387b84d00
|   | |   `-CXXThisExpr 0x564387b86db0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564387b86e40 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564387b86e20 <col:12> 'const char *' lvalue ParmVar 0x564387b84d68 'data' 'const char *'
|   |-BinaryOperator 0x564387b86f20 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x564387b86eb8 <col:2, col:5> 'int' lvalue .length 0x564387b84bf8
|   | | `-MemberExpr 0x564387b86e88 <col:2> 'String::rep_t' lvalue ->_r 0x564387b84d00
|   | |   `-CXXThisExpr 0x564387b86e78 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564387b86f08 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564387b86ee8 <col:14> 'int' lvalue ParmVar 0x564387b84de8 'length' 'int'
|   `-IfStmt 0x564387b871c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x564387b87040 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564387b87028 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x564387b87008 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x564387b86fe8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x564387b86f80 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x564387b84c88
|     |       | `-MemberExpr 0x564387b86f50 <col:7> 'String::rep_t' lvalue ->_r 0x564387b84d00
|     |       |   `-CXXThisExpr 0x564387b86f40 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x564387b86fd0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x564387b86fb0 <col:17> 'String::memo_t *' lvalue ParmVar 0x564387b84e60 'memo' 'String::memo_t *'
|     `-CallExpr 0x564387b871a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x564387b87188 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564387b87090 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x564387b73488 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x564387b870f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564387b84558
|         `-ImplicitCastExpr 0x564387b870e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x564387b870c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x564387b84e60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x564387b851f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x564387b85018 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x564387b85098 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x564387b85110 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x564387b84d00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x564387b89878 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564387b89a08 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x564387b89970 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x564387b898e0 <col:2> '<bound member function type>' ->assign_memo 0x564387b84f48
|     | `-ImplicitCastExpr 0x564387b899a8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x564387b898d0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x564387b899c0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x564387b89910 <col:14> 'const char *' lvalue ParmVar 0x564387b85018 'data' 'const char *'
|     |-ImplicitCastExpr 0x564387b899d8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564387b89930 <col:20> 'int' lvalue ParmVar 0x564387b85098 'length' 'int'
|     `-ImplicitCastExpr 0x564387b899f0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x564387b89950 <col:28> 'String::memo_t *' lvalue ParmVar 0x564387b85110 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x564387b85388 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x564387b852c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x564387b89c60 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x564387b89be0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x564387b89a30 <col:2> '<bound member function type>' ->assign_memo 0x564387b84f48
|     | `-CXXThisExpr 0x564387b89a20 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x564387b89c18 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x564387b89ab0 <col:14, col:19> 'const char *' lvalue .data 0x564387b84b90
|     |   `-MemberExpr 0x564387b89a80 <col:14, col:16> 'String::rep_t' lvalue ._r 0x564387b84d00
|     |     `-DeclRefExpr 0x564387b89a60 <col:14> 'const String' lvalue ParmVar 0x564387b852c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x564387b89c30 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x564387b89b30 <col:25, col:30> 'int' lvalue .length 0x564387b84bf8
|     |   `-MemberExpr 0x564387b89b00 <col:25, col:27> 'String::rep_t' lvalue ._r 0x564387b84d00
|     |     `-DeclRefExpr 0x564387b89ae0 <col:25> 'const String' lvalue ParmVar 0x564387b852c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x564387b89c48 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x564387b89bb0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x564387b84c88
|         `-MemberExpr 0x564387b89b80 <col:38, col:40> 'String::rep_t' lvalue ._r 0x564387b84d00
|           `-DeclRefExpr 0x564387b89b60 <col:38> 'const String' lvalue ParmVar 0x564387b852c8 'x' 'const String &'
|-CXXMethodDecl 0x564387b85450 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x564387b8a620 <col:31, line:278:5>
|   `-IfStmt 0x564387b8a608 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x564387b89d00 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564387b89ce8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x564387b89cb8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564387b84c88
|     |     `-MemberExpr 0x564387b89c88 <col:6> 'String::rep_t' lvalue ->_r 0x564387b84d00
|     |       `-CXXThisExpr 0x564387b89c78 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x564387b8a5e0 <col:15, line:277:2>
|       |-ParenExpr 0x564387b8a1b0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x564387b8a180 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x564387b89e10 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x564387b89df8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x564387b89de0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x564387b89da0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564387b84558
|       |   |       `-ImplicitCastExpr 0x564387b89d88 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x564387b89d58 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x564387b84c88
|       |   |           `-MemberExpr 0x564387b89d28 <col:27> 'String::rep_t' lvalue ->_r 0x564387b84d00
|       |   |             `-CXXThisExpr 0x564387b89d18 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x564387b89e70 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x564387b89e50 <col:54> 'int' 0
|       |   `-CallExpr 0x564387b8a0e0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x564387b8a0c8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564387b8a048 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x564387b8a120 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564387b89f58 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x564387b8a138 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564387b89f88 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x564387b8a150 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x564387b89fc0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x564387b8a168 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x564387b8a030 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x564387b8a018 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x564387b89fe0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x564387b8a500 <line:274:6, line:275:22>
|       | |-CallExpr 0x564387b8a3c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x564387b8a3a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x564387b8a320 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x564387b768f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x564387b8a2f0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564387b84558
|       | |   `-ImplicitCastExpr 0x564387b8a2d8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x564387b8a2a8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x564387b84c88
|       | |       `-MemberExpr 0x564387b8a278 <col:40> 'String::rep_t' lvalue ->_r 0x564387b84d00
|       | |         `-CXXThisExpr 0x564387b8a268 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x564387b8a4c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x564387b8a4a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x564387b8a3e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x564387b86128 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x564387b8a4e8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x564387b8a448 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x564387b84c88
|       |       `-MemberExpr 0x564387b8a418 <col:15> 'String::rep_t' lvalue ->_r 0x564387b84d00
|       |         `-CXXThisExpr 0x564387b8a408 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x564387b8a5c0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x564387b8a558 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564387b84c88
|         | `-MemberExpr 0x564387b8a528 <col:6> 'String::rep_t' lvalue ->_r 0x564387b84d00
|         |   `-CXXThisExpr 0x564387b8a518 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x564387b8a5a8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x564387b8a588 <col:16> 'int' 0
|-CXXMethodDecl 0x564387b856e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x564387b85508 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564387b85588 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564387b85600 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x564387b857c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x564387b85a10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x564387b85878 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564387b858f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564387b85970 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x564387b85bf8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x564387b85ae0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x564387b85b60 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x564387b85cf8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x564387b8a6f8 <col:41, line:286:5>
|   `-ReturnStmt 0x564387b8a6e8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x564387b8a6b8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x564387b8a680 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x564387b8a668 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x564387b8a648 <col:46> 'int' 1
|-CXXMethodDecl 0x564387b85f98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x564387b85db0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x564387b85e30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x564387b85eb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x564387b86128 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x564387b86060 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x564387b861f8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x564387b863c8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x564387b862b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564387b86330 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x564387b86488 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x564387b86550 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x564387b86658 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x564387b866d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x564387b86748 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x564387b867b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x564387b868b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x564387b86900 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387b86890 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x564387b86870 <col:22> 'int' 14
|-CXXMethodDecl 0x564387b86b18 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x564387b86930 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x564387b869b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x564387b86a30 <col:43> col:46 'int'
|-FriendDecl 0x564387b86c20 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x564387b86cb0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387df3e50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x564387df4028 prev 0x564387df3e50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564387df40b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x564387df40e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387df5a40 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x564387df59f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x564387df59d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x564387df42f8 'type'
|     `-SubstTemplateTypeParmType 0x564387df42c0 'String' sugar
|       |-TemplateTypeParmType 0x564387b3fc20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b3fbd0 'T'
|       `-RecordType 0x564387b7a8a0 'String'
|         `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387df5af8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x564387df5ac0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x564387df5aa0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564387df5a40 'type'
|     `-ElaboratedType 0x564387df59f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x564387df59d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x564387df42f8 'type'
|         `-SubstTemplateTypeParmType 0x564387df42c0 'String' sugar
|           |-TemplateTypeParmType 0x564387b3fc20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564387b3fbd0 'T'
|           `-RecordType 0x564387b7a8a0 'String'
|             `-CXXRecord 0x564387b7a810 'String'
|-CXXMethodDecl 0x564387df5c78 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x564387df5b88 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x564387df5d68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564387df5e48 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x564387df5e48
|-CXXMethodDecl 0x564387df6118 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564387df6020 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x564387df6358 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564387df61d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387df6248 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfa590 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564387dfa480 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387dfa4f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfa6e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564387dfa7b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564387dfaa08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564387dfa878 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564387dfa8f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfac68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x564387dfaad8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564387dfab50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfae28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564387dfad38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfafe8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564387dfaef0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfb0a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564387dfb150 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564387dfb388 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564387dfb200 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387dfb278 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564387dfb628 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564387dfb530 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x564387dfb6f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x564387dfb740 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564387dfb790 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387dae5d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x564387df28b8 prev 0x564387dae5d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564387df3dc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x564387df3d70 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x564387df3d50 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564387df3c00 'type'
|     `-SubstTemplateTypeParmType 0x564387df3a90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x564387b140b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x564387b14058 'F'
|       `-RecordType 0x564387df36f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x564387df3610 'typed_array_memory'
|-FieldDecl 0x564387dfb7e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x564387dfb830 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564387dfb868 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|   |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564387b4d3a8 'T'
|   `-RecordType 0x564387b7a8a0 'String'
|     `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfb8f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x564387dfb8c0 'String &'
|   `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-RecordType 0x564387b7a8a0 'String'
|       `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfb988 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x564387dfb950 'const String &'
|   `-QualType 0x564387df2951 'const String' const
|     `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-RecordType 0x564387b7a8a0 'String'
|         `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfba18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x564387dfb9e0 'String *'
|   `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-RecordType 0x564387b7a8a0 'String'
|       `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfbaa8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x564387dfba70 'const String *'
|   `-QualType 0x564387df2951 'const String' const
|     `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-RecordType 0x564387b7a8a0 'String'
|         `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfc700 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x564387dfc6b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x564387dfc690 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x564387dfc5c8 'type'
|     `-LValueReferenceType 0x564387dfc590 'const String &'
|       `-QualType 0x564387dfc331 'const String' const
|         `-SubstTemplateTypeParmType 0x564387dfc330 'String' sugar
|           |-TemplateTypeParmType 0x564387b1f120 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564387b1f0c8 'T'
|           `-RecordType 0x564387b7a8a0 'String'
|             `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfc768 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x564387dfb950 'const String &'
|   `-QualType 0x564387df2951 'const String' const
|     `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-RecordType 0x564387b7a8a0 'String'
|         `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfc7c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387dfc828 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x564387dfb9e0 'String *'
|   `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-RecordType 0x564387b7a8a0 'String'
|       `-CXXRecord 0x564387b7a810 'String'
|-TypedefDecl 0x564387dfc890 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x564387dfba70 'const String *'
|   `-QualType 0x564387df2951 'const String' const
|     `-SubstTemplateTypeParmType 0x564387df2950 'String' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-RecordType 0x564387b7a8a0 'String'
|         `-CXXRecord 0x564387b7a810 'String'
|-EnumDecl 0x564387dfc8e8 <line:134:5> col:5
| `-EnumConstantDecl 0x564387dfc9e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564387dfc9c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564387b4e5c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564387b4e5a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564387b4e580 <col:40> 'int' 1
|-CXXConstructorDecl 0x564387dfca68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564387dfccf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564387dfcb20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387dfcbc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x564387dfcf88 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x564387dfce70 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x564387dfd248 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x564387dfd130 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x564387dfd560 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x564387dfd440 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x564387dfd870 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x564387dfd750 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x564387dfdb60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564387dfd9a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387dfda20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564387dfdc88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564387dfdd38 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfdd90 <col:30> Inherited
|-CXXMethodDecl 0x564387dfddd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564387dfde88 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfdee0 <col:30> Inherited
|-CXXMethodDecl 0x564387dfdfa8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564387dfe058 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfe0b0 <col:30> Inherited
|-CXXMethodDecl 0x564387dfe0f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564387dfe1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfe200 <col:30> Inherited
|-CXXMethodDecl 0x564387dfe248 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564387dfe2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfe350 <col:30> Inherited
|-CXXMethodDecl 0x564387dfe398 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564387dfe448 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387dfe4a0 <col:30> Inherited
|-CXXMethodDecl 0x564387dfe4c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564387dfe578 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564387dfe628 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564387dfe7e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564387dfe6d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387dfe750 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564387dfe938 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564387dfe8a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387dfeae8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x564387dfe9f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564387dfeba0 <col:20>
| `-OptimizeNoneAttr 0x564387dfebf8 <col:30>
|-CXXMethodDecl 0x564387dfed18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x564387dfec20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564387dfedd0 <col:20>
| `-OptimizeNoneAttr 0x564387dfee28 <col:30>
|-CXXMethodDecl 0x564387dfeee0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564387dfee50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387dff028 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564387dfef98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387dff158 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x564387dff258 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x564387dff328 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x564387dff3f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x564387dff538 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564387dff4a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387dff680 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564387dff5f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387dff7c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x564387dff738 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564387dff880 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564387dff980 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564387dff8f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564387dffa38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564387dffaf8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x564387dffbf8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x564387dffd78 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564387dffcb8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x564387e00538 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564387dffe30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x564387e00498 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x564387e00398 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x564387e00618 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564387e00768 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564387e006d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564387e00820 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564387e00a68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564387e008e0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564387e00958 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564387e00bf8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x564387e00b38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564387e00e08 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x564387e00cc0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564387e00d38 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564387e00ec8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564387e01128 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x564387e01030 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x564387e011f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x564387e011f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e7bdf8 prev 0x564387d2c448 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564387e7bef0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x564387e7bf80 <col:22, col:28> col:22 public
|-EnumDecl 0x564387e7bfa8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x564387e7c0c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c0a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x564387e7c090 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564387e7c070 <col:14> 'int' 999
| |-EnumConstantDecl 0x564387e7c170 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c150 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x564387e7c138 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564387e7c118 <col:14> 'int' 1
| |-EnumConstantDecl 0x564387e7c200 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c1e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x564387e7c1c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x564387e7c290 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c270 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x564387e7c250 <col:13> 'int' 1
| |-EnumConstantDecl 0x564387e7c320 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c300 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x564387e7c2e0 <col:16> 'int' 2
| |-EnumConstantDecl 0x564387e7c3b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c390 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x564387e7c370 <col:13> 'int' 3
| |-EnumConstantDecl 0x564387e7c440 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c420 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x564387e7c400 <col:15> 'int' 4
| |-EnumConstantDecl 0x564387e7c4d0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c4b0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x564387e7c490 <col:14> 'int' 5
| |-EnumConstantDecl 0x564387e7c560 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x564387e7c540 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x564387e7c520 <col:12> 'int' 6
| `-EnumConstantDecl 0x564387e7c5f0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x564387e7c5d0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x564387e7c5b0 <col:13> 'int' 7
|-VarDecl 0x564387e7c660 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x564387e7c6e8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x564387e7c770 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x564387e7c7f8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x564387e7c880 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x564387e7c908 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x564387e7c990 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x564387e7ca18 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x564387e7caa0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x564387e7cb28 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x564387e7cbb0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x564387e7ccb0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x564387e82008 '_nerrors' 'int'
| | `-IntegerLiteral 0x564387e82798 <line:128:13> 'int' 0
| `-CompoundStmt 0x564387e82808 <col:16, line:129:5>
|-CXXDestructorDecl 0x564387e7cda0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x564387e82818 <col:29, line:132:5>
|-CXXMethodDecl 0x564387e7cf58 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x564387e7ce90 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387e7d020 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564387e7d108 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564387e82870 <col:44, line:161:5>
|   `-ReturnStmt 0x564387e82860 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x564387e82848 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564387e82828 <col:9> 'ErrorHandler *' lvalue Var 0x564387e82068 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x564387e7d248 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x564387e7d1b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564387e7d310 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564387e828d0 <col:43, line:173:5>
|   `-ReturnStmt 0x564387e828c0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x564387e828a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564387e82888 <col:9> 'ErrorHandler *' lvalue Var 0x564387e820e0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x564387e7d3c8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x564387e7d448 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x564387e7d558 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x564387e7d4c8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564387e7d6a8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x564387e7d618 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564387e7d800 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x564387e7d768 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x564387e7d958 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x564387e7d8c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564387e7dab0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x564387e7da18 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564387e7dcc0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564387e7db68 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x564387e7dbe8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x564387e7de98 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564387e7dd80 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x564387e7de00 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x564387e7e0b8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564387e7df58 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x564387e7dfd8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x564387e7e298 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564387e7e178 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564387e7e1f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564387e7e478 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564387e7e358 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564387e7e3d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564387e7e600 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x564387e7e538 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x564387e7e7d0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x564387e7e6b8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564387e7e730 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x564387e82b28 <col:57, line:234:5>
|   `-ReturnStmt 0x564387e82b18 <line:233:2, col:41>
|     `-ExprWithCleanups 0x564387e82b00 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564387e82aa8 <col:9, col:41> 'int'
|         |-MemberExpr 0x564387e82a78 <col:9> '<bound member function type>' ->xmessage 0x564387e7e600
|         | `-CXXThisExpr 0x564387e82a68 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x564387e82ae8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564387e82ad0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564387e82a48 <col:18, col:40> 'String' (CXXTemporary 0x564387e82a48)
|               `-CallExpr 0x564387e82a10 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x564387e829f8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x564387e82970 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564387e807c8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x564387e82990 <col:31> 'const String' lvalue ParmVar 0x564387e7e730 'str' 'const String &'
|                 `-DeclRefExpr 0x564387e829b0 <col:36> 'const String' lvalue ParmVar 0x564387e7e6b8 'anno' 'const String &'
|-CXXMethodDecl 0x564387e7eab0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564387e7e890 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564387e7e910 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x564387e7e988 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564387e82db8 <col:68, line:243:5>
|   `-ReturnStmt 0x564387e82da8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x564387e82d90 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564387e82d30 <col:9, col:41> 'int'
|         |-MemberExpr 0x564387e82d00 <col:9> '<bound member function type>' ->xmessage 0x564387e7e7d0
|         | `-CXXThisExpr 0x564387e82cf0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564387e82bc8 <col:18> 'const String' lvalue ParmVar 0x564387e7e890 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564387e82d78 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564387e82d60 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564387e82cd0 <col:24, col:40> 'String' (CXXTemporary 0x564387e82cd0)
|               `-CXXMemberCallExpr 0x564387e82c68 <col:24, col:40> 'String'
|                 |-MemberExpr 0x564387e82bf8 <col:24> '<bound member function type>' ->vformat 0x564387e7fc90
|                 | `-CXXThisExpr 0x564387e82be8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564387e82c98 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564387e82c28 <col:32> 'const char *' lvalue ParmVar 0x564387e7e910 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564387e82cb0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564387e82c48 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564387e7e988 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564387e7ed50 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x564387e7eb78 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564387e7ebf0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564387e7ec68 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x564387e830f8 <col:23, line:254:5>
|   `-ReturnStmt 0x564387e830e8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x564387e830d0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x564387e83070 <col:9, col:71> 'int'
|         |-MemberExpr 0x564387e83040 <col:9> '<bound member function type>' ->xmessage 0x564387e7e7d0
|         | `-CXXThisExpr 0x564387e83030 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x564387e830b8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x564387e830a0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x564387e82ff0 <col:18, col:65> 'String' (CXXTemporary 0x564387e82ff0)
|         |     `-CallExpr 0x564387e82f88 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x564387e82f70 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x564387e82e58 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564387e807c8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x564387e82e78 <col:31> 'const String' lvalue ParmVar 0x564387e7ebf0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x564387e82fd0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x564387e82fb8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x564387e82f50 <col:37, col:64> 'String' (CXXTemporary 0x564387e82f50)
|         |             `-CallExpr 0x564387e82f20 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x564387e82f08 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x564387e82e98 <col:37> 'String (const String &)' lvalue CXXMethod 0x564387e80e18 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x564387e82eb8 <col:56> 'const String' lvalue ParmVar 0x564387e7eb78 'landmark' 'const String &'
|         `-DeclRefExpr 0x564387e83010 <col:68> 'const String' lvalue ParmVar 0x564387e7ec68 'str' 'const String &'
|-CXXMethodDecl 0x564387e7f0d0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564387e7ee18 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564387e7ee90 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564387e7ef10 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x564387e7ef88 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564387e833b0 <col:34, line:267:5>
|   `-ReturnStmt 0x564387e833a0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x564387e83388 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x564387e83320 <col:9, col:51> 'int'
|         |-MemberExpr 0x564387e832f0 <col:9> '<bound member function type>' ->xmessage 0x564387e7ed50
|         | `-CXXThisExpr 0x564387e832e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564387e83198 <col:18> 'const String' lvalue ParmVar 0x564387e7ee18 'landmark' 'const String &'
|         |-DeclRefExpr 0x564387e831b8 <col:28> 'const String' lvalue ParmVar 0x564387e7ee90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564387e83370 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x564387e83358 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564387e832c0 <col:34, col:50> 'String' (CXXTemporary 0x564387e832c0)
|               `-CXXMemberCallExpr 0x564387e83258 <col:34, col:50> 'String'
|                 |-MemberExpr 0x564387e831e8 <col:34> '<bound member function type>' ->vformat 0x564387e7fc90
|                 | `-CXXThisExpr 0x564387e831d8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564387e83288 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564387e83218 <col:42> 'const char *' lvalue ParmVar 0x564387e7ef10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564387e832a0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564387e83238 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564387e7ef88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564387e7f1e0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x564387e83430 <col:25, line:288:5>
|   `-ReturnStmt 0x564387e83420 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x564387e83408 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x564387e833d8 <col:9> 'const int' lvalue ->_nerrors 0x564387e82008
|         `-CXXThisExpr 0x564387e833c8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x564387e7f3f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x564387e7f298 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x564387e7f318 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x564387e7f6d8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564387e7f4b8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x564387e7f538 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x564387e7f5b0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564387e7f870 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x564387e7f7a8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x564387e7fab8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564387e7f930 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x564387e7f9a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564387e83690 <col:58, line:357:5>
|   `-ReturnStmt 0x564387e83680 <line:356:2, col:29>
|     `-ExprWithCleanups 0x564387e83668 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x564387e83638 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x564387e83620 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x564387e83600 <col:9, col:29> 'String' (CXXTemporary 0x564387e83600)
|             `-CallExpr 0x564387e83590 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x564387e83578 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564387e834f8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x564387e7f6d8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x564387e83498 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x564387e835c8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x564387e834b8 <col:21> 'const char *' lvalue ParmVar 0x564387e7f930 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x564387e835e0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x564387e834d8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564387e7f9a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564387e7fc90 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x564387e7fb80 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x564387e7fbf8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564387e7fde8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x564387e7fd58 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x564387e7ff30 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x564387e7fea0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x564387e801d0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x564387e7ffe8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x564387e80068 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x564387e800e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x564387e80330 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x564387e802a0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x564387e837a8 <col:37, line:441:5>
|   `-IfStmt 0x564387e83790 <line:439:2, line:440:8>
|     |-BinaryOperator 0x564387e83718 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x564387e836e8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x564387e836a8 <col:6> 'int' lvalue ParmVar 0x564387e802a0 'level' 'int'
|     | `-ImplicitCastExpr 0x564387e83700 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x564387e836c8 <col:15> 'ErrorHandler::Level' EnumConstant 0x564387e7c3b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x564387e83778 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x564387e83748 <col:8> 'int' lvalue ->_nerrors 0x564387e82008
|         `-CXXThisExpr 0x564387e83738 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x564387e803f8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x564387e83840 <col:26, line:448:5>
|   `-BinaryOperator 0x564387e83820 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x564387e837d0 <col:2> 'int' lvalue ->_nerrors 0x564387e82008
|     | `-CXXThisExpr 0x564387e837c0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x564387e83800 <col:13> 'int' 0
|-CXXMethodDecl 0x564387e805c0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x564387e804b0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x564387e80528 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x564387e807c8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x564387e80680 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x564387e806f8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x564387e80a78 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x564387e80888 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x564387e80908 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x564387e80988 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x564387e80b30 <col:59> 0 0
|-CXXMethodDecl 0x564387e80cc8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x564387e80ba8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x564387e80c28 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x564387e83eb0 <col:70, line:534:5>
|   |-DeclStmt 0x564387e839b0 <line:528:2, col:20>
|   | |-VarDecl 0x564387e83868 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x564387e838d0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x564387e83908 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x564387e83970 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x564387e83a80 <line:529:2, col:23>
|   | `-VarDecl 0x564387e839e0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x564387e83a68 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x564387e83a48 <col:18> 'const char *' lvalue ParmVar 0x564387e80ba8 'begin' 'const char *'
|   |-DoStmt 0x564387e83e48 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x564387e83d78 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x564387e83d60 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x564387e83d40 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x564387e83a98 <col:6> 'const char *' lvalue Var 0x564387e839e0 'x' 'const char *'
|   | |     `-CallExpr 0x564387e83c90 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x564387e83c78 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x564387e83c30 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x564387e824e0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x564387e83cf8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x564387e83ce0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x564387e83b50 <col:20, col:27> 'String' (CXXTemporary 0x564387e83b50)
|   | |       |     `-CXXTemporaryObjectExpr 0x564387e83b18 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x564387e83d10 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564387e83b70 <col:30> 'const char *' lvalue Var 0x564387e839e0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x564387e83d28 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564387e83b90 <col:33> 'const char *' lvalue ParmVar 0x564387e80c28 'end' 'const char *'
|   | |       |-UnaryOperator 0x564387e83bd0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564387e83bb0 <col:39> 'String' lvalue Var 0x564387e83868 'name' 'String'
|   | |       |-UnaryOperator 0x564387e83c08 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564387e83be8 <col:46> 'String' lvalue Var 0x564387e83908 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x564387e83c20 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x564387e83e30 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x564387e83e18 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x564387e83df8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x564387e83dc8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|   |         `-ImplicitCastExpr 0x564387e83db0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x564387e83d90 <col:11> 'String' lvalue Var 0x564387e83868 'name' 'String'
|   `-ReturnStmt 0x564387e83ea0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x564387e83e88 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x564387e83e68 <col:9> 'const char *' lvalue Var 0x564387e839e0 'x' 'const char *'
|-CXXMethodDecl 0x564387e80e18 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x564387e80d88 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x564387e844b8 <col:55, line:550:5>
|   `-IfStmt 0x564387e84490 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x564387e840f0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x564387e840d8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564387e840c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564387e840a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564387e84070 <col:6> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|     | |       `-DeclRefExpr 0x564387e83f10 <col:6> 'const String' lvalue ParmVar 0x564387e80d88 'x' 'const String &'
|     | `-BinaryOperator 0x564387e84050 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x564387e84020 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x564387e83fd0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x564387e83fb8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x564387e83f70 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x564387b96fb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x564387e83f30 <col:11> 'const String' lvalue ParmVar 0x564387e80d88 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x564387e83f50 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x564387e84038 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x564387e84008 <col:19> 'char' 123
|     |-ReturnStmt 0x564387e84160 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x564387e84130 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x564387e84110 <col:13> 'const String' lvalue ParmVar 0x564387e80d88 'x' 'const String &'
|     `-IfStmt 0x564387e84468 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x564387e841f8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564387e841e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564387e841c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564387e84190 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |       `-DeclRefExpr 0x564387e84170 <col:11> 'const String' lvalue ParmVar 0x564387e80d88 'x' 'const String &'
|       |-ReturnStmt 0x564387e84380 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x564387e84368 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x564387e84338 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x564387e84320 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x564387e84300 <col:13, col:29> 'String' (CXXTemporary 0x564387e84300)
|       |         `-CallExpr 0x564387e842b0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x564387e84298 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x564387e84210 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x564387e805c0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x564387e842e0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x564387e84230 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x564387e84250 <col:28> 'const String' lvalue ParmVar 0x564387e80d88 'x' 'const String &'
|       `-ReturnStmt 0x564387e84458 <line:549:6, col:20>
|         `-ExprWithCleanups 0x564387e84440 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x564387e84410 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x564387e843f8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x564387e843d8 <col:13, col:20> 'String' (CXXTemporary 0x564387e843d8)
|                 `-CXXTemporaryObjectExpr 0x564387e843a0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x564387e80fe0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x564387e80ed0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x564387e80f48 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564387e82788 <col:71> 'bool' false
|-CXXRecordDecl 0x564387e81090 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x564387e81388 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x564387e81320 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x564387e812c0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x564387e81280 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x564387b7a8a0 'String'
|       | `-CXXRecord 0x564387b7a810 'String'
|       |-BuiltinType 0x56438784a370 'int'
|       `-DecayedType 0x564387d2d490 '__va_list_tag *' sugar
|         |-TypedefType 0x564387d2d460 'va_list' sugar
|         | |-Typedef 0x564387a90a60 'va_list'
|         | `-TypedefType 0x564387a90a10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x564387a8b9c8 '__gnuc_va_list'
|         |   `-TypedefType 0x564387a8b930 '__builtin_va_list' sugar
|         |     |-Typedef 0x56438788bbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56438788bb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56438784b0c0 '__va_list_tag'
|         |         `-CXXRecord 0x56438784b028 '__va_list_tag'
|         `-PointerType 0x564387a98370 '__va_list_tag *'
|           `-RecordType 0x56438784b0c0 '__va_list_tag'
|             `-CXXRecord 0x56438784b028 '__va_list_tag'
|-EnumDecl 0x564387e81450 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x564387e81550 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81ab0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81530 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x564387e81510 <col:16> 'int' 1
| |-EnumConstantDecl 0x564387e815e0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81ac8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e815c0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x564387e815a0 <col:21> 'int' 2
| |-EnumConstantDecl 0x564387e81670 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81ae0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81650 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x564387e81630 <col:22> 'int' 4
| |-EnumConstantDecl 0x564387e81700 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81af8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e816e0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x564387e816c0 <col:17> 'int' 8
| |-EnumConstantDecl 0x564387e81790 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81b10 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81770 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x564387e81750 <col:22> 'int' 16
| |-EnumConstantDecl 0x564387e81820 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81b28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81800 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564387e817e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x564387e818b0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81b40 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81890 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x564387e81870 <col:17> 'int' 64
| |-EnumConstantDecl 0x564387e81940 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81b58 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e81920 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x564387e81900 <col:14> 'int' 128
| |-EnumConstantDecl 0x564387e819d0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564387e81b70 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e819b0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x564387e81990 <col:16> 'int' 256
| `-EnumConstantDecl 0x564387e81a60 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x564387e81b88 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387e81a40 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x564387e81a20 <col:12> 'int' 1024
|-CXXMethodDecl 0x564387e81d98 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x564387e81bb0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x564387e81c50 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x564387e81f20 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x564387e81e58 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x564387e81fc8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x564387e82008 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x564387e82068 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x564387e820e0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x564387e824e0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x564387e82158 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x564387e821d8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x564387e82258 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x564387e822d0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x564387e82348 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x564387e823c0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x564387e82608 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x564387e82608
| `-ParmVarDecl 0x564387e82718 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x564387e84818 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x564387e84818
  `-ParmVarDecl 0x564387e84928 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387d2c4d8 prev 0x564387d71078 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387d2c5d0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x564387d2c660 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x564387d2c798 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x564387d2c698 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564387d2dbc0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564387d2dba0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564387d2d738 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564387d2dc50 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564387d2dc10 <col:17> 'ErrorHandler *' lvalue ParmVar 0x564387d2c698 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564387d2d7a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564387d2dcd0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564387d2dc90 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564387d2d800 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564387d2dd10 <col:54> 'bool' false
| `-CompoundStmt 0x564387d2de18 <col:61, line:38:5>
|   `-BinaryOperator 0x564387d2ddf8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x564387d2dd90 <col:9> 'const Element *' lvalue ->_context 0x564387d2d6d8
|     | `-CXXThisExpr 0x564387d2dd80 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x564387d2dde0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x564387d2ddc0 <col:20> 'int' 0
|-CXXConstructorDecl 0x564387d2c9a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564387d2c858 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x564387d2c8d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564387d2dbf8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564387d2dbd8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x564387d2d6d8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x564387d2de70 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x564387d2de30 <col:20> 'const Element *' lvalue ParmVar 0x564387d2c858 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x564387d2d738 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564387d2def0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564387d2deb0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x564387d2c8d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564387d2d7a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564387d2df70 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564387d2df30 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x564387d2d800 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564387d2dfb0 <col:73> 'bool' false
| `-CompoundStmt 0x564387d2e028 <col:80, line:46:5>
|-CXXMethodDecl 0x564387d2cad8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x564387d2e0a0 <col:36, line:51:5>
|   `-ReturnStmt 0x564387d2e090 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x564387d2e078 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x564387d2e048 <col:16> 'const Element *const' lvalue ->_context 0x564387d2d6d8
|         `-CXXThisExpr 0x564387d2e038 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564387d2cbc8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x564387d2e120 <col:32, line:57:5>
|   `-ReturnStmt 0x564387d2e110 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x564387d2e0f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x564387d2e0c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x564387d2d738
|         `-CXXThisExpr 0x564387d2e0b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564387d2cc88 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x564387d2ce10 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x564387d2cd40 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564387d2cf60 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x564387d2ced0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564387d2d0b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x564387d2d020 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564387d2d2b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x564387d2d168 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x564387d2d1e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x564387d2d5e8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x564387d2d378 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x564387d2d3f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x564387d2d4c0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x564387d2d6a0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x564387d2d6d8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x564387d2d738 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x564387d2d7a0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x564387d2d800 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x564387d2d850 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x564387d2d850
| `-ParmVarDecl 0x564387d2d968 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x564387d2da08 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x564387d2da08
| `-ParmVarDecl 0x564387d2db18 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x564387e90180 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387e39650 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x564387e39828 prev 0x564387e39650 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564387e398b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x564387e398e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e3b4b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x564387e3b460 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x564387e39d90 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x564387e39c90 'type'
|     `-TemplateSpecializationType 0x564387e39c20 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x564387e39b00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x564387e39ae0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x564387e39ac0 <col:24> 'unsigned long' 4
|       `-RecordType 0x564387e39c00 'char_array<4>'
|         `-ClassTemplateSpecialization 0x564387e39b20 'char_array'
|-TypedefDecl 0x564387e3b568 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x564387e3b530 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x564387e3b510 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x564387e3b4b0 'type'
|     `-ElaboratedType 0x564387e3b460 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x564387e39d90 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x564387e39c90 'type'
|         `-TemplateSpecializationType 0x564387e39c20 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x564387e39b00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x564387e39ae0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x564387e39ac0 <col:24> 'unsigned long' 4
|           `-RecordType 0x564387e39c00 'char_array<4>'
|             `-ClassTemplateSpecialization 0x564387e39b20 'char_array'
|-CXXMethodDecl 0x564387e3b6e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x564387e3b5f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x564387e3b7d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564387e3b8b8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x564387e3bb88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564387e3ba90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x564387e3bdc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564387e3bc40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387e3bcb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e3bf98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564387e3be88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387e3bf00 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e3c0f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564387e3c1c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564387e3c418 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564387e3c288 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564387e3c300 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e3c678 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x564387e3c4e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564387e3c560 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e3c838 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564387e3c748 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e43d78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564387e3c900 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e43e30 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564387e43ee0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564387e44118 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564387e43f90 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564387e44008 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564387e443b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564387e442c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x564387e44480 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x564387e444d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564387e44520 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387e38058 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x564387e38268 prev 0x564387e38058 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564387e395c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x564387e39570 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x564387e39550 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x564387e39400 'type'
|     `-SubstTemplateTypeParmType 0x564387e39220 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x564387b13930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b138d8 'T'
|       `-RecordType 0x564387e38d70 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x564387e38c88 'sized_array_memory'
|-FieldDecl 0x564387e44570 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x564387e445c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564387e445f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|   |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564387b4d3a8 'T'
|   `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e44688 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x564387e44650 'int &'
|   `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e44748 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x564387e44710 'const int &'
|   `-QualType 0x564387e38301 'const int' const
|     `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e447d8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x564387e447a0 'int *'
|   `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e44868 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x564387e44830 'const int *'
|   `-QualType 0x564387e38301 'const int' const
|     `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e45450 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x564387e45400 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x564387e453e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x564387e45370 'type'
|     `-SubstTemplateTypeParmType 0x564387e45130 'int' sugar
|       |-TemplateTypeParmType 0x564387b1f850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b1f800 'T'
|       `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e454b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x564387e44710 'const int &'
|   `-QualType 0x564387e38301 'const int' const
|     `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e45510 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e45578 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x564387e447a0 'int *'
|   `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|     |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564387b4d3a8 'T'
|     `-BuiltinType 0x56438784a370 'int'
|-TypedefDecl 0x564387e455e0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x564387e44830 'const int *'
|   `-QualType 0x564387e38301 'const int' const
|     `-SubstTemplateTypeParmType 0x564387e38300 'int' sugar
|       |-TemplateTypeParmType 0x564387b4d400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564387b4d3a8 'T'
|       `-BuiltinType 0x56438784a370 'int'
|-EnumDecl 0x564387e45638 <line:134:5> col:5
| `-EnumConstantDecl 0x564387e45730 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564387e45710 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564387b4e5c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564387b4e5a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564387b4e580 <col:40> 'int' 1
|-CXXConstructorDecl 0x564387e457b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564387e45a08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564387e45870 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387e45910 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x564387e45cc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x564387e45bb0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x564387e45f88 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x564387e45e70 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x564387e462d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x564387e461b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x564387e465e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x564387e464c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x564387e468d0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564387e46718 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387e46790 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564387e469f8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564387e46ad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e46b30 <col:30> Inherited
|-CXXMethodDecl 0x564387e46b78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564387e46c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e46c80 <col:30> Inherited
|-CXXMethodDecl 0x564387e46d48 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564387e46df8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e46e50 <col:30> Inherited
|-CXXMethodDecl 0x564387e46e98 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564387e46f48 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e46fa0 <col:30> Inherited
|-CXXMethodDecl 0x564387e46fe8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564387e47098 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e470f0 <col:30> Inherited
|-CXXMethodDecl 0x564387e47138 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564387e471e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564387e47240 <col:30> Inherited
|-CXXMethodDecl 0x564387e47268 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564387e47318 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564387e473c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564387e47588 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564387e47478 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564387e474f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564387e476d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564387e47648 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387e47888 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x564387e47790 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564387e47940 <col:20>
| `-OptimizeNoneAttr 0x564387e47998 <col:30>
|-CXXMethodDecl 0x564387e47ab8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x564387e479c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564387e47b70 <col:20>
| `-OptimizeNoneAttr 0x564387e47bc8 <col:30>
|-CXXMethodDecl 0x564387e47c80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564387e47bf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387e47dc8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564387e47d38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387e47ef8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x564387e48028 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x564387e480f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x564387e481c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x564387e48308 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564387e48278 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387e48450 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564387e483c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564387e48598 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x564387e48508 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564387e48650 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564387e48750 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564387e486c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564387e48808 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564387e488c8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x564387e489c8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x564387e48b48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564387e48a88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x564387e49308 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564387e48c00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x564387e49268 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x564387e49168 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x564387e493e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564387e49538 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564387e494a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564387e495f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564387e49838 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564387e496b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564387e49728 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564387e499f8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x564387e49908 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564387e49c48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x564387e49ac0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564387e49b38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564387e49d08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564387e49f68 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x564387e49e70 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x564387e4a038 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e361c8 prev 0x564387e1c9d8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564387e362c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x564387e363b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x564387e5bdb0 <col:16, line:828:9>
|-CXXDestructorDecl 0x564387e364a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x564387e5bdc0 <col:25, line:830:9>
|-CXXMethodDecl 0x564387e365a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x564387e36650 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x564387e366f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564387e366f8
| `-ParmVarDecl 0x564387e36808 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x564387e36fc8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564387e36fc8
  `-ParmVarDecl 0x564387e370d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e1c7e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x564387e1c948 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x564387e1c9d8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x564387e1ca90 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x564387e1cb98 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x564387e1cac8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564387e4b5f8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564387e4b5d8 <col:31> 'int' 0
|-CXXConstructorDecl 0x564387e1ceb8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x564387e1cd30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x564387e1cda8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564387e4b630 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564387e4b610 <col:59> 'int' 0
|-CXXConstructorDecl 0x564387e1d090 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564387e1cf80 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x564387e1cff8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564387e4b668 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564387e4b648 <col:55> 'int' 0
|-CXXConstructorDecl 0x564387e1d448 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564387e1d230 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x564387e1d2a8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x564387e1d320 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564387e4b6a0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564387e4b680 <col:31> 'int' 0
|-CXXConstructorDecl 0x564387e1d608 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x564387e1d548 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x564387e1d700 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x564387e1d8e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x564387e1d7f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x564387e1d9d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x564387e4ba50 <col:24, line:291:5>
|   `-ReturnStmt 0x564387e4ba40 <line:290:9, col:79>
|     `-BinaryOperator 0x564387e4ba20 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x564387e4b8f8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x564387e4b850 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x564387e4b830 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x564387e4b728 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x564387e4b710 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x564387e4b6f8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x564387e4b6c8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x564387e37ff0
|       | |   |       `-CXXThisExpr 0x564387e4b6b8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x564387e4b818 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x564387e4b800 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x564387e4b7c8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x564387e4b798 <col:28, col:35> '<bound member function type>' ->size 0x564387dfe4c8
|       | |           `-ImplicitCastExpr 0x564387e4b7e8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x564387e4b780 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x564387e4b750 <col:28> 'Vector<String> *const' lvalue ->_conf 0x564387e37ff0
|       | |                 `-CXXThisExpr 0x564387e4b740 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x564387e4b8e0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x564387e4b8c8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x564387e4b8b0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x564387e4b880 <col:47> 'Args::Slot *const' lvalue ->_slots 0x564387e4a180
|       |         `-CXXThisExpr 0x564387e4b870 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x564387e4ba00 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x564387e4b9e8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564387e4b9d0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564387e4b990 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564387e4b978 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564387e4b928 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564387e4a230
|         |     |   `-CXXThisExpr 0x564387e4b918 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564387e4b958 <col:73> 'int' 0
|         `-IntegerLiteral 0x564387e4b9b0 <col:79> 'int' 0
|-CXXMethodDecl 0x564387e1da98 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x564387e4bc28 <col:32, line:296:5>
|   `-ReturnStmt 0x564387e4bc18 <line:295:9, col:49>
|     `-BinaryOperator 0x564387e4bbf8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x564387e4bad8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x564387e4bac0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x564387e4baa8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x564387e4ba78 <col:17> 'Args::Slot *const' lvalue ->_slots 0x564387e4a180
|       |       `-CXXThisExpr 0x564387e4ba68 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x564387e4bbd8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x564387e4bbc0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564387e4bba8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564387e4bb68 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564387e4bb50 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564387e4bb00 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564387e4a230
|         |     |   `-CXXThisExpr 0x564387e4baf0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564387e4bb30 <col:43> 'int' 0
|         `-IntegerLiteral 0x564387e4bb88 <col:49> 'int' 0
|-CXXMethodDecl 0x564387e1db88 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x564387e4d7b0 <col:19, line:306:5>
|   |-IfStmt 0x564387e4d6d0 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x564387e4bc98 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x564387e4bc80 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x564387e4bc50 <col:13> 'Vector<String> *' lvalue ->_conf 0x564387e37ff0
|   | |     `-CXXThisExpr 0x564387e4bc40 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x564387e4d6b0 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x564387e4bd08 <col:13, col:20> '<bound member function type>' ->clear 0x564387e00ec8
|   |     `-ImplicitCastExpr 0x564387e4bcf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x564387e4bcc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x564387e37ff0
|   |         `-CXXThisExpr 0x564387e4bcb0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x564387e4d758 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x564387e4d728 <col:9, col:16> '<bound member function type>' .clear 0x564387e49d08
|   |   `-MemberExpr 0x564387e4d6f8 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x564387e4a120
|   |     `-CXXThisExpr 0x564387e4d6e8 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x564387e4d7a0 <line:305:9, col:17>
|     `-UnaryOperator 0x564387e4d788 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e4d778 <col:17> 'Args *' this
|-CXXMethodDecl 0x564387e1de08 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x564387e1dd10 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x564387e1df88 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x564387e1dec0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x564387e1e308 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x564387e1e030 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x564387e1e268 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x564387e1e0d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x564387e1e150 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x564387e4dad0 <col:67, line:327:5>
|     |-WhileStmt 0x564387e4da80 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x564387e4d898 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x564387e4d818 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564387d69548 0x564387bb3008 0x564387bb2ce0 0x564387ba88f0 0x564387ba85a0 0x564387ba7e90 0x564387b78d20 0x564387b069d0
|     | | |-DeclRefExpr 0x564387e4d7d8 <col:16> 'Iter' lvalue ParmVar 0x564387e1e0d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x564387e4d7f8 <col:25> 'Iter' lvalue ParmVar 0x564387e1e150 'end' 'Iter'
|     | `-CompoundStmt 0x564387e4da60 <col:30, line:325:9>
|     |   |-CallExpr 0x564387e4da00 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x564387e4d8e0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x564387e4d9d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x564387e4d960 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|     |   |   `-DeclRefExpr 0x564387e4d940 <col:24> 'Iter' lvalue ParmVar 0x564387e1e0d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x564387e4da48 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x564387e4da28 <col:15> 'Iter' lvalue ParmVar 0x564387e1e0d8 'begin' 'Iter'
|     `-ReturnStmt 0x564387e4dac0 <line:326:9, col:17>
|       `-UnaryOperator 0x564387e4daa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4da98 <col:17> 'Args *' this
|-CXXMethodDecl 0x564387e1e410 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x564387e1e380 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x564387e1e558 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x564387e1e4c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x564387e1e620 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x564387e4dbb0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x564387e4db50 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x564387e4db00 <col:9> '<bound member function type>' ->reset_from 0x564387e4a5a8
|   | | `-CXXThisExpr 0x564387e4daf0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x564387e4db30 <col:20> 'int' 0
|   `-ReturnStmt 0x564387e4dba0 <line:352:9, col:17>
|     `-UnaryOperator 0x564387e4db88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e4db78 <col:17> 'Args *' this
|-VarDecl 0x564387e1e6d8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x564387e1e740 <col:38> 'int' 1
|-VarDecl 0x564387e1e7d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x564387e1e838 <col:39> 'int' 2
|-VarDecl 0x564387e1e8c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x564387e1e930 <col:39> 'int' 4
|-VarDecl 0x564387e1e9c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x564387e1ea28 <col:39> 'int' 8
|-FunctionTemplateDecl 0x564387e1eda8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x564387e1eaa0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e1ed08 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564387e1eb50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e1ebf8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x564387e4dd08 <col:43, line:371:5>
|     `-ReturnStmt 0x564387e4dcf8 <line:370:9, col:34>
|       `-CallExpr 0x564387e4dcc0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4dbe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4dc60 <col:21> 'const char *' lvalue ParmVar 0x564387e1eb50 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4dc80 <col:30> 'int' 0
|         `-DeclRefExpr 0x564387e4dca0 <col:33> 'T' lvalue ParmVar 0x564387e1ebf8 'x' 'T &'
|-FunctionTemplateDecl 0x564387e1f0d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x564387e1ee10 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e1f038 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564387e1eec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e1ef68 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x564387e4de58 <col:45, line:375:5>
|     `-ReturnStmt 0x564387e4de48 <line:374:9, col:42>
|       `-CallExpr 0x564387e4de10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4dd30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4ddb0 <col:21> 'const char *' lvalue ParmVar 0x564387e1eec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4ddd0 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x564387e4ddf0 <col:41> 'T' lvalue ParmVar 0x564387e1ef68 'x' 'T &'
|-FunctionTemplateDecl 0x564387e1f408 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x564387e1f140 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x564387e1f368 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x564387e1f1f0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564387e1f298 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x564387e4dfa8 <col:45, line:379:5>
| |   `-ReturnStmt 0x564387e4df98 <line:378:9, col:43>
| |     `-CallExpr 0x564387e4df60 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564387e4de80 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564387e4df00 <col:21> 'const char *' lvalue ParmVar 0x564387e1f1f0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x564387e4df20 <col:30> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
| |       `-DeclRefExpr 0x564387e4df40 <col:42> 'T' lvalue ParmVar 0x564387e1f298 'x' 'T &'
| |-CXXMethodDecl 0x564387e91b48 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x564387e91960 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x564387e91a38 <col:39, col:42> col:42 x 'bool &'
| `-CXXMethodDecl 0x564387e91fc8 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x564387e91de8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x564387e91eb8 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x564387e1f738 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x564387e1f470 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x564387e1f698 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x564387e1f520 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564387e1f5c8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x564387e4e1a8 <col:46, line:383:5>
| |   `-ReturnStmt 0x564387e4e198 <line:382:9, col:55>
| |     `-CallExpr 0x564387e4e160 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564387e4dfd0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564387e4e050 <col:21> 'const char *' lvalue ParmVar 0x564387e1f520 'keyword' 'const char *'
| |       |-BinaryOperator 0x564387e4e120 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x564387e4e0d0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x564387e4e0b0 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x564387e4e108 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x564387e4e0e8 <col:42> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x564387e4e140 <col:54> 'T' lvalue ParmVar 0x564387e1f5c8 'x' 'T &'
| `-CXXMethodDecl 0x564387e90608 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x564387e90420 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x564387e904f8 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x564387e1fb38 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x564387e1f7a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e1fa98 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x564387e1f850 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e1f8d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564387e1f978 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x564387e4e2e8 <col:54, line:388:5>
|     |-CallExpr 0x564387e4e270 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e4e1c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564387e4e200 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564387e4e210 <col:30> 'const char *' lvalue ParmVar 0x564387e1f850 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e4e230 <col:39> 'int' lvalue ParmVar 0x564387e1f8d0 'flags' 'int'
|     | `-DeclRefExpr 0x564387e4e250 <col:46> 'T' lvalue ParmVar 0x564387e1f978 'x' 'T &'
|     `-ReturnStmt 0x564387e4e2d8 <line:387:9, col:17>
|       `-UnaryOperator 0x564387e4e2c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4e2b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e1ffe8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x564387e1fba8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e1fc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564387e1ff48 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564387e1fce8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e1fd88 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x564387e1fe28 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4e458 <col:74, line:403:5>
|     `-ReturnStmt 0x564387e4e448 <line:402:9, col:56>
|       `-CallExpr 0x564387e4e408 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4e318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4e388 <col:28> 'const char *' lvalue ParmVar 0x564387e1fce8 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4e3a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x564387e4e3c8 <col:40> 'T' lvalue ParmVar 0x564387e1fd88 'x' 'T &'
|         `-DeclRefExpr 0x564387e4e3e8 <col:43> 'const V' lvalue ParmVar 0x564387e1fe28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564387e20458 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564387e20058 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e200d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564387e203b8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564387e20198 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e20238 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x564387e202d8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4e5c0 <col:76, line:407:5>
|     `-ReturnStmt 0x564387e4e5b0 <line:406:9, col:65>
|       `-CallExpr 0x564387e4e570 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4e480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4e4f0 <col:28> 'const char *' lvalue ParmVar 0x564387e20198 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4e510 <col:37> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
|         |-DeclRefExpr 0x564387e4e530 <col:49> 'T' lvalue ParmVar 0x564387e20238 'x' 'T &'
|         `-DeclRefExpr 0x564387e4e550 <col:52> 'const V' lvalue ParmVar 0x564387e202d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564387e209a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x564387e204c8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e20548 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564387e20908 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564387e20608 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e20688 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564387e20728 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x564387e207c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4e728 <col:85, line:412:5>
|     |-CallExpr 0x564387e4e6a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e4e5d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564387e4e618 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564387e4e628 <col:37> 'const char *' lvalue ParmVar 0x564387e20608 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e4e648 <col:46> 'int' lvalue ParmVar 0x564387e20688 'flags' 'int'
|     | |-DeclRefExpr 0x564387e4e668 <col:53> 'T' lvalue ParmVar 0x564387e20728 'x' 'T &'
|     | `-DeclRefExpr 0x564387e4e688 <col:56> 'const V' lvalue ParmVar 0x564387e207c8 'default_value' 'const V &'
|     `-ReturnStmt 0x564387e4e718 <line:411:9, col:17>
|       `-UnaryOperator 0x564387e4e700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4e6f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e20e38 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x564387e20a20 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e20a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e20d98 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e20b58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e20bd0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564387e20c78 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x564387e4e8a8 <col:53, line:425:5>
|     `-ReturnStmt 0x564387e4e898 <line:424:9, col:42>
|       `-CallExpr 0x564387e4e858 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4e758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4e7d8 <col:21> 'const char *' lvalue ParmVar 0x564387e20b58 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4e7f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x564387e4e818 <col:33> 'P' lvalue ParmVar 0x564387e20bd0 'parser' 'P'
|         `-DeclRefExpr 0x564387e4e838 <col:41> 'T' lvalue ParmVar 0x564387e20c78 'x' 'T &'
|-FunctionTemplateDecl 0x564387e21288 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x564387e20ea8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e20f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e211e8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e20fe8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e21060 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564387e21108 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x564387e4ea20 <col:55, line:429:5>
|     `-ReturnStmt 0x564387e4ea10 <line:428:9, col:50>
|       `-CallExpr 0x564387e4e9d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4e8d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4e950 <col:21> 'const char *' lvalue ParmVar 0x564387e20fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4e970 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x564387e4e990 <col:41> 'P' lvalue ParmVar 0x564387e21060 'parser' 'P'
|         `-DeclRefExpr 0x564387e4e9b0 <col:49> 'T' lvalue ParmVar 0x564387e21108 'x' 'T &'
|-FunctionTemplateDecl 0x564387e216d8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x564387e212f8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e21378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e21638 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e21438 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e214b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564387e21558 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x564387e4eb98 <col:55, line:433:5>
|     `-ReturnStmt 0x564387e4eb88 <line:432:9, col:51>
|       `-CallExpr 0x564387e4eb48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4ea48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4eac8 <col:21> 'const char *' lvalue ParmVar 0x564387e21438 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4eae8 <col:30> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
|         |-DeclRefExpr 0x564387e4eb08 <col:42> 'P' lvalue ParmVar 0x564387e214b0 'parser' 'P'
|         `-DeclRefExpr 0x564387e4eb28 <col:50> 'T' lvalue ParmVar 0x564387e21558 'x' 'T &'
|-FunctionTemplateDecl 0x564387e21b28 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x564387e21748 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e217c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x564387e21a88 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x564387e21888 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564387e21900 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x564387e219a8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x564387e4edc0 <col:56, line:437:5>
| |   `-ReturnStmt 0x564387e4edb0 <line:436:9, col:63>
| |     `-CallExpr 0x564387e4ed70 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564387e4ebc0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564387e4ec40 <col:21> 'const char *' lvalue ParmVar 0x564387e21888 'keyword' 'const char *'
| |       |-BinaryOperator 0x564387e4ed10 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x564387e4ecc0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x564387e4eca0 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x564387e4ecf8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x564387e4ecd8 <col:42> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x564387e4ed30 <col:54> 'P' lvalue ParmVar 0x564387e21900 'parser' 'P'
| |       `-DeclRefExpr 0x564387e4ed50 <col:62> 'T' lvalue ParmVar 0x564387e219a8 'x' 'T &'
| `-CXXMethodDecl 0x564387e910b8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x564387e90e20 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x564387e90ec8 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x564387e90f98 <col:50, col:53> col:53 x 'unsigned short &'
|-FunctionTemplateDecl 0x564387e22058 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x564387e21b98 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e21c18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e21fb8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564387e21cd8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e21d58 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564387e21dd0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564387e21e78 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x564387e4ef28 <col:64, line:442:5>
|     |-CallExpr 0x564387e4eea8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e4edd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564387e4ee18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564387e4ee28 <col:30> 'const char *' lvalue ParmVar 0x564387e21cd8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e4ee48 <col:39> 'int' lvalue ParmVar 0x564387e21d58 'flags' 'int'
|     | |-DeclRefExpr 0x564387e4ee68 <col:46> 'P' lvalue ParmVar 0x564387e21dd0 'parser' 'P'
|     | `-DeclRefExpr 0x564387e4ee88 <col:54> 'T' lvalue ParmVar 0x564387e21e78 'x' 'T &'
|     `-ReturnStmt 0x564387e4ef18 <line:441:9, col:17>
|       `-UnaryOperator 0x564387e4ef00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4eef0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e22658 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x564387e220d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e22148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564387e221c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564387e225b8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564387e22290 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e22308 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564387e223a8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x564387e22478 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4f0c0 <col:84, line:458:5>
|     `-ReturnStmt 0x564387e4f0b0 <line:457:9, col:64>
|       `-CallExpr 0x564387e4f068 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4ef58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4efc8 <col:28> 'const char *' lvalue ParmVar 0x564387e22290 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4efe8 <col:37> 'int' 0
|         |-DeclRefExpr 0x564387e4f008 <col:40> 'P' lvalue ParmVar 0x564387e22308 'parser' 'P'
|         |-DeclRefExpr 0x564387e4f028 <col:48> 'T' lvalue ParmVar 0x564387e223a8 'x' 'T &'
|         `-DeclRefExpr 0x564387e4f048 <col:51> 'const V' lvalue ParmVar 0x564387e22478 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564387e22bd8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564387e226d0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e22748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564387e227c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564387e22b38 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564387e22890 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e22908 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564387e229a8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x564387e22a48 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4f250 <col:86, line:462:5>
|     `-ReturnStmt 0x564387e4f240 <line:461:9, col:73>
|       `-CallExpr 0x564387e4f1f8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4f0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4f158 <col:28> 'const char *' lvalue ParmVar 0x564387e22890 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4f178 <col:37> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
|         |-DeclRefExpr 0x564387e4f198 <col:49> 'P' lvalue ParmVar 0x564387e22908 'parser' 'P'
|         |-DeclRefExpr 0x564387e4f1b8 <col:57> 'T' lvalue ParmVar 0x564387e229a8 'x' 'T &'
|         `-DeclRefExpr 0x564387e4f1d8 <col:60> 'const V' lvalue ParmVar 0x564387e22a48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564387e23238 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x564387e22c50 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e22cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564387e22d48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564387e23198 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564387e22e10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e22e90 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564387e22f08 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x564387e22fa8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x564387e23048 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x564387e4f3e0 <col:95, line:467:5>
|     |-CallExpr 0x564387e4f358 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e4f268 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564387e4f2a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564387e4f2b8 <col:37> 'const char *' lvalue ParmVar 0x564387e22e10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e4f2d8 <col:46> 'int' lvalue ParmVar 0x564387e22e90 'flags' 'int'
|     | |-DeclRefExpr 0x564387e4f2f8 <col:53> 'P' lvalue ParmVar 0x564387e22f08 'parser' 'P'
|     | |-DeclRefExpr 0x564387e4f318 <col:61> 'T' lvalue ParmVar 0x564387e22fa8 'x' 'T &'
|     | `-DeclRefExpr 0x564387e4f338 <col:64> 'const V' lvalue ParmVar 0x564387e23048 'default_value' 'const V &'
|     `-ReturnStmt 0x564387e4f3d0 <line:466:9, col:17>
|       `-UnaryOperator 0x564387e4f3b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4f3a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e23818 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x564387e232b8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e23338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e233b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e23778 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e23480 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e234f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564387e23598 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564387e23638 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x564387e4f588 <col:63, line:481:5>
|     `-ReturnStmt 0x564387e4f578 <line:480:9, col:47>
|       `-CallExpr 0x564387e4f530 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4f410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4f490 <col:21> 'const char *' lvalue ParmVar 0x564387e23480 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4f4b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x564387e4f4d0 <col:33> 'P' lvalue ParmVar 0x564387e234f8 'parser' 'P'
|         |-DeclRefExpr 0x564387e4f4f0 <col:41> 'T1' lvalue ParmVar 0x564387e23598 'x1' 'T1 &'
|         `-DeclRefExpr 0x564387e4f510 <col:45> 'T2' lvalue ParmVar 0x564387e23638 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564387e23d98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x564387e23890 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e23908 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e23988 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e23cf8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e23a50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e23ac8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564387e23b68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564387e23c08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564387e4f728 <col:65, line:485:5>
|     `-ReturnStmt 0x564387e4f718 <line:484:9, col:55>
|       `-CallExpr 0x564387e4f6d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4f5b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4f630 <col:21> 'const char *' lvalue ParmVar 0x564387e23a50 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4f650 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x564387e4f670 <col:41> 'P' lvalue ParmVar 0x564387e23ac8 'parser' 'P'
|         |-DeclRefExpr 0x564387e4f690 <col:49> 'T1' lvalue ParmVar 0x564387e23b68 'x1' 'T1 &'
|         `-DeclRefExpr 0x564387e4f6b0 <col:53> 'T2' lvalue ParmVar 0x564387e23c08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564387e24318 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x564387e23e10 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e23e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e23f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e24278 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e23fd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e24048 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564387e240e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564387e24188 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564387e4f8c8 <col:65, line:489:5>
|     `-ReturnStmt 0x564387e4f8b8 <line:488:9, col:56>
|       `-CallExpr 0x564387e4f870 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4f750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4f7d0 <col:21> 'const char *' lvalue ParmVar 0x564387e23fd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4f7f0 <col:30> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
|         |-DeclRefExpr 0x564387e4f810 <col:42> 'P' lvalue ParmVar 0x564387e24048 'parser' 'P'
|         |-DeclRefExpr 0x564387e4f830 <col:50> 'T1' lvalue ParmVar 0x564387e240e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x564387e4f850 <col:54> 'T2' lvalue ParmVar 0x564387e24188 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564387e25208 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x564387e24390 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e24408 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e24e00 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e25168 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e24ec0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e24f38 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x564387e24fd8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564387e25078 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x564387e4fb18 <col:66, line:493:5>
|     `-ReturnStmt 0x564387e4fb08 <line:492:9, col:68>
|       `-CallExpr 0x564387e4fac0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4f8f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4f970 <col:21> 'const char *' lvalue ParmVar 0x564387e24ec0 'keyword' 'const char *'
|         |-BinaryOperator 0x564387e4fa40 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x564387e4f9f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564387e4f9d0 <col:30> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564387e4fa28 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564387e4fa08 <col:42> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x564387e4fa60 <col:54> 'P' lvalue ParmVar 0x564387e24f38 'parser' 'P'
|         |-DeclRefExpr 0x564387e4fa80 <col:62> 'T1' lvalue ParmVar 0x564387e24fd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x564387e4faa0 <col:66> 'T2' lvalue ParmVar 0x564387e25078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564387e25868 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x564387e25280 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e252f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e25378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e257c8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e25440 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e254c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564387e25538 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564387e255d8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564387e25678 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x564387e4fca8 <col:74, line:498:5>
|     |-CallExpr 0x564387e4fc20 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e4fb30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564387e4fb70 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564387e4fb80 <col:30> 'const char *' lvalue ParmVar 0x564387e25440 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e4fba0 <col:39> 'int' lvalue ParmVar 0x564387e254c0 'flags' 'int'
|     | |-DeclRefExpr 0x564387e4fbc0 <col:46> 'P' lvalue ParmVar 0x564387e25538 'parser' 'P'
|     | |-DeclRefExpr 0x564387e4fbe0 <col:54> 'T1' lvalue ParmVar 0x564387e255d8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x564387e4fc00 <col:58> 'T2' lvalue ParmVar 0x564387e25678 'x2' 'T2 &'
|     `-ReturnStmt 0x564387e4fc98 <line:497:9, col:17>
|       `-UnaryOperator 0x564387e4fc80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e4fc70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e25bc8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x564387e258e8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e25b28 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564387e259a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e25a18 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x564387e4fdf0 <col:52, line:509:5>
|     `-ReturnStmt 0x564387e4fde0 <line:508:9, col:44>
|       `-CallExpr 0x564387e4fda8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4fcd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4fd48 <col:26> 'const char *' lvalue ParmVar 0x564387e259a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e4fd68 <col:35> 'int' 0
|         `-DeclRefExpr 0x564387e4fd88 <col:38> 'P' lvalue ParmVar 0x564387e25a18 'parser' 'P'
|-FunctionTemplateDecl 0x564387e25ec8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x564387e25c30 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e25e28 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564387e25ce0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e25d58 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564387e4ff30 <col:54, line:513:5>
|     `-ReturnStmt 0x564387e4ff20 <line:512:9, col:52>
|       `-CallExpr 0x564387e4fee8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4fe18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4fe88 <col:26> 'const char *' lvalue ParmVar 0x564387e25ce0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4fea8 <col:35> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x564387e4fec8 <col:46> 'P' lvalue ParmVar 0x564387e25d58 'parser' 'P'
|-FunctionTemplateDecl 0x564387e261c8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x564387e25f30 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e26128 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564387e25fe0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e26058 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564387e50070 <col:54, line:517:5>
|     `-ReturnStmt 0x564387e50060 <line:516:9, col:53>
|       `-CallExpr 0x564387e50028 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e4ff58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e4ffc8 <col:26> 'const char *' lvalue ParmVar 0x564387e25fe0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e4ffe8 <col:35> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int'
|         `-DeclRefExpr 0x564387e50008 <col:47> 'P' lvalue ParmVar 0x564387e26058 'parser' 'P'
|-FunctionTemplateDecl 0x564387e264c8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x564387e26230 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e26428 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564387e262e0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e26358 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x564387e50260 <col:55, line:521:5>
|     `-ReturnStmt 0x564387e50250 <line:520:9, col:65>
|       `-CallExpr 0x564387e50218 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50108 <col:26> 'const char *' lvalue ParmVar 0x564387e262e0 'keyword' 'const char *'
|         |-BinaryOperator 0x564387e501d8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x564387e50188 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564387e50168 <col:35> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564387e501c0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564387e501a0 <col:47> 'const int' lvalue Var 0x564387e1e7d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x564387e501f8 <col:59> 'P' lvalue ParmVar 0x564387e26358 'parser' 'P'
|-FunctionTemplateDecl 0x564387e26898 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x564387e26530 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e267f8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564387e265e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e26660 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564387e266d8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x564387e503a0 <col:63, line:526:5>
|     |-CallExpr 0x564387e50328 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e50278 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x564387e502b8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x564387e502c8 <col:35> 'const char *' lvalue ParmVar 0x564387e265e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564387e502e8 <col:44> 'int' lvalue ParmVar 0x564387e26660 'flags' 'int'
|     | `-DeclRefExpr 0x564387e50308 <col:51> 'P' lvalue ParmVar 0x564387e266d8 'parser' 'P'
|     `-ReturnStmt 0x564387e50390 <line:525:9, col:17>
|       `-UnaryOperator 0x564387e50378 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e50368 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e26ce8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x564387e26908 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e26988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e26c48 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e26a48 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e26ac0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x564387e26b68 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x564387e504f8 <col:58, line:541:5>
|     `-ReturnStmt 0x564387e504e8 <line:540:9, col:39>
|       `-CallExpr 0x564387e504b0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e503d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50450 <col:21> 'const char *' lvalue ParmVar 0x564387e26a48 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e50470 <col:30> 'P' lvalue ParmVar 0x564387e26ac0 'parser' 'P'
|         `-DeclRefExpr 0x564387e50490 <col:38> 'T' lvalue ParmVar 0x564387e26b68 'x' 'T &'
|-FunctionTemplateDecl 0x564387e27138 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x564387e26d58 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e26dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e27098 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e26e98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e26f10 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564387e26fb8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564387e50630 <col:60, line:545:5>
|     `-ReturnStmt 0x564387e50620 <line:544:9, col:41>
|       `-CallExpr 0x564387e505e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50520 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50588 <col:23> 'const char *' lvalue ParmVar 0x564387e26e98 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e505a8 <col:32> 'P' lvalue ParmVar 0x564387e26f10 'parser' 'P'
|         `-DeclRefExpr 0x564387e505c8 <col:40> 'T' lvalue ParmVar 0x564387e26fb8 'x' 'T &'
|-FunctionTemplateDecl 0x564387e27588 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x564387e271a8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e27228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e274e8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e272e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e27360 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564387e27408 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564387e50768 <col:60, line:549:5>
|     `-ReturnStmt 0x564387e50758 <line:548:9, col:41>
|       `-CallExpr 0x564387e50720 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e506c0 <col:23> 'const char *' lvalue ParmVar 0x564387e272e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e506e0 <col:32> 'P' lvalue ParmVar 0x564387e27360 'parser' 'P'
|         `-DeclRefExpr 0x564387e50700 <col:40> 'T' lvalue ParmVar 0x564387e27408 'x' 'T &'
|-FunctionTemplateDecl 0x564387e279d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x564387e275f8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e27678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e27938 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e27738 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e277b0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x564387e27858 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x564387e508a0 <col:61, line:553:5>
|     `-ReturnStmt 0x564387e50890 <line:552:9, col:42>
|       `-CallExpr 0x564387e50858 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50790 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e507f8 <col:24> 'const char *' lvalue ParmVar 0x564387e27738 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e50818 <col:33> 'P' lvalue ParmVar 0x564387e277b0 'parser' 'P'
|         `-DeclRefExpr 0x564387e50838 <col:41> 'T' lvalue ParmVar 0x564387e27858 'x' 'T &'
|-FunctionTemplateDecl 0x564387e27eb8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x564387e27a48 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e27ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e27e18 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564387e27b88 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e27c08 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564387e27c80 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x564387e27d28 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x564387e50a18 <col:69, line:557:5>
|     `-ReturnStmt 0x564387e50a08 <line:556:9, col:46>
|       `-CallExpr 0x564387e509c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e508c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50948 <col:21> 'const char *' lvalue ParmVar 0x564387e27b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e50968 <col:30> 'int' lvalue ParmVar 0x564387e27c08 'flags' 'int'
|         |-DeclRefExpr 0x564387e50988 <col:37> 'P' lvalue ParmVar 0x564387e27c80 'parser' 'P'
|         `-DeclRefExpr 0x564387e509a8 <col:45> 'T' lvalue ParmVar 0x564387e27d28 'x' 'T &'
|-FunctionTemplateDecl 0x564387e281c8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x564387e27f30 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e28128 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564387e27fe0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e28058 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x564387e50b58 <col:56, line:571:5>
|     `-ReturnStmt 0x564387e50b48 <line:570:9, col:48>
|       `-CallExpr 0x564387e50b10 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50a40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50ab0 <col:30> 'const char *' lvalue ParmVar 0x564387e27fe0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e50ad0 <col:39> 'int' 0
|         `-DeclRefExpr 0x564387e50af0 <col:42> 'P' lvalue ParmVar 0x564387e28058 'parser' 'P'
|-FunctionTemplateDecl 0x564387e28558 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x564387e28230 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e284b8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564387e282e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e28360 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564387e283d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564387e50d28 <col:67, line:576:5>
|     |-CallExpr 0x564387e50cb0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e50b70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564387e50bb0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564387e50bc0 <col:39> 'const char *' lvalue ParmVar 0x564387e282e0 'keyword' 'const char *'
|     | |-BinaryOperator 0x564387e50c70 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564387e50c20 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564387e50be0 <col:48> 'int' lvalue ParmVar 0x564387e28360 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564387e50c58 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564387e50c38 <col:56> 'const int' lvalue Var 0x564387e1e9c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x564387e50c90 <col:68> 'P' lvalue ParmVar 0x564387e283d8 'parser' 'P'
|     `-ReturnStmt 0x564387e50d18 <line:575:9, col:17>
|       `-UnaryOperator 0x564387e50d00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e50cf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e289a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x564387e285c8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e28648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e28908 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564387e28708 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e28780 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564387e28828 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x564387e50e98 <col:62, line:592:5>
|     `-ReturnStmt 0x564387e50e88 <line:591:9, col:51>
|       `-CallExpr 0x564387e50e48 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e50d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e50dc8 <col:30> 'const char *' lvalue ParmVar 0x564387e28708 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e50de8 <col:39> 'int' 0
|         |-DeclRefExpr 0x564387e50e08 <col:42> 'P' lvalue ParmVar 0x564387e28780 'parser' 'P'
|         `-DeclRefExpr 0x564387e50e28 <col:50> 'T' lvalue ParmVar 0x564387e28828 'x' 'T &'
|-FunctionTemplateDecl 0x564387e28e88 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x564387e28a18 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e28a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e28de8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564387e28b58 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e28bd8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564387e28c50 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x564387e28cf8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x564387e51090 <col:73, line:597:5>
|     |-CallExpr 0x564387e51010 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e50eb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564387e50ef0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564387e50f00 <col:39> 'const char *' lvalue ParmVar 0x564387e28b58 'keyword' 'const char *'
|     | |-BinaryOperator 0x564387e50fb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564387e50f60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564387e50f20 <col:48> 'int' lvalue ParmVar 0x564387e28bd8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564387e50f98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564387e50f78 <col:56> 'const int' lvalue Var 0x564387e1e9c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564387e50fd0 <col:68> 'P' lvalue ParmVar 0x564387e28c50 'parser' 'P'
|     | `-DeclRefExpr 0x564387e50ff0 <col:76> 'T' lvalue ParmVar 0x564387e28cf8 'x' 'T &'
|     `-ReturnStmt 0x564387e51080 <line:596:9, col:17>
|       `-UnaryOperator 0x564387e51068 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e51058 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e29438 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x564387e28f00 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e28f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e29398 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x564387e29038 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e290b0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x564387e29270 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564387e51200 <col:65, line:614:5>
|     `-ReturnStmt 0x564387e511f0 <line:613:9, col:46>
|       `-CallExpr 0x564387e511b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e510c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e51130 <col:25> 'const char *' lvalue ParmVar 0x564387e29038 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e51150 <col:34> 'int' 0
|         |-DeclRefExpr 0x564387e51170 <col:37> 'P' lvalue ParmVar 0x564387e290b0 'parser' 'P'
|         `-DeclRefExpr 0x564387e51190 <col:45> 'Vector<T>' lvalue ParmVar 0x564387e29270 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564387e29868 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x564387e294a8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e297c8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x564387e29560 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e296b0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564387e51420 <col:55, line:618:5>
|     `-ReturnStmt 0x564387e51410 <line:617:9, col:55>
|       `-CallExpr 0x564387e513d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e51228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e51298 <col:25> 'const char *' lvalue ParmVar 0x564387e29560 'keyword' 'const char *'
|         |-IntegerLiteral 0x564387e512b8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x564387e51390 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564387e513b0 <col:54> 'Vector<T>' lvalue ParmVar 0x564387e296b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564387e29e38 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x564387e298d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e29948 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e29d98 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564387e29a08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e29a88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564387e29b00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564387e29c50 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564387e51618 <col:76, line:623:5>
|     |-CallExpr 0x564387e51598 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564387e51438 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x564387e51478 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x564387e51488 <col:34> 'const char *' lvalue ParmVar 0x564387e29a08 'keyword' 'const char *'
|     | |-BinaryOperator 0x564387e51538 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x564387e514e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564387e514a8 <col:43> 'int' lvalue ParmVar 0x564387e29a88 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564387e51520 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564387e51500 <col:51> 'const int' lvalue Var 0x564387e1e9c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564387e51558 <col:63> 'P' lvalue ParmVar 0x564387e29b00 'parser' 'P'
|     | `-DeclRefExpr 0x564387e51578 <col:71> 'Vector<T>' lvalue ParmVar 0x564387e29c50 'x' 'Vector<T> &'
|     `-ReturnStmt 0x564387e51608 <line:622:9, col:17>
|       `-UnaryOperator 0x564387e515f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e515e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e2a378 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x564387e29eb0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e29f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e2a2d8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x564387e29fe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e2a068 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564387e2a1b0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564387e51880 <col:66, line:627:5>
|     `-ReturnStmt 0x564387e51870 <line:626:9, col:59>
|       `-CallExpr 0x564387e51830 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564387e51648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564387e516b8 <col:25> 'const char *' lvalue ParmVar 0x564387e29fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564387e516d8 <col:34> 'int' lvalue ParmVar 0x564387e2a068 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x564387e517f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564387e51810 <col:58> 'Vector<T>' lvalue ParmVar 0x564387e2a1b0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x564387e2a408 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x564387e51900 <col:25, line:633:5>
|   `-ReturnStmt 0x564387e518f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x564387e518d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564387e518a8 <col:16> 'const bool' lvalue ->_status 0x564387e37e58
|         `-CXXThisExpr 0x564387e51898 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564387e2a588 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x564387e2a4c0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x564387e519e8 <col:27, line:639:5>
|   |-BinaryOperator 0x564387e51990 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564387e51918 <col:9> 'bool' lvalue ParmVar 0x564387e2a4c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564387e51978 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564387e51948 <col:13> 'bool' lvalue ->_status 0x564387e37e58
|   |     `-CXXThisExpr 0x564387e51938 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564387e519d8 <line:638:9, col:17>
|     `-UnaryOperator 0x564387e519c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e519b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x564387e2a708 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564387e2a648 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x564387e51ad8 <col:39, line:644:5>
|   |-BinaryOperator 0x564387e51a80 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564387e51a08 <col:9> 'bool' lvalue ParmVar 0x564387e2a648 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564387e51a68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564387e51a38 <col:13> 'const bool' lvalue ->_status 0x564387e37e58
|   |     `-CXXThisExpr 0x564387e51a28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564387e51ac8 <line:643:9, col:17>
|     `-UnaryOperator 0x564387e51ab0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e51aa0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564387e2a7d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x564387e51b80 <col:30, line:651:5>
|   `-ReturnStmt 0x564387e51b70 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x564387e51b58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564387e51b28 <col:16> 'bool' lvalue ->_read_status 0x564387d2d800
|         `-ImplicitCastExpr 0x564387e51b08 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x564387e51af8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564387e2a918 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x564387e2a888 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x564387e51c88 <col:32, line:658:5>
|   |-BinaryOperator 0x564387e51c30 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564387e51b98 <col:9> 'bool' lvalue ParmVar 0x564387e2a888 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564387e51c18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564387e51be8 <col:13> 'bool' lvalue ->_read_status 0x564387d2d800
|   |     `-ImplicitCastExpr 0x564387e51bc8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564387e51bb8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564387e51c78 <line:657:9, col:17>
|     `-UnaryOperator 0x564387e51c60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e51c50 <col:17> 'Args *' this
|-CXXMethodDecl 0x564387e2aa68 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564387e2a9d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x564387e51d98 <col:44, line:663:5>
|   |-BinaryOperator 0x564387e51d40 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564387e51ca8 <col:9> 'bool' lvalue ParmVar 0x564387e2a9d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564387e51d28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564387e51cf8 <col:13> 'bool' lvalue ->_read_status 0x564387d2d800
|   |     `-ImplicitCastExpr 0x564387e51cd8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564387e51cc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564387e51d88 <line:662:9, col:17>
|     `-UnaryOperator 0x564387e51d70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387e51d60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564387e2ab30 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x564387e2abf8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x564387e2acc0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x564387e2ad88 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x564387e2b098 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x564387e2ae28 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e2aff8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x564387e2af08 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x564387e52150 <col:19, line:706:5>
|     `-IfStmt 0x564387e52128 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x564387e51e98 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x564387e52058 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x564387e52028 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x564387e51fe8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x564387e51ef0 <col:42> '<bound member function type>' ->simple_slot 0x564387e4b260
|       |     | `-CXXThisExpr 0x564387e51ee0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x564387e51f88 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x564387e51f40 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x564387bb7688
|       |     | `-DeclRefExpr 0x564387e51f20 <col:55> 'T' lvalue ParmVar 0x564387e2af08 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x564387e51fc8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x564387e52118 <line:705:13, col:34>
|         `-CallExpr 0x564387e520f0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x564387e52078 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x564387e520d0 <col:33> 'T' lvalue ParmVar 0x564387e2af08 'x' 'T &'
|-FunctionTemplateDecl 0x564387e2b368 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x564387e2b0f8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e2b2c8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x564387e2b1d8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x564387e52530 <col:31, line:717:5>
|     |-DeclStmt 0x564387e52290 <line:713:9, col:23>
|     | `-VarDecl 0x564387e52178 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x564387e52268 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564387e521f0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564387e52248 <col:21> 'T' lvalue ParmVar 0x564387e2b1d8 'x' 'T &'
|     |-IfStmt 0x564387e524e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x564387e52388 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x564387e524c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564387e52460 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564387e523f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|     |   | `-DeclRefExpr 0x564387e523d0 <col:14> 'T *' lvalue Var 0x564387e52178 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x564387e524a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x564387e52518 <line:716:9, col:16>
|       `-DeclRefExpr 0x564387e524f8 <col:16> 'T *' lvalue Var 0x564387e52178 's' 'T *'
|-FunctionTemplateDecl 0x564387e2b778 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x564387e2b3c8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e2b448 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564387e2b6d8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x564387e2b528 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x564387e2b5c8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x564387e52840 <col:37, line:726:5>
|     |-IfStmt 0x564387e527d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x564387e527f0 <line:723:13, col:26>
|     | | `-VarDecl 0x564387e52598 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x564387e52688 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x564387e52610 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x564387e52668 <col:25> 'T' lvalue ParmVar 0x564387e2b528 'x' 'T &'
|     | |-DeclRefExpr 0x564387e526b0 <col:16> 'T *' lvalue Var 0x564387e52598 's' 'T *'
|     | `-BinaryOperator 0x564387e527b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564387e52760 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564387e526f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|     |   | `-DeclRefExpr 0x564387e526d0 <col:14> 'T *' lvalue Var 0x564387e52598 's' 'T *'
|     |   `-DeclRefExpr 0x564387e52790 <col:18> 'const V' lvalue ParmVar 0x564387e2b5c8 'value' 'const V &'
|     `-ReturnStmt 0x564387e52830 <line:725:9, col:17>
|       `-UnaryOperator 0x564387e52818 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564387e52808 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564387e2bb78 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x564387e2b7e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564387e2bad8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x564387e2b890 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e2b910 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564387e2b9b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x564387e53660 <col:65, line:737:5>
|     |-DeclStmt 0x564387e528d8 <line:732:9, col:26>
|     | `-VarDecl 0x564387e52870 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564387e53628 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x564387e53648 <line:733:13, col:58>
|       | `-VarDecl 0x564387e52900 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564387e52ae0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564387e52ab0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564387e52a98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564387e52a78 <col:26, col:58> 'String' (CXXTemporary 0x564387e52a78)
|       |           `-CXXMemberCallExpr 0x564387e52a08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564387e52978 <col:26> '<bound member function type>' ->find 0x564387e4a878
|       |             | `-CXXThisExpr 0x564387e52968 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564387e52a40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e529a8 <col:31> 'const char *' lvalue ParmVar 0x564387e2b890 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564387e52a58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e529c8 <col:40> 'int' lvalue ParmVar 0x564387e2b910 'flags' 'int'
|       |             `-DeclRefExpr 0x564387e529e8 <col:47> 'Args::Slot *' lvalue Var 0x564387e52870 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564387e52b98 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564387e52b80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564387e52b60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564387e52b30 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |       `-ImplicitCastExpr 0x564387e52b18 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564387e52af8 <col:20> 'String' lvalue Var 0x564387e52900 'str' 'String'
|       `-CompoundStmt 0x564387e53608 <col:61, line:736:9>
|         |-DeclStmt 0x564387e53050 <line:734:13, col:76>
|         | `-VarDecl 0x564387e52be8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564387e53020 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564387e52f90 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564387e52fd8 <col:60> 'T' lvalue ParmVar 0x564387e2b9b8 'variable' 'T &'
|         |     `-UnaryOperator 0x564387e53008 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564387e52ff8 <col:71> 'Args *' this
|         `-CallExpr 0x564387e535d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x564387e53078 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|           | `-CXXThisExpr 0x564387e53068 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564387e53598 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564387e530a8 <col:23> 'T *' lvalue Var 0x564387e52be8 's' 'T *'
|           | `-CallExpr 0x564387e53558 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564387e53330 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x564387e53430 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x564387e53450 <col:86> 'String' lvalue Var 0x564387e52900 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564387e53500 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564387e53490 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|           |   | `-DeclRefExpr 0x564387e53470 <col:92> 'T *' lvalue Var 0x564387e52be8 's' 'T *'
|           |   `-UnaryOperator 0x564387e53540 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564387e53530 <col:96> 'Args *' this
|           `-DeclRefExpr 0x564387e535b8 <col:103> 'Args::Slot *' lvalue Var 0x564387e52870 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e2c0c8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564387e2bbe8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e2bc68 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564387e2c028 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564387e2bd28 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e2bda8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564387e2be48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x564387e2bee8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x564387e54500 <col:88, line:745:5>
|     |-DeclStmt 0x564387e536f8 <line:741:9, col:26>
|     | `-VarDecl 0x564387e53690 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564387e53918 <line:742:9, col:55>
|     | `-VarDecl 0x564387e53720 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564387e53900 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564387e538d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564387e538b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564387e53898 <col:22, col:54> 'String' (CXXTemporary 0x564387e53898)
|     |           `-CXXMemberCallExpr 0x564387e53828 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564387e53798 <col:22> '<bound member function type>' ->find 0x564387e4a878
|     |             | `-CXXThisExpr 0x564387e53788 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564387e53860 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564387e537c8 <col:27> 'const char *' lvalue ParmVar 0x564387e2bd28 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564387e53878 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564387e537e8 <col:36> 'int' lvalue ParmVar 0x564387e2bda8 'flags' 'int'
|     |             `-DeclRefExpr 0x564387e53808 <col:43> 'Args::Slot *' lvalue Var 0x564387e53690 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564387e53cf0 <line:743:9, col:72>
|     | `-VarDecl 0x564387e53968 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564387e53cc0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564387e53c30 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564387e53c78 <col:56> 'T' lvalue ParmVar 0x564387e2be48 'variable' 'T &'
|     |     `-UnaryOperator 0x564387e53ca8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564387e53c98 <col:67> 'Args *' this
|     `-CallExpr 0x564387e544d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x564387e53d18 <col:9> '<bound member function type>' ->postparse 0x564387e4aa88
|       | `-CXXThisExpr 0x564387e53d08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564387e54490 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564387e53d48 <col:19> 'T *' lvalue Var 0x564387e53968 's' 'T *'
|       | `-ParenExpr 0x564387e54470 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x564387e54440 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564387e54428 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564387e54410 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564387e543f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564387e543c0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |     |       `-ImplicitCastExpr 0x564387e543a8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564387e53d68 <col:25> 'String' lvalue Var 0x564387e53720 'str' 'String'
|       |     |-CallExpr 0x564387e54218 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564387e53ff0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x564387e540f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x564387e54110 <col:89> 'String' lvalue Var 0x564387e53720 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564387e541c0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564387e54150 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|       |     | | `-DeclRefExpr 0x564387e54130 <col:95> 'T *' lvalue Var 0x564387e53968 's' 'T *'
|       |     | `-UnaryOperator 0x564387e54200 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564387e541f0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x564387e54388 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x564387e54368 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x564387e54338 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564387e542e8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564387e54278 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|       |         | | `-DeclRefExpr 0x564387e54258 <col:109> 'T *' lvalue Var 0x564387e53968 's' 'T *'
|       |         | `-DeclRefExpr 0x564387e54318 <col:113> 'const V' lvalue ParmVar 0x564387e2bee8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564387e54358 <col:120> 'bool' true
|       `-DeclRefExpr 0x564387e544b0 <col:128> 'Args::Slot *' lvalue Var 0x564387e53690 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e2c5f8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x564387e2c140 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e2c1b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e2c558 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564387e2c278 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e2c2f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564387e2c370 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564387e2c418 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x564387e550f8 <col:75, line:754:5>
|     |-DeclStmt 0x564387e545a8 <line:749:9, col:26>
|     | `-VarDecl 0x564387e54540 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564387e550c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x564387e550e0 <line:750:13, col:58>
|       | `-VarDecl 0x564387e545d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564387e547b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564387e54780 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564387e54768 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564387e54748 <col:26, col:58> 'String' (CXXTemporary 0x564387e54748)
|       |           `-CXXMemberCallExpr 0x564387e546d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564387e54648 <col:26> '<bound member function type>' ->find 0x564387e4a878
|       |             | `-CXXThisExpr 0x564387e54638 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564387e54710 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e54678 <col:31> 'const char *' lvalue ParmVar 0x564387e2c278 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564387e54728 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e54698 <col:40> 'int' lvalue ParmVar 0x564387e2c2f8 'flags' 'int'
|       |             `-DeclRefExpr 0x564387e546b8 <col:47> 'Args::Slot *' lvalue Var 0x564387e54540 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564387e54868 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564387e54850 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564387e54830 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564387e54800 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |       `-ImplicitCastExpr 0x564387e547e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564387e547c8 <col:20> 'String' lvalue Var 0x564387e545d0 'str' 'String'
|       `-CompoundStmt 0x564387e550a0 <col:61, line:753:9>
|         |-DeclStmt 0x564387e54c40 <line:751:13, col:63>
|         | `-VarDecl 0x564387e548b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564387e54c10 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564387e54b80 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564387e54bc8 <col:47> 'T' lvalue ParmVar 0x564387e2c418 'variable' 'T &'
|         |     `-UnaryOperator 0x564387e54bf8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564387e54be8 <col:58> 'Args *' this
|         `-CallExpr 0x564387e55070 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x564387e54c68 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|           | `-CXXThisExpr 0x564387e54c58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564387e55030 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564387e54c98 <col:23> 'T *' lvalue Var 0x564387e548b8 's' 'T *'
|           | `-CallExpr 0x564387e54ff0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564387e54e80 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564387e54ec8 <col:56> 'P' lvalue ParmVar 0x564387e2c370 'parser' 'P'
|           |   |-DeclRefExpr 0x564387e54ee8 <col:64> 'String' lvalue Var 0x564387e545d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564387e54f98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564387e54f28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|           |   | `-DeclRefExpr 0x564387e54f08 <col:70> 'T *' lvalue Var 0x564387e548b8 's' 'T *'
|           |   `-UnaryOperator 0x564387e54fd8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564387e54fc8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x564387e55050 <col:81> 'Args::Slot *' lvalue Var 0x564387e54540 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e2cc58 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564387e2c670 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564387e2c6e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x564387e2c768 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564387e2cbb8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564387e2c830 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e2c8b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564387e2c928 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x564387e2c9c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x564387e2ca68 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x564387e58178 <col:98, line:762:5>
|     |-DeclStmt 0x564387e55190 <line:758:9, col:26>
|     | `-VarDecl 0x564387e55128 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564387e553b0 <line:759:9, col:55>
|     | `-VarDecl 0x564387e551b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564387e55398 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564387e55368 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564387e55350 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564387e55330 <col:22, col:54> 'String' (CXXTemporary 0x564387e55330)
|     |           `-CXXMemberCallExpr 0x564387e552c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564387e55230 <col:22> '<bound member function type>' ->find 0x564387e4a878
|     |             | `-CXXThisExpr 0x564387e55220 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564387e552f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564387e55260 <col:27> 'const char *' lvalue ParmVar 0x564387e2c830 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564387e55310 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564387e55280 <col:36> 'int' lvalue ParmVar 0x564387e2c8b0 'flags' 'int'
|     |             `-DeclRefExpr 0x564387e552a0 <col:43> 'Args::Slot *' lvalue Var 0x564387e55128 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564387e57ac0 <line:760:9, col:59>
|     | `-VarDecl 0x564387e55408 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564387e57a90 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564387e57a00 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564387e57a48 <col:43> 'T' lvalue ParmVar 0x564387e2c9c8 'variable' 'T &'
|     |     `-UnaryOperator 0x564387e57a78 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564387e57a68 <col:54> 'Args *' this
|     `-CallExpr 0x564387e58148 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x564387e57ae8 <col:9> '<bound member function type>' ->postparse 0x564387e4aa88
|       | `-CXXThisExpr 0x564387e57ad8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564387e58108 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564387e57b18 <col:19> 'T *' lvalue Var 0x564387e55408 's' 'T *'
|       | `-ParenExpr 0x564387e580e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x564387e580b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564387e580a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564387e58088 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564387e58068 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564387e58038 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |     |       `-ImplicitCastExpr 0x564387e58020 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564387e57b38 <col:25> 'String' lvalue Var 0x564387e551b8 'str' 'String'
|       |     |-CallExpr 0x564387e57e90 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564387e57d20 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x564387e57d68 <col:59> 'P' lvalue ParmVar 0x564387e2c928 'parser' 'P'
|       |     | |-DeclRefExpr 0x564387e57d88 <col:67> 'String' lvalue Var 0x564387e551b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564387e57e38 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564387e57dc8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|       |     | | `-DeclRefExpr 0x564387e57da8 <col:73> 'T *' lvalue Var 0x564387e55408 's' 'T *'
|       |     | `-UnaryOperator 0x564387e57e78 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564387e57e68 <col:77> 'Args *' this
|       |     `-ParenExpr 0x564387e58000 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x564387e57fe0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x564387e57fb0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564387e57f60 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564387e57ef0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|       |         | | `-DeclRefExpr 0x564387e57ed0 <col:87> 'T *' lvalue Var 0x564387e55408 's' 'T *'
|       |         | `-DeclRefExpr 0x564387e57f90 <col:91> 'const V' lvalue ParmVar 0x564387e2ca68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564387e57fd0 <col:98> 'bool' true
|       `-DeclRefExpr 0x564387e58128 <col:106> 'Args::Slot *' lvalue Var 0x564387e55128 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e34ed8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x564387e2ccd8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e2cd58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564387e349f0 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564387e34e38 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564387e34ab0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e34b30 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564387e34ba8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x564387e34c48 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x564387e34ce8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x564387e59158 <col:60, line:773:5>
|     |-DeclStmt 0x564387e58220 <line:767:9, col:26>
|     | `-VarDecl 0x564387e581b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564387e59120 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x564387e59140 <line:768:13, col:58>
|       | `-VarDecl 0x564387e58248 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564387e58428 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564387e583f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564387e583e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564387e583c0 <col:26, col:58> 'String' (CXXTemporary 0x564387e583c0)
|       |           `-CXXMemberCallExpr 0x564387e58350 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564387e582c0 <col:26> '<bound member function type>' ->find 0x564387e4a878
|       |             | `-CXXThisExpr 0x564387e582b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564387e58388 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e582f0 <col:31> 'const char *' lvalue ParmVar 0x564387e34ab0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564387e583a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e58310 <col:40> 'int' lvalue ParmVar 0x564387e34b30 'flags' 'int'
|       |             `-DeclRefExpr 0x564387e58330 <col:47> 'Args::Slot *' lvalue Var 0x564387e581b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564387e584e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564387e584c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564387e584a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564387e58478 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |       `-ImplicitCastExpr 0x564387e58460 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564387e58440 <col:20> 'String' lvalue Var 0x564387e58248 'str' 'String'
|       `-CompoundStmt 0x564387e590f8 <col:61, line:772:9>
|         |-DeclStmt 0x564387e58820 <line:769:13, col:66>
|         | `-VarDecl 0x564387e58538 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x564387e587f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564387e58760 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564387e587a8 <col:49> 'T1' lvalue ParmVar 0x564387e34c48 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x564387e587d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564387e587c8 <col:61> 'Args *' this
|         |-DeclStmt 0x564387e58b90 <line:770:13, col:66>
|         | `-VarDecl 0x564387e588a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x564387e58b60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564387e58ad0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564387e58b18 <col:49> 'T2' lvalue ParmVar 0x564387e34ce8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x564387e58b48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564387e58b38 <col:61> 'Args *' this
|         `-CallExpr 0x564387e590c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x564387e58bb8 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|           | `-CXXThisExpr 0x564387e58ba8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564387e59088 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x564387e58c28 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x564387e58be8 <col:23> 'T1 *' lvalue Var 0x564387e58538 's1' 'T1 *'
|           | | `-DeclRefExpr 0x564387e58c08 <col:29> 'T2 *' lvalue Var 0x564387e588a8 's2' 'T2 *'
|           | `-CallExpr 0x564387e59040 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564387e58e10 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564387e58e58 <col:63> 'P' lvalue ParmVar 0x564387e34ba8 'parser' 'P'
|           |   |-DeclRefExpr 0x564387e58e78 <col:71> 'String' lvalue Var 0x564387e58248 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564387e58f28 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564387e58eb8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|           |   | `-DeclRefExpr 0x564387e58e98 <col:77> 'T1 *' lvalue Var 0x564387e58538 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x564387e58fe8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564387e58f78 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|           |   | `-DeclRefExpr 0x564387e58f58 <col:82> 'T2 *' lvalue Var 0x564387e588a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x564387e59028 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564387e59018 <col:87> 'Args *' this
|           `-DeclRefExpr 0x564387e590a8 <col:94> 'Args::Slot *' lvalue Var 0x564387e581b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e352c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x564387e34f58 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e35228 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564387e35010 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e35090 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564387e35108 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564387e59670 <col:67, line:780:5>
|     |-DeclStmt 0x564387e591f0 <line:777:9, col:26>
|     | `-VarDecl 0x564387e59188 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564387e59638 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x564387e59658 <line:778:13, col:58>
|       | `-VarDecl 0x564387e59218 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564387e593f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564387e593c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564387e593b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564387e59390 <col:26, col:58> 'String' (CXXTemporary 0x564387e59390)
|       |           `-CXXMemberCallExpr 0x564387e59320 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564387e59290 <col:26> '<bound member function type>' ->find 0x564387e4a878
|       |             | `-CXXThisExpr 0x564387e59280 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564387e59358 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e592c0 <col:31> 'const char *' lvalue ParmVar 0x564387e35010 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564387e59370 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564387e592e0 <col:40> 'int' lvalue ParmVar 0x564387e35090 'flags' 'int'
|       |             `-DeclRefExpr 0x564387e59300 <col:47> 'Args::Slot *' lvalue Var 0x564387e59188 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564387e594b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564387e59498 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564387e59478 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564387e59448 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|       |       `-ImplicitCastExpr 0x564387e59430 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564387e59410 <col:20> 'String' lvalue Var 0x564387e59218 'str' 'String'
|       `-CallExpr 0x564387e59608 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x564387e594d8 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|         | `-CXXThisExpr 0x564387e594c8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x564387e595b8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x564387e59528 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x564387e59508 <col:23> 'P' lvalue ParmVar 0x564387e35108 'parser' 'P'
|         | |-DeclRefExpr 0x564387e59570 <col:36> 'String' lvalue Var 0x564387e59218 'str' 'String'
|         | `-UnaryOperator 0x564387e595a0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x564387e59590 <col:42> 'Args *' this
|         `-DeclRefExpr 0x564387e595e8 <col:49> 'Args::Slot *' lvalue Var 0x564387e59188 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564387e35668 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564387e35338 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564387e355c8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564387e353f0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e35470 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564387e354e8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x564387e59fe0 <col:71, line:792:5>
|     |-DeclStmt 0x564387e59708 <line:784:9, col:26>
|     | `-VarDecl 0x564387e596a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564387e597d8 <line:785:9, col:29>
|     | `-VarDecl 0x564387e59738 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564387e597c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564387e597a0 <col:28> 'int' 1
|     |-WhileStmt 0x564387e59e90 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x564387e59eb0 <line:786:16, col:61>
|     | | `-VarDecl 0x564387e59800 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564387e599e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564387e599b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564387e59998 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564387e59978 <col:29, col:61> 'String' (CXXTemporary 0x564387e59978)
|     | |           `-CXXMemberCallExpr 0x564387e59908 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564387e59878 <col:29> '<bound member function type>' ->find 0x564387e4a878
|     | |             | `-CXXThisExpr 0x564387e59868 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564387e59940 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e598a8 <col:34> 'const char *' lvalue ParmVar 0x564387e353f0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564387e59958 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e598c8 <col:43> 'int' lvalue ParmVar 0x564387e35470 'flags' 'int'
|     | |             `-DeclRefExpr 0x564387e598e8 <col:50> 'Args::Slot *' lvalue Var 0x564387e596a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564387e59a98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564387e59a80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564387e59a60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564387e59a30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|     | |       `-ImplicitCastExpr 0x564387e59a18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564387e599f8 <col:23> 'String' lvalue Var 0x564387e59800 'str' 'String'
|     | `-CompoundStmt 0x564387e59e68 <col:64, line:790:9>
|     |   |-CallExpr 0x564387e59bf0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x564387e59ac0 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|     |   | | `-CXXThisExpr 0x564387e59ab0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564387e59ba0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564387e59b10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564387e59af0 <col:23> 'P' lvalue ParmVar 0x564387e354e8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564387e59b58 <col:36> 'String' lvalue Var 0x564387e59800 'str' 'String'
|     |   | | `-UnaryOperator 0x564387e59b88 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564387e59b78 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x564387e59bd0 <col:49> 'Args::Slot *' lvalue Var 0x564387e596a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564387e59d88 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564387e59c20 <col:13> 'int' lvalue Var 0x564387e59738 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564387e59d70 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564387e59d50 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564387e59cb8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564387e59c98 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564387e59c80 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564387e59c40 <col:28> 'int' lvalue Var 0x564387e59738 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564387e59c60 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564387e59d38 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564387e59d08 <col:49> 'bool' lvalue ->_read_status 0x564387d2d800
|     |   |         `-ImplicitCastExpr 0x564387e59ce8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564387e59cd8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564387e59e38 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564387e59da8 <col:13> 'int' lvalue ParmVar 0x564387e35470 'flags' 'int'
|     |     `-UnaryOperator 0x564387e59e20 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564387e59e08 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564387e59de8 <col:23> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564387e59fc0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564387e59ef8 <col:9> 'bool' lvalue ->_read_status 0x564387d2d800
|       | `-ImplicitCastExpr 0x564387e59ed8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564387e59ec8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564387e59fa0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564387e59f80 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564387e59f68 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564387e59f28 <col:25> 'int' lvalue Var 0x564387e59738 'read_status' 'int'
|           `-IntegerLiteral 0x564387e59f48 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564387e35b48 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564387e356d8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e35758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e35aa8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564387e35818 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e35898 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564387e35910 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x564387e359b8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x564387e5af70 <col:84, line:805:5>
|     |-DeclStmt 0x564387e5a088 <line:796:9, col:26>
|     | `-VarDecl 0x564387e5a020 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564387e5a158 <line:797:9, col:29>
|     | `-VarDecl 0x564387e5a0b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564387e5a140 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564387e5a120 <col:28> 'int' 1
|     |-DeclStmt 0x564387e5a490 <line:798:9, col:71>
|     | `-VarDecl 0x564387e5a1a8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564387e5a460 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564387e5a3d0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x564387e5a418 <col:55> 'T' lvalue ParmVar 0x564387e359b8 'variable' 'T &'
|     |     `-UnaryOperator 0x564387e5a448 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564387e5a438 <col:66> 'Args *' this
|     |-WhileStmt 0x564387e5ae20 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x564387e5ae40 <line:799:16, col:61>
|     | | `-VarDecl 0x564387e5a4b8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564387e5a698 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564387e5a668 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564387e5a650 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564387e5a630 <col:29, col:61> 'String' (CXXTemporary 0x564387e5a630)
|     | |           `-CXXMemberCallExpr 0x564387e5a5c0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564387e5a530 <col:29> '<bound member function type>' ->find 0x564387e4a878
|     | |             | `-CXXThisExpr 0x564387e5a520 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564387e5a5f8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e5a560 <col:34> 'const char *' lvalue ParmVar 0x564387e35818 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564387e5a610 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e5a580 <col:43> 'int' lvalue ParmVar 0x564387e35898 'flags' 'int'
|     | |             `-DeclRefExpr 0x564387e5a5a0 <col:50> 'Args::Slot *' lvalue Var 0x564387e5a020 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564387e5a750 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564387e5a738 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564387e5a718 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564387e5a6e8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|     | |       `-ImplicitCastExpr 0x564387e5a6d0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564387e5a6b0 <col:23> 'String' lvalue Var 0x564387e5a4b8 'str' 'String'
|     | `-CompoundStmt 0x564387e5adf8 <col:64, line:803:9>
|     |   |-CallExpr 0x564387e5ab80 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x564387e5a778 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|     |   | | `-CXXThisExpr 0x564387e5a768 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x564387e5ab40 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x564387e5a7a8 <col:23> 'T *' lvalue Var 0x564387e5a1a8 's' 'T *'
|     |   | | `-CallExpr 0x564387e5ab00 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x564387e5a990 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x564387e5a9d8 <col:56> 'P' lvalue ParmVar 0x564387e35910 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x564387e5a9f8 <col:64> 'String' lvalue Var 0x564387e5a4b8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x564387e5aaa8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x564387e5aa38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|     |   | |   | `-DeclRefExpr 0x564387e5aa18 <col:70> 'T *' lvalue Var 0x564387e5a1a8 's' 'T *'
|     |   | |   `-UnaryOperator 0x564387e5aae8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x564387e5aad8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x564387e5ab60 <col:81> 'Args::Slot *' lvalue Var 0x564387e5a020 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564387e5ad18 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564387e5abb0 <col:13> 'int' lvalue Var 0x564387e5a0b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564387e5ad00 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564387e5ace0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564387e5ac48 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564387e5ac28 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564387e5ac10 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564387e5abd0 <col:28> 'int' lvalue Var 0x564387e5a0b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564387e5abf0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564387e5acc8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564387e5ac98 <col:49> 'bool' lvalue ->_read_status 0x564387d2d800
|     |   |         `-ImplicitCastExpr 0x564387e5ac78 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564387e5ac68 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564387e5adc8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564387e5ad38 <col:13> 'int' lvalue ParmVar 0x564387e35898 'flags' 'int'
|     |     `-UnaryOperator 0x564387e5adb0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564387e5ad98 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564387e5ad78 <col:23> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564387e5af50 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564387e5ae88 <col:9> 'bool' lvalue ->_read_status 0x564387d2d800
|       | `-ImplicitCastExpr 0x564387e5ae68 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564387e5ae58 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564387e5af30 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564387e5af10 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564387e5aef8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564387e5aeb8 <col:25> 'int' lvalue Var 0x564387e5a0b8 'read_status' 'int'
|           `-IntegerLiteral 0x564387e5aed8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564387e36128 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x564387e35bc0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564387e35c38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564387e36088 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564387e35cf8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564387e35d78 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x564387e35df0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x564387e35f40 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x564387e5bd78 <col:87, line:821:5>
|     |-DeclStmt 0x564387e5b020 <line:809:9, col:26>
|     | `-VarDecl 0x564387e5afb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564387e5b0f0 <line:810:9, col:29>
|     | `-VarDecl 0x564387e5b050 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564387e5b0d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564387e5b0b8 <col:28> 'int' 1
|     |-DeclStmt 0x564387e5b338 <line:811:9, col:38>
|     | `-VarDecl 0x564387e5b220 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x564387e5b310 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564387e5b298 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564387e5b2f0 <col:29> 'Vector<T>' lvalue ParmVar 0x564387e35f40 'variable' 'Vector<T> &'
|     |-WhileStmt 0x564387e5bc28 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x564387e5bc48 <line:812:16, col:61>
|     | | `-VarDecl 0x564387e5b360 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564387e5b540 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564387e5b510 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564387e5b4f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564387e5b4d8 <col:29, col:61> 'String' (CXXTemporary 0x564387e5b4d8)
|     | |           `-CXXMemberCallExpr 0x564387e5b468 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564387e5b3d8 <col:29> '<bound member function type>' ->find 0x564387e4a878
|     | |             | `-CXXThisExpr 0x564387e5b3c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564387e5b4a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e5b408 <col:34> 'const char *' lvalue ParmVar 0x564387e35cf8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564387e5b4b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564387e5b428 <col:43> 'int' lvalue ParmVar 0x564387e35d78 'flags' 'int'
|     | |             `-DeclRefExpr 0x564387e5b448 <col:50> 'Args::Slot *' lvalue Var 0x564387e5afb8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564387e5b5f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564387e5b5e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564387e5b5c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564387e5b590 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564387b7dff8
|     | |       `-ImplicitCastExpr 0x564387e5b578 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564387e5b558 <col:23> 'String' lvalue Var 0x564387e5b360 'str' 'String'
|     | `-CompoundStmt 0x564387e5bbf0 <col:64, line:819:9>
|     |   |-DeclStmt 0x564387e5b6b8 <line:813:13, col:23>
|     |   | `-VarDecl 0x564387e5b620 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x564387e5b698 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x564387e5b838 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x564387e5b6e0 <col:13> '<bound member function type>' ->postparse 0x564387e4aa88
|     |   | | `-CXXThisExpr 0x564387e5b6d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564387e5b7e0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564387e5b730 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564387e5b710 <col:23> 'P' lvalue ParmVar 0x564387e35df0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564387e5b778 <col:36> 'String' lvalue Var 0x564387e5b360 'str' 'String'
|     |   | | |-DeclRefExpr 0x564387e5b798 <col:41> 'T' lvalue Var 0x564387e5b620 'sx' 'T'
|     |   | | `-UnaryOperator 0x564387e5b7c8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564387e5b7b8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x564387e5b818 <col:53> 'Args::Slot *' lvalue Var 0x564387e5afb8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x564387e5b990 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x564387e5b8c8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x564387e5b898 <col:17> 'bool' lvalue ->_read_status 0x564387d2d800
|     |   | |   `-ImplicitCastExpr 0x564387e5b878 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x564387e5b868 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x564387e5b968 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x564387e5b900 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x564387e5b8e0 <col:17> 'Vector<T> *' lvalue Var 0x564387e5b220 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x564387e5b948 <col:30> 'T' lvalue Var 0x564387e5b620 'sx' 'T'
|     |   |-BinaryOperator 0x564387e5bb10 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564387e5b9a8 <col:13> 'int' lvalue Var 0x564387e5b050 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564387e5baf8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564387e5bad8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564387e5ba40 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564387e5ba20 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564387e5ba08 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564387e5b9c8 <col:28> 'int' lvalue Var 0x564387e5b050 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564387e5b9e8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564387e5bac0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564387e5ba90 <col:49> 'bool' lvalue ->_read_status 0x564387d2d800
|     |   |         `-ImplicitCastExpr 0x564387e5ba70 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564387e5ba60 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564387e5bbc0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564387e5bb30 <col:13> 'int' lvalue ParmVar 0x564387e35d78 'flags' 'int'
|     |     `-UnaryOperator 0x564387e5bba8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564387e5bb90 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564387e5bb70 <col:23> 'const int' lvalue Var 0x564387e1e6d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564387e5bd58 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564387e5bc90 <col:9> 'bool' lvalue ->_read_status 0x564387d2d800
|       | `-ImplicitCastExpr 0x564387e5bc70 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564387e5bc60 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564387e5bd38 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564387e5bd18 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564387e5bd00 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564387e5bcc0 <col:25> 'int' lvalue Var 0x564387e5b050 'read_status' 'int'
|           `-IntegerLiteral 0x564387e5bce0 <col:40> 'int' 1
|-AccessSpecDecl 0x564387e361a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x564387e361c8 prev 0x564387e1c9d8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x564387e362c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x564387e363b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x564387e5bdb0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x564387e364a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x564387e5bdc0 <col:25, line:830:9>
| |-CXXMethodDecl 0x564387e365a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x564387e36650 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x564387e366f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564387e366f8
| | `-ParmVarDecl 0x564387e36808 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x564387e36fc8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564387e36fc8
|   `-ParmVarDecl 0x564387e370d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x564387e36878 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x564387e369d8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x564387e36bd0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x564387e36a80 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x564387e36af8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x564387e5bfa0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x564387e36e88 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x564387e5be10 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x564387e5bdd0 <col:20> 'void *' lvalue ParmVar 0x564387e36a80 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x564387e36ef0 '_slot' 'char *'
| | | `-CXXNewExpr 0x564387e5be98 <col:32, col:45> 'char *' array Function 0x56438799d2d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x564387e5be80 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x564387e5be50 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x564387e36af8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x564387e36f50 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x564387e5bf60 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x564387e5bf20 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x564387e36af8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x564387e5c020 <col:61, line:838:9>
| |-CXXDestructorDecl 0x564387e36cd0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x564387e364a0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x564387e5c0a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x564387e5c088 <line:840:13, col:22> 'void' array Function 0x56438799d638 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x564387e5c070 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x564387e5c040 <col:22> 'char *' lvalue ->_slot 0x564387e36ef0
| |         `-CXXThisExpr 0x564387e5c030 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x564387e36dd0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x564387e365a0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x564387e5c298 <col:22, line:844:9>
| |   `-CallExpr 0x564387e5c200 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x564387e5c1e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x564387e5c1c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x564387acf6c8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x564387e5c238 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x564387e5c118 <col:20> 'void *' lvalue ->_ptr 0x564387e36e88
| |     |   `-CXXThisExpr 0x564387e5c108 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x564387e5c268 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x564387e5c250 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x564387e5c158 <col:26> 'char *' lvalue ->_slot 0x564387e36ef0
| |     |     `-CXXThisExpr 0x564387e5c148 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x564387e5c280 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x564387e5c198 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x564387e36f50
| |         `-CXXThisExpr 0x564387e5c188 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x564387e36e88 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x564387e36ef0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x564387e36f50 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x564387e37148 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564387e37148
| | `-ParmVarDecl 0x564387e37258 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x564387e372f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564387e372f8
|   `-ParmVarDecl 0x564387e37408 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x564387e375a8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x564387e37478 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x564387e37518 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x564387e37840 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x564387e37a38 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x564387e37908 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x564387e37bb8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x564387e5c2d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x564387e5c2b0 <col:20> 'T *' lvalue ParmVar 0x564387e37908 'ptr' 'T *'
|   | `-CompoundStmt 0x564387e5c320 <col:25, line:854:9>
|   |-CXXMethodDecl 0x564387e37b08 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x564387e365a0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x564387e5c4d0 <col:22, line:857:9>
|   |   `-CallExpr 0x564387e5c4a0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x564387e5c330 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x564387b66dd8 0x564387b0fc88
|   |     |-CXXOperatorCallExpr 0x564387e5c430 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x564387e5c3c0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564387d6e6c8 0x564387d6e2e8 0x564387d6df18 0x564387d6db38 0x564387d6d758 0x564387d6d388
|   |     | `-MemberExpr 0x564387e5c390 <col:29> 'T *' lvalue ->_ptr 0x564387e37bb8
|   |     |   `-CXXThisExpr 0x564387e5c380 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x564387e5c470 <col:35> 'T' lvalue ->_slot 0x564387e37c18
|   |       `-CXXThisExpr 0x564387e5c460 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x564387e37bb8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x564387e37c18 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x564387e37c80 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x564387e37d80 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x564387e37dd0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387e37d60 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x564387e37d40 <col:31> 'int' 48
|-FieldDecl 0x564387e37df8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x564387e37e58 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x564387e37eb8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x564387e37ff0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x564387e4a120 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x564387e4a180 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x564387e4a230 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x564387e4a458 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x564387e4a360 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x564387e4a5a8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x564387e4a518 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x564387e4a878 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x564387e4a668 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x564387e4a6e8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x564387e4a790 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x564387e4aa88 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x564387e4a940 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x564387e4a9b8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x564387e4ab58 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x564387e4aca8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x564387e4ac10 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x564387e4b038 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x564387e4ad68 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x564387e4ade8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x564387e4ae90 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x564387e4af48 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x564387e4b260 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x564387e4b110 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x564387e4b188 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x564387e4b578 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x564387e4b310 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x564387e4b4d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x564387e4b3e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387bbffd0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387bc00e8 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x564387bc0178 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x564387bc0288 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x564387bc01b8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x564387bc06b8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x564387bc0780 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x564387bc0740 <col:9> 'int' lvalue ParmVar 0x564387bc01b8 'p' 'int'
| `-CompoundStmt 0x564387bc0d48 <col:12, line:412:5>
|   `-ParenExpr 0x564387bc0d28 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x564387bc0cf8 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x564387bc0928 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x564387bc08f8 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x564387bc0840 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x564387bc0828 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x564387bc07d8 <col:23> 'int' lvalue ->ip_p 0x564387bc06b8
|       |   | |   `-CXXThisExpr 0x564387bc07c8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x564387bc0808 <col:30> 'int' 0
|       |   `-BinaryOperator 0x564387bc08d8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x564387bc08c0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x564387bc0870 <col:35> 'int' lvalue ->ip_p 0x564387bc06b8
|       |     |   `-CXXThisExpr 0x564387bc0860 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x564387bc08a0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x564387bc0988 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x564387bc0968 <col:55> 'int' 0
|       `-CallExpr 0x564387bc0c58 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x564387bc0c40 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564387bc0c20 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x564387bc0c98 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564387bc0a78 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x564387bc0cb0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564387bc0ae8 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x564387bc0cc8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x564387bc0b20 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x564387bc0ce0 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x564387bc0c08 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x564387bc0bf0 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x564387bc0bb8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x564387bc05e8 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x564387bc0348 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x564387bc0418 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x564387bc0490 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564387bc0720 <col:34> 'const ArgContext' lvalue Var 0x564387bacc10 'blank_args' 'const ArgContext'
|-FieldDecl 0x564387bc06b8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x564387e90888 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x564387e90888
| `-ParmVarDecl 0x564387e90998 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x564387e90a38 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387e90b48 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x564387bc06b8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x564387e91350 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564387e91320 <col:7> 'int' xvalue .ip_p 0x564387bc06b8
| |     `-CXXStaticCastExpr 0x564387e912f0 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x564387e912c0 <col:7> 'IPPortArg' lvalue ParmVar 0x564387e90b48 '' 'IPPortArg &&'
| `-CompoundStmt 0x564387e91398 <col:7>
`-CXXDestructorDecl 0x564387e90be8 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387d84028 prev 0x564387d79230 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387d84120 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x564387d84210 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x564387d84338 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x564387d844b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x564387d84638 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x564387d847b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x564387d955e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564387d95e58 <col:11>
|-CXXDestructorDecl 0x564387d956c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564387d957f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564387d957f8
| `-ParmVarDecl 0x564387d95908 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x564387d959a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564387d959a8
| `-ParmVarDecl 0x564387d95ab8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x564387d98878 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x564387d98988 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x564387d98c08 <col:11>
|   `-ReturnStmt 0x564387d98bf8 <col:11>
|     `-UnaryOperator 0x564387d98be0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564387d98bd0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x564387d989f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564387d989f8
  `-ParmVarDecl 0x564387d98b08 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387d84820 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387d84938 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x564387d849d8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x564387d84a40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x564387d84aa8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x564387d84b10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x564387d84b70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x564387d84c30 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x564387d84c90 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x564387d84cf0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x564387d954f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x564387d849d8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x564387d95e68 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x564387d95ec0 <col:12>
|-CXXConstructorDecl 0x564387d95b28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564387d95b28
| `-ParmVarDecl 0x564387d95c38 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x564387d95cd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564387d95cd8
| `-ParmVarDecl 0x564387d95de8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x564387d97f60 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387d72940 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564387d72a58 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x564387d72ae8 <col:16, col:22> col:16 public
|-EnumDecl 0x564387d72b10 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x564387d72c10 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x564387d72cf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d72bf0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x564387d72bd0 <col:21> 'int' 28
| `-EnumConstantDecl 0x564387d72ca0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x564387d72d08 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387d72c80 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x564387d72c60 <col:22> 'int' 64
|-CXXMethodDecl 0x564387d73048 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x564387d72d30 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387d72db0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x564387d72e28 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387d72ea0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d73108 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564387d73308 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x564387d73180 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x564387d731f8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d733b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564387d73518 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x564387d73428 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d735c0 <col:72> warn_unused_result ""
|-TypedefDecl 0x564387d73920 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x564387d738b0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x564387d73850 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x564387d73810 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56438784a2d0 'void'
|       |-PointerType 0x564387a824e0 'unsigned char *'
|       | `-BuiltinType 0x56438784a3d0 'unsigned char'
|       |-TypedefType 0x5643878ef320 'size_t' sugar
|       | |-Typedef 0x5643878bab20 'size_t'
|       | `-BuiltinType 0x56438784a430 'unsigned long'
|       `-PointerType 0x56438784aad0 'void *'
|         `-BuiltinType 0x56438784a2d0 'void'
|-CXXMethodDecl 0x564387d73d98 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x564387d73990 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x564387d73a08 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387d73aa0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x564387d73b20 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x564387d8e490 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x564387d8e478 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x564387d8e440 <col:58> 'int' 0
| |-ParmVarDecl 0x564387d73ba0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x564387d8e4b8 <col:76> 'int' 0
| |-ParmVarDecl 0x564387d73c20 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x564387d8e4d8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x564387d73e68 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x564387d73ee8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564387d73fa8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x564387d74048 <col:20>
| `-OptimizeNoneAttr 0x564387d740a0 <col:30>
|-CXXMethodDecl 0x564387d74118 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x564387d741b8 <col:20>
| `-OptimizeNoneAttr 0x564387d74210 <col:30>
|-CXXMethodDecl 0x564387d74288 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x564387d74328 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x564387d743d8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x564387d74478 <col:20>
| |-OptimizeNoneAttr 0x564387d744d0 <col:30>
| `-WarnUnusedResultAttr 0x564387d744f8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x564387d74550 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x564387d745f0 <col:20>
| `-OptimizeNoneAttr 0x564387d74648 <col:30>
|-CXXMethodDecl 0x564387d74698 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x564387d74738 <col:20>
| `-OptimizeNoneAttr 0x564387d74790 <col:30>
|-CXXMethodDecl 0x564387d747d8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x564387d74878 <col:20>
| `-OptimizeNoneAttr 0x564387d748d0 <col:30>
|-CXXMethodDecl 0x564387d74918 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d749d8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d74aa0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564387d74b68 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564387d74c28 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d74d48 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x564387d8e5a0 <col:54, line:99:5>
|   `-ReturnStmt 0x564387d8e590 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x564387d8e578 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x564387d8e548 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564387d85028
|         `-CXXThisExpr 0x564387d8e538 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x564387d74ee8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x564387d74df8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x564387d8e650 <col:67, line:103:5>
|   `-BinaryOperator 0x564387d8e630 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564387d8e5c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564387d85028
|     | `-CXXThisExpr 0x564387d8e5b8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564387d8e618 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x564387d8e5f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x564387d74df8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x564387d74fe0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x564387d8e6d0 <col:33, line:107:5>
|   `-ReturnStmt 0x564387d8e6c0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x564387d8e6a8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x564387d8e678 <col:16> 'void *' lvalue ->_destructor_argument 0x564387d85090
|         `-CXXThisExpr 0x564387d8e668 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564387d750a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x564387d8ed00 <col:25, line:113:5>
|   |-ParenExpr 0x564387d8ea48 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x564387d8ea18 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x564387d8e788 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564387d8e760 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x564387d8e728 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x564387d8e6f8 <col:24> '<bound member function type>' ->shared 0x564387d74118
|   |   |       `-ImplicitCastExpr 0x564387d8e748 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x564387d8e6e8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564387d8e7e8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d8e7c8 <col:42> 'int' 0
|   |   `-CallExpr 0x564387d8e978 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x564387d8e960 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d8e940 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d8e9b8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8e858 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x564387d8e9d0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8e880 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d8e9e8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d8e8b8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x564387d8ea00 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d8e928 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d8e910 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d8e8d8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x564387d8ec48 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x564387d8ea78 <col:2> 'unsigned char *' lvalue ->_head 0x564387d84e30
|   | | `-CXXThisExpr 0x564387d8ea68 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x564387d8ec30 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x564387d8ec10 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x564387d8eab8 <col:10> 'unsigned char *' lvalue ->_data 0x564387d84e98
|   |     | `-CXXThisExpr 0x564387d8eaa8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x564387d8ebf8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x564387d8ebd8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x564387d8eaf8 <col:18> 'unsigned char *' lvalue ->_tail 0x564387d84f00
|   |         | `-CXXThisExpr 0x564387d8eae8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x564387d8ebc0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x564387d8eba0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x564387d8eb38 <col:26> 'unsigned char *' lvalue ->_end 0x564387d84f68
|   |             | `-CXXThisExpr 0x564387d8eb28 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x564387d8eb88 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x564387d8eb68 <col:33> 'int' 0
|   `-BinaryOperator 0x564387d8ece0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564387d8ec78 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564387d85028
|     | `-CXXThisExpr 0x564387d8ec68 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564387d8ecc8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x564387d8eca8 <col:16> 'int' 0
|-CXXMethodDecl 0x564387d751e0 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564387d75150 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d75288 <col:20>
| |-OptimizeNoneAttr 0x564387d752e0 <col:30>
| `-WarnUnusedResultAttr 0x564387d75308 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564387d753d8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564387d75348 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d75480 <col:20>
| |-OptimizeNoneAttr 0x564387d754d8 <col:30>
| `-WarnUnusedResultAttr 0x564387d75500 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x564387d75638 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564387d75540 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d756e0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x564387d757e0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x564387d75750 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d75888 <col:20>
| `-OptimizeNoneAttr 0x564387d758e0 <col:30>
|-CXXMethodDecl 0x564387d759a8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564387d75918 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d75a50 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x564387d75b50 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564387d75ac0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564387d75bf8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564387d75cf8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x564387d75c68 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d75da0 <col:20>
| `-OptimizeNoneAttr 0x564387d75df8 <col:30>
|-CXXMethodDecl 0x564387d75f88 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x564387d75e38 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x564387d75eb0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x564387d8e4f8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x564387d76038 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x564387d76238 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564387d760b0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x564387d76128 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d76448 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564387d762f8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564387d76370 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d76658 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x564387d76508 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x564387d76588 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x564387d8e508 <col:39> 'int' 0
|-CXXMethodDecl 0x564387d76728 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x564387d767f0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564387d768b8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x564387d76978 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d76a40 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x564387d76b88 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x564387d76af8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x564387d76d58 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564387d76c48 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x564387d76cc0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d76e28 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x564387d76ee8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x564387d76f88 <col:20>
| `-OptimizeNoneAttr 0x564387d76fe0 <col:30>
|-CXXMethodDecl 0x564387d77030 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564387d770d0 <col:20>
| `-OptimizeNoneAttr 0x564387d77128 <col:30>
|-CXXMethodDecl 0x564387d77178 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x564387d77238 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d77300 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x564387d773a0 <col:20>
| `-OptimizeNoneAttr 0x564387d773f8 <col:30>
|-CXXMethodDecl 0x564387d77548 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564387d77438 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x564387d774b0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d77698 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x564387d77608 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d77770 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x564387d77830 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x564387d778d0 <col:20>
| `-OptimizeNoneAttr 0x564387d77928 <col:30>
|-CXXMethodDecl 0x564387d77978 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564387d77a18 <col:20>
| `-OptimizeNoneAttr 0x564387d77a70 <col:30>
|-CXXMethodDecl 0x564387d77ac0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x564387d77b88 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x564387d77c28 <col:20>
| `-OptimizeNoneAttr 0x564387d77c80 <col:30>
|-CXXMethodDecl 0x564387d77cc8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x564387d77de8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x564387d77f58 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x564387d77e98 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x564387d78048 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x564387d780e8 <col:20>
| `-OptimizeNoneAttr 0x564387d78140 <col:30>
|-CXXMethodDecl 0x564387d78190 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x564387d78250 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564387d78488 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x564387d78300 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x564387d78378 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d78538 <col:20>
| `-OptimizeNoneAttr 0x564387d78590 <col:30>
|-CXXMethodDecl 0x564387d78638 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x564387d786d8 <col:20>
| `-OptimizeNoneAttr 0x564387d78730 <col:30>
|-CXXMethodDecl 0x564387d78780 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x564387d78820 <col:20>
| `-OptimizeNoneAttr 0x564387d78878 <col:30>
|-CXXMethodDecl 0x564387d788c0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x564387d78960 <col:20>
| `-OptimizeNoneAttr 0x564387d789b8 <col:30>
|-CXXMethodDecl 0x564387d78ab8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x564387d789f0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x564387d78b60 <col:20>
| `-OptimizeNoneAttr 0x564387d78bb8 <col:30>
|-CXXMethodDecl 0x564387d78d78 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x564387d78bf0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x564387d78c68 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d78e28 <col:20>
| `-OptimizeNoneAttr 0x564387d78e80 <col:30>
|-CXXMethodDecl 0x564387d78f28 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x564387d79048 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x564387d79168 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x564387d79208 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x564387d79230 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x564387d79358 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x564387d793f8 <col:20>
| `-OptimizeNoneAttr 0x564387d79450 <col:30>
|-CXXMethodDecl 0x564387d794f8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x564387d79598 <col:20>
| `-OptimizeNoneAttr 0x564387d795f0 <col:30>
|-AccessSpecDecl 0x564387d79618 <line:344:3, col:9> col:3 public
|-EnumDecl 0x564387d79640 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x564387d79740 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x564387d79790 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387d79720 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x564387d79700 <col:14> 'int' 48
|-CXXMethodDecl 0x564387d797f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x564387d79898 <col:20>
| `-OptimizeNoneAttr 0x564387d798f0 <col:30>
|-CXXMethodDecl 0x564387d79968 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x564387d79a08 <col:20>
| `-OptimizeNoneAttr 0x564387d79a60 <col:30>
|-CXXMethodDecl 0x564387d79b28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564387d79a98 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x564387d79cc8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x564387d79e68 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x564387d79d78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x564387d79f10 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x564387d7a010 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a3c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d79ff0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x564387d79fd0 <col:9> 'int' 0
| |-EnumConstantDecl 0x564387d7a0a0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a3d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7a080 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x564387d7a060 <col:14> 'int' 1
| |-EnumConstantDecl 0x564387d7a130 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a3f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7a110 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x564387d7a0f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x564387d7a1c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a408 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7a1a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x564387d7a180 <col:14> 'int' 3
| |-EnumConstantDecl 0x564387d7a250 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a420 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7a230 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x564387d7a210 <col:13> 'int' 4
| |-EnumConstantDecl 0x564387d7a2e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564387d7a438 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7a2c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x564387d7a2a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x564387d7a370 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x564387d7a450 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387d7a350 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x564387d7a330 <col:14> 'int' 6
|-CXXMethodDecl 0x564387d7a4b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x564387d7a558 <col:20>
| `-OptimizeNoneAttr 0x564387d7a5b0 <col:30>
|-CXXMethodDecl 0x564387d7a6a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x564387d7a5e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x564387d7a750 <col:20>
| `-OptimizeNoneAttr 0x564387d7a7a8 <col:30>
|-CXXMethodDecl 0x564387d7a818 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x564387d7a940 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x564387d7aab8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x564387d7a9f0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x564387d7ab80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x564387d7ac48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x564387d7ad88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x564387d7acf8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x564387d7ae30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x564387d7af30 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564387d7b130 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7af10 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x564387d7aef0 <col:23> 'int' 0
| |-EnumConstantDecl 0x564387d7afc0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564387d7b148 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7afa0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x564387d7af80 <col:45> 'int' 4
| |-EnumConstantDecl 0x564387d7b050 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564387d7b160 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7b030 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x564387d7b010 <col:24> 'int' 0
| `-EnumConstantDecl 0x564387d7b0e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x564387d7b178 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387d7b0c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x564387d7b0a0 <col:47> 'int' 16
|-CXXMethodDecl 0x564387d7b1d8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x564387d7b348 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x564387d7b288 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x564387d7b3f0 <col:20>
| `-OptimizeNoneAttr 0x564387d7b448 <col:30>
|-CXXMethodDecl 0x564387d7b498 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x564387d8ee20 <col:18, col:36>
|   `-ReturnStmt 0x564387d8ee10 <col:20, col:33>
|     `-ImplicitCastExpr 0x564387d8edf8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x564387d8edd8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x564387d8eda8 <col:27> '<bound member function type>' ->xanno 0x564387d794f8
|           `-CXXThisExpr 0x564387d8ed98 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x564387d7b590 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x564387d8ef30 <col:30, col:48>
|   `-ReturnStmt 0x564387d8ef20 <col:32, col:45>
|     `-ImplicitCastExpr 0x564387d8ef08 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x564387d8eee8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x564387d8eeb8 <col:39> '<bound member function type>' ->xanno 0x564387d79358
|           `-CXXThisExpr 0x564387d8eea8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x564387d7b678 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x564387d8f0c8 <col:24, col:50>
|   `-ReturnStmt 0x564387d8f0b8 <col:26, col:47>
|     `-UnaryOperator 0x564387d8f0a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564387d8f080 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x564387d8f068 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564387d8f018 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x564387d84338
|         |   `-CXXMemberCallExpr 0x564387d8eff8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x564387d8efc8 <col:34> '<bound member function type>' ->xanno 0x564387d794f8
|         |       `-CXXThisExpr 0x564387d8efb8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x564387d8f048 <col:46> 'int' 0
|-CXXMethodDecl 0x564387d7b780 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x564387d8f298 <col:36, col:62>
|   `-ReturnStmt 0x564387d8f288 <col:38, col:59>
|     `-UnaryOperator 0x564387d8f270 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564387d8f250 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564387d8f238 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564387d8f1b0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x564387d84338
|         |   `-CXXMemberCallExpr 0x564387d8f190 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564387d8f160 <col:46> '<bound member function type>' ->xanno 0x564387d79358
|         |       `-CXXThisExpr 0x564387d8f150 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564387d8f1e0 <col:58> 'int' 0
|-CXXMethodDecl 0x564387d7b898 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x564387d8f430 <col:26, col:53>
|   `-ReturnStmt 0x564387d8f420 <col:28, col:50>
|     `-UnaryOperator 0x564387d8f408 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564387d8f3e8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x564387d8f3d0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564387d8f380 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x564387d84638
|         |   `-CXXMemberCallExpr 0x564387d8f360 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x564387d8f330 <col:36> '<bound member function type>' ->xanno 0x564387d794f8
|         |       `-CXXThisExpr 0x564387d8f320 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x564387d8f3b0 <col:49> 'int' 0
|-CXXMethodDecl 0x564387d7b9b8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x564387d8f608 <col:38, col:65>
|   `-ReturnStmt 0x564387d8f5f8 <col:40, col:62>
|     `-UnaryOperator 0x564387d8f5e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564387d8f5c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x564387d8f5a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564387d8f518 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x564387d84638
|         |   `-CXXMemberCallExpr 0x564387d8f4f8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564387d8f4c8 <col:48> '<bound member function type>' ->xanno 0x564387d79358
|         |       `-CXXThisExpr 0x564387d8f4b8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564387d8f548 <col:61> 'int' 0
|-CXXMethodDecl 0x564387d7bb68 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x564387d7ba70 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x564387d8fcd8 <col:34, line:463:5>
|   |-ParenExpr 0x564387d8fb20 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x564387d8faf0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564387d8f758 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d8f728 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d8f678 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d8f660 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d8f620 <col:23> 'int' lvalue ParmVar 0x564387d7ba70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d8f640 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d8f708 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d8f6d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d8f698 <col:33> 'int' lvalue ParmVar 0x564387d7ba70 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564387d8f6f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564387d8f6b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564387d8f7b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d8f798 <col:56> 'int' 0
|   |   `-CallExpr 0x564387d8fa50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564387d8fa38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d8fa18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d8fa90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8f8a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564387d8faa8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8f8d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d8fac0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d8f910 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x564387d8fad8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d8fa00 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d8f9e8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d8f9a8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x564387d8fcc8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x564387d8fcb0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x564387d8fc90 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564387d8fc60 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564387d8fc10 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x564387d84338
|         |   `-CXXMemberCallExpr 0x564387d8fbf0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564387d8fbc0 <col:9> '<bound member function type>' ->xanno 0x564387d79358
|         |       `-CXXThisExpr 0x564387d8fbb0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x564387d8fc78 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x564387d8fc40 <col:21> 'int' lvalue ParmVar 0x564387d7ba70 'i' 'int'
|-CXXMethodDecl 0x564387d7bdb8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x564387d7bc28 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x564387d7bca0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564387d90368 <col:40, line:472:5>
|   |-ParenExpr 0x564387d90180 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x564387d90150 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564387d8fe30 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d8fe00 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d8fd50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d8fd38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d8fcf8 <col:23> 'int' lvalue ParmVar 0x564387d7bc28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d8fd18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d8fde0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d8fdb0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d8fd70 <col:33> 'int' lvalue ParmVar 0x564387d7bc28 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564387d8fdc8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564387d8fd90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564387d8fe90 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d8fe70 <col:56> 'int' 0
|   |   `-CallExpr 0x564387d900b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564387d90098 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d90078 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d900f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8ff00 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564387d90108 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d8ff30 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d90120 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d8ff68 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x564387d90138 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d90060 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d90048 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d90008 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x564387d90348 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x564387d902f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x564387d902c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x564387d90270 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x564387d84338
|     | |   `-CXXMemberCallExpr 0x564387d90250 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x564387d90220 <col:2> '<bound member function type>' ->xanno 0x564387d794f8
|     | |       `-CXXThisExpr 0x564387d90210 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x564387d902d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x564387d902a0 <col:14> 'int' lvalue ParmVar 0x564387d7bc28 'i' 'int'
|     `-ImplicitCastExpr 0x564387d90330 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x564387d90310 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x564387d7bca0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x564387d7bf78 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x564387d7be80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564387d90ae8 <col:36, line:485:5>
|   |-ParenExpr 0x564387d90850 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d90820 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d90500 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d904d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d903e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d903c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d90388 <col:23> 'int' lvalue ParmVar 0x564387d7be80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d903a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d904b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d90498 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d90400 <col:33> 'int' lvalue ParmVar 0x564387d7be80 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d90478 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d90460 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d90420 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d90440 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564387d90560 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d90540 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d90780 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d90768 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d90748 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d907c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d905d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564387d907d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d90608 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d907f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d90640 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x564387d90808 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d90730 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d90718 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d906d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x564387d90ad8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x564387d90ac0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x564387d90aa8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d90a78 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x564387d90a18 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d909e8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d90960 <col:61, col:70> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d90940 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d90910 <col:61> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d90900 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d90a00 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d90990 <col:74> 'int' lvalue ParmVar 0x564387d7be80 'i' 'int'
|-CXXMethodDecl 0x564387d7c1c8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x564387d7c038 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564387d7c0b0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x564387d91238 <col:42, line:500:5>
|   |-ParenExpr 0x564387d90fd0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d90fa0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d90c80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d90c50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d90b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d90b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d90b08 <col:23> 'int' lvalue ParmVar 0x564387d7c038 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d90b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d90c30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d90c18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d90b80 <col:33> 'int' lvalue ParmVar 0x564387d7c038 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d90bf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d90be0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d90ba0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d90bc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564387d90ce0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d90cc0 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d90f00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d90ee8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d90ec8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d90f40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d90d50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564387d90f58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d90d88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d90f70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d90dc0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x564387d90f88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d90eb0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d90e98 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d90e58 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x564387d91218 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x564387d911c8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564387d91198 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x564387d91140 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564387d91110 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564387d910c0 <col:48, col:57> 'char [48]' lvalue ->c 0x564387d84210
|     |     |   `-CXXMemberCallExpr 0x564387d910a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564387d91070 <col:48> '<bound member function type>' ->xanno 0x564387d794f8
|     |     |       `-CXXThisExpr 0x564387d91060 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564387d91128 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564387d910f0 <col:61> 'int' lvalue ParmVar 0x564387d7c038 'i' 'int'
|     `-ImplicitCastExpr 0x564387d91200 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x564387d911e0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x564387d7c0b0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x564387d7c388 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x564387d7c290 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564387d91998 <col:35, line:513:5>
|   |-ParenExpr 0x564387d916a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d91678 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d913d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d913a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d912b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d91298 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d91258 <col:23> 'int' lvalue ParmVar 0x564387d7c290 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d91278 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d91380 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d91368 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d912d0 <col:33> 'int' lvalue ParmVar 0x564387d7c290 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d91348 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d91330 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d912f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d91310 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564387d91430 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d91410 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d915d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d915c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d915a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d91618 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d914a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564387d91630 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d914d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d91648 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d91510 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x564387d91660 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d91588 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d91570 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d91530 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x564387d91988 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x564387d91970 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x564387d91958 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d91928 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x564387d918a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d91870 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d91820 <col:60, col:69> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d91800 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d917d0 <col:60> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d917c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d91888 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d91850 <col:73> 'int' lvalue ParmVar 0x564387d7c290 'i' 'int'
|-CXXMethodDecl 0x564387d7c5d8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x564387d7c448 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564387d7c4c0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x564387d920b8 <col:41, line:528:5>
|   |-ParenExpr 0x564387d91e40 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d91e10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d91b30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d91b00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d91a10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d919f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d919b8 <col:23> 'int' lvalue ParmVar 0x564387d7c448 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d919d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d91ae0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d91ac8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d91a30 <col:33> 'int' lvalue ParmVar 0x564387d7c448 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d91aa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d91a90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d91a50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d91a70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564387d91b90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d91b70 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d91d70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d91d58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d91d38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d91db0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d91c00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564387d91dc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d91c38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d91de0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d91c70 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x564387d91df8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d91d20 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d91d08 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d91cc8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x564387d92098 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x564387d92048 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564387d92018 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x564387d91fc0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564387d91f80 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564387d91f30 <col:47, col:56> 'char [48]' lvalue ->c 0x564387d84210
|     |     |   `-CXXMemberCallExpr 0x564387d91f10 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564387d91ee0 <col:47> '<bound member function type>' ->xanno 0x564387d794f8
|     |     |       `-CXXThisExpr 0x564387d91ed0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564387d91f98 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564387d91f60 <col:60> 'int' lvalue ParmVar 0x564387d7c448 'i' 'int'
|     `-ImplicitCastExpr 0x564387d92080 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x564387d92060 <col:65> 'int16_t':'short' lvalue ParmVar 0x564387d7c4c0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x564387d7c798 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x564387d7c6a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564387d92788 <col:36, line:541:5>
|   |-ParenExpr 0x564387d92528 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d924f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d92250 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d92220 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d92130 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d92118 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d920d8 <col:23> 'int' lvalue ParmVar 0x564387d7c6a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d920f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d92200 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d921e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d92150 <col:33> 'int' lvalue ParmVar 0x564387d7c6a0 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d921c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d921b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d92170 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d92190 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564387d922b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d92290 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d92458 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d92440 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d92420 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d92498 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d92320 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564387d924b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d92358 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d924c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d92390 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x564387d924e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d92408 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d923f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d923b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x564387d92778 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x564387d92760 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x564387d92748 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d92718 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x564387d926c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d92690 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d92640 <col:61, col:70> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d92620 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d925f0 <col:61> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d925e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d926a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d92670 <col:74> 'int' lvalue ParmVar 0x564387d7c6a0 'i' 'int'
|-CXXMethodDecl 0x564387d7c968 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x564387d7c858 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x564387d7c8d0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564387d7ca18 <col:20>
| `-OptimizeNoneAttr 0x564387d7ca70 <col:30>
|-CXXMethodDecl 0x564387d7cba8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x564387d7cab0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564387d92e58 <col:35, line:562:5>
|   |-ParenExpr 0x564387d92bf8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d92bc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d92920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d928f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d92800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d927e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d927a8 <col:23> 'int' lvalue ParmVar 0x564387d7cab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d927c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d928d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d928b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d92820 <col:33> 'int' lvalue ParmVar 0x564387d7cab0 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d92898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d92880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d92840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d92860 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564387d92980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d92960 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d92b28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d92b10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d92af0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d92b68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d929f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564387d92b80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d92a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d92b98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d92a60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x564387d92bb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d92ad8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d92ac0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d92a80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x564387d92e48 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x564387d92e30 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x564387d92e18 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d92de8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x564387d92d90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d92d60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d92d10 <col:60, col:69> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d92cf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d92cc0 <col:60> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d92cb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d92d78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d92d40 <col:73> 'int' lvalue ParmVar 0x564387d7cab0 'i' 'int'
|-CXXMethodDecl 0x564387d7cdb8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x564387d7cc68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564387d7cce0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x564387d93538 <col:41, line:577:5>
|   |-ParenExpr 0x564387d932c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d93298 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d92ff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d92fc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d92ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d92eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d92e78 <col:23> 'int' lvalue ParmVar 0x564387d7cc68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d92e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d92fa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d92f88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d92ef0 <col:33> 'int' lvalue ParmVar 0x564387d7cc68 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d92f68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d92f50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d92f10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d92f30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564387d93050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d93030 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d931f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d931e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d931c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d93238 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d930c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564387d93250 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d930f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d93268 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d93130 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x564387d93280 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d931a8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d93190 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d93150 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x564387d93518 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x564387d934c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564387d93498 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x564387d93438 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564387d93408 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564387d933b8 <col:47, col:56> 'char [48]' lvalue ->c 0x564387d84210
|     |     |   `-CXXMemberCallExpr 0x564387d93398 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564387d93368 <col:47> '<bound member function type>' ->xanno 0x564387d794f8
|     |     |       `-CXXThisExpr 0x564387d93358 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564387d93420 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564387d933e8 <col:60> 'int' lvalue ParmVar 0x564387d7cc68 'i' 'int'
|     `-ImplicitCastExpr 0x564387d93500 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x564387d934e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x564387d7cce0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x564387d7cf78 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x564387d7ce80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564387d93c68 <col:36, line:591:5>
|   |-ParenExpr 0x564387d939a8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d93978 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d936d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d936a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d935b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d93598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d93558 <col:23> 'int' lvalue ParmVar 0x564387d7ce80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d93578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d93680 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d93668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d935d0 <col:33> 'int' lvalue ParmVar 0x564387d7ce80 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d93648 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d93630 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d935f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d93610 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564387d93730 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d93710 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d938d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d938c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d938a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d93918 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d937a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564387d93930 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d937d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d93948 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d93810 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x564387d93960 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d93888 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d93870 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d93830 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x564387d93c58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x564387d93c40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x564387d93c28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d93bf8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x564387d93b70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d93b40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d93af0 <col:61, col:70> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d93ad0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d93aa0 <col:61> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d93a90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d93b58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d93b20 <col:74> 'int' lvalue ParmVar 0x564387d7ce80 'i' 'int'
|-CXXMethodDecl 0x564387d7d1c8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x564387d7d038 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564387d7d0b0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x564387d94348 <col:42, line:606:5>
|   |-ParenExpr 0x564387d940d8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x564387d940a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564387d93e00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d93dd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d93ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d93cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d93c88 <col:23> 'int' lvalue ParmVar 0x564387d7d038 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d93ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d93db0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564387d93d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d93d00 <col:33> 'int' lvalue ParmVar 0x564387d7d038 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d93d78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d93d60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d93d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564387d93d40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564387d93e60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d93e40 <col:60> 'int' 0
|   |   `-CallExpr 0x564387d94008 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564387d93ff0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d93fd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d94048 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d93ed0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564387d94060 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d93f08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d94078 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d93f40 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x564387d94090 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d93fb8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d93fa0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d93f60 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x564387d94328 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x564387d942d8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564387d942a8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x564387d94248 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564387d94218 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564387d941c8 <col:48, col:57> 'char [48]' lvalue ->c 0x564387d84210
|     |     |   `-CXXMemberCallExpr 0x564387d941a8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564387d94178 <col:48> '<bound member function type>' ->xanno 0x564387d794f8
|     |     |       `-CXXThisExpr 0x564387d94168 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564387d94230 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564387d941f8 <col:61> 'int' lvalue ParmVar 0x564387d7d038 'i' 'int'
|     `-ImplicitCastExpr 0x564387d94310 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x564387d942f0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x564387d7d0b0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x564387d7d360 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x564387d7d290 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x564387d94bb8 <col:33, line:620:5>
|   |-ParenExpr 0x564387d94930 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x564387d94900 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564387d94550 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d94520 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d943c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d943a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d94368 <col:23> 'int' lvalue ParmVar 0x564387d7d290 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d94388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d94500 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564387d944e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d943e0 <col:33> 'int' lvalue ParmVar 0x564387d7d290 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d944c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d944b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d94400 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564387d94488 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564387d94470 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564387d94438 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564387d945b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d94590 <col:79> 'int' 0
|   |   `-CallExpr 0x564387d94860 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564387d94848 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d94828 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d948a0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d94698 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564387d948b8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d946e0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d948d0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d94718 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x564387d948e8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d94810 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d947f8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d947b8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x564387d94ba8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x564387d94b90 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x564387d94b78 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564387d94b48 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x564387d94ac0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x564387d94a90 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564387d94a40 <col:67, col:76> 'char const[48]' lvalue ->c 0x564387d84210
|             |   `-CXXMemberCallExpr 0x564387d94a20 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564387d949f0 <col:67> '<bound member function type>' ->xanno 0x564387d79358
|             |       `-CXXThisExpr 0x564387d949e0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564387d94aa8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564387d94a70 <col:80> 'int' lvalue ParmVar 0x564387d7d290 'i' 'int'
|-CXXMethodDecl 0x564387d7d578 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x564387d7d420 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564387d7d4a0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x564387d953e0 <col:45, line:635:5>
|   |-ParenExpr 0x564387d95128 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x564387d950f8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564387d94dc0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564387d94d90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564387d94c30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564387d94c18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564387d94bd8 <col:23> 'int' lvalue ParmVar 0x564387d7d420 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564387d94bf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564387d94d70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564387d94d58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564387d94c50 <col:33> 'int' lvalue ParmVar 0x564387d7d420 'i' 'int'
|   |   |     `-BinaryOperator 0x564387d94d38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564387d94d20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564387d94c70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564387d79740 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564387d94cf8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564387d94ce0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564387d94ca8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564387d94e20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564387d94e00 <col:79> 'int' 0
|   |   `-CallExpr 0x564387d95058 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564387d95040 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564387d95020 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643878e6130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564387d95098 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d94e90 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564387d950b0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564387d94ed8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564387d950c8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564387d94f10 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x564387d950e0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564387d95008 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564387d94ff0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564387d94fa8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x564387d953c0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x564387d95328 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564387d952f8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x564387d95298 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564387d95268 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564387d95218 <col:54, col:63> 'char [48]' lvalue ->c 0x564387d84210
|     |     |   `-CXXMemberCallExpr 0x564387d951f8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564387d951c8 <col:54> '<bound member function type>' ->xanno 0x564387d794f8
|     |     |       `-CXXThisExpr 0x564387d951b8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564387d95280 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564387d95248 <col:67> 'int' lvalue ParmVar 0x564387d7d420 'i' 'int'
|     `-CXXConstCastExpr 0x564387d95390 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x564387d95378 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x564387d95340 <col:91> 'const void *' lvalue ParmVar 0x564387d7d4a0 'x' 'const void *'
|-CXXMethodDecl 0x564387d7d648 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x564387d95468 <col:34, line:640:5>
|   `-ReturnStmt 0x564387d95458 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x564387d95440 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x564387d95410 <col:16> 'Packet *' lvalue ->_data_packet 0x564387d84dc8
|         `-CXXThisExpr 0x564387d95400 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564387d7d788 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x564387d7d6f8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564387d8e528 <col:46> 'bool' true
|-CXXMethodDecl 0x564387d7d908 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x564387d7d840 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x564387d7d9b0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x564387d7e160 <line:660:22> "" ""
| |-EnumConstantDecl 0x564387d7dab0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e1d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7da90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x564387d7da70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564387d72c10 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564387d7db40 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e1e8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7db20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x564387d7db00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564387d72ca0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564387d7dbd0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e200 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7dbb0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564387d7db90 <col:21> 'int' 0
| |-EnumConstantDecl 0x564387d7dc60 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e218 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7dc40 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x564387d7dc20 <col:19> 'int' 16
| |-EnumConstantDecl 0x564387d7dcf0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e230 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7dcd0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x564387d7dcb0 <col:21> 'int' 16
| |-EnumConstantDecl 0x564387d7dd80 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e248 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7dd60 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564387d7dd40 <col:19> 'int' 32
| |-EnumConstantDecl 0x564387d7de10 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e260 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7ddf0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x564387d7ddd0 <col:19> 'int' EnumConstant 0x564387d7dc60 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564387d7dea0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e278 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7de80 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x564387d7de60 <col:19> 'int' EnumConstant 0x564387d7dd80 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564387d7df70 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e290 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7df50 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x564387d7df30 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564387d7def0 <col:23> 'int' EnumConstant 0x564387d7dea0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564387d7df10 <col:40> 'int' 2
| |-EnumConstantDecl 0x564387d7e040 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564387d7e2a8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387d7e020 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x564387d7e000 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564387d7dfc0 <col:23> 'int' EnumConstant 0x564387d7dea0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564387d7dfe0 <col:40> 'int' 4
| `-EnumConstantDecl 0x564387d7e110 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x564387d7e2c0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564387d7e0f0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x564387d7e0d0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x564387d7e090 <col:23> 'int' EnumConstant 0x564387d7dea0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x564387d7e0b0 <col:40> 'int' 8
|-CXXMethodDecl 0x564387d7e300 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x564387d7e3a0 <col:68> "" ""
|-CXXMethodDecl 0x564387d7e438 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x564387d7e4d8 <col:45> "" ""
|-CXXMethodDecl 0x564387d7e570 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564387d7e610 <col:57> "" ""
|-CXXMethodDecl 0x564387d7e6a8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x564387d7e748 <col:45> "" ""
|-CXXMethodDecl 0x564387d7e7e0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564387d7e880 <col:57> "" ""
|-CXXMethodDecl 0x564387d7e910 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x564387d7e9b0 <col:51> "" ""
|-CXXMethodDecl 0x564387d7ea40 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564387d7eae0 <col:63> "" ""
|-CXXMethodDecl 0x564387d7eb70 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x564387d7ec10 <col:53> "" ""
|-CXXMethodDecl 0x564387d7eca0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564387d7ed40 <col:65> "" ""
|-CXXMethodDecl 0x564387d7ee58 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564387d7edc8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x564387d7ef00 <col:61> "" ""
|-CXXMethodDecl 0x564387d7f098 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564387d7ef88 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x564387d7f000 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564387d7f148 <col:67> "" ""
|-CXXMethodDecl 0x564387d7f260 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564387d7f1d0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564387d7f308 <col:63> "" ""
|-CXXMethodDecl 0x564387d7f4a0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564387d7f390 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564387d7f408 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564387d7f550 <col:69> "" ""
|-CXXMethodDecl 0x564387d7f668 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564387d7f5d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564387d7f710 <col:63> "" ""
|-CXXMethodDecl 0x564387d81de8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564387d81cd8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564387d81d50 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564387d81e98 <col:69> "" ""
|-CXXMethodDecl 0x564387d81fb0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x564387d81f20 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x564387d82058 <col:62> "" ""
|-CXXMethodDecl 0x564387d821f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564387d820e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564387d82158 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x564387d822a0 <col:68> "" ""
|-CXXMethodDecl 0x564387d823b8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x564387d82328 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564387d82460 <col:63> "" ""
|-CXXMethodDecl 0x564387d825f8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x564387d824e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564387d82560 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x564387d826a8 <col:69> "" ""
|-CXXMethodDecl 0x564387d82738 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564387d827d8 <col:64> "" ""
|-CXXMethodDecl 0x564387d82868 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x564387d82908 <col:52> "" ""
|-CXXMethodDecl 0x564387d82998 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564387d82a38 <col:67> "" ""
|-CXXMethodDecl 0x564387d82ac8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x564387d82b68 <col:55> "" ""
|-CXXMethodDecl 0x564387d82c80 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564387d82bf0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564387d82d28 <col:58> "" ""
|-CXXMethodDecl 0x564387d82ec0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564387d82db0 <col:33> col:36 'int'
| |-ParmVarDecl 0x564387d82e28 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564387d82f70 <col:62> "" ""
|-CXXMethodDecl 0x564387d83088 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x564387d82ff8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564387d83130 <col:58> "" ""
|-CXXMethodDecl 0x564387d832c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x564387d831b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x564387d83230 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x564387d83378 <col:62> "" ""
|-CXXMethodDecl 0x564387d83490 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564387d83400 <col:34> col:37 'int'
| `-DeprecatedAttr 0x564387d83538 <col:60> "" ""
|-CXXMethodDecl 0x564387d836d0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564387d835c0 <col:34> col:37 'int'
| |-ParmVarDecl 0x564387d83638 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564387d83780 <col:64> "" ""
|-CXXMethodDecl 0x564387d83898 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x564387d83808 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564387d83940 <col:58> "" ""
|-CXXMethodDecl 0x564387d83ad8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564387d839c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x564387d83a40 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x564387d83b88 <col:62> "" ""
|-CXXMethodDecl 0x564387d83ca0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564387d83c10 <col:33> col:36 'int'
| `-DeprecatedAttr 0x564387d83d48 <col:59> "" ""
|-CXXMethodDecl 0x564387d83ee0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564387d83dd0 <col:33> col:36 'int'
| |-ParmVarDecl 0x564387d83e48 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564387d83f90 <col:63> "" ""
|-AccessSpecDecl 0x564387d84000 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x564387d84028 prev 0x564387d79230 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564387d84120 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x564387d84210 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x564387d84338 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x564387d844b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x564387d84638 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x564387d847b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x564387d955e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564387d95e58 <col:11>
| |-CXXDestructorDecl 0x564387d956c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x564387d957f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564387d957f8
| | `-ParmVarDecl 0x564387d95908 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x564387d959a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564387d959a8
| | `-ParmVarDecl 0x564387d95ab8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x564387d98878 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564387d98988 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x564387d98c08 <col:11>
| |   `-ReturnStmt 0x564387d98bf8 <col:11>
| |     `-UnaryOperator 0x564387d98be0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564387d98bd0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x564387d989f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564387d989f8
|   `-ParmVarDecl 0x564387d98b08 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x564387d84820 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564387d84938 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x564387d849d8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x564387d84a40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x564387d84aa8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x564387d84b10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x564387d84b70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x564387d84c30 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x564387d84c90 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x564387d84cf0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x564387d954f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x564387d849d8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x564387d95e68 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x564387d95ec0 <col:12>
| |-CXXConstructorDecl 0x564387d95b28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564387d95b28
| | `-ParmVarDecl 0x564387d95c38 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x564387d95cd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564387d95cd8
| | `-ParmVarDecl 0x564387d95de8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x564387d97f60 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x564387d84d68 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x564387d84dc8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x564387d84e30 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x564387d84e98 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x564387d84f00 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x564387d84f68 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x564387d84fc8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x564387d85028 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x564387d85090 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x564387d85118 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x564387d84d68 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x564387d95490 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x564387d84fc8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x564387d95ed0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x564387d95f30 <col:21, line:755:5>
|-CXXConstructorDecl 0x564387d852b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x564387d851f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x564387d853b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x564387d85598 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x564387d854a0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x564387d85868 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x564387d85650 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387d856c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564387d85740 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d85a88 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x564387d85938 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x564387d859b0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x564387d8e068 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x564387d85b48 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x564387d85bc0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x564387d85c38 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x564387d8e1c0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564387d8e130 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d8e308 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564387d8e278 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x564387d8e400 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387d95fd0 prev 0x564387d72890 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x564387d96108 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x564387d96198 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x564387d96240 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x564387d962e0 <col:20>
| `-OptimizeNoneAttr 0x564387d96338 <col:30>
|-CXXMethodDecl 0x564387d96388 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x564387d96428 <col:20>
| `-OptimizeNoneAttr 0x564387d96480 <col:30>
|-CXXMethodDecl 0x564387d964d0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x564387d96598 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x564387d96660 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x564387d96778 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x564387d96840 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x564387d968e0 <col:20>
| `-OptimizeNoneAttr 0x564387d96938 <col:30>
|-CXXMethodDecl 0x564387d969a8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x564387d96a48 <col:20>
| `-OptimizeNoneAttr 0x564387d96aa0 <col:30>
|-CXXMethodDecl 0x564387d96b48 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x564387d96be8 <col:20>
| `-OptimizeNoneAttr 0x564387d96c40 <col:30>
|-CXXMethodDecl 0x564387d96c90 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x564387d96da8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x564387d96ec8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x564387d96fe8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x564387d970b0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x564387d97150 <col:62> "" ""
|-AccessSpecDecl 0x564387d971c0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x564387d97220 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x564387d97e18 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x564387d98040 <col:29, col:31>
|-CXXMethodDecl 0x564387d972e8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x564387d97428 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x564387d97398 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x564387d97520 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x564387d98050 <col:23, col:25>
|-CXXMethodDecl 0x564387d976d8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x564387d97610 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x564387d979a8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x564387d97790 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564387d97808 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564387d97880 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564387d97b38 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x564387d97a70 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x564387d97c30 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x564387d97c98 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x564387d97c98
  `-ParmVarDecl 0x564387d97da8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387a88500 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564387a88618 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x564387a88700 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x564387a886e0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x564387a886a8 <col:22> 'int' 4
|-FieldDecl 0x564387a887a8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x564387a88788 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x564387a88750 <col:21> 'int' 4
|-FieldDecl 0x564387a88808 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x564387a88868 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x564387a888c8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x564387a88928 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x564387a88988 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x564387a889e8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x564387a88a48 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x564387a88ab8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x564387a88b28 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387dc4378 prev 0x564387d72730 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564387dc4470 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x564387dc4510 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x564387dc4570 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x564387dc45d0 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x564387dc4630 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387baceb0 prev 0x564387b14c98 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387bacfa8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x564387bad038 <col:19, col:25> col:19 public
|-TypedefDecl 0x564387bad070 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x56438799f340 'uninitialized_type'
|   `-CXXRecord 0x56438799f2a8 'uninitialized_type'
|-CXXConstructorDecl 0x564387bad130 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb08b8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564387bb0878 <col:10> 'int' 0
| `-CompoundStmt 0x564387bb0900 <col:13, line:22:5>
|-CXXConstructorDecl 0x564387bad280 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x564387bad1f0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb0950 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x564387bb0910 <col:10> 'unsigned int' lvalue ParmVar 0x564387bad1f0 'x' 'unsigned int'
| `-CompoundStmt 0x564387bb0998 <col:13, line:27:5>
|-CXXConstructorDecl 0x564387bad3d8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x564387bad348 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb0a00 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x564387bb09e8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x564387bb09a8 <col:10> 'int' lvalue ParmVar 0x564387bad348 'x' 'int'
| `-CompoundStmt 0x564387bb0a48 <col:13, line:31:5>
|-CXXConstructorDecl 0x564387bad530 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x564387bad4a0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb0ab0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x564387bb0a98 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x564387bb0a58 <col:10> 'unsigned long' lvalue ParmVar 0x564387bad4a0 'x' 'unsigned long'
| `-CompoundStmt 0x564387bb0af8 <col:13, line:35:5>
|-CXXConstructorDecl 0x564387bad688 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x564387bad5f8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb0b60 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x564387bb0b48 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x564387bb0b08 <col:10> 'long' lvalue ParmVar 0x564387bad5f8 'x' 'long'
| `-CompoundStmt 0x564387bb0ba8 <col:13, line:39:5>
|-CXXConstructorDecl 0x564387bad848 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x564387bad758 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb0c28 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x564387bb0bd8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x564387a70fa0
| |     `-DeclRefExpr 0x564387bb0bb8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x564387bad758 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x564387bb0c70 <col:20, line:44:5>
|-CXXConstructorDecl 0x564387bad9d8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x564387bad910 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x564387bb0dd8 <col:51, line:56:5>
|   `-BinaryOperator 0x564387bb0db8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x564387bb0c90 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x564387bb0810
|     | `-CXXThisExpr 0x564387bb0c80 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x564387bb0da0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x564387bb0d88 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x564387bb0d68 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x564387bb0d38 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x564387bb0d20 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x564387bb0cc0 <col:47> 'const unsigned char *' lvalue ParmVar 0x564387bad910 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x564387badb28 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x564387bada98 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x564387badcd8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x564387badc18 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x564387bb0e48 <col:56, line:68:5>
|   `-CStyleCastExpr 0x564387bb0e20 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x564387bb0df0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x564387badc18 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x564387bade68 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x564387badda0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x564387badf58 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x564387bb1e08 <col:46, line:83:5>
|   `-ReturnStmt 0x564387bb1df8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x564387bb1de0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x564387bb1db0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564387bb1c68 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x564387bb1b50 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x564387bb1a38 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x564387bb0e70 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x564387bae048 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x564387bb1eb8 <col:31, line:88:5>
|   `-ReturnStmt 0x564387bb1ea8 <line:87:2, col:10>
|     `-UnaryOperator 0x564387bb1e90 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x564387bb1e78 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x564387bb1e60 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x564387bb1e30 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x564387bb0810
|             `-CXXThisExpr 0x564387bb1e20 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x564387bae108 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x564387bb1f38 <col:34, line:93:5>
|   `-ReturnStmt 0x564387bb1f28 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x564387bb1f10 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x564387bb1ee0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x564387bb0810
|         `-CXXThisExpr 0x564387bb1ed0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x564387bae1d8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x564387bb1fb8 <col:38, line:101:5>
|   `-ReturnStmt 0x564387bb1fa8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x564387bb1f90 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x564387bb1f60 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x564387bb0810
|         `-CXXThisExpr 0x564387bb1f50 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x564387bae2a8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x564387bb2288 <col:38, line:108:5>
|   `-ReturnStmt 0x564387bb2278 <line:107:2, col:58>
|     `-BinaryOperator 0x564387bb2258 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x564387bb2170 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x564387bb2150 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x564387bb2138 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x564387bb1fe0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x564387bb0810
|       |   |   `-CXXThisExpr 0x564387bb1fd0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x564387bb2110 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x564387bb20f8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564387bb2078 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x564387a7c498 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x564387bb2058 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x564387bb2230 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x564387bb2218 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564387bb21f8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x564387a7c498 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x564387bb21d8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x564387bae368 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x564387bb24f8 <col:39, line:112:5>
|   `-ReturnStmt 0x564387bb24e8 <line:111:2, col:56>
|     `-BinaryOperator 0x564387bb24c8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x564387bb23e0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x564387bb23c0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x564387bb23a8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x564387bb22b0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x564387bb0810
|       |   |   `-CXXThisExpr 0x564387bb22a0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x564387bb2380 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x564387bb2368 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564387bb2348 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x564387a7c498 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x564387bb2328 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x564387bb24a0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x564387bb2488 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564387bb2468 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x564387a7c498 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x564387bb2448 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x564387bae498 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x564387bae5a0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x564387baf610 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x564387baf700 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564387baf7c0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x564387baf888 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x564387bafa88 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x564387baf938 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x564387baf9b0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x564387bafc08 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x564387bafb48 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x564387bafd50 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x564387bafcc0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x564387bafef8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x564387bafe08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x564387bb0040 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x564387baffb0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x564387bb0188 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x564387bb00f8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x564387bb0250 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x564387bb0310 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x564387bb0488 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x564387bb03c0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x564387bb0550 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x564387bb0638 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x564387bb06e0 <col:51> "" ""
|-TypedefDecl 0x564387bb0780 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x564387b14d30 'IPAddress'
|   `-CXXRecord 0x564387baceb0 'IPAddress'
|-AccessSpecDecl 0x564387bb07d8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x564387bb0810 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564387bb0eb8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x564387bb0eb8
| `-ParmVarDecl 0x564387bb0fc8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x564387bb1068 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387bb1178 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x564387bb0810 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x564387bb1d58 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x564387bb1d10 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x564387bb0810
| |     `-CXXStaticCastExpr 0x564387bb1ce0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x564387bb1cb0 <col:7> 'IPAddress' lvalue ParmVar 0x564387bb1178 '' 'IPAddress &&'
| `-CompoundStmt 0x564387bb1da0 <col:7>
`-CXXDestructorDecl 0x564387bb1a68 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387bb93f0 prev 0x564387bacc78 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387bb94e8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x564387bb9578 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x564387bb99a0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x564387bb95b8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x564387bb9638 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x564387bb9770 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x564387bb9820 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x564387bb9c68 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x564387bb9a70 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x564387bb9ae8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x564387bb9b88 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564387bbe588 <col:34> 'const ArgContext' lvalue Var 0x564387bacc10 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x564387bbdfd8 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x564387bb9d30 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x564387bb9e20 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x564387bb9e98 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x564387bbe5a8 <col:34> 'const ArgContext' lvalue Var 0x564387bacc10 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x564387bbe788 <col:46, line:375:5>
|   `-ReturnStmt 0x564387bbe778 <line:374:2, col:63>
|     `-CallExpr 0x564387bbe740 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x564387bbe728 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564387bbe6e0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x564387bb9c68 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x564387bbe640 <col:15> 'const String' lvalue ParmVar 0x564387bb9d30 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x564387bbe690 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x564387bbe660 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x564387bb9e20 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x564387bbe6c0 <col:59> 'const ArgContext' lvalue ParmVar 0x564387bb9e98 'args' 'const ArgContext &'
|-CXXMethodDecl 0x564387bbe4b8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x564387bbe0a0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x564387bbe320 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x564387bbe398 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564387bbe5c8 <col:34> 'const ArgContext' lvalue Var 0x564387bacc10 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x564387ee31a8 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x564387ee3280 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564387ee33b8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x564387ee33b8
| `-ParmVarDecl 0x564387ee34c8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x564387ee3568 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x564387ee3678 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x564387ee42d0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387bbf8f8 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x564387bbfb58 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x564387ee30b8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564387ee36e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x564387ee36e8
| `-ParmVarDecl 0x564387ee37f8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x564387ee3898 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387ee39a8 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x564387ee42e0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564387ee42b0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x564387ee4280 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x564387ee4250 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x564387ee39a8 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x564387ee4350 <col:19>
`-CXXDestructorDecl 0x564387ee3a48 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e742e0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387e743f8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x564387e74488 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x564387e746c8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x564387e744c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x564387e74540 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x564387e745b8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564387e748e0 <col:81> 'const ArgContext' lvalue Var 0x564387e5c4f8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x564387e74820 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x564387e74790 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x564387e74a38 <col:35, line:1261:5>
|   `-ReturnStmt 0x564387e74a28 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x564387e74a10 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x564387e749e0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x564387e749c8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x564387e749a0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x564387e74980 <col:16, col:24> 'String' (CXXTemporary 0x564387e74980)
|               `-CXXConstructExpr 0x564387e74948 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x564387e74930 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x564387e74910 <col:23> 'bool' lvalue ParmVar 0x564387e74790 'x' 'bool'
|-CXXConstructorDecl 0x564387ef7f38 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x564387ef8010 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564387ef8148 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x564387ef8148
| `-ParmVarDecl 0x564387ef8258 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x564387ef82f8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x564387ef8408 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x564387ef9060 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387e74a78 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x564387e74cd8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x564387ef7e48 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564387ef8478 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x564387ef8478
| `-ParmVarDecl 0x564387ef8588 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x564387ef8628 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387ef8738 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x564387ef9070 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564387ef9040 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x564387ef9010 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x564387ef8fe0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x564387ef8738 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x564387ef90e0 <col:19>
`-CXXDestructorDecl 0x564387ef87d8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e666b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564387e667c8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x564387e66858 <col:16, col:22> col:16 public
|-EnumDecl 0x564387e66880 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x564387e66980 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564387e66bd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e66960 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564387e66940 <col:21> 'int' 0
| |-EnumConstantDecl 0x564387e66a10 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564387e66be8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e669f0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x564387e669d0 <col:24> 'int' 22
| |-EnumConstantDecl 0x564387e66aa0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564387e66c00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e66a80 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x564387e66a60 <col:24> 'int' 34
| |-EnumConstantDecl 0x564387e66b30 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x564387e66c18 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564387e66b10 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x564387e66af0 <col:25> 'int' 95
| `-EnumConstantDecl 0x564387e66b80 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x564387e68590 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564387e689c8 <col:7>
|-CXXConstructorDecl 0x564387e68698 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x564387e68698
| `-ParmVarDecl 0x564387e687a8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x564387e68848 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387e68958 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x564387f042f0 <col:7>
`-CXXDestructorDecl 0x564387e6aad8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564387e66c48 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x564387e66da8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x564387e66e38 <col:32, col:38> col:32 public
|-TypedefDecl 0x564387e66e70 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56438799f630 'uint32_t' sugar
|   |-Typedef 0x5643878b3408 'uint32_t'
|   `-TypedefType 0x56438788c440 '__uint32_t' sugar
|     |-Typedef 0x56438788c038 '__uint32_t'
|     `-BuiltinType 0x56438784a410 'unsigned int'
|-CXXConstructorDecl 0x564387e66fb8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x564387e66ee0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x564387e68498 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x564387e689d8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x564387e67d50 'base' 'int'
| | `-ImplicitCastExpr 0x564387e68538 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x564387e684f8 <col:16> 'int' lvalue ParmVar 0x564387e66ee0 'b' 'int'
| `-CompoundStmt 0x564387e68a48 <col:19, line:1046:5>
|-CXXMethodDecl 0x564387e674b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x564387e67080 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x564387e67100 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x564387e67178 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x564387e671f8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x564387e672b8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x564387e67338 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x564387e67908 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x564387e67580 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x564387e67868 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x564387e67628 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x564387e676c8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x564387e67740 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x564387e684b8 <col:82> 'const ArgContext' lvalue Var 0x564387e5c4f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x564387e69988 <col:94, line:1067:5>
| |   |-DeclStmt 0x564387e68bd8 <line:1054:9, col:64>
| |   | `-VarDecl 0x564387e68a68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x564387e68b90 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x564387e68df8 <line:1055:9, col:91>
| |   | `-VarDecl 0x564387e68c08 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x564387e68dd0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x564387e68db0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x564387e68d60 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x564387e68d40 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x564387e68ce8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x564387e68c98 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x564387e68cc8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x564387e68d28 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x564387e68d08 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x564387e68d90 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x564387e68f58 <line:1056:9, col:27>
| |   | `-VarDecl 0x564387e68ef0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x564387e693a0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x564387e692d0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x564387e69250 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564387d69548 0x564387bb3008 0x564387bb2ce0 0x564387ba88f0 0x564387ba85a0 0x564387ba7e90 0x564387b78d20 0x564387b069d0
| |   | | |-CallExpr 0x564387e69190 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x564387e68f80 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x564387e69030 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x564387e69000 <col:19, col:23> '<bound member function type>' .begin 0x564387b963c8
| |   | | | |   `-DeclRefExpr 0x564387e68fe0 <col:19> 'const String' lvalue ParmVar 0x564387e67628 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x564387e690a0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x564387e69070 <col:32, col:36> '<bound member function type>' .end 0x564387b965e0
| |   | | | |   `-DeclRefExpr 0x564387e69050 <col:32> 'const String' lvalue ParmVar 0x564387e67628 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x564387e690c0 <col:43> 'const bool' lvalue Var 0x564387e68a68 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x564387e69128 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x564387e69108 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x564387e69150 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x564387e68ef0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x564387e69170 <col:73> 'const int' lvalue Var 0x564387e68c08 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x564387e69230 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x564387e69200 <col:16, col:20> '<bound member function type>' .end 0x564387b965e0
| |   | |     `-DeclRefExpr 0x564387e691e0 <col:16> 'const String' lvalue ParmVar 0x564387e67628 'str' 'const String &'
| |   | `-BinaryOperator 0x564387e69380 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x564387e69318 <col:13> 'int' lvalue ->status 0x564387e67db8
| |   |   | `-CXXThisExpr 0x564387e69308 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x564387e69368 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x564387e69348 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66a10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x564387e69608 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x564387e694f0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x564387e694d8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x564387e694c0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x564387e693c8 <col:13> 'int' lvalue ->status 0x564387e67db8
| |   | | |     `-CXXThisExpr 0x564387e693b8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x564387e694a0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x564387e69470 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x564387e69420 <col:23> 'int' lvalue ->status 0x564387e67db8
| |   | |   |   `-CXXThisExpr 0x564387e693f8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x564387e69488 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x564387e69450 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x564387e695e8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x564387e69588 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x564387e69530 <col:13, col:18> '<bound member function type>' .error 0x564387d2ce10
| |   |   | | `-DeclRefExpr 0x564387e69510 <col:13> 'const ArgContext' lvalue ParmVar 0x564387e67740 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x564387e695b0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x564387e69560 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x564387e695d8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x564387e695c8 <col:20> 'bool' false
| |   |-DeclStmt 0x564387e697d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x564387e69780 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x564387e69710 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x564387e69938 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x564387e697f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x564387b3a7d8
| |   | |-DeclRefExpr 0x564387e69838 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x564387e68ef0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x564387e69908 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x564387e69880 <col:64> 'V' lvalue ParmVar 0x564387e676c8 'result' 'V &'
| |   `-ReturnStmt 0x564387e69978 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x564387e69968 <col:16> 'bool' true
| `-CXXMethodDecl 0x564387f0ce98 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x564387f0cc70 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x564387f0cd48 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x564387f0cdb0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x564387f0ec30 <col:94, line:1067:5>
|     |-DeclStmt 0x564387f0d6a8 <line:1054:9, col:64>
|     | `-VarDecl 0x564387f0d4c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x564387f0d638 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x564387f0d608 <col:36, col:55> 'const bool' lvalue Var 0x564387b28800 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x564387f0d888 <line:1055:9, col:91>
|     | `-VarDecl 0x564387f0d6c0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x564387f0d808 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x564387f0d7f0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x564387f0d7d0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x564387f0d7b0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x564387f0d790 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x564387f0d758 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x564387f0d738 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x564387e68cc8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x564387f0d778 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x564387e68d08 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x564387e68d90 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x564387f0da20 <line:1056:9, col:27>
|     | `-VarDecl 0x564387f0d9b8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x564387f0dea8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x564387f0de50 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x564387f0dd08 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x564387f0dcd8 <col:13> '<bound member function type>' ->parse 0x564387e674b0
|     | | | | `-CXXThisExpr 0x564387f0dcc8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x564387f0db68 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x564387f0db38 <col:19, col:23> '<bound member function type>' .begin 0x564387b963c8
|     | | | |   `-DeclRefExpr 0x564387f0db18 <col:19> 'const String' lvalue ParmVar 0x564387f0cc70 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x564387f0dbd8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x564387f0dba8 <col:32, col:36> '<bound member function type>' .end 0x564387b965e0
|     | | | |   `-DeclRefExpr 0x564387f0db88 <col:32> 'const String' lvalue ParmVar 0x564387f0cc70 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x564387f0dd78 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x564387f0dd58 <col:43> 'const bool' lvalue Var 0x564387f0d4c8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x564387f0dc60 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x564387f0dc48 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x564387f0dc28 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x564387f0dd90 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x564387f0dc88 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x564387f0d9b8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x564387f0ddc8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x564387f0dda8 <col:73> 'const int' lvalue Var 0x564387f0d6c0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x564387f0de30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x564387f0de00 <col:16, col:20> '<bound member function type>' .end 0x564387b965e0
|     | |     `-DeclRefExpr 0x564387f0dde0 <col:16> 'const String' lvalue ParmVar 0x564387f0cc70 'str' 'const String &'
|     | `-BinaryOperator 0x564387f0de88 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x564387e69318 <col:13> 'int' lvalue ->status 0x564387e67db8
|     |   | `-CXXThisExpr 0x564387e69308 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x564387f0de70 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x564387e69348 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66a10 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x564387f0e020 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x564387f0df40 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x564387f0df28 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x564387f0df10 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x564387e693c8 <col:13> 'int' lvalue ->status 0x564387e67db8
|     | | |     `-CXXThisExpr 0x564387e693b8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x564387f0def0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x564387f0dec0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x564387e69420 <col:23> 'int' lvalue ->status 0x564387e67db8
|     | |   |   `-CXXThisExpr 0x564387e693f8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x564387f0ded8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x564387e69450 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x564387f0e000 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x564387f0dfb0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x564387f0df80 <col:13, col:18> '<bound member function type>' .error 0x564387d2ce10
|     |   | | `-DeclRefExpr 0x564387f0df60 <col:13> 'const ArgContext' lvalue ParmVar 0x564387f0cdb0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x564387f0dfd8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x564387e69560 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x564387f0dff0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x564387e695c8 <col:20> 'bool' false
|     |-DeclStmt 0x564387f0e568 <line:1064:9, col:64>
|     | `-TypedefDecl 0x564387f0e510 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x564387f0e4c0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x564387f0e4a0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x564387f0e430 'type'
|     |       `-ElaboratedType 0x564387f0e3e0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x564387f0e3c0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x564387b28958 'unsigned_type'
|     |           `-BuiltinType 0x56438784a410 'unsigned int'
|     |-CallExpr 0x564387f0ebc0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x564387f0eba8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x564387f0eb28 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x564387f0ea08 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x564387b3a7d8 'extract_integer')
|     | |-ImplicitCastExpr 0x564387f0ec08 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x564387f0ebf0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x564387f0e5c8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x564387f0d9b8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x564387f0e698 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x564387f0e648 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x564387f0cd48 'result' 'unsigned int &'
|     `-ReturnStmt 0x564387f0ec20 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x564387e69968 <col:16> 'bool' true
|-FunctionTemplateDecl 0x564387e67cc8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x564387e67978 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x564387e67c28 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x564387e67a28 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x564387e67ac8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x564387e67b40 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x564387e684d8 <col:71> 'const ArgContext' lvalue Var 0x564387e5c4f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x564387e6a0f8 <col:83, line:1083:5>
| |   |-DeclStmt 0x564387e69a50 <line:1071:9, col:12>
| |   | `-VarDecl 0x564387e699e8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x564387e6a0d0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x564387e69ce0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x564387e69b68 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x564387e69b30 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x564387e69a78 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x564387e69ad0 <col:31> 'const String' lvalue ParmVar 0x564387e67a28 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x564387e69af0 <col:36> 'V' lvalue Var 0x564387e699e8 'x' 'V'
| |     | |   `-DeclRefExpr 0x564387e69b10 <col:39> 'const ArgContext' lvalue ParmVar 0x564387e67b40 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x564387e69cc0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x564387e69ca0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x564387e69c88 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x564387e69c70 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x564387e69b90 <col:17> 'int' lvalue ->status 0x564387e67db8
| |     |     |     `-CXXThisExpr 0x564387e69b80 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x564387e69c50 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x564387e69c20 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x564387e69bd0 <col:27> 'int' lvalue ->status 0x564387e67db8
| |     |       |   `-CXXThisExpr 0x564387e69bc0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x564387e69c38 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x564387e69c00 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x564387e69d10 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x564387e69d00 <col:20> 'bool' false
| |     `-IfStmt 0x564387e6a0a8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x564387e69db0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x564387e69d80 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x564387e69d30 <col:18> 'int' lvalue ->status 0x564387e67db8
| |       | |   `-CXXThisExpr 0x564387e69d20 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x564387e69d98 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x564387e69d60 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x564387e69fe8 <col:42, line:1079:9>
| |       | |-CallExpr 0x564387e69f90 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x564387e69de0 <line:1076:13> '<bound member function type>' ->range_error 0x564387e683c8
| |       | | | `-CXXThisExpr 0x564387e69dd0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x564387e69e10 <col:25> 'const ArgContext' lvalue ParmVar 0x564387e67b40 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x564387e69ef0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x564387e69f68 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x564387e69f48 <col:43> 'V' lvalue Var 0x564387e699e8 'x' 'V'
| |       | `-ReturnStmt 0x564387e69fd8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x564387e69fc8 <col:20> 'bool' false
| |       `-CompoundStmt 0x564387e6a088 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x564387e6a048 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x564387e6a008 <col:13> 'V' lvalue ParmVar 0x564387e67ac8 'result' 'V &'
| |         | `-DeclRefExpr 0x564387e6a028 <col:22> 'V' lvalue Var 0x564387e699e8 'x' 'V'
| |         `-ReturnStmt 0x564387e6a078 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x564387e6a068 <col:20> 'bool' true
| `-CXXMethodDecl 0x564387f07698 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x564387f07470 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x564387f07548 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x564387f075b0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x564387f0d4a8 <col:83, line:1083:5>
|     |-DeclStmt 0x564387f07920 <line:1071:9, col:12>
|     | `-VarDecl 0x564387f078b8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x564387f0d480 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x564387f0d110 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x564387f0d038 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x564387f0d000 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x564387f0cfb8 <col:14> '<bound member function type>' ->parse_saturating 0x564387f0ce98
|       | |   | `-CXXThisExpr 0x564387f0cfa8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x564387f07990 <col:31> 'const String' lvalue ParmVar 0x564387f07470 'str' 'const String &'
|       | |   |-DeclRefExpr 0x564387f079b0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x564387f078b8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x564387f079d0 <col:39> 'const ArgContext' lvalue ParmVar 0x564387f075b0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x564387f0d0f0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x564387f0d0d0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x564387f0d0b8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x564387f0d0a0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x564387e69b90 <col:17> 'int' lvalue ->status 0x564387e67db8
|       |     |     `-CXXThisExpr 0x564387e69b80 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x564387f0d080 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x564387f0d050 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x564387e69bd0 <col:27> 'int' lvalue ->status 0x564387e67db8
|       |       |   `-CXXThisExpr 0x564387e69bc0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x564387f0d068 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x564387e69c00 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x564387f0d130 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x564387e69d00 <col:20> 'bool' false
|       `-IfStmt 0x564387f0d458 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x564387f0d170 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x564387f0d140 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x564387e69d30 <col:18> 'int' lvalue ->status 0x564387e67db8
|         | |   `-CXXThisExpr 0x564387e69d20 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x564387f0d158 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x564387e69d60 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x564387e66aa0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x564387f0d390 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x564387f0d300 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x564387e69de0 <line:1076:13> '<bound member function type>' ->range_error 0x564387e683c8
|         | | | `-CXXThisExpr 0x564387e69dd0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x564387f0d190 <col:25> 'const ArgContext' lvalue ParmVar 0x564387f075b0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x564387f0d368 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x564387f0d338 <col:31, col:50> 'const bool' lvalue Var 0x564387b28800 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x564387f0d2d8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x564387f0d2c0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x564387f0d2a8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x564387f0d288 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x564387f078b8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x564387f0d380 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x564387e69fc8 <col:20> 'bool' false
|         `-CompoundStmt 0x564387f0d438 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x564387f0d408 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x564387f0d3b0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x564387f07548 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x564387f0d3f0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x564387f0d3d0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x564387f078b8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x564387f0d428 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x564387e6a068 <col:20> 'bool' true
|-FieldDecl 0x564387e67d50 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x564387e67db8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x564387e67e08 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x564387e680c0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x564387e67e48 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x564387e67ec8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x564387e67f40 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x564387e67fc0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x564387e683c8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x564387e68190 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x564387e68208 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x564387e682a0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x564387e6a958 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x564387e6a958
| `-ParmVarDecl 0x564387e6aa68 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x564387e6abe8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387e6acf8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x564387f04300 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564387f042d0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x564387f042a0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564387f04270 <col:7> 'IntArg' lvalue ParmVar 0x564387e6acf8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x564387e67d50 'base' 'int'
| | `-ImplicitCastExpr 0x564387f043f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564387f043c8 <col:7> 'int' xvalue .base 0x564387e67d50
| |     `-CXXStaticCastExpr 0x564387f04398 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564387f04368 <col:7> 'IntArg' lvalue ParmVar 0x564387e6acf8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x564387e67db8 'status' 'int'
| | `-ImplicitCastExpr 0x564387f044c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564387f04498 <col:7> 'int' xvalue .status 0x564387e67db8
| |     `-CXXStaticCastExpr 0x564387f04468 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x564387f04438 <col:7> 'IntArg' lvalue ParmVar 0x564387e6acf8 '' 'IntArg &&'
| `-CompoundStmt 0x564387f04520 <col:7>
`-CXXDestructorDecl 0x564387f03460 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564387e6eef0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x564387e6f148 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x564387f03388 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x564387f03900 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x564387f038e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x564387f03970 <col:19>
|-CXXConstructorDecl 0x564387f03568 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x564387f03568
| `-ParmVarDecl 0x564387f03678 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x564387f03718 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564387f03828 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x564387f04530 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564387f04250 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x564387f04220 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x564387f041f0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x564387f03828 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x564387f045a0 <col:19>
`-CXXDestructorDecl 0x564387f039b0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
