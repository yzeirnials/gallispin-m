
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cceebf8 prev 0x55670cce63a8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cceecf0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55670cceed80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55670cceedf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55670cceeeb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55670cceef80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55670ccef0f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55670ccef030 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55670ccef1a0 <col:24>
| `-OptimizeNoneAttr 0x55670ccef1f8 <col:34>
|-CXXMethodDecl 0x55670ccef240 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55670ccef4f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55670ccef2f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55670ccef368 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55670ccef3e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55670ccef5b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55670ccef5e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55670ccef650 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55670ccef6d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55670ccef9f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55670ccef790 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55670ccef808 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55670ccef880 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55670ccef900 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55670ccefb10 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55670ccf74a0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55670ccf74a0
| `-ParmVarDecl 0x55670ccf75b8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55670ccf7658 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55670ccf7658
| `-ParmVarDecl 0x55670ccf7768 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55670cde8e18 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cce1c10 prev 0x55670cce1990 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55670cce1d08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55670cce1d98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55670cce1df8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55670cce1ee8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55670cce1fe8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55670cce21b8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55670cce2068 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55670cce20e0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55670cce2348 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55670cce2280 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55670cce23f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55670cce2528 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55670cce2460 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55670cce26c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55670cce2608 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55670cce2868 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55670cce27a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55670cce2910 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55670cce2a10 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55670cce2af0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce29f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55670cce29d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55670cce2aa0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55670cce2b08 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cce2a80 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55670cce2a60 <col:44> 'int' 2
|-CXXMethodDecl 0x55670cce2c50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55670cce2b38 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55670cce2bb8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55670cce2da8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55670cce2d18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55670cce2fe8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55670cce2e68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55670cce2ee0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55670cce3098 <col:20>
| `-OptimizeNoneAttr 0x55670cce30f0 <col:30>
|-CXXMethodDecl 0x55670cce31f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55670cce3130 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55670cce32a0 <col:20>
| `-OptimizeNoneAttr 0x55670cce32f8 <col:30>
|-CXXMethodDecl 0x55670cce3348 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55670cce3410 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55670cce3528 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55670cce35b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55670cce3638 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55670cce36c0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55670cce3748 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55670cce37d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55670cce3898 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55670cce3920 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55670cce39a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55670cce3a30 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55670cce3ab8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55670cce3b40 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55670cce3bd0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55670cce3c90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55670cce3d20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55670cce3e70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55670cce3dd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55670cce4000 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55670cce3f30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55670cce42a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55670cce40b8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55670cce4138 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55670cce41b8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55670cce4358 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55670cce4460 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55670cce46f0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce4440 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55670cce4420 <col:33> 'int' 0
| |-EnumConstantDecl 0x55670cce44f0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55670cce4708 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce44d0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55670cce44b0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55670cce4580 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55670cce4720 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce4560 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55670cce4540 <col:38> 'int' 90
| |-EnumConstantDecl 0x55670cce4610 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55670cce4738 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce45f0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55670cce45d0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55670cce46a0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55670cce4750 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cce4680 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55670cce4660 <col:32> 'int' 2000
|-CXXMethodDecl 0x55670cce4790 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55670cce4bd0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55670cce4a40 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55670cce4ab8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cce4ca0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55670cce4e20 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55670cce4d50 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cce5028 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55670cce4ed8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55670cce4f50 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cce5150 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55670cce51f0 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55670cce52b0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce5340 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55670cce5570 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cce5320 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55670cce5300 <col:36> 'int' EnumConstant 0x55670cce52b0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce5390 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce53e0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce5430 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce5480 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55670cce54d0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55670cce5520 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55670cce5658 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55670cce5598 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55670cce5720 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55670cce57e0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55670cce58a0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55670cce5960 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55670cce5a78 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55670cce5b40 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55670cce5cc0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55670cce5bf0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55670cce5de8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55670cce5fe8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55670cce5e98 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55670cce5f18 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55670ccf3948 <col:54, line:127:5>
|   |-ParenExpr 0x55670ccf37f8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55670ccf37c8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccf34b8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55670ccf3490 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55670ccf3478 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55670ccf3460 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55670ccf3430 <col:31> 'Router *' lvalue ->_router 0x55670ccf02c0
|   |   |         `-CXXThisExpr 0x55670ccf3420 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55670ccf3518 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccf34f8 <col:48> 'int' 0
|   |   `-CallExpr 0x55670ccf3728 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55670ccf3710 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccf36f0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccf3768 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccf3588 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55670ccf3780 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccf35a8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55670ccf3798 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccf35e0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55670ccf37b0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccf36d8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccf36c0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccf3678 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55670ccf3890 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55670ccf3828 <col:9> 'Router *' lvalue ->_router 0x55670ccf02c0
|   | | `-CXXThisExpr 0x55670ccf3818 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55670ccf3878 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55670ccf3858 <col:19> 'Router *' lvalue ParmVar 0x55670cce5e98 'r' 'Router *'
|   `-BinaryOperator 0x55670ccf3928 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55670ccf38c0 <col:9> 'int' lvalue ->_eindex 0x55670ccf0328
|     | `-CXXThisExpr 0x55670ccf38b0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55670ccf3910 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccf38f0 <col:19> 'int' lvalue ParmVar 0x55670cce5f18 'eindex' 'int'
|-CXXMethodDecl 0x55670cce6170 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55670cce60a8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55670cce6240 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55670cce6308 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55670cce63a8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55670cce65f8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55670cce6470 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55670cce64f0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55670cce66a8 <col:20>
| `-OptimizeNoneAttr 0x55670cce6700 <col:30>
|-CXXMethodDecl 0x55670cce6808 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55670cce6740 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55670cce68b0 <col:20>
| `-OptimizeNoneAttr 0x55670cce6908 <col:30>
|-CXXMethodDecl 0x55670cce69d8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55670cce6948 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55670cce6a80 <col:20>
| `-OptimizeNoneAttr 0x55670cce6ad8 <col:30>
|-CXXMethodDecl 0x55670cce6c68 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55670cce6b10 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55670cce6b90 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55670cce6df8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55670cce6d30 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55670cce6f48 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55670cce6eb8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55670cce7098 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55670cce7008 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55670cce71e8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55670cce7158 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55670cce74a8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55670cce72a0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55670cce7320 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55670cce73c8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55670cce7580 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55670cce7640 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55670cce7910 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55670cce77c0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55670cce7838 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55670cce7a38 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55670cce7c10 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55670cce7af0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55670cce7b70 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55670cce7df8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55670cce7cd8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55670cce7d58 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55670cce8168 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55670cce7eb8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55670cce7f30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55670cce7fb0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55670ccf2f30 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55670ccf2f10 <col:106> 'int' 0
| `-ParmVarDecl 0x55670cce8028 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf2f68 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf2f48 <col:126> 'int' 0
|-CXXMethodDecl 0x55670cce84e8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55670cce8238 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55670cce82b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55670cce8330 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55670cce83a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf2fa0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf2f80 <col:114> 'int' 0
|-CXXMethodDecl 0x55670cce8878 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55670cce85c0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55670cce8638 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55670cce86b8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55670ccf2fb8 <col:96> 'int' 0
| `-ParmVarDecl 0x55670cce8730 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf2ff8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf2fd8 <col:116> 'int' 0
|-CXXMethodDecl 0x55670cce8bf8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55670cce8948 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55670cce89c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce8a40 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55670ccf3030 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55670ccf3010 <col:109> 'int' 0
| `-ParmVarDecl 0x55670cce8ab8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf3068 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf3048 <col:129> 'int' 0
|-CXXMethodDecl 0x55670cce8f78 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55670cce8cc8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55670cce8d40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce8dc0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55670cce8e38 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf30a0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf3080 <col:117> 'int' 0
|-CXXMethodDecl 0x55670cce9318 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55670cce9050 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cce90c8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce9158 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55670ccf30b8 <col:99> 'int' 0
| `-ParmVarDecl 0x55670cce91d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55670ccf30f8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55670ccf30d8 <col:119> 'int' 0
|-CXXMethodDecl 0x55670cce9738 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55670cce93e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55670cce9468 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55670cce94e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce9560 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55670ccf3130 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55670ccf3110 <col:108> 'int' 0
| `-ParmVarDecl 0x55670cce95e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55670ccf3168 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55670ccf3148 <col:141> 'int' 0
|-CXXMethodDecl 0x55670cce9b58 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55670cce9810 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55670cce9890 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55670cce9908 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce9988 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55670cce9a08 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55670ccf3180 <col:121> 'int' 0
|-CXXMethodDecl 0x55670cce9f88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55670cce9c38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55670cce9cb8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55670cce9d30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cce9db0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55670ccf31a0 <col:98> 'int' 0
| `-ParmVarDecl 0x55670cce9e30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55670ccf31c0 <col:123> 'int' 0
|-CXXMethodDecl 0x55670ccea250 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55670ccea060 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55670ccea0e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55670ccea160 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55670ccf31e0 <col:80> 'int' 0
|-EnumDecl 0x55670ccea308 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55670ccea410 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55670ccea6a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccea3f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55670ccea3d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55670ccea4a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55670ccea6b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccea480 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55670ccea460 <col:40> 'int' 2
| |-EnumConstantDecl 0x55670ccea530 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55670ccea6d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccea510 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55670ccea4f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55670ccea5c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55670ccea6e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccea5a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55670ccea580 <col:36> 'int' 7
| `-EnumConstantDecl 0x55670ccea650 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55670ccea700 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccea630 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55670ccea610 <col:34> 'int' 6
|-CXXMethodDecl 0x55670ccea9b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55670ccea728 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55670ccea7c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55670ccea848 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55670ccea8c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55670ccf3298 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55670ccf3280 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55670ccf3268 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55670ccf3248 <col:98, col:105> 'String' (CXXTemporary 0x55670ccf3248)
|           `-CXXTemporaryObjectExpr 0x55670ccf3210 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55670cceac58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55670cceaa88 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55670cceab00 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55670cceab78 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55670ccf3348 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55670ccf3330 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55670ccf3318 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55670ccf32f8 <col:94, col:101> 'String' (CXXTemporary 0x55670ccf32f8)
| |         `-CXXTemporaryObjectExpr 0x55670ccf32c0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55670ccf3b30 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55670ccf3aa8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55670ccf3a78 <col:9> '<bound member function type>' ->add_task_handlers 0x55670ccea9b8
|     | `-CXXThisExpr 0x55670ccf3a68 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55670ccf3ae8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55670ccf39e8 <col:27> 'Task *' lvalue ParmVar 0x55670cceaa88 'task' 'Task *'
|     |-ImplicitCastExpr 0x55670ccf3b00 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55670ccf3a08 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55670cceab00 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55670ccf3b18 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55670ccf3a28 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55670ccea650 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55670ccf3a48 <col:62> 'const String' lvalue ParmVar 0x55670cceab78 'prefix' 'const String &'
|-CXXMethodDecl 0x55670cceae68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55670ccead20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55670ccead98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55670ccf33f8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55670ccf33e0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55670ccf33c8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55670ccf33a8 <col:70, col:77> 'String' (CXXTemporary 0x55670ccf33a8)
| |         `-CXXTemporaryObjectExpr 0x55670ccf3370 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55670ccf3d08 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55670ccf3c80 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55670ccf3c50 <col:9> '<bound member function type>' ->add_task_handlers 0x55670ccea9b8
|     | `-CXXThisExpr 0x55670ccf3c40 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55670ccf3cc0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55670ccf3bc0 <col:27> 'Task *' lvalue ParmVar 0x55670ccead20 'task' 'Task *'
|     |-ImplicitCastExpr 0x55670ccf3cd8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55670ccf3be0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55670ccf3cf0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55670ccf3c00 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55670ccea650 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55670ccf3c20 <col:57> 'const String' lvalue ParmVar 0x55670ccead98 'prefix' 'const String &'
|-CXXMethodDecl 0x55670cceb148 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55670cceaf30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cceafb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cceb028 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55670cceb3f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55670cceb218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cceb298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cceb318 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55670cceb6e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55670cceb4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cceb548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cceb5c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55670cceb998 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55670cceb7b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cceb838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cceb8b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55670ccebc48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55670cceba68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccebae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccebb68 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55670ccebef8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55670ccebd18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccebd98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccebe10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55670ccec1a8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55670ccebfc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccec048 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccec0c8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55670ccec458 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55670ccec278 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccec2f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccec378 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55670ccec738 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55670ccec528 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccec5a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccec650 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55670cceca18 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55670ccec808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccec888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670ccec930 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55670ccecc80 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55670ccecae8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55670ccecb68 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55670ccecbe0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55670ccecf28 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55670ccecd50 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55670ccecdd0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55670ccece48 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55670cced238 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55670ccecff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cced078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cced150 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55670cced4e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55670cced308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cced388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cced400 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55670cced798 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55670cced5b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cced638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cced6b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55670cceda68 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55670cced868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670cced8e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55670cced988 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55670ccedd98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55670ccedb38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55670ccedbb8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55670ccedc30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55670ccedca8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55670ccf3410 <col:93> 'bool' false
|-CXXMethodDecl 0x55670ccedf80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55670ccede68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55670ccedee8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55670ccee158 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55670ccee040 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55670ccee0c0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55670ccee438 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55670ccee218 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55670ccee290 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55670ccee310 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55670ccee388 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55670ccee728 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55670ccee508 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55670ccee580 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55670ccee600 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55670ccee678 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55670ccee960 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55670ccee800 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55670ccee880 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55670cceeb48 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55670cceea28 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55670cceeaa8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55670cceebf8 prev 0x55670cce63a8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55670cceecf0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55670cceed80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55670cceedf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55670cceeeb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55670cceef80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55670ccef0f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55670ccef030 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55670ccef1a0 <col:24>
| | `-OptimizeNoneAttr 0x55670ccef1f8 <col:34>
| |-CXXMethodDecl 0x55670ccef240 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55670ccef4f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55670ccef2f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55670ccef368 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55670ccef3e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55670ccef5b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55670ccef5e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55670ccef650 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55670ccef6d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55670ccef9f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55670ccef790 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55670ccef808 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55670ccef880 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55670ccef900 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55670ccefb10 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55670ccf74a0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55670ccf74a0
| | `-ParmVarDecl 0x55670ccf75b8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55670ccf7658 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55670ccf7658
| | `-ParmVarDecl 0x55670ccf7768 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55670cde8e18 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55670ccefb88 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55670ccefc28 <col:38> "" ""
|-CXXMethodDecl 0x55670ccefcb8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55670ccefd58 <col:44> "" ""
|-AccessSpecDecl 0x55670ccefdc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55670ccefdf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55670ccefef0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55670cceff40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccefed0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55670ccefeb0 <col:27> 'int' 4
|-FieldDecl 0x55670ccefff8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55670ccf01a8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55670ccf0260 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55670ccf02c0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55670ccf0328 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55670ccf0478 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55670ccf03b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55670ccf0628 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55670ccf0538 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55670ccf0808 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55670ccf06e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55670ccf0768 <col:25> col:28 'int'
|-CXXMethodDecl 0x55670ccf0ab0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55670ccf08d0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55670ccf0950 <col:28> col:31 'int'
| `-ParmVarDecl 0x55670ccf09c8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55670ccf0b68 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55670ccf0c30 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55670ccf0c80 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55670ccf0cd0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55670ccf0eb0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55670ccf0d60 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55670ccf0dd8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670ccf21a8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55670ccf0f78 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55670ccf0ff8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55670ccf1070 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55670ccf23c8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55670ccf2278 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55670ccf22f8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55670ccf2700 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55670ccf2488 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55670ccf2508 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55670ccf2580 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55670ccf2600 <col:57> col:60 'int'
|-CXXMethodDecl 0x55670ccf28e8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55670ccf27d0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55670ccf2850 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55670ccf2a38 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55670ccf29a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55670ccf2db8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55670ccf2af8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55670ccf2b78 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55670ccf2bf0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55670ccf2c70 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55670ccf2ed0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class ICMP6Error
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IP6Address _src_ip
       108 |     struct in6_addr _addr
       108 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       108 |         uint8_t [16] __u6_addr8
       108 |         uint16_t [8] __u6_addr16
       108 |         uint32_t [4] __u6_addr32
       124 |   int _type
       128 |   int _code
           | [sizeof=136, dsize=132, align=8,
           |  nvsize=132, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9a3ad8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55670c9a3cf8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55670c9a3e28 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55670c9a3f58 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55670cd06438 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55670cd06c48 <col:5>
|-CXXDestructorDecl 0x55670cd06510 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55670cd06618 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd06728 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55670cd1a660 <col:5>
|-CXXConstructorDecl 0x55670cd067c8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd068d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55670cd23a98 <col:5>
|-CXXMethodDecl 0x55670cd193c8 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd194d8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55670cd278a0 <col:5>
|   `-ReturnStmt 0x55670cd27890 <col:5>
|     `-UnaryOperator 0x55670cd27878 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cd27868 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55670cd19548 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55670cd19548
  `-ParmVarDecl 0x55670cd19658 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9a3930 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670c9a3a48 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55670c9a3ad8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55670c9a3cf8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55670c9a3e28 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55670c9a3f58 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55670cd06438 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55670cd06c48 <col:5>
| |-CXXDestructorDecl 0x55670cd06510 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55670cd06618 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670cd06728 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55670cd1a660 <col:5>
| |-CXXConstructorDecl 0x55670cd067c8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670cd068d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55670cd23a98 <col:5>
| |-CXXMethodDecl 0x55670cd193c8 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670cd194d8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55670cd278a0 <col:5>
| |   `-ReturnStmt 0x55670cd27890 <col:5>
| |     `-UnaryOperator 0x55670cd27878 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55670cd27868 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55670cd19548 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55670cd19548
|   `-ParmVarDecl 0x55670cd19658 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55670c9a4018 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55670cd06348 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55670c9a4018 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55670cd06c58 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55670cd06cb0 <col:8>
|-CXXConstructorDecl 0x55670cd06948 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd06a28 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55670c9a4018 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55670cd1a670 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55670cd1a630 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
| |     `-DeclRefExpr 0x55670cd1a610 <col:8> 'const in6_addr' lvalue ParmVar 0x55670cd06a28 '' 'const in6_addr &'
| `-CompoundStmt 0x55670cd1a6d0 <col:8>
|-CXXConstructorDecl 0x55670cd06ac8 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd06bd8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55670c9a4018 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55670cd23aa8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55670cd23a68 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55670c9a4018
| |     `-CXXStaticCastExpr 0x55670cd23a38 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55670cd23a08 <col:8> 'in6_addr' lvalue ParmVar 0x55670cd06bd8 '' 'in6_addr &&'
| `-CompoundStmt 0x55670cd23b08 <col:8>
|-CXXMethodDecl 0x55670cd196c8 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd197d8 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55670cd27918 <col:8>
|   |-CXXMemberCallExpr 0x55670cd278b8 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55670cd277f8 <col:8> '<bound member function type>' .operator= 0x55670cd193c8
|   | | `-MemberExpr 0x55670cd27708 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55670c9a4018
|   | |   `-CXXThisExpr 0x55670cd276f8 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55670cd277c8 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|   |   `-DeclRefExpr 0x55670cd277a8 <col:8> 'const in6_addr' lvalue ParmVar 0x55670cd197d8 '' 'const in6_addr &'
|   `-ReturnStmt 0x55670cd27908 <col:8>
|     `-UnaryOperator 0x55670cd278f0 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cd278e0 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55670cd19848 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55670cd19848
| `-ParmVarDecl 0x55670cd19958 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55670cd19cf8 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd02c30 prev 0x55670cca5970 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cd02d28 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55670cd02db8 <col:20, col:26> col:20 public
|-TypedefDecl 0x55670cd02df0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55670c8cd130 'uninitialized_type'
|   `-CXXRecord 0x55670c8cd098 'uninitialized_type'
|-CXXConstructorDecl 0x55670cd02eb0 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd06cc0 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55670cd18f28 <col:25, line:21:5>
|   `-CallExpr 0x55670cd18ed8 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55670cd18ec0 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55670cd18ea0 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55670ca09b18 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55670cd18f10 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55670cd06da0 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55670cd06d70 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|     |     `-CXXThisExpr 0x55670cd06d60 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55670cd18e00 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55670cd18e80 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55670cd18e60 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55670cd18e30 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55670cd18e20 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55670cd03000 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55670cd02f70 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd18f40 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55670cd19190 <col:56, line:26:5>
|   `-CallExpr 0x55670cd19110 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55670cd190f8 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55670cd190d8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55670ca08fe8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55670cd19148 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55670cd19020 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55670cd18ff0 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|     |     `-CXXThisExpr 0x55670cd18fe0 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55670cd19178 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55670cd19160 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55670cd19038 <col:17> 'const unsigned char *' lvalue ParmVar 0x55670cd02f70 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55670cd190b8 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55670cd19098 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55670cd19068 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55670cd19058 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55670cd03150 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55670cd030c0 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd191a8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55670cd1a550 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55670cd1a538 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55670cd1a500 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55670cd1a4e8 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55670cd1a468 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55670cd05c68 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55670cd19210 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55670cd19200 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55670cd1a450 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55670cd1a438 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55670cd1a420 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55670cd1a400 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55670cd1a3d0 <col:10> '<bound member function type>' .operator in_addr 0x55670cae4360
|                 `-ImplicitCastExpr 0x55670cd1a3b8 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55670cd19228 <col:10> 'IPAddress' lvalue ParmVar 0x55670cd030c0 'x' 'IPAddress'
|-CXXConstructorDecl 0x55670cd032a0 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55670cd03210 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55670cd034c8 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55670cd033d0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd1a6e0 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55670cd1a568 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55670cd033d0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55670cd1a740 <col:13, line:41:5>
|-CXXConstructorDecl 0x55670cd03698 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55670cd035d0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd1a750 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55670cd1a860 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55670cd1a828 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55670cd1a810 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55670cd1a7f0 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55670cd05c68 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55670cd1a7b8 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55670cd1a7a8 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55670cd1a7d0 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55670cd035d0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55670cd037e8 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55670cd03758 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd1a878 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55670cd1a928 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55670cd1a900 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55670cd1a8d0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55670cd03758 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55670cd03978 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55670cd038b0 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55670cd03ac8 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55670cd03a38 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55670cd03c78 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55670cd03bf0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55670cca5a00 'IP6Address'
|   | `-CXXRecord 0x55670cd02c30 'IP6Address'
|   `-ParenType 0x55670cd03b90 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55670caa44d0 'uint32_t () const' const cdecl
|       `-TypedefType 0x55670c8cd420 'uint32_t' sugar
|         |-Typedef 0x55670c7e04c8 'uint32_t'
|         `-TypedefType 0x55670c7b95a0 '__uint32_t' sugar
|           |-Typedef 0x55670c7b9198 '__uint32_t'
|           `-BuiltinType 0x55670c777620 'unsigned int'
|-CXXConversionDecl 0x55670cd03db8 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55670cd03f40 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55670cd1a990 <col:46, col:62>
|   `-ReturnStmt 0x55670cd1a980 <col:48, col:55>
|     `-MemberExpr 0x55670cd1a950 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|       `-CXXThisExpr 0x55670cd1a940 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55670cd04130 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55670cd1a9f8 <col:34, col:50>
|   `-ReturnStmt 0x55670cd1a9e8 <col:36, col:43>
|     `-MemberExpr 0x55670cd1a9b8 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|       `-CXXThisExpr 0x55670cd1a9a8 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55670cd04230 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55670cd1aa60 <col:45, col:61>
|   `-ReturnStmt 0x55670cd1aa50 <col:47, col:54>
|     `-MemberExpr 0x55670cd1aa20 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|       `-CXXThisExpr 0x55670cd1aa10 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55670cd04308 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55670cd1aac8 <col:33, col:49>
|   `-ReturnStmt 0x55670cd1aab8 <col:35, col:42>
|     `-MemberExpr 0x55670cd1aa88 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|       `-CXXThisExpr 0x55670cd1aa78 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55670cd043d0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55670cd1ac00 <col:27, col:66>
|   `-ReturnStmt 0x55670cd1abf0 <col:29, col:63>
|     `-UnaryOperator 0x55670cd1abd8 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670cd1abb8 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55670cd1aba0 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670cd1ab50 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55670c9a3cf8
|         |   `-MemberExpr 0x55670cd1ab20 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|         |     `-MemberExpr 0x55670cd1aaf0 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|         |       `-CXXThisExpr 0x55670cd1aae0 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55670cd1ab80 <col:62> 'int' 0
|-CXXMethodDecl 0x55670cd04498 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55670cd1ad78 <col:39, col:78>
|   `-ReturnStmt 0x55670cd1ad68 <col:41, col:75>
|     `-UnaryOperator 0x55670cd1ad50 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670cd1ad30 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55670cd1ad18 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670cd1ac88 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|         |   `-MemberExpr 0x55670cd1ac58 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|         |     `-MemberExpr 0x55670cd1ac28 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|         |       `-CXXThisExpr 0x55670cd1ac18 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55670cd1acb8 <col:74> 'int' 0
|-CXXMethodDecl 0x55670cd045b8 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55670cd1aee8 <col:24, col:75>
|   `-ReturnStmt 0x55670cd1aed8 <col:26, col:72>
|     `-CStyleCastExpr 0x55670cd1aeb0 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55670cd1ae88 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55670cd1ae68 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55670cd1ae50 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55670cd1ae00 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55670c9a3cf8
|           |   `-MemberExpr 0x55670cd1add0 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|           |     `-MemberExpr 0x55670cd1ada0 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|           |       `-CXXThisExpr 0x55670cd1ad90 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55670cd1ae30 <col:71> 'int' 0
|-CXXMethodDecl 0x55670cd04678 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55670cd1b070 <col:36, col:87>
|   `-ReturnStmt 0x55670cd1b060 <col:38, col:84>
|     `-ImplicitCastExpr 0x55670cd1b048 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55670cd1b020 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55670cd1aff8 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55670cd1afd8 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55670cd1afc0 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670cd1af70 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|             |   `-MemberExpr 0x55670cd1af40 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|             |     `-MemberExpr 0x55670cd1af10 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|             |       `-CXXThisExpr 0x55670cd1af00 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55670cd1afa0 <col:83> 'int' 0
|-CXXMethodDecl 0x55670cd04738 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55670cd1b1e0 <col:24, col:75>
|   `-ReturnStmt 0x55670cd1b1d0 <col:26, col:72>
|     `-CStyleCastExpr 0x55670cd1b1a8 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55670cd1b180 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55670cd1b160 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55670cd1b148 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55670cd1b0f8 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55670c9a3cf8
|           |   `-MemberExpr 0x55670cd1b0c8 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|           |     `-MemberExpr 0x55670cd1b098 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55670cd062c8
|           |       `-CXXThisExpr 0x55670cd1b088 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55670cd1b128 <col:71> 'int' 0
|-CXXMethodDecl 0x55670cd047f8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55670cd1b368 <col:36, col:87>
|   `-ReturnStmt 0x55670cd1b358 <col:38, col:84>
|     `-ImplicitCastExpr 0x55670cd1b340 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55670cd1b318 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55670cd1b2f0 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55670cd1b2d0 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55670cd1b2b8 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670cd1b268 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|             |   `-MemberExpr 0x55670cd1b238 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|             |     `-MemberExpr 0x55670cd1b208 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|             |       `-CXXThisExpr 0x55670cd1b1f8 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55670cd1b298 <col:83> 'int' 0
|-CXXMethodDecl 0x55670cd048b8 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cd04980 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55670cd04ba8 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55670cd04a58 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55670cd04ad0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55670cd04d28 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55670cd04c68 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55670cd04df0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55670cd1b680 <col:36, line:99:5>
|   `-ReturnStmt 0x55670cd1b670 <line:98:2, col:81>
|     `-BinaryOperator 0x55670cd1b650 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55670cd1b4c8 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55670cd1b4b0 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55670cd1b498 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55670cd1b458 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55670cd1b440 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55670cd1b3f0 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|       | |     |   `-MemberExpr 0x55670cd1b3c0 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|       | |     |     `-MemberExpr 0x55670cd1b390 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|       | |     |       `-CXXThisExpr 0x55670cd1b380 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55670cd1b420 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55670cd1b478 <col:41> 'int' 255
|       `-BinaryOperator 0x55670cd1b630 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cd1b618 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55670cd1b600 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55670cd1b5c0 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55670cd1b5a8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55670cd1b558 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|         |     |   `-MemberExpr 0x55670cd1b528 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|         |     |     `-MemberExpr 0x55670cd1b4f8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|         |     |       `-CXXThisExpr 0x55670cd1b4e8 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55670cd1b588 <col:74> 'int' 12
|         `-IntegerLiteral 0x55670cd1b5e0 <col:81> 'int' 254
|-CXXMethodDecl 0x55670cd04f68 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55670cd04ea0 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55670cd05030 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55670cd1bb68 <col:43, line:114:5>
|   `-ReturnStmt 0x55670cd1bb58 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55670cd1bb38 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55670cd1b998 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55670cd1b7f8 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55670cd1b7c8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55670cd1b788 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55670cd1b748 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55670cd1b718 <col:9> '<bound member function type>' ->data32 0x55670cd047f8
|       | | |   |   `-CXXThisExpr 0x55670cd1b708 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55670cd1b768 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55670cd1b7e0 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55670cd1b7a8 <col:24> 'int' 0
|       | `-BinaryOperator 0x55670cd1b978 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55670cd1b948 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55670cd1b908 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55670cd1b8c8 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55670cd1b898 <col:29> '<bound member function type>' ->data32 0x55670cd047f8
|       |   |   |   `-CXXThisExpr 0x55670cd1b888 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55670cd1b8e8 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55670cd1b960 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55670cd1b928 <col:44> 'int' 0
|       `-BinaryOperator 0x55670cd1bb18 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cd1bae8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55670cd1baa8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55670cd1ba68 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55670cd1ba38 <col:9> '<bound member function type>' ->data32 0x55670cd047f8
|         |   |   `-CXXThisExpr 0x55670cd1ba28 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55670cd1ba88 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55670cd1bb00 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55670cd1bac8 <col:24> 'int' 0
|-CXXMethodDecl 0x55670cd050f0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55670cd1c0e0 <col:39, line:123:5>
|   `-ReturnStmt 0x55670cd1c0d0 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55670cd1c0b0 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55670cd1be80 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55670cd1bce0 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55670cd1bcb0 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55670cd1bc70 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55670cd1bc30 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55670cd1bc00 <col:9> '<bound member function type>' ->data32 0x55670cd047f8
|       | | |   |   `-CXXThisExpr 0x55670cd1bbf0 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55670cd1bc50 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55670cd1bcc8 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55670cd1bc90 <col:24> 'int' 0
|       | `-BinaryOperator 0x55670cd1be60 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55670cd1be30 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55670cd1bdf0 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55670cd1bdb0 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55670cd1bd80 <col:29> '<bound member function type>' ->data32 0x55670cd047f8
|       |   |   |   `-CXXThisExpr 0x55670cd1bd70 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55670cd1bdd0 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55670cd1be48 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55670cd1be10 <col:44> 'int' 0
|       `-BinaryOperator 0x55670cd1c090 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cd1c078 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55670cd1bf90 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55670cd1bf50 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55670cd1bf20 <col:9> '<bound member function type>' ->data32 0x55670cd047f8
|         |   |   `-CXXThisExpr 0x55670cd1bf10 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55670cd1bf70 <col:18> 'int' 2
|         `-CallExpr 0x55670cd1c050 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55670cd1c038 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55670cd1c018 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55670c9aa268 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55670cd1bff8 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55670cd051b0 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55670cd1c270 <col:38, line:131:5>
|   `-ReturnStmt 0x55670cd1c260 <line:130:9, col:47>
|     `-BinaryOperator 0x55670cd1c240 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55670cd1c228 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55670cd1c210 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55670cd1c1d0 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55670cd1c1b8 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55670cd1c168 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55670c9a3cf8
|       |     |   `-MemberExpr 0x55670cd1c138 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55670c9a4018
|       |     |     `-MemberExpr 0x55670cd1c108 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55670cd062c8
|       |     |       `-CXXThisExpr 0x55670cd1c0f8 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55670cd1c198 <col:41> 'int' 0
|       `-IntegerLiteral 0x55670cd1c1f0 <col:47> 'int' 255
|-CXXMethodDecl 0x55670cd05270 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55670cd1c648 <col:39, line:139:5>
|   `-ReturnStmt 0x55670cd1c638 <line:138:9, col:67>
|     `-BinaryOperator 0x55670cd1c618 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55670cd1c478 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55670cd1c460 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55670cd1c378 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55670cd1c338 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55670cd1c308 <col:16> '<bound member function type>' ->data32 0x55670cd047f8
|       | |   |   `-CXXThisExpr 0x55670cd1c2f8 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55670cd1c358 <col:25> 'int' 0
|       | `-CallExpr 0x55670cd1c438 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55670cd1c420 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55670cd1c400 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55670c9aa268 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55670cd1c3e0 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55670cd1c5f8 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cd1c5c8 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55670cd1c588 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55670cd1c548 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55670cd1c518 <col:52> '<bound member function type>' ->data32 0x55670cd047f8
|         |   |   `-CXXThisExpr 0x55670cd1c508 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55670cd1c568 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55670cd1c5e0 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55670cd1c5a8 <col:67> 'int' 0
|-CXXMethodDecl 0x55670cd05330 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55670cd054d8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55670cd053e0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55670cd05698 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55670cd055a8 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55670cd057e0 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55670cd05750 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55670cd05940 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55670cd058b0 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55670cd05aa0 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55670cd05a10 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55670cd05c68 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55670cd05b70 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55670cd05de8 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55670cd05d20 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55670cd05eb0 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55670cd05f70 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55670cd06030 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55670cd1c7c8 <col:22, col:42>
|   `-ReturnStmt 0x55670cd1c7b8 <col:24, col:39>
|     `-ExprWithCleanups 0x55670cd1c7a0 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55670cd1c770 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55670cd1c758 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55670cd1c738 <col:31, col:39> 'String' (CXXTemporary 0x55670cd1c738)
|             `-CXXMemberCallExpr 0x55670cd1c710 <col:31, col:39> 'String'
|               `-MemberExpr 0x55670cd1c6e0 <col:31> '<bound member function type>' ->unparse 0x55670cd05eb0
|                 `-CXXThisExpr 0x55670cd1c6d0 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55670cd06100 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55670cd061a8 <col:51> "" ""
|-TypedefDecl 0x55670cd06228 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55670cd04a20 'const IP6Address &'
|   `-QualType 0x55670cca5a01 'const IP6Address' const
|     `-RecordType 0x55670cca5a00 'IP6Address'
|       `-CXXRecord 0x55670cd02c30 'IP6Address'
|-AccessSpecDecl 0x55670cd06280 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55670cd062c8 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55670cd19248 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55670cd19248
| `-ParmVarDecl 0x55670cd19328 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55670cd199f8 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55670cd199f8
| `-ParmVarDecl 0x55670cd19b08 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55670cd19b78 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55670cd19b78
| `-ParmVarDecl 0x55670cd19c88 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55670cd19de0 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cd19ef8 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55670cd062c8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55670cd23b18 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55670cd239c0 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55670cd062c8
| |     `-CXXStaticCastExpr 0x55670cd23990 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55670cd23960 <col:7> 'IP6Address' lvalue ParmVar 0x55670cd19ef8 '' 'IP6Address &&'
| `-CompoundStmt 0x55670cd23b78 <col:7>
`-CXXDestructorDecl 0x55670cd237c8 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd2b9c0 <../elements/ip6/icmp6error.hh:52:1, line:76:1> line:52:7 class ICMP6Error definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55670cd2bb18 <col:1, col:7> col:7 implicit referenced class ICMP6Error
|-AccessSpecDecl 0x55670cd2bba8 <line:53:1, col:7> col:1 public
|-CXXConstructorDecl 0x55670cd2bc30 <line:54:3, col:14> col:3 ICMP6Error 'void ()'
|-CXXDestructorDecl 0x55670cd2bd20 <line:55:3, col:15> col:3 ~ICMP6Error 'void ()' noexcept-unevaluated 0x55670cd2bd20
| `-Overrides: [ 0x55670cce1ee8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55670cd2be50 <line:57:3, col:57> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55670cce3348 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55670cd2d118 <col:34, col:57>
|   `-ReturnStmt 0x55670cd2d108 <col:36, col:43>
|     `-ImplicitCastExpr 0x55670cd2d0f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55670cd2d0c8 <col:43> 'const char [11]' lvalue "ICMP6Error"
|-CXXMethodDecl 0x55670cd2bf18 <line:58:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55670cce3410 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55670cd2d178 <col:34, col:54>
|   `-ReturnStmt 0x55670cd2d168 <col:36, col:43>
|     `-ImplicitCastExpr 0x55670cd2d150 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55670cd2d130 <col:43> 'const char []' lvalue Var 0x55670cce36c0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55670cd2c1f0 <line:59:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55670cce4bd0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55670cd2c0a0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55670cd2c118 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55670cd2c348 <line:60:3, col:36> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55670cce4e20 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55670cd2c2b0 <col:18, col:32> col:32 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cd2c490 <line:62:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55670cce2528 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55670cd2c400 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55670cd2c538 <line:64:1, col:8> col:1 private
|-FieldDecl 0x55670cd2c570 <line:66:3, col:14> col:14 _src_ip 'IP6Address'
|-FieldDecl 0x55670cd2c5d8 <line:67:3, col:7> col:7 referenced _type 'int'
|-FieldDecl 0x55670cd2c640 <line:68:3, col:7> col:7 referenced _code 'int'
|-CXXMethodDecl 0x55670cd2c738 <line:70:3, col:32> col:15 is_error_type 'bool (int)' static
| `-ParmVarDecl 0x55670cd2c6a8 <col:29> col:32 'int'
|-CXXMethodDecl 0x55670cd2c888 <line:71:3, col:35> col:15 is_redirect_type 'bool (int)' static
| `-ParmVarDecl 0x55670cd2c7f8 <col:32> col:35 'int'
|-CXXMethodDecl 0x55670cd2ca08 <line:72:3, col:36> col:8 unicast 'bool (const IP6Address &)'
| `-ParmVarDecl 0x55670cd2c940 <col:16, col:34> col:34 aa 'const IP6Address &'
|-CXXMethodDecl 0x55670cd2cb50 <line:73:3, col:41> col:8 valid_source 'bool (const IP6Address &)'
| `-ParmVarDecl 0x55670cd2cac0 <col:21, col:39> col:39 aa 'const IP6Address &'
|-CXXMethodDecl 0x55670cd2ccc8 <line:74:3, col:41> col:8 has_route_opt 'bool (const click_ip6 *)'
| `-ParmVarDecl 0x55670cd2cc08 <col:22, col:39> col:39 ip 'const click_ip6 *'
|-CXXConstructorDecl 0x55670cd2cd98 <line:52:7> col:7 implicit ICMP6Error 'void (const ICMP6Error &)' inline default_delete noexcept-unevaluated 0x55670cd2cd98
| `-ParmVarDecl 0x55670cd2cea8 <col:7> col:7 'const ICMP6Error &'
`-CXXMethodDecl 0x55670cd2cf48 <col:7> col:7 implicit operator= 'ICMP6Error &(const ICMP6Error &)' inline default_delete noexcept-unevaluated 0x55670cd2cf48
  `-ParmVarDecl 0x55670cd2d058 <col:7> col:7 'const ICMP6Error &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMP6Error = type { %class.Element.base, %class.IP6Address, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.ICMP6Error.base = type { %class.Element.base, %class.IP6Address, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cab8680 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670caba7d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55670caba878 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55670caba8d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55670caba938 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55670caba9e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cabacf0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cabae08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55670cabaeb0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55670cabaf18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55670cabafa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55670cabd540 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55670cabd978 <col:12>
|-CXXConstructorDecl 0x55670cabd648 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cabd758 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55670cabaeb0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55670cac1c80 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55670cac1c50 <col:12> 'const char *const' lvalue .data 0x55670cabaeb0
| |     `-DeclRefExpr 0x55670cac1c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55670cabaf18 'length' 'int'
| | `-ImplicitCastExpr 0x55670cac1d10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55670cac1ce0 <col:12> 'const int' lvalue .length 0x55670cabaf18
| |     `-DeclRefExpr 0x55670cac1cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55670cabafa8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55670cac1da0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55670cac1d70 <col:12> 'String::memo_t *const' lvalue .memo 0x55670cabafa8
| |     `-DeclRefExpr 0x55670cac1d50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| `-CompoundStmt 0x55670cac1df8 <col:12>
|-CXXConstructorDecl 0x55670cabd7f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55670cabd7f8
| `-ParmVarDecl 0x55670cabd908 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55670cac6b50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55670cad0548 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cad0658 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55670cad0b98 <col:12>
|   |-BinaryOperator 0x55670cad0988 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55670cad0940 <col:12> 'const char *' lvalue ->data 0x55670cabaeb0
|   | | `-CXXThisExpr 0x55670cad0930 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55670cad0970 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55670cad0900 <col:12> 'const char *const' lvalue .data 0x55670cabaeb0
|   |     `-DeclRefExpr 0x55670cad08e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55670cad0a78 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55670cad0a30 <col:12> 'int' lvalue ->length 0x55670cabaf18
|   | | `-CXXThisExpr 0x55670cad09f8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55670cad0a60 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55670cad09c8 <col:12> 'const int' lvalue .length 0x55670cabaf18
|   |     `-DeclRefExpr 0x55670cad09a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55670cad0b40 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55670cad0af8 <col:12> 'String::memo_t *' lvalue ->memo 0x55670cabafa8
|   | | `-CXXThisExpr 0x55670cad0ae8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55670cad0b28 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55670cad0ab8 <col:12> 'String::memo_t *const' lvalue .memo 0x55670cabafa8
|   |     `-DeclRefExpr 0x55670cad0a98 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55670cad0b88 <col:12>
|     `-UnaryOperator 0x55670cad0b70 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cad0b60 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55670cad06c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55670cad06c8
  `-ParmVarDecl 0x55670cad07d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670caafbe0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55670caafcf8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55670caafd88 <col:16, col:22> col:16 public
|-TypedefDecl 0x55670caafdc8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55670c777fd0 'const char *'
|   `-QualType 0x55670c777521 'const char' const
|     `-BuiltinType 0x55670c777520 'char'
|-TypedefDecl 0x55670caafe50 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55670caafe20 'String::const_iterator' sugar
|   |-Typedef 0x55670caafdc8 'const_iterator'
|   `-PointerType 0x55670c777fd0 'const char *'
|     `-QualType 0x55670c777521 'const char' const
|       `-BuiltinType 0x55670c777520 'char'
|-TypedefDecl 0x55670caaffc0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55670caaff30 'int (String::*)() const'
|   |-RecordType 0x55670caafc70 'String'
|   | `-CXXRecord 0x55670caafbe0 'String'
|   `-ParenType 0x55670caafed0 'int () const' sugar
|     `-FunctionProtoType 0x55670ca84e90 'int () const' const cdecl
|       `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cab0028 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55670c8cd6c0 'int64_t' sugar
|   |-Typedef 0x55670c7e0390 'int64_t'
|   `-TypedefType 0x55670c7b9630 '__int64_t' sugar
|     |-Typedef 0x55670c7b9208 '__int64_t'
|     `-BuiltinType 0x55670c7775a0 'long'
|-TypedefDecl 0x55670cab0090 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55670c8cd5e0 'uint64_t' sugar
|   |-Typedef 0x55670c7e0530 'uint64_t'
|   `-TypedefType 0x55670c7b96c0 '__uint64_t' sugar
|     |-Typedef 0x55670c7b9278 '__uint64_t'
|     `-BuiltinType 0x55670c777640 'unsigned long'
|-TypedefDecl 0x55670cab0120 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55670cab00f0 'String::intmax_t' sugar
|   |-Typedef 0x55670cab0028 'intmax_t'
|   `-TypedefType 0x55670c8cd6c0 'int64_t' sugar
|     |-Typedef 0x55670c7e0390 'int64_t'
|     `-TypedefType 0x55670c7b9630 '__int64_t' sugar
|       |-Typedef 0x55670c7b9208 '__int64_t'
|       `-BuiltinType 0x55670c7775a0 'long'
|-TypedefDecl 0x55670cab01b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55670cab0180 'String::uintmax_t' sugar
|   |-Typedef 0x55670cab0090 'uintmax_t'
|   `-TypedefType 0x55670c8cd5e0 'uint64_t' sugar
|     |-Typedef 0x55670c7e0530 'uint64_t'
|     `-TypedefType 0x55670c7b96c0 '__uint64_t' sugar
|       |-Typedef 0x55670c7b9278 '__uint64_t'
|       `-BuiltinType 0x55670c777640 'unsigned long'
|-CXXConstructorDecl 0x55670cab0270 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55670cab0418 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55670cab0358 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55670cab05c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55670cab0508 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55670cab0748 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55670cab0690 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55670cab0968 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55670cab0810 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55670cab0890 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55670cab0b88 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55670cab0a38 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55670cab0ab8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55670cab0da8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55670cab0c58 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55670cab0cd8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55670cab0fc8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55670cab0e78 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55670cab0ef8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55670cab1158 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55670cab1090 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55670cab12d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55670cab1218 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55670cab1468 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55670cab13a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55670cab15c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55670cab1530 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55670cab1718 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55670cab1688 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55670cab1870 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55670cab17e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55670cab19f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55670cab1938 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55670cab1b88 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55670cab1ac0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55670cab1d18 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55670cab1c50 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55670cab1ea8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55670cab1de0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55670cab1fa0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55670cab20c8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55670cab2248 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55670cab2180 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55670cab2398 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55670cab2308 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55670cab2440 <col:63> "" ""
|-CXXMethodDecl 0x55670cab2588 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55670cab24c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55670cab2798 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55670cab2648 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55670cab26c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55670cab29b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55670cab2860 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55670cab28e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55670cab2c98 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55670cab2a78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55670cab2af8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55670cabd010 <col:55> 'int' 10
| `-ParmVarDecl 0x55670cab2b70 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55670cabd030 <col:76> 'bool' true
|-CXXMethodDecl 0x55670cab2f78 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55670cab2d60 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55670cab2de0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55670cabd040 <col:56> 'int' 10
| `-ParmVarDecl 0x55670cab2e58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55670cabd060 <col:77> 'bool' true
|-CXXMethodDecl 0x55670cab3080 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55670cab3148 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55670cab3210 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55670cab32b0 <col:20>
| `-OptimizeNoneAttr 0x55670cab3308 <col:30>
|-CXXConversionDecl 0x55670cab33f8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55670cab34c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55670cab3588 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55670cab3678 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55670cab3738 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55670cab38b8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55670cab37f0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55670cab3a08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55670cab3978 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55670cab3af8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55670cab3bb8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55670cab3e08 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55670cab3c70 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55670cab3cf0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55670cab4068 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55670cab3ed0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55670cab3f50 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55670cab4138 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cab4348 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55670cab41f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55670cab4270 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55670cab4568 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55670cab4410 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55670cab4490 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55670cab4730 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55670cab4630 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55670cab4828 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55670cab4998 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55670cab48d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55670cab4ba8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55670cab4a58 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55670cab4ad8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55670cab4dc0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55670cab4c68 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55670cab4ce0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55670cab4f50 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55670cab4e80 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55670cab5170 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55670cab5010 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55670cab5090 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55670cab52c0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55670cab5230 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55670cab5498 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55670cab5380 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55670cab5400 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55670cab55e8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55670cab5558 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55670cab5800 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55670cab56a0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55670cab5720 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55670cabd070 <col:39> 'int' 0
|-CXXMethodDecl 0x55670cab5a20 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55670cab58c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55670cab5940 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55670cabd090 <col:48> 'int' 0
|-CXXMethodDecl 0x55670cab5c00 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55670cab5ae0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55670cab5b60 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55670cabd0b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55670cab5cd0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55670cab5d90 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55670cab5e50 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55670cab5f10 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55670cab5fd0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55670cab6178 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55670cab6080 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55670cab62f8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55670cab6230 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55670cab6478 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55670cab63b8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55670cab65f8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55670cab6530 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55670cab6740 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55670cab66b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55670cab6890 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55670cab6800 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55670cab6a68 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55670cab6950 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55670cab69d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55670cab6c48 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55670cab6b30 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55670cab6bb0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55670cab6d98 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55670cab6d08 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55670cab6fa8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55670cab6e58 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55670cab6ed8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55670cab7108 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55670cab7070 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55670cab7260 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55670cab71c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55670cab7308 <col:57> "" ""
|-CXXMethodDecl 0x55670cab7418 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55670cab7388 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55670cab7568 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55670cab74d8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55670cab76e8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55670cab7620 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55670cab77b0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55670cab7870 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55670cab7930 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55670cab79d0 <col:49> "" ""
|-CXXMethodDecl 0x55670cab7a60 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55670cab7b20 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55670cab7c10 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55670cab7cd8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55670cab7d98 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55670cab7e58 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55670cab7f50 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55670cab8018 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55670cab80e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55670cab82b8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55670cab8198 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55670cab8218 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55670cab84e0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55670cab8380 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55670cab8400 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55670cab85f0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55670cab8658 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55670cab8680 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55670caba7d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55670caba878 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55670caba8d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55670caba938 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55670caba9e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55670cabaa50 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55670cabac88 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55670cabacd8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cabac68 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55670cabab78 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55670cabab20 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55670cabab60 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55670cabab40 <col:32> 'int' 8
|-CXXRecordDecl 0x55670cabacf0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55670cabae08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55670cabaeb0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55670cabaf18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55670cabafa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55670cabd540 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55670cabd978 <col:12>
| |-CXXConstructorDecl 0x55670cabd648 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670cabd758 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55670cabaeb0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55670cac1c80 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55670cac1c50 <col:12> 'const char *const' lvalue .data 0x55670cabaeb0
| | |     `-DeclRefExpr 0x55670cac1c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55670cabaf18 'length' 'int'
| | | `-ImplicitCastExpr 0x55670cac1d10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55670cac1ce0 <col:12> 'const int' lvalue .length 0x55670cabaf18
| | |     `-DeclRefExpr 0x55670cac1cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55670cabafa8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55670cac1da0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55670cac1d70 <col:12> 'String::memo_t *const' lvalue .memo 0x55670cabafa8
| | |     `-DeclRefExpr 0x55670cac1d50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cabd758 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55670cac1df8 <col:12>
| |-CXXConstructorDecl 0x55670cabd7f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55670cabd7f8
| | `-ParmVarDecl 0x55670cabd908 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55670cac6b50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55670cad0548 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670cad0658 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55670cad0b98 <col:12>
| |   |-BinaryOperator 0x55670cad0988 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55670cad0940 <col:12> 'const char *' lvalue ->data 0x55670cabaeb0
| |   | | `-CXXThisExpr 0x55670cad0930 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55670cad0970 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55670cad0900 <col:12> 'const char *const' lvalue .data 0x55670cabaeb0
| |   |     `-DeclRefExpr 0x55670cad08e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55670cad0a78 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55670cad0a30 <col:12> 'int' lvalue ->length 0x55670cabaf18
| |   | | `-CXXThisExpr 0x55670cad09f8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55670cad0a60 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55670cad09c8 <col:12> 'const int' lvalue .length 0x55670cabaf18
| |   |     `-DeclRefExpr 0x55670cad09a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55670cad0b40 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55670cad0af8 <col:12> 'String::memo_t *' lvalue ->memo 0x55670cabafa8
| |   | | `-CXXThisExpr 0x55670cad0ae8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55670cad0b28 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55670cad0ab8 <col:12> 'String::memo_t *const' lvalue .memo 0x55670cabafa8
| |   |     `-DeclRefExpr 0x55670cad0a98 <col:12> 'const String::rep_t' lvalue ParmVar 0x55670cad0658 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55670cad0b88 <col:12>
| |     `-UnaryOperator 0x55670cad0b70 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55670cad0b60 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55670cad06c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55670cad06c8
|   `-ParmVarDecl 0x55670cad07d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55670cabb020 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55670cabb268 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55670cabb088 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55670cabb108 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55670cabb180 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55670cabd500 <col:79, line:261:5>
|   |-BinaryOperator 0x55670cabd178 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55670cabd110 <col:2, col:5> 'const char *' lvalue .data 0x55670cabaeb0
|   | | `-MemberExpr 0x55670cabd0e0 <col:2> 'String::rep_t' lvalue ->_r 0x55670cabb020
|   | |   `-CXXThisExpr 0x55670cabd0d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55670cabd160 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55670cabd140 <col:12> 'const char *' lvalue ParmVar 0x55670cabb088 'data' 'const char *'
|   |-BinaryOperator 0x55670cabd240 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55670cabd1d8 <col:2, col:5> 'int' lvalue .length 0x55670cabaf18
|   | | `-MemberExpr 0x55670cabd1a8 <col:2> 'String::rep_t' lvalue ->_r 0x55670cabb020
|   | |   `-CXXThisExpr 0x55670cabd198 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55670cabd228 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55670cabd208 <col:14> 'int' lvalue ParmVar 0x55670cabb108 'length' 'int'
|   `-IfStmt 0x55670cabd4e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55670cabd360 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55670cabd348 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55670cabd328 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55670cabd308 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55670cabd2a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|     |       | `-MemberExpr 0x55670cabd270 <col:7> 'String::rep_t' lvalue ->_r 0x55670cabb020
|     |       |   `-CXXThisExpr 0x55670cabd260 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55670cabd2f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55670cabd2d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55670cabb180 'memo' 'String::memo_t *'
|     `-CallExpr 0x55670cabd4c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55670cabd4a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55670cabd3b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55670caa9c98 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55670cabd418 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55670caba878
|         `-ImplicitCastExpr 0x55670cabd400 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55670cabd3e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55670cabb180 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55670cabb518 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55670cabb338 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55670cabb3b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55670cabb430 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55670cabb020 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55670cabd988 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55670cabdb18 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55670cabda80 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55670cabd9f0 <col:2> '<bound member function type>' ->assign_memo 0x55670cabb268
|     | `-ImplicitCastExpr 0x55670cabdab8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55670cabd9e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55670cabdad0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55670cabda20 <col:14> 'const char *' lvalue ParmVar 0x55670cabb338 'data' 'const char *'
|     |-ImplicitCastExpr 0x55670cabdae8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55670cabda40 <col:20> 'int' lvalue ParmVar 0x55670cabb3b8 'length' 'int'
|     `-ImplicitCastExpr 0x55670cabdb00 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55670cabda60 <col:28> 'String::memo_t *' lvalue ParmVar 0x55670cabb430 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55670cabb6a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55670cabb5e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55670cabdd70 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55670cabdcf0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55670cabdb40 <col:2> '<bound member function type>' ->assign_memo 0x55670cabb268
|     | `-CXXThisExpr 0x55670cabdb30 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55670cabdd28 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55670cabdbc0 <col:14, col:19> 'const char *' lvalue .data 0x55670cabaeb0
|     |   `-MemberExpr 0x55670cabdb90 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55670cabb020
|     |     `-DeclRefExpr 0x55670cabdb70 <col:14> 'const String' lvalue ParmVar 0x55670cabb5e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55670cabdd40 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55670cabdc40 <col:25, col:30> 'int' lvalue .length 0x55670cabaf18
|     |   `-MemberExpr 0x55670cabdc10 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55670cabb020
|     |     `-DeclRefExpr 0x55670cabdbf0 <col:25> 'const String' lvalue ParmVar 0x55670cabb5e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55670cabdd58 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55670cabdcc0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|         `-MemberExpr 0x55670cabdc90 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55670cabb020
|           `-DeclRefExpr 0x55670cabdc70 <col:38> 'const String' lvalue ParmVar 0x55670cabb5e8 'x' 'const String &'
|-CXXMethodDecl 0x55670cabb770 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55670cabe730 <col:31, line:278:5>
|   `-IfStmt 0x55670cabe718 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55670cabde10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55670cabddf8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55670cabddc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|     |     `-MemberExpr 0x55670cabdd98 <col:6> 'String::rep_t' lvalue ->_r 0x55670cabb020
|     |       `-CXXThisExpr 0x55670cabdd88 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55670cabe6f0 <col:15, line:277:2>
|       |-ParenExpr 0x55670cabe2c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55670cabe290 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55670cabdf20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55670cabdf08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55670cabdef0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55670cabdeb0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55670caba878
|       |   |       `-ImplicitCastExpr 0x55670cabde98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55670cabde68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|       |   |           `-MemberExpr 0x55670cabde38 <col:27> 'String::rep_t' lvalue ->_r 0x55670cabb020
|       |   |             `-CXXThisExpr 0x55670cabde28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55670cabdf80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55670cabdf60 <col:54> 'int' 0
|       |   `-CallExpr 0x55670cabe1f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55670cabe1d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55670cabe158 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55670cabe230 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55670cabe068 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55670cabe248 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55670cabe098 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55670cabe260 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55670cabe0d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55670cabe278 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55670cabe140 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55670cabe128 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55670cabe0f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55670cabe610 <line:274:6, line:275:22>
|       | |-CallExpr 0x55670cabe4d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55670cabe4b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55670cabe430 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55670caac900 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55670cabe400 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55670caba878
|       | |   `-ImplicitCastExpr 0x55670cabe3e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55670cabe3b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|       | |       `-MemberExpr 0x55670cabe388 <col:40> 'String::rep_t' lvalue ->_r 0x55670cabb020
|       | |         `-CXXThisExpr 0x55670cabe378 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55670cabe5d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55670cabe5b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55670cabe4f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55670cabc448 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55670cabe5f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55670cabe558 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|       |       `-MemberExpr 0x55670cabe528 <col:15> 'String::rep_t' lvalue ->_r 0x55670cabb020
|       |         `-CXXThisExpr 0x55670cabe518 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55670cabe6d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55670cabe668 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55670cabafa8
|         | `-MemberExpr 0x55670cabe638 <col:6> 'String::rep_t' lvalue ->_r 0x55670cabb020
|         |   `-CXXThisExpr 0x55670cabe628 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55670cabe6b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55670cabe698 <col:16> 'int' 0
|-CXXMethodDecl 0x55670cabba08 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55670cabb828 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55670cabb8a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55670cabb920 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55670cabbae0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55670cabbd30 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55670cabbb98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55670cabbc18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55670cabbc90 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55670cabbf18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55670cabbe00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55670cabbe80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55670cabc018 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55670cac0580 <col:41, line:286:5>
|   `-ReturnStmt 0x55670cac0570 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55670cac0540 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55670cac0508 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55670cac04f0 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55670cac04d0 <col:46> 'int' 1
|-CXXMethodDecl 0x55670cabc2b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55670cabc0d0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55670cabc150 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55670cabc1d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55670cabc448 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55670cabc380 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55670cabc518 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55670cabc6e8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55670cabc5d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55670cabc650 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55670cabc7a8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55670cabc870 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55670cabc978 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55670cabc9f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55670cabca68 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55670cabcad0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55670cabcbd0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55670cabcc20 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cabcbb0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55670cabcb90 <col:22> 'int' 14
|-CXXMethodDecl 0x55670cabce38 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55670cabcc50 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55670cabccd0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55670cabcd50 <col:43> col:46 'int'
|-FriendDecl 0x55670cabcf40 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55670cabcfd0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cb7c680 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55670cb7c858 prev 0x55670cb7c680 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55670cb7c8e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55670cb7c910 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cd55f90 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55670cd55f40 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55670cd55f20 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55670cb7cb28 'type'
|     `-SubstTemplateTypeParmType 0x55670cb7caf0 'String' sugar
|       |-TemplateTypeParmType 0x55670ca73c80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca73c30 'T'
|       `-RecordType 0x55670caafc70 'String'
|         `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd56048 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55670cd56010 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55670cd55ff0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55670cd55f90 'type'
|     `-ElaboratedType 0x55670cd55f40 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55670cd55f20 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55670cb7cb28 'type'
|         `-SubstTemplateTypeParmType 0x55670cb7caf0 'String' sugar
|           |-TemplateTypeParmType 0x55670ca73c80 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55670ca73c30 'T'
|           `-RecordType 0x55670caafc70 'String'
|             `-CXXRecord 0x55670caafbe0 'String'
|-CXXMethodDecl 0x55670cd561c8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55670cd560d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55670cd562b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55670cd56398 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55670cd56398
|-CXXMethodDecl 0x55670cd56668 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55670cd56570 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55670cd568a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55670cd56720 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cd56798 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd56a78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55670cd56968 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cd569e0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd56bd8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55670cd56ca8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55670cd56ef8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55670cd56d68 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55670cd56de0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd57158 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55670cd56fc8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55670cd57040 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd57318 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55670cd57228 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd574d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55670cd573e0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd57590 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55670cd57640 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55670cd57878 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55670cd576f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cd57768 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55670cd57b18 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55670cd57a20 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55670cd57be0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55670cd57c30 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55670cd57c80 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cce4840 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55670cb7b0e8 prev 0x55670cce4840 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55670cb7c5f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55670cb7c5a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55670cb7c580 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55670cb7c430 'type'
|     `-SubstTemplateTypeParmType 0x55670cb7c2c0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55670ca4aed0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55670ca4ae78 'F'
|       `-RecordType 0x55670cb7bf20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55670cb7be40 'typed_array_memory'
|-FieldDecl 0x55670cd57cd0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55670cd57d20 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55670cd57d58 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|   |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55670ca82028 'T'
|   `-RecordType 0x55670caafc70 'String'
|     `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd57de8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55670cd57db0 'String &'
|   `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-RecordType 0x55670caafc70 'String'
|       `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd57e78 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55670cd57e40 'const String &'
|   `-QualType 0x55670cb7b181 'const String' const
|     `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-RecordType 0x55670caafc70 'String'
|         `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd57f08 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55670cd57ed0 'String *'
|   `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-RecordType 0x55670caafc70 'String'
|       `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd57f98 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55670cd57f60 'const String *'
|   `-QualType 0x55670cb7b181 'const String' const
|     `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-RecordType 0x55670caafc70 'String'
|         `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd58bf0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55670cd58ba0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55670cd58b80 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55670cd58ab8 'type'
|     `-LValueReferenceType 0x55670cd58a80 'const String &'
|       `-QualType 0x55670cd58821 'const String' const
|         `-SubstTemplateTypeParmType 0x55670cd58820 'String' sugar
|           |-TemplateTypeParmType 0x55670ca53330 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55670ca532d8 'T'
|           `-RecordType 0x55670caafc70 'String'
|             `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd58c58 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55670cd57e40 'const String &'
|   `-QualType 0x55670cb7b181 'const String' const
|     `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-RecordType 0x55670caafc70 'String'
|         `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd58cb0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cd58d18 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55670cd57ed0 'String *'
|   `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-RecordType 0x55670caafc70 'String'
|       `-CXXRecord 0x55670caafbe0 'String'
|-TypedefDecl 0x55670cd58d80 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55670cd57f60 'const String *'
|   `-QualType 0x55670cb7b181 'const String' const
|     `-SubstTemplateTypeParmType 0x55670cb7b180 'String' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-RecordType 0x55670caafc70 'String'
|         `-CXXRecord 0x55670caafbe0 'String'
|-EnumDecl 0x55670cd58dd8 <line:134:5> col:5
| `-EnumConstantDecl 0x55670cd58ed0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55670cd58eb0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55670ca83248 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55670ca83220 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55670ca83200 <col:40> 'int' 1
|-CXXConstructorDecl 0x55670cd58f58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55670cd591e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cd59010 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cd590b0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55670cd59478 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55670cd59360 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55670cd59738 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55670cd59620 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55670cd59a50 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55670cd59930 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55670cd59d60 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55670cd59c40 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55670cd5a050 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cd59e98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cd59f10 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55670cd5a178 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55670cd5a228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a280 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a2c8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55670cd5a378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a3d0 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a498 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55670cd5a548 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a5a0 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a5e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55670cd5a698 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a6f0 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a738 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55670cd5a7e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a840 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a888 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55670cd5a938 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cd5a990 <col:30> Inherited
|-CXXMethodDecl 0x55670cd5a9b8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55670cd5aa68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55670cd5ab18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55670cd5acd8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cd5abc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cd5ac40 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55670cd5ae28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55670cd5ad98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cd5afd8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55670cd5aee0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55670cd5b090 <col:20>
| `-OptimizeNoneAttr 0x55670cd5b0e8 <col:30>
|-CXXMethodDecl 0x55670cd5b208 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55670cd5b110 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55670cd5b2c0 <col:20>
| `-OptimizeNoneAttr 0x55670cd5b318 <col:30>
|-CXXMethodDecl 0x55670cd5b3d0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55670cd5b340 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cd5b518 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55670cd5b488 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cd5b648 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55670cd5b748 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55670cd5b818 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55670cd5b8e8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55670cd5ba28 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55670cd5b998 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cd5bb70 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55670cd5bae0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cd5bcb8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55670cd5bc28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55670cd5bd70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55670cd5be70 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55670cd5bde0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55670cd5bf28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55670cd5bfe8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55670cd5c0e8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55670cd5c268 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55670cd5c1a8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55670cd5ca28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55670cd5c320 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55670cd5c988 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55670cd5c888 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55670cd5cb08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55670cd5cc58 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55670cd5cbc8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55670cd5cd10 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55670cd5d7b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cd5cdd0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55670cd5d6a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55670cd5d948 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55670cd5d888 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55670cd5db58 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55670cd5da10 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55670cd5da88 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55670cd5dc18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55670cd5de78 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55670cd5dd80 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55670cd5df48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55670cd5df48

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cdd8398 prev 0x55670cd691a8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55670cdd8490 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55670cdd8520 <col:22, col:28> col:22 public
|-EnumDecl 0x55670cdd8548 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55670cdd8668 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8648 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55670cdd8630 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55670cdd8610 <col:14> 'int' 999
| |-EnumConstantDecl 0x55670cdd8710 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd86f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55670cdd86d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55670cdd86b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55670cdd87a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8780 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55670cdd8760 <col:17> 'int' 0
| |-EnumConstantDecl 0x55670cdd8830 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8810 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55670cdd87f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55670cdd88c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd88a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55670cdd8880 <col:16> 'int' 2
| |-EnumConstantDecl 0x55670cdd8950 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8930 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55670cdd8910 <col:13> 'int' 3
| |-EnumConstantDecl 0x55670cdd89e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd89c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55670cdd89a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55670cdd8a70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8a50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55670cdd8a30 <col:14> 'int' 5
| |-EnumConstantDecl 0x55670cdd8b00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55670cdd8ae0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55670cdd8ac0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55670cdd8b90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55670cdd8b70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55670cdd8b50 <col:13> 'int' 7
|-VarDecl 0x55670cdd8c00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55670cdd8c88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55670cdd8d10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55670cdd8d98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55670cdd8e20 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55670cdd8ea8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55670cdd8f30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55670cdd8fb8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55670cdd9040 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55670cdd90c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55670cdd9150 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55670cdd9250 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55670cdde558 '_nerrors' 'int'
| | `-IntegerLiteral 0x55670cddece8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55670cdded58 <col:16, line:129:5>
|-CXXDestructorDecl 0x55670cdd9340 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55670cdded68 <col:29, line:132:5>
|-CXXMethodDecl 0x55670cdd94f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55670cdd9430 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cdd95c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55670cdd96a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55670cddedc0 <col:44, line:161:5>
|   `-ReturnStmt 0x55670cddedb0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55670cdded98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55670cdded78 <col:9> 'ErrorHandler *' lvalue Var 0x55670cdde5b8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55670cdd97e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55670cdd9758 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55670cdd98b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55670cddee20 <col:43, line:173:5>
|   `-ReturnStmt 0x55670cddee10 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55670cddedf8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55670cddedd8 <col:9> 'ErrorHandler *' lvalue Var 0x55670cdde630 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55670cdd9968 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55670cdd99e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55670cdd9af8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55670cdd9a68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55670cdd9c48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55670cdd9bb8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55670cdd9da0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55670cdd9d08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55670cdd9ef8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55670cdd9e60 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55670cdda050 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55670cdd9fb8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55670cdda260 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55670cdda108 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55670cdda188 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55670cdda438 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55670cdda320 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55670cdda3a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55670cdda658 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55670cdda4f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55670cdda578 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55670cdda838 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55670cdda718 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55670cdda798 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55670cddaa18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55670cdda8f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55670cdda978 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55670cddaba0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55670cddaad8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55670cddad70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55670cddac58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55670cddacd0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55670cddf078 <col:57, line:234:5>
|   `-ReturnStmt 0x55670cddf068 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55670cddf050 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55670cddeff8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55670cddefc8 <col:9> '<bound member function type>' ->xmessage 0x55670cddaba0
|         | `-CXXThisExpr 0x55670cddefb8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55670cddf038 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55670cddf020 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55670cddef98 <col:18, col:40> 'String' (CXXTemporary 0x55670cddef98)
|               `-CallExpr 0x55670cddef60 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55670cddef48 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55670cddeec0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55670cddcd88 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55670cddeee0 <col:31> 'const String' lvalue ParmVar 0x55670cddacd0 'str' 'const String &'
|                 `-DeclRefExpr 0x55670cddef00 <col:36> 'const String' lvalue ParmVar 0x55670cddac58 'anno' 'const String &'
|-CXXMethodDecl 0x55670cddb050 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55670cddae30 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55670cddaeb0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55670cddaf28 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55670cddf308 <col:68, line:243:5>
|   `-ReturnStmt 0x55670cddf2f8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55670cddf2e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55670cddf280 <col:9, col:41> 'int'
|         |-MemberExpr 0x55670cddf250 <col:9> '<bound member function type>' ->xmessage 0x55670cddad70
|         | `-CXXThisExpr 0x55670cddf240 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55670cddf118 <col:18> 'const String' lvalue ParmVar 0x55670cddae30 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55670cddf2c8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55670cddf2b0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55670cddf220 <col:24, col:40> 'String' (CXXTemporary 0x55670cddf220)
|               `-CXXMemberCallExpr 0x55670cddf1b8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55670cddf148 <col:24> '<bound member function type>' ->vformat 0x55670cddc250
|                 | `-CXXThisExpr 0x55670cddf138 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55670cddf1e8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55670cddf178 <col:32> 'const char *' lvalue ParmVar 0x55670cddaeb0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55670cddf200 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55670cddf198 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55670cddaf28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55670cddb2f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55670cddb118 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55670cddb190 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55670cddb208 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55670cddf648 <col:23, line:254:5>
|   `-ReturnStmt 0x55670cddf638 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55670cddf620 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55670cddf5c0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55670cddf590 <col:9> '<bound member function type>' ->xmessage 0x55670cddad70
|         | `-CXXThisExpr 0x55670cddf580 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55670cddf608 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55670cddf5f0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55670cddf540 <col:18, col:65> 'String' (CXXTemporary 0x55670cddf540)
|         |     `-CallExpr 0x55670cddf4d8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55670cddf4c0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55670cddf3a8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55670cddcd88 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55670cddf3c8 <col:31> 'const String' lvalue ParmVar 0x55670cddb190 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55670cddf520 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55670cddf508 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55670cddf4a0 <col:37, col:64> 'String' (CXXTemporary 0x55670cddf4a0)
|         |             `-CallExpr 0x55670cddf470 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55670cddf458 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55670cddf3e8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55670cddd3d8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55670cddf408 <col:56> 'const String' lvalue ParmVar 0x55670cddb118 'landmark' 'const String &'
|         `-DeclRefExpr 0x55670cddf560 <col:68> 'const String' lvalue ParmVar 0x55670cddb208 'str' 'const String &'
|-CXXMethodDecl 0x55670cddb670 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55670cddb3b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55670cddb430 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55670cddb4b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55670cddb528 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55670cddf900 <col:34, line:267:5>
|   `-ReturnStmt 0x55670cddf8f0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55670cddf8d8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55670cddf870 <col:9, col:51> 'int'
|         |-MemberExpr 0x55670cddf840 <col:9> '<bound member function type>' ->xmessage 0x55670cddb2f0
|         | `-CXXThisExpr 0x55670cddf830 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55670cddf6e8 <col:18> 'const String' lvalue ParmVar 0x55670cddb3b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55670cddf708 <col:28> 'const String' lvalue ParmVar 0x55670cddb430 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55670cddf8c0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55670cddf8a8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55670cddf810 <col:34, col:50> 'String' (CXXTemporary 0x55670cddf810)
|               `-CXXMemberCallExpr 0x55670cddf7a8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55670cddf738 <col:34> '<bound member function type>' ->vformat 0x55670cddc250
|                 | `-CXXThisExpr 0x55670cddf728 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55670cddf7d8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55670cddf768 <col:42> 'const char *' lvalue ParmVar 0x55670cddb4b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55670cddf7f0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55670cddf788 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55670cddb528 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55670cddb780 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55670cddf980 <col:25, line:288:5>
|   `-ReturnStmt 0x55670cddf970 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55670cddf958 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55670cddf928 <col:9> 'const int' lvalue ->_nerrors 0x55670cdde558
|         `-CXXThisExpr 0x55670cddf918 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55670cddb990 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55670cddb838 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55670cddb8b8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55670cddbc78 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55670cddba58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55670cddbad8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55670cddbb50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55670cddbe10 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55670cddbd48 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55670cddc078 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55670cddbed0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55670cddbf60 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55670cddfbe0 <col:58, line:357:5>
|   `-ReturnStmt 0x55670cddfbd0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55670cddfbb8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55670cddfb88 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55670cddfb70 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55670cddfb50 <col:9, col:29> 'String' (CXXTemporary 0x55670cddfb50)
|             `-CallExpr 0x55670cddfae0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55670cddfac8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55670cddfa48 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55670cddbc78 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55670cddf9e8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55670cddfb18 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55670cddfa08 <col:21> 'const char *' lvalue ParmVar 0x55670cddbed0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55670cddfb30 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55670cddfa28 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55670cddbf60 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55670cddc250 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55670cddc140 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55670cddc1b8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55670cddc3a8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55670cddc318 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55670cddc4f0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55670cddc460 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55670cddc790 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55670cddc5a8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55670cddc628 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55670cddc6a0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55670cddc8f0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55670cddc860 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55670cddfcf8 <col:37, line:441:5>
|   `-IfStmt 0x55670cddfce0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55670cddfc68 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55670cddfc38 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55670cddfbf8 <col:6> 'int' lvalue ParmVar 0x55670cddc860 'level' 'int'
|     | `-ImplicitCastExpr 0x55670cddfc50 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55670cddfc18 <col:15> 'ErrorHandler::Level' EnumConstant 0x55670cdd8950 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55670cddfcc8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55670cddfc98 <col:8> 'int' lvalue ->_nerrors 0x55670cdde558
|         `-CXXThisExpr 0x55670cddfc88 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55670cddc9b8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55670cddfd90 <col:26, line:448:5>
|   `-BinaryOperator 0x55670cddfd70 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55670cddfd20 <col:2> 'int' lvalue ->_nerrors 0x55670cdde558
|     | `-CXXThisExpr 0x55670cddfd10 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55670cddfd50 <col:13> 'int' 0
|-CXXMethodDecl 0x55670cddcb80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55670cddca70 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55670cddcae8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55670cddcd88 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55670cddcc40 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55670cddccb8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55670cddd038 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55670cddce48 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55670cddcec8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55670cddcf48 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55670cddd0f0 <col:59> 0 0
|-CXXMethodDecl 0x55670cddd288 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55670cddd168 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55670cddd1e8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55670cde0400 <col:70, line:534:5>
|   |-DeclStmt 0x55670cddff00 <line:528:2, col:20>
|   | |-VarDecl 0x55670cddfdb8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55670cddfe20 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55670cddfe58 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55670cddfec0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55670cddffd0 <line:529:2, col:23>
|   | `-VarDecl 0x55670cddff30 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55670cddffb8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55670cddff98 <col:18> 'const char *' lvalue ParmVar 0x55670cddd168 'begin' 'const char *'
|   |-DoStmt 0x55670cde0398 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55670cde02c8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55670cde02b0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55670cde0290 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55670cddffe8 <col:6> 'const char *' lvalue Var 0x55670cddff30 'x' 'const char *'
|   | |     `-CallExpr 0x55670cde01e0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55670cde01c8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55670cde0180 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55670cddea30 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55670cde0248 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55670cde0230 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55670cde00a0 <col:20, col:27> 'String' (CXXTemporary 0x55670cde00a0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55670cde0068 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55670cde0260 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55670cde00c0 <col:30> 'const char *' lvalue Var 0x55670cddff30 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55670cde0278 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55670cde00e0 <col:33> 'const char *' lvalue ParmVar 0x55670cddd1e8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55670cde0120 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55670cde0100 <col:39> 'String' lvalue Var 0x55670cddfdb8 'name' 'String'
|   | |       |-UnaryOperator 0x55670cde0158 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55670cde0138 <col:46> 'String' lvalue Var 0x55670cddfe58 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55670cde0170 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55670cde0380 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55670cde0368 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55670cde0348 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55670cde0318 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|   |         `-ImplicitCastExpr 0x55670cde0300 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55670cde02e0 <col:11> 'String' lvalue Var 0x55670cddfdb8 'name' 'String'
|   `-ReturnStmt 0x55670cde03f0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55670cde03d8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55670cde03b8 <col:9> 'const char *' lvalue Var 0x55670cddff30 'x' 'const char *'
|-CXXMethodDecl 0x55670cddd3d8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55670cddd348 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55670cde0a08 <col:55, line:550:5>
|   `-IfStmt 0x55670cde09e0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55670cde0640 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55670cde0628 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55670cde0610 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55670cde05f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55670cde05c0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|     | |       `-DeclRefExpr 0x55670cde0460 <col:6> 'const String' lvalue ParmVar 0x55670cddd348 'x' 'const String &'
|     | `-BinaryOperator 0x55670cde05a0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55670cde0570 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55670cde0520 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55670cde0508 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55670cde04c0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55670cacce50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55670cde0480 <col:11> 'const String' lvalue ParmVar 0x55670cddd348 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55670cde04a0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55670cde0588 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55670cde0558 <col:19> 'char' 123
|     |-ReturnStmt 0x55670cde06b0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55670cde0680 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55670cde0660 <col:13> 'const String' lvalue ParmVar 0x55670cddd348 'x' 'const String &'
|     `-IfStmt 0x55670cde09b8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55670cde0748 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55670cde0730 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55670cde0710 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55670cde06e0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |       `-DeclRefExpr 0x55670cde06c0 <col:11> 'const String' lvalue ParmVar 0x55670cddd348 'x' 'const String &'
|       |-ReturnStmt 0x55670cde08d0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55670cde08b8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55670cde0888 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55670cde0870 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55670cde0850 <col:13, col:29> 'String' (CXXTemporary 0x55670cde0850)
|       |         `-CallExpr 0x55670cde0800 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55670cde07e8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55670cde0760 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55670cddcb80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55670cde0830 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55670cde0780 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55670cde07a0 <col:28> 'const String' lvalue ParmVar 0x55670cddd348 'x' 'const String &'
|       `-ReturnStmt 0x55670cde09a8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55670cde0990 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55670cde0960 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55670cde0948 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55670cde0928 <col:13, col:20> 'String' (CXXTemporary 0x55670cde0928)
|                 `-CXXTemporaryObjectExpr 0x55670cde08f0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55670cddd5a0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55670cddd490 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55670cddd508 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55670cddecd8 <col:71> 'bool' false
|-CXXRecordDecl 0x55670cddd650 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55670cddd948 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55670cddd8e0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55670cddd880 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55670cddd840 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55670caafc70 'String'
|       | `-CXXRecord 0x55670caafbe0 'String'
|       |-BuiltinType 0x55670c777580 'int'
|       `-DecayedType 0x55670cd6a1f0 '__va_list_tag *' sugar
|         |-TypedefType 0x55670cd6a1c0 'va_list' sugar
|         | |-Typedef 0x55670c9c6350 'va_list'
|         | `-TypedefType 0x55670c9c6300 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55670c9c0ab8 '__gnuc_va_list'
|         |   `-TypedefType 0x55670c9c0a20 '__builtin_va_list' sugar
|         |     |-Typedef 0x55670c7b8d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55670c7b8ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55670c7782d0 '__va_list_tag'
|         |         `-CXXRecord 0x55670c778238 '__va_list_tag'
|         `-PointerType 0x55670c9cc010 '__va_list_tag *'
|           `-RecordType 0x55670c7782d0 '__va_list_tag'
|             `-CXXRecord 0x55670c778238 '__va_list_tag'
|-EnumDecl 0x55670cddd9a0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55670cdddaa0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde000 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cddda80 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55670cddda60 <col:16> 'int' 1
| |-EnumConstantDecl 0x55670cdddb30 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde018 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddb10 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55670cdddaf0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55670cdddbc0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde030 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddba0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55670cdddb80 <col:22> 'int' 4
| |-EnumConstantDecl 0x55670cdddc50 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde048 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddc30 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55670cdddc10 <col:17> 'int' 8
| |-EnumConstantDecl 0x55670cdddce0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde060 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddcc0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55670cdddca0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55670cdddd70 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde078 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddd50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55670cdddd30 <col:19> 'int' 32
| |-EnumConstantDecl 0x55670cddde00 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde090 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddde0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55670cddddc0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55670cddde90 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde0a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cddde70 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55670cddde50 <col:14> 'int' 128
| |-EnumConstantDecl 0x55670cdddf20 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55670cdde0c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdddf00 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55670cdddee0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55670cdddfb0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55670cdde0d8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cdddf90 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55670cdddf70 <col:12> 'int' 1024
|-CXXMethodDecl 0x55670cdde2e8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55670cdde100 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55670cdde1a0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55670cdde470 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55670cdde3a8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55670cdde518 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55670cdde558 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55670cdde5b8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55670cdde630 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55670cddea30 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55670cdde6a8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55670cdde728 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55670cdde7a8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55670cdde820 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55670cdde898 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55670cdde910 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55670cddeb58 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55670cddeb58
| `-ParmVarDecl 0x55670cddec68 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55670cde0d68 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55670cde0d68
  `-ParmVarDecl 0x55670cde0e78 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd69238 prev 0x55670cd005e8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cd69330 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55670cd693c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55670cd694f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55670cd693f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55670cd6a920 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55670cd6a900 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55670cd6a498 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55670cd6a9b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55670cd6a970 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55670cd693f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55670cd6a500 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55670cd6aa30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55670cd6a9f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55670cd6a560 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55670cd6aa70 <col:54> 'bool' false
| `-CompoundStmt 0x55670cd6ab78 <col:61, line:38:5>
|   `-BinaryOperator 0x55670cd6ab58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55670cd6aaf0 <col:9> 'const Element *' lvalue ->_context 0x55670cd6a438
|     | `-CXXThisExpr 0x55670cd6aae0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55670cd6ab40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55670cd6ab20 <col:20> 'int' 0
|-CXXConstructorDecl 0x55670cd69708 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cd695b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55670cd69630 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55670cd6a958 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55670cd6a938 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55670cd6a438 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55670cd6abd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55670cd6ab90 <col:20> 'const Element *' lvalue ParmVar 0x55670cd695b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55670cd6a498 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55670cd6ac50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55670cd6ac10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55670cd69630 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55670cd6a500 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55670cd6acd0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55670cd6ac90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55670cd6a560 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55670cd6ad10 <col:73> 'bool' false
| `-CompoundStmt 0x55670cd6ad88 <col:80, line:46:5>
|-CXXMethodDecl 0x55670cd69838 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55670cd6ae00 <col:36, line:51:5>
|   `-ReturnStmt 0x55670cd6adf0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55670cd6add8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55670cd6ada8 <col:16> 'const Element *const' lvalue ->_context 0x55670cd6a438
|         `-CXXThisExpr 0x55670cd6ad98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55670cd69928 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55670cd6ae80 <col:32, line:57:5>
|   `-ReturnStmt 0x55670cd6ae70 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55670cd6ae58 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55670cd6ae28 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55670cd6a498
|         `-CXXThisExpr 0x55670cd6ae18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55670cd699e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55670cd69b70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55670cd69aa0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55670cd69cc0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55670cd69c30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55670cd69e10 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55670cd69d80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55670cd6a018 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55670cd69ec8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55670cd69f40 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55670cd6a348 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55670cd6a0d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55670cd6a158 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55670cd6a220 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55670cd6a400 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55670cd6a438 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55670cd6a498 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55670cd6a500 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55670cd6a560 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55670cd6a5b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55670cd6a5b0
| `-ParmVarDecl 0x55670cd6a6c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55670cd6a768 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55670cd6a768
| `-ParmVarDecl 0x55670cd6a878 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55670cde9a68 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cd92b20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55670cd92cf8 prev 0x55670cd92b20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55670cd92d88 <col:46, col:52> col:46 public
|-TypedefDecl 0x55670cd92db0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cd9ed70 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55670cd9ed20 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55670cd93260 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55670cd93160 'type'
|     `-TemplateSpecializationType 0x55670cd930f0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55670cd92fd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55670cd92fb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55670cd92f90 <col:24> 'unsigned long' 4
|       `-RecordType 0x55670cd930d0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55670cd92ff0 'char_array'
|-TypedefDecl 0x55670cd9ee28 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55670cd9edf0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55670cd9edd0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55670cd9ed70 'type'
|     `-ElaboratedType 0x55670cd9ed20 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55670cd93260 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55670cd93160 'type'
|         `-TemplateSpecializationType 0x55670cd930f0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55670cd92fd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55670cd92fb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55670cd92f90 <col:24> 'unsigned long' 4
|           `-RecordType 0x55670cd930d0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55670cd92ff0 'char_array'
|-CXXMethodDecl 0x55670cd9efa8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55670cd9eeb8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55670cd9f098 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55670cd9f178 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55670cd9f448 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55670cd9f350 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55670cd9f688 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55670cd9f500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cd9f578 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cd9f858 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55670cd9f748 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cd9f7c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cd9f9b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55670cd9fa88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55670cd9fcd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55670cd9fb48 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55670cd9fbc0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cd9ff38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55670cd9fda8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55670cd9fe20 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cda00f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55670cda0008 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cda02b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55670cda01c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cda0370 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55670cda0420 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55670cda0658 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55670cda04d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55670cda0548 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55670cda08f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55670cda0800 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55670cda09c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55670cda0a10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55670cda0a60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cd91528 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55670cd91738 prev 0x55670cd91528 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55670cd92a90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55670cd92a40 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55670cd92a20 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55670cd928d0 'type'
|     `-SubstTemplateTypeParmType 0x55670cd926f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55670ca4a750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca4a6f8 'T'
|       `-RecordType 0x55670cd92240 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55670cd92158 'sized_array_memory'
|-FieldDecl 0x55670cda0ab0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55670cda0b00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55670cda0b38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|   |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55670ca82028 'T'
|   `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda0bc8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55670cda0b90 'int &'
|   `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda0c88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55670cda0c50 'const int &'
|   `-QualType 0x55670cd917d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda0d18 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55670cda0ce0 'int *'
|   `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda0da8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55670cda0d70 'const int *'
|   `-QualType 0x55670cd917d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda1990 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55670cda1940 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55670cda1920 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55670cda18b0 'type'
|     `-SubstTemplateTypeParmType 0x55670cda1670 'int' sugar
|       |-TemplateTypeParmType 0x55670ca56bc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca56b70 'T'
|       `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda19f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55670cda0c50 'const int &'
|   `-QualType 0x55670cd917d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda1a50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda1ab8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55670cda0ce0 'int *'
|   `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|     |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55670ca82028 'T'
|     `-BuiltinType 0x55670c777580 'int'
|-TypedefDecl 0x55670cda1b20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55670cda0d70 'const int *'
|   `-QualType 0x55670cd917d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55670cd917d0 'int' sugar
|       |-TemplateTypeParmType 0x55670ca82080 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55670ca82028 'T'
|       `-BuiltinType 0x55670c777580 'int'
|-EnumDecl 0x55670cda1b78 <line:134:5> col:5
| `-EnumConstantDecl 0x55670cda1c70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55670cda1c50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55670ca83248 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55670ca83220 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55670ca83200 <col:40> 'int' 1
|-CXXConstructorDecl 0x55670cda1cf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55670cda1f48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cda1db0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cda1e50 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55670cda2208 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55670cda20f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55670cda24c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55670cda23b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55670cda2810 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55670cda26f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55670cda2b20 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55670cda2a00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55670cda2e10 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cda2c58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cda2cd0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55670cda2f38 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55670cda3018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda3070 <col:30> Inherited
|-CXXMethodDecl 0x55670cda30b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55670cda3168 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda31c0 <col:30> Inherited
|-CXXMethodDecl 0x55670cda3288 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55670cda3338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda3390 <col:30> Inherited
|-CXXMethodDecl 0x55670cda33d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55670cda3488 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda34e0 <col:30> Inherited
|-CXXMethodDecl 0x55670cda3528 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55670cda35d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda3630 <col:30> Inherited
|-CXXMethodDecl 0x55670cda3678 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55670cda3728 <col:20> Inherited
| `-OptimizeNoneAttr 0x55670cda3780 <col:30> Inherited
|-CXXMethodDecl 0x55670cda37a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55670cda3858 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55670cda3908 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55670cda3ac8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cda39b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55670cda3a30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55670cda3c18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55670cda3b88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cda3dc8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55670cda3cd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55670cda3e80 <col:20>
| `-OptimizeNoneAttr 0x55670cda3ed8 <col:30>
|-CXXMethodDecl 0x55670cda3ff8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55670cda3f00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55670cda40b0 <col:20>
| `-OptimizeNoneAttr 0x55670cda4108 <col:30>
|-CXXMethodDecl 0x55670cda41c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55670cda4130 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cda4308 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55670cda4278 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cda4438 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55670cda4568 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55670cda4638 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55670cda4708 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55670cda4848 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55670cda47b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cda4990 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55670cda4900 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55670cda4ad8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55670cda4a48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55670cda4b90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55670cda4c90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55670cda4c00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55670cda4d48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55670cda4e08 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55670cda4f08 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55670cda5088 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55670cda4fc8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55670cda5848 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55670cda5140 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55670cda57a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55670cda56a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55670cda5928 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55670cda5a78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55670cda59e8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55670cda5b30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55670cda5d78 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55670cda5bf0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55670cda5c68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55670cda5f38 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55670cda5e48 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55670cda6188 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55670cda6000 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55670cda6078 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55670cda6248 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55670cda64a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55670cda63b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55670cda6578 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd8f698 prev 0x55670cd742b0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55670cd8f790 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55670cd8f880 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55670cdb7fe0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55670cd8f970 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55670cdb7ff0 <col:25, line:830:9>
|-CXXMethodDecl 0x55670cd8fa70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55670cd8fb20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55670cd8fbc8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55670cd8fbc8
| `-ParmVarDecl 0x55670cd8fcd8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55670cd90498 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55670cd90498
  `-ParmVarDecl 0x55670cd905a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd740e8 prev 0x55670cd00678 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55670cd74220 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55670cd742b0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55670cd74360 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55670cd74468 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55670cd74398 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55670cda8ba8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55670cda8b88 <col:31> 'int' 0
|-CXXConstructorDecl 0x55670cd74788 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55670cd74600 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55670cd74678 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55670cda8be0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55670cda8bc0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55670cd74960 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cd74850 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55670cd748c8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55670cda8c18 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55670cda8bf8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55670cd74d18 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55670cd74b00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55670cd74b78 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55670cd74bf0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55670cda8c50 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55670cda8c30 <col:31> 'int' 0
|-CXXConstructorDecl 0x55670cd74ed8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55670cd74e18 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55670cd74fd0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55670cd75188 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55670cd750c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55670cd75278 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55670cda9000 <col:24, line:291:5>
|   `-ReturnStmt 0x55670cda8ff0 <line:290:9, col:79>
|     `-BinaryOperator 0x55670cda8fd0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55670cda8ea8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55670cda8e00 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55670cda8de0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55670cda8cd8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55670cda8cc0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55670cda8ca8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55670cda8c78 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55670cd914c0
|       | |   |       `-CXXThisExpr 0x55670cda8c68 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55670cda8dc8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55670cda8db0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55670cda8d78 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55670cda8d48 <col:28, col:35> '<bound member function type>' ->size 0x55670cd5a9b8
|       | |           `-ImplicitCastExpr 0x55670cda8d98 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55670cda8d30 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55670cda8d00 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55670cd914c0
|       | |                 `-CXXThisExpr 0x55670cda8cf0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55670cda8e90 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55670cda8e78 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55670cda8e60 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55670cda8e30 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55670cda66c0
|       |         `-CXXThisExpr 0x55670cda8e20 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55670cda8fb0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cda8f98 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55670cda8f80 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55670cda8f40 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55670cda8f28 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55670cda8ed8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55670cda6770
|         |     |   `-CXXThisExpr 0x55670cda8ec8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55670cda8f08 <col:73> 'int' 0
|         `-IntegerLiteral 0x55670cda8f60 <col:79> 'int' 0
|-CXXMethodDecl 0x55670cd75338 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55670cda91d8 <col:32, line:296:5>
|   `-ReturnStmt 0x55670cda91c8 <line:295:9, col:49>
|     `-BinaryOperator 0x55670cda91a8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55670cda9088 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55670cda9070 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55670cda9058 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55670cda9028 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55670cda66c0
|       |       `-CXXThisExpr 0x55670cda9018 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55670cda9188 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55670cda9170 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55670cda9158 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55670cda9118 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55670cda9100 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55670cda90b0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55670cda6770
|         |     |   `-CXXThisExpr 0x55670cda90a0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55670cda90e0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55670cda9138 <col:49> 'int' 0
|-CXXMethodDecl 0x55670cd75428 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55670cda93e8 <col:19, line:306:5>
|   |-IfStmt 0x55670cda9308 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55670cda9248 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55670cda9230 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55670cda9200 <col:13> 'Vector<String> *' lvalue ->_conf 0x55670cd914c0
|   | |     `-CXXThisExpr 0x55670cda91f0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55670cda92e8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55670cda92b8 <col:13, col:20> '<bound member function type>' ->clear 0x55670cd5dc18
|   |     `-ImplicitCastExpr 0x55670cda92a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55670cda9270 <col:13> 'Vector<String> *' lvalue ->_conf 0x55670cd914c0
|   |         `-CXXThisExpr 0x55670cda9260 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55670cda9390 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55670cda9360 <col:9, col:16> '<bound member function type>' .clear 0x55670cda6248
|   |   `-MemberExpr 0x55670cda9330 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55670cda6660
|   |     `-CXXThisExpr 0x55670cda9320 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55670cda93d8 <line:305:9, col:17>
|     `-UnaryOperator 0x55670cda93c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cda93b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55670cd756a8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55670cd755b0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55670cd75828 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55670cd75760 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55670cd75ba8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55670cd758d0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55670cd75b08 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55670cd75978 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55670cd759f0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55670cda9718 <col:67, line:327:5>
|     |-WhileStmt 0x55670cda96c8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55670cda94e0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55670cda9450 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55670cd1dd98 0x55670cd00010 0x55670cc9c768 0x55670cae8148 0x55670cae7e20 0x55670cade6c0 0x55670cade370 0x55670caddc60 0x55670caaed30 0x55670ca3c000
|     | | |-DeclRefExpr 0x55670cda9410 <col:16> 'Iter' lvalue ParmVar 0x55670cd75978 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55670cda9430 <col:25> 'Iter' lvalue ParmVar 0x55670cd759f0 'end' 'Iter'
|     | `-CompoundStmt 0x55670cda96a8 <col:30, line:325:9>
|     |   |-CallExpr 0x55670cda9648 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55670cda9528 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55670cda9618 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55670cda95a8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|     |   |   `-DeclRefExpr 0x55670cda9588 <col:24> 'Iter' lvalue ParmVar 0x55670cd75978 'begin' 'Iter'
|     |   `-UnaryOperator 0x55670cda9690 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55670cda9670 <col:15> 'Iter' lvalue ParmVar 0x55670cd75978 'begin' 'Iter'
|     `-ReturnStmt 0x55670cda9708 <line:326:9, col:17>
|       `-UnaryOperator 0x55670cda96f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cda96e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55670cd75cb0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55670cd75c20 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55670cd75df8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55670cd75d68 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55670cd75ec0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55670cda97f8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55670cda9798 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55670cda9748 <col:9> '<bound member function type>' ->reset_from 0x55670cda7b58
|   | | `-CXXThisExpr 0x55670cda9738 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55670cda9778 <col:20> 'int' 0
|   `-ReturnStmt 0x55670cda97e8 <line:352:9, col:17>
|     `-UnaryOperator 0x55670cda97d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cda97c0 <col:17> 'Args *' this
|-VarDecl 0x55670cd75f78 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55670cd75fe0 <col:38> 'int' 1
|-VarDecl 0x55670cd76070 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55670cd760d8 <col:39> 'int' 2
|-VarDecl 0x55670cd76168 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55670cd761d0 <col:39> 'int' 4
|-VarDecl 0x55670cd76260 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55670cd762c8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55670cd76648 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55670cd76340 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd765a8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55670cd763f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd76498 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55670cda9950 <col:43, line:371:5>
|     `-ReturnStmt 0x55670cda9940 <line:370:9, col:34>
|       `-CallExpr 0x55670cda9908 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cda9828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cda98a8 <col:21> 'const char *' lvalue ParmVar 0x55670cd763f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cda98c8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55670cda98e8 <col:33> 'T' lvalue ParmVar 0x55670cd76498 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd76978 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55670cd766b0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd768d8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55670cd76760 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd76808 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55670cda9aa0 <col:45, line:375:5>
|     `-ReturnStmt 0x55670cda9a90 <line:374:9, col:42>
|       `-CallExpr 0x55670cda9a58 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cda9978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cda99f8 <col:21> 'const char *' lvalue ParmVar 0x55670cd76760 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cda9a18 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int'
|         `-DeclRefExpr 0x55670cda9a38 <col:41> 'T' lvalue ParmVar 0x55670cd76808 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd76ca8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55670cd769e0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd76c08 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55670cd76a90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd76b38 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55670cda9bf0 <col:45, line:379:5>
|     `-ReturnStmt 0x55670cda9be0 <line:378:9, col:43>
|       `-CallExpr 0x55670cda9ba8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cda9ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cda9b48 <col:21> 'const char *' lvalue ParmVar 0x55670cd76a90 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cda9b68 <col:30> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         `-DeclRefExpr 0x55670cda9b88 <col:42> 'T' lvalue ParmVar 0x55670cd76b38 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd76fd8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55670cd76d10 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55670cd76f38 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55670cd76dc0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55670cd76e68 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55670cda9df0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55670cda9de0 <line:382:9, col:55>
| |     `-CallExpr 0x55670cda9da8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55670cda9c18 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55670cda9c98 <col:21> 'const char *' lvalue ParmVar 0x55670cd76dc0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55670cda9d68 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55670cda9d18 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55670cda9cf8 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55670cda9d50 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55670cda9d30 <col:42> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55670cda9d88 <col:54> 'T' lvalue ParmVar 0x55670cd76e68 'x' 'T &'
| |-CXXMethodDecl 0x55670cde9ef8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
| | |-TemplateArgument type 'IP6Address'
| | |-ParmVarDecl 0x55670cde9d10 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55670cde9de8 <col:40, col:43> col:43 x 'IP6Address &'
| `-CXXMethodDecl 0x55670cdea3f8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55670cdea218 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55670cdea2e8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55670cd773d8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55670cd77040 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd77338 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55670cd770f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd77170 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd77218 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55670cda9f30 <col:54, line:388:5>
|     |-CallExpr 0x55670cda9eb8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cda9e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55670cda9e48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55670cda9e58 <col:30> 'const char *' lvalue ParmVar 0x55670cd770f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cda9e78 <col:39> 'int' lvalue ParmVar 0x55670cd77170 'flags' 'int'
|     | `-DeclRefExpr 0x55670cda9e98 <col:46> 'T' lvalue ParmVar 0x55670cd77218 'x' 'T &'
|     `-ReturnStmt 0x55670cda9f20 <line:387:9, col:17>
|       `-UnaryOperator 0x55670cda9f08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cda9ef8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd77888 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55670cd77448 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd774c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55670cd777e8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55670cd77588 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd77628 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd776c8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdaa0a0 <col:74, line:403:5>
|     `-ReturnStmt 0x55670cdaa090 <line:402:9, col:56>
|       `-CallExpr 0x55670cdaa050 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cda9f60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cda9fd0 <col:28> 'const char *' lvalue ParmVar 0x55670cd77588 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cda9ff0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55670cdaa010 <col:40> 'T' lvalue ParmVar 0x55670cd77628 'x' 'T &'
|         `-DeclRefExpr 0x55670cdaa030 <col:43> 'const V' lvalue ParmVar 0x55670cd776c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55670cd77cf8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55670cd778f8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd77978 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55670cd77c58 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55670cd77a38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd77ad8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd77b78 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdaa208 <col:76, line:407:5>
|     `-ReturnStmt 0x55670cdaa1f8 <line:406:9, col:65>
|       `-CallExpr 0x55670cdaa1b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaa0c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaa138 <col:28> 'const char *' lvalue ParmVar 0x55670cd77a38 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdaa158 <col:37> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         |-DeclRefExpr 0x55670cdaa178 <col:49> 'T' lvalue ParmVar 0x55670cd77ad8 'x' 'T &'
|         `-DeclRefExpr 0x55670cdaa198 <col:52> 'const V' lvalue ParmVar 0x55670cd77b78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55670cd78248 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55670cd77d68 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd77de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55670cd781a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55670cd77ea8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd77f28 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd77fc8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd78068 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdaa370 <col:85, line:412:5>
|     |-CallExpr 0x55670cdaa2f0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdaa220 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55670cdaa260 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55670cdaa270 <col:37> 'const char *' lvalue ParmVar 0x55670cd77ea8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cdaa290 <col:46> 'int' lvalue ParmVar 0x55670cd77f28 'flags' 'int'
|     | |-DeclRefExpr 0x55670cdaa2b0 <col:53> 'T' lvalue ParmVar 0x55670cd77fc8 'x' 'T &'
|     | `-DeclRefExpr 0x55670cdaa2d0 <col:56> 'const V' lvalue ParmVar 0x55670cd78068 'default_value' 'const V &'
|     `-ReturnStmt 0x55670cdaa360 <line:411:9, col:17>
|       `-UnaryOperator 0x55670cdaa348 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdaa338 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd786d8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55670cd782c0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd78338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd78638 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd783f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd78470 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd78518 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaa4f0 <col:53, line:425:5>
|     `-ReturnStmt 0x55670cdaa4e0 <line:424:9, col:42>
|       `-CallExpr 0x55670cdaa4a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaa3a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaa420 <col:21> 'const char *' lvalue ParmVar 0x55670cd783f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdaa440 <col:30> 'int' 0
|         |-DeclRefExpr 0x55670cdaa460 <col:33> 'P' lvalue ParmVar 0x55670cd78470 'parser' 'P'
|         `-DeclRefExpr 0x55670cdaa480 <col:41> 'T' lvalue ParmVar 0x55670cd78518 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd78b28 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55670cd78748 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd787c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd78a88 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd78888 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd78900 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd789a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaa668 <col:55, line:429:5>
|     `-ReturnStmt 0x55670cdaa658 <line:428:9, col:50>
|       `-CallExpr 0x55670cdaa618 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaa518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaa598 <col:21> 'const char *' lvalue ParmVar 0x55670cd78888 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdaa5b8 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int'
|         |-DeclRefExpr 0x55670cdaa5d8 <col:41> 'P' lvalue ParmVar 0x55670cd78900 'parser' 'P'
|         `-DeclRefExpr 0x55670cdaa5f8 <col:49> 'T' lvalue ParmVar 0x55670cd789a8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd78f78 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55670cd78b98 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd78c18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd78ed8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd78cd8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd78d50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd78df8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaa7e0 <col:55, line:433:5>
|     `-ReturnStmt 0x55670cdaa7d0 <line:432:9, col:51>
|       `-CallExpr 0x55670cdaa790 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaa690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaa710 <col:21> 'const char *' lvalue ParmVar 0x55670cd78cd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdaa730 <col:30> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         |-DeclRefExpr 0x55670cdaa750 <col:42> 'P' lvalue ParmVar 0x55670cd78d50 'parser' 'P'
|         `-DeclRefExpr 0x55670cdaa770 <col:50> 'T' lvalue ParmVar 0x55670cd78df8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd793c8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55670cd78fe8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd79068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd79328 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd79128 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd791a0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd79248 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaaa08 <col:56, line:437:5>
|     `-ReturnStmt 0x55670cdaa9f8 <line:436:9, col:63>
|       `-CallExpr 0x55670cdaa9b8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaa808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaa888 <col:21> 'const char *' lvalue ParmVar 0x55670cd79128 'keyword' 'const char *'
|         |-BinaryOperator 0x55670cdaa958 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55670cdaa908 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55670cdaa8e8 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55670cdaa940 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55670cdaa920 <col:42> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55670cdaa978 <col:54> 'P' lvalue ParmVar 0x55670cd791a0 'parser' 'P'
|         `-DeclRefExpr 0x55670cdaa998 <col:62> 'T' lvalue ParmVar 0x55670cd79248 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd798f8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55670cd79438 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd794b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd79858 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55670cd79578 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd795f8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd79670 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd79718 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaab70 <col:64, line:442:5>
|     |-CallExpr 0x55670cdaaaf0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdaaa20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55670cdaaa60 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55670cdaaa70 <col:30> 'const char *' lvalue ParmVar 0x55670cd79578 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cdaaa90 <col:39> 'int' lvalue ParmVar 0x55670cd795f8 'flags' 'int'
|     | |-DeclRefExpr 0x55670cdaaab0 <col:46> 'P' lvalue ParmVar 0x55670cd79670 'parser' 'P'
|     | `-DeclRefExpr 0x55670cdaaad0 <col:54> 'T' lvalue ParmVar 0x55670cd79718 'x' 'T &'
|     `-ReturnStmt 0x55670cdaab60 <line:441:9, col:17>
|       `-UnaryOperator 0x55670cdaab48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdaab38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd79ef8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55670cd79970 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd799e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55670cd79a68 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55670cd79e58 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55670cd79b30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd79ba8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd79c48 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd79d18 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdaad08 <col:84, line:458:5>
|     `-ReturnStmt 0x55670cdaacf8 <line:457:9, col:64>
|       `-CallExpr 0x55670cdaacb0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaaba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaac10 <col:28> 'const char *' lvalue ParmVar 0x55670cd79b30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdaac30 <col:37> 'int' 0
|         |-DeclRefExpr 0x55670cdaac50 <col:40> 'P' lvalue ParmVar 0x55670cd79ba8 'parser' 'P'
|         |-DeclRefExpr 0x55670cdaac70 <col:48> 'T' lvalue ParmVar 0x55670cd79c48 'x' 'T &'
|         `-DeclRefExpr 0x55670cdaac90 <col:51> 'const V' lvalue ParmVar 0x55670cd79d18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55670cd7ead8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55670cd79f70 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd79fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55670cd7a068 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55670cd7ea38 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55670cd7a130 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd7a1a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd7a248 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd7e948 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdaae98 <col:86, line:462:5>
|     `-ReturnStmt 0x55670cdaae88 <line:461:9, col:73>
|       `-CallExpr 0x55670cdaae40 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaad30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaada0 <col:28> 'const char *' lvalue ParmVar 0x55670cd7a130 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdaadc0 <col:37> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         |-DeclRefExpr 0x55670cdaade0 <col:49> 'P' lvalue ParmVar 0x55670cd7a1a8 'parser' 'P'
|         |-DeclRefExpr 0x55670cdaae00 <col:57> 'T' lvalue ParmVar 0x55670cd7a248 'x' 'T &'
|         `-DeclRefExpr 0x55670cdaae20 <col:60> 'const V' lvalue ParmVar 0x55670cd7e948 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55670cd7f138 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55670cd7eb50 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd7ebc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55670cd7ec48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55670cd7f098 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55670cd7ed10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd7ed90 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd7ee08 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd7eea8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd7ef48 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55670cdab028 <col:95, line:467:5>
|     |-CallExpr 0x55670cdaafa0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdaaeb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55670cdaaef0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55670cdaaf00 <col:37> 'const char *' lvalue ParmVar 0x55670cd7ed10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cdaaf20 <col:46> 'int' lvalue ParmVar 0x55670cd7ed90 'flags' 'int'
|     | |-DeclRefExpr 0x55670cdaaf40 <col:53> 'P' lvalue ParmVar 0x55670cd7ee08 'parser' 'P'
|     | |-DeclRefExpr 0x55670cdaaf60 <col:61> 'T' lvalue ParmVar 0x55670cd7eea8 'x' 'T &'
|     | `-DeclRefExpr 0x55670cdaaf80 <col:64> 'const V' lvalue ParmVar 0x55670cd7ef48 'default_value' 'const V &'
|     `-ReturnStmt 0x55670cdab018 <line:466:9, col:17>
|       `-UnaryOperator 0x55670cdab000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdaaff0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd7f718 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55670cd7f1b8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd7f238 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd7f2b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd7f678 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd7f380 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd7f3f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd7f498 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55670cd7f538 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55670cdab1d0 <col:63, line:481:5>
|     `-ReturnStmt 0x55670cdab1c0 <line:480:9, col:47>
|       `-CallExpr 0x55670cdab178 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdab058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdab0d8 <col:21> 'const char *' lvalue ParmVar 0x55670cd7f380 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdab0f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55670cdab118 <col:33> 'P' lvalue ParmVar 0x55670cd7f3f8 'parser' 'P'
|         |-DeclRefExpr 0x55670cdab138 <col:41> 'T1' lvalue ParmVar 0x55670cd7f498 'x1' 'T1 &'
|         `-DeclRefExpr 0x55670cdab158 <col:45> 'T2' lvalue ParmVar 0x55670cd7f538 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55670cd7fc98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55670cd7f790 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd7f808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd7f888 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd7fbf8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd7f950 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd7f9c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd7fa68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55670cd7fb08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55670cdab370 <col:65, line:485:5>
|     `-ReturnStmt 0x55670cdab360 <line:484:9, col:55>
|       `-CallExpr 0x55670cdab318 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdab1f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdab278 <col:21> 'const char *' lvalue ParmVar 0x55670cd7f950 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdab298 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int'
|         |-DeclRefExpr 0x55670cdab2b8 <col:41> 'P' lvalue ParmVar 0x55670cd7f9c8 'parser' 'P'
|         |-DeclRefExpr 0x55670cdab2d8 <col:49> 'T1' lvalue ParmVar 0x55670cd7fa68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55670cdab2f8 <col:53> 'T2' lvalue ParmVar 0x55670cd7fb08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55670cd80218 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55670cd7fd10 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd7fd88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd7fe08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd80178 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd7fed0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd7ff48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd7ffe8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55670cd80088 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55670cdab510 <col:65, line:489:5>
|     `-ReturnStmt 0x55670cdab500 <line:488:9, col:56>
|       `-CallExpr 0x55670cdab4b8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdab398 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdab418 <col:21> 'const char *' lvalue ParmVar 0x55670cd7fed0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdab438 <col:30> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         |-DeclRefExpr 0x55670cdab458 <col:42> 'P' lvalue ParmVar 0x55670cd7ff48 'parser' 'P'
|         |-DeclRefExpr 0x55670cdab478 <col:50> 'T1' lvalue ParmVar 0x55670cd7ffe8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55670cdab498 <col:54> 'T2' lvalue ParmVar 0x55670cd80088 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55670cd80798 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55670cd80290 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd80308 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd80388 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd806f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd80450 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd804c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd80568 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55670cd80608 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55670cdab760 <col:66, line:493:5>
|     `-ReturnStmt 0x55670cdab750 <line:492:9, col:68>
|       `-CallExpr 0x55670cdab708 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdab538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdab5b8 <col:21> 'const char *' lvalue ParmVar 0x55670cd80450 'keyword' 'const char *'
|         |-BinaryOperator 0x55670cdab688 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55670cdab638 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55670cdab618 <col:30> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55670cdab670 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55670cdab650 <col:42> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55670cdab6a8 <col:54> 'P' lvalue ParmVar 0x55670cd804c8 'parser' 'P'
|         |-DeclRefExpr 0x55670cdab6c8 <col:62> 'T1' lvalue ParmVar 0x55670cd80568 'x1' 'T1 &'
|         `-DeclRefExpr 0x55670cdab6e8 <col:66> 'T2' lvalue ParmVar 0x55670cd80608 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55670cd80df8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55670cd80810 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd80888 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd80908 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd80d58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd809d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd80a50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd80ac8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd80b68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55670cd80c08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55670cdab8f0 <col:74, line:498:5>
|     |-CallExpr 0x55670cdab868 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdab778 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55670cdab7b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55670cdab7c8 <col:30> 'const char *' lvalue ParmVar 0x55670cd809d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cdab7e8 <col:39> 'int' lvalue ParmVar 0x55670cd80a50 'flags' 'int'
|     | |-DeclRefExpr 0x55670cdab808 <col:46> 'P' lvalue ParmVar 0x55670cd80ac8 'parser' 'P'
|     | |-DeclRefExpr 0x55670cdab828 <col:54> 'T1' lvalue ParmVar 0x55670cd80b68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55670cdab848 <col:58> 'T2' lvalue ParmVar 0x55670cd80c08 'x2' 'T2 &'
|     `-ReturnStmt 0x55670cdab8e0 <line:497:9, col:17>
|       `-UnaryOperator 0x55670cdab8c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdab8b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd81158 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55670cd80e78 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd810b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55670cd80f30 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd80fa8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55670cdaba38 <col:52, line:509:5>
|     `-ReturnStmt 0x55670cdaba28 <line:508:9, col:44>
|       `-CallExpr 0x55670cdab9f0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdab920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdab990 <col:26> 'const char *' lvalue ParmVar 0x55670cd80f30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdab9b0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55670cdab9d0 <col:38> 'P' lvalue ParmVar 0x55670cd80fa8 'parser' 'P'
|-FunctionTemplateDecl 0x55670cd81458 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55670cd811c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd813b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55670cd81270 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd812e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55670cdabb78 <col:54, line:513:5>
|     `-ReturnStmt 0x55670cdabb68 <line:512:9, col:52>
|       `-CallExpr 0x55670cdabb30 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdaba60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdabad0 <col:26> 'const char *' lvalue ParmVar 0x55670cd81270 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdabaf0 <col:35> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int'
|         `-DeclRefExpr 0x55670cdabb10 <col:46> 'P' lvalue ParmVar 0x55670cd812e8 'parser' 'P'
|-FunctionTemplateDecl 0x55670cd81758 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55670cd814c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd816b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55670cd81570 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd815e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55670cdabcb8 <col:54, line:517:5>
|     `-ReturnStmt 0x55670cdabca8 <line:516:9, col:53>
|       `-CallExpr 0x55670cdabc70 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdabba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdabc10 <col:26> 'const char *' lvalue ParmVar 0x55670cd81570 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdabc30 <col:35> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int'
|         `-DeclRefExpr 0x55670cdabc50 <col:47> 'P' lvalue ParmVar 0x55670cd815e8 'parser' 'P'
|-FunctionTemplateDecl 0x55670cd81a58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55670cd817c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd819b8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55670cd81870 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd818e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55670cdabea8 <col:55, line:521:5>
|     `-ReturnStmt 0x55670cdabe98 <line:520:9, col:65>
|       `-CallExpr 0x55670cdabe60 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdabce0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdabd50 <col:26> 'const char *' lvalue ParmVar 0x55670cd81870 'keyword' 'const char *'
|         |-BinaryOperator 0x55670cdabe20 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55670cdabdd0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55670cdabdb0 <col:35> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55670cdabe08 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55670cdabde8 <col:47> 'const int' lvalue Var 0x55670cd76070 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55670cdabe40 <col:59> 'P' lvalue ParmVar 0x55670cd818e8 'parser' 'P'
|-FunctionTemplateDecl 0x55670cd81e28 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55670cd81ac0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd81d88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55670cd81b70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd81bf0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd81c68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55670cdabfe8 <col:63, line:526:5>
|     |-CallExpr 0x55670cdabf70 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdabec0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55670cdabf00 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55670cdabf10 <col:35> 'const char *' lvalue ParmVar 0x55670cd81b70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55670cdabf30 <col:44> 'int' lvalue ParmVar 0x55670cd81bf0 'flags' 'int'
|     | `-DeclRefExpr 0x55670cdabf50 <col:51> 'P' lvalue ParmVar 0x55670cd81c68 'parser' 'P'
|     `-ReturnStmt 0x55670cdabfd8 <line:525:9, col:17>
|       `-UnaryOperator 0x55670cdabfc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdabfb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd82278 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55670cd81e98 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd81f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd821d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd81fd8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd82050 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd820f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55670cdac140 <col:58, line:541:5>
|     `-ReturnStmt 0x55670cdac130 <line:540:9, col:39>
|       `-CallExpr 0x55670cdac0f8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac098 <col:21> 'const char *' lvalue ParmVar 0x55670cd81fd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdac0b8 <col:30> 'P' lvalue ParmVar 0x55670cd82050 'parser' 'P'
|         `-DeclRefExpr 0x55670cdac0d8 <col:38> 'T' lvalue ParmVar 0x55670cd820f8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd826c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55670cd822e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd82368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd82628 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd82428 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd824a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd82548 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55670cdac278 <col:60, line:545:5>
|     `-ReturnStmt 0x55670cdac268 <line:544:9, col:41>
|       `-CallExpr 0x55670cdac230 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac1d0 <col:23> 'const char *' lvalue ParmVar 0x55670cd82428 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdac1f0 <col:32> 'P' lvalue ParmVar 0x55670cd824a0 'parser' 'P'
|         `-DeclRefExpr 0x55670cdac210 <col:40> 'T' lvalue ParmVar 0x55670cd82548 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd82b18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55670cd82738 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd827b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd82a78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd82878 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd828f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd82998 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55670cdac3b0 <col:60, line:549:5>
|     `-ReturnStmt 0x55670cdac3a0 <line:548:9, col:41>
|       `-CallExpr 0x55670cdac368 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac2a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac308 <col:23> 'const char *' lvalue ParmVar 0x55670cd82878 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdac328 <col:32> 'P' lvalue ParmVar 0x55670cd828f0 'parser' 'P'
|         `-DeclRefExpr 0x55670cdac348 <col:40> 'T' lvalue ParmVar 0x55670cd82998 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd82f68 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55670cd82b88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd82c08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd82ec8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd82cc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd82d40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd82de8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55670cdac4e8 <col:61, line:553:5>
|     `-ReturnStmt 0x55670cdac4d8 <line:552:9, col:42>
|       `-CallExpr 0x55670cdac4a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac440 <col:24> 'const char *' lvalue ParmVar 0x55670cd82cc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdac460 <col:33> 'P' lvalue ParmVar 0x55670cd82d40 'parser' 'P'
|         `-DeclRefExpr 0x55670cdac480 <col:41> 'T' lvalue ParmVar 0x55670cd82de8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd83448 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55670cd82fd8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd83058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd833a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55670cd83118 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd83198 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd83210 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd832b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55670cdac660 <col:69, line:557:5>
|     `-ReturnStmt 0x55670cdac650 <line:556:9, col:46>
|       `-CallExpr 0x55670cdac610 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac590 <col:21> 'const char *' lvalue ParmVar 0x55670cd83118 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdac5b0 <col:30> 'int' lvalue ParmVar 0x55670cd83198 'flags' 'int'
|         |-DeclRefExpr 0x55670cdac5d0 <col:37> 'P' lvalue ParmVar 0x55670cd83210 'parser' 'P'
|         `-DeclRefExpr 0x55670cdac5f0 <col:45> 'T' lvalue ParmVar 0x55670cd832b8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd83758 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55670cd834c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd836b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55670cd83570 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd835e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55670cdac7a0 <col:56, line:571:5>
|     `-ReturnStmt 0x55670cdac790 <line:570:9, col:48>
|       `-CallExpr 0x55670cdac758 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdac6f8 <col:30> 'const char *' lvalue ParmVar 0x55670cd83570 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdac718 <col:39> 'int' 0
|         `-DeclRefExpr 0x55670cdac738 <col:42> 'P' lvalue ParmVar 0x55670cd835e8 'parser' 'P'
|-FunctionTemplateDecl 0x55670cd83ae8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55670cd837c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd83a48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55670cd83870 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd838f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd83968 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55670cdac970 <col:67, line:576:5>
|     |-CallExpr 0x55670cdac8f8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdac7b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55670cdac7f8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55670cdac808 <col:39> 'const char *' lvalue ParmVar 0x55670cd83870 'keyword' 'const char *'
|     | |-BinaryOperator 0x55670cdac8b8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55670cdac868 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55670cdac828 <col:48> 'int' lvalue ParmVar 0x55670cd838f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55670cdac8a0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55670cdac880 <col:56> 'const int' lvalue Var 0x55670cd76260 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55670cdac8d8 <col:68> 'P' lvalue ParmVar 0x55670cd83968 'parser' 'P'
|     `-ReturnStmt 0x55670cdac960 <line:575:9, col:17>
|       `-UnaryOperator 0x55670cdac948 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdac938 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd83f38 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55670cd83b58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd83bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd83e98 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55670cd83c98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd83d10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd83db8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55670cdacae0 <col:62, line:592:5>
|     `-ReturnStmt 0x55670cdacad0 <line:591:9, col:51>
|       `-CallExpr 0x55670cdaca90 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdac9a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdaca10 <col:30> 'const char *' lvalue ParmVar 0x55670cd83c98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdaca30 <col:39> 'int' 0
|         |-DeclRefExpr 0x55670cdaca50 <col:42> 'P' lvalue ParmVar 0x55670cd83d10 'parser' 'P'
|         `-DeclRefExpr 0x55670cdaca70 <col:50> 'T' lvalue ParmVar 0x55670cd83db8 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd84418 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55670cd83fa8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd84028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd84378 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55670cd840e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd84168 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd841e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd84288 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55670cdaccd8 <col:73, line:597:5>
|     |-CallExpr 0x55670cdacc58 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdacaf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55670cdacb38 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55670cdacb48 <col:39> 'const char *' lvalue ParmVar 0x55670cd840e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55670cdacbf8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55670cdacba8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55670cdacb68 <col:48> 'int' lvalue ParmVar 0x55670cd84168 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55670cdacbe0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55670cdacbc0 <col:56> 'const int' lvalue Var 0x55670cd76260 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55670cdacc18 <col:68> 'P' lvalue ParmVar 0x55670cd841e0 'parser' 'P'
|     | `-DeclRefExpr 0x55670cdacc38 <col:76> 'T' lvalue ParmVar 0x55670cd84288 'x' 'T &'
|     `-ReturnStmt 0x55670cdaccc8 <line:596:9, col:17>
|       `-UnaryOperator 0x55670cdaccb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdacca0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd849c8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55670cd84490 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd84508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd84928 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55670cd845c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd84640 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd84800 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55670cdace48 <col:65, line:614:5>
|     `-ReturnStmt 0x55670cdace38 <line:613:9, col:46>
|       `-CallExpr 0x55670cdacdf8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdacd08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdacd78 <col:25> 'const char *' lvalue ParmVar 0x55670cd845c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdacd98 <col:34> 'int' 0
|         |-DeclRefExpr 0x55670cdacdb8 <col:37> 'P' lvalue ParmVar 0x55670cd84640 'parser' 'P'
|         `-DeclRefExpr 0x55670cdacdd8 <col:45> 'Vector<T>' lvalue ParmVar 0x55670cd84800 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55670cd84df8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55670cd84a38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd84d58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55670cd84af0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd84c40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55670cdad060 <col:55, line:618:5>
|     `-ReturnStmt 0x55670cdad050 <line:617:9, col:55>
|       `-CallExpr 0x55670cdad010 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdace70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdacee0 <col:25> 'const char *' lvalue ParmVar 0x55670cd84af0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55670cdacf00 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55670cdacfd0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55670cdacff0 <col:54> 'Vector<T>' lvalue ParmVar 0x55670cd84c40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55670cd853c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55670cd84e60 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd84ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd85328 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55670cd84f98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd85018 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd85090 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd851e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55670cdad258 <col:76, line:623:5>
|     |-CallExpr 0x55670cdad1d8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55670cdad078 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55670cdad0b8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55670cdad0c8 <col:34> 'const char *' lvalue ParmVar 0x55670cd84f98 'keyword' 'const char *'
|     | |-BinaryOperator 0x55670cdad178 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55670cdad128 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55670cdad0e8 <col:43> 'int' lvalue ParmVar 0x55670cd85018 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55670cdad160 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55670cdad140 <col:51> 'const int' lvalue Var 0x55670cd76260 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55670cdad198 <col:63> 'P' lvalue ParmVar 0x55670cd85090 'parser' 'P'
|     | `-DeclRefExpr 0x55670cdad1b8 <col:71> 'Vector<T>' lvalue ParmVar 0x55670cd851e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55670cdad248 <line:622:9, col:17>
|       `-UnaryOperator 0x55670cdad230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdad220 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd85908 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55670cd85440 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd854b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd85868 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55670cd85578 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd855f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd85740 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55670cdad4c0 <col:66, line:627:5>
|     `-ReturnStmt 0x55670cdad4b0 <line:626:9, col:59>
|       `-CallExpr 0x55670cdad470 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55670cdad288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55670cdad2f8 <col:25> 'const char *' lvalue ParmVar 0x55670cd85578 'keyword' 'const char *'
|         |-DeclRefExpr 0x55670cdad318 <col:34> 'int' lvalue ParmVar 0x55670cd855f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55670cdad430 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55670cdad450 <col:58> 'Vector<T>' lvalue ParmVar 0x55670cd85740 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55670cd85998 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55670cdad540 <col:25, line:633:5>
|   `-ReturnStmt 0x55670cdad530 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55670cdad518 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55670cdad4e8 <col:16> 'const bool' lvalue ->_status 0x55670cd91328
|         `-CXXThisExpr 0x55670cdad4d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55670cd85b18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55670cd85a50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55670cdad628 <col:27, line:639:5>
|   |-BinaryOperator 0x55670cdad5d0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55670cdad558 <col:9> 'bool' lvalue ParmVar 0x55670cd85a50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55670cdad5b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55670cdad588 <col:13> 'bool' lvalue ->_status 0x55670cd91328
|   |     `-CXXThisExpr 0x55670cdad578 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55670cdad618 <line:638:9, col:17>
|     `-UnaryOperator 0x55670cdad600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cdad5f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55670cd85c98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55670cd85bd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55670cdad718 <col:39, line:644:5>
|   |-BinaryOperator 0x55670cdad6c0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55670cdad648 <col:9> 'bool' lvalue ParmVar 0x55670cd85bd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55670cdad6a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55670cdad678 <col:13> 'const bool' lvalue ->_status 0x55670cd91328
|   |     `-CXXThisExpr 0x55670cdad668 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55670cdad708 <line:643:9, col:17>
|     `-UnaryOperator 0x55670cdad6f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cdad6e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55670cd85d60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55670cdad7c0 <col:30, line:651:5>
|   `-ReturnStmt 0x55670cdad7b0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55670cdad798 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55670cdad768 <col:16> 'bool' lvalue ->_read_status 0x55670cd6a560
|         `-ImplicitCastExpr 0x55670cdad748 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55670cdad738 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55670cd85ea8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55670cd85e18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55670cdad8c8 <col:32, line:658:5>
|   |-BinaryOperator 0x55670cdad870 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55670cdad7d8 <col:9> 'bool' lvalue ParmVar 0x55670cd85e18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55670cdad858 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55670cdad828 <col:13> 'bool' lvalue ->_read_status 0x55670cd6a560
|   |     `-ImplicitCastExpr 0x55670cdad808 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55670cdad7f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55670cdad8b8 <line:657:9, col:17>
|     `-UnaryOperator 0x55670cdad8a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cdad890 <col:17> 'Args *' this
|-CXXMethodDecl 0x55670cd85ff8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55670cd85f68 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55670cdad9d8 <col:44, line:663:5>
|   |-BinaryOperator 0x55670cdad980 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55670cdad8e8 <col:9> 'bool' lvalue ParmVar 0x55670cd85f68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55670cdad968 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55670cdad938 <col:13> 'bool' lvalue ->_read_status 0x55670cd6a560
|   |     `-ImplicitCastExpr 0x55670cdad918 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55670cdad908 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55670cdad9c8 <line:662:9, col:17>
|     `-UnaryOperator 0x55670cdad9b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670cdad9a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55670cd860c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55670cd86188 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55670cd86250 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55670cd86318 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55670cd86628 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55670cd863b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd86588 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55670cd86498 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55670cdadda0 <col:19, line:706:5>
|     `-IfStmt 0x55670cdadd78 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55670cdadad8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55670cdadca8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55670cdadc78 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55670cdadc38 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55670cdadb30 <col:42> '<bound member function type>' ->simple_slot 0x55670cda8810
|       |     | `-CXXThisExpr 0x55670cdadb20 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55670cdadbd8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55670cdadb80 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55670cd24878 0x55670cd23288 0x55670caf0818
|       |     | `-DeclRefExpr 0x55670cdadb60 <col:55> 'T' lvalue ParmVar 0x55670cd86498 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55670cdadc18 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55670cdadd68 <line:705:13, col:34>
|         `-CallExpr 0x55670cdadd40 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55670cdadcc8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55670cdadd20 <col:33> 'T' lvalue ParmVar 0x55670cd86498 'x' 'T &'
|-FunctionTemplateDecl 0x55670cd8c450 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55670cd86688 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd86858 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55670cd86768 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55670cdae180 <col:31, line:717:5>
|     |-DeclStmt 0x55670cdadee0 <line:713:9, col:23>
|     | `-VarDecl 0x55670cdaddc8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55670cdadeb8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55670cdade40 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55670cdade98 <col:21> 'T' lvalue ParmVar 0x55670cd86768 'x' 'T &'
|     |-IfStmt 0x55670cdae130 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55670cdadfd8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55670cdae110 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55670cdae0b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55670cdae040 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|     |   | `-DeclRefExpr 0x55670cdae020 <col:14> 'T *' lvalue Var 0x55670cdaddc8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55670cdae0f0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55670cdae168 <line:716:9, col:16>
|       `-DeclRefExpr 0x55670cdae148 <col:16> 'T *' lvalue Var 0x55670cdaddc8 's' 'T *'
|-FunctionTemplateDecl 0x55670cd8c858 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55670cd8c4b0 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd8c528 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55670cd8c7b8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55670cd8c608 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55670cd8c6a8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55670cdae490 <col:37, line:726:5>
|     |-IfStmt 0x55670cdae420 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55670cdae440 <line:723:13, col:26>
|     | | `-VarDecl 0x55670cdae1e8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55670cdae2d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55670cdae260 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55670cdae2b8 <col:25> 'T' lvalue ParmVar 0x55670cd8c608 'x' 'T &'
|     | |-DeclRefExpr 0x55670cdae300 <col:16> 'T *' lvalue Var 0x55670cdae1e8 's' 'T *'
|     | `-BinaryOperator 0x55670cdae400 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55670cdae3b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55670cdae340 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|     |   | `-DeclRefExpr 0x55670cdae320 <col:14> 'T *' lvalue Var 0x55670cdae1e8 's' 'T *'
|     |   `-DeclRefExpr 0x55670cdae3e0 <col:18> 'const V' lvalue ParmVar 0x55670cd8c6a8 'value' 'const V &'
|     `-ReturnStmt 0x55670cdae480 <line:725:9, col:17>
|       `-UnaryOperator 0x55670cdae468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55670cdae458 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55670cd8cc58 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55670cd8c8c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55670cd8cbb8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55670cd8c970 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8c9f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8ca98 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55670cdaf2b0 <col:65, line:737:5>
|     |-DeclStmt 0x55670cdae528 <line:732:9, col:26>
|     | `-VarDecl 0x55670cdae4c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55670cdaf278 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55670cdaf298 <line:733:13, col:58>
|       | `-VarDecl 0x55670cdae550 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55670cdae730 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55670cdae700 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55670cdae6e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55670cdae6c8 <col:26, col:58> 'String' (CXXTemporary 0x55670cdae6c8)
|       |           `-CXXMemberCallExpr 0x55670cdae658 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55670cdae5c8 <col:26> '<bound member function type>' ->find 0x55670cda7e28
|       |             | `-CXXThisExpr 0x55670cdae5b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55670cdae690 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdae5f8 <col:31> 'const char *' lvalue ParmVar 0x55670cd8c970 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55670cdae6a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdae618 <col:40> 'int' lvalue ParmVar 0x55670cd8c9f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55670cdae638 <col:47> 'Args::Slot *' lvalue Var 0x55670cdae4c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55670cdae7e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55670cdae7d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55670cdae7b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55670cdae780 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |       `-ImplicitCastExpr 0x55670cdae768 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55670cdae748 <col:20> 'String' lvalue Var 0x55670cdae550 'str' 'String'
|       `-CompoundStmt 0x55670cdaf258 <col:61, line:736:9>
|         |-DeclStmt 0x55670cdaeca0 <line:734:13, col:76>
|         | `-VarDecl 0x55670cdae838 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55670cdaec70 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55670cdaebe0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55670cdaec28 <col:60> 'T' lvalue ParmVar 0x55670cd8ca98 'variable' 'T &'
|         |     `-UnaryOperator 0x55670cdaec58 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55670cdaec48 <col:71> 'Args *' this
|         `-CallExpr 0x55670cdaf228 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55670cdaecc8 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|           | `-CXXThisExpr 0x55670cdaecb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55670cdaf1e8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55670cdaecf8 <col:23> 'T *' lvalue Var 0x55670cdae838 's' 'T *'
|           | `-CallExpr 0x55670cdaf1a8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55670cdaef80 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55670cdaf080 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55670cdaf0a0 <col:86> 'String' lvalue Var 0x55670cdae550 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55670cdaf150 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55670cdaf0e0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|           |   | `-DeclRefExpr 0x55670cdaf0c0 <col:92> 'T *' lvalue Var 0x55670cdae838 's' 'T *'
|           |   `-UnaryOperator 0x55670cdaf190 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55670cdaf180 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55670cdaf208 <col:103> 'Args::Slot *' lvalue Var 0x55670cdae4c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8d1a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55670cd8ccc8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd8cd48 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55670cd8d108 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55670cd8ce08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8ce88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8cf28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55670cd8cfc8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55670cdb2a20 <col:88, line:745:5>
|     |-DeclStmt 0x55670cdaf348 <line:741:9, col:26>
|     | `-VarDecl 0x55670cdaf2e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55670cdaf568 <line:742:9, col:55>
|     | `-VarDecl 0x55670cdaf370 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55670cdaf550 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55670cdaf520 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55670cdaf508 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55670cdaf4e8 <col:22, col:54> 'String' (CXXTemporary 0x55670cdaf4e8)
|     |           `-CXXMemberCallExpr 0x55670cdaf478 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55670cdaf3e8 <col:22> '<bound member function type>' ->find 0x55670cda7e28
|     |             | `-CXXThisExpr 0x55670cdaf3d8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55670cdaf4b0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55670cdaf418 <col:27> 'const char *' lvalue ParmVar 0x55670cd8ce08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55670cdaf4c8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55670cdaf438 <col:36> 'int' lvalue ParmVar 0x55670cd8ce88 'flags' 'int'
|     |             `-DeclRefExpr 0x55670cdaf458 <col:43> 'Args::Slot *' lvalue Var 0x55670cdaf2e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55670cdb2210 <line:743:9, col:72>
|     | `-VarDecl 0x55670cdaf5b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55670cdb21e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55670cdb2150 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55670cdb2198 <col:56> 'T' lvalue ParmVar 0x55670cd8cf28 'variable' 'T &'
|     |     `-UnaryOperator 0x55670cdb21c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55670cdb21b8 <col:67> 'Args *' this
|     `-CallExpr 0x55670cdb29f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55670cdb2238 <col:9> '<bound member function type>' ->postparse 0x55670cda8038
|       | `-CXXThisExpr 0x55670cdb2228 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55670cdb29b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55670cdb2268 <col:19> 'T *' lvalue Var 0x55670cdaf5b8 's' 'T *'
|       | `-ParenExpr 0x55670cdb2990 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55670cdb2960 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55670cdb2948 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55670cdb2930 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55670cdb2910 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55670cdb28e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |     |       `-ImplicitCastExpr 0x55670cdb28c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55670cdb2288 <col:25> 'String' lvalue Var 0x55670cdaf370 'str' 'String'
|       |     |-CallExpr 0x55670cdb2738 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55670cdb2510 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55670cdb2610 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55670cdb2630 <col:89> 'String' lvalue Var 0x55670cdaf370 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55670cdb26e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55670cdb2670 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|       |     | | `-DeclRefExpr 0x55670cdb2650 <col:95> 'T *' lvalue Var 0x55670cdaf5b8 's' 'T *'
|       |     | `-UnaryOperator 0x55670cdb2720 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55670cdb2710 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55670cdb28a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55670cdb2888 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55670cdb2858 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55670cdb2808 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55670cdb2798 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|       |         | | `-DeclRefExpr 0x55670cdb2778 <col:109> 'T *' lvalue Var 0x55670cdaf5b8 's' 'T *'
|       |         | `-DeclRefExpr 0x55670cdb2838 <col:113> 'const V' lvalue ParmVar 0x55670cd8cfc8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55670cdb2878 <col:120> 'bool' true
|       `-DeclRefExpr 0x55670cdb29d0 <col:128> 'Args::Slot *' lvalue Var 0x55670cdaf2e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8d6d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55670cd8d220 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd8d298 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd8d638 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55670cd8d358 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8d3d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8d450 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd8d4f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55670cdb3618 <col:75, line:754:5>
|     |-DeclStmt 0x55670cdb2ac8 <line:749:9, col:26>
|     | `-VarDecl 0x55670cdb2a60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55670cdb35e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55670cdb3600 <line:750:13, col:58>
|       | `-VarDecl 0x55670cdb2af0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55670cdb2cd0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55670cdb2ca0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55670cdb2c88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55670cdb2c68 <col:26, col:58> 'String' (CXXTemporary 0x55670cdb2c68)
|       |           `-CXXMemberCallExpr 0x55670cdb2bf8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55670cdb2b68 <col:26> '<bound member function type>' ->find 0x55670cda7e28
|       |             | `-CXXThisExpr 0x55670cdb2b58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55670cdb2c30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb2b98 <col:31> 'const char *' lvalue ParmVar 0x55670cd8d358 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55670cdb2c48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb2bb8 <col:40> 'int' lvalue ParmVar 0x55670cd8d3d8 'flags' 'int'
|       |             `-DeclRefExpr 0x55670cdb2bd8 <col:47> 'Args::Slot *' lvalue Var 0x55670cdb2a60 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55670cdb2d88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55670cdb2d70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55670cdb2d50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55670cdb2d20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |       `-ImplicitCastExpr 0x55670cdb2d08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55670cdb2ce8 <col:20> 'String' lvalue Var 0x55670cdb2af0 'str' 'String'
|       `-CompoundStmt 0x55670cdb35c0 <col:61, line:753:9>
|         |-DeclStmt 0x55670cdb3160 <line:751:13, col:63>
|         | `-VarDecl 0x55670cdb2dd8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55670cdb3130 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55670cdb30a0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55670cdb30e8 <col:47> 'T' lvalue ParmVar 0x55670cd8d4f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55670cdb3118 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55670cdb3108 <col:58> 'Args *' this
|         `-CallExpr 0x55670cdb3590 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55670cdb3188 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|           | `-CXXThisExpr 0x55670cdb3178 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55670cdb3550 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55670cdb31b8 <col:23> 'T *' lvalue Var 0x55670cdb2dd8 's' 'T *'
|           | `-CallExpr 0x55670cdb3510 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55670cdb33a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55670cdb33e8 <col:56> 'P' lvalue ParmVar 0x55670cd8d450 'parser' 'P'
|           |   |-DeclRefExpr 0x55670cdb3408 <col:64> 'String' lvalue Var 0x55670cdb2af0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55670cdb34b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55670cdb3448 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|           |   | `-DeclRefExpr 0x55670cdb3428 <col:70> 'T *' lvalue Var 0x55670cdb2dd8 's' 'T *'
|           |   `-UnaryOperator 0x55670cdb34f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55670cdb34e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55670cdb3570 <col:81> 'Args::Slot *' lvalue Var 0x55670cdb2a60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8dd38 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55670cd8d750 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55670cd8d7c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55670cd8d848 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55670cd8dc98 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55670cd8d910 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8d990 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8da08 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd8daa8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55670cd8db48 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55670cdb43a8 <col:98, line:762:5>
|     |-DeclStmt 0x55670cdb36b0 <line:758:9, col:26>
|     | `-VarDecl 0x55670cdb3648 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55670cdb38d0 <line:759:9, col:55>
|     | `-VarDecl 0x55670cdb36d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55670cdb38b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55670cdb3888 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55670cdb3870 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55670cdb3850 <col:22, col:54> 'String' (CXXTemporary 0x55670cdb3850)
|     |           `-CXXMemberCallExpr 0x55670cdb37e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55670cdb3750 <col:22> '<bound member function type>' ->find 0x55670cda7e28
|     |             | `-CXXThisExpr 0x55670cdb3740 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55670cdb3818 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55670cdb3780 <col:27> 'const char *' lvalue ParmVar 0x55670cd8d910 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55670cdb3830 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55670cdb37a0 <col:36> 'int' lvalue ParmVar 0x55670cd8d990 'flags' 'int'
|     |             `-DeclRefExpr 0x55670cdb37c0 <col:43> 'Args::Slot *' lvalue Var 0x55670cdb3648 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55670cdb3cf0 <line:760:9, col:59>
|     | `-VarDecl 0x55670cdb3928 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55670cdb3cc0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55670cdb3c30 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55670cdb3c78 <col:43> 'T' lvalue ParmVar 0x55670cd8daa8 'variable' 'T &'
|     |     `-UnaryOperator 0x55670cdb3ca8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55670cdb3c98 <col:54> 'Args *' this
|     `-CallExpr 0x55670cdb4378 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55670cdb3d18 <col:9> '<bound member function type>' ->postparse 0x55670cda8038
|       | `-CXXThisExpr 0x55670cdb3d08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55670cdb4338 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55670cdb3d48 <col:19> 'T *' lvalue Var 0x55670cdb3928 's' 'T *'
|       | `-ParenExpr 0x55670cdb4318 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55670cdb42e8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55670cdb42d0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55670cdb42b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55670cdb4298 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55670cdb4268 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |     |       `-ImplicitCastExpr 0x55670cdb4250 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55670cdb3d68 <col:25> 'String' lvalue Var 0x55670cdb36d8 'str' 'String'
|       |     |-CallExpr 0x55670cdb40c0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55670cdb3f50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55670cdb3f98 <col:59> 'P' lvalue ParmVar 0x55670cd8da08 'parser' 'P'
|       |     | |-DeclRefExpr 0x55670cdb3fb8 <col:67> 'String' lvalue Var 0x55670cdb36d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55670cdb4068 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55670cdb3ff8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|       |     | | `-DeclRefExpr 0x55670cdb3fd8 <col:73> 'T *' lvalue Var 0x55670cdb3928 's' 'T *'
|       |     | `-UnaryOperator 0x55670cdb40a8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55670cdb4098 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55670cdb4230 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55670cdb4210 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55670cdb41e0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55670cdb4190 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55670cdb4120 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|       |         | | `-DeclRefExpr 0x55670cdb4100 <col:87> 'T *' lvalue Var 0x55670cdb3928 's' 'T *'
|       |         | `-DeclRefExpr 0x55670cdb41c0 <col:91> 'const V' lvalue ParmVar 0x55670cd8db48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55670cdb4200 <col:98> 'bool' true
|       `-DeclRefExpr 0x55670cdb4358 <col:106> 'Args::Slot *' lvalue Var 0x55670cdb3648 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8e3a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55670cd8ddb8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd8de38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55670cd8deb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55670cd8e308 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55670cd8df80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8e000 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8e078 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd8e118 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55670cd8e1b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55670cdb5388 <col:60, line:773:5>
|     |-DeclStmt 0x55670cdb4450 <line:767:9, col:26>
|     | `-VarDecl 0x55670cdb43e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55670cdb5350 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55670cdb5370 <line:768:13, col:58>
|       | `-VarDecl 0x55670cdb4478 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55670cdb4658 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55670cdb4628 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55670cdb4610 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55670cdb45f0 <col:26, col:58> 'String' (CXXTemporary 0x55670cdb45f0)
|       |           `-CXXMemberCallExpr 0x55670cdb4580 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55670cdb44f0 <col:26> '<bound member function type>' ->find 0x55670cda7e28
|       |             | `-CXXThisExpr 0x55670cdb44e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55670cdb45b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb4520 <col:31> 'const char *' lvalue ParmVar 0x55670cd8df80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55670cdb45d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb4540 <col:40> 'int' lvalue ParmVar 0x55670cd8e000 'flags' 'int'
|       |             `-DeclRefExpr 0x55670cdb4560 <col:47> 'Args::Slot *' lvalue Var 0x55670cdb43e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55670cdb4710 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55670cdb46f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55670cdb46d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55670cdb46a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |       `-ImplicitCastExpr 0x55670cdb4690 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55670cdb4670 <col:20> 'String' lvalue Var 0x55670cdb4478 'str' 'String'
|       `-CompoundStmt 0x55670cdb5328 <col:61, line:772:9>
|         |-DeclStmt 0x55670cdb4a50 <line:769:13, col:66>
|         | `-VarDecl 0x55670cdb4768 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55670cdb4a20 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55670cdb4990 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55670cdb49d8 <col:49> 'T1' lvalue ParmVar 0x55670cd8e118 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55670cdb4a08 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55670cdb49f8 <col:61> 'Args *' this
|         |-DeclStmt 0x55670cdb4dc0 <line:770:13, col:66>
|         | `-VarDecl 0x55670cdb4ad8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55670cdb4d90 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55670cdb4d00 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55670cdb4d48 <col:49> 'T2' lvalue ParmVar 0x55670cd8e1b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55670cdb4d78 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55670cdb4d68 <col:61> 'Args *' this
|         `-CallExpr 0x55670cdb52f8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55670cdb4de8 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|           | `-CXXThisExpr 0x55670cdb4dd8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55670cdb52b8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55670cdb4e58 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55670cdb4e18 <col:23> 'T1 *' lvalue Var 0x55670cdb4768 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55670cdb4e38 <col:29> 'T2 *' lvalue Var 0x55670cdb4ad8 's2' 'T2 *'
|           | `-CallExpr 0x55670cdb5270 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55670cdb5040 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55670cdb5088 <col:63> 'P' lvalue ParmVar 0x55670cd8e078 'parser' 'P'
|           |   |-DeclRefExpr 0x55670cdb50a8 <col:71> 'String' lvalue Var 0x55670cdb4478 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55670cdb5158 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55670cdb50e8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|           |   | `-DeclRefExpr 0x55670cdb50c8 <col:77> 'T1 *' lvalue Var 0x55670cdb4768 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55670cdb5218 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55670cdb51a8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|           |   | `-DeclRefExpr 0x55670cdb5188 <col:82> 'T2 *' lvalue Var 0x55670cdb4ad8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55670cdb5258 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55670cdb5248 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55670cdb52d8 <col:94> 'Args::Slot *' lvalue Var 0x55670cdb43e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8e798 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55670cd8e428 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd8e6f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55670cd8e4e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8e560 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8e5d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55670cdb58a0 <col:67, line:780:5>
|     |-DeclStmt 0x55670cdb5420 <line:777:9, col:26>
|     | `-VarDecl 0x55670cdb53b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55670cdb5868 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55670cdb5888 <line:778:13, col:58>
|       | `-VarDecl 0x55670cdb5448 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55670cdb5628 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55670cdb55f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55670cdb55e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55670cdb55c0 <col:26, col:58> 'String' (CXXTemporary 0x55670cdb55c0)
|       |           `-CXXMemberCallExpr 0x55670cdb5550 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55670cdb54c0 <col:26> '<bound member function type>' ->find 0x55670cda7e28
|       |             | `-CXXThisExpr 0x55670cdb54b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55670cdb5588 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb54f0 <col:31> 'const char *' lvalue ParmVar 0x55670cd8e4e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55670cdb55a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55670cdb5510 <col:40> 'int' lvalue ParmVar 0x55670cd8e560 'flags' 'int'
|       |             `-DeclRefExpr 0x55670cdb5530 <col:47> 'Args::Slot *' lvalue Var 0x55670cdb53b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55670cdb56e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55670cdb56c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55670cdb56a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55670cdb5678 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|       |       `-ImplicitCastExpr 0x55670cdb5660 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55670cdb5640 <col:20> 'String' lvalue Var 0x55670cdb5448 'str' 'String'
|       `-CallExpr 0x55670cdb5838 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55670cdb5708 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|         | `-CXXThisExpr 0x55670cdb56f8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55670cdb57e8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55670cdb5758 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55670cdb5738 <col:23> 'P' lvalue ParmVar 0x55670cd8e5d8 'parser' 'P'
|         | |-DeclRefExpr 0x55670cdb57a0 <col:36> 'String' lvalue Var 0x55670cdb5448 'str' 'String'
|         | `-UnaryOperator 0x55670cdb57d0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55670cdb57c0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55670cdb5818 <col:49> 'Args::Slot *' lvalue Var 0x55670cdb53b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55670cd8eb38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55670cd8e808 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55670cd8ea98 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55670cd8e8c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8e940 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8e9b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55670cdb6210 <col:71, line:792:5>
|     |-DeclStmt 0x55670cdb5938 <line:784:9, col:26>
|     | `-VarDecl 0x55670cdb58d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55670cdb5a08 <line:785:9, col:29>
|     | `-VarDecl 0x55670cdb5968 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55670cdb59f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55670cdb59d0 <col:28> 'int' 1
|     |-WhileStmt 0x55670cdb60c0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55670cdb60e0 <line:786:16, col:61>
|     | | `-VarDecl 0x55670cdb5a30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55670cdb5c10 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55670cdb5be0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55670cdb5bc8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55670cdb5ba8 <col:29, col:61> 'String' (CXXTemporary 0x55670cdb5ba8)
|     | |           `-CXXMemberCallExpr 0x55670cdb5b38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55670cdb5aa8 <col:29> '<bound member function type>' ->find 0x55670cda7e28
|     | |             | `-CXXThisExpr 0x55670cdb5a98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55670cdb5b70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb5ad8 <col:34> 'const char *' lvalue ParmVar 0x55670cd8e8c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55670cdb5b88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb5af8 <col:43> 'int' lvalue ParmVar 0x55670cd8e940 'flags' 'int'
|     | |             `-DeclRefExpr 0x55670cdb5b18 <col:50> 'Args::Slot *' lvalue Var 0x55670cdb58d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55670cdb5cc8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55670cdb5cb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55670cdb5c90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55670cdb5c60 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|     | |       `-ImplicitCastExpr 0x55670cdb5c48 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55670cdb5c28 <col:23> 'String' lvalue Var 0x55670cdb5a30 'str' 'String'
|     | `-CompoundStmt 0x55670cdb6098 <col:64, line:790:9>
|     |   |-CallExpr 0x55670cdb5e20 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55670cdb5cf0 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|     |   | | `-CXXThisExpr 0x55670cdb5ce0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55670cdb5dd0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55670cdb5d40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55670cdb5d20 <col:23> 'P' lvalue ParmVar 0x55670cd8e9b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55670cdb5d88 <col:36> 'String' lvalue Var 0x55670cdb5a30 'str' 'String'
|     |   | | `-UnaryOperator 0x55670cdb5db8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55670cdb5da8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55670cdb5e00 <col:49> 'Args::Slot *' lvalue Var 0x55670cdb58d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55670cdb5fb8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55670cdb5e50 <col:13> 'int' lvalue Var 0x55670cdb5968 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55670cdb5fa0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55670cdb5f80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55670cdb5ee8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55670cdb5ec8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55670cdb5eb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55670cdb5e70 <col:28> 'int' lvalue Var 0x55670cdb5968 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55670cdb5e90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55670cdb5f68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55670cdb5f38 <col:49> 'bool' lvalue ->_read_status 0x55670cd6a560
|     |   |         `-ImplicitCastExpr 0x55670cdb5f18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55670cdb5f08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55670cdb6068 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55670cdb5fd8 <col:13> 'int' lvalue ParmVar 0x55670cd8e940 'flags' 'int'
|     |     `-UnaryOperator 0x55670cdb6050 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55670cdb6038 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55670cdb6018 <col:23> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55670cdb61f0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55670cdb6128 <col:9> 'bool' lvalue ->_read_status 0x55670cd6a560
|       | `-ImplicitCastExpr 0x55670cdb6108 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55670cdb60f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55670cdb61d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55670cdb61b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55670cdb6198 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55670cdb6158 <col:25> 'int' lvalue Var 0x55670cdb5968 'read_status' 'int'
|           `-IntegerLiteral 0x55670cdb6178 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55670cd8f018 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55670cd8eba8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd8ec28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd8ef78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55670cd8ece8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8ed68 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8ede0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd8ee88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55670cdb71a0 <col:84, line:805:5>
|     |-DeclStmt 0x55670cdb62b8 <line:796:9, col:26>
|     | `-VarDecl 0x55670cdb6250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55670cdb6388 <line:797:9, col:29>
|     | `-VarDecl 0x55670cdb62e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55670cdb6370 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55670cdb6350 <col:28> 'int' 1
|     |-DeclStmt 0x55670cdb66c0 <line:798:9, col:71>
|     | `-VarDecl 0x55670cdb63d8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55670cdb6690 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55670cdb6600 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55670cdb6648 <col:55> 'T' lvalue ParmVar 0x55670cd8ee88 'variable' 'T &'
|     |     `-UnaryOperator 0x55670cdb6678 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55670cdb6668 <col:66> 'Args *' this
|     |-WhileStmt 0x55670cdb7050 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55670cdb7070 <line:799:16, col:61>
|     | | `-VarDecl 0x55670cdb66e8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55670cdb68c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55670cdb6898 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55670cdb6880 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55670cdb6860 <col:29, col:61> 'String' (CXXTemporary 0x55670cdb6860)
|     | |           `-CXXMemberCallExpr 0x55670cdb67f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55670cdb6760 <col:29> '<bound member function type>' ->find 0x55670cda7e28
|     | |             | `-CXXThisExpr 0x55670cdb6750 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55670cdb6828 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb6790 <col:34> 'const char *' lvalue ParmVar 0x55670cd8ece8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55670cdb6840 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb67b0 <col:43> 'int' lvalue ParmVar 0x55670cd8ed68 'flags' 'int'
|     | |             `-DeclRefExpr 0x55670cdb67d0 <col:50> 'Args::Slot *' lvalue Var 0x55670cdb6250 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55670cdb6980 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55670cdb6968 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55670cdb6948 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55670cdb6918 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|     | |       `-ImplicitCastExpr 0x55670cdb6900 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55670cdb68e0 <col:23> 'String' lvalue Var 0x55670cdb66e8 'str' 'String'
|     | `-CompoundStmt 0x55670cdb7028 <col:64, line:803:9>
|     |   |-CallExpr 0x55670cdb6db0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55670cdb69a8 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|     |   | | `-CXXThisExpr 0x55670cdb6998 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55670cdb6d70 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55670cdb69d8 <col:23> 'T *' lvalue Var 0x55670cdb63d8 's' 'T *'
|     |   | | `-CallExpr 0x55670cdb6d30 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55670cdb6bc0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55670cdb6c08 <col:56> 'P' lvalue ParmVar 0x55670cd8ede0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55670cdb6c28 <col:64> 'String' lvalue Var 0x55670cdb66e8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55670cdb6cd8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55670cdb6c68 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|     |   | |   | `-DeclRefExpr 0x55670cdb6c48 <col:70> 'T *' lvalue Var 0x55670cdb63d8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55670cdb6d18 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55670cdb6d08 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55670cdb6d90 <col:81> 'Args::Slot *' lvalue Var 0x55670cdb6250 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55670cdb6f48 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55670cdb6de0 <col:13> 'int' lvalue Var 0x55670cdb62e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55670cdb6f30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55670cdb6f10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55670cdb6e78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55670cdb6e58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55670cdb6e40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55670cdb6e00 <col:28> 'int' lvalue Var 0x55670cdb62e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55670cdb6e20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55670cdb6ef8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55670cdb6ec8 <col:49> 'bool' lvalue ->_read_status 0x55670cd6a560
|     |   |         `-ImplicitCastExpr 0x55670cdb6ea8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55670cdb6e98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55670cdb6ff8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55670cdb6f68 <col:13> 'int' lvalue ParmVar 0x55670cd8ed68 'flags' 'int'
|     |     `-UnaryOperator 0x55670cdb6fe0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55670cdb6fc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55670cdb6fa8 <col:23> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55670cdb7180 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55670cdb70b8 <col:9> 'bool' lvalue ->_read_status 0x55670cd6a560
|       | `-ImplicitCastExpr 0x55670cdb7098 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55670cdb7088 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55670cdb7160 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55670cdb7140 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55670cdb7128 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55670cdb70e8 <col:25> 'int' lvalue Var 0x55670cdb62e8 'read_status' 'int'
|           `-IntegerLiteral 0x55670cdb7108 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55670cd8f5f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55670cd8f090 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55670cd8f108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55670cd8f558 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55670cd8f1c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55670cd8f248 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55670cd8f2c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55670cd8f410 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55670cdb7fa8 <col:87, line:821:5>
|     |-DeclStmt 0x55670cdb7250 <line:809:9, col:26>
|     | `-VarDecl 0x55670cdb71e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55670cdb7320 <line:810:9, col:29>
|     | `-VarDecl 0x55670cdb7280 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55670cdb7308 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55670cdb72e8 <col:28> 'int' 1
|     |-DeclStmt 0x55670cdb7568 <line:811:9, col:38>
|     | `-VarDecl 0x55670cdb7450 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55670cdb7540 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55670cdb74c8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55670cdb7520 <col:29> 'Vector<T>' lvalue ParmVar 0x55670cd8f410 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55670cdb7e58 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55670cdb7e78 <line:812:16, col:61>
|     | | `-VarDecl 0x55670cdb7590 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55670cdb7770 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55670cdb7740 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55670cdb7728 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55670cdb7708 <col:29, col:61> 'String' (CXXTemporary 0x55670cdb7708)
|     | |           `-CXXMemberCallExpr 0x55670cdb7698 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55670cdb7608 <col:29> '<bound member function type>' ->find 0x55670cda7e28
|     | |             | `-CXXThisExpr 0x55670cdb75f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55670cdb76d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb7638 <col:34> 'const char *' lvalue ParmVar 0x55670cd8f1c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55670cdb76e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55670cdb7658 <col:43> 'int' lvalue ParmVar 0x55670cd8f248 'flags' 'int'
|     | |             `-DeclRefExpr 0x55670cdb7678 <col:50> 'Args::Slot *' lvalue Var 0x55670cdb71e8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55670cdb7828 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55670cdb7810 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55670cdb77f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55670cdb77c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55670cab33f8
|     | |       `-ImplicitCastExpr 0x55670cdb77a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55670cdb7788 <col:23> 'String' lvalue Var 0x55670cdb7590 'str' 'String'
|     | `-CompoundStmt 0x55670cdb7e20 <col:64, line:819:9>
|     |   |-DeclStmt 0x55670cdb78e8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55670cdb7850 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55670cdb78c8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55670cdb7a68 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55670cdb7910 <col:13> '<bound member function type>' ->postparse 0x55670cda8038
|     |   | | `-CXXThisExpr 0x55670cdb7900 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55670cdb7a10 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55670cdb7960 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55670cdb7940 <col:23> 'P' lvalue ParmVar 0x55670cd8f2c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55670cdb79a8 <col:36> 'String' lvalue Var 0x55670cdb7590 'str' 'String'
|     |   | | |-DeclRefExpr 0x55670cdb79c8 <col:41> 'T' lvalue Var 0x55670cdb7850 'sx' 'T'
|     |   | | `-UnaryOperator 0x55670cdb79f8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55670cdb79e8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55670cdb7a48 <col:53> 'Args::Slot *' lvalue Var 0x55670cdb71e8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55670cdb7bc0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55670cdb7af8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55670cdb7ac8 <col:17> 'bool' lvalue ->_read_status 0x55670cd6a560
|     |   | |   `-ImplicitCastExpr 0x55670cdb7aa8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55670cdb7a98 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55670cdb7b98 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55670cdb7b30 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55670cdb7b10 <col:17> 'Vector<T> *' lvalue Var 0x55670cdb7450 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55670cdb7b78 <col:30> 'T' lvalue Var 0x55670cdb7850 'sx' 'T'
|     |   |-BinaryOperator 0x55670cdb7d40 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55670cdb7bd8 <col:13> 'int' lvalue Var 0x55670cdb7280 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55670cdb7d28 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55670cdb7d08 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55670cdb7c70 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55670cdb7c50 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55670cdb7c38 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55670cdb7bf8 <col:28> 'int' lvalue Var 0x55670cdb7280 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55670cdb7c18 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55670cdb7cf0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55670cdb7cc0 <col:49> 'bool' lvalue ->_read_status 0x55670cd6a560
|     |   |         `-ImplicitCastExpr 0x55670cdb7ca0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55670cdb7c90 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55670cdb7df0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55670cdb7d60 <col:13> 'int' lvalue ParmVar 0x55670cd8f248 'flags' 'int'
|     |     `-UnaryOperator 0x55670cdb7dd8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55670cdb7dc0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55670cdb7da0 <col:23> 'const int' lvalue Var 0x55670cd75f78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55670cdb7f88 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55670cdb7ec0 <col:9> 'bool' lvalue ->_read_status 0x55670cd6a560
|       | `-ImplicitCastExpr 0x55670cdb7ea0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55670cdb7e90 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55670cdb7f68 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55670cdb7f48 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55670cdb7f30 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55670cdb7ef0 <col:25> 'int' lvalue Var 0x55670cdb7280 'read_status' 'int'
|           `-IntegerLiteral 0x55670cdb7f10 <col:40> 'int' 1
|-AccessSpecDecl 0x55670cd8f670 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55670cd8f698 prev 0x55670cd742b0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55670cd8f790 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55670cd8f880 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55670cdb7fe0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55670cd8f970 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55670cdb7ff0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55670cd8fa70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55670cd8fb20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55670cd8fbc8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55670cd8fbc8
| | `-ParmVarDecl 0x55670cd8fcd8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55670cd90498 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55670cd90498
|   `-ParmVarDecl 0x55670cd905a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55670cd8fd48 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55670cd8fea8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55670cd900a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55670cd8ff50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55670cd8ffc8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55670cdb81d0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55670cd90358 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55670cdb8040 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55670cdb8000 <col:20> 'void *' lvalue ParmVar 0x55670cd8ff50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55670cd903c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55670cdb80c8 <col:32, col:45> 'char *' array Function 0x55670c8cb0c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55670cdb80b0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55670cdb8080 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55670cd8ffc8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55670cd90420 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55670cdb8190 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55670cdb8150 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55670cd8ffc8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55670cdb8250 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55670cd901a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55670cd8f970 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55670cdb82d8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55670cdb82b8 <line:840:13, col:22> 'void' array Function 0x55670c8cb428 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55670cdb82a0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55670cdb8270 <col:22> 'char *' lvalue ->_slot 0x55670cd903c0
| |         `-CXXThisExpr 0x55670cdb8260 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55670cd902a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55670cd8fa70 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55670cdb84c8 <col:22, line:844:9>
| |   `-CallExpr 0x55670cdb8430 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55670cdb8418 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55670cdb83f8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55670ca08fe8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55670cdb8468 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55670cdb8348 <col:20> 'void *' lvalue ->_ptr 0x55670cd90358
| |     |   `-CXXThisExpr 0x55670cdb8338 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55670cdb8498 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55670cdb8480 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55670cdb8388 <col:26> 'char *' lvalue ->_slot 0x55670cd903c0
| |     |     `-CXXThisExpr 0x55670cdb8378 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55670cdb84b0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55670cdb83c8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55670cd90420
| |         `-CXXThisExpr 0x55670cdb83b8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55670cd90358 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55670cd903c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55670cd90420 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55670cd90618 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55670cd90618
| | `-ParmVarDecl 0x55670cd90728 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55670cd907c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55670cd907c8
|   `-ParmVarDecl 0x55670cd908d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55670cd90a78 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55670cd90948 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55670cd909e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55670cd90d10 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55670cd90f08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55670cd90dd8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55670cd91088 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55670cdb8500 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55670cdb84e0 <col:20> 'T *' lvalue ParmVar 0x55670cd90dd8 'ptr' 'T *'
|   | `-CompoundStmt 0x55670cdb8550 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55670cd90fd8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55670cd8fa70 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55670cdb8700 <col:22, line:857:9>
|   |   `-CallExpr 0x55670cdb86d0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55670cdb8560 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55670ca9b578 0x55670ca45298
|   |     |-CXXOperatorCallExpr 0x55670cdb8660 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55670cdb85f0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55670cca1878 0x55670cca1498 0x55670cca10c8 0x55670cca0ce8 0x55670cca0908 0x55670cca0538
|   |     | `-MemberExpr 0x55670cdb85c0 <col:29> 'T *' lvalue ->_ptr 0x55670cd91088
|   |     |   `-CXXThisExpr 0x55670cdb85b0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55670cdb86a0 <col:35> 'T' lvalue ->_slot 0x55670cd910e8
|   |       `-CXXThisExpr 0x55670cdb8690 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55670cd91088 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55670cd910e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55670cd91150 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55670cd91250 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55670cd912a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cd91230 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55670cd91210 <col:31> 'int' 48
|-FieldDecl 0x55670cd912c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55670cd91328 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55670cd91388 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55670cd914c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55670cda6660 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55670cda66c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55670cda6770 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55670cda7a08 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55670cda7910 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55670cda7b58 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55670cda7ac8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55670cda7e28 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55670cda7c18 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55670cda7c98 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55670cda7d40 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55670cda8038 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55670cda7ef0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55670cda7f68 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55670cda8108 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55670cda8258 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55670cda81c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55670cda85e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55670cda8318 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55670cda8398 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55670cda8440 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55670cda84f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55670cda8810 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55670cda86c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55670cda8738 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55670cda8b28 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55670cda88c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55670cda8a88 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55670cda8998 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b6598 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55670c9b66c8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55670c9b6728 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55670c9b6788 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x55670c9b67e8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b6970 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55670c9b6ae0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55670c9b6ac0 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55670c9b6a88 <col:28> 'int' 4
`-FieldDecl 0x55670c9b6b88 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x55670c9b6b68 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x55670c9b6b30 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b6478 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9b6598 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55670c9b66c8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55670c9b6728 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55670c9b6788 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x55670c9b67e8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9b68a8 <line:18:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55670c9b6920 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55670c9b6970 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55670c9b6ae0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55670c9b6ac0 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55670c9b6a88 <col:28> 'int' 4
| `-FieldDecl 0x55670c9b6b88 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x55670c9b6b68 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x55670c9b6b30 <col:27> 'int' 4
`-FieldDecl 0x55670c9b6c48 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon.2 = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b62d0 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9b63e8 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55670c9b6478 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55670c9b6598 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55670c9b66c8 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55670c9b6728 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55670c9b6788 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x55670c9b67e8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x55670c9b68a8 <line:18:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55670c9b6920 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55670c9b6970 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55670c9b6ae0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55670c9b6ac0 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55670c9b6a88 <col:28> 'int' 4
| | `-FieldDecl 0x55670c9b6b88 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x55670c9b6b68 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x55670c9b6b30 <col:27> 'int' 4
| `-FieldDecl 0x55670c9b6c48 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x55670c9b6df8 <line:17:5, line:39:7> col:7 ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55670c9b6e80 <line:40:5, col:21> col:21 ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55670c9b6ef0 <line:41:5, col:21> col:21 ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp6
         0 |   uint8_t icmp6_type
         1 |   uint8_t icmp6_code
         2 |   uint16_t icmp6_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp6_redirect
         0 |   uint8_t icmp6_type
         1 |   uint8_t icmp6_code
         2 |   uint16_t icmp6_cksum
         4 |   uint32_t padding
         8 |   struct in6_addr icmp6_target
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr icmp6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670caa42a0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670caa43b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55670caa4448 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55670caa4518 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55670caa4600 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55670caa4818 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55670caa46c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa49c8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55670caa48d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55670caa4b10 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55670caa4a80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55670caa4c58 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55670caa4bc8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa4da0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55670caa4d10 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa6ef0 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55670caa7038 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55670caa6fa8 <col:28> col:31 'int'
|-CXXMethodDecl 0x55670caa7100 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55670caa7248 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55670caa71b8 <col:28> col:31 'int'
|-CXXMethodDecl 0x55670caa73c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55670caa7300 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa7510 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55670caa7480 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa75d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55670caa7798 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55670caa7688 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55670caa7700 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa79e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55670caa7858 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670caa78d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55670caa7a98 <col:86> "" ""
|-CXXMethodDecl 0x55670caa7d08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55670caa7b78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55670caa7bf0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa7eb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55670caa7dc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55670caa8068 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55670caa7f70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55670caa8338 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55670caa8120 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55670caa8198 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55670caa8210 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa8618 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55670caa8400 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55670caa8478 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670caa84f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55670caa86d0 <col:115> "" ""
|-AccessSpecDecl 0x55670caa8740 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55670caa8778 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670caa8c28 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55670caa8c28
| `-ParmVarDecl 0x55670caa8d38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55670caa8dd8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55670caa8dd8
| `-ParmVarDecl 0x55670caa8ee8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55670caddd68 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55670cccb790 <col:7>
|-CXXConstructorDecl 0x55670cadde40 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55670cadde40
| `-ParmVarDecl 0x55670caddf58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55670caddfc8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55670caddfc8
| `-ParmVarDecl 0x55670cade0d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55670ccce1a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670ccba320 prev 0x55670ccac430 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670ccba418 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55670ccba508 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55670ccba638 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55670ccba7b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55670ccba938 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55670ccbaab8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55670cccb8f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55670cccc168 <col:11>
|-CXXDestructorDecl 0x55670cccb9d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55670cccbb08 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55670cccbb08
| `-ParmVarDecl 0x55670cccbc18 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55670cccbcb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55670cccbcb8
| `-ParmVarDecl 0x55670cccbdc8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55670ccceb98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55670ccceca8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55670cccef28 <col:11>
|   `-ReturnStmt 0x55670cccef18 <col:11>
|     `-UnaryOperator 0x55670cccef00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55670ccceef0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55670ccced18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55670ccced18
  `-ParmVarDecl 0x55670cccee28 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670ccbab20 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670ccbac38 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55670ccbacd8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55670ccbad40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55670ccbada8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55670ccbae10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55670ccbae70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55670ccbaf30 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55670ccbaf90 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55670ccbaff0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55670cccb808 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55670ccbacd8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55670cccc178 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55670cccc1d0 <col:12>
|-CXXConstructorDecl 0x55670cccbe38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55670cccbe38
| `-ParmVarDecl 0x55670cccbf48 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55670cccbfe8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55670cccbfe8
| `-ParmVarDecl 0x55670cccc0f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55670ccce280 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cca5ad0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55670cca5be8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55670cca5c78 <col:16, col:22> col:16 public
|-EnumDecl 0x55670cca5ca0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55670cca5da0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55670cca5e80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cca5d80 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55670cca5d60 <col:21> 'int' 28
| `-EnumConstantDecl 0x55670cca5e30 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55670cca5e98 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670cca5e10 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55670cca5df0 <col:22> 'int' 64
|-CXXMethodDecl 0x55670cca61d8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55670cca5ec0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670cca5f40 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55670cca5fb8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670cca6030 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca6298 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55670cca6498 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55670cca6310 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55670cca6388 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca6548 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55670cca66a8 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55670cca65b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca6750 <col:72> warn_unused_result ""
|-TypedefDecl 0x55670cca6a80 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55670cca6a10 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55670cca69b0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55670cca6970 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55670c7774e0 'void'
|       |-PointerType 0x55670c9b02b0 'unsigned char *'
|       | `-BuiltinType 0x55670c7775e0 'unsigned char'
|       |-TypedefType 0x55670c81d170 'size_t' sugar
|       | |-Typedef 0x55670c7e7be0 'size_t'
|       | `-BuiltinType 0x55670c777640 'unsigned long'
|       `-PointerType 0x55670c777ce0 'void *'
|         `-BuiltinType 0x55670c7774e0 'void'
|-CXXMethodDecl 0x55670cca6ef8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55670cca6af0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55670cca6b68 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670cca6c00 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55670cca6c80 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55670ccbc480 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55670ccbc468 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55670ccbc430 <col:58> 'int' 0
| |-ParmVarDecl 0x55670cca6d00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55670ccbc4a8 <col:76> 'int' 0
| |-ParmVarDecl 0x55670cca6d80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55670ccbc4c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55670cca6fc8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55670cca7048 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55670cca7108 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55670cca71a8 <col:20>
| `-OptimizeNoneAttr 0x55670cca7200 <col:30>
|-CXXMethodDecl 0x55670cca7278 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55670cca7318 <col:20>
| `-OptimizeNoneAttr 0x55670cca7370 <col:30>
|-CXXMethodDecl 0x55670cca73e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55670cca7488 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55670cca7538 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55670cca75d8 <col:20>
| |-OptimizeNoneAttr 0x55670cca7630 <col:30>
| `-WarnUnusedResultAttr 0x55670cca7658 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55670cca76b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55670cca7750 <col:20>
| `-OptimizeNoneAttr 0x55670cca77a8 <col:30>
|-CXXMethodDecl 0x55670cca7830 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55670cca78d0 <col:20>
| `-OptimizeNoneAttr 0x55670cca7928 <col:30>
|-CXXMethodDecl 0x55670cca7970 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55670cca7a10 <col:20>
| `-OptimizeNoneAttr 0x55670cca7a68 <col:30>
|-CXXMethodDecl 0x55670cca7ab0 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cca7b70 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cca7c38 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55670cca7d00 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55670cca7dc0 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cca7ed8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55670ccbc590 <col:54, line:99:5>
|   `-ReturnStmt 0x55670ccbc580 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55670ccbc568 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55670ccbc538 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55670ccbb328
|         `-CXXThisExpr 0x55670ccbc528 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55670cca8078 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55670cca7f88 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55670ccbc640 <col:67, line:103:5>
|   `-BinaryOperator 0x55670ccbc620 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55670ccbc5b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55670ccbb328
|     | `-CXXThisExpr 0x55670ccbc5a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55670ccbc608 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccbc5e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55670cca7f88 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55670cca8170 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55670ccbc6c0 <col:33, line:107:5>
|   `-ReturnStmt 0x55670ccbc6b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55670ccbc698 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55670ccbc668 <col:16> 'void *' lvalue ->_destructor_argument 0x55670ccbb390
|         `-CXXThisExpr 0x55670ccbc658 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55670cca8230 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55670ccbccf0 <col:25, line:113:5>
|   |-ParenExpr 0x55670ccbca38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55670ccbca08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccbc778 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55670ccbc750 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55670ccbc718 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55670ccbc6e8 <col:24> '<bound member function type>' ->shared 0x55670cca7278
|   |   |       `-ImplicitCastExpr 0x55670ccbc738 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55670ccbc6d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55670ccbc7d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccbc7b8 <col:42> 'int' 0
|   |   `-CallExpr 0x55670ccbc968 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55670ccbc950 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccbc930 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccbc9a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccbc848 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55670ccbc9c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccbc870 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccbc9d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccbc8a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55670ccbc9f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccbc918 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccbc900 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccbc8c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55670ccbcc38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55670ccbca68 <col:2> 'unsigned char *' lvalue ->_head 0x55670ccbb130
|   | | `-CXXThisExpr 0x55670ccbca58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55670ccbcc20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55670ccbcc00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55670ccbcaa8 <col:10> 'unsigned char *' lvalue ->_data 0x55670ccbb198
|   |     | `-CXXThisExpr 0x55670ccbca98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55670ccbcbe8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55670ccbcbc8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55670ccbcae8 <col:18> 'unsigned char *' lvalue ->_tail 0x55670ccbb200
|   |         | `-CXXThisExpr 0x55670ccbcad8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55670ccbcbb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55670ccbcb90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55670ccbcb28 <col:26> 'unsigned char *' lvalue ->_end 0x55670ccbb268
|   |             | `-CXXThisExpr 0x55670ccbcb18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55670ccbcb78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55670ccbcb58 <col:33> 'int' 0
|   `-BinaryOperator 0x55670ccbccd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55670ccbcc68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55670ccbb328
|     | `-CXXThisExpr 0x55670ccbcc58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55670ccbccb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55670ccbcc98 <col:16> 'int' 0
|-CXXMethodDecl 0x55670cca8370 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55670cca82e0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670cca8418 <col:20>
| |-OptimizeNoneAttr 0x55670cca8470 <col:30>
| `-WarnUnusedResultAttr 0x55670cca8498 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55670cca8568 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55670cca84d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670cca8610 <col:20>
| |-OptimizeNoneAttr 0x55670cca8668 <col:30>
| `-WarnUnusedResultAttr 0x55670cca8690 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55670cca87c8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55670cca86d0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca8870 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55670cca8970 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55670cca88e0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670cca8a18 <col:20>
| `-OptimizeNoneAttr 0x55670cca8a70 <col:30>
|-CXXMethodDecl 0x55670cca8b38 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55670cca8aa8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca8be0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55670cca8ce0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55670cca8c50 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55670cca8d88 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55670cca8e88 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55670cca8df8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670cca8f30 <col:20>
| `-OptimizeNoneAttr 0x55670cca8f88 <col:30>
|-CXXMethodDecl 0x55670cca9118 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55670cca8fc8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55670cca9040 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55670ccbc4e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55670cca91c8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55670cca93c8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55670cca9240 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55670cca92b8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670cca95d8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55670cca9488 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55670cca9500 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670cca97e8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55670cca9698 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55670cca9718 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55670ccbc4f8 <col:39> 'int' 0
|-CXXMethodDecl 0x55670cca98b8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55670cca9980 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55670cca9a48 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55670cca9b08 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55670cca9bd0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55670cca9d18 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55670cca9c88 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55670cca9ee8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55670cca9dd8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55670cca9e50 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670cca9fb8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55670ccaa078 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55670ccaa118 <col:20>
| `-OptimizeNoneAttr 0x55670ccaa170 <col:30>
|-CXXMethodDecl 0x55670ccaa1c0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55670ccaa260 <col:20>
| `-OptimizeNoneAttr 0x55670ccaa2b8 <col:30>
|-CXXMethodDecl 0x55670ccaa308 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55670ccaa3c8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55670ccaa490 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55670ccaa530 <col:20>
| `-OptimizeNoneAttr 0x55670ccaa588 <col:30>
|-CXXMethodDecl 0x55670ccaa6d8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55670ccaa5c8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55670ccaa640 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670ccaa828 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55670ccaa798 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670ccaa8f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55670ccaa9b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55670ccaaa50 <col:20>
| `-OptimizeNoneAttr 0x55670ccaaaa8 <col:30>
|-CXXMethodDecl 0x55670ccaaaf8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55670ccaab98 <col:20>
| `-OptimizeNoneAttr 0x55670ccaabf0 <col:30>
|-CXXMethodDecl 0x55670ccaac40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55670ccaad08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55670ccaada8 <col:20>
| `-OptimizeNoneAttr 0x55670ccaae00 <col:30>
|-CXXMethodDecl 0x55670ccaae48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55670ccaaf68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55670ccab0d8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55670ccab018 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55670ccab1c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55670ccab268 <col:20>
| `-OptimizeNoneAttr 0x55670ccab2c0 <col:30>
|-CXXMethodDecl 0x55670ccab310 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55670ccab3d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55670ccab608 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55670ccab480 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55670ccab4f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670ccab6b8 <col:20>
| `-OptimizeNoneAttr 0x55670ccab710 <col:30>
|-CXXMethodDecl 0x55670ccab840 <line:312:5, col:70> col:57 used ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55670ccab8e0 <col:20>
| `-OptimizeNoneAttr 0x55670ccab938 <col:30>
|-CXXMethodDecl 0x55670ccab988 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55670ccaba28 <col:20>
| `-OptimizeNoneAttr 0x55670ccaba80 <col:30>
|-CXXMethodDecl 0x55670ccabac8 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55670ccabb68 <col:20>
| `-OptimizeNoneAttr 0x55670ccabbc0 <col:30>
|-CXXMethodDecl 0x55670ccabcb8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55670ccabbf8 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55670ccabd60 <col:20>
| `-OptimizeNoneAttr 0x55670ccabdb8 <col:30>
|-CXXMethodDecl 0x55670ccabf78 <line:316:5, col:95> col:45 used set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55670ccabdf0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55670ccabe68 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670ccac028 <col:20>
| `-OptimizeNoneAttr 0x55670ccac080 <col:30>
|-CXXMethodDecl 0x55670ccac128 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55670ccac248 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55670ccac368 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55670ccac408 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55670ccac430 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55670ccac558 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55670ccac5f8 <col:20>
| `-OptimizeNoneAttr 0x55670ccac650 <col:30>
|-CXXMethodDecl 0x55670ccac6f8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55670ccac798 <col:20>
| `-OptimizeNoneAttr 0x55670ccac7f0 <col:30>
|-AccessSpecDecl 0x55670ccac818 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55670ccac840 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55670ccac940 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55670ccac990 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccac920 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55670ccac900 <col:14> 'int' 48
|-CXXMethodDecl 0x55670ccac9f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55670ccaca98 <col:20>
| `-OptimizeNoneAttr 0x55670ccacaf0 <col:30>
|-CXXMethodDecl 0x55670ccacb68 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55670ccacc08 <col:20>
| `-OptimizeNoneAttr 0x55670ccacc60 <col:30>
|-CXXMethodDecl 0x55670ccacd28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55670ccacc98 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55670ccacec8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55670ccad068 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55670ccacf78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55670ccad110 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55670ccad210 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad5c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad1f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55670ccad1d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55670ccad2a0 <line:370:2, col:14> col:2 referenced BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad5d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad280 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55670ccad260 <col:14> 'int' 1
| |-EnumConstantDecl 0x55670ccad330 <line:372:2, col:14> col:2 referenced MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad5f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad310 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55670ccad2f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55670ccad3c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad608 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad3a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55670ccad380 <col:14> 'int' 3
| |-EnumConstantDecl 0x55670ccad450 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad620 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad430 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55670ccad410 <col:13> 'int' 4
| |-EnumConstantDecl 0x55670ccad4e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55670ccad638 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccad4c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55670ccad4a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55670ccad570 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55670ccad650 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccad550 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55670ccad530 <col:14> 'int' 6
|-CXXMethodDecl 0x55670ccad6b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55670ccad758 <col:20>
| `-OptimizeNoneAttr 0x55670ccad7b0 <col:30>
|-CXXMethodDecl 0x55670ccad8a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55670ccad7e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55670ccad950 <col:20>
| `-OptimizeNoneAttr 0x55670ccad9a8 <col:30>
|-CXXMethodDecl 0x55670ccada18 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55670ccadb40 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55670ccadcb8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55670ccadbf0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55670ccadd80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55670ccade48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55670ccadf88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55670ccadef8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55670ccae030 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55670ccae130 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55670ccae330 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccae110 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55670ccae0f0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55670ccae1c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55670ccae348 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccae1a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55670ccae180 <col:45> 'int' 4
| |-EnumConstantDecl 0x55670ccae250 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55670ccae360 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccae230 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55670ccae210 <col:24> 'int' 0
| `-EnumConstantDecl 0x55670ccae2e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55670ccae378 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccae2c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55670ccae2a0 <col:47> 'int' 16
|-CXXMethodDecl 0x55670ccae3d8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55670ccae548 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55670ccae488 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55670ccae5f0 <col:20>
| `-OptimizeNoneAttr 0x55670ccae648 <col:30>
|-CXXMethodDecl 0x55670ccae698 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55670ccc5128 <col:18, col:36>
|   `-ReturnStmt 0x55670ccc5118 <col:20, col:33>
|     `-ImplicitCastExpr 0x55670ccc5100 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55670ccc50e0 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55670ccc50b0 <col:27> '<bound member function type>' ->xanno 0x55670ccac6f8
|           `-CXXThisExpr 0x55670ccbcd88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55670ccae790 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55670ccc5238 <col:30, col:48>
|   `-ReturnStmt 0x55670ccc5228 <col:32, col:45>
|     `-ImplicitCastExpr 0x55670ccc5210 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55670ccc51f0 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55670ccc51c0 <col:39> '<bound member function type>' ->xanno 0x55670ccac558
|           `-CXXThisExpr 0x55670ccc51b0 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55670ccae878 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55670ccc53d0 <col:24, col:50>
|   `-ReturnStmt 0x55670ccc53c0 <col:26, col:47>
|     `-UnaryOperator 0x55670ccc53a8 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670ccc5388 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55670ccc5370 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670ccc5320 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55670ccba638
|         |   `-CXXMemberCallExpr 0x55670ccc5300 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55670ccc52d0 <col:34> '<bound member function type>' ->xanno 0x55670ccac6f8
|         |       `-CXXThisExpr 0x55670ccc52c0 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55670ccc5350 <col:46> 'int' 0
|-CXXMethodDecl 0x55670ccae968 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55670ccc55a8 <col:36, col:62>
|   `-ReturnStmt 0x55670ccc5598 <col:38, col:59>
|     `-UnaryOperator 0x55670ccc5580 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670ccc5560 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55670ccc5548 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670ccc54b8 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55670ccba638
|         |   `-CXXMemberCallExpr 0x55670ccc5498 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55670ccc5468 <col:46> '<bound member function type>' ->xanno 0x55670ccac558
|         |       `-CXXThisExpr 0x55670ccc5458 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55670ccc54e8 <col:58> 'int' 0
|-CXXMethodDecl 0x55670ccaea88 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55670ccc5740 <col:26, col:53>
|   `-ReturnStmt 0x55670ccc5730 <col:28, col:50>
|     `-UnaryOperator 0x55670ccc5718 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670ccc56f8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55670ccc56e0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670ccc5690 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55670ccba938
|         |   `-CXXMemberCallExpr 0x55670ccc5670 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55670ccc5640 <col:36> '<bound member function type>' ->xanno 0x55670ccac6f8
|         |       `-CXXThisExpr 0x55670ccc5630 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55670ccc56c0 <col:49> 'int' 0
|-CXXMethodDecl 0x55670ccaeba8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55670ccc5918 <col:38, col:65>
|   `-ReturnStmt 0x55670ccc5908 <col:40, col:62>
|     `-UnaryOperator 0x55670ccc58f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55670ccc58d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55670ccc58b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670ccc5828 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55670ccba938
|         |   `-CXXMemberCallExpr 0x55670ccc5808 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55670ccc57d8 <col:48> '<bound member function type>' ->xanno 0x55670ccac558
|         |       `-CXXThisExpr 0x55670ccc57c8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55670ccc5858 <col:61> 'int' 0
|-CXXMethodDecl 0x55670ccaed58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55670ccaec60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55670ccc5fe8 <col:34, line:463:5>
|   |-ParenExpr 0x55670ccc5e30 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55670ccc5e00 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc5a68 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc5a38 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc5988 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc5970 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc5930 <col:23> 'int' lvalue ParmVar 0x55670ccaec60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc5950 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc5a18 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc59e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc59a8 <col:33> 'int' lvalue ParmVar 0x55670ccaec60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55670ccc5a00 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55670ccc59c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55670ccc5ac8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc5aa8 <col:56> 'int' 0
|   |   `-CallExpr 0x55670ccc5d60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc5d48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc5d28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc5da0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc5bb8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55670ccc5db8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc5be8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc5dd0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc5c20 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55670ccc5de8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc5d10 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc5cf8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc5cb8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55670ccc5fd8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55670ccc5fc0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55670ccc5fa0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55670ccc5f70 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55670ccc5f20 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55670ccba638
|         |   `-CXXMemberCallExpr 0x55670ccc5f00 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55670ccc5ed0 <col:9> '<bound member function type>' ->xanno 0x55670ccac558
|         |       `-CXXThisExpr 0x55670ccc5ec0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55670ccc5f88 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55670ccc5f50 <col:21> 'int' lvalue ParmVar 0x55670ccaec60 'i' 'int'
|-CXXMethodDecl 0x55670ccaefa8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55670ccaee18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55670ccaee90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55670ccc6678 <col:40, line:472:5>
|   |-ParenExpr 0x55670ccc6490 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55670ccc6460 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc6140 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc6110 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc6060 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc6048 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc6008 <col:23> 'int' lvalue ParmVar 0x55670ccaee18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc6028 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc60f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc60c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc6080 <col:33> 'int' lvalue ParmVar 0x55670ccaee18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55670ccc60d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55670ccc60a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55670ccc61a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc6180 <col:56> 'int' 0
|   |   `-CallExpr 0x55670ccc63c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc63a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc6388 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc6400 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc6210 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55670ccc6418 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc6240 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc6430 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc6278 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55670ccc6448 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc6370 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc6358 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc6318 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55670ccc6658 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55670ccc6600 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55670ccc65d0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55670ccc6580 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55670ccba638
|     | |   `-CXXMemberCallExpr 0x55670ccc6560 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55670ccc6530 <col:2> '<bound member function type>' ->xanno 0x55670ccac6f8
|     | |       `-CXXThisExpr 0x55670ccc6520 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55670ccc65e8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55670ccc65b0 <col:14> 'int' lvalue ParmVar 0x55670ccaee18 'i' 'int'
|     `-ImplicitCastExpr 0x55670ccc6640 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccc6620 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55670ccaee90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55670ccaf168 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55670ccaf070 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55670ccc6df8 <col:36, line:485:5>
|   |-ParenExpr 0x55670ccc6b60 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc6b30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc6810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc67e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc66f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc66d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc6698 <col:23> 'int' lvalue ParmVar 0x55670ccaf070 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc66b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc67c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc67a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc6710 <col:33> 'int' lvalue ParmVar 0x55670ccaf070 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc6788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc6770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc6730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc6750 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55670ccc6870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc6850 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc6a90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc6a78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc6a58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc6ad0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc68e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55670ccc6ae8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc6918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc6b00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc6950 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55670ccc6b18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc6a40 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc6a28 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc69e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55670ccc6de8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55670ccc6dd0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55670ccc6db8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670ccc6d88 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55670ccc6d28 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670ccc6cf8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670ccc6c70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670ccc6c50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670ccc6c20 <col:61> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670ccc6c10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670ccc6d10 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670ccc6ca0 <col:74> 'int' lvalue ParmVar 0x55670ccaf070 'i' 'int'
|-CXXMethodDecl 0x55670ccaf3b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55670ccaf228 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55670ccaf2a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55670ccc7548 <col:42, line:500:5>
|   |-ParenExpr 0x55670ccc72e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc72b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc6f90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc6f60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc6e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc6e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc6e18 <col:23> 'int' lvalue ParmVar 0x55670ccaf228 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc6e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc6f40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc6f28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc6e90 <col:33> 'int' lvalue ParmVar 0x55670ccaf228 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc6f08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc6ef0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc6eb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc6ed0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55670ccc6ff0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc6fd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc7210 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc71f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc71d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc7250 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc7060 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55670ccc7268 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc7098 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc7280 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc70d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55670ccc7298 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc71c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc71a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc7168 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55670ccc7528 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55670ccc74d8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55670ccc74a8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55670ccc7450 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55670ccc7420 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55670ccc73d0 <col:48, col:57> 'char [48]' lvalue ->c 0x55670ccba508
|     |     |   `-CXXMemberCallExpr 0x55670ccc73b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55670ccc7380 <col:48> '<bound member function type>' ->xanno 0x55670ccac6f8
|     |     |       `-CXXThisExpr 0x55670ccc7370 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55670ccc7438 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55670ccc7400 <col:61> 'int' lvalue ParmVar 0x55670ccaf228 'i' 'int'
|     `-ImplicitCastExpr 0x55670ccc7510 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccc74f0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55670ccaf2a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55670ccaf578 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55670ccaf480 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55670ccc7ca8 <col:35, line:513:5>
|   |-ParenExpr 0x55670ccc79b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc7988 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc76e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc76b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc75c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc75a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc7568 <col:23> 'int' lvalue ParmVar 0x55670ccaf480 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc7588 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc7690 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc7678 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc75e0 <col:33> 'int' lvalue ParmVar 0x55670ccaf480 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc7658 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc7640 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc7600 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc7620 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55670ccc7740 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc7720 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc78e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc78d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc78b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc7928 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc77b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55670ccc7940 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc77e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc7958 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc7820 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55670ccc7970 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc7898 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc7880 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc7840 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55670ccc7c98 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55670ccc7c80 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55670ccc7c68 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670ccc7c38 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55670ccc7bb0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670ccc7b80 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670ccc7b30 <col:60, col:69> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670ccc7b10 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670ccc7ae0 <col:60> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670ccc7ad0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670ccc7b98 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670ccc7b60 <col:73> 'int' lvalue ParmVar 0x55670ccaf480 'i' 'int'
|-CXXMethodDecl 0x55670ccaffc0 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55670ccaf638 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55670ccaf6b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55670ccc83b8 <col:41, line:528:5>
|   |-ParenExpr 0x55670ccc8150 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc8120 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc7e40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc7e10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc7d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc7d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc7cc8 <col:23> 'int' lvalue ParmVar 0x55670ccaf638 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc7ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc7df0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc7dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc7d40 <col:33> 'int' lvalue ParmVar 0x55670ccaf638 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc7db8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc7da0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc7d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc7d80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55670ccc7ea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc7e80 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc8080 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc8068 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc8048 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc80c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc7f10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55670ccc80d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc7f48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc80f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc7f80 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55670ccc8108 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc8030 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc8018 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc7fd8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55670ccc8398 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55670ccc8348 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55670ccc8318 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55670ccc82c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55670ccc8290 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55670ccc8240 <col:47, col:56> 'char [48]' lvalue ->c 0x55670ccba508
|     |     |   `-CXXMemberCallExpr 0x55670ccc8220 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55670ccc81f0 <col:47> '<bound member function type>' ->xanno 0x55670ccac6f8
|     |     |       `-CXXThisExpr 0x55670ccc81e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55670ccc82a8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55670ccc8270 <col:60> 'int' lvalue ParmVar 0x55670ccaf638 'i' 'int'
|     `-ImplicitCastExpr 0x55670ccc8380 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccc8360 <col:65> 'int16_t':'short' lvalue ParmVar 0x55670ccaf6b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55670ccb0178 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55670ccb0088 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55670ccc8a88 <col:36, line:541:5>
|   |-ParenExpr 0x55670ccc8828 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc87f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc8550 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc8520 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc8430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc8418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc83d8 <col:23> 'int' lvalue ParmVar 0x55670ccb0088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc83f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc8500 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc84e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc8450 <col:33> 'int' lvalue ParmVar 0x55670ccb0088 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc84c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc84b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc8470 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc8490 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55670ccc85b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc8590 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc8758 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc8740 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc8720 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc8798 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc8620 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55670ccc87b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc8658 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc87c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc8690 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55670ccc87e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc8708 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc86f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc86b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55670ccc8a78 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55670ccc8a60 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55670ccc8a48 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670ccc8a18 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55670ccc89c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670ccc8990 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670ccc8940 <col:61, col:70> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670ccc8920 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670ccc88f0 <col:61> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670ccc88e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670ccc89a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670ccc8970 <col:74> 'int' lvalue ParmVar 0x55670ccb0088 'i' 'int'
|-CXXMethodDecl 0x55670ccb0348 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55670ccb0238 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55670ccb02b0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55670ccb03f8 <col:20>
| `-OptimizeNoneAttr 0x55670ccb0450 <col:30>
|-CXXMethodDecl 0x55670ccb0588 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55670ccb0490 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55670ccc9168 <col:35, line:562:5>
|   |-ParenExpr 0x55670ccc8ef8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc8ec8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc8c20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc8bf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc8b00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc8ae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc8aa8 <col:23> 'int' lvalue ParmVar 0x55670ccb0490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc8ac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc8bd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc8bb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc8b20 <col:33> 'int' lvalue ParmVar 0x55670ccb0490 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc8b98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc8b80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc8b40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc8b60 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55670ccc8c80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc8c60 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc8e28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc8e10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc8df0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc8e68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc8cf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55670ccc8e80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc8d28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc8e98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc8d60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55670ccc8eb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc8dd8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc8dc0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc8d80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55670ccc9158 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55670ccc9140 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55670ccc9128 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670ccc90f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55670ccc9090 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670ccc9060 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670ccc9010 <col:60, col:69> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670ccc8ff0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670ccc8fc0 <col:60> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670ccc8fb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670ccc9078 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670ccc9040 <col:73> 'int' lvalue ParmVar 0x55670ccb0490 'i' 'int'
|-CXXMethodDecl 0x55670ccb0798 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55670ccb0648 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55670ccb06c0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55670ccc9848 <col:41, line:577:5>
|   |-ParenExpr 0x55670ccc95d8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc95a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc9300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc92d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc91e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc91c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc9188 <col:23> 'int' lvalue ParmVar 0x55670ccb0648 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc91a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc92b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc9298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc9200 <col:33> 'int' lvalue ParmVar 0x55670ccb0648 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc9278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc9260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc9220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc9240 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55670ccc9360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc9340 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc9508 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc94f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc94d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc9548 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc93d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55670ccc9560 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc9408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc9578 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc9440 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55670ccc9590 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc94b8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc94a0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc9460 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55670ccc9828 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55670ccc97d8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55670ccc97a8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55670ccc9748 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55670ccc9718 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55670ccc96c8 <col:47, col:56> 'char [48]' lvalue ->c 0x55670ccba508
|     |     |   `-CXXMemberCallExpr 0x55670ccc96a8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55670ccc9678 <col:47> '<bound member function type>' ->xanno 0x55670ccac6f8
|     |     |       `-CXXThisExpr 0x55670ccc9668 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55670ccc9730 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55670ccc96f8 <col:60> 'int' lvalue ParmVar 0x55670ccb0648 'i' 'int'
|     `-ImplicitCastExpr 0x55670ccc9810 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccc97f0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55670ccb06c0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55670ccb0958 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55670ccb0860 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55670ccc9f78 <col:36, line:591:5>
|   |-ParenExpr 0x55670ccc9cb8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccc9c88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccc99e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccc99b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc98c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc98a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc9868 <col:23> 'int' lvalue ParmVar 0x55670ccb0860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc9888 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccc9990 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccc9978 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccc98e0 <col:33> 'int' lvalue ParmVar 0x55670ccb0860 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccc9958 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccc9940 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccc9900 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccc9920 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55670ccc9a40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccc9a20 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccc9be8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccc9bd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccc9bb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccc9c28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc9ab0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55670ccc9c40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccc9ae8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccc9c58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccc9b20 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55670ccc9c70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccc9b98 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccc9b80 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccc9b40 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55670ccc9f68 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55670ccc9f50 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55670ccc9f38 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670ccc9f08 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55670ccc9e80 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670ccc9e50 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670ccc9e00 <col:61, col:70> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670ccc9de0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670ccc9db0 <col:61> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670ccc9da0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670ccc9e68 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670ccc9e30 <col:74> 'int' lvalue ParmVar 0x55670ccb0860 'i' 'int'
|-CXXMethodDecl 0x55670ccb0ba8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55670ccb0a18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55670ccb0a90 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55670ccca658 <col:42, line:606:5>
|   |-ParenExpr 0x55670ccca3e8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55670ccca3b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccca110 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccca0e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccc9ff0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccc9fd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccc9f98 <col:23> 'int' lvalue ParmVar 0x55670ccb0a18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccc9fb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccca0c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55670ccca0a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccca010 <col:33> 'int' lvalue ParmVar 0x55670ccb0a18 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccca088 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccca070 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccca030 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55670ccca050 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55670ccca170 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccca150 <col:60> 'int' 0
|   |   `-CallExpr 0x55670ccca318 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55670ccca300 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670ccca2e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670ccca358 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccca1e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55670ccca370 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccca218 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670ccca388 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670ccca250 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55670ccca3a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670ccca2c8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670ccca2b0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670ccca270 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55670ccca638 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55670ccca5e8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55670ccca5b8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55670ccca558 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55670ccca528 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55670ccca4d8 <col:48, col:57> 'char [48]' lvalue ->c 0x55670ccba508
|     |     |   `-CXXMemberCallExpr 0x55670ccca4b8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55670ccca488 <col:48> '<bound member function type>' ->xanno 0x55670ccac6f8
|     |     |       `-CXXThisExpr 0x55670ccca478 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55670ccca540 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55670ccca508 <col:61> 'int' lvalue ParmVar 0x55670ccb0a18 'i' 'int'
|     `-ImplicitCastExpr 0x55670ccca620 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55670ccca600 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55670ccb0a90 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55670ccb0d40 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55670ccb0c70 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55670cccaec8 <col:33, line:620:5>
|   |-ParenExpr 0x55670cccac40 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55670cccac10 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55670ccca860 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670ccca830 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670ccca6d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670ccca6b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670ccca678 <col:23> 'int' lvalue ParmVar 0x55670ccb0c70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670ccca698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670ccca810 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55670ccca7f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670ccca6f0 <col:33> 'int' lvalue ParmVar 0x55670ccb0c70 'i' 'int'
|   |   |     `-BinaryOperator 0x55670ccca7d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670ccca7c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670ccca710 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55670ccca798 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55670ccca780 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55670ccca748 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55670ccca8c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670ccca8a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55670cccab70 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55670cccab58 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670cccab38 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670cccabb0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccca9a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55670cccabc8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670ccca9f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670cccabe0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670cccaa28 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55670cccabf8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670cccab20 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670cccab08 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670cccaac8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55670cccaeb8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55670cccaea0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55670cccae88 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55670cccae58 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55670cccadd0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55670cccada0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55670cccad50 <col:67, col:76> 'char const[48]' lvalue ->c 0x55670ccba508
|             |   `-CXXMemberCallExpr 0x55670cccad30 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55670cccad00 <col:67> '<bound member function type>' ->xanno 0x55670ccac558
|             |       `-CXXThisExpr 0x55670cccacf0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55670cccadb8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55670cccad80 <col:80> 'int' lvalue ParmVar 0x55670ccb0c70 'i' 'int'
|-CXXMethodDecl 0x55670ccb0f58 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55670ccb0e00 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55670ccb0e80 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55670cccb6f0 <col:45, line:635:5>
|   |-ParenExpr 0x55670cccb438 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55670cccb408 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55670cccb0d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55670cccb0a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55670cccaf40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55670cccaf28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55670cccaee8 <col:23> 'int' lvalue ParmVar 0x55670ccb0e00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55670cccaf08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55670cccb080 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55670cccb068 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55670cccaf60 <col:33> 'int' lvalue ParmVar 0x55670ccb0e00 'i' 'int'
|   |   |     `-BinaryOperator 0x55670cccb048 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55670cccb030 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55670cccaf80 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55670ccac940 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55670cccb008 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55670cccaff0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55670cccafb8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55670cccb130 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55670cccb110 <col:79> 'int' 0
|   |   `-CallExpr 0x55670cccb368 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55670cccb350 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55670cccb330 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55670c813ed0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55670cccb3a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670cccb1a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55670cccb3c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55670cccb1e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55670cccb3d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55670cccb220 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55670cccb3f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55670cccb318 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55670cccb300 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55670cccb2b8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55670cccb6d0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55670cccb638 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55670cccb608 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55670cccb5a8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55670cccb578 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55670cccb528 <col:54, col:63> 'char [48]' lvalue ->c 0x55670ccba508
|     |     |   `-CXXMemberCallExpr 0x55670cccb508 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55670cccb4d8 <col:54> '<bound member function type>' ->xanno 0x55670ccac6f8
|     |     |       `-CXXThisExpr 0x55670cccb4c8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55670cccb590 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55670cccb558 <col:67> 'int' lvalue ParmVar 0x55670ccb0e00 'i' 'int'
|     `-CXXConstCastExpr 0x55670cccb6a0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55670cccb688 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55670cccb650 <col:91> 'const void *' lvalue ParmVar 0x55670ccb0e80 'x' 'const void *'
|-CXXMethodDecl 0x55670ccb1028 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55670cccb778 <col:34, line:640:5>
|   `-ReturnStmt 0x55670cccb768 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55670cccb750 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55670cccb720 <col:16> 'Packet *' lvalue ->_data_packet 0x55670ccbb0c8
|         `-CXXThisExpr 0x55670cccb710 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55670ccb1168 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55670ccb10d8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55670ccbc518 <col:46> 'bool' true
|-CXXMethodDecl 0x55670ccb12e8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55670ccb1220 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55670ccb1390 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55670ccb1b40 <line:660:22> "" ""
| |-EnumConstantDecl 0x55670ccb1490 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1470 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55670ccb1450 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55670cca5da0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55670ccb1520 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1bc8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1500 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55670ccb14e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55670cca5e30 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55670ccb15b0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1590 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55670ccb1570 <col:21> 'int' 0
| |-EnumConstantDecl 0x55670ccb1640 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1620 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55670ccb1600 <col:19> 'int' 16
| |-EnumConstantDecl 0x55670ccb16d0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb16b0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55670ccb1690 <col:21> 'int' 16
| |-EnumConstantDecl 0x55670ccb1760 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1740 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55670ccb1720 <col:19> 'int' 32
| |-EnumConstantDecl 0x55670ccb17f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c40 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb17d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55670ccb17b0 <col:19> 'int' EnumConstant 0x55670ccb1640 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55670ccb1880 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1860 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55670ccb1840 <col:19> 'int' EnumConstant 0x55670ccb1760 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55670ccb1950 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c70 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1930 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55670ccb1910 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55670ccb18d0 <col:23> 'int' EnumConstant 0x55670ccb1880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55670ccb18f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55670ccb1a20 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55670ccb1c88 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670ccb1a00 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55670ccb19e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55670ccb19a0 <col:23> 'int' EnumConstant 0x55670ccb1880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55670ccb19c0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55670ccb1af0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55670ccb1ca0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55670ccb1ad0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55670ccb1ab0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55670ccb1a70 <col:23> 'int' EnumConstant 0x55670ccb1880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55670ccb1a90 <col:40> 'int' 8
|-CXXMethodDecl 0x55670ccb1ce0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55670ccb1d80 <col:68> "" ""
|-CXXMethodDecl 0x55670ccb1e18 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55670ccb1eb8 <col:45> "" ""
|-CXXMethodDecl 0x55670ccb1f50 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55670ccb1ff0 <col:57> "" ""
|-CXXMethodDecl 0x55670ccb2088 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55670ccb2128 <col:45> "" ""
|-CXXMethodDecl 0x55670ccb21c0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55670ccb2260 <col:57> "" ""
|-CXXMethodDecl 0x55670ccb22f0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55670ccb2390 <col:51> "" ""
|-CXXMethodDecl 0x55670ccb2420 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55670ccb24c0 <col:63> "" ""
|-CXXMethodDecl 0x55670ccb2550 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55670ccb25f0 <col:53> "" ""
|-CXXMethodDecl 0x55670ccb2680 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55670ccb2720 <col:65> "" ""
|-CXXMethodDecl 0x55670ccb2838 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55670ccb27a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55670ccb28e0 <col:61> "" ""
|-CXXMethodDecl 0x55670ccb2a78 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55670ccb2968 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55670ccb29e0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55670ccb2b28 <col:67> "" ""
|-CXXMethodDecl 0x55670ccb2c40 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55670ccb2bb0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55670ccb2ce8 <col:63> "" ""
|-CXXMethodDecl 0x55670ccb2e80 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55670ccb2d70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55670ccb2de8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55670ccb2f30 <col:69> "" ""
|-CXXMethodDecl 0x55670ccb3048 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55670ccb2fb8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55670ccb30f0 <col:63> "" ""
|-CXXMethodDecl 0x55670ccb3288 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55670ccb3178 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55670ccb31f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55670ccb3338 <col:69> "" ""
|-CXXMethodDecl 0x55670ccb3450 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55670ccb33c0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55670ccb34f8 <col:62> "" ""
|-CXXMethodDecl 0x55670ccb3690 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55670ccb3580 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55670ccb35f8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55670ccb3740 <col:68> "" ""
|-CXXMethodDecl 0x55670ccb3858 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55670ccb37c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55670ccb3900 <col:63> "" ""
|-CXXMethodDecl 0x55670ccb3a98 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55670ccb3988 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55670ccb3a00 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55670ccb3b48 <col:69> "" ""
|-CXXMethodDecl 0x55670ccb3bd8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55670ccb3c78 <col:64> "" ""
|-CXXMethodDecl 0x55670ccb3d08 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55670ccb3da8 <col:52> "" ""
|-CXXMethodDecl 0x55670ccb3e38 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55670ccb3ed8 <col:67> "" ""
|-CXXMethodDecl 0x55670ccb8dc0 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55670ccb8e60 <col:55> "" ""
|-CXXMethodDecl 0x55670ccb8f78 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55670ccb8ee8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55670ccb9020 <col:58> "" ""
|-CXXMethodDecl 0x55670ccb91b8 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55670ccb90a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55670ccb9120 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55670ccb9268 <col:62> "" ""
|-CXXMethodDecl 0x55670ccb9380 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55670ccb92f0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55670ccb9428 <col:58> "" ""
|-CXXMethodDecl 0x55670ccb95c0 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55670ccb94b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55670ccb9528 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55670ccb9670 <col:62> "" ""
|-CXXMethodDecl 0x55670ccb9788 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55670ccb96f8 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55670ccb9830 <col:60> "" ""
|-CXXMethodDecl 0x55670ccb99c8 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55670ccb98b8 <col:34> col:37 'int'
| |-ParmVarDecl 0x55670ccb9930 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55670ccb9a78 <col:64> "" ""
|-CXXMethodDecl 0x55670ccb9b90 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55670ccb9b00 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55670ccb9c38 <col:58> "" ""
|-CXXMethodDecl 0x55670ccb9dd0 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55670ccb9cc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55670ccb9d38 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55670ccb9e80 <col:62> "" ""
|-CXXMethodDecl 0x55670ccb9f98 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55670ccb9f08 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55670ccba040 <col:59> "" ""
|-CXXMethodDecl 0x55670ccba1d8 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55670ccba0c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55670ccba140 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55670ccba288 <col:63> "" ""
|-AccessSpecDecl 0x55670ccba2f8 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55670ccba320 prev 0x55670ccac430 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55670ccba418 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55670ccba508 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55670ccba638 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55670ccba7b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55670ccba938 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55670ccbaab8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55670cccb8f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55670cccc168 <col:11>
| |-CXXDestructorDecl 0x55670cccb9d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55670cccbb08 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55670cccbb08
| | `-ParmVarDecl 0x55670cccbc18 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55670cccbcb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55670cccbcb8
| | `-ParmVarDecl 0x55670cccbdc8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55670ccceb98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55670ccceca8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55670cccef28 <col:11>
| |   `-ReturnStmt 0x55670cccef18 <col:11>
| |     `-UnaryOperator 0x55670cccef00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55670ccceef0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55670ccced18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55670ccced18
|   `-ParmVarDecl 0x55670cccee28 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55670ccbab20 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55670ccbac38 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55670ccbacd8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55670ccbad40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55670ccbada8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55670ccbae10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55670ccbae70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55670ccbaf30 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55670ccbaf90 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55670ccbaff0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55670cccb808 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55670ccbacd8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55670cccc178 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55670cccc1d0 <col:12>
| |-CXXConstructorDecl 0x55670cccbe38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55670cccbe38
| | `-ParmVarDecl 0x55670cccbf48 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55670cccbfe8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55670cccbfe8
| | `-ParmVarDecl 0x55670cccc0f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55670ccce280 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55670ccbb068 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55670ccbb0c8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55670ccbb130 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55670ccbb198 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55670ccbb200 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55670ccbb268 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55670ccbb2c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55670ccbb328 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55670ccbb390 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55670ccbb418 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55670ccbb068 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55670cccb7a0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55670ccbb2c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55670cccc1e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55670cccc240 <col:21, line:755:5>
|-CXXConstructorDecl 0x55670ccbb5b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55670ccbb4f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55670ccbb6b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55670ccbb898 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55670ccbb7a0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55670ccbbb68 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55670ccbb950 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670ccbb9c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55670ccbba40 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670ccbbd88 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55670ccbbc38 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55670ccbbcb0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55670ccbc058 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55670ccbbe48 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55670ccbbec0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55670ccbbf38 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55670ccbc1b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55670ccbc120 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670ccbc2f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55670ccbc268 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55670ccbc3f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cccc250 prev 0x55670cca5a20 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55670cccc388 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55670cccc418 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55670cccc4c0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55670cccc560 <col:20>
| `-OptimizeNoneAttr 0x55670cccc5b8 <col:30>
|-CXXMethodDecl 0x55670cccc608 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55670cccc6a8 <col:20>
| `-OptimizeNoneAttr 0x55670cccc700 <col:30>
|-CXXMethodDecl 0x55670cccc750 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55670cccc818 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55670cccc8e0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55670cccc9f8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55670ccccac0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55670ccccb60 <col:20>
| `-OptimizeNoneAttr 0x55670ccccbb8 <col:30>
|-CXXMethodDecl 0x55670ccccc28 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55670cccccc8 <col:20>
| `-OptimizeNoneAttr 0x55670ccccd20 <col:30>
|-CXXMethodDecl 0x55670ccccdc8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55670cccce68 <col:20>
| `-OptimizeNoneAttr 0x55670ccccec0 <col:30>
|-CXXMethodDecl 0x55670ccccf10 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55670cccd0d0 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55670cccd1e8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55670cccd308 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55670cccd3d0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55670cccd470 <col:62> "" ""
|-AccessSpecDecl 0x55670cccd4e0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55670cccd540 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55670ccce138 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55670ccce360 <col:29, col:31>
|-CXXMethodDecl 0x55670cccd608 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55670cccd748 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55670cccd6b8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55670cccd840 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55670ccce370 <col:23, col:25>
|-CXXMethodDecl 0x55670cccd9f8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55670cccd930 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55670cccdcc8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55670cccdab0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55670cccdb28 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55670cccdba0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55670cccde58 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55670cccdd90 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55670cccdf50 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55670cccdfb8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55670cccdfb8
  `-ParmVarDecl 0x55670ccce0c8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b7f00 <../dummy_inc/clicknet/icmp6.h:50:1, line:56:1> line:50:8 referenced struct click_icmp6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9b98d0 <col:1, col:8> col:8 implicit struct click_icmp6
|-FieldDecl 0x55670c9b9970 <line:51:5, col:13> col:13 referenced icmp6_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9b99d0 <line:52:5, col:13> col:13 referenced icmp6_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9b9a30 <line:53:5, col:14> col:14 referenced icmp6_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55670c9b9a90 <line:54:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp6 = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp6 = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp6_pkttoobig
         0 |   uint8_t icmp6_type
         1 |   uint8_t icmp6_code
         2 |   uint16_t icmp6_cksum
         4 |   uint32_t icmp6_mtusize
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b9af8 <../dummy_inc/clicknet/icmp6.h:59:1, line:65:1> line:59:8 referenced struct click_icmp6_pkttoobig definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9b9c18 <col:1, col:8> col:8 implicit struct click_icmp6_pkttoobig
|-FieldDecl 0x55670c9b9cb8 <line:60:5, col:13> col:13 icmp6_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9b9d18 <line:61:5, col:13> col:13 icmp6_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9b9d78 <line:62:5, col:14> col:14 icmp6_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55670c9b9dd8 <line:63:5, col:14> col:14 referenced icmp6_mtusize 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp6_pkttoobig = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp6_pkttoobig = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp6_paramprob
         0 |   uint8_t icmp6_type
         1 |   uint8_t icmp6_code
         2 |   uint16_t icmp6_cksum
         4 |   uint32_t icmp6_pointer
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9b9e40 <../dummy_inc/clicknet/icmp6.h:68:1, line:74:1> line:68:8 referenced struct click_icmp6_paramprob definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9b9f58 <col:1, col:8> col:8 implicit struct click_icmp6_paramprob
|-FieldDecl 0x55670c9b9ff8 <line:69:5, col:13> col:13 icmp6_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9ba058 <line:70:5, col:13> col:13 icmp6_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9ba0b8 <line:71:5, col:14> col:14 icmp6_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55670c9ba118 <line:72:5, col:14> col:14 referenced icmp6_pointer 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp6_paramprob = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp6_paramprob = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670c9ba8c0 <../dummy_inc/clicknet/icmp6.h:100:1, line:107:1> line:100:8 referenced struct click_icmp6_redirect definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55670c9ba9d8 <col:1, col:8> col:8 implicit struct click_icmp6_redirect
|-FieldDecl 0x55670c9baa78 <line:101:5, col:13> col:13 icmp6_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9baad8 <line:102:5, col:13> col:13 icmp6_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55670c9bab38 <line:103:5, col:14> col:14 icmp6_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x55670c9bab98 <line:104:5, col:14> col:14 padding 'uint32_t':'unsigned int'
|-FieldDecl 0x55670c9bac08 <line:105:5, col:21> col:21 referenced icmp6_target 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55670c9bac78 <line:106:5, col:21> col:21 referenced icmp6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp6_redirect = type { i8, i8, i16, i32, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_icmp6_redirect = type { i8, i8, i16, i32, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cd292a8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cd293c8 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x55670cd29670 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55670cd29468 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x55670cd294e0 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x55670cd29558 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55670cd29cc8 <col:33> 'const ArgContext' lvalue Var 0x55670cd00740 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55670cd29908 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55670cd29738 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55670cd297b0 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x55670cd29828 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55670cd29ce8 <col:34> 'const ArgContext' lvalue Var 0x55670cd00740 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55670cd29bf8 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55670cd299d0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55670cd29a60 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x55670cd29ad8 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55670cd29d08 <col:34> 'const ArgContext' lvalue Var 0x55670cd00740 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55670cd29ec8 <col:46, line:381:5>
|   `-ReturnStmt 0x55670cd29eb8 <line:380:9, col:71>
|     `-CallExpr 0x55670cd29e80 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x55670cd29e68 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55670cd29e18 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x55670cd29908 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x55670cd29d78 <col:22> 'const String' lvalue ParmVar 0x55670cd299d0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55670cd29dc8 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x55670cd29d98 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x55670cd29a60 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x55670cd29df8 <col:67> 'const ArgContext' lvalue ParmVar 0x55670cd29ad8 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x55670cc978d8 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55670cc979b0 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55670cc97ae8 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x55670cc97ae8
| `-ParmVarDecl 0x55670cc97bf8 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x55670cc97c98 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55670cc97da8 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x55670cc98a00 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cd2b050 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x55670cd2b2a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55670cc977e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55670cc97e18 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x55670cc97e18
| `-ParmVarDecl 0x55670cc97f28 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x55670cc97fc8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cc980d8 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x55670cc98a10 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55670cc989e0 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x55670cc989b0 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x55670cc98980 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x55670cc980d8 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x55670cc98a80 <col:19>
`-CXXDestructorDecl 0x55670cc98178 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cdc2c20 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55670cdc2d38 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55670cdc2dc8 <col:16, col:22> col:16 public
|-EnumDecl 0x55670cdc2df0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55670cdc2ef0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55670cdc3140 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdc2ed0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55670cdc2eb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55670cdc2f80 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55670cdc3158 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdc2f60 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55670cdc2f40 <col:24> 'int' 22
| |-EnumConstantDecl 0x55670cdc3010 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55670cdc3170 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdc2ff0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55670cdc2fd0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55670cdc30a0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55670cdc3188 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55670cdc3080 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55670cdc3060 <col:25> 'int' 95
| `-EnumConstantDecl 0x55670cdc30f0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55670cdc4b30 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55670cdc4f68 <col:7>
|-CXXConstructorDecl 0x55670cdc4c38 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55670cdc4c38
| `-ParmVarDecl 0x55670cdc4d48 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55670cdc4de8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cdc4ef8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55670ce603c0 <col:7>
`-CXXDestructorDecl 0x55670cdc7078 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55670cdc31b8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55670cdc3318 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55670cdc33a8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55670cdc33e0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55670c8cd420 'uint32_t' sugar
|   |-Typedef 0x55670c7e04c8 'uint32_t'
|   `-TypedefType 0x55670c7b95a0 '__uint32_t' sugar
|     |-Typedef 0x55670c7b9198 '__uint32_t'
|     `-BuiltinType 0x55670c777620 'unsigned int'
|-CXXConstructorDecl 0x55670cdc3528 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55670cdc3450 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55670cdc4a38 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55670cdc4f78 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55670cdc42f0 'base' 'int'
| | `-ImplicitCastExpr 0x55670cdc4ad8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55670cdc4a98 <col:16> 'int' lvalue ParmVar 0x55670cdc3450 'b' 'int'
| `-CompoundStmt 0x55670cdc4fe8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55670cdc3a20 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55670cdc35f0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55670cdc3670 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55670cdc36e8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55670cdc3768 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55670cdc3828 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55670cdc38a8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55670cdc3e78 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55670cdc3af0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55670cdc3dd8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55670cdc3b98 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55670cdc3c38 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55670cdc3cb0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55670cdc4a58 <col:82> 'const ArgContext' lvalue Var 0x55670cdb8728 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55670cdc5f28 <col:94, line:1067:5>
| |   |-DeclStmt 0x55670cdc5178 <line:1054:9, col:64>
| |   | `-VarDecl 0x55670cdc5008 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55670cdc5130 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55670cdc5398 <line:1055:9, col:91>
| |   | `-VarDecl 0x55670cdc51a8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55670cdc5370 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55670cdc5350 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55670cdc5300 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55670cdc52e0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55670cdc5288 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55670cdc5238 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55670cdc5268 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55670cdc52c8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55670cdc52a8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55670cdc5330 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55670cdc54f8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55670cdc5490 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55670cdc5950 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55670cdc5880 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55670cdc57f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55670cd1dd98 0x55670cd00010 0x55670cc9c768 0x55670cae8148 0x55670cae7e20 0x55670cade6c0 0x55670cade370 0x55670caddc60 0x55670caaed30 0x55670ca3c000
| |   | | |-CallExpr 0x55670cdc5730 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55670cdc5520 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55670cdc55d0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55670cdc55a0 <col:19, col:23> '<bound member function type>' .begin 0x55670cac9d28
| |   | | | |   `-DeclRefExpr 0x55670cdc5580 <col:19> 'const String' lvalue ParmVar 0x55670cdc3b98 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55670cdc5640 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55670cdc5610 <col:32, col:36> '<bound member function type>' .end 0x55670cac9f40
| |   | | | |   `-DeclRefExpr 0x55670cdc55f0 <col:32> 'const String' lvalue ParmVar 0x55670cdc3b98 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55670cdc5660 <col:43> 'const bool' lvalue Var 0x55670cdc5008 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55670cdc56c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55670cdc56a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55670cdc56f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55670cdc5490 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55670cdc5710 <col:73> 'const int' lvalue Var 0x55670cdc51a8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55670cdc57d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55670cdc57a0 <col:16, col:20> '<bound member function type>' .end 0x55670cac9f40
| |   | |     `-DeclRefExpr 0x55670cdc5780 <col:16> 'const String' lvalue ParmVar 0x55670cdc3b98 'str' 'const String &'
| |   | `-BinaryOperator 0x55670cdc5930 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55670cdc58c8 <col:13> 'int' lvalue ->status 0x55670cdc4358
| |   |   | `-CXXThisExpr 0x55670cdc58b8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55670cdc5918 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55670cdc58f8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc2f80 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55670cdc5ba0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55670cdc5a88 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55670cdc5a70 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55670cdc5a58 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55670cdc5978 <col:13> 'int' lvalue ->status 0x55670cdc4358
| |   | | |     `-CXXThisExpr 0x55670cdc5968 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55670cdc5a38 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55670cdc5a08 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55670cdc59b8 <col:23> 'int' lvalue ->status 0x55670cdc4358
| |   | |   |   `-CXXThisExpr 0x55670cdc59a8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55670cdc5a20 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55670cdc59e8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55670cdc5b80 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55670cdc5b20 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55670cdc5ac8 <col:13, col:18> '<bound member function type>' .error 0x55670cd69b70
| |   |   | | `-DeclRefExpr 0x55670cdc5aa8 <col:13> 'const ArgContext' lvalue ParmVar 0x55670cdc3cb0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55670cdc5b48 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55670cdc5af8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55670cdc5b70 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55670cdc5b60 <col:20> 'bool' false
| |   |-DeclStmt 0x55670cdc5d78 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55670cdc5d20 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55670cdc5cb0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55670cdc5ed8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55670cdc5d90 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55670ca707a8
| |   | |-DeclRefExpr 0x55670cdc5dd8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55670cdc5490 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55670cdc5ea8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55670cdc5e20 <col:64> 'V' lvalue ParmVar 0x55670cdc3c38 'result' 'V &'
| |   `-ReturnStmt 0x55670cdc5f18 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55670cdc5f08 <col:16> 'bool' true
| `-CXXMethodDecl 0x55670ce67f68 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55670ce67d40 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55670ce67e18 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55670ce67e80 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55670ce69d10 <col:94, line:1067:5>
|     |-DeclStmt 0x55670ce68778 <line:1054:9, col:64>
|     | `-VarDecl 0x55670ce68598 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55670ce68708 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55670ce686d8 <col:36, col:55> 'const bool' lvalue Var 0x55670ca5fe28 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55670ce68958 <line:1055:9, col:91>
|     | `-VarDecl 0x55670ce68790 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55670ce688d8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55670ce688c0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55670ce688a0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55670ce68880 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55670ce68860 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55670ce68828 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55670ce68808 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55670cdc5268 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55670ce68848 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55670cdc52a8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55670cdc5330 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55670ce68af0 <line:1056:9, col:27>
|     | `-VarDecl 0x55670ce68a88 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55670ce68f88 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55670ce68f30 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55670ce68de8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55670ce68db8 <col:13> '<bound member function type>' ->parse 0x55670cdc3a20
|     | | | | `-CXXThisExpr 0x55670ce68da8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55670ce68c48 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55670ce68c18 <col:19, col:23> '<bound member function type>' .begin 0x55670cac9d28
|     | | | |   `-DeclRefExpr 0x55670ce68bf8 <col:19> 'const String' lvalue ParmVar 0x55670ce67d40 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55670ce68cb8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55670ce68c88 <col:32, col:36> '<bound member function type>' .end 0x55670cac9f40
|     | | | |   `-DeclRefExpr 0x55670ce68c68 <col:32> 'const String' lvalue ParmVar 0x55670ce67d40 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55670ce68e58 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55670ce68e38 <col:43> 'const bool' lvalue Var 0x55670ce68598 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55670ce68d40 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55670ce68d28 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55670ce68d08 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55670ce68e70 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55670ce68d68 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55670ce68a88 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55670ce68ea8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55670ce68e88 <col:73> 'const int' lvalue Var 0x55670ce68790 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55670ce68f10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55670ce68ee0 <col:16, col:20> '<bound member function type>' .end 0x55670cac9f40
|     | |     `-DeclRefExpr 0x55670ce68ec0 <col:16> 'const String' lvalue ParmVar 0x55670ce67d40 'str' 'const String &'
|     | `-BinaryOperator 0x55670ce68f68 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55670cdc58c8 <col:13> 'int' lvalue ->status 0x55670cdc4358
|     |   | `-CXXThisExpr 0x55670cdc58b8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55670ce68f50 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55670cdc58f8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc2f80 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55670ce69100 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55670ce69020 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55670ce69008 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55670ce68ff0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55670cdc5978 <col:13> 'int' lvalue ->status 0x55670cdc4358
|     | | |     `-CXXThisExpr 0x55670cdc5968 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55670ce68fd0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55670ce68fa0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55670cdc59b8 <col:23> 'int' lvalue ->status 0x55670cdc4358
|     | |   |   `-CXXThisExpr 0x55670cdc59a8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55670ce68fb8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55670cdc59e8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55670ce690e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55670ce69090 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55670ce69060 <col:13, col:18> '<bound member function type>' .error 0x55670cd69b70
|     |   | | `-DeclRefExpr 0x55670ce69040 <col:13> 'const ArgContext' lvalue ParmVar 0x55670ce67e80 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55670ce690b8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55670cdc5af8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55670ce690d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55670cdc5b60 <col:20> 'bool' false
|     |-DeclStmt 0x55670ce69648 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55670ce695f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55670ce695a0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55670ce69580 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55670ce69510 'type'
|     |       `-ElaboratedType 0x55670ce694c0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55670ce694a0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55670ca5ff80 'unsigned_type'
|     |           `-BuiltinType 0x55670c777620 'unsigned int'
|     |-CallExpr 0x55670ce69ca0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55670ce69c88 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55670ce69c08 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55670ce69ae8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55670ca707a8 'extract_integer')
|     | |-ImplicitCastExpr 0x55670ce69ce8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55670ce69cd0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55670ce696a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55670ce68a88 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55670ce69778 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55670ce69728 <col:64> 'int':'int' lvalue ParmVar 0x55670ce67e18 'result' 'int &'
|     `-ReturnStmt 0x55670ce69d00 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55670cdc5f08 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55670cdc4268 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55670cdc3f20 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55670cdc41c8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55670cdc3fc8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55670cdc4068 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55670cdc40e0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55670cdc4a78 <col:71> 'const ArgContext' lvalue Var 0x55670cdb8728 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55670cdc6698 <col:83, line:1083:5>
| |   |-DeclStmt 0x55670cdc5ff0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55670cdc5f88 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55670cdc6670 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55670cdc6280 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55670cdc6108 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55670cdc60d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55670cdc6018 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55670cdc6070 <col:31> 'const String' lvalue ParmVar 0x55670cdc3fc8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55670cdc6090 <col:36> 'V' lvalue Var 0x55670cdc5f88 'x' 'V'
| |     | |   `-DeclRefExpr 0x55670cdc60b0 <col:39> 'const ArgContext' lvalue ParmVar 0x55670cdc40e0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55670cdc6260 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55670cdc6240 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55670cdc6228 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55670cdc6210 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55670cdc6130 <col:17> 'int' lvalue ->status 0x55670cdc4358
| |     |     |     `-CXXThisExpr 0x55670cdc6120 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55670cdc61f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55670cdc61c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55670cdc6170 <col:27> 'int' lvalue ->status 0x55670cdc4358
| |     |       |   `-CXXThisExpr 0x55670cdc6160 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55670cdc61d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55670cdc61a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55670cdc62b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55670cdc62a0 <col:20> 'bool' false
| |     `-IfStmt 0x55670cdc6648 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55670cdc6350 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55670cdc6320 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55670cdc62d0 <col:18> 'int' lvalue ->status 0x55670cdc4358
| |       | |   `-CXXThisExpr 0x55670cdc62c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55670cdc6338 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55670cdc6300 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55670cdc6588 <col:42, line:1079:9>
| |       | |-CallExpr 0x55670cdc6530 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55670cdc6380 <line:1076:13> '<bound member function type>' ->range_error 0x55670cdc4968
| |       | | | `-CXXThisExpr 0x55670cdc6370 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55670cdc63b0 <col:25> 'const ArgContext' lvalue ParmVar 0x55670cdc40e0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55670cdc6490 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55670cdc6508 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55670cdc64e8 <col:43> 'V' lvalue Var 0x55670cdc5f88 'x' 'V'
| |       | `-ReturnStmt 0x55670cdc6578 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55670cdc6568 <col:20> 'bool' false
| |       `-CompoundStmt 0x55670cdc6628 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55670cdc65e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55670cdc65a8 <col:13> 'V' lvalue ParmVar 0x55670cdc4068 'result' 'V &'
| |         | `-DeclRefExpr 0x55670cdc65c8 <col:22> 'V' lvalue Var 0x55670cdc5f88 'x' 'V'
| |         `-ReturnStmt 0x55670cdc6618 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55670cdc6608 <col:20> 'bool' true
| `-CXXMethodDecl 0x55670ce67928 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55670ce67700 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55670ce677d8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55670ce67840 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55670ce68578 <col:83, line:1083:5>
|     |-DeclStmt 0x55670ce67bb0 <line:1071:9, col:12>
|     | `-VarDecl 0x55670ce67b48 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55670ce68550 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55670ce681e0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55670ce68108 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55670ce680d0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55670ce68088 <col:14> '<bound member function type>' ->parse_saturating 0x55670ce67f68
|       | |   | `-CXXThisExpr 0x55670ce68078 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55670ce67c20 <col:31> 'const String' lvalue ParmVar 0x55670ce67700 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55670ce67c40 <col:36> 'int':'int' lvalue Var 0x55670ce67b48 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55670ce67c60 <col:39> 'const ArgContext' lvalue ParmVar 0x55670ce67840 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55670ce681c0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55670ce681a0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55670ce68188 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55670ce68170 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55670cdc6130 <col:17> 'int' lvalue ->status 0x55670cdc4358
|       |     |     `-CXXThisExpr 0x55670cdc6120 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55670ce68150 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55670ce68120 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55670cdc6170 <col:27> 'int' lvalue ->status 0x55670cdc4358
|       |       |   `-CXXThisExpr 0x55670cdc6160 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55670ce68138 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55670cdc61a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55670ce68200 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55670cdc62a0 <col:20> 'bool' false
|       `-IfStmt 0x55670ce68528 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55670ce68240 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55670ce68210 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55670cdc62d0 <col:18> 'int' lvalue ->status 0x55670cdc4358
|         | |   `-CXXThisExpr 0x55670cdc62c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55670ce68228 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55670cdc6300 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55670cdc3010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55670ce68460 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55670ce683d0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55670cdc6380 <line:1076:13> '<bound member function type>' ->range_error 0x55670cdc4968
|         | | | `-CXXThisExpr 0x55670cdc6370 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55670ce68260 <col:25> 'const ArgContext' lvalue ParmVar 0x55670ce67840 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55670ce68438 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55670ce68408 <col:31, col:50> 'const bool' lvalue Var 0x55670ca5fe28 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55670ce683a8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55670ce68390 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55670ce68378 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55670ce68358 <col:43> 'int':'int' lvalue Var 0x55670ce67b48 'x' 'int':'int'
|         | `-ReturnStmt 0x55670ce68450 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55670cdc6568 <col:20> 'bool' false
|         `-CompoundStmt 0x55670ce68508 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55670ce684d8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55670ce68480 <col:13> 'int':'int' lvalue ParmVar 0x55670ce677d8 'result' 'int &'
|           | `-ImplicitCastExpr 0x55670ce684c0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55670ce684a0 <col:22> 'int':'int' lvalue Var 0x55670ce67b48 'x' 'int':'int'
|           `-ReturnStmt 0x55670ce684f8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55670cdc6608 <col:20> 'bool' true
|-FieldDecl 0x55670cdc42f0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55670cdc4358 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55670cdc43a8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55670cdc4660 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55670cdc43e8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55670cdc4468 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55670cdc44e0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55670cdc4560 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55670cdc4968 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55670cdc4730 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55670cdc47a8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55670cdc4840 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55670cdc6ef8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55670cdc6ef8
| `-ParmVarDecl 0x55670cdc7008 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55670cdc7188 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670cdc7298 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55670ce603d0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55670ce603a0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55670ce60370 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55670ce60340 <col:7> 'IntArg' lvalue ParmVar 0x55670cdc7298 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55670cdc42f0 'base' 'int'
| | `-ImplicitCastExpr 0x55670ce604c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55670ce60498 <col:7> 'int' xvalue .base 0x55670cdc42f0
| |     `-CXXStaticCastExpr 0x55670ce60468 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55670ce60438 <col:7> 'IntArg' lvalue ParmVar 0x55670cdc7298 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55670cdc4358 'status' 'int'
| | `-ImplicitCastExpr 0x55670ce60598 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55670ce60568 <col:7> 'int' xvalue .status 0x55670cdc4358
| |     `-CXXStaticCastExpr 0x55670ce60538 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55670ce60508 <col:7> 'IntArg' lvalue ParmVar 0x55670cdc7298 '' 'IntArg &&'
| `-CompoundStmt 0x55670ce605f0 <col:7>
`-CXXDestructorDecl 0x55670ce5f530 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55670cdcb7c0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55670cdcba18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55670ce5f458 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55670ce5f9d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55670ce5f9b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55670ce5fa40 <col:19>
|-CXXConstructorDecl 0x55670ce5f638 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55670ce5f638
| `-ParmVarDecl 0x55670ce5f748 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55670ce5f7e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55670ce5f8f8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55670ce60600 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55670ce60320 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55670ce602f0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55670ce602c0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55670ce5f8f8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55670ce60670 <col:19>
`-CXXDestructorDecl 0x55670ce5fa80 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
