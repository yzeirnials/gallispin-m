
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e59ebb8 prev 0x555d6e596358 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e59ecb0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x555d6e59ed40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x555d6e59edb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x555d6e59ee78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x555d6e59ef40 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x555d6e59f0b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x555d6e59eff0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x555d6e59f160 <col:24>
| `-OptimizeNoneAttr 0x555d6e59f1b8 <col:34>
|-CXXMethodDecl 0x555d6e59f200 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x555d6e59f4b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x555d6e59f2b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555d6e59f328 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x555d6e59f3a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x555d6e59f570 <line:229:7, col:14> col:7 private
|-FieldDecl 0x555d6e59f5a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x555d6e59f610 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x555d6e59f698 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x555d6e59f9b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x555d6e59f750 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555d6e59f7c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x555d6e59f840 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x555d6e59f8c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x555d6e59fad0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x555d6e5a7448 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555d6e5a7448
| `-ParmVarDecl 0x555d6e5a7558 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x555d6e5a75f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555d6e5a75f8
| `-ParmVarDecl 0x555d6e5a7708 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x555d6e676b50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e591bd0 prev 0x555d6e591950 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d6e591cc8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x555d6e591d58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x555d6e591db8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x555d6e591ea8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x555d6e591fa8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x555d6e592178 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x555d6e592028 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x555d6e5920a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x555d6e592308 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x555d6e592240 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x555d6e5923b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x555d6e5924e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x555d6e592420 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x555d6e592688 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x555d6e5925c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x555d6e592828 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x555d6e592768 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x555d6e5928d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x555d6e5929d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x555d6e592ab0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5929b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x555d6e592990 <col:26> 'int' 1
| `-EnumConstantDecl 0x555d6e592a60 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x555d6e592ac8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e592a40 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x555d6e592a20 <col:44> 'int' 2
|-CXXMethodDecl 0x555d6e592c10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x555d6e592af8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x555d6e592b78 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x555d6e592d68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x555d6e592cd8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x555d6e592fa8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x555d6e592e28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x555d6e592ea0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x555d6e593058 <col:20>
| `-OptimizeNoneAttr 0x555d6e5930b0 <col:30>
|-CXXMethodDecl 0x555d6e5931b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x555d6e5930f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x555d6e593260 <col:20>
| `-OptimizeNoneAttr 0x555d6e5932b8 <col:30>
|-CXXMethodDecl 0x555d6e593308 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x555d6e5933d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x555d6e5934e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x555d6e593570 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x555d6e5935f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x555d6e593680 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x555d6e593708 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x555d6e593798 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x555d6e593858 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x555d6e5938e0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x555d6e593968 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x555d6e5939f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x555d6e593a78 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x555d6e593b00 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x555d6e593b90 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x555d6e593c50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x555d6e593ce0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x555d6e593e30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x555d6e593d98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x555d6e593fc0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x555d6e593ef0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x555d6e594270 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x555d6e594078 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x555d6e5940f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x555d6e594178 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x555d6e594328 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x555d6e594430 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d6e5946c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e594410 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e5943f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x555d6e5944c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d6e5946d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5944a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x555d6e594480 <col:32> 'int' 20
| |-EnumConstantDecl 0x555d6e594550 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d6e5946f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e594530 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x555d6e594510 <col:38> 'int' 90
| |-EnumConstantDecl 0x555d6e5945e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d6e594708 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5945c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x555d6e5945a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x555d6e594670 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x555d6e594720 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e594650 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x555d6e594630 <col:32> 'int' 2000
|-CXXMethodDecl 0x555d6e594760 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x555d6e594ba0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d6e594a10 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x555d6e594a88 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e594c70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x555d6e594df0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x555d6e594d20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e594ff8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d6e594ea8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x555d6e594f20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e5950f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x555d6e595198 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x555d6e595260 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e5952f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x555d6e595520 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5952d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x555d6e5952b0 <col:36> 'int' EnumConstant 0x555d6e595260 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e595340 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e595390 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e5953e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e595430 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d6e595480 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x555d6e5954d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x555d6e595608 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x555d6e595548 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x555d6e5956d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x555d6e595790 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x555d6e595850 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x555d6e595910 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x555d6e595a28 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x555d6e595af0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x555d6e595c70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x555d6e595ba0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x555d6e595d98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x555d6e595f98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x555d6e595e48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x555d6e595ec8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x555d6e5a38e8 <col:54, line:127:5>
|   |-ParenExpr 0x555d6e5a3798 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x555d6e5a3768 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e5a3458 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555d6e5a3430 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x555d6e5a3418 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x555d6e5a3400 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x555d6e5a33d0 <col:31> 'Router *' lvalue ->_router 0x555d6e5a12b0
|   |   |         `-CXXThisExpr 0x555d6e5a33c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555d6e5a34b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e5a3498 <col:48> 'int' 0
|   |   `-CallExpr 0x555d6e5a36c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x555d6e5a36b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e5a3690 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e5a3708 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e5a3528 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x555d6e5a3720 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e5a3548 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x555d6e5a3738 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e5a3580 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x555d6e5a3750 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e5a3678 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e5a3660 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e5a3618 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x555d6e5a3830 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x555d6e5a37c8 <col:9> 'Router *' lvalue ->_router 0x555d6e5a12b0
|   | | `-CXXThisExpr 0x555d6e5a37b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x555d6e5a3818 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d6e5a37f8 <col:19> 'Router *' lvalue ParmVar 0x555d6e595e48 'r' 'Router *'
|   `-BinaryOperator 0x555d6e5a38c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x555d6e5a3860 <col:9> 'int' lvalue ->_eindex 0x555d6e5a1318
|     | `-CXXThisExpr 0x555d6e5a3850 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x555d6e5a38b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e5a3890 <col:19> 'int' lvalue ParmVar 0x555d6e595ec8 'eindex' 'int'
|-CXXMethodDecl 0x555d6e596120 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x555d6e596058 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x555d6e5961f0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x555d6e5962b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x555d6e596358 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x555d6e5965a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x555d6e596420 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x555d6e5964a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x555d6e596658 <col:20>
| `-OptimizeNoneAttr 0x555d6e5966b0 <col:30>
|-CXXMethodDecl 0x555d6e5967b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555d6e5966f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x555d6e596860 <col:20>
| `-OptimizeNoneAttr 0x555d6e5968b8 <col:30>
|-CXXMethodDecl 0x555d6e596988 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555d6e5968f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x555d6e596a30 <col:20>
| `-OptimizeNoneAttr 0x555d6e596a88 <col:30>
|-CXXMethodDecl 0x555d6e596c18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x555d6e596ac0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x555d6e596b40 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x555d6e596da8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555d6e596ce0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555d6e596ef8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555d6e596e68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555d6e597048 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555d6e596fb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555d6e597198 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555d6e597108 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555d6e597458 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x555d6e597250 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x555d6e5972d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x555d6e597378 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x555d6e597530 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x555d6e5975f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x555d6e5978c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d6e597770 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x555d6e5977e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e5979e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x555d6e597bc0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x555d6e597aa0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x555d6e597b20 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x555d6e597da8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x555d6e597c88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x555d6e597d08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x555d6e598118 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555d6e597e68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d6e597ee0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d6e597f60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d6e5a2ed0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e5a2eb0 <col:106> 'int' 0
| `-ParmVarDecl 0x555d6e597fd8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a2f08 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a2ee8 <col:126> 'int' 0
|-CXXMethodDecl 0x555d6e5984b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d6e5981e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d6e598280 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d6e598300 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x555d6e598378 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a2f40 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a2f20 <col:114> 'int' 0
|-CXXMethodDecl 0x555d6e598848 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d6e598590 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x555d6e598608 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d6e598688 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x555d6e5a2f58 <col:96> 'int' 0
| `-ParmVarDecl 0x555d6e598700 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a2f98 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a2f78 <col:116> 'int' 0
|-CXXMethodDecl 0x555d6e598bc8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555d6e598918 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555d6e598990 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e598a10 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d6e5a2fd0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e5a2fb0 <col:109> 'int' 0
| `-ParmVarDecl 0x555d6e598a88 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a3008 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a2fe8 <col:129> 'int' 0
|-CXXMethodDecl 0x555d6e598f48 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d6e598c98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555d6e598d10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e598d90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x555d6e598e08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a3040 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a3020 <col:117> 'int' 0
|-CXXMethodDecl 0x555d6e5992d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d6e599020 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e599098 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e599118 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x555d6e5a3058 <col:99> 'int' 0
| `-ParmVarDecl 0x555d6e599190 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d6e5a3098 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d6e5a3078 <col:119> 'int' 0
|-CXXMethodDecl 0x555d6e5996f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x555d6e5993a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555d6e599428 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555d6e5994a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e599520 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d6e5a30d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e5a30b0 <col:108> 'int' 0
| `-ParmVarDecl 0x555d6e5995a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x555d6e5a3108 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x555d6e5a30e8 <col:141> 'int' 0
|-CXXMethodDecl 0x555d6e599b18 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555d6e5997d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555d6e599850 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555d6e5998c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e599948 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x555d6e5999c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555d6e5a3120 <col:121> 'int' 0
|-CXXMethodDecl 0x555d6e599f48 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555d6e599bf8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x555d6e599c78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x555d6e599cf0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e599d70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x555d6e5a3140 <col:98> 'int' 0
| `-ParmVarDecl 0x555d6e599df0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555d6e5a3160 <col:123> 'int' 0
|-CXXMethodDecl 0x555d6e59a210 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x555d6e59a020 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d6e59a0a0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x555d6e59a120 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x555d6e5a3180 <col:80> 'int' 0
|-EnumDecl 0x555d6e59a2c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x555d6e59a3d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d6e59a660 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e59a3b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x555d6e59a390 <col:42> 'int' 1
| |-EnumConstantDecl 0x555d6e59a460 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d6e59a678 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e59a440 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x555d6e59a420 <col:40> 'int' 2
| |-EnumConstantDecl 0x555d6e59a4f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d6e59a690 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e59a4d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x555d6e59a4b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x555d6e59a580 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d6e59a6a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e59a560 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x555d6e59a540 <col:36> 'int' 7
| `-EnumConstantDecl 0x555d6e59a610 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x555d6e59a6c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e59a5f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x555d6e59a5d0 <col:34> 'int' 6
|-CXXMethodDecl 0x555d6e59a978 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x555d6e59a6e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x555d6e59a788 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x555d6e59a808 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x555d6e59a880 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x555d6e5a3238 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x555d6e5a3220 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x555d6e5a3208 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x555d6e5a31e8 <col:98, col:105> 'String' (CXXTemporary 0x555d6e5a31e8)
|           `-CXXTemporaryObjectExpr 0x555d6e5a31b0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x555d6e59ac18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x555d6e59aa48 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555d6e59aac0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x555d6e59ab38 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555d6e5a32e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555d6e5a32d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555d6e5a32b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555d6e5a3298 <col:94, col:101> 'String' (CXXTemporary 0x555d6e5a3298)
| |         `-CXXTemporaryObjectExpr 0x555d6e5a3260 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x555d6e5a3ad0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x555d6e5a3a48 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x555d6e5a3a18 <col:9> '<bound member function type>' ->add_task_handlers 0x555d6e59a978
|     | `-CXXThisExpr 0x555d6e5a3a08 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555d6e5a3a88 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d6e5a3988 <col:27> 'Task *' lvalue ParmVar 0x555d6e59aa48 'task' 'Task *'
|     |-ImplicitCastExpr 0x555d6e5a3aa0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d6e5a39a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x555d6e59aac0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x555d6e5a3ab8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555d6e5a39c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555d6e59a610 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555d6e5a39e8 <col:62> 'const String' lvalue ParmVar 0x555d6e59ab38 'prefix' 'const String &'
|-CXXMethodDecl 0x555d6e59ae28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x555d6e59ace0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555d6e59ad58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555d6e5a3398 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555d6e5a3380 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555d6e5a3368 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555d6e5a3348 <col:70, col:77> 'String' (CXXTemporary 0x555d6e5a3348)
| |         `-CXXTemporaryObjectExpr 0x555d6e5a3310 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x555d6e5a3ca8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x555d6e5a3c20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x555d6e5a3bf0 <col:9> '<bound member function type>' ->add_task_handlers 0x555d6e59a978
|     | `-CXXThisExpr 0x555d6e5a3be0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555d6e5a3c60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d6e5a3b60 <col:27> 'Task *' lvalue ParmVar 0x555d6e59ace0 'task' 'Task *'
|     |-ImplicitCastExpr 0x555d6e5a3c78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x555d6e5a3b80 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x555d6e5a3c90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555d6e5a3ba0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555d6e59a610 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555d6e5a3bc0 <col:57> 'const String' lvalue ParmVar 0x555d6e59ad58 'prefix' 'const String &'
|-CXXMethodDecl 0x555d6e59b108 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x555d6e59aef0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59af70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59afe8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x555d6e59b3b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x555d6e59b1d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59b258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59b2d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x555d6e59b6a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555d6e59b488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59b508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59b580 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x555d6e59b958 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x555d6e59b778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59b7f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59b878 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x555d6e59bc08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x555d6e59ba28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59baa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59bb28 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x555d6e59beb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x555d6e59bcd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59bd58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59bdd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x555d6e59c168 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x555d6e59bf88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59c008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59c088 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x555d6e59c478 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x555d6e59c290 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59c310 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59c390 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x555d6e59c758 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x555d6e59c548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59c5c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59c670 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x555d6e59ca38 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x555d6e59c828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59c8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59c950 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x555d6e59cca0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555d6e59cb08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555d6e59cb88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555d6e59cc00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x555d6e59cf48 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x555d6e59cd70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555d6e59cdf0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555d6e59ce68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x555d6e59d1f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x555d6e59d018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59d098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59d118 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x555d6e59d4a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x555d6e59d2c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59d348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59d3c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x555d6e59d758 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x555d6e59d578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59d5f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59d670 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x555d6e59da28 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x555d6e59d828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59d8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d6e59d948 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x555d6e59dd58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x555d6e59daf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d6e59db78 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x555d6e59dbf0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x555d6e59dc68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d6e5a33b0 <col:93> 'bool' false
|-CXXMethodDecl 0x555d6e59df40 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d6e59de28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x555d6e59dea8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x555d6e59e118 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d6e59e000 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x555d6e59e080 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x555d6e59e3f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555d6e59e1d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x555d6e59e250 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x555d6e59e2d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x555d6e59e348 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e59e6e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555d6e59e4c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x555d6e59e540 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x555d6e59e5c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x555d6e59e638 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e59e920 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x555d6e59e7c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x555d6e59e840 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x555d6e59eb08 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x555d6e59e9e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x555d6e59ea68 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x555d6e59ebb8 prev 0x555d6e596358 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d6e59ecb0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x555d6e59ed40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x555d6e59edb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x555d6e59ee78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x555d6e59ef40 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x555d6e59f0b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x555d6e59eff0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x555d6e59f160 <col:24>
| | `-OptimizeNoneAttr 0x555d6e59f1b8 <col:34>
| |-CXXMethodDecl 0x555d6e59f200 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x555d6e59f4b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x555d6e59f2b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555d6e59f328 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x555d6e59f3a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x555d6e59f570 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x555d6e59f5a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x555d6e59f610 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x555d6e59f698 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x555d6e59f9b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x555d6e59f750 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555d6e59f7c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x555d6e59f840 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x555d6e59f8c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x555d6e59fad0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x555d6e5a7448 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555d6e5a7448
| | `-ParmVarDecl 0x555d6e5a7558 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x555d6e5a75f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555d6e5a75f8
| | `-ParmVarDecl 0x555d6e5a7708 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x555d6e676b50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555d6e59fb48 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x555d6e59fbe8 <col:38> "" ""
|-CXXMethodDecl 0x555d6e59fc78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x555d6e59fd18 <col:44> "" ""
|-AccessSpecDecl 0x555d6e59fd88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x555d6e59fdb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x555d6e59feb0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x555d6e59ff00 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e59fe90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x555d6e59fe70 <col:27> 'int' 4
|-FieldDecl 0x555d6e59ffb8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x555d6e5a0168 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x555d6e5a0220 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x555d6e5a12b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x555d6e5a1318 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x555d6e5a1468 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x555d6e5a13a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x555d6e5a1618 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x555d6e5a1528 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x555d6e5a17f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x555d6e5a16d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x555d6e5a1758 <col:25> col:28 'int'
|-CXXMethodDecl 0x555d6e5a1aa0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e5a18c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x555d6e5a1940 <col:28> col:31 'int'
| `-ParmVarDecl 0x555d6e5a19b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x555d6e5a1b58 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x555d6e5a1c20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x555d6e5a1c70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x555d6e5a1cc0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x555d6e5a1ea0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x555d6e5a1d50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x555d6e5a1dc8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e5a2148 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x555d6e5a1f68 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x555d6e5a1fe8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x555d6e5a2060 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e5a2368 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x555d6e5a2218 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x555d6e5a2298 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x555d6e5a26a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x555d6e5a2428 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x555d6e5a24a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x555d6e5a2520 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x555d6e5a25a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x555d6e5a2888 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d6e5a2770 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x555d6e5a27f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x555d6e5a29d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x555d6e5a2948 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x555d6e5a2d58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x555d6e5a2a98 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x555d6e5a2b18 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x555d6e5a2b90 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x555d6e5a2c10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x555d6e5a2e70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Fragmenter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _mtu
       112 |   int _drops
       116 |   int _fragments
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e5aa5b8 <../elements/ip6/ip6fragmenter.hh:35:1, line:62:1> line:35:7 class IP6Fragmenter definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x555d6e5aa718 <col:1, col:7> col:7 implicit referenced class IP6Fragmenter
|-FieldDecl 0x555d6e5aa7c0 <line:37:3, col:12> col:12 referenced _mtu 'unsigned int'
|-FieldDecl 0x555d6e5aa828 <line:38:3, col:7> col:7 referenced _drops 'int'
|-FieldDecl 0x555d6e5aa890 <line:39:3, col:7> col:7 referenced _fragments 'int'
|-CXXMethodDecl 0x555d6e5aa9b0 <line:41:3, col:25> col:8 fragment 'void (Packet *)'
| `-ParmVarDecl 0x555d6e5aa8f0 <col:17, col:24> col:25 'Packet *'
|-AccessSpecDecl 0x555d6e5aaa58 <line:44:2, col:8> col:2 public
|-CXXConstructorDecl 0x555d6e5aaab8 <line:46:3, col:17> col:3 IP6Fragmenter 'void ()'
|-CXXDestructorDecl 0x555d6e5aaba8 <line:47:3, col:18> col:3 ~IP6Fragmenter 'void ()' noexcept-unevaluated 0x555d6e5aaba8
| `-Overrides: [ 0x555d6e591ea8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x555d6e5aace0 <line:49:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x555d6e593308 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x555d6e5ab9c8 <col:34, col:60>
|   `-ReturnStmt 0x555d6e5ab9b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x555d6e5ab9a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x555d6e5ab978 <col:43> 'const char [14]' lvalue "IP6Fragmenter"
|-CXXMethodDecl 0x555d6e5aada8 <line:50:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x555d6e5933d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x555d6e5aba28 <col:34, col:56>
|   `-ReturnStmt 0x555d6e5aba18 <col:36, col:43>
|     `-ImplicitCastExpr 0x555d6e5aba00 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x555d6e5ab9e0 <col:43> 'const char []' lvalue Var 0x555d6e593708 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x555d6e5aae70 <line:51:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x555d6e593798 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x555d6e5aba88 <col:34, col:49>
|   `-ReturnStmt 0x555d6e5aba78 <col:36, col:43>
|     `-ImplicitCastExpr 0x555d6e5aba60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x555d6e5aba40 <col:43> 'const char []' lvalue Var 0x555d6e5938e0 'PUSH' 'const char []'
|-CXXMethodDecl 0x555d6e5ab140 <line:52:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x555d6e594ba0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x555d6e5aaff0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x555d6e5ab068 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e5ab218 <line:54:3, col:38> col:7 drops 'int () const'
| `-CompoundStmt 0x555d6e5abb08 <col:21, col:38>
|   `-ReturnStmt 0x555d6e5abaf8 <col:23, col:30>
|     `-ImplicitCastExpr 0x555d6e5abae0 <col:30> 'int' <LValueToRValue>
|       `-MemberExpr 0x555d6e5abab0 <col:30> 'const int' lvalue ->_drops 0x555d6e5aa828
|         `-CXXThisExpr 0x555d6e5abaa0 <col:30> 'const IP6Fragmenter *' implicit this
|-CXXMethodDecl 0x555d6e5ab2e0 <line:55:3, col:46> col:7 fragments 'int () const'
| `-CompoundStmt 0x555d6e5abb88 <col:25, col:46>
|   `-ReturnStmt 0x555d6e5abb78 <col:27, col:34>
|     `-ImplicitCastExpr 0x555d6e5abb60 <col:34> 'int' <LValueToRValue>
|       `-MemberExpr 0x555d6e5abb30 <col:34> 'const int' lvalue ->_fragments 0x555d6e5aa890
|         `-CXXThisExpr 0x555d6e5abb20 <col:34> 'const IP6Fragmenter *' implicit this
|-CXXMethodDecl 0x555d6e5ab3a0 <line:57:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x555d6e594c70 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x555d6e5ab568 <line:59:3, col:27> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x555d6e592178 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x555d6e5ab458 <col:13> col:16 'int'
| `-ParmVarDecl 0x555d6e5ab4d0 <col:18, col:26> col:26 p 'Packet *'
|-CXXConstructorDecl 0x555d6e5ab648 <line:35:7> col:7 implicit IP6Fragmenter 'void (const IP6Fragmenter &)' inline default_delete noexcept-unevaluated 0x555d6e5ab648
| `-ParmVarDecl 0x555d6e5ab758 <col:7> col:7 'const IP6Fragmenter &'
`-CXXMethodDecl 0x555d6e5ab7f8 <col:7> col:7 implicit operator= 'IP6Fragmenter &(const IP6Fragmenter &)' inline default_delete noexcept-unevaluated 0x555d6e5ab7f8
  `-ParmVarDecl 0x555d6e5ab908 <col:7> col:7 'const IP6Fragmenter &'

Layout: <CGRecordLayout
  LLVMType:%class.IP6Fragmenter = type { %class.Element.base, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.IP6Fragmenter = type { %class.Element.base, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e365a70 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x555d6e365b88 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x555d6e365c28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x555d6e365c88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x555d6e365ce8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x555d6e365d98 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e3660a0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e3661b8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x555d6e366260 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x555d6e3662c8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x555d6e366358 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x555d6e36c3f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d6e36c828 <col:12>
|-CXXConstructorDecl 0x555d6e36c4f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e36c608 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d6e366260 'data' 'const char *'
| | `-ImplicitCastExpr 0x555d6e36edb0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x555d6e36ed80 <col:12> 'const char *const' lvalue .data 0x555d6e366260
| |     `-DeclRefExpr 0x555d6e36ed60 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d6e3662c8 'length' 'int'
| | `-ImplicitCastExpr 0x555d6e36ee40 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d6e36ee10 <col:12> 'const int' lvalue .length 0x555d6e3662c8
| |     `-DeclRefExpr 0x555d6e36edf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d6e366358 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x555d6e36eed0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x555d6e36eea0 <col:12> 'String::memo_t *const' lvalue .memo 0x555d6e366358
| |     `-DeclRefExpr 0x555d6e36ee80 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| `-CompoundStmt 0x555d6e36ef28 <col:12>
|-CXXConstructorDecl 0x555d6e36c6a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d6e36c6a8
| `-ParmVarDecl 0x555d6e36c7b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x555d6e371d10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555d6e37d728 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e37d838 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x555d6e37dd50 <col:12>
|   |-BinaryOperator 0x555d6e37db68 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555d6e37db20 <col:12> 'const char *' lvalue ->data 0x555d6e366260
|   | | `-CXXThisExpr 0x555d6e37db10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d6e37db50 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e37dae0 <col:12> 'const char *const' lvalue .data 0x555d6e366260
|   |     `-DeclRefExpr 0x555d6e37dac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555d6e37dc30 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x555d6e37dbe8 <col:12> 'int' lvalue ->length 0x555d6e3662c8
|   | | `-CXXThisExpr 0x555d6e37dbd8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d6e37dc18 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e37dba8 <col:12> 'const int' lvalue .length 0x555d6e3662c8
|   |     `-DeclRefExpr 0x555d6e37db88 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555d6e37dcf8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x555d6e37dcb0 <col:12> 'String::memo_t *' lvalue ->memo 0x555d6e366358
|   | | `-CXXThisExpr 0x555d6e37dca0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d6e37dce0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e37dc70 <col:12> 'String::memo_t *const' lvalue .memo 0x555d6e366358
|   |     `-DeclRefExpr 0x555d6e37dc50 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
|   `-ReturnStmt 0x555d6e37dd40 <col:12>
|     `-UnaryOperator 0x555d6e37dd28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e37dd18 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x555d6e37d8a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d6e37d8a8
  `-ParmVarDecl 0x555d6e37d9b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e35cfe0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d6e35d0f8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x555d6e35d188 <col:16, col:22> col:16 public
|-TypedefDecl 0x555d6e35d1c8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555d6e030fd0 'const char *'
|   `-QualType 0x555d6e030521 'const char' const
|     `-BuiltinType 0x555d6e030520 'char'
|-TypedefDecl 0x555d6e35d250 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x555d6e35d220 'String::const_iterator' sugar
|   |-Typedef 0x555d6e35d1c8 'const_iterator'
|   `-PointerType 0x555d6e030fd0 'const char *'
|     `-QualType 0x555d6e030521 'const char' const
|       `-BuiltinType 0x555d6e030520 'char'
|-TypedefDecl 0x555d6e35d3c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x555d6e35d330 'int (String::*)() const'
|   |-RecordType 0x555d6e35d070 'String'
|   | `-CXXRecord 0x555d6e35cfe0 'String'
|   `-ParenType 0x555d6e35d2d0 'int () const' sugar
|     `-FunctionProtoType 0x555d6e330e60 'int () const' const cdecl
|       `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e35d428 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x555d6e185a40 'int64_t' sugar
|   |-Typedef 0x555d6e099390 'int64_t'
|   `-TypedefType 0x555d6e072630 '__int64_t' sugar
|     |-Typedef 0x555d6e072208 '__int64_t'
|     `-BuiltinType 0x555d6e0305a0 'long'
|-TypedefDecl 0x555d6e35d490 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x555d6e185960 'uint64_t' sugar
|   |-Typedef 0x555d6e099530 'uint64_t'
|   `-TypedefType 0x555d6e0726c0 '__uint64_t' sugar
|     |-Typedef 0x555d6e072278 '__uint64_t'
|     `-BuiltinType 0x555d6e030640 'unsigned long'
|-TypedefDecl 0x555d6e35d520 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x555d6e35d4f0 'String::intmax_t' sugar
|   |-Typedef 0x555d6e35d428 'intmax_t'
|   `-TypedefType 0x555d6e185a40 'int64_t' sugar
|     |-Typedef 0x555d6e099390 'int64_t'
|     `-TypedefType 0x555d6e072630 '__int64_t' sugar
|       |-Typedef 0x555d6e072208 '__int64_t'
|       `-BuiltinType 0x555d6e0305a0 'long'
|-TypedefDecl 0x555d6e35d5b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x555d6e35d580 'String::uintmax_t' sugar
|   |-Typedef 0x555d6e35d490 'uintmax_t'
|   `-TypedefType 0x555d6e185960 'uint64_t' sugar
|     |-Typedef 0x555d6e099530 'uint64_t'
|     `-TypedefType 0x555d6e0726c0 '__uint64_t' sugar
|       |-Typedef 0x555d6e072278 '__uint64_t'
|       `-BuiltinType 0x555d6e030640 'unsigned long'
|-CXXConstructorDecl 0x555d6e35d670 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x555d6e35d818 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x555d6e35d758 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x555d6e35d9c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x555d6e35d908 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x555d6e35db20 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x555d6e35da90 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x555d6e35dd38 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x555d6e35dbe8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x555d6e35dc68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x555d6e35df58 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x555d6e35de08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x555d6e35de88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x555d6e35e178 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555d6e35e028 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x555d6e35e0a8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x555d6e35e398 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x555d6e35e248 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x555d6e35e2c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x555d6e35e528 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x555d6e35e460 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x555d6e35e6a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x555d6e35e5e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x555d6e35e838 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x555d6e35e770 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x555d6e35e990 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x555d6e35e900 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x555d6e35eae8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x555d6e35ea58 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x555d6e35ec40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x555d6e35ebb0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x555d6e35edc8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x555d6e35ed08 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x555d6e35ef58 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x555d6e35ee90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x555d6e35f0e8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x555d6e35f020 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x555d6e35f278 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x555d6e35f1b0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x555d6e35f370 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x555d6e35f498 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x555d6e35f618 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x555d6e35f550 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x555d6e35f768 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x555d6e35f6d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x555d6e35f820 <col:63> "" ""
|-CXXMethodDecl 0x555d6e35f968 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x555d6e35f8a8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x555d6e35fb78 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x555d6e35fa28 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x555d6e35faa8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x555d6e35fd98 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x555d6e35fc40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x555d6e35fcc0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x555d6e360078 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x555d6e35fe58 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x555d6e35fed8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x555d6e36bec0 <col:55> 'int' 10
| `-ParmVarDecl 0x555d6e35ff50 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d6e36bee0 <col:76> 'bool' true
|-CXXMethodDecl 0x555d6e360358 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x555d6e360140 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x555d6e3601c0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x555d6e36bef0 <col:56> 'int' 10
| `-ParmVarDecl 0x555d6e360238 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d6e36bf10 <col:77> 'bool' true
|-CXXMethodDecl 0x555d6e360460 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x555d6e360528 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x555d6e3605f0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x555d6e360690 <col:20>
| `-OptimizeNoneAttr 0x555d6e3606e8 <col:30>
|-CXXConversionDecl 0x555d6e3607d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x555d6e3608a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x555d6e360968 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x555d6e360a58 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555d6e360b18 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555d6e360c98 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x555d6e360bd0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x555d6e360de8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x555d6e360d58 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x555d6e360ed8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x555d6e360f98 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x555d6e3611e8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x555d6e361050 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x555d6e3610d0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x555d6e361448 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x555d6e3612b0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x555d6e361330 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x555d6e361518 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e361728 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x555d6e3615d0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x555d6e361650 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x555d6e361948 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x555d6e3617f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x555d6e361870 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x555d6e361ad8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x555d6e361a10 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x555d6e361bc8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x555d6e361d38 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x555d6e361c78 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d6e361f48 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x555d6e361df8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555d6e361e78 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555d6e362160 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x555d6e362008 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x555d6e362080 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x555d6e3622f0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x555d6e362220 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d6e362510 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x555d6e3623b0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x555d6e362430 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555d6e362660 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x555d6e3625d0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x555d6e362838 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x555d6e362720 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555d6e3627a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x555d6e362988 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x555d6e3628f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x555d6e362ba0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x555d6e362a40 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x555d6e362ac0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x555d6e36bf20 <col:39> 'int' 0
|-CXXMethodDecl 0x555d6e362dc0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x555d6e362c60 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x555d6e362ce0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x555d6e36bf40 <col:48> 'int' 0
|-CXXMethodDecl 0x555d6e362fa0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x555d6e362e80 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x555d6e362f00 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x555d6e36bf60 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x555d6e363070 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x555d6e363130 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x555d6e3631f0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x555d6e3632b0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x555d6e363370 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x555d6e363518 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x555d6e363420 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x555d6e363698 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x555d6e3635d0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x555d6e363870 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x555d6e363758 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x555d6e3639e8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x555d6e363928 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x555d6e363b30 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x555d6e363aa0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d6e363c80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x555d6e363bf0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x555d6e363e58 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x555d6e363d40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555d6e363dc0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555d6e364038 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555d6e363f20 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x555d6e363fa0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x555d6e364188 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x555d6e3640f8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x555d6e364398 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x555d6e364248 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x555d6e3642c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x555d6e3644f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x555d6e364460 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555d6e364650 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x555d6e3645b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x555d6e3646f8 <col:57> "" ""
|-CXXMethodDecl 0x555d6e364808 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x555d6e364778 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x555d6e364958 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x555d6e3648c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x555d6e364ad8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x555d6e364a10 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x555d6e364ba0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x555d6e364c60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x555d6e364d20 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x555d6e364dc0 <col:49> "" ""
|-CXXMethodDecl 0x555d6e364e50 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x555d6e364f10 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x555d6e365000 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x555d6e3650c8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x555d6e365188 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x555d6e365248 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x555d6e365340 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x555d6e365408 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x555d6e3654d0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x555d6e3656a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x555d6e365588 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x555d6e365608 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x555d6e3658d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x555d6e365770 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x555d6e3657f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x555d6e3659e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x555d6e365a48 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x555d6e365a70 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x555d6e365b88 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x555d6e365c28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x555d6e365c88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x555d6e365ce8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x555d6e365d98 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x555d6e365e00 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x555d6e366038 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x555d6e366088 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e366018 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x555d6e365f28 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x555d6e365ed0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x555d6e365f10 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x555d6e365ef0 <col:32> 'int' 8
|-CXXRecordDecl 0x555d6e3660a0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d6e3661b8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x555d6e366260 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x555d6e3662c8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x555d6e366358 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x555d6e36c3f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555d6e36c828 <col:12>
| |-CXXConstructorDecl 0x555d6e36c4f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d6e36c608 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d6e366260 'data' 'const char *'
| | | `-ImplicitCastExpr 0x555d6e36edb0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x555d6e36ed80 <col:12> 'const char *const' lvalue .data 0x555d6e366260
| | |     `-DeclRefExpr 0x555d6e36ed60 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d6e3662c8 'length' 'int'
| | | `-ImplicitCastExpr 0x555d6e36ee40 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555d6e36ee10 <col:12> 'const int' lvalue .length 0x555d6e3662c8
| | |     `-DeclRefExpr 0x555d6e36edf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d6e366358 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x555d6e36eed0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x555d6e36eea0 <col:12> 'String::memo_t *const' lvalue .memo 0x555d6e366358
| | |     `-DeclRefExpr 0x555d6e36ee80 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e36c608 '' 'const String::rep_t &'
| | `-CompoundStmt 0x555d6e36ef28 <col:12>
| |-CXXConstructorDecl 0x555d6e36c6a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d6e36c6a8
| | `-ParmVarDecl 0x555d6e36c7b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x555d6e371d10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x555d6e37d728 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d6e37d838 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x555d6e37dd50 <col:12>
| |   |-BinaryOperator 0x555d6e37db68 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x555d6e37db20 <col:12> 'const char *' lvalue ->data 0x555d6e366260
| |   | | `-CXXThisExpr 0x555d6e37db10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d6e37db50 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x555d6e37dae0 <col:12> 'const char *const' lvalue .data 0x555d6e366260
| |   |     `-DeclRefExpr 0x555d6e37dac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555d6e37dc30 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x555d6e37dbe8 <col:12> 'int' lvalue ->length 0x555d6e3662c8
| |   | | `-CXXThisExpr 0x555d6e37dbd8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d6e37dc18 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x555d6e37dba8 <col:12> 'const int' lvalue .length 0x555d6e3662c8
| |   |     `-DeclRefExpr 0x555d6e37db88 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555d6e37dcf8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x555d6e37dcb0 <col:12> 'String::memo_t *' lvalue ->memo 0x555d6e366358
| |   | | `-CXXThisExpr 0x555d6e37dca0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d6e37dce0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x555d6e37dc70 <col:12> 'String::memo_t *const' lvalue .memo 0x555d6e366358
| |   |     `-DeclRefExpr 0x555d6e37dc50 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d6e37d838 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x555d6e37dd40 <col:12>
| |     `-UnaryOperator 0x555d6e37dd28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555d6e37dd18 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x555d6e37d8a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d6e37d8a8
|   `-ParmVarDecl 0x555d6e37d9b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x555d6e3663d0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x555d6e366618 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x555d6e366438 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x555d6e3664b8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x555d6e366530 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x555d6e36c3b0 <col:79, line:261:5>
|   |-BinaryOperator 0x555d6e36c028 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555d6e36bfc0 <col:2, col:5> 'const char *' lvalue .data 0x555d6e366260
|   | | `-MemberExpr 0x555d6e36bf90 <col:2> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|   | |   `-CXXThisExpr 0x555d6e36bf80 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555d6e36c010 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d6e36bff0 <col:12> 'const char *' lvalue ParmVar 0x555d6e366438 'data' 'const char *'
|   |-BinaryOperator 0x555d6e36c0f0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x555d6e36c088 <col:2, col:5> 'int' lvalue .length 0x555d6e3662c8
|   | | `-MemberExpr 0x555d6e36c058 <col:2> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|   | |   `-CXXThisExpr 0x555d6e36c048 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555d6e36c0d8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d6e36c0b8 <col:14> 'int' lvalue ParmVar 0x555d6e3664b8 'length' 'int'
|   `-IfStmt 0x555d6e36c398 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x555d6e36c210 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555d6e36c1f8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x555d6e36c1d8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x555d6e36c1b8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x555d6e36c150 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x555d6e366358
|     |       | `-MemberExpr 0x555d6e36c120 <col:7> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|     |       |   `-CXXThisExpr 0x555d6e36c110 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x555d6e36c1a0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d6e36c180 <col:17> 'String::memo_t *' lvalue ParmVar 0x555d6e366530 'memo' 'String::memo_t *'
|     `-CallExpr 0x555d6e36c370 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x555d6e36c358 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555d6e36c260 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x555d6e355048 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x555d6e36c2c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d6e365c28
|         `-ImplicitCastExpr 0x555d6e36c2b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555d6e36c290 <col:27> 'String::memo_t *' lvalue ParmVar 0x555d6e366530 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x555d6e3668c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x555d6e3666e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x555d6e366768 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x555d6e3667e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x555d6e3663d0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x555d6e36c838 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x555d6e36c9c8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x555d6e36c930 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x555d6e36c8a0 <col:2> '<bound member function type>' ->assign_memo 0x555d6e366618
|     | `-ImplicitCastExpr 0x555d6e36c968 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x555d6e36c890 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x555d6e36c980 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d6e36c8d0 <col:14> 'const char *' lvalue ParmVar 0x555d6e3666e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x555d6e36c998 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x555d6e36c8f0 <col:20> 'int' lvalue ParmVar 0x555d6e366768 'length' 'int'
|     `-ImplicitCastExpr 0x555d6e36c9b0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e36c910 <col:28> 'String::memo_t *' lvalue ParmVar 0x555d6e3667e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x555d6e366a58 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x555d6e366998 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x555d6e36cc20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x555d6e36cba0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x555d6e36c9f0 <col:2> '<bound member function type>' ->assign_memo 0x555d6e366618
|     | `-CXXThisExpr 0x555d6e36c9e0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x555d6e36cbd8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x555d6e36ca70 <col:14, col:19> 'const char *' lvalue .data 0x555d6e366260
|     |   `-MemberExpr 0x555d6e36ca40 <col:14, col:16> 'String::rep_t' lvalue ._r 0x555d6e3663d0
|     |     `-DeclRefExpr 0x555d6e36ca20 <col:14> 'const String' lvalue ParmVar 0x555d6e366998 'x' 'const String &'
|     |-ImplicitCastExpr 0x555d6e36cbf0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x555d6e36caf0 <col:25, col:30> 'int' lvalue .length 0x555d6e3662c8
|     |   `-MemberExpr 0x555d6e36cac0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x555d6e3663d0
|     |     `-DeclRefExpr 0x555d6e36caa0 <col:25> 'const String' lvalue ParmVar 0x555d6e366998 'x' 'const String &'
|     `-ImplicitCastExpr 0x555d6e36cc08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x555d6e36cb70 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x555d6e366358
|         `-MemberExpr 0x555d6e36cb40 <col:38, col:40> 'String::rep_t' lvalue ._r 0x555d6e3663d0
|           `-DeclRefExpr 0x555d6e36cb20 <col:38> 'const String' lvalue ParmVar 0x555d6e366998 'x' 'const String &'
|-CXXMethodDecl 0x555d6e366b20 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x555d6e36d5e0 <col:31, line:278:5>
|   `-IfStmt 0x555d6e36d5c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x555d6e36ccc0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555d6e36cca8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x555d6e36cc78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555d6e366358
|     |     `-MemberExpr 0x555d6e36cc48 <col:6> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|     |       `-CXXThisExpr 0x555d6e36cc38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x555d6e36d5a0 <col:15, line:277:2>
|       |-ParenExpr 0x555d6e36d170 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x555d6e36d140 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x555d6e36cdd0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x555d6e36cdb8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x555d6e36cda0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x555d6e36cd60 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d6e365c28
|       |   |       `-ImplicitCastExpr 0x555d6e36cd48 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x555d6e36cd18 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x555d6e366358
|       |   |           `-MemberExpr 0x555d6e36cce8 <col:27> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|       |   |             `-CXXThisExpr 0x555d6e36ccd8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x555d6e36ce30 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x555d6e36ce10 <col:54> 'int' 0
|       |   `-CallExpr 0x555d6e36d0a0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x555d6e36d088 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x555d6e36d008 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x555d6e36d0e0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555d6e36cf18 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x555d6e36d0f8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555d6e36cf48 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x555d6e36d110 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x555d6e36cf80 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x555d6e36d128 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x555d6e36cff0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x555d6e36cfd8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x555d6e36cfa0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x555d6e36d4c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x555d6e36d380 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x555d6e36d368 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555d6e36d2e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x555d6e356490 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x555d6e36d2b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d6e365c28
|       | |   `-ImplicitCastExpr 0x555d6e36d298 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x555d6e36d268 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x555d6e366358
|       | |       `-MemberExpr 0x555d6e36d238 <col:40> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|       | |         `-CXXThisExpr 0x555d6e36d228 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x555d6e36d480 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x555d6e36d468 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555d6e36d3a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x555d6e36b300 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x555d6e36d4a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x555d6e36d408 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x555d6e366358
|       |       `-MemberExpr 0x555d6e36d3d8 <col:15> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|       |         `-CXXThisExpr 0x555d6e36d3c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x555d6e36d580 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x555d6e36d518 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555d6e366358
|         | `-MemberExpr 0x555d6e36d4e8 <col:6> 'String::rep_t' lvalue ->_r 0x555d6e3663d0
|         |   `-CXXThisExpr 0x555d6e36d4d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x555d6e36d568 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x555d6e36d548 <col:16> 'int' 0
|-CXXMethodDecl 0x555d6e366db8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x555d6e366bd8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555d6e366c58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555d6e366cd0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x555d6e366e90 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x555d6e3670e0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x555d6e366f48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555d6e366fc8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555d6e367040 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x555d6e3672c8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x555d6e3671b0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x555d6e367230 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x555d6e3673c8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x555d6e36d6b8 <col:41, line:286:5>
|   `-ReturnStmt 0x555d6e36d6a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x555d6e36d678 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x555d6e36d640 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x555d6e36d628 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x555d6e36d608 <col:46> 'int' 1
|-CXXMethodDecl 0x555d6e367668 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x555d6e367480 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x555d6e367500 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x555d6e367580 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x555d6e36b300 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x555d6e367730 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x555d6e36b3d0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x555d6e36b5a0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x555d6e36b488 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555d6e36b508 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x555d6e36b660 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x555d6e36b728 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x555d6e36b828 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x555d6e36b8a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x555d6e36b918 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x555d6e36b980 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x555d6e36ba80 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x555d6e36bad0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e36ba60 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x555d6e36ba40 <col:22> 'int' 14
|-CXXMethodDecl 0x555d6e36bce8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x555d6e36bb00 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x555d6e36bb80 <col:38> col:41 'int'
| `-ParmVarDecl 0x555d6e36bc00 <col:43> col:46 'int'
|-FriendDecl 0x555d6e36bdf0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x555d6e36be80 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d6e5dbdd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x555d6e5dbfa8 prev 0x555d6e5dbdd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555d6e5dc038 <col:46, col:52> col:46 public
|-TypedefDecl 0x555d6e5dc060 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e5dd9e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x555d6e5dd990 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x555d6e5dd970 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x555d6e5dc278 'type'
|     `-SubstTemplateTypeParmType 0x555d6e5dc240 'String' sugar
|       |-TemplateTypeParmType 0x555d6e320880 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e320830 'T'
|       `-RecordType 0x555d6e35d070 'String'
|         `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5dda98 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x555d6e5dda60 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x555d6e5dda40 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555d6e5dd9e0 'type'
|     `-ElaboratedType 0x555d6e5dd990 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x555d6e5dd970 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x555d6e5dc278 'type'
|         `-SubstTemplateTypeParmType 0x555d6e5dc240 'String' sugar
|           |-TemplateTypeParmType 0x555d6e320880 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555d6e320830 'T'
|           `-RecordType 0x555d6e35d070 'String'
|             `-CXXRecord 0x555d6e35cfe0 'String'
|-CXXMethodDecl 0x555d6e5ddc18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x555d6e5ddb28 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x555d6e5ddd08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555d6e5ddde8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x555d6e5ddde8
|-CXXMethodDecl 0x555d6e5de0b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555d6e5ddfc0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x555d6e5de2f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d6e5de170 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e5de1e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5de4c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d6e5de3b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e5de430 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5de628 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555d6e5de6f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555d6e5de948 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d6e5de7b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555d6e5de830 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5deba8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x555d6e5dea18 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555d6e5dea90 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5ded68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555d6e5dec78 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5def28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555d6e5dee30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5defe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d6e5df090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555d6e5df2c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d6e5df140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e5df1b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d6e5df568 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555d6e5df470 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x555d6e5df630 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x555d6e5df680 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555d6e5df6d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d6e594810 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x555d6e5da838 prev 0x555d6e594810 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555d6e5dbd40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x555d6e5dbcf0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x555d6e5dbcd0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555d6e5dbb80 'type'
|     `-SubstTemplateTypeParmType 0x555d6e5dba10 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x555d6e2f6630 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x555d6e2f65d8 'F'
|       `-RecordType 0x555d6e5db670 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x555d6e5db590 'typed_array_memory'
|-FieldDecl 0x555d6e5df720 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x555d6e5df770 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555d6e5df7a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|   |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555d6e32db48 'T'
|   `-RecordType 0x555d6e35d070 'String'
|     `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5df838 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x555d6e5df800 'String &'
|   `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-RecordType 0x555d6e35d070 'String'
|       `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5df8c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x555d6e5df890 'const String &'
|   `-QualType 0x555d6e5da8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-RecordType 0x555d6e35d070 'String'
|         `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5df958 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x555d6e5df920 'String *'
|   `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-RecordType 0x555d6e35d070 'String'
|       `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5df9e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x555d6e5df9b0 'const String *'
|   `-QualType 0x555d6e5da8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-RecordType 0x555d6e35d070 'String'
|         `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5e0640 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x555d6e5e05f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x555d6e5e05d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x555d6e5e0508 'type'
|     `-LValueReferenceType 0x555d6e5e04d0 'const String &'
|       `-QualType 0x555d6e5e0271 'const String' const
|         `-SubstTemplateTypeParmType 0x555d6e5e0270 'String' sugar
|           |-TemplateTypeParmType 0x555d6e300580 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555d6e300528 'T'
|           `-RecordType 0x555d6e35d070 'String'
|             `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5e06a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x555d6e5df890 'const String &'
|   `-QualType 0x555d6e5da8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-RecordType 0x555d6e35d070 'String'
|         `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5e0700 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e5e0768 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x555d6e5df920 'String *'
|   `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-RecordType 0x555d6e35d070 'String'
|       `-CXXRecord 0x555d6e35cfe0 'String'
|-TypedefDecl 0x555d6e5e07d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x555d6e5df9b0 'const String *'
|   `-QualType 0x555d6e5da8d1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d6e5da8d0 'String' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-RecordType 0x555d6e35d070 'String'
|         `-CXXRecord 0x555d6e35cfe0 'String'
|-EnumDecl 0x555d6e5e0828 <line:134:5> col:5
| `-EnumConstantDecl 0x555d6e5e0920 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555d6e5e0900 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555d6e32f228 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555d6e32f200 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555d6e32f1e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555d6e5e09a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555d6e5e0c38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e5e0a60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e5e0b00 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x555d6e5e0ec8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x555d6e5e0db0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x555d6e5e1188 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x555d6e5e1070 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x555d6e5e14a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x555d6e5e1380 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x555d6e5e17b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x555d6e5e1690 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x555d6e5e1aa0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e5e18e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e5e1960 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d6e5e1bc8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555d6e5e1c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e1cd0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e1d18 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555d6e5e1dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e1e20 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e1ee8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d6e5e1f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e1ff0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e2038 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d6e5e20e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e2140 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e2188 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d6e5e2238 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e2290 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e22d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d6e5e2388 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e5e23e0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e5e2408 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d6e5e24b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d6e5e2568 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555d6e5e2728 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e5e2618 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e5e2690 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d6e5e2878 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e5e27e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e5e2a28 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x555d6e5e2930 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d6e5e2ae0 <col:20>
| `-OptimizeNoneAttr 0x555d6e5e2b38 <col:30>
|-CXXMethodDecl 0x555d6e5e2c58 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x555d6e5e2b60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d6e5e2d10 <col:20>
| `-OptimizeNoneAttr 0x555d6e5e2d68 <col:30>
|-CXXMethodDecl 0x555d6e5e2e20 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e5e2d90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e5e2f68 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d6e5e2ed8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e5e3098 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x555d6e5e3198 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x555d6e5e3268 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x555d6e5e3338 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x555d6e5e3478 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e5e33e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e5e35c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d6e5e3530 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e5e3708 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x555d6e5e3678 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d6e5e37c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555d6e5e38c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555d6e5e3830 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d6e5e3978 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555d6e5e3a38 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x555d6e5e3b38 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x555d6e5e3cb8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555d6e5e3bf8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x555d6e5e4478 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555d6e5e3d70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x555d6e5e43d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x555d6e5e42d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x555d6e5e4558 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d6e5e4740 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555d6e5e4618 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d6e5e47f8 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555d6e5e4a48 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e5e48b8 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555d6e5e4930 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d6e5e4bd8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x555d6e5e4b18 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555d6e5e4de8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x555d6e5e4ca0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555d6e5e4d18 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555d6e5e4ea8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555d6e5e5108 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x555d6e5e5010 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x555d6e5e51d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x555d6e5e51d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e666038 prev 0x555d6e5143c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d6e666130 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x555d6e6661c0 <col:22, col:28> col:22 public
|-EnumDecl 0x555d6e6661e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x555d6e666308 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e6662e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x555d6e6662d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555d6e6662b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x555d6e6663b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e666390 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x555d6e666378 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555d6e666358 <col:14> 'int' 1
| |-EnumConstantDecl 0x555d6e666440 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e666420 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x555d6e666400 <col:17> 'int' 0
| |-EnumConstantDecl 0x555d6e6664d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e6664b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x555d6e666490 <col:13> 'int' 1
| |-EnumConstantDecl 0x555d6e666560 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e666540 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x555d6e666520 <col:16> 'int' 2
| |-EnumConstantDecl 0x555d6e6665f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e6665d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x555d6e6665b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x555d6e666680 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e666660 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x555d6e666640 <col:15> 'int' 4
| |-EnumConstantDecl 0x555d6e666710 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e6666f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x555d6e6666d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x555d6e6667a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d6e666780 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x555d6e666760 <col:12> 'int' 6
| `-EnumConstantDecl 0x555d6e666830 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x555d6e666810 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x555d6e6667f0 <col:13> 'int' 7
|-VarDecl 0x555d6e6668a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x555d6e666928 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x555d6e6669b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x555d6e666a38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x555d6e666ac0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x555d6e666b48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x555d6e666bd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x555d6e666c58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x555d6e666ce0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x555d6e666d68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x555d6e666df0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x555d6e666ef0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x555d6e66c218 '_nerrors' 'int'
| | `-IntegerLiteral 0x555d6e66c9a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x555d6e66ca18 <col:16, line:129:5>
|-CXXDestructorDecl 0x555d6e666fe0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x555d6e66ca28 <col:29, line:132:5>
|-CXXMethodDecl 0x555d6e667198 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x555d6e6670d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e667260 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555d6e667348 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555d6e66ca80 <col:44, line:161:5>
|   `-ReturnStmt 0x555d6e66ca70 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x555d6e66ca58 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e66ca38 <col:9> 'ErrorHandler *' lvalue Var 0x555d6e66c278 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e667488 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x555d6e6673f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d6e667550 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555d6e66cae0 <col:43, line:173:5>
|   `-ReturnStmt 0x555d6e66cad0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x555d6e66cab8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e66ca98 <col:9> 'ErrorHandler *' lvalue Var 0x555d6e66c2f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x555d6e667608 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x555d6e667688 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x555d6e667798 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x555d6e667708 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555d6e6678e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x555d6e667858 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d6e667a40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x555d6e6679a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x555d6e667b98 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x555d6e667b00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555d6e667cf0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x555d6e667c58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555d6e667f00 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d6e667da8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x555d6e667e28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x555d6e6680d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d6e667fc0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x555d6e668040 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x555d6e6682f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d6e668198 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x555d6e668218 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x555d6e6684d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d6e6683b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555d6e668438 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555d6e6686b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d6e668598 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555d6e668618 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555d6e668840 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x555d6e668778 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x555d6e668a10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x555d6e6688f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555d6e668970 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x555d6e66cd38 <col:57, line:234:5>
|   `-ReturnStmt 0x555d6e66cd28 <line:233:2, col:41>
|     `-ExprWithCleanups 0x555d6e66cd10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555d6e66ccb8 <col:9, col:41> 'int'
|         |-MemberExpr 0x555d6e66cc88 <col:9> '<bound member function type>' ->xmessage 0x555d6e668840
|         | `-CXXThisExpr 0x555d6e66cc78 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x555d6e66ccf8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d6e66cce0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d6e66cc58 <col:18, col:40> 'String' (CXXTemporary 0x555d6e66cc58)
|               `-CallExpr 0x555d6e66cc20 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x555d6e66cc08 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x555d6e66cb80 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555d6e66aa48 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x555d6e66cba0 <col:31> 'const String' lvalue ParmVar 0x555d6e668970 'str' 'const String &'
|                 `-DeclRefExpr 0x555d6e66cbc0 <col:36> 'const String' lvalue ParmVar 0x555d6e6688f8 'anno' 'const String &'
|-CXXMethodDecl 0x555d6e668cf0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555d6e668ad0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555d6e668b50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x555d6e668bc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d6e66cfc8 <col:68, line:243:5>
|   `-ReturnStmt 0x555d6e66cfb8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x555d6e66cfa0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555d6e66cf40 <col:9, col:41> 'int'
|         |-MemberExpr 0x555d6e66cf10 <col:9> '<bound member function type>' ->xmessage 0x555d6e668a10
|         | `-CXXThisExpr 0x555d6e66cf00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555d6e66cdd8 <col:18> 'const String' lvalue ParmVar 0x555d6e668ad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555d6e66cf88 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d6e66cf70 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d6e66cee0 <col:24, col:40> 'String' (CXXTemporary 0x555d6e66cee0)
|               `-CXXMemberCallExpr 0x555d6e66ce78 <col:24, col:40> 'String'
|                 |-MemberExpr 0x555d6e66ce08 <col:24> '<bound member function type>' ->vformat 0x555d6e669f10
|                 | `-CXXThisExpr 0x555d6e66cdf8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555d6e66cea8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555d6e66ce38 <col:32> 'const char *' lvalue ParmVar 0x555d6e668b50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555d6e66cec0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555d6e66ce58 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d6e668bc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d6e668f90 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x555d6e668db8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555d6e668e30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555d6e668ea8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x555d6e66d308 <col:23, line:254:5>
|   `-ReturnStmt 0x555d6e66d2f8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x555d6e66d2e0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x555d6e66d280 <col:9, col:71> 'int'
|         |-MemberExpr 0x555d6e66d250 <col:9> '<bound member function type>' ->xmessage 0x555d6e668a10
|         | `-CXXThisExpr 0x555d6e66d240 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x555d6e66d2c8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x555d6e66d2b0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x555d6e66d200 <col:18, col:65> 'String' (CXXTemporary 0x555d6e66d200)
|         |     `-CallExpr 0x555d6e66d198 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x555d6e66d180 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x555d6e66d068 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555d6e66aa48 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x555d6e66d088 <col:31> 'const String' lvalue ParmVar 0x555d6e668e30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x555d6e66d1e0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x555d6e66d1c8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x555d6e66d160 <col:37, col:64> 'String' (CXXTemporary 0x555d6e66d160)
|         |             `-CallExpr 0x555d6e66d130 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x555d6e66d118 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x555d6e66d0a8 <col:37> 'String (const String &)' lvalue CXXMethod 0x555d6e66b098 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x555d6e66d0c8 <col:56> 'const String' lvalue ParmVar 0x555d6e668db8 'landmark' 'const String &'
|         `-DeclRefExpr 0x555d6e66d220 <col:68> 'const String' lvalue ParmVar 0x555d6e668ea8 'str' 'const String &'
|-CXXMethodDecl 0x555d6e669310 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555d6e669058 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555d6e6690d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555d6e669150 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x555d6e6691c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d6e66d5c0 <col:34, line:267:5>
|   `-ReturnStmt 0x555d6e66d5b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x555d6e66d598 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x555d6e66d530 <col:9, col:51> 'int'
|         |-MemberExpr 0x555d6e66d500 <col:9> '<bound member function type>' ->xmessage 0x555d6e668f90
|         | `-CXXThisExpr 0x555d6e66d4f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555d6e66d3a8 <col:18> 'const String' lvalue ParmVar 0x555d6e669058 'landmark' 'const String &'
|         |-DeclRefExpr 0x555d6e66d3c8 <col:28> 'const String' lvalue ParmVar 0x555d6e6690d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555d6e66d580 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d6e66d568 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d6e66d4d0 <col:34, col:50> 'String' (CXXTemporary 0x555d6e66d4d0)
|               `-CXXMemberCallExpr 0x555d6e66d468 <col:34, col:50> 'String'
|                 |-MemberExpr 0x555d6e66d3f8 <col:34> '<bound member function type>' ->vformat 0x555d6e669f10
|                 | `-CXXThisExpr 0x555d6e66d3e8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555d6e66d498 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555d6e66d428 <col:42> 'const char *' lvalue ParmVar 0x555d6e669150 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555d6e66d4b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555d6e66d448 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d6e6691c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d6e669420 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x555d6e66d640 <col:25, line:288:5>
|   `-ReturnStmt 0x555d6e66d630 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x555d6e66d618 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x555d6e66d5e8 <col:9> 'const int' lvalue ->_nerrors 0x555d6e66c218
|         `-CXXThisExpr 0x555d6e66d5d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x555d6e669630 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x555d6e6694d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x555d6e669558 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x555d6e669950 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555d6e6696f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x555d6e669778 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x555d6e6697f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d6e669af0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x555d6e669a20 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x555d6e669d38 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555d6e669bb0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x555d6e669c28 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d6e66d8a0 <col:58, line:357:5>
|   `-ReturnStmt 0x555d6e66d890 <line:356:2, col:29>
|     `-ExprWithCleanups 0x555d6e66d878 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x555d6e66d848 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x555d6e66d830 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x555d6e66d810 <col:9, col:29> 'String' (CXXTemporary 0x555d6e66d810)
|             `-CallExpr 0x555d6e66d7a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x555d6e66d788 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x555d6e66d708 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x555d6e669950 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x555d6e66d6a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x555d6e66d7d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x555d6e66d6c8 <col:21> 'const char *' lvalue ParmVar 0x555d6e669bb0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x555d6e66d7f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x555d6e66d6e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d6e669c28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d6e669f10 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x555d6e669e00 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x555d6e669e78 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d6e66a068 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x555d6e669fd8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x555d6e66a1b0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x555d6e66a120 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x555d6e66a450 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x555d6e66a268 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x555d6e66a2e8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x555d6e66a360 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x555d6e66a5b0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x555d6e66a520 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x555d6e66d9b8 <col:37, line:441:5>
|   `-IfStmt 0x555d6e66d9a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x555d6e66d928 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x555d6e66d8f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x555d6e66d8b8 <col:6> 'int' lvalue ParmVar 0x555d6e66a520 'level' 'int'
|     | `-ImplicitCastExpr 0x555d6e66d910 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x555d6e66d8d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x555d6e6665f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x555d6e66d988 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x555d6e66d958 <col:8> 'int' lvalue ->_nerrors 0x555d6e66c218
|         `-CXXThisExpr 0x555d6e66d948 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x555d6e66a678 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x555d6e66da50 <col:26, line:448:5>
|   `-BinaryOperator 0x555d6e66da30 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x555d6e66d9e0 <col:2> 'int' lvalue ->_nerrors 0x555d6e66c218
|     | `-CXXThisExpr 0x555d6e66d9d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x555d6e66da10 <col:13> 'int' 0
|-CXXMethodDecl 0x555d6e66a840 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x555d6e66a730 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x555d6e66a7a8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x555d6e66aa48 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x555d6e66a900 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x555d6e66a978 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x555d6e66acf8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x555d6e66ab08 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x555d6e66ab88 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x555d6e66ac08 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x555d6e66adb0 <col:59> 0 0
|-CXXMethodDecl 0x555d6e66af48 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x555d6e66ae28 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x555d6e66aea8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x555d6e66e0c0 <col:70, line:534:5>
|   |-DeclStmt 0x555d6e66dbc0 <line:528:2, col:20>
|   | |-VarDecl 0x555d6e66da78 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x555d6e66dae0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x555d6e66db18 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x555d6e66db80 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x555d6e66dc90 <line:529:2, col:23>
|   | `-VarDecl 0x555d6e66dbf0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x555d6e66dc78 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555d6e66dc58 <col:18> 'const char *' lvalue ParmVar 0x555d6e66ae28 'begin' 'const char *'
|   |-DoStmt 0x555d6e66e058 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x555d6e66df88 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x555d6e66df70 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x555d6e66df50 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x555d6e66dca8 <col:6> 'const char *' lvalue Var 0x555d6e66dbf0 'x' 'const char *'
|   | |     `-CallExpr 0x555d6e66dea0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x555d6e66de88 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x555d6e66de40 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x555d6e66c6f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x555d6e66df08 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x555d6e66def0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x555d6e66dd60 <col:20, col:27> 'String' (CXXTemporary 0x555d6e66dd60)
|   | |       |     `-CXXTemporaryObjectExpr 0x555d6e66dd28 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x555d6e66df20 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555d6e66dd80 <col:30> 'const char *' lvalue Var 0x555d6e66dbf0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x555d6e66df38 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555d6e66dda0 <col:33> 'const char *' lvalue ParmVar 0x555d6e66aea8 'end' 'const char *'
|   | |       |-UnaryOperator 0x555d6e66dde0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555d6e66ddc0 <col:39> 'String' lvalue Var 0x555d6e66da78 'name' 'String'
|   | |       |-UnaryOperator 0x555d6e66de18 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555d6e66ddf8 <col:46> 'String' lvalue Var 0x555d6e66db18 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x555d6e66de30 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x555d6e66e040 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x555d6e66e028 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x555d6e66e008 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x555d6e66dfd8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|   |         `-ImplicitCastExpr 0x555d6e66dfc0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x555d6e66dfa0 <col:11> 'String' lvalue Var 0x555d6e66da78 'name' 'String'
|   `-ReturnStmt 0x555d6e66e0b0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x555d6e66e098 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e66e078 <col:9> 'const char *' lvalue Var 0x555d6e66dbf0 'x' 'const char *'
|-CXXMethodDecl 0x555d6e66b098 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x555d6e66b008 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x555d6e66e6c8 <col:55, line:550:5>
|   `-IfStmt 0x555d6e66e6a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x555d6e66e300 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x555d6e66e2e8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d6e66e2d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d6e66e2b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d6e66e280 <col:6> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|     | |       `-DeclRefExpr 0x555d6e66e120 <col:6> 'const String' lvalue ParmVar 0x555d6e66b008 'x' 'const String &'
|     | `-BinaryOperator 0x555d6e66e260 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x555d6e66e230 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x555d6e66e1e0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x555d6e66e1c8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x555d6e66e180 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x555d6e37a010 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x555d6e66e140 <col:11> 'const String' lvalue ParmVar 0x555d6e66b008 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x555d6e66e160 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x555d6e66e248 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x555d6e66e218 <col:19> 'char' 123
|     |-ReturnStmt 0x555d6e66e370 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x555d6e66e340 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x555d6e66e320 <col:13> 'const String' lvalue ParmVar 0x555d6e66b008 'x' 'const String &'
|     `-IfStmt 0x555d6e66e678 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x555d6e66e408 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d6e66e3f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d6e66e3d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d6e66e3a0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |       `-DeclRefExpr 0x555d6e66e380 <col:11> 'const String' lvalue ParmVar 0x555d6e66b008 'x' 'const String &'
|       |-ReturnStmt 0x555d6e66e590 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x555d6e66e578 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x555d6e66e548 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x555d6e66e530 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x555d6e66e510 <col:13, col:29> 'String' (CXXTemporary 0x555d6e66e510)
|       |         `-CallExpr 0x555d6e66e4c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x555d6e66e4a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x555d6e66e420 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x555d6e66a840 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x555d6e66e4f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x555d6e66e440 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x555d6e66e460 <col:28> 'const String' lvalue ParmVar 0x555d6e66b008 'x' 'const String &'
|       `-ReturnStmt 0x555d6e66e668 <line:549:6, col:20>
|         `-ExprWithCleanups 0x555d6e66e650 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x555d6e66e620 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x555d6e66e608 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x555d6e66e5e8 <col:13, col:20> 'String' (CXXTemporary 0x555d6e66e5e8)
|                 `-CXXTemporaryObjectExpr 0x555d6e66e5b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x555d6e66b260 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x555d6e66b150 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x555d6e66b1c8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d6e66c998 <col:71> 'bool' false
|-CXXRecordDecl 0x555d6e66b310 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x555d6e66b608 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x555d6e66b5a0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x555d6e66b540 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x555d6e66b500 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x555d6e35d070 'String'
|       | `-CXXRecord 0x555d6e35cfe0 'String'
|       |-BuiltinType 0x555d6e030580 'int'
|       `-DecayedType 0x555d6e515410 '__va_list_tag *' sugar
|         |-TypedefType 0x555d6e5153e0 'va_list' sugar
|         | |-Typedef 0x555d6e24e120 'va_list'
|         | `-TypedefType 0x555d6e24e0d0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x555d6e185cf8 '__gnuc_va_list'
|         |   `-TypedefType 0x555d6e185c60 '__builtin_va_list' sugar
|         |     |-Typedef 0x555d6e071d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x555d6e071ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x555d6e0312d0 '__va_list_tag'
|         |         `-CXXRecord 0x555d6e031238 '__va_list_tag'
|         `-PointerType 0x555d6e2539c0 '__va_list_tag *'
|           `-RecordType 0x555d6e0312d0 '__va_list_tag'
|             `-CXXRecord 0x555d6e031238 '__va_list_tag'
|-EnumDecl 0x555d6e66b660 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x555d6e66b760 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bcc0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66b740 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x555d6e66b720 <col:16> 'int' 1
| |-EnumConstantDecl 0x555d6e66b7f0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bcd8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66b7d0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x555d6e66b7b0 <col:21> 'int' 2
| |-EnumConstantDecl 0x555d6e66b880 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bcf0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66b860 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x555d6e66b840 <col:22> 'int' 4
| |-EnumConstantDecl 0x555d6e66b910 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd08 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66b8f0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x555d6e66b8d0 <col:17> 'int' 8
| |-EnumConstantDecl 0x555d6e66b9a0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66b980 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x555d6e66b960 <col:22> 'int' 16
| |-EnumConstantDecl 0x555d6e66ba30 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66ba10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555d6e66b9f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x555d6e66bac0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd50 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66baa0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x555d6e66ba80 <col:17> 'int' 64
| |-EnumConstantDecl 0x555d6e66bb50 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66bb30 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x555d6e66bb10 <col:14> 'int' 128
| |-EnumConstantDecl 0x555d6e66bbe0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d6e66bd80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e66bbc0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x555d6e66bba0 <col:16> 'int' 256
| `-EnumConstantDecl 0x555d6e66bc70 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x555d6e66bd98 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e66bc50 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x555d6e66bc30 <col:12> 'int' 1024
|-CXXMethodDecl 0x555d6e66bfa8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x555d6e66bdc0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x555d6e66be60 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x555d6e66c130 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x555d6e66c068 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x555d6e66c1d8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x555d6e66c218 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x555d6e66c278 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x555d6e66c2f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x555d6e66c6f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x555d6e66c368 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x555d6e66c3e8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x555d6e66c468 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x555d6e66c4e0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x555d6e66c558 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x555d6e66c5d0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x555d6e66c818 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x555d6e66c818
| `-ParmVarDecl 0x555d6e66c928 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x555d6e66ea28 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x555d6e66ea28
  `-ParmVarDecl 0x555d6e66eb38 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e514458 prev 0x555d6e5572b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e514550 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x555d6e5145e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x555d6e514718 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x555d6e514618 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555d6e515b40 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e515b20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555d6e5156b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555d6e515bd0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d6e515b90 <col:17> 'ErrorHandler *' lvalue ParmVar 0x555d6e514618 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555d6e515720 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555d6e515c50 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e515c10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555d6e515780 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555d6e515c90 <col:54> 'bool' false
| `-CompoundStmt 0x555d6e515d98 <col:61, line:38:5>
|   `-BinaryOperator 0x555d6e515d78 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x555d6e515d10 <col:9> 'const Element *' lvalue ->_context 0x555d6e515658
|     | `-CXXThisExpr 0x555d6e515d00 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x555d6e515d60 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x555d6e515d40 <col:20> 'int' 0
|-CXXConstructorDecl 0x555d6e514928 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e5147d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x555d6e514850 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555d6e515b78 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e515b58 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x555d6e515658 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x555d6e515df0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d6e515db0 <col:20> 'const Element *' lvalue ParmVar 0x555d6e5147d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x555d6e5156b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555d6e515e70 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d6e515e30 <col:36> 'ErrorHandler *' lvalue ParmVar 0x555d6e514850 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555d6e515720 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555d6e515ef0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555d6e515eb0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x555d6e515780 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555d6e515f30 <col:73> 'bool' false
| `-CompoundStmt 0x555d6e515fa8 <col:80, line:46:5>
|-CXXMethodDecl 0x555d6e514a58 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x555d6e516020 <col:36, line:51:5>
|   `-ReturnStmt 0x555d6e516010 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x555d6e515ff8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x555d6e515fc8 <col:16> 'const Element *const' lvalue ->_context 0x555d6e515658
|         `-CXXThisExpr 0x555d6e515fb8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555d6e514b48 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x555d6e5160a0 <col:32, line:57:5>
|   `-ReturnStmt 0x555d6e516090 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x555d6e516078 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x555d6e516048 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x555d6e5156b8
|         `-CXXThisExpr 0x555d6e516038 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555d6e514c08 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x555d6e514d90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d6e514cc0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555d6e514ee0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d6e514e50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d6e515030 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d6e514fa0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d6e515238 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x555d6e5150e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x555d6e515160 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x555d6e515568 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x555d6e5152f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x555d6e515378 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x555d6e515440 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x555d6e515620 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x555d6e515658 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x555d6e5156b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x555d6e515720 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x555d6e515780 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x555d6e5157d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x555d6e5157d0
| `-ParmVarDecl 0x555d6e5158e8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x555d6e515988 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x555d6e515988
| `-ParmVarDecl 0x555d6e515a98 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x555d6e6776f8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d6e6206c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x555d6e620898 prev 0x555d6e6206c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555d6e620928 <col:46, col:52> col:46 public
|-TypedefDecl 0x555d6e620950 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62c9d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x555d6e62c980 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x555d6e620e00 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x555d6e620d00 'type'
|     `-TemplateSpecializationType 0x555d6e620c90 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x555d6e620b70 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x555d6e620b50 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x555d6e620b30 <col:24> 'unsigned long' 4
|       `-RecordType 0x555d6e620c70 'char_array<4>'
|         `-ClassTemplateSpecialization 0x555d6e620b90 'char_array'
|-TypedefDecl 0x555d6e62ca88 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x555d6e62ca50 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x555d6e62ca30 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x555d6e62c9d0 'type'
|     `-ElaboratedType 0x555d6e62c980 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x555d6e620e00 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x555d6e620d00 'type'
|         `-TemplateSpecializationType 0x555d6e620c90 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x555d6e620b70 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x555d6e620b50 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x555d6e620b30 <col:24> 'unsigned long' 4
|           `-RecordType 0x555d6e620c70 'char_array<4>'
|             `-ClassTemplateSpecialization 0x555d6e620b90 'char_array'
|-CXXMethodDecl 0x555d6e62cc08 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x555d6e62cb18 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x555d6e62ccf8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555d6e62cdd8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x555d6e62d0a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555d6e62cfb0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x555d6e62d2e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d6e62d160 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e62d1d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62d4b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d6e62d3a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e62d420 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62d618 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555d6e62d6e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555d6e62d938 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d6e62d7a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555d6e62d820 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62db98 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x555d6e62da08 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555d6e62da80 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62dd58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555d6e62dc68 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62df18 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555d6e62de20 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62dfd0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d6e62e080 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555d6e62e2b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d6e62e130 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d6e62e1a8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d6e62e558 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555d6e62e460 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x555d6e62e620 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x555d6e62e670 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555d6e62e6c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d6e61f0c8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x555d6e61f2d8 prev 0x555d6e61f0c8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555d6e620630 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555d6e6205e0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x555d6e6205c0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x555d6e620470 'type'
|     `-SubstTemplateTypeParmType 0x555d6e620290 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x555d6e2f5eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e2f5e58 'T'
|       `-RecordType 0x555d6e61fde0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555d6e61fcf8 'sized_array_memory'
|-FieldDecl 0x555d6e62e710 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x555d6e62e760 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555d6e62e798 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|   |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555d6e32db48 'T'
|   `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62e828 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x555d6e62e7f0 'int &'
|   `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62e8e8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x555d6e62e8b0 'const int &'
|   `-QualType 0x555d6e61f371 'const int' const
|     `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62e978 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x555d6e62e940 'int *'
|   `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62ea08 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x555d6e62e9d0 'const int *'
|   `-QualType 0x555d6e61f371 'const int' const
|     `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62f5f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x555d6e62f5a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x555d6e62f580 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x555d6e62f510 'type'
|     `-SubstTemplateTypeParmType 0x555d6e62f2d0 'int' sugar
|       |-TemplateTypeParmType 0x555d6e300cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e300c60 'T'
|       `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62f658 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x555d6e62e8b0 'const int &'
|   `-QualType 0x555d6e61f371 'const int' const
|     `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62f6b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62f718 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x555d6e62e940 'int *'
|   `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|     |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d6e32db48 'T'
|     `-BuiltinType 0x555d6e030580 'int'
|-TypedefDecl 0x555d6e62f780 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x555d6e62e9d0 'const int *'
|   `-QualType 0x555d6e61f371 'const int' const
|     `-SubstTemplateTypeParmType 0x555d6e61f370 'int' sugar
|       |-TemplateTypeParmType 0x555d6e32dba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d6e32db48 'T'
|       `-BuiltinType 0x555d6e030580 'int'
|-EnumDecl 0x555d6e62f7d8 <line:134:5> col:5
| `-EnumConstantDecl 0x555d6e62f8d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555d6e62f8b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555d6e32f228 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555d6e32f200 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555d6e32f1e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555d6e62f958 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555d6e62fba8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e62fa10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e62fab0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x555d6e62fe68 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x555d6e62fd50 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x555d6e630128 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x555d6e630010 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x555d6e630470 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x555d6e630350 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x555d6e630780 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x555d6e630660 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x555d6e630a70 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e6308b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e630930 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d6e630b98 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555d6e630c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e630cd0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e630d18 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555d6e630dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e630e20 <col:30> Inherited
|-CXXMethodDecl 0x555d6e630ee8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d6e630f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e630ff0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e631038 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d6e6310e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e631140 <col:30> Inherited
|-CXXMethodDecl 0x555d6e631188 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d6e631238 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e631290 <col:30> Inherited
|-CXXMethodDecl 0x555d6e6312d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d6e631388 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d6e6313e0 <col:30> Inherited
|-CXXMethodDecl 0x555d6e631408 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d6e6314b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d6e631568 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555d6e631728 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e631618 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d6e631690 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d6e631878 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e6317e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e631a28 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x555d6e631930 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d6e631ae0 <col:20>
| `-OptimizeNoneAttr 0x555d6e631b38 <col:30>
|-CXXMethodDecl 0x555d6e631c58 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x555d6e631b60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d6e631d10 <col:20>
| `-OptimizeNoneAttr 0x555d6e631d68 <col:30>
|-CXXMethodDecl 0x555d6e631e20 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e631d90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e631f68 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d6e631ed8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e632098 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x555d6e6321c8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x555d6e632298 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x555d6e632368 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x555d6e6324a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d6e632418 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e6325f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d6e632560 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d6e632738 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x555d6e6326a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d6e6327f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555d6e6328f0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555d6e632860 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d6e6329a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555d6e632a68 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x555d6e632b68 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x555d6e632ce8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555d6e632c28 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x555d6e6334a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555d6e632da0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x555d6e633408 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x555d6e633308 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x555d6e633588 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d6e6336d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555d6e633648 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d6e633790 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555d6e6339d8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d6e633850 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555d6e6338c8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d6e633b98 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x555d6e633aa8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555d6e633de8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x555d6e633c60 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555d6e633cd8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555d6e633ea8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555d6e634108 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x555d6e634010 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x555d6e6351d0 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e61d238 prev 0x555d6e602d78 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d6e61d330 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x555d6e61d420 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x555d6e645b80 <col:16, line:828:9>
|-CXXDestructorDecl 0x555d6e61d510 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x555d6e645b90 <col:25, line:830:9>
|-CXXMethodDecl 0x555d6e61d610 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x555d6e61d6c0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x555d6e61d768 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555d6e61d768
| `-ParmVarDecl 0x555d6e61d878 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x555d6e61e038 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555d6e61e038
  `-ParmVarDecl 0x555d6e61e148 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e602b88 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x555d6e602ce8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x555d6e602d78 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x555d6e602e30 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x555d6e602f38 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x555d6e602e68 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d6e636788 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d6e636768 <col:31> 'int' 0
|-CXXConstructorDecl 0x555d6e603258 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e6030d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x555d6e603148 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d6e6367c0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d6e6367a0 <col:59> 'int' 0
|-CXXConstructorDecl 0x555d6e603430 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e603320 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x555d6e603398 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d6e6367f8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d6e6367d8 <col:55> 'int' 0
|-CXXConstructorDecl 0x555d6e6037e8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d6e6035d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x555d6e603648 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x555d6e6036c0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d6e636830 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d6e636810 <col:31> 'int' 0
|-CXXConstructorDecl 0x555d6e6039a8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x555d6e6038e8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x555d6e603aa0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x555d6e603c88 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x555d6e603b90 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x555d6e603d78 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x555d6e636be0 <col:24, line:291:5>
|   `-ReturnStmt 0x555d6e636bd0 <line:290:9, col:79>
|     `-BinaryOperator 0x555d6e636bb0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x555d6e636a88 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x555d6e6369e0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x555d6e6369c0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x555d6e6368b8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x555d6e6368a0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x555d6e636888 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x555d6e636858 <col:18> 'Vector<String> *const' lvalue ->_conf 0x555d6e61f060
|       | |   |       `-CXXThisExpr 0x555d6e636848 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x555d6e6369a8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x555d6e636990 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x555d6e636958 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x555d6e636928 <col:28, col:35> '<bound member function type>' ->size 0x555d6e5e2408
|       | |           `-ImplicitCastExpr 0x555d6e636978 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x555d6e636910 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x555d6e6368e0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x555d6e61f060
|       | |                 `-CXXThisExpr 0x555d6e6368d0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x555d6e636a70 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x555d6e636a58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x555d6e636a40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x555d6e636a10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x555d6e635310
|       |         `-CXXThisExpr 0x555d6e636a00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x555d6e636b90 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x555d6e636b78 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555d6e636b60 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555d6e636b20 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555d6e636b08 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555d6e636ab8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555d6e6353c0
|         |     |   `-CXXThisExpr 0x555d6e636aa8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555d6e636ae8 <col:73> 'int' 0
|         `-IntegerLiteral 0x555d6e636b40 <col:79> 'int' 0
|-CXXMethodDecl 0x555d6e603e38 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x555d6e636db8 <col:32, line:296:5>
|   `-ReturnStmt 0x555d6e636da8 <line:295:9, col:49>
|     `-BinaryOperator 0x555d6e636d88 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x555d6e636c68 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x555d6e636c50 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x555d6e636c38 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x555d6e636c08 <col:17> 'Args::Slot *const' lvalue ->_slots 0x555d6e635310
|       |       `-CXXThisExpr 0x555d6e636bf8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x555d6e636d68 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x555d6e636d50 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555d6e636d38 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555d6e636cf8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555d6e636ce0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555d6e636c90 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555d6e6353c0
|         |     |   `-CXXThisExpr 0x555d6e636c80 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555d6e636cc0 <col:43> 'int' 0
|         `-IntegerLiteral 0x555d6e636d18 <col:49> 'int' 0
|-CXXMethodDecl 0x555d6e603f28 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x555d6e636fc8 <col:19, line:306:5>
|   |-IfStmt 0x555d6e636ee8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x555d6e636e28 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x555d6e636e10 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x555d6e636de0 <col:13> 'Vector<String> *' lvalue ->_conf 0x555d6e61f060
|   | |     `-CXXThisExpr 0x555d6e636dd0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x555d6e636ec8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x555d6e636e98 <col:13, col:20> '<bound member function type>' ->clear 0x555d6e5e4ea8
|   |     `-ImplicitCastExpr 0x555d6e636e80 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x555d6e636e50 <col:13> 'Vector<String> *' lvalue ->_conf 0x555d6e61f060
|   |         `-CXXThisExpr 0x555d6e636e40 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x555d6e636f70 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x555d6e636f40 <col:9, col:16> '<bound member function type>' .clear 0x555d6e633ea8
|   |   `-MemberExpr 0x555d6e636f10 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x555d6e6352b0
|   |     `-CXXThisExpr 0x555d6e636f00 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x555d6e636fb8 <line:305:9, col:17>
|     `-UnaryOperator 0x555d6e636fa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e636f90 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d6e6041a8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x555d6e6040b0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x555d6e604328 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x555d6e604260 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x555d6e6046a8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x555d6e6043d0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x555d6e604608 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x555d6e604478 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x555d6e6044f0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x555d6e6372e8 <col:67, line:327:5>
|     |-WhileStmt 0x555d6e637298 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x555d6e6370b0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x555d6e637030 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555d6e54f788 0x555d6e398d68 0x555d6e398a40 0x555d6e38a220 0x555d6e389ed0 0x555d6e3897c0 0x555d6e35c130 0x555d6e2e85f0
|     | | |-DeclRefExpr 0x555d6e636ff0 <col:16> 'Iter' lvalue ParmVar 0x555d6e604478 'begin' 'Iter'
|     | | `-DeclRefExpr 0x555d6e637010 <col:25> 'Iter' lvalue ParmVar 0x555d6e6044f0 'end' 'Iter'
|     | `-CompoundStmt 0x555d6e637278 <col:30, line:325:9>
|     |   |-CallExpr 0x555d6e637218 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x555d6e6370f8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x555d6e6371e8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x555d6e637178 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|     |   |   `-DeclRefExpr 0x555d6e637158 <col:24> 'Iter' lvalue ParmVar 0x555d6e604478 'begin' 'Iter'
|     |   `-UnaryOperator 0x555d6e637260 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x555d6e637240 <col:15> 'Iter' lvalue ParmVar 0x555d6e604478 'begin' 'Iter'
|     `-ReturnStmt 0x555d6e6372d8 <line:326:9, col:17>
|       `-UnaryOperator 0x555d6e6372c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e6372b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d6e6047b0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x555d6e604720 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x555d6e6048f8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x555d6e604868 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x555d6e6049c0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x555d6e6373c8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x555d6e637368 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x555d6e637318 <col:9> '<bound member function type>' ->reset_from 0x555d6e635738
|   | | `-CXXThisExpr 0x555d6e637308 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x555d6e637348 <col:20> 'int' 0
|   `-ReturnStmt 0x555d6e6373b8 <line:352:9, col:17>
|     `-UnaryOperator 0x555d6e6373a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e637390 <col:17> 'Args *' this
|-VarDecl 0x555d6e604a78 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d6e604ae0 <col:38> 'int' 1
|-VarDecl 0x555d6e604b70 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d6e604bd8 <col:39> 'int' 2
|-VarDecl 0x555d6e604c68 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d6e604cd0 <col:39> 'int' 4
|-VarDecl 0x555d6e604d60 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d6e604dc8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x555d6e605148 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x555d6e604e40 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e6050a8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555d6e604ef0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e604f98 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x555d6e637520 <col:43, line:371:5>
|     `-ReturnStmt 0x555d6e637510 <line:370:9, col:34>
|       `-CallExpr 0x555d6e6374d8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e6373f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e637478 <col:21> 'const char *' lvalue ParmVar 0x555d6e604ef0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e637498 <col:30> 'int' 0
|         `-DeclRefExpr 0x555d6e6374b8 <col:33> 'T' lvalue ParmVar 0x555d6e604f98 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e605478 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x555d6e6051b0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e6053d8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555d6e605260 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e605308 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555d6e637670 <col:45, line:375:5>
|     `-ReturnStmt 0x555d6e637660 <line:374:9, col:42>
|       `-CallExpr 0x555d6e637628 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e637548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e6375c8 <col:21> 'const char *' lvalue ParmVar 0x555d6e605260 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e6375e8 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int'
|         `-DeclRefExpr 0x555d6e637608 <col:41> 'T' lvalue ParmVar 0x555d6e605308 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e6057a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x555d6e6054e0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e605708 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555d6e605590 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e605638 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555d6e6377c0 <col:45, line:379:5>
|     `-ReturnStmt 0x555d6e6377b0 <line:378:9, col:43>
|       `-CallExpr 0x555d6e637778 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e637698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e637718 <col:21> 'const char *' lvalue ParmVar 0x555d6e605590 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e637738 <col:30> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         `-DeclRefExpr 0x555d6e637758 <col:42> 'T' lvalue ParmVar 0x555d6e605638 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e605ad8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x555d6e605810 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x555d6e605a38 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x555d6e6058c0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555d6e605968 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x555d6e6379c0 <col:46, line:383:5>
| |   `-ReturnStmt 0x555d6e6379b0 <line:382:9, col:55>
| |     `-CallExpr 0x555d6e637978 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555d6e6377e8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555d6e637868 <col:21> 'const char *' lvalue ParmVar 0x555d6e6058c0 'keyword' 'const char *'
| |       |-BinaryOperator 0x555d6e637938 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x555d6e6378e8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x555d6e6378c8 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x555d6e637920 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555d6e637900 <col:42> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x555d6e637958 <col:54> 'T' lvalue ParmVar 0x555d6e605968 'x' 'T &'
| `-CXXMethodDecl 0x555d6e677b88 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x555d6e6779a8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x555d6e677a78 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x555d6e605ed8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x555d6e605b40 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e605e38 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x555d6e605bf0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e605c70 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e605d18 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x555d6e637b00 <col:54, line:388:5>
|     |-CallExpr 0x555d6e637a88 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e6379d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d6e637a18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d6e637a28 <col:30> 'const char *' lvalue ParmVar 0x555d6e605bf0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e637a48 <col:39> 'int' lvalue ParmVar 0x555d6e605c70 'flags' 'int'
|     | `-DeclRefExpr 0x555d6e637a68 <col:46> 'T' lvalue ParmVar 0x555d6e605d18 'x' 'T &'
|     `-ReturnStmt 0x555d6e637af0 <line:387:9, col:17>
|       `-UnaryOperator 0x555d6e637ad8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e637ac8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e606388 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x555d6e605f48 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e605fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d6e6062e8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555d6e606088 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e606128 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e6061c8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e637c70 <col:74, line:403:5>
|     `-ReturnStmt 0x555d6e637c60 <line:402:9, col:56>
|       `-CallExpr 0x555d6e637c20 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e637b30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e637ba0 <col:28> 'const char *' lvalue ParmVar 0x555d6e606088 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e637bc0 <col:37> 'int' 0
|         |-DeclRefExpr 0x555d6e637be0 <col:40> 'T' lvalue ParmVar 0x555d6e606128 'x' 'T &'
|         `-DeclRefExpr 0x555d6e637c00 <col:43> 'const V' lvalue ParmVar 0x555d6e6061c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d6e6067f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555d6e6063f8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e606478 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d6e606758 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555d6e606538 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6065d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e606678 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e637dd8 <col:76, line:407:5>
|     `-ReturnStmt 0x555d6e637dc8 <line:406:9, col:65>
|       `-CallExpr 0x555d6e637d88 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e637c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e637d08 <col:28> 'const char *' lvalue ParmVar 0x555d6e606538 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e637d28 <col:37> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         |-DeclRefExpr 0x555d6e637d48 <col:49> 'T' lvalue ParmVar 0x555d6e6065d8 'x' 'T &'
|         `-DeclRefExpr 0x555d6e637d68 <col:52> 'const V' lvalue ParmVar 0x555d6e606678 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d6e606d48 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x555d6e606868 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e6068e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d6e606ca8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555d6e6069a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e606a28 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e606ac8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e606b68 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e637f40 <col:85, line:412:5>
|     |-CallExpr 0x555d6e637ec0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e637df0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555d6e637e30 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555d6e637e40 <col:37> 'const char *' lvalue ParmVar 0x555d6e6069a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e637e60 <col:46> 'int' lvalue ParmVar 0x555d6e606a28 'flags' 'int'
|     | |-DeclRefExpr 0x555d6e637e80 <col:53> 'T' lvalue ParmVar 0x555d6e606ac8 'x' 'T &'
|     | `-DeclRefExpr 0x555d6e637ea0 <col:56> 'const V' lvalue ParmVar 0x555d6e606b68 'default_value' 'const V &'
|     `-ReturnStmt 0x555d6e637f30 <line:411:9, col:17>
|       `-UnaryOperator 0x555d6e637f18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e637f08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e6071d8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x555d6e606dc0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e606e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e607138 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e606ef8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e606f70 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e607018 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x555d6e6380c0 <col:53, line:425:5>
|     `-ReturnStmt 0x555d6e6380b0 <line:424:9, col:42>
|       `-CallExpr 0x555d6e638070 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e637f70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e637ff0 <col:21> 'const char *' lvalue ParmVar 0x555d6e606ef8 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e638010 <col:30> 'int' 0
|         |-DeclRefExpr 0x555d6e638030 <col:33> 'P' lvalue ParmVar 0x555d6e606f70 'parser' 'P'
|         `-DeclRefExpr 0x555d6e638050 <col:41> 'T' lvalue ParmVar 0x555d6e607018 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e607628 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x555d6e607248 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e6072c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e607588 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e607388 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e607400 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e6074a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555d6e638238 <col:55, line:429:5>
|     `-ReturnStmt 0x555d6e638228 <line:428:9, col:50>
|       `-CallExpr 0x555d6e6381e8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e6380e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638168 <col:21> 'const char *' lvalue ParmVar 0x555d6e607388 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e638188 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int'
|         |-DeclRefExpr 0x555d6e6381a8 <col:41> 'P' lvalue ParmVar 0x555d6e607400 'parser' 'P'
|         `-DeclRefExpr 0x555d6e6381c8 <col:49> 'T' lvalue ParmVar 0x555d6e6074a8 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e607a78 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x555d6e607698 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e607718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e6079d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e6077d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e607850 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e6078f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555d6e6383b0 <col:55, line:433:5>
|     `-ReturnStmt 0x555d6e6383a0 <line:432:9, col:51>
|       `-CallExpr 0x555d6e638360 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638260 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e6382e0 <col:21> 'const char *' lvalue ParmVar 0x555d6e6077d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e638300 <col:30> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         |-DeclRefExpr 0x555d6e638320 <col:42> 'P' lvalue ParmVar 0x555d6e607850 'parser' 'P'
|         `-DeclRefExpr 0x555d6e638340 <col:50> 'T' lvalue ParmVar 0x555d6e6078f8 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e607ec8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x555d6e607ae8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e607b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e607e28 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e607c28 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e607ca0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e607d48 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x555d6e6385d8 <col:56, line:437:5>
|     `-ReturnStmt 0x555d6e6385c8 <line:436:9, col:63>
|       `-CallExpr 0x555d6e638588 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e6383d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638458 <col:21> 'const char *' lvalue ParmVar 0x555d6e607c28 'keyword' 'const char *'
|         |-BinaryOperator 0x555d6e638528 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555d6e6384d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d6e6384b8 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d6e638510 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d6e6384f0 <col:42> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555d6e638548 <col:54> 'P' lvalue ParmVar 0x555d6e607ca0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e638568 <col:62> 'T' lvalue ParmVar 0x555d6e607d48 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e6083f8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x555d6e607f38 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e607fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e608358 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d6e608078 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6080f8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e608170 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e608218 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x555d6e638740 <col:64, line:442:5>
|     |-CallExpr 0x555d6e6386c0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e6385f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d6e638630 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d6e638640 <col:30> 'const char *' lvalue ParmVar 0x555d6e608078 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e638660 <col:39> 'int' lvalue ParmVar 0x555d6e6080f8 'flags' 'int'
|     | |-DeclRefExpr 0x555d6e638680 <col:46> 'P' lvalue ParmVar 0x555d6e608170 'parser' 'P'
|     | `-DeclRefExpr 0x555d6e6386a0 <col:54> 'T' lvalue ParmVar 0x555d6e608218 'x' 'T &'
|     `-ReturnStmt 0x555d6e638730 <line:441:9, col:17>
|       `-UnaryOperator 0x555d6e638718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e638708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e6089f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x555d6e608470 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e6084e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d6e608568 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d6e608958 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555d6e608630 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6086a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e608748 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e608818 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e6388d8 <col:84, line:458:5>
|     `-ReturnStmt 0x555d6e6388c8 <line:457:9, col:64>
|       `-CallExpr 0x555d6e638880 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e6387e0 <col:28> 'const char *' lvalue ParmVar 0x555d6e608630 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e638800 <col:37> 'int' 0
|         |-DeclRefExpr 0x555d6e638820 <col:40> 'P' lvalue ParmVar 0x555d6e6086a8 'parser' 'P'
|         |-DeclRefExpr 0x555d6e638840 <col:48> 'T' lvalue ParmVar 0x555d6e608748 'x' 'T &'
|         `-DeclRefExpr 0x555d6e638860 <col:51> 'const V' lvalue ParmVar 0x555d6e608818 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d6e60c678 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555d6e608a70 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e608ae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d6e60c268 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d6e60c5d8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555d6e60c330 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60c3a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60c448 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e60c4e8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e638a68 <col:86, line:462:5>
|     `-ReturnStmt 0x555d6e638a58 <line:461:9, col:73>
|       `-CallExpr 0x555d6e638a10 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638970 <col:28> 'const char *' lvalue ParmVar 0x555d6e60c330 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e638990 <col:37> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         |-DeclRefExpr 0x555d6e6389b0 <col:49> 'P' lvalue ParmVar 0x555d6e60c3a8 'parser' 'P'
|         |-DeclRefExpr 0x555d6e6389d0 <col:57> 'T' lvalue ParmVar 0x555d6e60c448 'x' 'T &'
|         `-DeclRefExpr 0x555d6e6389f0 <col:60> 'const V' lvalue ParmVar 0x555d6e60c4e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d6e60ccd8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x555d6e60c6f0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60c768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d6e60c7e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d6e60cc38 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555d6e60c8b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60c930 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e60c9a8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60ca48 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e60cae8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d6e638bf8 <col:95, line:467:5>
|     |-CallExpr 0x555d6e638b70 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e638a80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555d6e638ac0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555d6e638ad0 <col:37> 'const char *' lvalue ParmVar 0x555d6e60c8b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e638af0 <col:46> 'int' lvalue ParmVar 0x555d6e60c930 'flags' 'int'
|     | |-DeclRefExpr 0x555d6e638b10 <col:53> 'P' lvalue ParmVar 0x555d6e60c9a8 'parser' 'P'
|     | |-DeclRefExpr 0x555d6e638b30 <col:61> 'T' lvalue ParmVar 0x555d6e60ca48 'x' 'T &'
|     | `-DeclRefExpr 0x555d6e638b50 <col:64> 'const V' lvalue ParmVar 0x555d6e60cae8 'default_value' 'const V &'
|     `-ReturnStmt 0x555d6e638be8 <line:466:9, col:17>
|       `-UnaryOperator 0x555d6e638bd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e638bc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e60d2b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x555d6e60cd58 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60cdd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e60ce58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e60d218 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e60cf20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60cf98 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60d038 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d6e60d0d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d6e638da0 <col:63, line:481:5>
|     `-ReturnStmt 0x555d6e638d90 <line:480:9, col:47>
|       `-CallExpr 0x555d6e638d48 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638ca8 <col:21> 'const char *' lvalue ParmVar 0x555d6e60cf20 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e638cc8 <col:30> 'int' 0
|         |-DeclRefExpr 0x555d6e638ce8 <col:33> 'P' lvalue ParmVar 0x555d6e60cf98 'parser' 'P'
|         |-DeclRefExpr 0x555d6e638d08 <col:41> 'T1' lvalue ParmVar 0x555d6e60d038 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d6e638d28 <col:45> 'T2' lvalue ParmVar 0x555d6e60d0d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d6e60d838 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x555d6e60d330 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60d3a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e60d428 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e60d798 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e60d4f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60d568 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60d608 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d6e60d6a8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d6e638f40 <col:65, line:485:5>
|     `-ReturnStmt 0x555d6e638f30 <line:484:9, col:55>
|       `-CallExpr 0x555d6e638ee8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638e48 <col:21> 'const char *' lvalue ParmVar 0x555d6e60d4f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e638e68 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int'
|         |-DeclRefExpr 0x555d6e638e88 <col:41> 'P' lvalue ParmVar 0x555d6e60d568 'parser' 'P'
|         |-DeclRefExpr 0x555d6e638ea8 <col:49> 'T1' lvalue ParmVar 0x555d6e60d608 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d6e638ec8 <col:53> 'T2' lvalue ParmVar 0x555d6e60d6a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d6e60ddb8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x555d6e60d8b0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60d928 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e60d9a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e60dd18 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e60da70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60dae8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60db88 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d6e60dc28 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d6e6390e0 <col:65, line:489:5>
|     `-ReturnStmt 0x555d6e6390d0 <line:488:9, col:56>
|       `-CallExpr 0x555d6e639088 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e638f68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e638fe8 <col:21> 'const char *' lvalue ParmVar 0x555d6e60da70 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e639008 <col:30> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         |-DeclRefExpr 0x555d6e639028 <col:42> 'P' lvalue ParmVar 0x555d6e60dae8 'parser' 'P'
|         |-DeclRefExpr 0x555d6e639048 <col:50> 'T1' lvalue ParmVar 0x555d6e60db88 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d6e639068 <col:54> 'T2' lvalue ParmVar 0x555d6e60dc28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d6e60e338 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x555d6e60de30 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60dea8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e60df28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e60e298 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e60dff0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60e068 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60e108 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d6e60e1a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d6e639330 <col:66, line:493:5>
|     `-ReturnStmt 0x555d6e639320 <line:492:9, col:68>
|       `-CallExpr 0x555d6e6392d8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639108 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639188 <col:21> 'const char *' lvalue ParmVar 0x555d6e60dff0 'keyword' 'const char *'
|         |-BinaryOperator 0x555d6e639258 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555d6e639208 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d6e6391e8 <col:30> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d6e639240 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d6e639220 <col:42> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555d6e639278 <col:54> 'P' lvalue ParmVar 0x555d6e60e068 'parser' 'P'
|         |-DeclRefExpr 0x555d6e639298 <col:62> 'T1' lvalue ParmVar 0x555d6e60e108 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d6e6392b8 <col:66> 'T2' lvalue ParmVar 0x555d6e60e1a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d6e60e998 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x555d6e60e3b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60e428 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e60e4a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e60e8f8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e60e570 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60e5f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e60e668 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60e708 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d6e60e7a8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d6e6394c0 <col:74, line:498:5>
|     |-CallExpr 0x555d6e639438 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e639348 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d6e639388 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d6e639398 <col:30> 'const char *' lvalue ParmVar 0x555d6e60e570 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e6393b8 <col:39> 'int' lvalue ParmVar 0x555d6e60e5f0 'flags' 'int'
|     | |-DeclRefExpr 0x555d6e6393d8 <col:46> 'P' lvalue ParmVar 0x555d6e60e668 'parser' 'P'
|     | |-DeclRefExpr 0x555d6e6393f8 <col:54> 'T1' lvalue ParmVar 0x555d6e60e708 'x1' 'T1 &'
|     | `-DeclRefExpr 0x555d6e639418 <col:58> 'T2' lvalue ParmVar 0x555d6e60e7a8 'x2' 'T2 &'
|     `-ReturnStmt 0x555d6e6394b0 <line:497:9, col:17>
|       `-UnaryOperator 0x555d6e639498 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e639488 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e60ecf8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x555d6e60ea18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e60ec58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d6e60ead0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60eb48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x555d6e639608 <col:52, line:509:5>
|     `-ReturnStmt 0x555d6e6395f8 <line:508:9, col:44>
|       `-CallExpr 0x555d6e6395c0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e6394f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639560 <col:26> 'const char *' lvalue ParmVar 0x555d6e60ead0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e639580 <col:35> 'int' 0
|         `-DeclRefExpr 0x555d6e6395a0 <col:38> 'P' lvalue ParmVar 0x555d6e60eb48 'parser' 'P'
|-FunctionTemplateDecl 0x555d6e60eff8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x555d6e60ed60 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e60ef58 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d6e60ee10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60ee88 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555d6e639748 <col:54, line:513:5>
|     `-ReturnStmt 0x555d6e639738 <line:512:9, col:52>
|       `-CallExpr 0x555d6e639700 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e6396a0 <col:26> 'const char *' lvalue ParmVar 0x555d6e60ee10 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e6396c0 <col:35> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int'
|         `-DeclRefExpr 0x555d6e6396e0 <col:46> 'P' lvalue ParmVar 0x555d6e60ee88 'parser' 'P'
|-FunctionTemplateDecl 0x555d6e60f2f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x555d6e60f060 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e60f258 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d6e60f110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60f188 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555d6e639888 <col:54, line:517:5>
|     `-ReturnStmt 0x555d6e639878 <line:516:9, col:53>
|       `-CallExpr 0x555d6e639840 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e6397e0 <col:26> 'const char *' lvalue ParmVar 0x555d6e60f110 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e639800 <col:35> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int'
|         `-DeclRefExpr 0x555d6e639820 <col:47> 'P' lvalue ParmVar 0x555d6e60f188 'parser' 'P'
|-FunctionTemplateDecl 0x555d6e60f5f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x555d6e60f360 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e60f558 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d6e60f410 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60f488 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x555d6e639a78 <col:55, line:521:5>
|     `-ReturnStmt 0x555d6e639a68 <line:520:9, col:65>
|       `-CallExpr 0x555d6e639a30 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e6398b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639920 <col:26> 'const char *' lvalue ParmVar 0x555d6e60f410 'keyword' 'const char *'
|         |-BinaryOperator 0x555d6e6399f0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x555d6e6399a0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d6e639980 <col:35> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d6e6399d8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d6e6399b8 <col:47> 'const int' lvalue Var 0x555d6e604b70 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x555d6e639a10 <col:59> 'P' lvalue ParmVar 0x555d6e60f488 'parser' 'P'
|-FunctionTemplateDecl 0x555d6e60f9c8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x555d6e60f660 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e60f928 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555d6e60f710 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60f790 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e60f808 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x555d6e639bb8 <col:63, line:526:5>
|     |-CallExpr 0x555d6e639b40 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e639a90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x555d6e639ad0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x555d6e639ae0 <col:35> 'const char *' lvalue ParmVar 0x555d6e60f710 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d6e639b00 <col:44> 'int' lvalue ParmVar 0x555d6e60f790 'flags' 'int'
|     | `-DeclRefExpr 0x555d6e639b20 <col:51> 'P' lvalue ParmVar 0x555d6e60f808 'parser' 'P'
|     `-ReturnStmt 0x555d6e639ba8 <line:525:9, col:17>
|       `-UnaryOperator 0x555d6e639b90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e639b80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e60fe18 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x555d6e60fa38 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60fab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e60fd78 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e60fb78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e60fbf0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e60fc98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x555d6e639d10 <col:58, line:541:5>
|     `-ReturnStmt 0x555d6e639d00 <line:540:9, col:39>
|       `-CallExpr 0x555d6e639cc8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639be8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639c68 <col:21> 'const char *' lvalue ParmVar 0x555d6e60fb78 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e639c88 <col:30> 'P' lvalue ParmVar 0x555d6e60fbf0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e639ca8 <col:38> 'T' lvalue ParmVar 0x555d6e60fc98 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e610268 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x555d6e60fe88 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e60ff08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e6101c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e60ffc8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e610040 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e6100e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555d6e639e48 <col:60, line:545:5>
|     `-ReturnStmt 0x555d6e639e38 <line:544:9, col:41>
|       `-CallExpr 0x555d6e639e00 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639d38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639da0 <col:23> 'const char *' lvalue ParmVar 0x555d6e60ffc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e639dc0 <col:32> 'P' lvalue ParmVar 0x555d6e610040 'parser' 'P'
|         `-DeclRefExpr 0x555d6e639de0 <col:40> 'T' lvalue ParmVar 0x555d6e6100e8 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e6106b8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x555d6e6102d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e610358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e610618 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e610418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e610490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e610538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555d6e639f80 <col:60, line:549:5>
|     `-ReturnStmt 0x555d6e639f70 <line:548:9, col:41>
|       `-CallExpr 0x555d6e639f38 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639e70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e639ed8 <col:23> 'const char *' lvalue ParmVar 0x555d6e610418 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e639ef8 <col:32> 'P' lvalue ParmVar 0x555d6e610490 'parser' 'P'
|         `-DeclRefExpr 0x555d6e639f18 <col:40> 'T' lvalue ParmVar 0x555d6e610538 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e610b08 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x555d6e610728 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e6107a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e610a68 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e610868 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6108e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e610988 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63a0b8 <col:61, line:553:5>
|     `-ReturnStmt 0x555d6e63a0a8 <line:552:9, col:42>
|       `-CallExpr 0x555d6e63a070 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e639fa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63a010 <col:24> 'const char *' lvalue ParmVar 0x555d6e610868 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e63a030 <col:33> 'P' lvalue ParmVar 0x555d6e6108e0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e63a050 <col:41> 'T' lvalue ParmVar 0x555d6e610988 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e610fe8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x555d6e610b78 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e610bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e610f48 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d6e610cb8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e610d38 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e610db0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e610e58 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63a230 <col:69, line:557:5>
|     `-ReturnStmt 0x555d6e63a220 <line:556:9, col:46>
|       `-CallExpr 0x555d6e63a1e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63a0e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63a160 <col:21> 'const char *' lvalue ParmVar 0x555d6e610cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e63a180 <col:30> 'int' lvalue ParmVar 0x555d6e610d38 'flags' 'int'
|         |-DeclRefExpr 0x555d6e63a1a0 <col:37> 'P' lvalue ParmVar 0x555d6e610db0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e63a1c0 <col:45> 'T' lvalue ParmVar 0x555d6e610e58 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e6112f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x555d6e611060 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e611258 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d6e611110 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e611188 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x555d6e63a370 <col:56, line:571:5>
|     `-ReturnStmt 0x555d6e63a360 <line:570:9, col:48>
|       `-CallExpr 0x555d6e63a328 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63a258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63a2c8 <col:30> 'const char *' lvalue ParmVar 0x555d6e611110 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e63a2e8 <col:39> 'int' 0
|         `-DeclRefExpr 0x555d6e63a308 <col:42> 'P' lvalue ParmVar 0x555d6e611188 'parser' 'P'
|-FunctionTemplateDecl 0x555d6e611688 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x555d6e611360 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e6115e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555d6e611410 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e611490 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e611508 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555d6e63a540 <col:67, line:576:5>
|     |-CallExpr 0x555d6e63a4c8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e63a388 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555d6e63a3c8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555d6e63a3d8 <col:39> 'const char *' lvalue ParmVar 0x555d6e611410 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d6e63a488 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d6e63a438 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d6e63a3f8 <col:48> 'int' lvalue ParmVar 0x555d6e611490 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d6e63a470 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d6e63a450 <col:56> 'const int' lvalue Var 0x555d6e604d60 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x555d6e63a4a8 <col:68> 'P' lvalue ParmVar 0x555d6e611508 'parser' 'P'
|     `-ReturnStmt 0x555d6e63a530 <line:575:9, col:17>
|       `-UnaryOperator 0x555d6e63a518 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e63a508 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e611ad8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x555d6e6116f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e611778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e611a38 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d6e611838 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6118b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e611958 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63a6b0 <col:62, line:592:5>
|     `-ReturnStmt 0x555d6e63a6a0 <line:591:9, col:51>
|       `-CallExpr 0x555d6e63a660 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63a570 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63a5e0 <col:30> 'const char *' lvalue ParmVar 0x555d6e611838 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e63a600 <col:39> 'int' 0
|         |-DeclRefExpr 0x555d6e63a620 <col:42> 'P' lvalue ParmVar 0x555d6e6118b0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e63a640 <col:50> 'T' lvalue ParmVar 0x555d6e611958 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e611fb8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x555d6e611b48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e611bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e611f18 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d6e611c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e611d08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e611d80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e611e28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63a8a8 <col:73, line:597:5>
|     |-CallExpr 0x555d6e63a828 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e63a6c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555d6e63a708 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555d6e63a718 <col:39> 'const char *' lvalue ParmVar 0x555d6e611c88 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d6e63a7c8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d6e63a778 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d6e63a738 <col:48> 'int' lvalue ParmVar 0x555d6e611d08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d6e63a7b0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d6e63a790 <col:56> 'const int' lvalue Var 0x555d6e604d60 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555d6e63a7e8 <col:68> 'P' lvalue ParmVar 0x555d6e611d80 'parser' 'P'
|     | `-DeclRefExpr 0x555d6e63a808 <col:76> 'T' lvalue ParmVar 0x555d6e611e28 'x' 'T &'
|     `-ReturnStmt 0x555d6e63a898 <line:596:9, col:17>
|       `-UnaryOperator 0x555d6e63a880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e63a870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e612568 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x555d6e612030 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e6120a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e6124c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d6e612168 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6121e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e6123a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d6e63aa18 <col:65, line:614:5>
|     `-ReturnStmt 0x555d6e63aa08 <line:613:9, col:46>
|       `-CallExpr 0x555d6e63a9c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63a8d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63a948 <col:25> 'const char *' lvalue ParmVar 0x555d6e612168 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e63a968 <col:34> 'int' 0
|         |-DeclRefExpr 0x555d6e63a988 <col:37> 'P' lvalue ParmVar 0x555d6e6121e0 'parser' 'P'
|         `-DeclRefExpr 0x555d6e63a9a8 <col:45> 'Vector<T>' lvalue ParmVar 0x555d6e6123a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555d6e612998 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x555d6e6125d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e6128f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x555d6e612690 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e6127e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d6e63ac30 <col:55, line:618:5>
|     `-ReturnStmt 0x555d6e63ac20 <line:617:9, col:55>
|       `-CallExpr 0x555d6e63abe0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63aa40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63aab0 <col:25> 'const char *' lvalue ParmVar 0x555d6e612690 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d6e63aad0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x555d6e63aba0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555d6e63abc0 <col:54> 'Vector<T>' lvalue ParmVar 0x555d6e6127e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555d6e612f68 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x555d6e612a00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e612a78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e612ec8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d6e612b38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e612bb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e612c30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e612d80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d6e63ae28 <col:76, line:623:5>
|     |-CallExpr 0x555d6e63ada8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d6e63ac48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x555d6e63ac88 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x555d6e63ac98 <col:34> 'const char *' lvalue ParmVar 0x555d6e612b38 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d6e63ad48 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d6e63acf8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d6e63acb8 <col:43> 'int' lvalue ParmVar 0x555d6e612bb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d6e63ad30 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d6e63ad10 <col:51> 'const int' lvalue Var 0x555d6e604d60 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555d6e63ad68 <col:63> 'P' lvalue ParmVar 0x555d6e612c30 'parser' 'P'
|     | `-DeclRefExpr 0x555d6e63ad88 <col:71> 'Vector<T>' lvalue ParmVar 0x555d6e612d80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x555d6e63ae18 <line:622:9, col:17>
|       `-UnaryOperator 0x555d6e63ae00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e63adf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e6134a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x555d6e612fe0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e613058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e613408 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x555d6e613118 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e613198 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e6132e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d6e63b090 <col:66, line:627:5>
|     `-ReturnStmt 0x555d6e63b080 <line:626:9, col:59>
|       `-CallExpr 0x555d6e63b040 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d6e63ae58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d6e63aec8 <col:25> 'const char *' lvalue ParmVar 0x555d6e613118 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d6e63aee8 <col:34> 'int' lvalue ParmVar 0x555d6e613198 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x555d6e63b000 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555d6e63b020 <col:58> 'Vector<T>' lvalue ParmVar 0x555d6e6132e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x555d6e613538 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x555d6e63b110 <col:25, line:633:5>
|   `-ReturnStmt 0x555d6e63b100 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x555d6e63b0e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555d6e63b0b8 <col:16> 'const bool' lvalue ->_status 0x555d6e61eec8
|         `-CXXThisExpr 0x555d6e63b0a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555d6e6136b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x555d6e6135f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x555d6e63b1f8 <col:27, line:639:5>
|   |-BinaryOperator 0x555d6e63b1a0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d6e63b128 <col:9> 'bool' lvalue ParmVar 0x555d6e6135f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d6e63b188 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e63b158 <col:13> 'bool' lvalue ->_status 0x555d6e61eec8
|   |     `-CXXThisExpr 0x555d6e63b148 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555d6e63b1e8 <line:638:9, col:17>
|     `-UnaryOperator 0x555d6e63b1d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e63b1c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d6e613838 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555d6e613778 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x555d6e63b2e8 <col:39, line:644:5>
|   |-BinaryOperator 0x555d6e63b290 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d6e63b218 <col:9> 'bool' lvalue ParmVar 0x555d6e613778 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d6e63b278 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e63b248 <col:13> 'const bool' lvalue ->_status 0x555d6e61eec8
|   |     `-CXXThisExpr 0x555d6e63b238 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555d6e63b2d8 <line:643:9, col:17>
|     `-UnaryOperator 0x555d6e63b2c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e63b2b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555d6e613900 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x555d6e63b390 <col:30, line:651:5>
|   `-ReturnStmt 0x555d6e63b380 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x555d6e63b368 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555d6e63b338 <col:16> 'bool' lvalue ->_read_status 0x555d6e515780
|         `-ImplicitCastExpr 0x555d6e63b318 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x555d6e63b308 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555d6e613a48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x555d6e6139b8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x555d6e63b498 <col:32, line:658:5>
|   |-BinaryOperator 0x555d6e63b440 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d6e63b3a8 <col:9> 'bool' lvalue ParmVar 0x555d6e6139b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d6e63b428 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e63b3f8 <col:13> 'bool' lvalue ->_read_status 0x555d6e515780
|   |     `-ImplicitCastExpr 0x555d6e63b3d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555d6e63b3c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555d6e63b488 <line:657:9, col:17>
|     `-UnaryOperator 0x555d6e63b470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e63b460 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d6e613b98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555d6e613b08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x555d6e63b5a8 <col:44, line:663:5>
|   |-BinaryOperator 0x555d6e63b550 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d6e63b4b8 <col:9> 'bool' lvalue ParmVar 0x555d6e613b08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d6e63b538 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d6e63b508 <col:13> 'bool' lvalue ->_read_status 0x555d6e515780
|   |     `-ImplicitCastExpr 0x555d6e63b4e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555d6e63b4d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555d6e63b598 <line:662:9, col:17>
|     `-UnaryOperator 0x555d6e63b580 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e63b570 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555d6e613c60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x555d6e613d28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x555d6e613df0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x555d6e613eb8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x555d6e6141c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x555d6e613f58 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e614128 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x555d6e614038 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63b960 <col:19, line:706:5>
|     `-IfStmt 0x555d6e63b938 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x555d6e63b6a8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x555d6e63b868 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x555d6e63b838 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x555d6e63b7f8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x555d6e63b700 <col:42> '<bound member function type>' ->simple_slot 0x555d6e6363f0
|       |     | `-CXXThisExpr 0x555d6e63b6f0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x555d6e63b798 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x555d6e63b750 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x555d6e39d808
|       |     | `-DeclRefExpr 0x555d6e63b730 <col:55> 'T' lvalue ParmVar 0x555d6e614038 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x555d6e63b7d8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x555d6e63b928 <line:705:13, col:34>
|         `-CallExpr 0x555d6e63b900 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x555d6e63b888 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x555d6e63b8e0 <col:33> 'T' lvalue ParmVar 0x555d6e614038 'x' 'T &'
|-FunctionTemplateDecl 0x555d6e619fe8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x555d6e619d80 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e619f48 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x555d6e619e58 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x555d6e63bd40 <col:31, line:717:5>
|     |-DeclStmt 0x555d6e63baa0 <line:713:9, col:23>
|     | `-VarDecl 0x555d6e63b988 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x555d6e63ba78 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555d6e63ba00 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555d6e63ba58 <col:21> 'T' lvalue ParmVar 0x555d6e619e58 'x' 'T &'
|     |-IfStmt 0x555d6e63bcf0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x555d6e63bb98 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x555d6e63bcd0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555d6e63bc70 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555d6e63bc00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|     |   | `-DeclRefExpr 0x555d6e63bbe0 <col:14> 'T *' lvalue Var 0x555d6e63b988 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x555d6e63bcb0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x555d6e63bd28 <line:716:9, col:16>
|       `-DeclRefExpr 0x555d6e63bd08 <col:16> 'T *' lvalue Var 0x555d6e63b988 's' 'T *'
|-FunctionTemplateDecl 0x555d6e61a3f8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x555d6e61a048 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e61a0c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d6e61a358 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x555d6e61a1a8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x555d6e61a248 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x555d6e63c050 <col:37, line:726:5>
|     |-IfStmt 0x555d6e63bfe0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x555d6e63c000 <line:723:13, col:26>
|     | | `-VarDecl 0x555d6e63bda8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x555d6e63be98 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x555d6e63be20 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x555d6e63be78 <col:25> 'T' lvalue ParmVar 0x555d6e61a1a8 'x' 'T &'
|     | |-DeclRefExpr 0x555d6e63bec0 <col:16> 'T *' lvalue Var 0x555d6e63bda8 's' 'T *'
|     | `-BinaryOperator 0x555d6e63bfc0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555d6e63bf70 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555d6e63bf00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|     |   | `-DeclRefExpr 0x555d6e63bee0 <col:14> 'T *' lvalue Var 0x555d6e63bda8 's' 'T *'
|     |   `-DeclRefExpr 0x555d6e63bfa0 <col:18> 'const V' lvalue ParmVar 0x555d6e61a248 'value' 'const V &'
|     `-ReturnStmt 0x555d6e63c040 <line:725:9, col:17>
|       `-UnaryOperator 0x555d6e63c028 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d6e63c018 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d6e61a7f8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x555d6e61a460 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d6e61a758 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x555d6e61a510 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61a590 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61a638 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x555d6e63ce70 <col:65, line:737:5>
|     |-DeclStmt 0x555d6e63c0e8 <line:732:9, col:26>
|     | `-VarDecl 0x555d6e63c080 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d6e63ce38 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x555d6e63ce58 <line:733:13, col:58>
|       | `-VarDecl 0x555d6e63c110 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d6e63c2f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d6e63c2c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d6e63c2a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d6e63c288 <col:26, col:58> 'String' (CXXTemporary 0x555d6e63c288)
|       |           `-CXXMemberCallExpr 0x555d6e63c218 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d6e63c188 <col:26> '<bound member function type>' ->find 0x555d6e635a08
|       |             | `-CXXThisExpr 0x555d6e63c178 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d6e63c250 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e63c1b8 <col:31> 'const char *' lvalue ParmVar 0x555d6e61a510 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d6e63c268 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e63c1d8 <col:40> 'int' lvalue ParmVar 0x555d6e61a590 'flags' 'int'
|       |             `-DeclRefExpr 0x555d6e63c1f8 <col:47> 'Args::Slot *' lvalue Var 0x555d6e63c080 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d6e63c3a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d6e63c390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d6e63c370 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d6e63c340 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |       `-ImplicitCastExpr 0x555d6e63c328 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d6e63c308 <col:20> 'String' lvalue Var 0x555d6e63c110 'str' 'String'
|       `-CompoundStmt 0x555d6e63ce18 <col:61, line:736:9>
|         |-DeclStmt 0x555d6e63c860 <line:734:13, col:76>
|         | `-VarDecl 0x555d6e63c3f8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555d6e63c830 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d6e63c7a0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d6e63c7e8 <col:60> 'T' lvalue ParmVar 0x555d6e61a638 'variable' 'T &'
|         |     `-UnaryOperator 0x555d6e63c818 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d6e63c808 <col:71> 'Args *' this
|         `-CallExpr 0x555d6e63cde8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x555d6e63c888 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|           | `-CXXThisExpr 0x555d6e63c878 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d6e63cda8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555d6e63c8b8 <col:23> 'T *' lvalue Var 0x555d6e63c3f8 's' 'T *'
|           | `-CallExpr 0x555d6e63cd68 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d6e63cb40 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x555d6e63cc40 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x555d6e63cc60 <col:86> 'String' lvalue Var 0x555d6e63c110 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d6e63cd10 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d6e63cca0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|           |   | `-DeclRefExpr 0x555d6e63cc80 <col:92> 'T *' lvalue Var 0x555d6e63c3f8 's' 'T *'
|           |   `-UnaryOperator 0x555d6e63cd50 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d6e63cd40 <col:96> 'Args *' this
|           `-DeclRefExpr 0x555d6e63cdc8 <col:103> 'Args::Slot *' lvalue Var 0x555d6e63c080 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61ad48 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555d6e61a868 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e61a8e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d6e61aca8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555d6e61a9a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61aa28 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61aac8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x555d6e61ab68 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x555d6e6405c0 <col:88, line:745:5>
|     |-DeclStmt 0x555d6e63cf08 <line:741:9, col:26>
|     | `-VarDecl 0x555d6e63cea0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d6e63d128 <line:742:9, col:55>
|     | `-VarDecl 0x555d6e63cf30 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555d6e63d110 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555d6e63d0e0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555d6e63d0c8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555d6e63d0a8 <col:22, col:54> 'String' (CXXTemporary 0x555d6e63d0a8)
|     |           `-CXXMemberCallExpr 0x555d6e63d038 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555d6e63cfa8 <col:22> '<bound member function type>' ->find 0x555d6e635a08
|     |             | `-CXXThisExpr 0x555d6e63cf98 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555d6e63d070 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d6e63cfd8 <col:27> 'const char *' lvalue ParmVar 0x555d6e61a9a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555d6e63d088 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d6e63cff8 <col:36> 'int' lvalue ParmVar 0x555d6e61aa28 'flags' 'int'
|     |             `-DeclRefExpr 0x555d6e63d018 <col:43> 'Args::Slot *' lvalue Var 0x555d6e63cea0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555d6e63fdb0 <line:743:9, col:72>
|     | `-VarDecl 0x555d6e63fa20 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d6e63fd80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d6e63fcf0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555d6e63fd38 <col:56> 'T' lvalue ParmVar 0x555d6e61aac8 'variable' 'T &'
|     |     `-UnaryOperator 0x555d6e63fd68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d6e63fd58 <col:67> 'Args *' this
|     `-CallExpr 0x555d6e640590 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x555d6e63fdd8 <col:9> '<bound member function type>' ->postparse 0x555d6e635c18
|       | `-CXXThisExpr 0x555d6e63fdc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555d6e640550 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555d6e63fe08 <col:19> 'T *' lvalue Var 0x555d6e63fa20 's' 'T *'
|       | `-ParenExpr 0x555d6e640530 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x555d6e640500 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555d6e6404e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555d6e6404d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555d6e6404b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555d6e640480 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |     |       `-ImplicitCastExpr 0x555d6e640468 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555d6e63fe28 <col:25> 'String' lvalue Var 0x555d6e63cf30 'str' 'String'
|       |     |-CallExpr 0x555d6e6402d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555d6e6400b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x555d6e6401b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x555d6e6401d0 <col:89> 'String' lvalue Var 0x555d6e63cf30 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555d6e640280 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555d6e640210 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|       |     | | `-DeclRefExpr 0x555d6e6401f0 <col:95> 'T *' lvalue Var 0x555d6e63fa20 's' 'T *'
|       |     | `-UnaryOperator 0x555d6e6402c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555d6e6402b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x555d6e640448 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x555d6e640428 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x555d6e6403f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555d6e6403a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555d6e640338 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|       |         | | `-DeclRefExpr 0x555d6e640318 <col:109> 'T *' lvalue Var 0x555d6e63fa20 's' 'T *'
|       |         | `-DeclRefExpr 0x555d6e6403d8 <col:113> 'const V' lvalue ParmVar 0x555d6e61ab68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555d6e640418 <col:120> 'bool' true
|       `-DeclRefExpr 0x555d6e640570 <col:128> 'Args::Slot *' lvalue Var 0x555d6e63cea0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61b278 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x555d6e61adc0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e61ae38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e61b1d8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d6e61aef8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61af78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61aff0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e61b098 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x555d6e6411b8 <col:75, line:754:5>
|     |-DeclStmt 0x555d6e640668 <line:749:9, col:26>
|     | `-VarDecl 0x555d6e640600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d6e641180 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x555d6e6411a0 <line:750:13, col:58>
|       | `-VarDecl 0x555d6e640690 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d6e640870 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d6e640840 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d6e640828 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d6e640808 <col:26, col:58> 'String' (CXXTemporary 0x555d6e640808)
|       |           `-CXXMemberCallExpr 0x555d6e640798 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d6e640708 <col:26> '<bound member function type>' ->find 0x555d6e635a08
|       |             | `-CXXThisExpr 0x555d6e6406f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d6e6407d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e640738 <col:31> 'const char *' lvalue ParmVar 0x555d6e61aef8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d6e6407e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e640758 <col:40> 'int' lvalue ParmVar 0x555d6e61af78 'flags' 'int'
|       |             `-DeclRefExpr 0x555d6e640778 <col:47> 'Args::Slot *' lvalue Var 0x555d6e640600 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d6e640928 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d6e640910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d6e6408f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d6e6408c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |       `-ImplicitCastExpr 0x555d6e6408a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d6e640888 <col:20> 'String' lvalue Var 0x555d6e640690 'str' 'String'
|       `-CompoundStmt 0x555d6e641160 <col:61, line:753:9>
|         |-DeclStmt 0x555d6e640d00 <line:751:13, col:63>
|         | `-VarDecl 0x555d6e640978 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555d6e640cd0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d6e640c40 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d6e640c88 <col:47> 'T' lvalue ParmVar 0x555d6e61b098 'variable' 'T &'
|         |     `-UnaryOperator 0x555d6e640cb8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d6e640ca8 <col:58> 'Args *' this
|         `-CallExpr 0x555d6e641130 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x555d6e640d28 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|           | `-CXXThisExpr 0x555d6e640d18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d6e6410f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555d6e640d58 <col:23> 'T *' lvalue Var 0x555d6e640978 's' 'T *'
|           | `-CallExpr 0x555d6e6410b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d6e640f40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555d6e640f88 <col:56> 'P' lvalue ParmVar 0x555d6e61aff0 'parser' 'P'
|           |   |-DeclRefExpr 0x555d6e640fa8 <col:64> 'String' lvalue Var 0x555d6e640690 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d6e641058 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d6e640fe8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|           |   | `-DeclRefExpr 0x555d6e640fc8 <col:70> 'T *' lvalue Var 0x555d6e640978 's' 'T *'
|           |   `-UnaryOperator 0x555d6e641098 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d6e641088 <col:74> 'Args *' this
|           `-DeclRefExpr 0x555d6e641110 <col:81> 'Args::Slot *' lvalue Var 0x555d6e640600 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61b8d8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555d6e61b2f0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d6e61b368 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x555d6e61b3e8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d6e61b838 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555d6e61b4b0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61b530 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61b5a8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e61b648 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x555d6e61b6e8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x555d6e641f48 <col:98, line:762:5>
|     |-DeclStmt 0x555d6e641250 <line:758:9, col:26>
|     | `-VarDecl 0x555d6e6411e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d6e641470 <line:759:9, col:55>
|     | `-VarDecl 0x555d6e641278 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555d6e641458 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555d6e641428 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555d6e641410 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555d6e6413f0 <col:22, col:54> 'String' (CXXTemporary 0x555d6e6413f0)
|     |           `-CXXMemberCallExpr 0x555d6e641380 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555d6e6412f0 <col:22> '<bound member function type>' ->find 0x555d6e635a08
|     |             | `-CXXThisExpr 0x555d6e6412e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555d6e6413b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d6e641320 <col:27> 'const char *' lvalue ParmVar 0x555d6e61b4b0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555d6e6413d0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d6e641340 <col:36> 'int' lvalue ParmVar 0x555d6e61b530 'flags' 'int'
|     |             `-DeclRefExpr 0x555d6e641360 <col:43> 'Args::Slot *' lvalue Var 0x555d6e6411e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555d6e641890 <line:760:9, col:59>
|     | `-VarDecl 0x555d6e6414c8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d6e641860 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d6e6417d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555d6e641818 <col:43> 'T' lvalue ParmVar 0x555d6e61b648 'variable' 'T &'
|     |     `-UnaryOperator 0x555d6e641848 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d6e641838 <col:54> 'Args *' this
|     `-CallExpr 0x555d6e641f18 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x555d6e6418b8 <col:9> '<bound member function type>' ->postparse 0x555d6e635c18
|       | `-CXXThisExpr 0x555d6e6418a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555d6e641ed8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555d6e6418e8 <col:19> 'T *' lvalue Var 0x555d6e6414c8 's' 'T *'
|       | `-ParenExpr 0x555d6e641eb8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x555d6e641e88 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555d6e641e70 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555d6e641e58 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555d6e641e38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555d6e641e08 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |     |       `-ImplicitCastExpr 0x555d6e641df0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555d6e641908 <col:25> 'String' lvalue Var 0x555d6e641278 'str' 'String'
|       |     |-CallExpr 0x555d6e641c60 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555d6e641af0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x555d6e641b38 <col:59> 'P' lvalue ParmVar 0x555d6e61b5a8 'parser' 'P'
|       |     | |-DeclRefExpr 0x555d6e641b58 <col:67> 'String' lvalue Var 0x555d6e641278 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555d6e641c08 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555d6e641b98 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|       |     | | `-DeclRefExpr 0x555d6e641b78 <col:73> 'T *' lvalue Var 0x555d6e6414c8 's' 'T *'
|       |     | `-UnaryOperator 0x555d6e641c48 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555d6e641c38 <col:77> 'Args *' this
|       |     `-ParenExpr 0x555d6e641dd0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x555d6e641db0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x555d6e641d80 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555d6e641d30 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555d6e641cc0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|       |         | | `-DeclRefExpr 0x555d6e641ca0 <col:87> 'T *' lvalue Var 0x555d6e6414c8 's' 'T *'
|       |         | `-DeclRefExpr 0x555d6e641d60 <col:91> 'const V' lvalue ParmVar 0x555d6e61b6e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555d6e641da0 <col:98> 'bool' true
|       `-DeclRefExpr 0x555d6e641ef8 <col:106> 'Args::Slot *' lvalue Var 0x555d6e6411e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61bf48 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x555d6e61b958 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e61b9d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d6e61ba58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d6e61bea8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d6e61bb20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61bba0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61bc18 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e61bcb8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x555d6e61bd58 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x555d6e642f28 <col:60, line:773:5>
|     |-DeclStmt 0x555d6e641ff0 <line:767:9, col:26>
|     | `-VarDecl 0x555d6e641f88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d6e642ef0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x555d6e642f10 <line:768:13, col:58>
|       | `-VarDecl 0x555d6e642018 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d6e6421f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d6e6421c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d6e6421b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d6e642190 <col:26, col:58> 'String' (CXXTemporary 0x555d6e642190)
|       |           `-CXXMemberCallExpr 0x555d6e642120 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d6e642090 <col:26> '<bound member function type>' ->find 0x555d6e635a08
|       |             | `-CXXThisExpr 0x555d6e642080 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d6e642158 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e6420c0 <col:31> 'const char *' lvalue ParmVar 0x555d6e61bb20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d6e642170 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e6420e0 <col:40> 'int' lvalue ParmVar 0x555d6e61bba0 'flags' 'int'
|       |             `-DeclRefExpr 0x555d6e642100 <col:47> 'Args::Slot *' lvalue Var 0x555d6e641f88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d6e6422b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d6e642298 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d6e642278 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d6e642248 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |       `-ImplicitCastExpr 0x555d6e642230 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d6e642210 <col:20> 'String' lvalue Var 0x555d6e642018 'str' 'String'
|       `-CompoundStmt 0x555d6e642ec8 <col:61, line:772:9>
|         |-DeclStmt 0x555d6e6425f0 <line:769:13, col:66>
|         | `-VarDecl 0x555d6e642308 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x555d6e6425c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d6e642530 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d6e642578 <col:49> 'T1' lvalue ParmVar 0x555d6e61bcb8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x555d6e6425a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d6e642598 <col:61> 'Args *' this
|         |-DeclStmt 0x555d6e642960 <line:770:13, col:66>
|         | `-VarDecl 0x555d6e642678 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x555d6e642930 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d6e6428a0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d6e6428e8 <col:49> 'T2' lvalue ParmVar 0x555d6e61bd58 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x555d6e642918 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d6e642908 <col:61> 'Args *' this
|         `-CallExpr 0x555d6e642e98 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x555d6e642988 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|           | `-CXXThisExpr 0x555d6e642978 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d6e642e58 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x555d6e6429f8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x555d6e6429b8 <col:23> 'T1 *' lvalue Var 0x555d6e642308 's1' 'T1 *'
|           | | `-DeclRefExpr 0x555d6e6429d8 <col:29> 'T2 *' lvalue Var 0x555d6e642678 's2' 'T2 *'
|           | `-CallExpr 0x555d6e642e10 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d6e642be0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555d6e642c28 <col:63> 'P' lvalue ParmVar 0x555d6e61bc18 'parser' 'P'
|           |   |-DeclRefExpr 0x555d6e642c48 <col:71> 'String' lvalue Var 0x555d6e642018 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d6e642cf8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d6e642c88 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|           |   | `-DeclRefExpr 0x555d6e642c68 <col:77> 'T1 *' lvalue Var 0x555d6e642308 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x555d6e642db8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d6e642d48 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|           |   | `-DeclRefExpr 0x555d6e642d28 <col:82> 'T2 *' lvalue Var 0x555d6e642678 's2' 'T2 *'
|           |   `-UnaryOperator 0x555d6e642df8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d6e642de8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x555d6e642e78 <col:94> 'Args::Slot *' lvalue Var 0x555d6e641f88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61c338 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x555d6e61bfc8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e61c298 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555d6e61c080 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61c100 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61c178 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555d6e643440 <col:67, line:780:5>
|     |-DeclStmt 0x555d6e642fc0 <line:777:9, col:26>
|     | `-VarDecl 0x555d6e642f58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d6e643408 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x555d6e643428 <line:778:13, col:58>
|       | `-VarDecl 0x555d6e642fe8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d6e6431c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d6e643198 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d6e643180 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d6e643160 <col:26, col:58> 'String' (CXXTemporary 0x555d6e643160)
|       |           `-CXXMemberCallExpr 0x555d6e6430f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d6e643060 <col:26> '<bound member function type>' ->find 0x555d6e635a08
|       |             | `-CXXThisExpr 0x555d6e643050 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d6e643128 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e643090 <col:31> 'const char *' lvalue ParmVar 0x555d6e61c080 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d6e643140 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d6e6430b0 <col:40> 'int' lvalue ParmVar 0x555d6e61c100 'flags' 'int'
|       |             `-DeclRefExpr 0x555d6e6430d0 <col:47> 'Args::Slot *' lvalue Var 0x555d6e642f58 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d6e643280 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d6e643268 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d6e643248 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d6e643218 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|       |       `-ImplicitCastExpr 0x555d6e643200 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d6e6431e0 <col:20> 'String' lvalue Var 0x555d6e642fe8 'str' 'String'
|       `-CallExpr 0x555d6e6433d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x555d6e6432a8 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|         | `-CXXThisExpr 0x555d6e643298 <col:13> 'Args *' implicit this
|         |-CallExpr 0x555d6e643388 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x555d6e6432f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x555d6e6432d8 <col:23> 'P' lvalue ParmVar 0x555d6e61c178 'parser' 'P'
|         | |-DeclRefExpr 0x555d6e643340 <col:36> 'String' lvalue Var 0x555d6e642fe8 'str' 'String'
|         | `-UnaryOperator 0x555d6e643370 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x555d6e643360 <col:42> 'Args *' this
|         `-DeclRefExpr 0x555d6e6433b8 <col:49> 'Args::Slot *' lvalue Var 0x555d6e642f58 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d6e61c6d8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555d6e61c3a8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d6e61c638 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555d6e61c460 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61c4e0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61c558 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x555d6e643db0 <col:71, line:792:5>
|     |-DeclStmt 0x555d6e6434d8 <line:784:9, col:26>
|     | `-VarDecl 0x555d6e643470 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d6e6435a8 <line:785:9, col:29>
|     | `-VarDecl 0x555d6e643508 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d6e643590 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d6e643570 <col:28> 'int' 1
|     |-WhileStmt 0x555d6e643c60 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x555d6e643c80 <line:786:16, col:61>
|     | | `-VarDecl 0x555d6e6435d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d6e6437b0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d6e643780 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d6e643768 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d6e643748 <col:29, col:61> 'String' (CXXTemporary 0x555d6e643748)
|     | |           `-CXXMemberCallExpr 0x555d6e6436d8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d6e643648 <col:29> '<bound member function type>' ->find 0x555d6e635a08
|     | |             | `-CXXThisExpr 0x555d6e643638 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d6e643710 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e643678 <col:34> 'const char *' lvalue ParmVar 0x555d6e61c460 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d6e643728 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e643698 <col:43> 'int' lvalue ParmVar 0x555d6e61c4e0 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d6e6436b8 <col:50> 'Args::Slot *' lvalue Var 0x555d6e643470 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d6e643868 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d6e643850 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d6e643830 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d6e643800 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|     | |       `-ImplicitCastExpr 0x555d6e6437e8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d6e6437c8 <col:23> 'String' lvalue Var 0x555d6e6435d0 'str' 'String'
|     | `-CompoundStmt 0x555d6e643c38 <col:64, line:790:9>
|     |   |-CallExpr 0x555d6e6439c0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x555d6e643890 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|     |   | | `-CXXThisExpr 0x555d6e643880 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555d6e643970 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555d6e6438e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555d6e6438c0 <col:23> 'P' lvalue ParmVar 0x555d6e61c558 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555d6e643928 <col:36> 'String' lvalue Var 0x555d6e6435d0 'str' 'String'
|     |   | | `-UnaryOperator 0x555d6e643958 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555d6e643948 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x555d6e6439a0 <col:49> 'Args::Slot *' lvalue Var 0x555d6e643470 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555d6e643b58 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d6e6439f0 <col:13> 'int' lvalue Var 0x555d6e643508 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d6e643b40 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d6e643b20 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d6e643a88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d6e643a68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d6e643a50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d6e643a10 <col:28> 'int' lvalue Var 0x555d6e643508 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d6e643a30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d6e643b08 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d6e643ad8 <col:49> 'bool' lvalue ->_read_status 0x555d6e515780
|     |   |         `-ImplicitCastExpr 0x555d6e643ab8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d6e643aa8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d6e643c08 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d6e643b78 <col:13> 'int' lvalue ParmVar 0x555d6e61c4e0 'flags' 'int'
|     |     `-UnaryOperator 0x555d6e643bf0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d6e643bd8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d6e643bb8 <col:23> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d6e643d90 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d6e643cc8 <col:9> 'bool' lvalue ->_read_status 0x555d6e515780
|       | `-ImplicitCastExpr 0x555d6e643ca8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d6e643c98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d6e643d70 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d6e643d50 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d6e643d38 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d6e643cf8 <col:25> 'int' lvalue Var 0x555d6e643508 'read_status' 'int'
|           `-IntegerLiteral 0x555d6e643d18 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555d6e61cbb8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555d6e61c748 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e61c7c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e61cb18 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d6e61c888 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61c908 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61c980 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e61ca28 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x555d6e644d40 <col:84, line:805:5>
|     |-DeclStmt 0x555d6e643e58 <line:796:9, col:26>
|     | `-VarDecl 0x555d6e643df0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d6e643f28 <line:797:9, col:29>
|     | `-VarDecl 0x555d6e643e88 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d6e643f10 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d6e643ef0 <col:28> 'int' 1
|     |-DeclStmt 0x555d6e644260 <line:798:9, col:71>
|     | `-VarDecl 0x555d6e643f78 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d6e644230 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d6e6441a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x555d6e6441e8 <col:55> 'T' lvalue ParmVar 0x555d6e61ca28 'variable' 'T &'
|     |     `-UnaryOperator 0x555d6e644218 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d6e644208 <col:66> 'Args *' this
|     |-WhileStmt 0x555d6e644bf0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x555d6e644c10 <line:799:16, col:61>
|     | | `-VarDecl 0x555d6e644288 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d6e644468 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d6e644438 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d6e644420 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d6e644400 <col:29, col:61> 'String' (CXXTemporary 0x555d6e644400)
|     | |           `-CXXMemberCallExpr 0x555d6e644390 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d6e644300 <col:29> '<bound member function type>' ->find 0x555d6e635a08
|     | |             | `-CXXThisExpr 0x555d6e6442f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d6e6443c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e644330 <col:34> 'const char *' lvalue ParmVar 0x555d6e61c888 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d6e6443e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e644350 <col:43> 'int' lvalue ParmVar 0x555d6e61c908 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d6e644370 <col:50> 'Args::Slot *' lvalue Var 0x555d6e643df0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d6e644520 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d6e644508 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d6e6444e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d6e6444b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|     | |       `-ImplicitCastExpr 0x555d6e6444a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d6e644480 <col:23> 'String' lvalue Var 0x555d6e644288 'str' 'String'
|     | `-CompoundStmt 0x555d6e644bc8 <col:64, line:803:9>
|     |   |-CallExpr 0x555d6e644950 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x555d6e644548 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|     |   | | `-CXXThisExpr 0x555d6e644538 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x555d6e644910 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x555d6e644578 <col:23> 'T *' lvalue Var 0x555d6e643f78 's' 'T *'
|     |   | | `-CallExpr 0x555d6e6448d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x555d6e644760 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x555d6e6447a8 <col:56> 'P' lvalue ParmVar 0x555d6e61c980 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x555d6e6447c8 <col:64> 'String' lvalue Var 0x555d6e644288 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x555d6e644878 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x555d6e644808 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|     |   | |   | `-DeclRefExpr 0x555d6e6447e8 <col:70> 'T *' lvalue Var 0x555d6e643f78 's' 'T *'
|     |   | |   `-UnaryOperator 0x555d6e6448b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x555d6e6448a8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x555d6e644930 <col:81> 'Args::Slot *' lvalue Var 0x555d6e643df0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555d6e644ae8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d6e644980 <col:13> 'int' lvalue Var 0x555d6e643e88 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d6e644ad0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d6e644ab0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d6e644a18 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d6e6449f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d6e6449e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d6e6449a0 <col:28> 'int' lvalue Var 0x555d6e643e88 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d6e6449c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d6e644a98 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d6e644a68 <col:49> 'bool' lvalue ->_read_status 0x555d6e515780
|     |   |         `-ImplicitCastExpr 0x555d6e644a48 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d6e644a38 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d6e644b98 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d6e644b08 <col:13> 'int' lvalue ParmVar 0x555d6e61c908 'flags' 'int'
|     |     `-UnaryOperator 0x555d6e644b80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d6e644b68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d6e644b48 <col:23> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d6e644d20 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d6e644c58 <col:9> 'bool' lvalue ->_read_status 0x555d6e515780
|       | `-ImplicitCastExpr 0x555d6e644c38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d6e644c28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d6e644d00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d6e644ce0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d6e644cc8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d6e644c88 <col:25> 'int' lvalue Var 0x555d6e643e88 'read_status' 'int'
|           `-IntegerLiteral 0x555d6e644ca8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555d6e61d198 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x555d6e61cc30 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d6e61cca8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d6e61d0f8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d6e61cd68 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d6e61cde8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x555d6e61ce60 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x555d6e61cfb0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x555d6e645b48 <col:87, line:821:5>
|     |-DeclStmt 0x555d6e644df0 <line:809:9, col:26>
|     | `-VarDecl 0x555d6e644d88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d6e644ec0 <line:810:9, col:29>
|     | `-VarDecl 0x555d6e644e20 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d6e644ea8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d6e644e88 <col:28> 'int' 1
|     |-DeclStmt 0x555d6e645108 <line:811:9, col:38>
|     | `-VarDecl 0x555d6e644ff0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x555d6e6450e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555d6e645068 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555d6e6450c0 <col:29> 'Vector<T>' lvalue ParmVar 0x555d6e61cfb0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x555d6e6459f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x555d6e645a18 <line:812:16, col:61>
|     | | `-VarDecl 0x555d6e645130 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d6e645310 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d6e6452e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d6e6452c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d6e6452a8 <col:29, col:61> 'String' (CXXTemporary 0x555d6e6452a8)
|     | |           `-CXXMemberCallExpr 0x555d6e645238 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d6e6451a8 <col:29> '<bound member function type>' ->find 0x555d6e635a08
|     | |             | `-CXXThisExpr 0x555d6e645198 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d6e645270 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e6451d8 <col:34> 'const char *' lvalue ParmVar 0x555d6e61cd68 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d6e645288 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d6e6451f8 <col:43> 'int' lvalue ParmVar 0x555d6e61cde8 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d6e645218 <col:50> 'Args::Slot *' lvalue Var 0x555d6e644d88 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d6e6453c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d6e6453b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d6e645390 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d6e645360 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d6e3607d8
|     | |       `-ImplicitCastExpr 0x555d6e645348 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d6e645328 <col:23> 'String' lvalue Var 0x555d6e645130 'str' 'String'
|     | `-CompoundStmt 0x555d6e6459c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x555d6e645488 <line:813:13, col:23>
|     |   | `-VarDecl 0x555d6e6453f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x555d6e645468 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x555d6e645608 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x555d6e6454b0 <col:13> '<bound member function type>' ->postparse 0x555d6e635c18
|     |   | | `-CXXThisExpr 0x555d6e6454a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555d6e6455b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555d6e645500 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555d6e6454e0 <col:23> 'P' lvalue ParmVar 0x555d6e61ce60 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555d6e645548 <col:36> 'String' lvalue Var 0x555d6e645130 'str' 'String'
|     |   | | |-DeclRefExpr 0x555d6e645568 <col:41> 'T' lvalue Var 0x555d6e6453f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x555d6e645598 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555d6e645588 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x555d6e6455e8 <col:53> 'Args::Slot *' lvalue Var 0x555d6e644d88 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x555d6e645760 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x555d6e645698 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x555d6e645668 <col:17> 'bool' lvalue ->_read_status 0x555d6e515780
|     |   | |   `-ImplicitCastExpr 0x555d6e645648 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x555d6e645638 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x555d6e645738 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x555d6e6456d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x555d6e6456b0 <col:17> 'Vector<T> *' lvalue Var 0x555d6e644ff0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x555d6e645718 <col:30> 'T' lvalue Var 0x555d6e6453f0 'sx' 'T'
|     |   |-BinaryOperator 0x555d6e6458e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d6e645778 <col:13> 'int' lvalue Var 0x555d6e644e20 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d6e6458c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d6e6458a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d6e645810 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d6e6457f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d6e6457d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d6e645798 <col:28> 'int' lvalue Var 0x555d6e644e20 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d6e6457b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d6e645890 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d6e645860 <col:49> 'bool' lvalue ->_read_status 0x555d6e515780
|     |   |         `-ImplicitCastExpr 0x555d6e645840 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d6e645830 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d6e645990 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d6e645900 <col:13> 'int' lvalue ParmVar 0x555d6e61cde8 'flags' 'int'
|     |     `-UnaryOperator 0x555d6e645978 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d6e645960 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d6e645940 <col:23> 'const int' lvalue Var 0x555d6e604a78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d6e645b28 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d6e645a60 <col:9> 'bool' lvalue ->_read_status 0x555d6e515780
|       | `-ImplicitCastExpr 0x555d6e645a40 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d6e645a30 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d6e645b08 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d6e645ae8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d6e645ad0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d6e645a90 <col:25> 'int' lvalue Var 0x555d6e644e20 'read_status' 'int'
|           `-IntegerLiteral 0x555d6e645ab0 <col:40> 'int' 1
|-AccessSpecDecl 0x555d6e61d210 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x555d6e61d238 prev 0x555d6e602d78 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x555d6e61d330 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x555d6e61d420 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x555d6e645b80 <col:16, line:828:9>
| |-CXXDestructorDecl 0x555d6e61d510 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x555d6e645b90 <col:25, line:830:9>
| |-CXXMethodDecl 0x555d6e61d610 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x555d6e61d6c0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x555d6e61d768 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555d6e61d768
| | `-ParmVarDecl 0x555d6e61d878 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x555d6e61e038 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555d6e61e038
|   `-ParmVarDecl 0x555d6e61e148 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x555d6e61d8e8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x555d6e61da48 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x555d6e61dc40 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x555d6e61daf0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x555d6e61db68 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x555d6e645d70 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x555d6e61def8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x555d6e645be0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555d6e645ba0 <col:20> 'void *' lvalue ParmVar 0x555d6e61daf0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x555d6e61df60 '_slot' 'char *'
| | | `-CXXNewExpr 0x555d6e645c68 <col:32, col:45> 'char *' array Function 0x555d6e183448 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x555d6e645c50 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x555d6e645c20 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x555d6e61db68 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x555d6e61dfc0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x555d6e645d30 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x555d6e645cf0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x555d6e61db68 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x555d6e645df0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x555d6e61dd40 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x555d6e61d510 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x555d6e645e78 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x555d6e645e58 <line:840:13, col:22> 'void' array Function 0x555d6e1837a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x555d6e645e40 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x555d6e645e10 <col:22> 'char *' lvalue ->_slot 0x555d6e61df60
| |         `-CXXThisExpr 0x555d6e645e00 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x555d6e61de40 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x555d6e61d610 Slot::store 'void ()' ]
| | `-CompoundStmt 0x555d6e646068 <col:22, line:844:9>
| |   `-CallExpr 0x555d6e645fd0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x555d6e645fb8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555d6e645f98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x555d6e28f228 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x555d6e646008 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x555d6e645ee8 <col:20> 'void *' lvalue ->_ptr 0x555d6e61def8
| |     |   `-CXXThisExpr 0x555d6e645ed8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x555d6e646038 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x555d6e646020 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x555d6e645f28 <col:26> 'char *' lvalue ->_slot 0x555d6e61df60
| |     |     `-CXXThisExpr 0x555d6e645f18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x555d6e646050 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x555d6e645f68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x555d6e61dfc0
| |         `-CXXThisExpr 0x555d6e645f58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x555d6e61def8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x555d6e61df60 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x555d6e61dfc0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x555d6e61e1b8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555d6e61e1b8
| | `-ParmVarDecl 0x555d6e61e2c8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x555d6e61e368 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555d6e61e368
|   `-ParmVarDecl 0x555d6e61e478 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x555d6e61e618 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x555d6e61e4e8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x555d6e61e588 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x555d6e61e8b0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x555d6e61eaa8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x555d6e61e978 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x555d6e61ec28 '_ptr' 'T *'
|   | | `-ParenListExpr 0x555d6e6460a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x555d6e646080 <col:20> 'T *' lvalue ParmVar 0x555d6e61e978 'ptr' 'T *'
|   | `-CompoundStmt 0x555d6e6460f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x555d6e61eb78 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x555d6e61d610 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x555d6e6462a0 <col:22, line:857:9>
|   |   `-CallExpr 0x555d6e646270 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x555d6e646100 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x555d6e347958 0x555d6e2f1c88
|   |     |-CXXOperatorCallExpr 0x555d6e646200 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x555d6e646190 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d6e554908 0x555d6e554528 0x555d6e554158 0x555d6e553d78 0x555d6e553998 0x555d6e5535c8
|   |     | `-MemberExpr 0x555d6e646160 <col:29> 'T *' lvalue ->_ptr 0x555d6e61ec28
|   |     |   `-CXXThisExpr 0x555d6e646150 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x555d6e646240 <col:35> 'T' lvalue ->_slot 0x555d6e61ec88
|   |       `-CXXThisExpr 0x555d6e646230 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x555d6e61ec28 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x555d6e61ec88 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x555d6e61ecf0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x555d6e61edf0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x555d6e61ee40 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e61edd0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x555d6e61edb0 <col:31> 'int' 48
|-FieldDecl 0x555d6e61ee68 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x555d6e61eec8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x555d6e61ef28 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x555d6e61f060 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x555d6e6352b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x555d6e635310 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x555d6e6353c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x555d6e6355e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x555d6e6354f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x555d6e635738 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x555d6e6356a8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x555d6e635a08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x555d6e6357f8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x555d6e635878 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x555d6e635920 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x555d6e635c18 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x555d6e635ad0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x555d6e635b48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x555d6e635ce8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x555d6e635e38 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x555d6e635da0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x555d6e6361c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x555d6e635ef8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x555d6e635f78 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x555d6e636020 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x555d6e6360d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x555d6e6363f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x555d6e6362a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x555d6e636318 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x555d6e636708 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x555d6e6364a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x555d6e636668 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x555d6e636578 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e350680 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e350798 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x555d6e350828 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x555d6e3508f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x555d6e3509e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e350bf8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d6e350aa0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e350da8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555d6e350cb0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555d6e350ef0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555d6e350e60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555d6e351038 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d6e350fa8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e351180 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d6e3510f0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e351248 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x555d6e351390 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x555d6e351300 <col:28> col:31 'int'
|-CXXMethodDecl 0x555d6e351458 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x555d6e3515a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x555d6e351510 <col:28> col:31 'int'
|-CXXMethodDecl 0x555d6e351718 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555d6e351658 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e351860 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555d6e3517d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e351928 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x555d6e351ae8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d6e3519d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d6e351a50 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e351d38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d6e351ba8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e351c20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d6e351de8 <col:86> "" ""
|-CXXMethodDecl 0x555d6e352058 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x555d6e351ec8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x555d6e351f40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e352208 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555d6e352118 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555d6e3523b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555d6e3522c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555d6e352688 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555d6e352470 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555d6e3524e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d6e352560 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e352968 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555d6e352750 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555d6e3527c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e352840 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d6e352a20 <col:115> "" ""
|-AccessSpecDecl 0x555d6e352a90 <line:84:3, col:10> col:3 private
|-FieldDecl 0x555d6e352ac8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e353fe0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555d6e353fe0
| `-ParmVarDecl 0x555d6e3540e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x555d6e354188 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555d6e354188
| `-ParmVarDecl 0x555d6e354298 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x555d6e3898c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d6e57b6c0 <col:7>
|-CXXConstructorDecl 0x555d6e3899a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555d6e3899a0
| `-ParmVarDecl 0x555d6e389ab8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x555d6e389b28 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555d6e389b28
| `-ParmVarDecl 0x555d6e389c38 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x555d6e57e0c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e56a268 prev 0x555d6e55f470 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e56a360 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x555d6e56a450 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x555d6e56a578 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x555d6e56a6f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x555d6e56a878 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x555d6e56a9f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x555d6e57b828 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d6e57c098 <col:11>
|-CXXDestructorDecl 0x555d6e57b900 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555d6e57ba38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555d6e57ba38
| `-ParmVarDecl 0x555d6e57bb48 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x555d6e57bbe8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d6e57bbe8
| `-ParmVarDecl 0x555d6e57bcf8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x555d6e57eab8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e57ebc8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x555d6e57ee48 <col:11>
|   `-ReturnStmt 0x555d6e57ee38 <col:11>
|     `-UnaryOperator 0x555d6e57ee20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d6e57ee10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x555d6e57ec38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d6e57ec38
  `-ParmVarDecl 0x555d6e57ed48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e56aa60 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e56ab78 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x555d6e56ac18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x555d6e56ac80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x555d6e56ace8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x555d6e56ad50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x555d6e56adb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x555d6e56ae70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x555d6e56aed0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x555d6e56af30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x555d6e57b738 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x555d6e56ac18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x555d6e57c0a8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x555d6e57c100 <col:12>
|-CXXConstructorDecl 0x555d6e57bd68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555d6e57bd68
| `-ParmVarDecl 0x555d6e57be78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x555d6e57bf18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555d6e57bf18
| `-ParmVarDecl 0x555d6e57c028 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x555d6e57e1a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e558b80 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d6e558c98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x555d6e558d28 <col:16, col:22> col:16 public
|-EnumDecl 0x555d6e558d50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x555d6e558e50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x555d6e558f30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e558e30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x555d6e558e10 <col:21> 'int' 28
| `-EnumConstantDecl 0x555d6e558ee0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x555d6e558f48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e558ec0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x555d6e558ea0 <col:22> 'int' 64
|-CXXMethodDecl 0x555d6e559288 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x555d6e558f70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e558ff0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x555d6e559068 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e5590e0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e559348 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555d6e559548 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x555d6e5593c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x555d6e559438 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e5595f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555d6e559758 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x555d6e559668 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e559800 <col:72> warn_unused_result ""
|-TypedefDecl 0x555d6e559b60 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x555d6e559af0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x555d6e559a90 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x555d6e559a50 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x555d6e0304e0 'void'
|       |-PointerType 0x555d6e2d8f20 'unsigned char *'
|       | `-BuiltinType 0x555d6e0305e0 'unsigned char'
|       |-TypedefType 0x555d6e0d54f0 'size_t' sugar
|       | |-Typedef 0x555d6e0a0be0 'size_t'
|       | `-BuiltinType 0x555d6e030640 'unsigned long'
|       `-PointerType 0x555d6e030ce0 'void *'
|         `-BuiltinType 0x555d6e0304e0 'void'
|-CXXMethodDecl 0x555d6e559fd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x555d6e559bd0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x555d6e559c48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e559ce0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x555d6e559d60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x555d6e5746d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x555d6e5746b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x555d6e574680 <col:58> 'int' 0
| |-ParmVarDecl 0x555d6e559de0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x555d6e5746f8 <col:76> 'int' 0
| |-ParmVarDecl 0x555d6e559e60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x555d6e574718 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x555d6e55a0a8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55a128 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555d6e55a1e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x555d6e55a288 <col:20>
| `-OptimizeNoneAttr 0x555d6e55a2e0 <col:30>
|-CXXMethodDecl 0x555d6e55a358 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x555d6e55a3f8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55a450 <col:30>
|-CXXMethodDecl 0x555d6e55a4c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x555d6e55a568 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55a618 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x555d6e55a6b8 <col:20>
| |-OptimizeNoneAttr 0x555d6e55a710 <col:30>
| `-WarnUnusedResultAttr 0x555d6e55a738 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55a790 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x555d6e55a830 <col:20>
| `-OptimizeNoneAttr 0x555d6e55a888 <col:30>
|-CXXMethodDecl 0x555d6e55a8d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x555d6e55a978 <col:20>
| `-OptimizeNoneAttr 0x555d6e55a9d0 <col:30>
|-CXXMethodDecl 0x555d6e55aa18 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x555d6e55aab8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55ab10 <col:30>
|-CXXMethodDecl 0x555d6e55ab58 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55ac18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55ace0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d6e55ada8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d6e55ae68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55af88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x555d6e5747e0 <col:54, line:99:5>
|   `-ReturnStmt 0x555d6e5747d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x555d6e5747b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x555d6e574788 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d6e56b268
|         `-CXXThisExpr 0x555d6e574778 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x555d6e55b128 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x555d6e55b038 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x555d6e574890 <col:67, line:103:5>
|   `-BinaryOperator 0x555d6e574870 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555d6e574808 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d6e56b268
|     | `-CXXThisExpr 0x555d6e5747f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555d6e574858 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e574838 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x555d6e55b038 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x555d6e55b220 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x555d6e574910 <col:33, line:107:5>
|   `-ReturnStmt 0x555d6e574900 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x555d6e5748e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x555d6e5748b8 <col:16> 'void *' lvalue ->_destructor_argument 0x555d6e56b2d0
|         `-CXXThisExpr 0x555d6e5748a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555d6e55b2e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x555d6e574f40 <col:25, line:113:5>
|   |-ParenExpr 0x555d6e574c88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x555d6e574c58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e5749c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555d6e5749a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x555d6e574968 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x555d6e574938 <col:24> '<bound member function type>' ->shared 0x555d6e55a358
|   |   |       `-ImplicitCastExpr 0x555d6e574988 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x555d6e574928 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555d6e574a28 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e574a08 <col:42> 'int' 0
|   |   `-CallExpr 0x555d6e574bb8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x555d6e574ba0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e574b80 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e574bf8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e574a98 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x555d6e574c10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e574ac0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e574c28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e574af8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x555d6e574c40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e574b68 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e574b50 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e574b18 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x555d6e574e88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x555d6e574cb8 <col:2> 'unsigned char *' lvalue ->_head 0x555d6e56b070
|   | | `-CXXThisExpr 0x555d6e574ca8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x555d6e574e70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x555d6e574e50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x555d6e574cf8 <col:10> 'unsigned char *' lvalue ->_data 0x555d6e56b0d8
|   |     | `-CXXThisExpr 0x555d6e574ce8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x555d6e574e38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x555d6e574e18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x555d6e574d38 <col:18> 'unsigned char *' lvalue ->_tail 0x555d6e56b140
|   |         | `-CXXThisExpr 0x555d6e574d28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x555d6e574e00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x555d6e574de0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x555d6e574d78 <col:26> 'unsigned char *' lvalue ->_end 0x555d6e56b1a8
|   |             | `-CXXThisExpr 0x555d6e574d68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x555d6e574dc8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x555d6e574da8 <col:33> 'int' 0
|   `-BinaryOperator 0x555d6e574f20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555d6e574eb8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d6e56b268
|     | `-CXXThisExpr 0x555d6e574ea8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555d6e574f08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x555d6e574ee8 <col:16> 'int' 0
|-CXXMethodDecl 0x555d6e55b420 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d6e55b390 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55b4c8 <col:20>
| |-OptimizeNoneAttr 0x555d6e55b520 <col:30>
| `-WarnUnusedResultAttr 0x555d6e55b548 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55b618 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d6e55b588 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55b6c0 <col:20>
| |-OptimizeNoneAttr 0x555d6e55b718 <col:30>
| `-WarnUnusedResultAttr 0x555d6e55b740 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55b878 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555d6e55b780 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e55b920 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55ba20 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x555d6e55b990 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55bac8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55bb20 <col:30>
|-CXXMethodDecl 0x555d6e55bbe8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d6e55bb58 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e55bc90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55bd90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555d6e55bd00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d6e55be38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55bf38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x555d6e55bea8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55bfe0 <col:20>
| `-OptimizeNoneAttr 0x555d6e55c038 <col:30>
|-CXXMethodDecl 0x555d6e55c1c8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x555d6e55c078 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x555d6e55c0f0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x555d6e574738 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x555d6e55c278 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x555d6e55c478 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d6e55c2f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x555d6e55c368 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e55c688 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d6e55c538 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d6e55c5b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e55c898 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x555d6e55c748 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x555d6e55c7c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x555d6e574748 <col:39> 'int' 0
|-CXXMethodDecl 0x555d6e55c968 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x555d6e55ca30 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d6e55caf8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d6e55cbb8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55cc80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x555d6e55cdc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x555d6e55cd38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x555d6e55cf98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d6e55ce88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x555d6e55cf00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e55d068 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x555d6e55d128 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x555d6e55d1c8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55d220 <col:30>
|-CXXMethodDecl 0x555d6e55d270 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555d6e55d310 <col:20>
| `-OptimizeNoneAttr 0x555d6e55d368 <col:30>
|-CXXMethodDecl 0x555d6e55d3b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d6e55d478 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55d540 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x555d6e55d5e0 <col:20>
| `-OptimizeNoneAttr 0x555d6e55d638 <col:30>
|-CXXMethodDecl 0x555d6e55d788 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d6e55d678 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x555d6e55d6f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e55d8d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x555d6e55d848 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e55d9b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x555d6e55da70 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x555d6e55db10 <col:20>
| `-OptimizeNoneAttr 0x555d6e55db68 <col:30>
|-CXXMethodDecl 0x555d6e55dbb8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555d6e55dc58 <col:20>
| `-OptimizeNoneAttr 0x555d6e55dcb0 <col:30>
|-CXXMethodDecl 0x555d6e55dd00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d6e55ddc8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x555d6e55de68 <col:20>
| `-OptimizeNoneAttr 0x555d6e55dec0 <col:30>
|-CXXMethodDecl 0x555d6e55df08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x555d6e55e028 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x555d6e55e198 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x555d6e55e0d8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x555d6e55e288 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x555d6e55e328 <col:20>
| `-OptimizeNoneAttr 0x555d6e55e380 <col:30>
|-CXXMethodDecl 0x555d6e55e3d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d6e55e490 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d6e55e6c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x555d6e55e540 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x555d6e55e5b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55e778 <col:20>
| `-OptimizeNoneAttr 0x555d6e55e7d0 <col:30>
|-CXXMethodDecl 0x555d6e55e878 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x555d6e55e918 <col:20>
| `-OptimizeNoneAttr 0x555d6e55e970 <col:30>
|-CXXMethodDecl 0x555d6e55e9c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x555d6e55ea60 <col:20>
| `-OptimizeNoneAttr 0x555d6e55eab8 <col:30>
|-CXXMethodDecl 0x555d6e55eb00 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x555d6e55eba0 <col:20>
| `-OptimizeNoneAttr 0x555d6e55ebf8 <col:30>
|-CXXMethodDecl 0x555d6e55ecf8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x555d6e55ec30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x555d6e55eda0 <col:20>
| `-OptimizeNoneAttr 0x555d6e55edf8 <col:30>
|-CXXMethodDecl 0x555d6e55efb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x555d6e55ee30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x555d6e55eea8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e55f068 <col:20>
| `-OptimizeNoneAttr 0x555d6e55f0c0 <col:30>
|-CXXMethodDecl 0x555d6e55f168 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x555d6e55f288 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x555d6e55f3a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x555d6e55f448 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x555d6e55f470 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x555d6e55f598 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x555d6e55f638 <col:20>
| `-OptimizeNoneAttr 0x555d6e55f690 <col:30>
|-CXXMethodDecl 0x555d6e55f738 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x555d6e55f7d8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55f830 <col:30>
|-AccessSpecDecl 0x555d6e55f858 <line:344:3, col:9> col:3 public
|-EnumDecl 0x555d6e55f880 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x555d6e55f980 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x555d6e55f9d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e55f960 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x555d6e55f940 <col:14> 'int' 48
|-CXXMethodDecl 0x555d6e55fa38 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x555d6e55fad8 <col:20>
| `-OptimizeNoneAttr 0x555d6e55fb30 <col:30>
|-CXXMethodDecl 0x555d6e55fba8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x555d6e55fc48 <col:20>
| `-OptimizeNoneAttr 0x555d6e55fca0 <col:30>
|-CXXMethodDecl 0x555d6e55fd68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x555d6e55fcd8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x555d6e55ff08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x555d6e5600a8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x555d6e55ffb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x555d6e560150 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x555d6e560250 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560600 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e560230 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e560210 <col:9> 'int' 0
| |-EnumConstantDecl 0x555d6e5602e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560618 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5602c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x555d6e5602a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x555d6e560370 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560630 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e560350 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x555d6e560330 <col:14> 'int' 2
| |-EnumConstantDecl 0x555d6e560400 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560648 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5603e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x555d6e5603c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x555d6e560490 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560660 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e560470 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x555d6e560450 <col:13> 'int' 4
| |-EnumConstantDecl 0x555d6e560520 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d6e560678 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e560500 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x555d6e5604e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x555d6e5605b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x555d6e560690 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e560590 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x555d6e560570 <col:14> 'int' 6
|-CXXMethodDecl 0x555d6e5606f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x555d6e560798 <col:20>
| `-OptimizeNoneAttr 0x555d6e5607f0 <col:30>
|-CXXMethodDecl 0x555d6e5608e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x555d6e560828 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x555d6e560990 <col:20>
| `-OptimizeNoneAttr 0x555d6e5609e8 <col:30>
|-CXXMethodDecl 0x555d6e560a58 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x555d6e560b80 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x555d6e560cf8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x555d6e560c30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x555d6e560dc0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x555d6e560e88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x555d6e560fc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x555d6e560f38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x555d6e561070 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x555d6e561170 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d6e561370 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e561150 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e561130 <col:23> 'int' 0
| |-EnumConstantDecl 0x555d6e561200 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d6e561388 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5611e0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x555d6e5611c0 <col:45> 'int' 4
| |-EnumConstantDecl 0x555d6e561290 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d6e5613a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e561270 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e561250 <col:24> 'int' 0
| `-EnumConstantDecl 0x555d6e561320 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x555d6e5613b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e561300 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x555d6e5612e0 <col:47> 'int' 16
|-CXXMethodDecl 0x555d6e561418 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x555d6e561588 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x555d6e5614c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x555d6e561630 <col:20>
| `-OptimizeNoneAttr 0x555d6e561688 <col:30>
|-CXXMethodDecl 0x555d6e5616d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x555d6e575060 <col:18, col:36>
|   `-ReturnStmt 0x555d6e575050 <col:20, col:33>
|     `-ImplicitCastExpr 0x555d6e575038 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x555d6e575018 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x555d6e574fe8 <col:27> '<bound member function type>' ->xanno 0x555d6e55f738
|           `-CXXThisExpr 0x555d6e574fd8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x555d6e5617d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x555d6e575170 <col:30, col:48>
|   `-ReturnStmt 0x555d6e575160 <col:32, col:45>
|     `-ImplicitCastExpr 0x555d6e575148 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x555d6e575128 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x555d6e5750f8 <col:39> '<bound member function type>' ->xanno 0x555d6e55f598
|           `-CXXThisExpr 0x555d6e5750e8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x555d6e5618b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x555d6e575308 <col:24, col:50>
|   `-ReturnStmt 0x555d6e5752f8 <col:26, col:47>
|     `-UnaryOperator 0x555d6e5752e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d6e5752c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d6e5752a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d6e575258 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x555d6e56a578
|         |   `-CXXMemberCallExpr 0x555d6e575238 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x555d6e575208 <col:34> '<bound member function type>' ->xanno 0x555d6e55f738
|         |       `-CXXThisExpr 0x555d6e5751f8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x555d6e575288 <col:46> 'int' 0
|-CXXMethodDecl 0x555d6e5619c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x555d6e5754d8 <col:36, col:62>
|   `-ReturnStmt 0x555d6e5754c8 <col:38, col:59>
|     `-UnaryOperator 0x555d6e5754b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d6e575490 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d6e575478 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d6e5753f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x555d6e56a578
|         |   `-CXXMemberCallExpr 0x555d6e5753d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d6e5753a0 <col:46> '<bound member function type>' ->xanno 0x555d6e55f598
|         |       `-CXXThisExpr 0x555d6e575390 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555d6e575420 <col:58> 'int' 0
|-CXXMethodDecl 0x555d6e561ad8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x555d6e575670 <col:26, col:53>
|   `-ReturnStmt 0x555d6e575660 <col:28, col:50>
|     `-UnaryOperator 0x555d6e575648 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d6e575628 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x555d6e575610 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d6e5755c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x555d6e56a878
|         |   `-CXXMemberCallExpr 0x555d6e5755a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x555d6e575570 <col:36> '<bound member function type>' ->xanno 0x555d6e55f738
|         |       `-CXXThisExpr 0x555d6e575560 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x555d6e5755f0 <col:49> 'int' 0
|-CXXMethodDecl 0x555d6e561bf8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x555d6e575848 <col:38, col:65>
|   `-ReturnStmt 0x555d6e575838 <col:40, col:62>
|     `-UnaryOperator 0x555d6e575820 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d6e575800 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x555d6e5757e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d6e575758 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x555d6e56a878
|         |   `-CXXMemberCallExpr 0x555d6e575738 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d6e575708 <col:48> '<bound member function type>' ->xanno 0x555d6e55f598
|         |       `-CXXThisExpr 0x555d6e5756f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555d6e575788 <col:61> 'int' 0
|-CXXMethodDecl 0x555d6e561da8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x555d6e561cb0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x555d6e575f18 <col:34, line:463:5>
|   |-ParenExpr 0x555d6e575d60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x555d6e575d30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e575998 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e575968 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e5758b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e5758a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e575860 <col:23> 'int' lvalue ParmVar 0x555d6e561cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e575880 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e575948 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e575918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e5758d8 <col:33> 'int' lvalue ParmVar 0x555d6e561cb0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555d6e575930 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555d6e5758f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555d6e5759f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e5759d8 <col:56> 'int' 0
|   |   `-CallExpr 0x555d6e575c90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555d6e575c78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e575c58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e575cd0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e575ae8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555d6e575ce8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e575b18 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e575d00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e575b50 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x555d6e575d18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e575c40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e575c28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e575be8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x555d6e575f08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x555d6e575ef0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x555d6e575ed0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d6e575ea0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d6e575e50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x555d6e56a578
|         |   `-CXXMemberCallExpr 0x555d6e575e30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d6e575e00 <col:9> '<bound member function type>' ->xanno 0x555d6e55f598
|         |       `-CXXThisExpr 0x555d6e575df0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x555d6e575eb8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x555d6e575e80 <col:21> 'int' lvalue ParmVar 0x555d6e561cb0 'i' 'int'
|-CXXMethodDecl 0x555d6e561ff8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x555d6e561e68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x555d6e561ee0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x555d6e5765a8 <col:40, line:472:5>
|   |-ParenExpr 0x555d6e5763c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x555d6e576390 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e576070 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e576040 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e575f90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e575f78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e575f38 <col:23> 'int' lvalue ParmVar 0x555d6e561e68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e575f58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e576020 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e575ff0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e575fb0 <col:33> 'int' lvalue ParmVar 0x555d6e561e68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555d6e576008 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555d6e575fd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555d6e5760d0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e5760b0 <col:56> 'int' 0
|   |   `-CallExpr 0x555d6e5762f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555d6e5762d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e5762b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e576330 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576140 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555d6e576348 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576170 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e576360 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e5761a8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x555d6e576378 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e5762a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e576288 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e576248 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x555d6e576588 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x555d6e576530 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x555d6e576500 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x555d6e5764b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x555d6e56a578
|     | |   `-CXXMemberCallExpr 0x555d6e576490 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x555d6e576460 <col:2> '<bound member function type>' ->xanno 0x555d6e55f738
|     | |       `-CXXThisExpr 0x555d6e576450 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x555d6e576518 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x555d6e5764e0 <col:14> 'int' lvalue ParmVar 0x555d6e561e68 'i' 'int'
|     `-ImplicitCastExpr 0x555d6e576570 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e576550 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x555d6e561ee0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x555d6e5621b8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x555d6e5620c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d6e576d28 <col:36, line:485:5>
|   |-ParenExpr 0x555d6e576a90 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e576a60 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e576740 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e576710 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e576620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e576608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e5765c8 <col:23> 'int' lvalue ParmVar 0x555d6e5620c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e5765e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e5766f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e5766d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e576640 <col:33> 'int' lvalue ParmVar 0x555d6e5620c0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e5766b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e5766a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e576660 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e576680 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d6e5767a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e576780 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e5769c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e5769a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e576988 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e576a00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576810 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d6e576a18 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576848 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e576a30 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e576880 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x555d6e576a48 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e576970 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e576958 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e576918 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x555d6e576d18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x555d6e576d00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x555d6e576ce8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e576cb8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x555d6e576c58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e576c28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e576ba0 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e576b80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e576b50 <col:61> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e576b40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e576c40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e576bd0 <col:74> 'int' lvalue ParmVar 0x555d6e5620c0 'i' 'int'
|-CXXMethodDecl 0x555d6e562408 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x555d6e562278 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d6e5622f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x555d6e577478 <col:42, line:500:5>
|   |-ParenExpr 0x555d6e577210 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e5771e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e576ec0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e576e90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e576da0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e576d88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e576d48 <col:23> 'int' lvalue ParmVar 0x555d6e562278 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e576d68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e576e70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e576e58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e576dc0 <col:33> 'int' lvalue ParmVar 0x555d6e562278 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e576e38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e576e20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e576de0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e576e00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d6e576f20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e576f00 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e577140 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e577128 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e577108 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e577180 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576f90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d6e577198 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e576fc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e5771b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e577000 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x555d6e5771c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e5770f0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e5770d8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e577098 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x555d6e577458 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x555d6e577408 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d6e5773d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x555d6e577380 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d6e577350 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d6e577300 <col:48, col:57> 'char [48]' lvalue ->c 0x555d6e56a450
|     |     |   `-CXXMemberCallExpr 0x555d6e5772e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d6e5772b0 <col:48> '<bound member function type>' ->xanno 0x555d6e55f738
|     |     |       `-CXXThisExpr 0x555d6e5772a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d6e577368 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d6e577330 <col:61> 'int' lvalue ParmVar 0x555d6e562278 'i' 'int'
|     `-ImplicitCastExpr 0x555d6e577440 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e577420 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x555d6e5622f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x555d6e5625c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x555d6e5624d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555d6e577bd8 <col:35, line:513:5>
|   |-ParenExpr 0x555d6e5778e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e5778b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e577610 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e5775e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e5774f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e5774d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e577498 <col:23> 'int' lvalue ParmVar 0x555d6e5624d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e5774b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e5775c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e5775a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e577510 <col:33> 'int' lvalue ParmVar 0x555d6e5624d0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e577588 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e577570 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e577530 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e577550 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d6e577670 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e577650 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e577818 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e577800 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e5777e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e577858 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e5776e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d6e577870 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e577718 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e577888 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e577750 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x555d6e5778a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e5777c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e5777b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e577770 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x555d6e577bc8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x555d6e577bb0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x555d6e577b98 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e577b68 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x555d6e577ae0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e577ab0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e577a60 <col:60, col:69> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e577a40 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e577a10 <col:60> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e577a00 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e577ac8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e577a90 <col:73> 'int' lvalue ParmVar 0x555d6e5624d0 'i' 'int'
|-CXXMethodDecl 0x555d6e562818 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x555d6e562688 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d6e562700 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x555d6e5782f8 <col:41, line:528:5>
|   |-ParenExpr 0x555d6e578080 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e578050 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e577d70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e577d40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e577c50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e577c38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e577bf8 <col:23> 'int' lvalue ParmVar 0x555d6e562688 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e577c18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e577d20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e577d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e577c70 <col:33> 'int' lvalue ParmVar 0x555d6e562688 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e577ce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e577cd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e577c90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e577cb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d6e577dd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e577db0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e577fb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e577f98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e577f78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e577ff0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e577e40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d6e578008 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e577e78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e578020 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e577eb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x555d6e578038 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e577f60 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e577f48 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e577f08 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x555d6e5782d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x555d6e578288 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d6e578258 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x555d6e578200 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d6e5781c0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d6e578170 <col:47, col:56> 'char [48]' lvalue ->c 0x555d6e56a450
|     |     |   `-CXXMemberCallExpr 0x555d6e578150 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d6e578120 <col:47> '<bound member function type>' ->xanno 0x555d6e55f738
|     |     |       `-CXXThisExpr 0x555d6e578110 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d6e5781d8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d6e5781a0 <col:60> 'int' lvalue ParmVar 0x555d6e562688 'i' 'int'
|     `-ImplicitCastExpr 0x555d6e5782c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e5782a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x555d6e562700 'x' 'int16_t':'short'
|-CXXMethodDecl 0x555d6e5629d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x555d6e5628e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d6e5789c8 <col:36, line:541:5>
|   |-ParenExpr 0x555d6e578768 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e578738 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e578490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e578460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e578370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e578358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e578318 <col:23> 'int' lvalue ParmVar 0x555d6e5628e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e578338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e578440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e578428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e578390 <col:33> 'int' lvalue ParmVar 0x555d6e5628e0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e578408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e5783f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e5783b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e5783d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d6e5784f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e5784d0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e578698 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e578680 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e578660 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e5786d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e578560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d6e5786f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e578598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e578708 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e5785d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x555d6e578720 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e578648 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e578630 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e5785f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x555d6e5789b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x555d6e5789a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x555d6e578988 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e578958 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x555d6e578900 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e5788d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e578880 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e578860 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e578830 <col:61> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e578820 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e5788e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e5788b0 <col:74> 'int' lvalue ParmVar 0x555d6e5628e0 'i' 'int'
|-CXXMethodDecl 0x555d6e562ba8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x555d6e562a98 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x555d6e562b10 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d6e562c58 <col:20>
| `-OptimizeNoneAttr 0x555d6e562cb0 <col:30>
|-CXXMethodDecl 0x555d6e562de8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x555d6e562cf0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555d6e579098 <col:35, line:562:5>
|   |-ParenExpr 0x555d6e578e38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e578e08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e578b60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e578b30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e578a40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e578a28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e5789e8 <col:23> 'int' lvalue ParmVar 0x555d6e562cf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e578a08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e578b10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e578af8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e578a60 <col:33> 'int' lvalue ParmVar 0x555d6e562cf0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e578ad8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e578ac0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e578a80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e578aa0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d6e578bc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e578ba0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e578d68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e578d50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e578d30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e578da8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e578c30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d6e578dc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e578c68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e578dd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e578ca0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x555d6e578df0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e578d18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e578d00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e578cc0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x555d6e579088 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x555d6e579070 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x555d6e579058 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e579028 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x555d6e578fd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e578fa0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e578f50 <col:60, col:69> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e578f30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e578f00 <col:60> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e578ef0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e578fb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e578f80 <col:73> 'int' lvalue ParmVar 0x555d6e562cf0 'i' 'int'
|-CXXMethodDecl 0x555d6e562ff8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x555d6e562ea8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d6e562f20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x555d6e579778 <col:41, line:577:5>
|   |-ParenExpr 0x555d6e579508 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e5794d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e579230 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e579200 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e579110 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e5790f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e5790b8 <col:23> 'int' lvalue ParmVar 0x555d6e562ea8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e5790d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e5791e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e5791c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e579130 <col:33> 'int' lvalue ParmVar 0x555d6e562ea8 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e5791a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e579190 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e579150 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e579170 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d6e579290 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e579270 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e579438 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e579420 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e579400 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e579478 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e579300 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d6e579490 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e579338 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e5794a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e579370 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x555d6e5794c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e5793e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e5793d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e579390 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x555d6e579758 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x555d6e579708 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d6e5796d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x555d6e579678 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d6e579648 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d6e5795f8 <col:47, col:56> 'char [48]' lvalue ->c 0x555d6e56a450
|     |     |   `-CXXMemberCallExpr 0x555d6e5795d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d6e5795a8 <col:47> '<bound member function type>' ->xanno 0x555d6e55f738
|     |     |       `-CXXThisExpr 0x555d6e579598 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d6e579660 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d6e579628 <col:60> 'int' lvalue ParmVar 0x555d6e562ea8 'i' 'int'
|     `-ImplicitCastExpr 0x555d6e579740 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e579720 <col:65> 'int32_t':'int' lvalue ParmVar 0x555d6e562f20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x555d6e5631b8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x555d6e5630c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d6e579ea8 <col:36, line:591:5>
|   |-ParenExpr 0x555d6e579be8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e579bb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e579910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e5798e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e5797f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e5797d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e579798 <col:23> 'int' lvalue ParmVar 0x555d6e5630c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e5797b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e5798c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e5798a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e579810 <col:33> 'int' lvalue ParmVar 0x555d6e5630c0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e579888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e579870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e579830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e579850 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555d6e579970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e579950 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e579b18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e579b00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e579ae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e579b58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e5799e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555d6e579b70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e579a18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e579b88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e579a50 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x555d6e579ba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e579ac8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e579ab0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e579a70 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x555d6e579e98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x555d6e579e80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x555d6e579e68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e579e38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x555d6e579db0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e579d80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e579d30 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e579d10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e579ce0 <col:61> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e579cd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e579d98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e579d60 <col:74> 'int' lvalue ParmVar 0x555d6e5630c0 'i' 'int'
|-CXXMethodDecl 0x555d6e563408 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x555d6e563278 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d6e5632f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x555d6e57a588 <col:42, line:606:5>
|   |-ParenExpr 0x555d6e57a318 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d6e57a2e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e57a040 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e57a010 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e579f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e579f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e579ec8 <col:23> 'int' lvalue ParmVar 0x555d6e563278 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e579ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e579ff0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d6e579fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e579f40 <col:33> 'int' lvalue ParmVar 0x555d6e563278 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e579fb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e579fa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e579f60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d6e579f80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555d6e57a0a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e57a080 <col:60> 'int' 0
|   |   `-CallExpr 0x555d6e57a248 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d6e57a230 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e57a210 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e57a288 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57a110 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555d6e57a2a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57a148 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e57a2b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e57a180 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x555d6e57a2d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e57a1f8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e57a1e0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e57a1a0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x555d6e57a568 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x555d6e57a518 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d6e57a4e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x555d6e57a488 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d6e57a458 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d6e57a408 <col:48, col:57> 'char [48]' lvalue ->c 0x555d6e56a450
|     |     |   `-CXXMemberCallExpr 0x555d6e57a3e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d6e57a3b8 <col:48> '<bound member function type>' ->xanno 0x555d6e55f738
|     |     |       `-CXXThisExpr 0x555d6e57a3a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d6e57a470 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d6e57a438 <col:61> 'int' lvalue ParmVar 0x555d6e563278 'i' 'int'
|     `-ImplicitCastExpr 0x555d6e57a550 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x555d6e57a530 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x555d6e5632f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x555d6e5635a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x555d6e5634d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x555d6e57adf8 <col:33, line:620:5>
|   |-ParenExpr 0x555d6e57ab70 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x555d6e57ab40 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e57a790 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e57a760 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e57a600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e57a5e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e57a5a8 <col:23> 'int' lvalue ParmVar 0x555d6e5634d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e57a5c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e57a740 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555d6e57a728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e57a620 <col:33> 'int' lvalue ParmVar 0x555d6e5634d0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e57a708 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e57a6f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e57a640 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555d6e57a6c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555d6e57a6b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555d6e57a678 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555d6e57a7f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e57a7d0 <col:79> 'int' 0
|   |   `-CallExpr 0x555d6e57aaa0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555d6e57aa88 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e57aa68 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e57aae0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57a8d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555d6e57aaf8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57a920 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e57ab10 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e57a958 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x555d6e57ab28 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e57aa50 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e57aa38 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e57a9f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x555d6e57ade8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x555d6e57add0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x555d6e57adb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d6e57ad88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x555d6e57ad00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d6e57acd0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d6e57ac80 <col:67, col:76> 'char const[48]' lvalue ->c 0x555d6e56a450
|             |   `-CXXMemberCallExpr 0x555d6e57ac60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d6e57ac30 <col:67> '<bound member function type>' ->xanno 0x555d6e55f598
|             |       `-CXXThisExpr 0x555d6e57ac20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d6e57ace8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d6e57acb0 <col:80> 'int' lvalue ParmVar 0x555d6e5634d0 'i' 'int'
|-CXXMethodDecl 0x555d6e5637b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x555d6e563660 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d6e5636e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x555d6e57b620 <col:45, line:635:5>
|   |-ParenExpr 0x555d6e57b368 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x555d6e57b338 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555d6e57b000 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d6e57afd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d6e57ae70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d6e57ae58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d6e57ae18 <col:23> 'int' lvalue ParmVar 0x555d6e563660 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d6e57ae38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d6e57afb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555d6e57af98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d6e57ae90 <col:33> 'int' lvalue ParmVar 0x555d6e563660 'i' 'int'
|   |   |     `-BinaryOperator 0x555d6e57af78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d6e57af60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d6e57aeb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d6e55f980 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555d6e57af38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555d6e57af20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555d6e57aee8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555d6e57b060 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d6e57b040 <col:79> 'int' 0
|   |   `-CallExpr 0x555d6e57b298 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555d6e57b280 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d6e57b260 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d6e0cc250 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d6e57b2d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57b0d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555d6e57b2f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d6e57b118 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d6e57b308 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d6e57b150 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x555d6e57b320 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d6e57b248 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d6e57b230 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d6e57b1e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x555d6e57b600 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x555d6e57b568 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d6e57b538 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x555d6e57b4d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d6e57b4a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d6e57b458 <col:54, col:63> 'char [48]' lvalue ->c 0x555d6e56a450
|     |     |   `-CXXMemberCallExpr 0x555d6e57b438 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d6e57b408 <col:54> '<bound member function type>' ->xanno 0x555d6e55f738
|     |     |       `-CXXThisExpr 0x555d6e57b3f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d6e57b4c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d6e57b488 <col:67> 'int' lvalue ParmVar 0x555d6e563660 'i' 'int'
|     `-CXXConstCastExpr 0x555d6e57b5d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x555d6e57b5b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x555d6e57b580 <col:91> 'const void *' lvalue ParmVar 0x555d6e5636e0 'x' 'const void *'
|-CXXMethodDecl 0x555d6e563888 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x555d6e57b6a8 <col:34, line:640:5>
|   `-ReturnStmt 0x555d6e57b698 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x555d6e57b680 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x555d6e57b650 <col:16> 'Packet *' lvalue ->_data_packet 0x555d6e56b008
|         `-CXXThisExpr 0x555d6e57b640 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555d6e5639c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x555d6e563938 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d6e574768 <col:46> 'bool' true
|-CXXMethodDecl 0x555d6e563b48 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x555d6e563a80 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x555d6e563bf0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x555d6e5643a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x555d6e563cf0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564410 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563cd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x555d6e563cb0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555d6e558e50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555d6e563d80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564428 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563d60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x555d6e563d40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555d6e558ee0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555d6e563e10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564440 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563df0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e563dd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x555d6e563ea0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564458 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563e80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x555d6e563e60 <col:19> 'int' 16
| |-EnumConstantDecl 0x555d6e563f30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564470 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563f10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x555d6e563ef0 <col:21> 'int' 16
| |-EnumConstantDecl 0x555d6e563fc0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e564488 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e563fa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555d6e563f80 <col:19> 'int' 32
| |-EnumConstantDecl 0x555d6e564050 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e5644a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e564030 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x555d6e564010 <col:19> 'int' EnumConstant 0x555d6e563ea0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555d6e5640e0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e5644b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e5640c0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x555d6e5640a0 <col:19> 'int' EnumConstant 0x555d6e563fc0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555d6e5641b0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e5644d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e564190 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x555d6e564170 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555d6e564130 <col:23> 'int' EnumConstant 0x555d6e5640e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555d6e564150 <col:40> 'int' 2
| |-EnumConstantDecl 0x555d6e564280 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d6e5644e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e564260 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x555d6e564240 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555d6e564200 <col:23> 'int' EnumConstant 0x555d6e5640e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555d6e564220 <col:40> 'int' 4
| `-EnumConstantDecl 0x555d6e564350 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x555d6e564500 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d6e564330 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x555d6e564310 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x555d6e5642d0 <col:23> 'int' EnumConstant 0x555d6e5640e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x555d6e5642f0 <col:40> 'int' 8
|-CXXMethodDecl 0x555d6e564540 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x555d6e5645e0 <col:68> "" ""
|-CXXMethodDecl 0x555d6e564678 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x555d6e564718 <col:45> "" ""
|-CXXMethodDecl 0x555d6e5647b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555d6e564850 <col:57> "" ""
|-CXXMethodDecl 0x555d6e5648e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x555d6e564988 <col:45> "" ""
|-CXXMethodDecl 0x555d6e564a20 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555d6e564ac0 <col:57> "" ""
|-CXXMethodDecl 0x555d6e564b50 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x555d6e564bf0 <col:51> "" ""
|-CXXMethodDecl 0x555d6e564c80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555d6e564d20 <col:63> "" ""
|-CXXMethodDecl 0x555d6e564db0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x555d6e564e50 <col:53> "" ""
|-CXXMethodDecl 0x555d6e564ee0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555d6e564f80 <col:65> "" ""
|-CXXMethodDecl 0x555d6e565098 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555d6e565008 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x555d6e565140 <col:61> "" ""
|-CXXMethodDecl 0x555d6e5652d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555d6e5651c8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x555d6e565240 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555d6e565388 <col:67> "" ""
|-CXXMethodDecl 0x555d6e5654a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555d6e565410 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d6e565548 <col:63> "" ""
|-CXXMethodDecl 0x555d6e5656e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555d6e5655d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d6e565648 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555d6e565790 <col:69> "" ""
|-CXXMethodDecl 0x555d6e5658a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555d6e565818 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d6e565950 <col:63> "" ""
|-CXXMethodDecl 0x555d6e568028 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555d6e567f18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d6e567f90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d6e5680d8 <col:69> "" ""
|-CXXMethodDecl 0x555d6e5681f0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x555d6e568160 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x555d6e568298 <col:62> "" ""
|-CXXMethodDecl 0x555d6e568430 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555d6e568320 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d6e568398 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x555d6e5684e0 <col:68> "" ""
|-CXXMethodDecl 0x555d6e5685f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x555d6e568568 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d6e5686a0 <col:63> "" ""
|-CXXMethodDecl 0x555d6e568838 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x555d6e568728 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d6e5687a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x555d6e5688e8 <col:69> "" ""
|-CXXMethodDecl 0x555d6e568978 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555d6e568a18 <col:64> "" ""
|-CXXMethodDecl 0x555d6e568aa8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x555d6e568b48 <col:52> "" ""
|-CXXMethodDecl 0x555d6e568bd8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555d6e568c78 <col:67> "" ""
|-CXXMethodDecl 0x555d6e568d08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x555d6e568da8 <col:55> "" ""
|-CXXMethodDecl 0x555d6e568ec0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555d6e568e30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d6e568f68 <col:58> "" ""
|-CXXMethodDecl 0x555d6e569100 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555d6e568ff0 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d6e569068 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555d6e5691b0 <col:62> "" ""
|-CXXMethodDecl 0x555d6e5692c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x555d6e569238 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d6e569370 <col:58> "" ""
|-CXXMethodDecl 0x555d6e569508 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x555d6e5693f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d6e569470 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x555d6e5695b8 <col:62> "" ""
|-CXXMethodDecl 0x555d6e5696d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555d6e569640 <col:34> col:37 'int'
| `-DeprecatedAttr 0x555d6e569778 <col:60> "" ""
|-CXXMethodDecl 0x555d6e569910 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555d6e569800 <col:34> col:37 'int'
| |-ParmVarDecl 0x555d6e569878 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555d6e5699c0 <col:64> "" ""
|-CXXMethodDecl 0x555d6e569ad8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x555d6e569a48 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d6e569b80 <col:58> "" ""
|-CXXMethodDecl 0x555d6e569d18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555d6e569c08 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d6e569c80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x555d6e569dc8 <col:62> "" ""
|-CXXMethodDecl 0x555d6e569ee0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555d6e569e50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x555d6e569f88 <col:59> "" ""
|-CXXMethodDecl 0x555d6e56a120 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555d6e56a010 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d6e56a088 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d6e56a1d0 <col:63> "" ""
|-AccessSpecDecl 0x555d6e56a240 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x555d6e56a268 prev 0x555d6e55f470 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d6e56a360 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x555d6e56a450 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x555d6e56a578 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x555d6e56a6f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x555d6e56a878 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x555d6e56a9f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x555d6e57b828 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555d6e57c098 <col:11>
| |-CXXDestructorDecl 0x555d6e57b900 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x555d6e57ba38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555d6e57ba38
| | `-ParmVarDecl 0x555d6e57bb48 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x555d6e57bbe8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d6e57bbe8
| | `-ParmVarDecl 0x555d6e57bcf8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x555d6e57eab8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d6e57ebc8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x555d6e57ee48 <col:11>
| |   `-ReturnStmt 0x555d6e57ee38 <col:11>
| |     `-UnaryOperator 0x555d6e57ee20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555d6e57ee10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x555d6e57ec38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d6e57ec38
|   `-ParmVarDecl 0x555d6e57ed48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x555d6e56aa60 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d6e56ab78 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x555d6e56ac18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x555d6e56ac80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x555d6e56ace8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x555d6e56ad50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x555d6e56adb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x555d6e56ae70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x555d6e56aed0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x555d6e56af30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x555d6e57b738 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x555d6e56ac18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x555d6e57c0a8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x555d6e57c100 <col:12>
| |-CXXConstructorDecl 0x555d6e57bd68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555d6e57bd68
| | `-ParmVarDecl 0x555d6e57be78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x555d6e57bf18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555d6e57bf18
| | `-ParmVarDecl 0x555d6e57c028 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x555d6e57e1a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x555d6e56afa8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x555d6e56b008 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x555d6e56b070 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x555d6e56b0d8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x555d6e56b140 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x555d6e56b1a8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x555d6e56b208 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x555d6e56b268 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x555d6e56b2d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x555d6e56b358 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x555d6e56afa8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x555d6e57b6d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555d6e56b208 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x555d6e57c110 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x555d6e57c170 <col:21, line:755:5>
|-CXXConstructorDecl 0x555d6e56b4f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x555d6e56b438 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x555d6e56b5f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x555d6e56b7d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x555d6e56b6e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x555d6e56baa8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x555d6e56b890 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d6e56b908 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d6e56b980 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e56bcc8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x555d6e56bb78 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x555d6e56bbf0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x555d6e5742a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x555d6e56bd88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x555d6e56be00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x555d6e56be78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x555d6e574400 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555d6e574370 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d6e574548 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555d6e5744b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x555d6e574640 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e6508f0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d6e650a08 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x555d6e650a98 <col:16, col:22> col:16 public
|-EnumDecl 0x555d6e650ac0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x555d6e650bc0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d6e650e10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e650ba0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555d6e650b80 <col:21> 'int' 0
| |-EnumConstantDecl 0x555d6e650c50 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d6e650e28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e650c30 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x555d6e650c10 <col:24> 'int' 22
| |-EnumConstantDecl 0x555d6e650ce0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d6e650e40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e650cc0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x555d6e650ca0 <col:24> 'int' 34
| |-EnumConstantDecl 0x555d6e650d70 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d6e650e58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d6e650d50 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x555d6e650d30 <col:25> 'int' 95
| `-EnumConstantDecl 0x555d6e650dc0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x555d6e6527e0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d6e652c18 <col:7>
|-CXXConstructorDecl 0x555d6e6528e8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x555d6e6528e8
| `-ParmVarDecl 0x555d6e6529f8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x555d6e652a98 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e652ba8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x555d6e6b1f00 <col:7>
`-CXXDestructorDecl 0x555d6e654d18 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d6e650e88 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x555d6e650fe8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x555d6e651078 <col:32, col:38> col:32 public
|-TypedefDecl 0x555d6e6510b0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x555d6e1857a0 'uint32_t' sugar
|   |-Typedef 0x555d6e0994c8 'uint32_t'
|   `-TypedefType 0x555d6e0725a0 '__uint32_t' sugar
|     |-Typedef 0x555d6e072198 '__uint32_t'
|     `-BuiltinType 0x555d6e030620 'unsigned int'
|-CXXConstructorDecl 0x555d6e6511f8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x555d6e651120 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x555d6e6526e8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555d6e652c28 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555d6e651fa0 'base' 'int'
| | `-ImplicitCastExpr 0x555d6e652788 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x555d6e652748 <col:16> 'int' lvalue ParmVar 0x555d6e651120 'b' 'int'
| `-CompoundStmt 0x555d6e652c98 <col:19, line:1046:5>
|-CXXMethodDecl 0x555d6e6516f0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x555d6e6512c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x555d6e651340 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x555d6e6513b8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x555d6e651438 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x555d6e6514f8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x555d6e651578 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x555d6e651b58 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x555d6e6517c0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x555d6e651ab8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x555d6e651868 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x555d6e651920 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x555d6e651998 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x555d6e652708 <col:82> 'const ArgContext' lvalue Var 0x555d6e6462c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x555d6e653bc8 <col:94, line:1067:5>
| |   |-DeclStmt 0x555d6e652e28 <line:1054:9, col:64>
| |   | `-VarDecl 0x555d6e652cb8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x555d6e652de0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x555d6e653048 <line:1055:9, col:91>
| |   | `-VarDecl 0x555d6e652e58 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x555d6e653020 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x555d6e653000 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x555d6e652fb0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x555d6e652f90 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x555d6e652f38 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x555d6e652ee8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x555d6e652f18 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x555d6e652f78 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x555d6e652f58 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x555d6e652fe0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x555d6e6531a8 <line:1056:9, col:27>
| |   | `-VarDecl 0x555d6e653140 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x555d6e6535f0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x555d6e653520 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x555d6e6534a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555d6e54f788 0x555d6e398d68 0x555d6e398a40 0x555d6e38a220 0x555d6e389ed0 0x555d6e3897c0 0x555d6e35c130 0x555d6e2e85f0
| |   | | |-CallExpr 0x555d6e6533e0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x555d6e6531d0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x555d6e653280 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x555d6e653250 <col:19, col:23> '<bound member function type>' .begin 0x555d6e379428
| |   | | | |   `-DeclRefExpr 0x555d6e653230 <col:19> 'const String' lvalue ParmVar 0x555d6e651868 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x555d6e6532f0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x555d6e6532c0 <col:32, col:36> '<bound member function type>' .end 0x555d6e379640
| |   | | | |   `-DeclRefExpr 0x555d6e6532a0 <col:32> 'const String' lvalue ParmVar 0x555d6e651868 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x555d6e653310 <col:43> 'const bool' lvalue Var 0x555d6e652cb8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x555d6e653378 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x555d6e653358 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x555d6e6533a0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x555d6e653140 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x555d6e6533c0 <col:73> 'const int' lvalue Var 0x555d6e652e58 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x555d6e653480 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x555d6e653450 <col:16, col:20> '<bound member function type>' .end 0x555d6e379640
| |   | |     `-DeclRefExpr 0x555d6e653430 <col:16> 'const String' lvalue ParmVar 0x555d6e651868 'str' 'const String &'
| |   | `-BinaryOperator 0x555d6e6535d0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x555d6e653568 <col:13> 'int' lvalue ->status 0x555d6e652008
| |   |   | `-CXXThisExpr 0x555d6e653558 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x555d6e6535b8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x555d6e653598 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650c50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x555d6e653840 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x555d6e653728 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x555d6e653710 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x555d6e6536f8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x555d6e653618 <col:13> 'int' lvalue ->status 0x555d6e652008
| |   | | |     `-CXXThisExpr 0x555d6e653608 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x555d6e6536d8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x555d6e6536a8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x555d6e653658 <col:23> 'int' lvalue ->status 0x555d6e652008
| |   | |   |   `-CXXThisExpr 0x555d6e653648 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x555d6e6536c0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x555d6e653688 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x555d6e653820 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x555d6e6537c0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x555d6e653768 <col:13, col:18> '<bound member function type>' .error 0x555d6e514d90
| |   |   | | `-DeclRefExpr 0x555d6e653748 <col:13> 'const ArgContext' lvalue ParmVar 0x555d6e651998 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x555d6e6537e8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x555d6e653798 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x555d6e653810 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x555d6e653800 <col:20> 'bool' false
| |   |-DeclStmt 0x555d6e653a18 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x555d6e6539c0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x555d6e653950 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x555d6e653b78 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x555d6e653a30 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x555d6e31c5b8
| |   | |-DeclRefExpr 0x555d6e653a78 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x555d6e653140 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x555d6e653b48 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x555d6e653ac0 <col:64> 'V' lvalue ParmVar 0x555d6e651920 'result' 'V &'
| |   `-ReturnStmt 0x555d6e653bb8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x555d6e653ba8 <col:16> 'bool' true
| `-CXXMethodDecl 0x555d6e6b5cb8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x555d6e6b5a90 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x555d6e6b5b68 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x555d6e6b5bd0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x555d6e6b7a50 <col:94, line:1067:5>
|     |-DeclStmt 0x555d6e6b64c8 <line:1054:9, col:64>
|     | `-VarDecl 0x555d6e6b62e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x555d6e6b6458 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x555d6e6b6428 <col:36, col:55> 'const bool' lvalue Var 0x555d6e30b7d0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x555d6e6b66a8 <line:1055:9, col:91>
|     | `-VarDecl 0x555d6e6b64e0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x555d6e6b6628 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x555d6e6b6610 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x555d6e6b65f0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x555d6e6b65d0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x555d6e6b65b0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x555d6e6b6578 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x555d6e6b6558 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x555d6e652f18 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x555d6e6b6598 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x555d6e652f58 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x555d6e652fe0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x555d6e6b6840 <line:1056:9, col:27>
|     | `-VarDecl 0x555d6e6b67d8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x555d6e6b6cc8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x555d6e6b6c70 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x555d6e6b6b28 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x555d6e6b6af8 <col:13> '<bound member function type>' ->parse 0x555d6e6516f0
|     | | | | `-CXXThisExpr 0x555d6e6b6ae8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x555d6e6b6988 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555d6e6b6958 <col:19, col:23> '<bound member function type>' .begin 0x555d6e379428
|     | | | |   `-DeclRefExpr 0x555d6e6b6938 <col:19> 'const String' lvalue ParmVar 0x555d6e6b5a90 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x555d6e6b69f8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555d6e6b69c8 <col:32, col:36> '<bound member function type>' .end 0x555d6e379640
|     | | | |   `-DeclRefExpr 0x555d6e6b69a8 <col:32> 'const String' lvalue ParmVar 0x555d6e6b5a90 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x555d6e6b6b98 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x555d6e6b6b78 <col:43> 'const bool' lvalue Var 0x555d6e6b62e8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x555d6e6b6a80 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x555d6e6b6a68 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x555d6e6b6a48 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x555d6e6b6bb0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x555d6e6b6aa8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x555d6e6b67d8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x555d6e6b6be8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x555d6e6b6bc8 <col:73> 'const int' lvalue Var 0x555d6e6b64e0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x555d6e6b6c50 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x555d6e6b6c20 <col:16, col:20> '<bound member function type>' .end 0x555d6e379640
|     | |     `-DeclRefExpr 0x555d6e6b6c00 <col:16> 'const String' lvalue ParmVar 0x555d6e6b5a90 'str' 'const String &'
|     | `-BinaryOperator 0x555d6e6b6ca8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x555d6e653568 <col:13> 'int' lvalue ->status 0x555d6e652008
|     |   | `-CXXThisExpr 0x555d6e653558 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x555d6e6b6c90 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x555d6e653598 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650c50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x555d6e6b6e40 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x555d6e6b6d60 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x555d6e6b6d48 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x555d6e6b6d30 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x555d6e653618 <col:13> 'int' lvalue ->status 0x555d6e652008
|     | | |     `-CXXThisExpr 0x555d6e653608 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x555d6e6b6d10 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x555d6e6b6ce0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x555d6e653658 <col:23> 'int' lvalue ->status 0x555d6e652008
|     | |   |   `-CXXThisExpr 0x555d6e653648 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x555d6e6b6cf8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x555d6e653688 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x555d6e6b6e20 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x555d6e6b6dd0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x555d6e6b6da0 <col:13, col:18> '<bound member function type>' .error 0x555d6e514d90
|     |   | | `-DeclRefExpr 0x555d6e6b6d80 <col:13> 'const ArgContext' lvalue ParmVar 0x555d6e6b5bd0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x555d6e6b6df8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x555d6e653798 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x555d6e6b6e10 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x555d6e653800 <col:20> 'bool' false
|     |-DeclStmt 0x555d6e6b7388 <line:1064:9, col:64>
|     | `-TypedefDecl 0x555d6e6b7330 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x555d6e6b72e0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x555d6e6b72c0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x555d6e6b7250 'type'
|     |       `-ElaboratedType 0x555d6e6b7200 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x555d6e6b71e0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x555d6e30b928 'unsigned_type'
|     |           `-BuiltinType 0x555d6e030620 'unsigned int'
|     |-CallExpr 0x555d6e6b79e0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x555d6e6b79c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x555d6e6b7948 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x555d6e6b7828 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x555d6e31c5b8 'extract_integer')
|     | |-ImplicitCastExpr 0x555d6e6b7a28 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x555d6e6b7a10 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x555d6e6b73e8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x555d6e6b67d8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x555d6e6b74b8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x555d6e6b7468 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x555d6e6b5b68 'result' 'unsigned int &'
|     `-ReturnStmt 0x555d6e6b7a40 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x555d6e653ba8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x555d6e651f18 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x555d6e651bc8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x555d6e651e78 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x555d6e651c78 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x555d6e651d18 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x555d6e651d90 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x555d6e652728 <col:71> 'const ArgContext' lvalue Var 0x555d6e6462c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x555d6e654338 <col:83, line:1083:5>
| |   |-DeclStmt 0x555d6e653c90 <line:1071:9, col:12>
| |   | `-VarDecl 0x555d6e653c28 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x555d6e654310 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x555d6e653f20 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x555d6e653da8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x555d6e653d70 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x555d6e653cb8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x555d6e653d10 <col:31> 'const String' lvalue ParmVar 0x555d6e651c78 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x555d6e653d30 <col:36> 'V' lvalue Var 0x555d6e653c28 'x' 'V'
| |     | |   `-DeclRefExpr 0x555d6e653d50 <col:39> 'const ArgContext' lvalue ParmVar 0x555d6e651d90 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x555d6e653f00 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x555d6e653ee0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x555d6e653ec8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x555d6e653eb0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x555d6e653dd0 <col:17> 'int' lvalue ->status 0x555d6e652008
| |     |     |     `-CXXThisExpr 0x555d6e653dc0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x555d6e653e90 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x555d6e653e60 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x555d6e653e10 <col:27> 'int' lvalue ->status 0x555d6e652008
| |     |       |   `-CXXThisExpr 0x555d6e653e00 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x555d6e653e78 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x555d6e653e40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x555d6e653f50 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x555d6e653f40 <col:20> 'bool' false
| |     `-IfStmt 0x555d6e6542e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x555d6e653ff0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x555d6e653fc0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x555d6e653f70 <col:18> 'int' lvalue ->status 0x555d6e652008
| |       | |   `-CXXThisExpr 0x555d6e653f60 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x555d6e653fd8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x555d6e653fa0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x555d6e654228 <col:42, line:1079:9>
| |       | |-CallExpr 0x555d6e6541d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x555d6e654020 <line:1076:13> '<bound member function type>' ->range_error 0x555d6e652618
| |       | | | `-CXXThisExpr 0x555d6e654010 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x555d6e654050 <col:25> 'const ArgContext' lvalue ParmVar 0x555d6e651d90 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x555d6e654130 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x555d6e6541a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x555d6e654188 <col:43> 'V' lvalue Var 0x555d6e653c28 'x' 'V'
| |       | `-ReturnStmt 0x555d6e654218 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x555d6e654208 <col:20> 'bool' false
| |       `-CompoundStmt 0x555d6e6542c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x555d6e654288 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x555d6e654248 <col:13> 'V' lvalue ParmVar 0x555d6e651d18 'result' 'V &'
| |         | `-DeclRefExpr 0x555d6e654268 <col:22> 'V' lvalue Var 0x555d6e653c28 'x' 'V'
| |         `-ReturnStmt 0x555d6e6542b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x555d6e6542a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x555d6e6b5678 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x555d6e6b5450 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x555d6e6b5528 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x555d6e6b5590 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x555d6e6b62c8 <col:83, line:1083:5>
|     |-DeclStmt 0x555d6e6b5900 <line:1071:9, col:12>
|     | `-VarDecl 0x555d6e6b5898 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x555d6e6b62a0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x555d6e6b5f30 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x555d6e6b5e58 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x555d6e6b5e20 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x555d6e6b5dd8 <col:14> '<bound member function type>' ->parse_saturating 0x555d6e6b5cb8
|       | |   | `-CXXThisExpr 0x555d6e6b5dc8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x555d6e6b5970 <col:31> 'const String' lvalue ParmVar 0x555d6e6b5450 'str' 'const String &'
|       | |   |-DeclRefExpr 0x555d6e6b5990 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x555d6e6b5898 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x555d6e6b59b0 <col:39> 'const ArgContext' lvalue ParmVar 0x555d6e6b5590 'args' 'const ArgContext &'
|       | `-ParenExpr 0x555d6e6b5f10 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x555d6e6b5ef0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x555d6e6b5ed8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x555d6e6b5ec0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x555d6e653dd0 <col:17> 'int' lvalue ->status 0x555d6e652008
|       |     |     `-CXXThisExpr 0x555d6e653dc0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x555d6e6b5ea0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x555d6e6b5e70 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x555d6e653e10 <col:27> 'int' lvalue ->status 0x555d6e652008
|       |       |   `-CXXThisExpr 0x555d6e653e00 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x555d6e6b5e88 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x555d6e653e40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x555d6e6b5f50 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x555d6e653f40 <col:20> 'bool' false
|       `-IfStmt 0x555d6e6b6278 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x555d6e6b5f90 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x555d6e6b5f60 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x555d6e653f70 <col:18> 'int' lvalue ->status 0x555d6e652008
|         | |   `-CXXThisExpr 0x555d6e653f60 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x555d6e6b5f78 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x555d6e653fa0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d6e650ce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x555d6e6b61b0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x555d6e6b6120 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x555d6e654020 <line:1076:13> '<bound member function type>' ->range_error 0x555d6e652618
|         | | | `-CXXThisExpr 0x555d6e654010 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x555d6e6b5fb0 <col:25> 'const ArgContext' lvalue ParmVar 0x555d6e6b5590 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x555d6e6b6188 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x555d6e6b6158 <col:31, col:50> 'const bool' lvalue Var 0x555d6e30b7d0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x555d6e6b60f8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x555d6e6b60e0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x555d6e6b60c8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x555d6e6b60a8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x555d6e6b5898 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x555d6e6b61a0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x555d6e654208 <col:20> 'bool' false
|         `-CompoundStmt 0x555d6e6b6258 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x555d6e6b6228 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x555d6e6b61d0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x555d6e6b5528 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x555d6e6b6210 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x555d6e6b61f0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x555d6e6b5898 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x555d6e6b6248 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x555d6e6542a8 <col:20> 'bool' true
|-FieldDecl 0x555d6e651fa0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x555d6e652008 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x555d6e652058 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x555d6e652310 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x555d6e652098 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x555d6e652118 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x555d6e652190 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x555d6e652210 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x555d6e652618 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x555d6e6523e0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x555d6e652458 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x555d6e6524f0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x555d6e654b98 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x555d6e654b98
| `-ParmVarDecl 0x555d6e654ca8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x555d6e654e28 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e654f38 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555d6e6b1f10 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555d6e6b1ee0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x555d6e6b1eb0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d6e6b1e80 <col:7> 'IntArg' lvalue ParmVar 0x555d6e654f38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555d6e651fa0 'base' 'int'
| | `-ImplicitCastExpr 0x555d6e6b2008 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d6e6b1fd8 <col:7> 'int' xvalue .base 0x555d6e651fa0
| |     `-CXXStaticCastExpr 0x555d6e6b1fa8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d6e6b1f78 <col:7> 'IntArg' lvalue ParmVar 0x555d6e654f38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555d6e652008 'status' 'int'
| | `-ImplicitCastExpr 0x555d6e6b20d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d6e6b20a8 <col:7> 'int' xvalue .status 0x555d6e652008
| |     `-CXXStaticCastExpr 0x555d6e6b2078 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d6e6b2048 <col:7> 'IntArg' lvalue ParmVar 0x555d6e654f38 '' 'IntArg &&'
| `-CompoundStmt 0x555d6e6b2130 <col:7>
`-CXXDestructorDecl 0x555d6e6b1070 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d6e659130 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x555d6e659388 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x555d6e6b0f98 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555d6e6b1510 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x555d6e6b14f0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x555d6e6b1580 <col:19>
|-CXXConstructorDecl 0x555d6e6b1178 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x555d6e6b1178
| `-ParmVarDecl 0x555d6e6b1288 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x555d6e6b1328 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d6e6b1438 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555d6e6b2140 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555d6e6b1e60 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x555d6e6b1e30 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x555d6e6b1e00 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x555d6e6b1438 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x555d6e6b21b0 <col:19>
`-CXXDestructorDecl 0x555d6e6b15c0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
