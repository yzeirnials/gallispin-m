
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dba1448 prev 0x55600db98be8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600dba1540 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55600dba15d0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55600dba1648 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55600dba1708 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55600dba17d0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55600dba1948 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55600dba1880 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55600dba19f0 <col:24>
| `-OptimizeNoneAttr 0x55600dba1a48 <col:34>
|-CXXMethodDecl 0x55600dba1a90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55600dba1d48 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55600dba1b40 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55600dba1bb8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55600dba1c38 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55600dba1e00 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55600dba1e38 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55600dba1ea0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55600dba1f28 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55600dba2248 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55600dba1fe0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55600dba2058 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55600dba20d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55600dba2150 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55600dba2360 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55600dba9cd8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55600dba9cd8
| `-ParmVarDecl 0x55600dba9de8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55600dba9e88 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55600dba9e88
| `-ParmVarDecl 0x55600dba9f98 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55600dc9edc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600db94460 prev 0x55600db941e0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55600db94558 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55600db945e8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55600db94648 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55600db94738 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55600db94838 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55600db94a08 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55600db948b8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55600db94930 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55600db94b98 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55600db94ad0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55600db94c40 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55600db94d78 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55600db94cb0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55600db94f18 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55600db94e58 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55600db950b8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55600db94ff8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55600db95160 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55600db95260 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55600db95340 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db95240 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55600db95220 <col:26> 'int' 1
| `-EnumConstantDecl 0x55600db952f0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55600db95358 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db952d0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55600db952b0 <col:44> 'int' 2
|-CXXMethodDecl 0x55600db954a0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55600db95388 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55600db95408 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55600db955f8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55600db95568 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55600db95838 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55600db956b8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55600db95730 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55600db958e8 <col:20>
| `-OptimizeNoneAttr 0x55600db95940 <col:30>
|-CXXMethodDecl 0x55600db95a48 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55600db95980 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55600db95af0 <col:20>
| `-OptimizeNoneAttr 0x55600db95b48 <col:30>
|-CXXMethodDecl 0x55600db95b98 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55600db95c60 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55600db95d78 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55600db95e00 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55600db95e88 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55600db95f10 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55600db95f98 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55600db96028 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55600db960e8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55600db96170 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55600db961f8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55600db96280 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55600db96308 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55600db96390 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55600db96420 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55600db964e0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55600db96570 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55600db966c0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55600db96628 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55600db96850 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55600db96780 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55600db96b00 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55600db96908 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55600db96988 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55600db96a08 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55600db96bb8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55600db96cc0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55600db96f50 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db96ca0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55600db96c80 <col:33> 'int' 0
| |-EnumConstantDecl 0x55600db96d50 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55600db96f68 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db96d30 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55600db96d10 <col:32> 'int' 20
| |-EnumConstantDecl 0x55600db96de0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55600db96f80 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db96dc0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55600db96da0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55600db96e70 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55600db96f98 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db96e50 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55600db96e30 <col:35> 'int' 100
| `-EnumConstantDecl 0x55600db96f00 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55600db96fb0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db96ee0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55600db96ec0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55600db96ff0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55600db97430 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55600db972a0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55600db97318 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600db97500 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55600db97680 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55600db975b0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600db97888 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55600db97738 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55600db977b0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600db97988 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55600db97a28 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55600db97af0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97b80 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55600db97db0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db97b60 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55600db97b40 <col:36> 'int' EnumConstant 0x55600db97af0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97bd0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97c20 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97c70 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97cc0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55600db97d10 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55600db97d60 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55600db97e98 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55600db97dd8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55600db97f60 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55600db98020 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55600db980e0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55600db981a0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55600db982b8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55600db98380 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55600db98500 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55600db98430 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55600db98628 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55600db98828 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55600db986d8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55600db98758 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55600dba6178 <col:54, line:127:5>
|   |-ParenExpr 0x55600dba6028 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55600dba5ff8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55600dba5ce8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55600dba5cc0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55600dba5ca8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55600dba5c90 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55600dba5c60 <col:31> 'Router *' lvalue ->_router 0x55600dba3b40
|   |   |         `-CXXThisExpr 0x55600dba5c50 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55600dba5d48 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600dba5d28 <col:48> 'int' 0
|   |   `-CallExpr 0x55600dba5f58 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55600dba5f40 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600dba5f20 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600dba5f98 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600dba5db8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55600dba5fb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600dba5dd8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55600dba5fc8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600dba5e10 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55600dba5fe0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600dba5f08 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600dba5ef0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600dba5ea8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55600dba60c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55600dba6058 <col:9> 'Router *' lvalue ->_router 0x55600dba3b40
|   | | `-CXXThisExpr 0x55600dba6048 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55600dba60a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55600dba6088 <col:19> 'Router *' lvalue ParmVar 0x55600db986d8 'r' 'Router *'
|   `-BinaryOperator 0x55600dba6158 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55600dba60f0 <col:9> 'int' lvalue ->_eindex 0x55600dba3ba8
|     | `-CXXThisExpr 0x55600dba60e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55600dba6140 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55600dba6120 <col:19> 'int' lvalue ParmVar 0x55600db98758 'eindex' 'int'
|-CXXMethodDecl 0x55600db989b0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55600db988e8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55600db98a80 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55600db98b48 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55600db98be8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55600db98e38 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55600db98cb0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55600db98d30 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55600db98ee8 <col:20>
| `-OptimizeNoneAttr 0x55600db98f40 <col:30>
|-CXXMethodDecl 0x55600db99048 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55600db98f80 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55600db990f0 <col:20>
| `-OptimizeNoneAttr 0x55600db99148 <col:30>
|-CXXMethodDecl 0x55600db99218 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55600db99188 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55600db992c0 <col:20>
| `-OptimizeNoneAttr 0x55600db99318 <col:30>
|-CXXMethodDecl 0x55600db994a8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55600db99350 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55600db993d0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55600db99638 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55600db99570 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55600db99788 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55600db996f8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55600db998d8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55600db99848 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55600db99a28 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55600db99998 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55600db99ce8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55600db99ae0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55600db99b60 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55600db99c08 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55600db99dc0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55600db99e80 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55600db9a150 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55600db9a000 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55600db9a078 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55600db9a278 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55600db9a450 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55600db9a330 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55600db9a3b0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55600db9a638 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55600db9a518 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55600db9a598 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55600db9a9a8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55600db9a6f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55600db9a770 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55600db9a7f0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55600dba5760 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dba5740 <col:106> 'int' 0
| `-ParmVarDecl 0x55600db9a868 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba5798 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba5778 <col:126> 'int' 0
|-CXXMethodDecl 0x55600db9ad48 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55600db9aa78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55600db9ab10 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55600db9ab90 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55600db9ac08 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba57d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba57b0 <col:114> 'int' 0
|-CXXMethodDecl 0x55600db9b0d8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55600db9ae20 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55600db9ae98 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55600db9af18 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55600dba57e8 <col:96> 'int' 0
| `-ParmVarDecl 0x55600db9af90 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba5828 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba5808 <col:116> 'int' 0
|-CXXMethodDecl 0x55600db9b458 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55600db9b1a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55600db9b220 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9b2a0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55600dba5860 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dba5840 <col:109> 'int' 0
| `-ParmVarDecl 0x55600db9b318 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba5898 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba5878 <col:129> 'int' 0
|-CXXMethodDecl 0x55600db9b7d8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55600db9b528 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55600db9b5a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9b620 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55600db9b698 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba58d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba58b0 <col:117> 'int' 0
|-CXXMethodDecl 0x55600db9bb68 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55600db9b8b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9b928 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9b9a8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55600dba58e8 <col:99> 'int' 0
| `-ParmVarDecl 0x55600db9ba20 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55600dba5928 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55600dba5908 <col:119> 'int' 0
|-CXXMethodDecl 0x55600db9bf88 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55600db9bc38 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55600db9bcb8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55600db9bd30 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9bdb0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55600dba5960 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dba5940 <col:108> 'int' 0
| `-ParmVarDecl 0x55600db9be30 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55600dba5998 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55600dba5978 <col:141> 'int' 0
|-CXXMethodDecl 0x55600db9c3a8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55600db9c060 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55600db9c0e0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55600db9c158 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9c1d8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55600db9c258 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55600dba59b0 <col:121> 'int' 0
|-CXXMethodDecl 0x55600db9c7d8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55600db9c488 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55600db9c508 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55600db9c580 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55600db9c600 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55600dba59d0 <col:98> 'int' 0
| `-ParmVarDecl 0x55600db9c680 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55600dba59f0 <col:123> 'int' 0
|-CXXMethodDecl 0x55600db9caa0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55600db9c8b0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55600db9c930 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55600db9c9b0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55600dba5a10 <col:80> 'int' 0
|-EnumDecl 0x55600db9cb58 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55600db9cc60 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55600db9cef0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db9cc40 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55600db9cc20 <col:42> 'int' 1
| |-EnumConstantDecl 0x55600db9ccf0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55600db9cf08 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db9ccd0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55600db9ccb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55600db9cd80 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55600db9cf20 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db9cd60 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55600db9cd40 <col:44> 'int' 4
| |-EnumConstantDecl 0x55600db9ce10 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55600db9cf38 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db9cdf0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55600db9cdd0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55600db9cea0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55600db9cf50 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db9ce80 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55600db9ce60 <col:34> 'int' 6
|-CXXMethodDecl 0x55600db9d208 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55600db9cf78 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55600db9d018 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55600db9d098 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55600db9d110 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55600dba5ac8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55600dba5ab0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55600dba5a98 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55600dba5a78 <col:98, col:105> 'String' (CXXTemporary 0x55600dba5a78)
|           `-CXXTemporaryObjectExpr 0x55600dba5a40 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55600db9d4a8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55600db9d2d8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55600db9d350 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55600db9d3c8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55600dba5b78 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55600dba5b60 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55600dba5b48 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55600dba5b28 <col:94, col:101> 'String' (CXXTemporary 0x55600dba5b28)
| |         `-CXXTemporaryObjectExpr 0x55600dba5af0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55600dba6360 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55600dba62d8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55600dba62a8 <col:9> '<bound member function type>' ->add_task_handlers 0x55600db9d208
|     | `-CXXThisExpr 0x55600dba6298 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55600dba6318 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55600dba6218 <col:27> 'Task *' lvalue ParmVar 0x55600db9d2d8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55600dba6330 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55600dba6238 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55600db9d350 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55600dba6348 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55600dba6258 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55600db9cea0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55600dba6278 <col:62> 'const String' lvalue ParmVar 0x55600db9d3c8 'prefix' 'const String &'
|-CXXMethodDecl 0x55600db9d6b8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55600db9d570 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55600db9d5e8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55600dba5c28 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55600dba5c10 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55600dba5bf8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55600dba5bd8 <col:70, col:77> 'String' (CXXTemporary 0x55600dba5bd8)
| |         `-CXXTemporaryObjectExpr 0x55600dba5ba0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55600dba6538 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55600dba64b0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55600dba6480 <col:9> '<bound member function type>' ->add_task_handlers 0x55600db9d208
|     | `-CXXThisExpr 0x55600dba6470 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55600dba64f0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55600dba63f0 <col:27> 'Task *' lvalue ParmVar 0x55600db9d570 'task' 'Task *'
|     |-ImplicitCastExpr 0x55600dba6508 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55600dba6410 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55600dba6520 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55600dba6430 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55600db9cea0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55600dba6450 <col:57> 'const String' lvalue ParmVar 0x55600db9d5e8 'prefix' 'const String &'
|-CXXMethodDecl 0x55600db9d998 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55600db9d780 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9d800 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9d878 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55600db9dc48 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55600db9da68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9dae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9db68 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55600db9df38 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55600db9dd18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9dd98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9de10 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55600db9e1e8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55600db9e008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9e088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9e108 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55600db9e498 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55600db9e2b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9e338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9e3b8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55600db9e748 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55600db9e568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9e5e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9e660 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55600db9e9f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55600db9e818 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9e898 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9e918 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55600db9ed08 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55600db9eb20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9eba0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9ec20 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55600db9efe8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55600db9edd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9ee58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9ef00 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55600db9f2c8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55600db9f0b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9f138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9f1e0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55600db9f530 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55600db9f398 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55600db9f418 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55600db9f490 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55600db9f7d8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55600db9f600 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55600db9f680 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55600db9f6f8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55600db9fa88 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55600db9f8a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9f928 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9f9a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55600db9fd38 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55600db9fb58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9fbd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9fc50 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55600db9ffe8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55600db9fe08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600db9fe88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600db9ff00 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55600dba02b8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55600dba00b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600dba0138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55600dba01d8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55600dba05e8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55600dba0388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55600dba0408 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55600dba0480 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55600dba04f8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55600dba5c40 <col:93> 'bool' false
|-CXXMethodDecl 0x55600dba07d0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55600dba06b8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55600dba0738 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55600dba09a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55600dba0890 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55600dba0910 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55600dba0c88 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55600dba0a68 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55600dba0ae0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55600dba0b60 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55600dba0bd8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55600dba0f78 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55600dba0d58 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55600dba0dd0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55600dba0e50 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55600dba0ec8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55600dba11b0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55600dba1050 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55600dba10d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55600dba1398 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55600dba1278 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55600dba12f8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55600dba1448 prev 0x55600db98be8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55600dba1540 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55600dba15d0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55600dba1648 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55600dba1708 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55600dba17d0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55600dba1948 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55600dba1880 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55600dba19f0 <col:24>
| | `-OptimizeNoneAttr 0x55600dba1a48 <col:34>
| |-CXXMethodDecl 0x55600dba1a90 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55600dba1d48 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55600dba1b40 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55600dba1bb8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55600dba1c38 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55600dba1e00 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55600dba1e38 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55600dba1ea0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55600dba1f28 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55600dba2248 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55600dba1fe0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55600dba2058 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55600dba20d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55600dba2150 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55600dba2360 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55600dba9cd8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55600dba9cd8
| | `-ParmVarDecl 0x55600dba9de8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55600dba9e88 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55600dba9e88
| | `-ParmVarDecl 0x55600dba9f98 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55600dc9edc0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55600dba23d8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55600dba2478 <col:38> "" ""
|-CXXMethodDecl 0x55600dba2508 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55600dba25a8 <col:44> "" ""
|-AccessSpecDecl 0x55600dba2618 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55600dba2640 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55600dba2740 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55600dba2790 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600dba2720 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55600dba2700 <col:27> 'int' 4
|-FieldDecl 0x55600dba2848 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55600dba29f8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55600dba2ab0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55600dba3b40 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55600dba3ba8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55600dba3cf8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55600dba3c38 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55600dba3ea8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55600dba3db8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55600dba4088 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55600dba3f68 <col:20> col:23 'int'
| `-ParmVarDecl 0x55600dba3fe8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55600dba4330 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55600dba4150 <col:23> col:26 'int'
| |-ParmVarDecl 0x55600dba41d0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55600dba4248 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55600dba43e8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55600dba44b0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55600dba4500 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55600dba4550 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55600dba4730 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55600dba45e0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55600dba4658 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600dba49d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55600dba47f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55600dba4878 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55600dba48f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55600dba4bf8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55600dba4aa8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55600dba4b28 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55600dba4f30 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55600dba4cb8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55600dba4d38 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55600dba4db0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55600dba4e30 <col:57> col:60 'int'
|-CXXMethodDecl 0x55600dba5118 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55600dba5000 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55600dba5080 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55600dba5268 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55600dba51d8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55600dba55e8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55600dba5328 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55600dba53a8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55600dba5420 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55600dba54a0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55600dba5700 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class GetIP6Address
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dbdea70 <../elements/ip6/getip6address.hh:25:1, line:41:1> line:25:7 class GetIP6Address definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55600dbdebc8 <col:1, col:7> col:7 implicit referenced class GetIP6Address
|-FieldDecl 0x55600dbdec70 <line:27:3, col:7> col:7 _offset 'int'
|-AccessSpecDecl 0x55600dbdecc0 <line:29:2, col:8> col:2 public
|-CXXConstructorDecl 0x55600dbded50 <line:31:3, col:17> col:3 GetIP6Address 'void ()'
|-CXXDestructorDecl 0x55600dbdee40 <line:32:3, col:18> col:3 ~GetIP6Address 'void ()' noexcept-unevaluated 0x55600dbdee40
| `-Overrides: [ 0x55600db94738 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55600dbdef70 <line:34:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55600db95b98 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55600dbdf8b8 <col:34, col:60>
|   `-ReturnStmt 0x55600dbdf8a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55600dbdf890 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55600dbdf868 <col:43> 'const char [14]' lvalue "GetIP6Address"
|-CXXMethodDecl 0x55600dbdf038 <line:35:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55600db95c60 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55600dbdf918 <col:34, col:54>
|   `-ReturnStmt 0x55600dbdf908 <col:36, col:43>
|     `-ImplicitCastExpr 0x55600dbdf8f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55600dbdf8d0 <col:43> 'const char []' lvalue Var 0x55600db95f10 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55600dbdf310 <line:37:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55600db97430 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55600dbdf1c0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55600dbdf238 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55600dbdf460 <line:39:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55600db94d78 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55600dbdf3d0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x55600dbdf538 <line:25:7> col:7 implicit GetIP6Address 'void (const GetIP6Address &)' inline default_delete noexcept-unevaluated 0x55600dbdf538
| `-ParmVarDecl 0x55600dbdf648 <col:7> col:7 'const GetIP6Address &'
`-CXXMethodDecl 0x55600dbdf6e8 <col:7> col:7 implicit operator= 'GetIP6Address &(const GetIP6Address &)' inline default_delete noexcept-unevaluated 0x55600dbdf6e8
  `-ParmVarDecl 0x55600dbdf7f8 <col:7> col:7 'const GetIP6Address &'

Layout: <CGRecordLayout
  LLVMType:%class.GetIP6Address = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.GetIP6Address = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d968300 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55600d968418 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55600d9684b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55600d968518 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55600d968578 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55600d968628 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d968930 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600d968a48 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55600d968af0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55600d968b58 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55600d968be8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55600d96ec80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55600d96f0b8 <col:12>
|-CXXConstructorDecl 0x55600d96ed88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600d96ee98 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55600d968af0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55600d971640 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55600d971610 <col:12> 'const char *const' lvalue .data 0x55600d968af0
| |     `-DeclRefExpr 0x55600d9715f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55600d968b58 'length' 'int'
| | `-ImplicitCastExpr 0x55600d9716d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55600d9716a0 <col:12> 'const int' lvalue .length 0x55600d968b58
| |     `-DeclRefExpr 0x55600d971680 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55600d968be8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55600d971760 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55600d971730 <col:12> 'String::memo_t *const' lvalue .memo 0x55600d968be8
| |     `-DeclRefExpr 0x55600d971710 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| `-CompoundStmt 0x55600d9717b8 <col:12>
|-CXXConstructorDecl 0x55600d96ef38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55600d96ef38
| `-ParmVarDecl 0x55600d96f048 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55600d9745a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55600d97ffb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600d9800c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55600d9805e0 <col:12>
|   |-BinaryOperator 0x55600d9803f8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55600d9803b0 <col:12> 'const char *' lvalue ->data 0x55600d968af0
|   | | `-CXXThisExpr 0x55600d9803a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55600d9803e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55600d980370 <col:12> 'const char *const' lvalue .data 0x55600d968af0
|   |     `-DeclRefExpr 0x55600d980350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55600d9804c0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55600d980478 <col:12> 'int' lvalue ->length 0x55600d968b58
|   | | `-CXXThisExpr 0x55600d980468 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55600d9804a8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55600d980438 <col:12> 'const int' lvalue .length 0x55600d968b58
|   |     `-DeclRefExpr 0x55600d980418 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55600d980588 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55600d980540 <col:12> 'String::memo_t *' lvalue ->memo 0x55600d968be8
|   | | `-CXXThisExpr 0x55600d980530 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55600d980570 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55600d980500 <col:12> 'String::memo_t *const' lvalue .memo 0x55600d968be8
|   |     `-DeclRefExpr 0x55600d9804e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55600d9805d0 <col:12>
|     `-UnaryOperator 0x55600d9805b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600d9805a8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55600d980138 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55600d980138
  `-ParmVarDecl 0x55600d980248 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d95f870 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55600d95f988 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55600d95fa18 <col:16, col:22> col:16 public
|-TypedefDecl 0x55600d95fa58 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55600d632fd0 'const char *'
|   `-QualType 0x55600d632521 'const char' const
|     `-BuiltinType 0x55600d632520 'char'
|-TypedefDecl 0x55600d95fae0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55600d95fab0 'String::const_iterator' sugar
|   |-Typedef 0x55600d95fa58 'const_iterator'
|   `-PointerType 0x55600d632fd0 'const char *'
|     `-QualType 0x55600d632521 'const char' const
|       `-BuiltinType 0x55600d632520 'char'
|-TypedefDecl 0x55600d95fc50 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55600d95fbc0 'int (String::*)() const'
|   |-RecordType 0x55600d95f900 'String'
|   | `-CXXRecord 0x55600d95f870 'String'
|   `-ParenType 0x55600d95fb60 'int () const' sugar
|     `-FunctionProtoType 0x55600d9336f0 'int () const' const cdecl
|       `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600d95fcb8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55600d7882d0 'int64_t' sugar
|   |-Typedef 0x55600d69b390 'int64_t'
|   `-TypedefType 0x55600d674630 '__int64_t' sugar
|     |-Typedef 0x55600d674208 '__int64_t'
|     `-BuiltinType 0x55600d6325a0 'long'
|-TypedefDecl 0x55600d95fd20 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55600d7881f0 'uint64_t' sugar
|   |-Typedef 0x55600d69b530 'uint64_t'
|   `-TypedefType 0x55600d6746c0 '__uint64_t' sugar
|     |-Typedef 0x55600d674278 '__uint64_t'
|     `-BuiltinType 0x55600d632640 'unsigned long'
|-TypedefDecl 0x55600d95fdb0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55600d95fd80 'String::intmax_t' sugar
|   |-Typedef 0x55600d95fcb8 'intmax_t'
|   `-TypedefType 0x55600d7882d0 'int64_t' sugar
|     |-Typedef 0x55600d69b390 'int64_t'
|     `-TypedefType 0x55600d674630 '__int64_t' sugar
|       |-Typedef 0x55600d674208 '__int64_t'
|       `-BuiltinType 0x55600d6325a0 'long'
|-TypedefDecl 0x55600d95fe40 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55600d95fe10 'String::uintmax_t' sugar
|   |-Typedef 0x55600d95fd20 'uintmax_t'
|   `-TypedefType 0x55600d7881f0 'uint64_t' sugar
|     |-Typedef 0x55600d69b530 'uint64_t'
|     `-TypedefType 0x55600d6746c0 '__uint64_t' sugar
|       |-Typedef 0x55600d674278 '__uint64_t'
|       `-BuiltinType 0x55600d632640 'unsigned long'
|-CXXConstructorDecl 0x55600d95ff00 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55600d9600a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55600d95ffe8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55600d960258 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55600d960198 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55600d9603b0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55600d960320 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55600d9605c8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55600d960478 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55600d9604f8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55600d9607e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55600d960698 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55600d960718 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55600d960a08 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55600d9608b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55600d960938 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55600d960c28 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55600d960ad8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55600d960b58 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55600d960db8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55600d960cf0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55600d960f38 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55600d960e78 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55600d9610c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55600d961000 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55600d961220 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55600d961190 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55600d961378 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55600d9612e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55600d9614d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55600d961440 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55600d961658 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55600d961598 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55600d9617e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55600d961720 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55600d961978 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55600d9618b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55600d961b08 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55600d961a40 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55600d961c00 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55600d961d28 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55600d961ea8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55600d961de0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55600d961ff8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55600d961f68 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55600d9620b0 <col:63> "" ""
|-CXXMethodDecl 0x55600d9621f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55600d962138 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55600d962408 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55600d9622b8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55600d962338 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55600d962628 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55600d9624d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55600d962550 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55600d962908 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55600d9626e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55600d962768 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55600d96e750 <col:55> 'int' 10
| `-ParmVarDecl 0x55600d9627e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55600d96e770 <col:76> 'bool' true
|-CXXMethodDecl 0x55600d962be8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55600d9629d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55600d962a50 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55600d96e780 <col:56> 'int' 10
| `-ParmVarDecl 0x55600d962ac8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55600d96e7a0 <col:77> 'bool' true
|-CXXMethodDecl 0x55600d962cf0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55600d962db8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55600d962e80 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55600d962f20 <col:20>
| `-OptimizeNoneAttr 0x55600d962f78 <col:30>
|-CXXConversionDecl 0x55600d963068 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55600d963138 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55600d9631f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55600d9632e8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55600d9633a8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55600d963528 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55600d963460 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55600d963678 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55600d9635e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55600d963768 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55600d963828 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55600d963a78 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55600d9638e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55600d963960 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55600d963cd8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55600d963b40 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55600d963bc0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55600d963da8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55600d963fb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55600d963e60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55600d963ee0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55600d9641d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55600d964080 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55600d964100 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55600d964368 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55600d9642a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55600d964458 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55600d9645c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55600d964508 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55600d9647d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55600d964688 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55600d964708 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55600d9649f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55600d964898 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55600d964910 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55600d964b80 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55600d964ab0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55600d964da0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55600d964c40 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55600d964cc0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55600d964ef0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55600d964e60 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55600d9650c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55600d964fb0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55600d965030 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55600d965218 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55600d965188 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55600d965430 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55600d9652d0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55600d965350 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55600d96e7b0 <col:39> 'int' 0
|-CXXMethodDecl 0x55600d965650 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55600d9654f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55600d965570 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55600d96e7d0 <col:48> 'int' 0
|-CXXMethodDecl 0x55600d965830 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55600d965710 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55600d965790 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55600d96e7f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55600d965900 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55600d9659c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55600d965a80 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55600d965b40 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55600d965c00 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55600d965da8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55600d965cb0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55600d965f28 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55600d965e60 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55600d966100 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55600d965fe8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55600d966278 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55600d9661b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55600d9663c0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55600d966330 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55600d966510 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55600d966480 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55600d9666e8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55600d9665d0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55600d966650 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55600d9668c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55600d9667b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55600d966830 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55600d966a18 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55600d966988 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55600d966c28 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55600d966ad8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55600d966b58 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55600d966d88 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55600d966cf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55600d966ee0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55600d966e48 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55600d966f88 <col:57> "" ""
|-CXXMethodDecl 0x55600d967098 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55600d967008 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55600d9671e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55600d967158 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55600d967368 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55600d9672a0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55600d967430 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55600d9674f0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55600d9675b0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55600d967650 <col:49> "" ""
|-CXXMethodDecl 0x55600d9676e0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55600d9677a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55600d967890 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55600d967958 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55600d967a18 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55600d967ad8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55600d967bd0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55600d967c98 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55600d967d60 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55600d967f38 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55600d967e18 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55600d967e98 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55600d968160 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55600d968000 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55600d968080 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55600d968270 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55600d9682d8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55600d968300 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55600d968418 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55600d9684b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55600d968518 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55600d968578 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55600d968628 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55600d968690 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55600d9688c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55600d968918 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600d9688a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55600d9687b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55600d968760 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55600d9687a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55600d968780 <col:32> 'int' 8
|-CXXRecordDecl 0x55600d968930 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55600d968a48 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55600d968af0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55600d968b58 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55600d968be8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55600d96ec80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55600d96f0b8 <col:12>
| |-CXXConstructorDecl 0x55600d96ed88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600d96ee98 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55600d968af0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55600d971640 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55600d971610 <col:12> 'const char *const' lvalue .data 0x55600d968af0
| | |     `-DeclRefExpr 0x55600d9715f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55600d968b58 'length' 'int'
| | | `-ImplicitCastExpr 0x55600d9716d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55600d9716a0 <col:12> 'const int' lvalue .length 0x55600d968b58
| | |     `-DeclRefExpr 0x55600d971680 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55600d968be8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55600d971760 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55600d971730 <col:12> 'String::memo_t *const' lvalue .memo 0x55600d968be8
| | |     `-DeclRefExpr 0x55600d971710 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d96ee98 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55600d9717b8 <col:12>
| |-CXXConstructorDecl 0x55600d96ef38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55600d96ef38
| | `-ParmVarDecl 0x55600d96f048 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55600d9745a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55600d97ffb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600d9800c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55600d9805e0 <col:12>
| |   |-BinaryOperator 0x55600d9803f8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55600d9803b0 <col:12> 'const char *' lvalue ->data 0x55600d968af0
| |   | | `-CXXThisExpr 0x55600d9803a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55600d9803e0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55600d980370 <col:12> 'const char *const' lvalue .data 0x55600d968af0
| |   |     `-DeclRefExpr 0x55600d980350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55600d9804c0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55600d980478 <col:12> 'int' lvalue ->length 0x55600d968b58
| |   | | `-CXXThisExpr 0x55600d980468 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55600d9804a8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55600d980438 <col:12> 'const int' lvalue .length 0x55600d968b58
| |   |     `-DeclRefExpr 0x55600d980418 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55600d980588 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55600d980540 <col:12> 'String::memo_t *' lvalue ->memo 0x55600d968be8
| |   | | `-CXXThisExpr 0x55600d980530 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55600d980570 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55600d980500 <col:12> 'String::memo_t *const' lvalue .memo 0x55600d968be8
| |   |     `-DeclRefExpr 0x55600d9804e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55600d9800c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55600d9805d0 <col:12>
| |     `-UnaryOperator 0x55600d9805b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55600d9805a8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55600d980138 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55600d980138
|   `-ParmVarDecl 0x55600d980248 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55600d968c60 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55600d968ea8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55600d968cc8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55600d968d48 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55600d968dc0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55600d96ec40 <col:79, line:261:5>
|   |-BinaryOperator 0x55600d96e8b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55600d96e850 <col:2, col:5> 'const char *' lvalue .data 0x55600d968af0
|   | | `-MemberExpr 0x55600d96e820 <col:2> 'String::rep_t' lvalue ->_r 0x55600d968c60
|   | |   `-CXXThisExpr 0x55600d96e810 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55600d96e8a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55600d96e880 <col:12> 'const char *' lvalue ParmVar 0x55600d968cc8 'data' 'const char *'
|   |-BinaryOperator 0x55600d96e980 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55600d96e918 <col:2, col:5> 'int' lvalue .length 0x55600d968b58
|   | | `-MemberExpr 0x55600d96e8e8 <col:2> 'String::rep_t' lvalue ->_r 0x55600d968c60
|   | |   `-CXXThisExpr 0x55600d96e8d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55600d96e968 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55600d96e948 <col:14> 'int' lvalue ParmVar 0x55600d968d48 'length' 'int'
|   `-IfStmt 0x55600d96ec28 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55600d96eaa0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55600d96ea88 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55600d96ea68 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55600d96ea48 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55600d96e9e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55600d968be8
|     |       | `-MemberExpr 0x55600d96e9b0 <col:7> 'String::rep_t' lvalue ->_r 0x55600d968c60
|     |       |   `-CXXThisExpr 0x55600d96e9a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55600d96ea30 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55600d96ea10 <col:17> 'String::memo_t *' lvalue ParmVar 0x55600d968dc0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55600d96ec00 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55600d96ebe8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55600d96eaf0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55600d9578d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55600d96eb58 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55600d9684b8
|         `-ImplicitCastExpr 0x55600d96eb40 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55600d96eb20 <col:27> 'String::memo_t *' lvalue ParmVar 0x55600d968dc0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55600d969158 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55600d968f78 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55600d968ff8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55600d969070 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55600d968c60 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55600d96f0c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55600d96f258 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55600d96f1c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55600d96f130 <col:2> '<bound member function type>' ->assign_memo 0x55600d968ea8
|     | `-ImplicitCastExpr 0x55600d96f1f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55600d96f120 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55600d96f210 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55600d96f160 <col:14> 'const char *' lvalue ParmVar 0x55600d968f78 'data' 'const char *'
|     |-ImplicitCastExpr 0x55600d96f228 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55600d96f180 <col:20> 'int' lvalue ParmVar 0x55600d968ff8 'length' 'int'
|     `-ImplicitCastExpr 0x55600d96f240 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55600d96f1a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55600d969070 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55600d9692e8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55600d969228 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55600d96f4b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55600d96f430 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55600d96f280 <col:2> '<bound member function type>' ->assign_memo 0x55600d968ea8
|     | `-CXXThisExpr 0x55600d96f270 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55600d96f468 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55600d96f300 <col:14, col:19> 'const char *' lvalue .data 0x55600d968af0
|     |   `-MemberExpr 0x55600d96f2d0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55600d968c60
|     |     `-DeclRefExpr 0x55600d96f2b0 <col:14> 'const String' lvalue ParmVar 0x55600d969228 'x' 'const String &'
|     |-ImplicitCastExpr 0x55600d96f480 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55600d96f380 <col:25, col:30> 'int' lvalue .length 0x55600d968b58
|     |   `-MemberExpr 0x55600d96f350 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55600d968c60
|     |     `-DeclRefExpr 0x55600d96f330 <col:25> 'const String' lvalue ParmVar 0x55600d969228 'x' 'const String &'
|     `-ImplicitCastExpr 0x55600d96f498 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55600d96f400 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55600d968be8
|         `-MemberExpr 0x55600d96f3d0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55600d968c60
|           `-DeclRefExpr 0x55600d96f3b0 <col:38> 'const String' lvalue ParmVar 0x55600d969228 'x' 'const String &'
|-CXXMethodDecl 0x55600d9693b0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55600d96fe70 <col:31, line:278:5>
|   `-IfStmt 0x55600d96fe58 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55600d96f550 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55600d96f538 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55600d96f508 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55600d968be8
|     |     `-MemberExpr 0x55600d96f4d8 <col:6> 'String::rep_t' lvalue ->_r 0x55600d968c60
|     |       `-CXXThisExpr 0x55600d96f4c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55600d96fe30 <col:15, line:277:2>
|       |-ParenExpr 0x55600d96fa00 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55600d96f9d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55600d96f660 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55600d96f648 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55600d96f630 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55600d96f5f0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55600d9684b8
|       |   |       `-ImplicitCastExpr 0x55600d96f5d8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55600d96f5a8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55600d968be8
|       |   |           `-MemberExpr 0x55600d96f578 <col:27> 'String::rep_t' lvalue ->_r 0x55600d968c60
|       |   |             `-CXXThisExpr 0x55600d96f568 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55600d96f6c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55600d96f6a0 <col:54> 'int' 0
|       |   `-CallExpr 0x55600d96f930 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55600d96f918 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55600d96f898 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55600d96f970 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55600d96f7a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55600d96f988 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55600d96f7d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55600d96f9a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55600d96f810 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55600d96f9b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55600d96f880 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55600d96f868 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55600d96f830 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55600d96fd50 <line:274:6, line:275:22>
|       | |-CallExpr 0x55600d96fc10 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55600d96fbf8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55600d96fb70 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55600d958d20 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55600d96fb40 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55600d9684b8
|       | |   `-ImplicitCastExpr 0x55600d96fb28 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55600d96faf8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55600d968be8
|       | |       `-MemberExpr 0x55600d96fac8 <col:40> 'String::rep_t' lvalue ->_r 0x55600d968c60
|       | |         `-CXXThisExpr 0x55600d96fab8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55600d96fd10 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55600d96fcf8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55600d96fc38 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55600d96db90 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55600d96fd38 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55600d96fc98 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55600d968be8
|       |       `-MemberExpr 0x55600d96fc68 <col:15> 'String::rep_t' lvalue ->_r 0x55600d968c60
|       |         `-CXXThisExpr 0x55600d96fc58 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55600d96fe10 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55600d96fda8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55600d968be8
|         | `-MemberExpr 0x55600d96fd78 <col:6> 'String::rep_t' lvalue ->_r 0x55600d968c60
|         |   `-CXXThisExpr 0x55600d96fd68 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55600d96fdf8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55600d96fdd8 <col:16> 'int' 0
|-CXXMethodDecl 0x55600d969648 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55600d969468 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55600d9694e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55600d969560 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55600d969720 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55600d969970 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55600d9697d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55600d969858 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55600d9698d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55600d969b58 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55600d969a40 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55600d969ac0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55600d969c58 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55600d96ff48 <col:41, line:286:5>
|   `-ReturnStmt 0x55600d96ff38 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55600d96ff08 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55600d96fed0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55600d96feb8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55600d96fe98 <col:46> 'int' 1
|-CXXMethodDecl 0x55600d969ef8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55600d969d10 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55600d969d90 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55600d969e10 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55600d96db90 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55600d969fc0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55600d96dc60 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55600d96de30 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55600d96dd18 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55600d96dd98 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55600d96def0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55600d96dfb8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55600d96e0b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55600d96e130 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55600d96e1a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55600d96e210 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55600d96e310 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55600d96e360 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600d96e2f0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55600d96e2d0 <col:22> 'int' 14
|-CXXMethodDecl 0x55600d96e578 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55600d96e390 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55600d96e410 <col:38> col:41 'int'
| `-ParmVarDecl 0x55600d96e490 <col:43> col:46 'int'
|-FriendDecl 0x55600d96e680 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55600d96e710 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55600dc104b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55600dc10688 prev 0x55600dc104b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55600dc10718 <col:46, col:52> col:46 public
|-TypedefDecl 0x55600dc10740 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc120a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55600dc12050 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55600dc12030 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55600dc10958 'type'
|     `-SubstTemplateTypeParmType 0x55600dc10920 'String' sugar
|       |-TemplateTypeParmType 0x55600d923110 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9230c0 'T'
|       `-RecordType 0x55600d95f900 'String'
|         `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc12158 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55600dc12120 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55600dc12100 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55600dc120a0 'type'
|     `-ElaboratedType 0x55600dc12050 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55600dc12030 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55600dc10958 'type'
|         `-SubstTemplateTypeParmType 0x55600dc10920 'String' sugar
|           |-TemplateTypeParmType 0x55600d923110 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55600d9230c0 'T'
|           `-RecordType 0x55600d95f900 'String'
|             `-CXXRecord 0x55600d95f870 'String'
|-CXXMethodDecl 0x55600dc122d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55600dc121e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55600dc123c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55600dc124a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55600dc124a8
|-CXXMethodDecl 0x55600dc12778 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55600dc12680 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55600dc129b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55600dc12830 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc128a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc12b88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55600dc12a78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc12af0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc12ce8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55600dc12df0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55600dc13038 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55600dc12eb0 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55600dc12f28 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc13298 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55600dc13108 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55600dc13180 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc13458 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55600dc13368 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc13618 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55600dc13520 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc136d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55600dc13780 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55600dc139b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55600dc13830 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc138a8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55600dc13c58 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55600dc13b60 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55600dc13d20 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55600dc13d70 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55600dc13dc0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55600db970a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55600dc0ef18 prev 0x55600db970a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55600dc10420 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55600dc103d0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55600dc103b0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55600dc10260 'type'
|     `-SubstTemplateTypeParmType 0x55600dc100f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55600d8f8ec0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55600d8f8e68 'F'
|       `-RecordType 0x55600dc0fd50 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55600dc0fc70 'typed_array_memory'
|-FieldDecl 0x55600dc13e10 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55600dc13e60 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55600dc13e98 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|   |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55600d9303d8 'T'
|   `-RecordType 0x55600d95f900 'String'
|     `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc13f28 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55600dc13ef0 'String &'
|   `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-RecordType 0x55600d95f900 'String'
|       `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc13fb8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55600dc13f80 'const String &'
|   `-QualType 0x55600dc0efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-RecordType 0x55600d95f900 'String'
|         `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc14048 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55600dc14010 'String *'
|   `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-RecordType 0x55600d95f900 'String'
|       `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc140d8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55600dc140a0 'const String *'
|   `-QualType 0x55600dc0efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-RecordType 0x55600d95f900 'String'
|         `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc14d30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55600dc14ce0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55600dc14cc0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55600dc14bf8 'type'
|     `-LValueReferenceType 0x55600dc14bc0 'const String &'
|       `-QualType 0x55600dc14961 'const String' const
|         `-SubstTemplateTypeParmType 0x55600dc14960 'String' sugar
|           |-TemplateTypeParmType 0x55600d902e10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55600d902db8 'T'
|           `-RecordType 0x55600d95f900 'String'
|             `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc14d98 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55600dc13f80 'const String &'
|   `-QualType 0x55600dc0efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-RecordType 0x55600d95f900 'String'
|         `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc14df0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc14e58 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55600dc14010 'String *'
|   `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-RecordType 0x55600d95f900 'String'
|       `-CXXRecord 0x55600d95f870 'String'
|-TypedefDecl 0x55600dc14ec0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55600dc140a0 'const String *'
|   `-QualType 0x55600dc0efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55600dc0efb0 'String' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-RecordType 0x55600d95f900 'String'
|         `-CXXRecord 0x55600d95f870 'String'
|-EnumDecl 0x55600dc14f18 <line:134:5> col:5
| `-EnumConstantDecl 0x55600dc15010 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55600dc14ff0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55600d931ab8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55600d931a90 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55600d931a70 <col:40> 'int' 1
|-CXXConstructorDecl 0x55600dc15098 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55600dc15328 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc15150 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc151f0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55600dc155b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55600dc154a0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55600dc15878 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55600dc15760 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55600dc15b90 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55600dc15a70 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55600dc15ea0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55600dc15d80 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55600dc16190 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc15fd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc16050 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55600dc162b8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55600dc16368 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc163c0 <col:30> Inherited
|-CXXMethodDecl 0x55600dc16408 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55600dc164b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc16510 <col:30> Inherited
|-CXXMethodDecl 0x55600dc165d8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55600dc16688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc166e0 <col:30> Inherited
|-CXXMethodDecl 0x55600dc16728 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55600dc167d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc16830 <col:30> Inherited
|-CXXMethodDecl 0x55600dc16878 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55600dc16928 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc16980 <col:30> Inherited
|-CXXMethodDecl 0x55600dc169c8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55600dc16a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc16ad0 <col:30> Inherited
|-CXXMethodDecl 0x55600dc16af8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55600dc16ba8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55600dc16c58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55600dc16e18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc16d08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc16d80 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55600dc16f68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc16ed8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc17118 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55600dc17020 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55600dc171d0 <col:20>
| `-OptimizeNoneAttr 0x55600dc17228 <col:30>
|-CXXMethodDecl 0x55600dc17348 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55600dc17250 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55600dc17400 <col:20>
| `-OptimizeNoneAttr 0x55600dc17458 <col:30>
|-CXXMethodDecl 0x55600dc17510 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc17480 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc17658 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55600dc175c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc17788 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55600dc17888 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55600dc17958 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55600dc17a28 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55600dc17b68 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc17ad8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc17cb0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55600dc17c20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc17df8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55600dc17d68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55600dc17eb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55600dc17fb0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55600dc17f20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55600dc18068 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55600dc18128 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55600dc18228 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55600dc183a8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55600dc182e8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55600dc18b68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55600dc18460 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55600dc18ac8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55600dc189c8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55600dc18c48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55600dc18d98 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55600dc18d08 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55600dc18e50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55600dc19098 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc18f10 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55600dc18f88 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55600dc19228 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55600dc19168 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55600dc19438 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55600dc192f0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55600dc19368 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55600dc194f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55600dc19758 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55600dc19660 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55600dc19828 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55600dc19828

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc8e378 prev 0x55600dc24448 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55600dc8e470 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55600dc8e500 <col:22, col:28> col:22 public
|-EnumDecl 0x55600dc8e528 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55600dc8e648 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e628 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55600dc8e610 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55600dc8e5f0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55600dc8e6f0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e6d0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55600dc8e6b8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55600dc8e698 <col:14> 'int' 1
| |-EnumConstantDecl 0x55600dc8e780 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e760 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55600dc8e740 <col:17> 'int' 0
| |-EnumConstantDecl 0x55600dc8e810 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e7f0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55600dc8e7d0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55600dc8e8a0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e880 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55600dc8e860 <col:16> 'int' 2
| |-EnumConstantDecl 0x55600dc8e930 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e910 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55600dc8e8f0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55600dc8e9c0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8e9a0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55600dc8e980 <col:15> 'int' 4
| |-EnumConstantDecl 0x55600dc8ea50 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8ea30 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55600dc8ea10 <col:14> 'int' 5
| |-EnumConstantDecl 0x55600dc8eae0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55600dc8eac0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55600dc8eaa0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55600dc8eb70 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55600dc8eb50 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55600dc8eb30 <col:13> 'int' 7
|-VarDecl 0x55600dc8ebe0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55600dc8ec68 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55600dc8ecf0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55600dc8ed78 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55600dc8ee00 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55600dc8ee88 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55600dc8ef10 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55600dc8ef98 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55600dc8f020 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55600dc8f0a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55600dc8f130 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55600dc8f230 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55600dc94558 '_nerrors' 'int'
| | `-IntegerLiteral 0x55600dc94ce8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55600dc94d58 <col:16, line:129:5>
|-CXXDestructorDecl 0x55600dc8f320 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55600dc94d68 <col:29, line:132:5>
|-CXXMethodDecl 0x55600dc8f4d8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55600dc8f410 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600dc8f5a0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55600dc8f688 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55600dc94dc0 <col:44, line:161:5>
|   `-ReturnStmt 0x55600dc94db0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55600dc94d98 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55600dc94d78 <col:9> 'ErrorHandler *' lvalue Var 0x55600dc945b8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55600dc8f7c8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55600dc8f738 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55600dc8f890 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55600dc94e20 <col:43, line:173:5>
|   `-ReturnStmt 0x55600dc94e10 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55600dc94df8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55600dc94dd8 <col:9> 'ErrorHandler *' lvalue Var 0x55600dc94630 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55600dc8f948 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55600dc8f9c8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55600dc8fad8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55600dc8fa48 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55600dc8fc28 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55600dc8fb98 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55600dc8fd80 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55600dc8fce8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55600dc8fed8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55600dc8fe40 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90030 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55600dc8ff98 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90240 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55600dc900e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55600dc90168 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90418 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55600dc90300 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55600dc90380 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90638 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55600dc904d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55600dc90558 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90818 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55600dc906f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55600dc90778 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55600dc909f8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55600dc908d8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55600dc90958 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55600dc90b80 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55600dc90ab8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55600dc90d50 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55600dc90c38 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55600dc90cb0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55600dc95078 <col:57, line:234:5>
|   `-ReturnStmt 0x55600dc95068 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55600dc95050 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55600dc94ff8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55600dc94fc8 <col:9> '<bound member function type>' ->xmessage 0x55600dc90b80
|         | `-CXXThisExpr 0x55600dc94fb8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55600dc95038 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55600dc95020 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55600dc94f98 <col:18, col:40> 'String' (CXXTemporary 0x55600dc94f98)
|               `-CallExpr 0x55600dc94f60 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55600dc94f48 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55600dc94ec0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55600dc92d48 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55600dc94ee0 <col:31> 'const String' lvalue ParmVar 0x55600dc90cb0 'str' 'const String &'
|                 `-DeclRefExpr 0x55600dc94f00 <col:36> 'const String' lvalue ParmVar 0x55600dc90c38 'anno' 'const String &'
|-CXXMethodDecl 0x55600dc91030 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55600dc90e10 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55600dc90e90 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55600dc90f08 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55600dc95308 <col:68, line:243:5>
|   `-ReturnStmt 0x55600dc952f8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55600dc952e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55600dc95280 <col:9, col:41> 'int'
|         |-MemberExpr 0x55600dc95250 <col:9> '<bound member function type>' ->xmessage 0x55600dc90d50
|         | `-CXXThisExpr 0x55600dc95240 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55600dc95118 <col:18> 'const String' lvalue ParmVar 0x55600dc90e10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55600dc952c8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55600dc952b0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55600dc95220 <col:24, col:40> 'String' (CXXTemporary 0x55600dc95220)
|               `-CXXMemberCallExpr 0x55600dc951b8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55600dc95148 <col:24> '<bound member function type>' ->vformat 0x55600dc92210
|                 | `-CXXThisExpr 0x55600dc95138 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55600dc951e8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55600dc95178 <col:32> 'const char *' lvalue ParmVar 0x55600dc90e90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55600dc95200 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55600dc95198 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55600dc90f08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55600dc912d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55600dc910f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55600dc91170 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55600dc911e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55600dc95648 <col:23, line:254:5>
|   `-ReturnStmt 0x55600dc95638 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55600dc95620 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55600dc955c0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55600dc95590 <col:9> '<bound member function type>' ->xmessage 0x55600dc90d50
|         | `-CXXThisExpr 0x55600dc95580 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55600dc95608 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55600dc955f0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55600dc95540 <col:18, col:65> 'String' (CXXTemporary 0x55600dc95540)
|         |     `-CallExpr 0x55600dc954d8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55600dc954c0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55600dc953a8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55600dc92d48 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55600dc953c8 <col:31> 'const String' lvalue ParmVar 0x55600dc91170 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55600dc95520 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55600dc95508 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55600dc954a0 <col:37, col:64> 'String' (CXXTemporary 0x55600dc954a0)
|         |             `-CallExpr 0x55600dc95470 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55600dc95458 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55600dc953e8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55600dc93398 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55600dc95408 <col:56> 'const String' lvalue ParmVar 0x55600dc910f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55600dc95560 <col:68> 'const String' lvalue ParmVar 0x55600dc911e8 'str' 'const String &'
|-CXXMethodDecl 0x55600dc91650 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55600dc91398 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55600dc91410 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55600dc91490 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55600dc91508 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55600dc95900 <col:34, line:267:5>
|   `-ReturnStmt 0x55600dc958f0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55600dc958d8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55600dc95870 <col:9, col:51> 'int'
|         |-MemberExpr 0x55600dc95840 <col:9> '<bound member function type>' ->xmessage 0x55600dc912d0
|         | `-CXXThisExpr 0x55600dc95830 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55600dc956e8 <col:18> 'const String' lvalue ParmVar 0x55600dc91398 'landmark' 'const String &'
|         |-DeclRefExpr 0x55600dc95708 <col:28> 'const String' lvalue ParmVar 0x55600dc91410 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55600dc958c0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55600dc958a8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55600dc95810 <col:34, col:50> 'String' (CXXTemporary 0x55600dc95810)
|               `-CXXMemberCallExpr 0x55600dc957a8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55600dc95738 <col:34> '<bound member function type>' ->vformat 0x55600dc92210
|                 | `-CXXThisExpr 0x55600dc95728 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55600dc957d8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55600dc95768 <col:42> 'const char *' lvalue ParmVar 0x55600dc91490 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55600dc957f0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55600dc95788 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55600dc91508 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55600dc91760 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55600dc95980 <col:25, line:288:5>
|   `-ReturnStmt 0x55600dc95970 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55600dc95958 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55600dc95928 <col:9> 'const int' lvalue ->_nerrors 0x55600dc94558
|         `-CXXThisExpr 0x55600dc95918 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55600dc91970 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55600dc91818 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55600dc91898 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55600dc91c58 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55600dc91a38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55600dc91ab8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55600dc91b30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55600dc91df0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55600dc91d28 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55600dc92038 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55600dc91eb0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55600dc91f28 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55600dc95be0 <col:58, line:357:5>
|   `-ReturnStmt 0x55600dc95bd0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55600dc95bb8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55600dc95b88 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55600dc95b70 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55600dc95b50 <col:9, col:29> 'String' (CXXTemporary 0x55600dc95b50)
|             `-CallExpr 0x55600dc95ae0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55600dc95ac8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55600dc95a48 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55600dc91c58 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55600dc959e8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55600dc95b18 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55600dc95a08 <col:21> 'const char *' lvalue ParmVar 0x55600dc91eb0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55600dc95b30 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55600dc95a28 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55600dc91f28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55600dc92210 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55600dc92100 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55600dc92178 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55600dc92368 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55600dc922d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55600dc924b0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55600dc92420 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55600dc92750 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55600dc92568 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55600dc925e8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55600dc92660 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55600dc928b0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55600dc92820 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55600dc95cf8 <col:37, line:441:5>
|   `-IfStmt 0x55600dc95ce0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55600dc95c68 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55600dc95c38 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55600dc95bf8 <col:6> 'int' lvalue ParmVar 0x55600dc92820 'level' 'int'
|     | `-ImplicitCastExpr 0x55600dc95c50 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55600dc95c18 <col:15> 'ErrorHandler::Level' EnumConstant 0x55600dc8e930 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55600dc95cc8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55600dc95c98 <col:8> 'int' lvalue ->_nerrors 0x55600dc94558
|         `-CXXThisExpr 0x55600dc95c88 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55600dc92978 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55600dc95d90 <col:26, line:448:5>
|   `-BinaryOperator 0x55600dc95d70 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55600dc95d20 <col:2> 'int' lvalue ->_nerrors 0x55600dc94558
|     | `-CXXThisExpr 0x55600dc95d10 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55600dc95d50 <col:13> 'int' 0
|-CXXMethodDecl 0x55600dc92b40 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55600dc92a30 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55600dc92aa8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55600dc92d48 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55600dc92c00 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55600dc92c78 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55600dc92ff8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55600dc92e08 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55600dc92e88 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55600dc92f08 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55600dc930b0 <col:59> 0 0
|-CXXMethodDecl 0x55600dc93248 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55600dc93128 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55600dc931a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55600dc96400 <col:70, line:534:5>
|   |-DeclStmt 0x55600dc95f00 <line:528:2, col:20>
|   | |-VarDecl 0x55600dc95db8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55600dc95e20 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55600dc95e58 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55600dc95ec0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55600dc95fd0 <line:529:2, col:23>
|   | `-VarDecl 0x55600dc95f30 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55600dc95fb8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55600dc95f98 <col:18> 'const char *' lvalue ParmVar 0x55600dc93128 'begin' 'const char *'
|   |-DoStmt 0x55600dc96398 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55600dc962c8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55600dc962b0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55600dc96290 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55600dc95fe8 <col:6> 'const char *' lvalue Var 0x55600dc95f30 'x' 'const char *'
|   | |     `-CallExpr 0x55600dc961e0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55600dc961c8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55600dc96180 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55600dc94a30 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55600dc96248 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55600dc96230 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55600dc960a0 <col:20, col:27> 'String' (CXXTemporary 0x55600dc960a0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55600dc96068 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55600dc96260 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55600dc960c0 <col:30> 'const char *' lvalue Var 0x55600dc95f30 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55600dc96278 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55600dc960e0 <col:33> 'const char *' lvalue ParmVar 0x55600dc931a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55600dc96120 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55600dc96100 <col:39> 'String' lvalue Var 0x55600dc95db8 'name' 'String'
|   | |       |-UnaryOperator 0x55600dc96158 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55600dc96138 <col:46> 'String' lvalue Var 0x55600dc95e58 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55600dc96170 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55600dc96380 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55600dc96368 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55600dc96348 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55600dc96318 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|   |         `-ImplicitCastExpr 0x55600dc96300 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55600dc962e0 <col:11> 'String' lvalue Var 0x55600dc95db8 'name' 'String'
|   `-ReturnStmt 0x55600dc963f0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55600dc963d8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55600dc963b8 <col:9> 'const char *' lvalue Var 0x55600dc95f30 'x' 'const char *'
|-CXXMethodDecl 0x55600dc93398 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55600dc93308 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55600dc96a08 <col:55, line:550:5>
|   `-IfStmt 0x55600dc969e0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55600dc96640 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55600dc96628 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55600dc96610 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55600dc965f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55600dc965c0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|     | |       `-DeclRefExpr 0x55600dc96460 <col:6> 'const String' lvalue ParmVar 0x55600dc93308 'x' 'const String &'
|     | `-BinaryOperator 0x55600dc965a0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55600dc96570 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55600dc96520 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55600dc96508 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55600dc964c0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55600d97c8a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55600dc96480 <col:11> 'const String' lvalue ParmVar 0x55600dc93308 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55600dc964a0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55600dc96588 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55600dc96558 <col:19> 'char' 123
|     |-ReturnStmt 0x55600dc966b0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55600dc96680 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55600dc96660 <col:13> 'const String' lvalue ParmVar 0x55600dc93308 'x' 'const String &'
|     `-IfStmt 0x55600dc969b8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55600dc96748 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55600dc96730 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55600dc96710 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55600dc966e0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |       `-DeclRefExpr 0x55600dc966c0 <col:11> 'const String' lvalue ParmVar 0x55600dc93308 'x' 'const String &'
|       |-ReturnStmt 0x55600dc968d0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55600dc968b8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55600dc96888 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55600dc96870 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55600dc96850 <col:13, col:29> 'String' (CXXTemporary 0x55600dc96850)
|       |         `-CallExpr 0x55600dc96800 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55600dc967e8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55600dc96760 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55600dc92b40 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55600dc96830 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55600dc96780 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55600dc967a0 <col:28> 'const String' lvalue ParmVar 0x55600dc93308 'x' 'const String &'
|       `-ReturnStmt 0x55600dc969a8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55600dc96990 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55600dc96960 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55600dc96948 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55600dc96928 <col:13, col:20> 'String' (CXXTemporary 0x55600dc96928)
|                 `-CXXTemporaryObjectExpr 0x55600dc968f0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55600dc93560 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55600dc93450 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55600dc934c8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55600dc94cd8 <col:71> 'bool' false
|-CXXRecordDecl 0x55600dc93610 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55600dc93908 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55600dc938a0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55600dc93840 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55600dc93800 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55600d95f900 'String'
|       | `-CXXRecord 0x55600d95f870 'String'
|       |-BuiltinType 0x55600d632580 'int'
|       `-DecayedType 0x55600dc25490 '__va_list_tag *' sugar
|         |-TypedefType 0x55600dc25460 'va_list' sugar
|         | |-Typedef 0x55600d8509b0 'va_list'
|         | `-TypedefType 0x55600d850960 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55600d788588 '__gnuc_va_list'
|         |   `-TypedefType 0x55600d7884f0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55600d673d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55600d673ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55600d6332d0 '__va_list_tag'
|         |         `-CXXRecord 0x55600d633238 '__va_list_tag'
|         `-PointerType 0x55600d856250 '__va_list_tag *'
|           `-RecordType 0x55600d6332d0 '__va_list_tag'
|             `-CXXRecord 0x55600d633238 '__va_list_tag'
|-EnumDecl 0x55600dc93960 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55600dc93a60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94000 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93a40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55600dc93a20 <col:16> 'int' 1
| |-EnumConstantDecl 0x55600dc93af0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94018 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93ad0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55600dc93ab0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55600dc93b80 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94030 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93b60 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55600dc93b40 <col:22> 'int' 4
| |-EnumConstantDecl 0x55600dc93c50 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94048 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93bf0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55600dc93bd0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55600dc93ce0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94060 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93cc0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55600dc93ca0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55600dc93d70 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94078 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93d50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55600dc93d30 <col:19> 'int' 32
| |-EnumConstantDecl 0x55600dc93e00 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc94090 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93de0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55600dc93dc0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55600dc93e90 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc940a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93e70 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55600dc93e50 <col:14> 'int' 128
| |-EnumConstantDecl 0x55600dc93f20 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55600dc940c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc93f00 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55600dc93ee0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55600dc93fb0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55600dc940d8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600dc93f90 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55600dc93f70 <col:12> 'int' 1024
|-CXXMethodDecl 0x55600dc942e8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55600dc94100 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55600dc941a0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55600dc94470 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55600dc943a8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55600dc94518 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55600dc94558 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55600dc945b8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55600dc94630 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55600dc94a30 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55600dc946a8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55600dc94728 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55600dc947a8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55600dc94820 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55600dc94898 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55600dc94910 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55600dc94b58 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55600dc94b58
| `-ParmVarDecl 0x55600dc94c68 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55600dc96d68 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55600dc96d68
  `-ParmVarDecl 0x55600dc96e78 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc244d8 prev 0x55600db13908 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600dc245d0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55600dc24660 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55600dc24798 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55600dc24698 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55600dc25bc0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dc25ba0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55600dc25738 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55600dc25c50 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55600dc25c10 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55600dc24698 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55600dc257a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55600dc25cd0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dc25c90 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55600dc25800 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55600dc25d10 <col:54> 'bool' false
| `-CompoundStmt 0x55600dc25e18 <col:61, line:38:5>
|   `-BinaryOperator 0x55600dc25df8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55600dc25d90 <col:9> 'const Element *' lvalue ->_context 0x55600dc256d8
|     | `-CXXThisExpr 0x55600dc25d80 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55600dc25de0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55600dc25dc0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55600dc249a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55600dc24858 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55600dc248d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55600dc25bf8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dc25bd8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55600dc256d8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55600dc25e70 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55600dc25e30 <col:20> 'const Element *' lvalue ParmVar 0x55600dc24858 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55600dc25738 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55600dc25ef0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55600dc25eb0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55600dc248d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55600dc257a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55600dc25f70 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55600dc25f30 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55600dc25800 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55600dc25fb0 <col:73> 'bool' false
| `-CompoundStmt 0x55600dc26028 <col:80, line:46:5>
|-CXXMethodDecl 0x55600dc24ad8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55600dc260a0 <col:36, line:51:5>
|   `-ReturnStmt 0x55600dc26090 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55600dc26078 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55600dc26048 <col:16> 'const Element *const' lvalue ->_context 0x55600dc256d8
|         `-CXXThisExpr 0x55600dc26038 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55600dc24bc8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55600dc26120 <col:32, line:57:5>
|   `-ReturnStmt 0x55600dc26110 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55600dc260f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55600dc260c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55600dc25738
|         `-CXXThisExpr 0x55600dc260b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55600dc24c88 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55600dc24e10 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55600dc24d40 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55600dc24f60 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55600dc24ed0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55600dc250b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55600dc25020 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55600dc252b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55600dc25168 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55600dc251e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55600dc255e8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55600dc25378 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55600dc253f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55600dc254c0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55600dc256a0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55600dc256d8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55600dc25738 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55600dc257a0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55600dc25800 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55600dc25850 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55600dc25850
| `-ParmVarDecl 0x55600dc25968 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55600dc25a08 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55600dc25a08
| `-ParmVarDecl 0x55600dc25b18 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55600dc9f828 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55600dc4ba80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55600dc4bc58 prev 0x55600dc4ba80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55600dc4bce8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55600dc4bd10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc4d8e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55600dc4d890 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55600dc4c1c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55600dc4c0c0 'type'
|     `-TemplateSpecializationType 0x55600dc4c050 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55600dc4bf30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55600dc4bf10 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55600dc4bef0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55600dc4c030 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55600dc4bf50 'char_array'
|-TypedefDecl 0x55600dc4d998 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55600dc4d960 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55600dc4d940 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55600dc4d8e0 'type'
|     `-ElaboratedType 0x55600dc4d890 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55600dc4c1c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55600dc4c0c0 'type'
|         `-TemplateSpecializationType 0x55600dc4c050 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55600dc4bf30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55600dc4bf10 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55600dc4bef0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55600dc4c030 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55600dc4bf50 'char_array'
|-CXXMethodDecl 0x55600dc4db18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55600dc4da28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55600dc4dc08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55600dc4dce8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55600dc4dfb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55600dc4dec0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55600dc4e1f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55600dc4e070 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc4e0e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4e3c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55600dc4e2b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc4e330 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4e528 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55600dc4e5f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55600dc4e848 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55600dc4e6b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55600dc4e730 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4eaa8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55600dc4e918 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55600dc4e990 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4ec68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55600dc4eb78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4ee28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55600dc4ed30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc4eee0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55600dc4ef90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55600dc56618 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55600dc4f040 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55600dc56500 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55600dc568b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55600dc567c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55600dc56980 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55600dc569d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55600dc56a20 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55600dc4a488 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55600dc4a698 prev 0x55600dc4a488 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55600dc4b9f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55600dc4b9a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55600dc4b980 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55600dc4b830 'type'
|     `-SubstTemplateTypeParmType 0x55600dc4b650 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55600d8f8740 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d8f86e8 'T'
|       `-RecordType 0x55600dc4b1a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55600dc4b0b8 'sized_array_memory'
|-FieldDecl 0x55600dc56a70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55600dc56ac0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55600dc56af8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|   |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55600d9303d8 'T'
|   `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc56b88 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55600dc56b50 'int &'
|   `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc56c48 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55600dc56c10 'const int &'
|   `-QualType 0x55600dc4a731 'const int' const
|     `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc56cd8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55600dc56ca0 'int *'
|   `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc56d68 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55600dc56d30 'const int *'
|   `-QualType 0x55600dc4a731 'const int' const
|     `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc57950 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55600dc57900 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55600dc578e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55600dc57870 'type'
|     `-SubstTemplateTypeParmType 0x55600dc57630 'int' sugar
|       |-TemplateTypeParmType 0x55600d903540 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9034f0 'T'
|       `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc579b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55600dc56c10 'const int &'
|   `-QualType 0x55600dc4a731 'const int' const
|     `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc57a10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc57a78 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55600dc56ca0 'int *'
|   `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|     |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55600d9303d8 'T'
|     `-BuiltinType 0x55600d632580 'int'
|-TypedefDecl 0x55600dc57ae0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55600dc56d30 'const int *'
|   `-QualType 0x55600dc4a731 'const int' const
|     `-SubstTemplateTypeParmType 0x55600dc4a730 'int' sugar
|       |-TemplateTypeParmType 0x55600d930430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55600d9303d8 'T'
|       `-BuiltinType 0x55600d632580 'int'
|-EnumDecl 0x55600dc57b38 <line:134:5> col:5
| `-EnumConstantDecl 0x55600dc57c30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55600dc57c10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55600d931ab8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55600d931a90 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55600d931a70 <col:40> 'int' 1
|-CXXConstructorDecl 0x55600dc57cb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55600dc57f08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc57d70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc57e10 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55600dc581c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55600dc580b0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55600dc58488 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55600dc58370 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55600dc587d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55600dc586b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55600dc58ae0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55600dc589c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55600dc58dd0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc58c18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc58c90 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55600dc58ef8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55600dc58fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc59030 <col:30> Inherited
|-CXXMethodDecl 0x55600dc59078 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55600dc59128 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc59180 <col:30> Inherited
|-CXXMethodDecl 0x55600dc59248 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55600dc592f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc59350 <col:30> Inherited
|-CXXMethodDecl 0x55600dc59398 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55600dc59448 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc594a0 <col:30> Inherited
|-CXXMethodDecl 0x55600dc594e8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55600dc59598 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc595f0 <col:30> Inherited
|-CXXMethodDecl 0x55600dc59638 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55600dc596e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55600dc59740 <col:30> Inherited
|-CXXMethodDecl 0x55600dc59768 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55600dc59818 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55600dc598c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55600dc59a88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc59978 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55600dc599f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55600dc59bd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc59b48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc59d88 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55600dc59c90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55600dc59e40 <col:20>
| `-OptimizeNoneAttr 0x55600dc59e98 <col:30>
|-CXXMethodDecl 0x55600dc59fb8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55600dc59ec0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55600dc5a070 <col:20>
| `-OptimizeNoneAttr 0x55600dc5a0c8 <col:30>
|-CXXMethodDecl 0x55600dc5a180 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc5a0f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc5a2c8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55600dc5a238 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc5a3f8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55600dc5a528 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55600dc5a5f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55600dc5a6c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55600dc5a808 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55600dc5a778 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc5a950 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55600dc5a8c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55600dc5aa98 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55600dc5aa08 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55600dc5ab50 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55600dc5ac50 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55600dc5abc0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55600dc5ad08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55600dc5adc8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55600dc5aec8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55600dc5b048 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55600dc5af88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55600dc5b808 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55600dc5b100 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55600dc5b768 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55600dc5b668 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55600dc5b8e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55600dc5ba38 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55600dc5b9a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55600dc5baf0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55600dc5bd38 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55600dc5bbb0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55600dc5bc28 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55600dc5bef8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55600dc5be08 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55600dc5c148 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55600dc5bfc0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55600dc5c038 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55600dc5c208 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55600dc5c468 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55600dc5c370 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55600dc5c538 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc485f8 prev 0x55600dc2b050 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55600dc486f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55600dc487e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55600dc6e390 <col:16, line:828:9>
|-CXXDestructorDecl 0x55600dc488d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55600dc6e3a0 <col:25, line:830:9>
|-CXXMethodDecl 0x55600dc489d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55600dc48a80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55600dc48b28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55600dc48b28
| `-ParmVarDecl 0x55600dc48c38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55600dc493f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55600dc493f8
  `-ParmVarDecl 0x55600dc49508 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc2ae88 prev 0x55600db13998 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55600dc2afc0 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55600dc2b050 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55600dc2b100 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55600dc2b208 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55600dc2b138 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55600dc5daf8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55600dc5dad8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55600dc2b528 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55600dc2b3a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55600dc2b418 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55600dc5db30 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55600dc5db10 <col:59> 'int' 0
|-CXXConstructorDecl 0x55600dc2b700 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55600dc2b5f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55600dc2b668 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55600dc5db68 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55600dc5db48 <col:55> 'int' 0
|-CXXConstructorDecl 0x55600dc2bab8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55600dc2b8a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55600dc2b918 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55600dc2b990 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55600dc5dba0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55600dc5db80 <col:31> 'int' 0
|-CXXConstructorDecl 0x55600dc2bc78 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55600dc2bbb8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55600dc2bd70 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55600dc2bf28 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55600dc2be60 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55600dc2c018 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55600dc5df50 <col:24, line:291:5>
|   `-ReturnStmt 0x55600dc5df40 <line:290:9, col:79>
|     `-BinaryOperator 0x55600dc5df20 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55600dc5ddf8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55600dc5dd50 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55600dc5dd30 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55600dc5dc28 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55600dc5dc10 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55600dc5dbf8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55600dc5dbc8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55600dc4a420
|       | |   |       `-CXXThisExpr 0x55600dc5dbb8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55600dc5dd18 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55600dc5dd00 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55600dc5dcc8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55600dc5dc98 <col:28, col:35> '<bound member function type>' ->size 0x55600dc16af8
|       | |           `-ImplicitCastExpr 0x55600dc5dce8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55600dc5dc80 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55600dc5dc50 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55600dc4a420
|       | |                 `-CXXThisExpr 0x55600dc5dc40 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55600dc5dde0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55600dc5ddc8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55600dc5ddb0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55600dc5dd80 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55600dc5c680
|       |         `-CXXThisExpr 0x55600dc5dd70 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55600dc5df00 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dc5dee8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55600dc5ded0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55600dc5de90 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55600dc5de78 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55600dc5de28 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55600dc5c730
|         |     |   `-CXXThisExpr 0x55600dc5de18 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55600dc5de58 <col:73> 'int' 0
|         `-IntegerLiteral 0x55600dc5deb0 <col:79> 'int' 0
|-CXXMethodDecl 0x55600dc2c0d8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55600dc5e128 <col:32, line:296:5>
|   `-ReturnStmt 0x55600dc5e118 <line:295:9, col:49>
|     `-BinaryOperator 0x55600dc5e0f8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55600dc5dfd8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55600dc5dfc0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55600dc5dfa8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55600dc5df78 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55600dc5c680
|       |       `-CXXThisExpr 0x55600dc5df68 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55600dc5e0d8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dc5e0c0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55600dc5e0a8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55600dc5e068 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55600dc5e050 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55600dc5e000 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55600dc5c730
|         |     |   `-CXXThisExpr 0x55600dc5dff0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55600dc5e030 <col:43> 'int' 0
|         `-IntegerLiteral 0x55600dc5e088 <col:49> 'int' 0
|-CXXMethodDecl 0x55600dc2c1c8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55600dc5e338 <col:19, line:306:5>
|   |-IfStmt 0x55600dc5e258 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55600dc5e198 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55600dc5e180 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55600dc5e150 <col:13> 'Vector<String> *' lvalue ->_conf 0x55600dc4a420
|   | |     `-CXXThisExpr 0x55600dc5e140 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55600dc5e238 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55600dc5e208 <col:13, col:20> '<bound member function type>' ->clear 0x55600dc194f8
|   |     `-ImplicitCastExpr 0x55600dc5e1f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55600dc5e1c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55600dc4a420
|   |         `-CXXThisExpr 0x55600dc5e1b0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55600dc5e2e0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55600dc5e2b0 <col:9, col:16> '<bound member function type>' .clear 0x55600dc5c208
|   |   `-MemberExpr 0x55600dc5e280 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55600dc5c620
|   |     `-CXXThisExpr 0x55600dc5e270 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55600dc5e328 <line:305:9, col:17>
|     `-UnaryOperator 0x55600dc5e310 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc5e300 <col:17> 'Args *' this
|-CXXMethodDecl 0x55600dc2c448 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55600dc2c350 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55600dc2c5c8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55600dc2c500 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55600dc2c948 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55600dc2c670 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55600dc2c8a8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55600dc2c718 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55600dc2c790 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55600dc5ffd0 <col:67, line:327:5>
|     |-WhileStmt 0x55600dc5ff80 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55600dc5e430 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55600dc5e3a0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55600dbd0e48 0x55600dbb3880 0x55600db52018 0x55600d99b5f8 0x55600d99b2d0 0x55600d98cab0 0x55600d98c760 0x55600d98c050 0x55600d95e9c0 0x55600d8eae80
|     | | |-DeclRefExpr 0x55600dc5e360 <col:16> 'Iter' lvalue ParmVar 0x55600dc2c718 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55600dc5e380 <col:25> 'Iter' lvalue ParmVar 0x55600dc2c790 'end' 'Iter'
|     | `-CompoundStmt 0x55600dc5ff60 <col:30, line:325:9>
|     |   |-CallExpr 0x55600dc5ff00 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55600dc5e478 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55600dc5fed0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55600dc5fe60 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|     |   |   `-DeclRefExpr 0x55600dc5e4d8 <col:24> 'Iter' lvalue ParmVar 0x55600dc2c718 'begin' 'Iter'
|     |   `-UnaryOperator 0x55600dc5ff48 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55600dc5ff28 <col:15> 'Iter' lvalue ParmVar 0x55600dc2c718 'begin' 'Iter'
|     `-ReturnStmt 0x55600dc5ffc0 <line:326:9, col:17>
|       `-UnaryOperator 0x55600dc5ffa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc5ff98 <col:17> 'Args *' this
|-CXXMethodDecl 0x55600dc2ca50 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55600dc2c9c0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55600dc2cb98 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55600dc2cb08 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55600dc2cc60 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55600dc600b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55600dc60050 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55600dc60000 <col:9> '<bound member function type>' ->reset_from 0x55600dc5caa8
|   | | `-CXXThisExpr 0x55600dc5fff0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55600dc60030 <col:20> 'int' 0
|   `-ReturnStmt 0x55600dc600a0 <line:352:9, col:17>
|     `-UnaryOperator 0x55600dc60088 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc60078 <col:17> 'Args *' this
|-VarDecl 0x55600dc2cd18 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55600dc2cd80 <col:38> 'int' 1
|-VarDecl 0x55600dc2ce10 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55600dc2ce78 <col:39> 'int' 2
|-VarDecl 0x55600dc2cf08 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55600dc2cf70 <col:39> 'int' 4
|-VarDecl 0x55600dc2d000 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55600dc2d068 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55600dc2d3e8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55600dc2d0e0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc2d348 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55600dc2d190 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2d238 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55600dc60208 <col:43, line:371:5>
|     `-ReturnStmt 0x55600dc601f8 <line:370:9, col:34>
|       `-CallExpr 0x55600dc601c0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc600e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60160 <col:21> 'const char *' lvalue ParmVar 0x55600dc2d190 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc60180 <col:30> 'int' 0
|         `-DeclRefExpr 0x55600dc601a0 <col:33> 'T' lvalue ParmVar 0x55600dc2d238 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc2d718 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55600dc2d450 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc2d678 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55600dc2d500 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2d5a8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55600dc60358 <col:45, line:375:5>
|     `-ReturnStmt 0x55600dc60348 <line:374:9, col:42>
|       `-CallExpr 0x55600dc60310 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc602b0 <col:21> 'const char *' lvalue ParmVar 0x55600dc2d500 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc602d0 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int'
|         `-DeclRefExpr 0x55600dc602f0 <col:41> 'T' lvalue ParmVar 0x55600dc2d5a8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc2da48 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55600dc2d780 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc2d9a8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55600dc2d830 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2d8d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55600dc604a8 <col:45, line:379:5>
|     `-ReturnStmt 0x55600dc60498 <line:378:9, col:43>
|       `-CallExpr 0x55600dc60460 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60400 <col:21> 'const char *' lvalue ParmVar 0x55600dc2d830 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc60420 <col:30> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         `-DeclRefExpr 0x55600dc60440 <col:42> 'T' lvalue ParmVar 0x55600dc2d8d8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc2dd78 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55600dc2dab0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55600dc2dcd8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55600dc2db60 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55600dc2dc08 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55600dc606a8 <col:46, line:383:5>
| |   `-ReturnStmt 0x55600dc60698 <line:382:9, col:55>
| |     `-CallExpr 0x55600dc60660 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55600dc604d0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55600dc60550 <col:21> 'const char *' lvalue ParmVar 0x55600dc2db60 'keyword' 'const char *'
| |       |-BinaryOperator 0x55600dc60620 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55600dc605d0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55600dc605b0 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55600dc60608 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55600dc605e8 <col:42> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55600dc60640 <col:54> 'T' lvalue ParmVar 0x55600dc2dc08 'x' 'T &'
| `-CXXMethodDecl 0x55600dc9fcb8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55600dc9fad8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55600dc9fba8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55600dc2e178 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55600dc2dde0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc2e0d8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55600dc2de90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2df10 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc2dfb8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55600dc607e8 <col:54, line:388:5>
|     |-CallExpr 0x55600dc60770 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc606c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55600dc60700 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55600dc60710 <col:30> 'const char *' lvalue ParmVar 0x55600dc2de90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc60730 <col:39> 'int' lvalue ParmVar 0x55600dc2df10 'flags' 'int'
|     | `-DeclRefExpr 0x55600dc60750 <col:46> 'T' lvalue ParmVar 0x55600dc2dfb8 'x' 'T &'
|     `-ReturnStmt 0x55600dc607d8 <line:387:9, col:17>
|       `-UnaryOperator 0x55600dc607c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc607b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc2e628 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55600dc2e1e8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc2e268 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55600dc2e588 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55600dc2e328 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2e3c8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc2e468 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc60958 <col:74, line:403:5>
|     `-ReturnStmt 0x55600dc60948 <line:402:9, col:56>
|       `-CallExpr 0x55600dc60908 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60888 <col:28> 'const char *' lvalue ParmVar 0x55600dc2e328 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc608a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55600dc608c8 <col:40> 'T' lvalue ParmVar 0x55600dc2e3c8 'x' 'T &'
|         `-DeclRefExpr 0x55600dc608e8 <col:43> 'const V' lvalue ParmVar 0x55600dc2e468 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55600dc2ea98 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55600dc2e698 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc2e718 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55600dc2e9f8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55600dc2e7d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2e878 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc2e918 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc60ac0 <col:76, line:407:5>
|     `-ReturnStmt 0x55600dc60ab0 <line:406:9, col:65>
|       `-CallExpr 0x55600dc60a70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc609f0 <col:28> 'const char *' lvalue ParmVar 0x55600dc2e7d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc60a10 <col:37> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         |-DeclRefExpr 0x55600dc60a30 <col:49> 'T' lvalue ParmVar 0x55600dc2e878 'x' 'T &'
|         `-DeclRefExpr 0x55600dc60a50 <col:52> 'const V' lvalue ParmVar 0x55600dc2e918 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55600dc2efe8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55600dc2eb08 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc2eb88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55600dc2ef48 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55600dc2ec48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2ecc8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc2ed68 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc2ee08 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc60c28 <col:85, line:412:5>
|     |-CallExpr 0x55600dc60ba8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc60ad8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55600dc60b18 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55600dc60b28 <col:37> 'const char *' lvalue ParmVar 0x55600dc2ec48 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc60b48 <col:46> 'int' lvalue ParmVar 0x55600dc2ecc8 'flags' 'int'
|     | |-DeclRefExpr 0x55600dc60b68 <col:53> 'T' lvalue ParmVar 0x55600dc2ed68 'x' 'T &'
|     | `-DeclRefExpr 0x55600dc60b88 <col:56> 'const V' lvalue ParmVar 0x55600dc2ee08 'default_value' 'const V &'
|     `-ReturnStmt 0x55600dc60c18 <line:411:9, col:17>
|       `-UnaryOperator 0x55600dc60c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc60bf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc2f478 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55600dc2f060 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc2f0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc2f3d8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc2f198 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2f210 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc2f2b8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55600dc60da8 <col:53, line:425:5>
|     `-ReturnStmt 0x55600dc60d98 <line:424:9, col:42>
|       `-CallExpr 0x55600dc60d58 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60cd8 <col:21> 'const char *' lvalue ParmVar 0x55600dc2f198 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc60cf8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55600dc60d18 <col:33> 'P' lvalue ParmVar 0x55600dc2f210 'parser' 'P'
|         `-DeclRefExpr 0x55600dc60d38 <col:41> 'T' lvalue ParmVar 0x55600dc2f2b8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc2f8c8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55600dc2f4e8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc2f568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc2f828 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc2f628 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2f6a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc2f748 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55600dc60f20 <col:55, line:429:5>
|     `-ReturnStmt 0x55600dc60f10 <line:428:9, col:50>
|       `-CallExpr 0x55600dc60ed0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60e50 <col:21> 'const char *' lvalue ParmVar 0x55600dc2f628 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc60e70 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int'
|         |-DeclRefExpr 0x55600dc60e90 <col:41> 'P' lvalue ParmVar 0x55600dc2f6a0 'parser' 'P'
|         `-DeclRefExpr 0x55600dc60eb0 <col:49> 'T' lvalue ParmVar 0x55600dc2f748 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc2fd18 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55600dc2f938 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc2f9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc2fc78 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc2fa78 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2faf0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc2fb98 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55600dc61098 <col:55, line:433:5>
|     `-ReturnStmt 0x55600dc61088 <line:432:9, col:51>
|       `-CallExpr 0x55600dc61048 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc60f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc60fc8 <col:21> 'const char *' lvalue ParmVar 0x55600dc2fa78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc60fe8 <col:30> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         |-DeclRefExpr 0x55600dc61008 <col:42> 'P' lvalue ParmVar 0x55600dc2faf0 'parser' 'P'
|         `-DeclRefExpr 0x55600dc61028 <col:50> 'T' lvalue ParmVar 0x55600dc2fb98 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc30168 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55600dc2fd88 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc2fe08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc300c8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc2fec8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc2ff40 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc2ffe8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55600dc612c0 <col:56, line:437:5>
|     `-ReturnStmt 0x55600dc612b0 <line:436:9, col:63>
|       `-CallExpr 0x55600dc61270 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc610c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61140 <col:21> 'const char *' lvalue ParmVar 0x55600dc2fec8 'keyword' 'const char *'
|         |-BinaryOperator 0x55600dc61210 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55600dc611c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55600dc611a0 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55600dc611f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55600dc611d8 <col:42> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55600dc61230 <col:54> 'P' lvalue ParmVar 0x55600dc2ff40 'parser' 'P'
|         `-DeclRefExpr 0x55600dc61250 <col:62> 'T' lvalue ParmVar 0x55600dc2ffe8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc30698 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55600dc301d8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc30258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc305f8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55600dc30318 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc30398 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc30410 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc304b8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55600dc61428 <col:64, line:442:5>
|     |-CallExpr 0x55600dc613a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc612d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55600dc61318 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55600dc61328 <col:30> 'const char *' lvalue ParmVar 0x55600dc30318 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc61348 <col:39> 'int' lvalue ParmVar 0x55600dc30398 'flags' 'int'
|     | |-DeclRefExpr 0x55600dc61368 <col:46> 'P' lvalue ParmVar 0x55600dc30410 'parser' 'P'
|     | `-DeclRefExpr 0x55600dc61388 <col:54> 'T' lvalue ParmVar 0x55600dc304b8 'x' 'T &'
|     `-ReturnStmt 0x55600dc61418 <line:441:9, col:17>
|       `-UnaryOperator 0x55600dc61400 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc613f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc30c98 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55600dc30710 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc30788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55600dc30808 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55600dc30bf8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55600dc308d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc30948 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc309e8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc30ab8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc615c0 <col:84, line:458:5>
|     `-ReturnStmt 0x55600dc615b0 <line:457:9, col:64>
|       `-CallExpr 0x55600dc61568 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc61458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc614c8 <col:28> 'const char *' lvalue ParmVar 0x55600dc308d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc614e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55600dc61508 <col:40> 'P' lvalue ParmVar 0x55600dc30948 'parser' 'P'
|         |-DeclRefExpr 0x55600dc61528 <col:48> 'T' lvalue ParmVar 0x55600dc309e8 'x' 'T &'
|         `-DeclRefExpr 0x55600dc61548 <col:51> 'const V' lvalue ParmVar 0x55600dc30ab8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55600dc31218 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55600dc30d10 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc30d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55600dc30e08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55600dc31178 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55600dc30ed0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc30f48 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc30fe8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc31088 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc61750 <col:86, line:462:5>
|     `-ReturnStmt 0x55600dc61740 <line:461:9, col:73>
|       `-CallExpr 0x55600dc616f8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc615e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61658 <col:28> 'const char *' lvalue ParmVar 0x55600dc30ed0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc61678 <col:37> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         |-DeclRefExpr 0x55600dc61698 <col:49> 'P' lvalue ParmVar 0x55600dc30f48 'parser' 'P'
|         |-DeclRefExpr 0x55600dc616b8 <col:57> 'T' lvalue ParmVar 0x55600dc30fe8 'x' 'T &'
|         `-DeclRefExpr 0x55600dc616d8 <col:60> 'const V' lvalue ParmVar 0x55600dc31088 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55600dc31878 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55600dc31290 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc31308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55600dc31388 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55600dc317d8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55600dc31450 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc314d0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc31548 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc315e8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc31688 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55600dc618e0 <col:95, line:467:5>
|     |-CallExpr 0x55600dc61858 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc61768 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55600dc617a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55600dc617b8 <col:37> 'const char *' lvalue ParmVar 0x55600dc31450 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc617d8 <col:46> 'int' lvalue ParmVar 0x55600dc314d0 'flags' 'int'
|     | |-DeclRefExpr 0x55600dc617f8 <col:53> 'P' lvalue ParmVar 0x55600dc31548 'parser' 'P'
|     | |-DeclRefExpr 0x55600dc61818 <col:61> 'T' lvalue ParmVar 0x55600dc315e8 'x' 'T &'
|     | `-DeclRefExpr 0x55600dc61838 <col:64> 'const V' lvalue ParmVar 0x55600dc31688 'default_value' 'const V &'
|     `-ReturnStmt 0x55600dc618d0 <line:466:9, col:17>
|       `-UnaryOperator 0x55600dc618b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc618a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc31e58 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55600dc318f8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc31978 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc319f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc31db8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc31ac0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc31b38 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc31bd8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55600dc31c78 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55600dc61a88 <col:63, line:481:5>
|     `-ReturnStmt 0x55600dc61a78 <line:480:9, col:47>
|       `-CallExpr 0x55600dc61a30 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc61910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61990 <col:21> 'const char *' lvalue ParmVar 0x55600dc31ac0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc619b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55600dc619d0 <col:33> 'P' lvalue ParmVar 0x55600dc31b38 'parser' 'P'
|         |-DeclRefExpr 0x55600dc619f0 <col:41> 'T1' lvalue ParmVar 0x55600dc31bd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55600dc61a10 <col:45> 'T2' lvalue ParmVar 0x55600dc31c78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55600dc323d8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55600dc31ed0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc31f48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc31fc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc32338 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc32090 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc32108 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc321a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55600dc32248 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55600dc61c28 <col:65, line:485:5>
|     `-ReturnStmt 0x55600dc61c18 <line:484:9, col:55>
|       `-CallExpr 0x55600dc61bd0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc61ab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61b30 <col:21> 'const char *' lvalue ParmVar 0x55600dc32090 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc61b50 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int'
|         |-DeclRefExpr 0x55600dc61b70 <col:41> 'P' lvalue ParmVar 0x55600dc32108 'parser' 'P'
|         |-DeclRefExpr 0x55600dc61b90 <col:49> 'T1' lvalue ParmVar 0x55600dc321a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55600dc61bb0 <col:53> 'T2' lvalue ParmVar 0x55600dc32248 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55600dc32958 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55600dc32450 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc324c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc32548 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc328b8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc32610 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc32688 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc32728 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55600dc327c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55600dc61dc8 <col:65, line:489:5>
|     `-ReturnStmt 0x55600dc61db8 <line:488:9, col:56>
|       `-CallExpr 0x55600dc61d70 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc61c50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61cd0 <col:21> 'const char *' lvalue ParmVar 0x55600dc32610 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc61cf0 <col:30> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         |-DeclRefExpr 0x55600dc61d10 <col:42> 'P' lvalue ParmVar 0x55600dc32688 'parser' 'P'
|         |-DeclRefExpr 0x55600dc61d30 <col:50> 'T1' lvalue ParmVar 0x55600dc32728 'x1' 'T1 &'
|         `-DeclRefExpr 0x55600dc61d50 <col:54> 'T2' lvalue ParmVar 0x55600dc327c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55600dc36590 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55600dc329d0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc32a48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc32ac8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc364f0 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc32b90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc32c08 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc32ca8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55600dc32d48 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55600dc62018 <col:66, line:493:5>
|     `-ReturnStmt 0x55600dc62008 <line:492:9, col:68>
|       `-CallExpr 0x55600dc61fc0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc61df0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc61e70 <col:21> 'const char *' lvalue ParmVar 0x55600dc32b90 'keyword' 'const char *'
|         |-BinaryOperator 0x55600dc61f40 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55600dc61ef0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55600dc61ed0 <col:30> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55600dc61f28 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55600dc61f08 <col:42> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55600dc61f60 <col:54> 'P' lvalue ParmVar 0x55600dc32c08 'parser' 'P'
|         |-DeclRefExpr 0x55600dc61f80 <col:62> 'T1' lvalue ParmVar 0x55600dc32ca8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55600dc61fa0 <col:66> 'T2' lvalue ParmVar 0x55600dc32d48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55600dc36bf8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55600dc36608 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc36688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc36708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc36b58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc367d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc36850 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc368c8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc36968 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55600dc36a08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55600dc621a8 <col:74, line:498:5>
|     |-CallExpr 0x55600dc62120 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc62030 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55600dc62070 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55600dc62080 <col:30> 'const char *' lvalue ParmVar 0x55600dc367d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc620a0 <col:39> 'int' lvalue ParmVar 0x55600dc36850 'flags' 'int'
|     | |-DeclRefExpr 0x55600dc620c0 <col:46> 'P' lvalue ParmVar 0x55600dc368c8 'parser' 'P'
|     | |-DeclRefExpr 0x55600dc620e0 <col:54> 'T1' lvalue ParmVar 0x55600dc36968 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55600dc62100 <col:58> 'T2' lvalue ParmVar 0x55600dc36a08 'x2' 'T2 &'
|     `-ReturnStmt 0x55600dc62198 <line:497:9, col:17>
|       `-UnaryOperator 0x55600dc62180 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc62170 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc36f58 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55600dc36c78 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc36eb8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55600dc36d30 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc36da8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55600dc622f0 <col:52, line:509:5>
|     `-ReturnStmt 0x55600dc622e0 <line:508:9, col:44>
|       `-CallExpr 0x55600dc622a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc621d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62248 <col:26> 'const char *' lvalue ParmVar 0x55600dc36d30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc62268 <col:35> 'int' 0
|         `-DeclRefExpr 0x55600dc62288 <col:38> 'P' lvalue ParmVar 0x55600dc36da8 'parser' 'P'
|-FunctionTemplateDecl 0x55600dc37258 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55600dc36fc0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc371b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55600dc37070 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc370e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55600dc62430 <col:54, line:513:5>
|     `-ReturnStmt 0x55600dc62420 <line:512:9, col:52>
|       `-CallExpr 0x55600dc623e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62388 <col:26> 'const char *' lvalue ParmVar 0x55600dc37070 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc623a8 <col:35> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int'
|         `-DeclRefExpr 0x55600dc623c8 <col:46> 'P' lvalue ParmVar 0x55600dc370e8 'parser' 'P'
|-FunctionTemplateDecl 0x55600dc37558 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55600dc372c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc374b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55600dc37370 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc373e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55600dc62570 <col:54, line:517:5>
|     `-ReturnStmt 0x55600dc62560 <line:516:9, col:53>
|       `-CallExpr 0x55600dc62528 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc624c8 <col:26> 'const char *' lvalue ParmVar 0x55600dc37370 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc624e8 <col:35> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int'
|         `-DeclRefExpr 0x55600dc62508 <col:47> 'P' lvalue ParmVar 0x55600dc373e8 'parser' 'P'
|-FunctionTemplateDecl 0x55600dc37858 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55600dc375c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc377b8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55600dc37670 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc376e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55600dc62760 <col:55, line:521:5>
|     `-ReturnStmt 0x55600dc62750 <line:520:9, col:65>
|       `-CallExpr 0x55600dc62718 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62608 <col:26> 'const char *' lvalue ParmVar 0x55600dc37670 'keyword' 'const char *'
|         |-BinaryOperator 0x55600dc626d8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55600dc62688 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55600dc62668 <col:35> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55600dc626c0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55600dc626a0 <col:47> 'const int' lvalue Var 0x55600dc2ce10 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55600dc626f8 <col:59> 'P' lvalue ParmVar 0x55600dc376e8 'parser' 'P'
|-FunctionTemplateDecl 0x55600dc37c28 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55600dc378c0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc37b88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55600dc37970 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc379f0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc37a68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55600dc628a0 <col:63, line:526:5>
|     |-CallExpr 0x55600dc62828 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc62778 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55600dc627b8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55600dc627c8 <col:35> 'const char *' lvalue ParmVar 0x55600dc37970 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55600dc627e8 <col:44> 'int' lvalue ParmVar 0x55600dc379f0 'flags' 'int'
|     | `-DeclRefExpr 0x55600dc62808 <col:51> 'P' lvalue ParmVar 0x55600dc37a68 'parser' 'P'
|     `-ReturnStmt 0x55600dc62890 <line:525:9, col:17>
|       `-UnaryOperator 0x55600dc62878 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc62868 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc38078 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55600dc37c98 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc37d18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc37fd8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc37dd8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc37e50 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc37ef8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55600dc629f8 <col:58, line:541:5>
|     `-ReturnStmt 0x55600dc629e8 <line:540:9, col:39>
|       `-CallExpr 0x55600dc629b0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc628d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62950 <col:21> 'const char *' lvalue ParmVar 0x55600dc37dd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc62970 <col:30> 'P' lvalue ParmVar 0x55600dc37e50 'parser' 'P'
|         `-DeclRefExpr 0x55600dc62990 <col:38> 'T' lvalue ParmVar 0x55600dc37ef8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc384c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55600dc380e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc38168 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc38428 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc38228 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc382a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc38348 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55600dc62b30 <col:60, line:545:5>
|     `-ReturnStmt 0x55600dc62b20 <line:544:9, col:41>
|       `-CallExpr 0x55600dc62ae8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62a88 <col:23> 'const char *' lvalue ParmVar 0x55600dc38228 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc62aa8 <col:32> 'P' lvalue ParmVar 0x55600dc382a0 'parser' 'P'
|         `-DeclRefExpr 0x55600dc62ac8 <col:40> 'T' lvalue ParmVar 0x55600dc38348 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc38918 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55600dc38538 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc385b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc38878 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc38678 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc386f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc38798 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55600dc62c68 <col:60, line:549:5>
|     `-ReturnStmt 0x55600dc62c58 <line:548:9, col:41>
|       `-CallExpr 0x55600dc62c20 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62bc0 <col:23> 'const char *' lvalue ParmVar 0x55600dc38678 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc62be0 <col:32> 'P' lvalue ParmVar 0x55600dc386f0 'parser' 'P'
|         `-DeclRefExpr 0x55600dc62c00 <col:40> 'T' lvalue ParmVar 0x55600dc38798 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc38d68 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55600dc38988 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc38a08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc38cc8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc38ac8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc38b40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc38be8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55600dc62da0 <col:61, line:553:5>
|     `-ReturnStmt 0x55600dc62d90 <line:552:9, col:42>
|       `-CallExpr 0x55600dc62d58 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62cf8 <col:24> 'const char *' lvalue ParmVar 0x55600dc38ac8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc62d18 <col:33> 'P' lvalue ParmVar 0x55600dc38b40 'parser' 'P'
|         `-DeclRefExpr 0x55600dc62d38 <col:41> 'T' lvalue ParmVar 0x55600dc38be8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc39248 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55600dc38dd8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc38e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc391a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55600dc38f18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc38f98 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc39010 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc390b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55600dc62f18 <col:69, line:557:5>
|     `-ReturnStmt 0x55600dc62f08 <line:556:9, col:46>
|       `-CallExpr 0x55600dc62ec8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62e48 <col:21> 'const char *' lvalue ParmVar 0x55600dc38f18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc62e68 <col:30> 'int' lvalue ParmVar 0x55600dc38f98 'flags' 'int'
|         |-DeclRefExpr 0x55600dc62e88 <col:37> 'P' lvalue ParmVar 0x55600dc39010 'parser' 'P'
|         `-DeclRefExpr 0x55600dc62ea8 <col:45> 'T' lvalue ParmVar 0x55600dc390b8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc39558 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55600dc392c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc394b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55600dc39370 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc393e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55600dc63058 <col:56, line:571:5>
|     `-ReturnStmt 0x55600dc63048 <line:570:9, col:48>
|       `-CallExpr 0x55600dc63010 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc62f40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc62fb0 <col:30> 'const char *' lvalue ParmVar 0x55600dc39370 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc62fd0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55600dc62ff0 <col:42> 'P' lvalue ParmVar 0x55600dc393e8 'parser' 'P'
|-FunctionTemplateDecl 0x55600dc398e8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55600dc395c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc39848 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55600dc39670 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc396f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc39768 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55600dc63228 <col:67, line:576:5>
|     |-CallExpr 0x55600dc631b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc63070 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55600dc630b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55600dc630c0 <col:39> 'const char *' lvalue ParmVar 0x55600dc39670 'keyword' 'const char *'
|     | |-BinaryOperator 0x55600dc63170 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55600dc63120 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55600dc630e0 <col:48> 'int' lvalue ParmVar 0x55600dc396f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55600dc63158 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55600dc63138 <col:56> 'const int' lvalue Var 0x55600dc2d000 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55600dc63190 <col:68> 'P' lvalue ParmVar 0x55600dc39768 'parser' 'P'
|     `-ReturnStmt 0x55600dc63218 <line:575:9, col:17>
|       `-UnaryOperator 0x55600dc63200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc631f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc39d38 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55600dc39958 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc399d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc39c98 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55600dc39a98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc39b10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc39bb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55600dc63398 <col:62, line:592:5>
|     `-ReturnStmt 0x55600dc63388 <line:591:9, col:51>
|       `-CallExpr 0x55600dc63348 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc63258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc632c8 <col:30> 'const char *' lvalue ParmVar 0x55600dc39a98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc632e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55600dc63308 <col:42> 'P' lvalue ParmVar 0x55600dc39b10 'parser' 'P'
|         `-DeclRefExpr 0x55600dc63328 <col:50> 'T' lvalue ParmVar 0x55600dc39bb8 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc3a218 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55600dc39da8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc39e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc3a178 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55600dc39ee8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc39f68 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc39fe0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3a088 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55600dc63590 <col:73, line:597:5>
|     |-CallExpr 0x55600dc63510 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc633b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55600dc633f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55600dc63400 <col:39> 'const char *' lvalue ParmVar 0x55600dc39ee8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55600dc634b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55600dc63460 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55600dc63420 <col:48> 'int' lvalue ParmVar 0x55600dc39f68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55600dc63498 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55600dc63478 <col:56> 'const int' lvalue Var 0x55600dc2d000 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55600dc634d0 <col:68> 'P' lvalue ParmVar 0x55600dc39fe0 'parser' 'P'
|     | `-DeclRefExpr 0x55600dc634f0 <col:76> 'T' lvalue ParmVar 0x55600dc3a088 'x' 'T &'
|     `-ReturnStmt 0x55600dc63580 <line:596:9, col:17>
|       `-UnaryOperator 0x55600dc63568 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc63558 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc3a7c8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55600dc3a290 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc3a308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc3a728 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55600dc3a3c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3a440 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3a600 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55600dc63700 <col:65, line:614:5>
|     `-ReturnStmt 0x55600dc636f0 <line:613:9, col:46>
|       `-CallExpr 0x55600dc636b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc635c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc63630 <col:25> 'const char *' lvalue ParmVar 0x55600dc3a3c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc63650 <col:34> 'int' 0
|         |-DeclRefExpr 0x55600dc63670 <col:37> 'P' lvalue ParmVar 0x55600dc3a440 'parser' 'P'
|         `-DeclRefExpr 0x55600dc63690 <col:45> 'Vector<T>' lvalue ParmVar 0x55600dc3a600 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55600dc3abf8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55600dc3a838 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc3ab58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55600dc3a8f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3aa40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55600dc63920 <col:55, line:618:5>
|     `-ReturnStmt 0x55600dc63910 <line:617:9, col:55>
|       `-CallExpr 0x55600dc638d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc63728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc63798 <col:25> 'const char *' lvalue ParmVar 0x55600dc3a8f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55600dc637b8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55600dc63890 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55600dc638b0 <col:54> 'Vector<T>' lvalue ParmVar 0x55600dc3aa40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55600dc3b1c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55600dc3ac60 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc3acd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc3b128 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55600dc3ad98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3ae18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3ae90 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3afe0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55600dc63b18 <col:76, line:623:5>
|     |-CallExpr 0x55600dc63a98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55600dc63938 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55600dc63978 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55600dc63988 <col:34> 'const char *' lvalue ParmVar 0x55600dc3ad98 'keyword' 'const char *'
|     | |-BinaryOperator 0x55600dc63a38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55600dc639e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55600dc639a8 <col:43> 'int' lvalue ParmVar 0x55600dc3ae18 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55600dc63a20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55600dc63a00 <col:51> 'const int' lvalue Var 0x55600dc2d000 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55600dc63a58 <col:63> 'P' lvalue ParmVar 0x55600dc3ae90 'parser' 'P'
|     | `-DeclRefExpr 0x55600dc63a78 <col:71> 'Vector<T>' lvalue ParmVar 0x55600dc3afe0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55600dc63b08 <line:622:9, col:17>
|       `-UnaryOperator 0x55600dc63af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc63ae0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc3b708 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55600dc3b240 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc3b2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc3b668 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55600dc3b378 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3b3f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3b540 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55600dc63d80 <col:66, line:627:5>
|     `-ReturnStmt 0x55600dc63d70 <line:626:9, col:59>
|       `-CallExpr 0x55600dc63d30 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55600dc63b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55600dc63bb8 <col:25> 'const char *' lvalue ParmVar 0x55600dc3b378 'keyword' 'const char *'
|         |-DeclRefExpr 0x55600dc63bd8 <col:34> 'int' lvalue ParmVar 0x55600dc3b3f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55600dc63cf0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55600dc63d10 <col:58> 'Vector<T>' lvalue ParmVar 0x55600dc3b540 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55600dc3b798 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55600dc63e00 <col:25, line:633:5>
|   `-ReturnStmt 0x55600dc63df0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55600dc63dd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55600dc63da8 <col:16> 'const bool' lvalue ->_status 0x55600dc4a288
|         `-CXXThisExpr 0x55600dc63d98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55600dc3b918 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55600dc3b850 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55600dc63ee8 <col:27, line:639:5>
|   |-BinaryOperator 0x55600dc63e90 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55600dc63e18 <col:9> 'bool' lvalue ParmVar 0x55600dc3b850 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55600dc63e78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55600dc63e48 <col:13> 'bool' lvalue ->_status 0x55600dc4a288
|   |     `-CXXThisExpr 0x55600dc63e38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55600dc63ed8 <line:638:9, col:17>
|     `-UnaryOperator 0x55600dc63ec0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc63eb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55600dc3ba98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55600dc3b9d8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55600dc63fd8 <col:39, line:644:5>
|   |-BinaryOperator 0x55600dc63f80 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55600dc63f08 <col:9> 'bool' lvalue ParmVar 0x55600dc3b9d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55600dc63f68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55600dc63f38 <col:13> 'const bool' lvalue ->_status 0x55600dc4a288
|   |     `-CXXThisExpr 0x55600dc63f28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55600dc63fc8 <line:643:9, col:17>
|     `-UnaryOperator 0x55600dc63fb0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc63fa0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55600dc3bb60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55600dc64080 <col:30, line:651:5>
|   `-ReturnStmt 0x55600dc64070 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55600dc64058 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55600dc64028 <col:16> 'bool' lvalue ->_read_status 0x55600dc25800
|         `-ImplicitCastExpr 0x55600dc64008 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55600dc63ff8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55600dc3bca8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55600dc3bc18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55600dc64188 <col:32, line:658:5>
|   |-BinaryOperator 0x55600dc64130 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55600dc64098 <col:9> 'bool' lvalue ParmVar 0x55600dc3bc18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55600dc64118 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55600dc640e8 <col:13> 'bool' lvalue ->_read_status 0x55600dc25800
|   |     `-ImplicitCastExpr 0x55600dc640c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55600dc640b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55600dc64178 <line:657:9, col:17>
|     `-UnaryOperator 0x55600dc64160 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc64150 <col:17> 'Args *' this
|-CXXMethodDecl 0x55600dc3bdf8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55600dc3bd68 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55600dc64298 <col:44, line:663:5>
|   |-BinaryOperator 0x55600dc64240 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55600dc641a8 <col:9> 'bool' lvalue ParmVar 0x55600dc3bd68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55600dc64228 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55600dc641f8 <col:13> 'bool' lvalue ->_read_status 0x55600dc25800
|   |     `-ImplicitCastExpr 0x55600dc641d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55600dc641c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55600dc64288 <line:662:9, col:17>
|     `-UnaryOperator 0x55600dc64270 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dc64260 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55600dc3bec0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55600dc3bf88 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55600dc3c050 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55600dc3c118 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55600dc3c428 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55600dc3c1b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc3c388 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55600dc3c298 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55600dc64660 <col:19, line:706:5>
|     `-IfStmt 0x55600dc64638 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55600dc64398 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55600dc64568 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55600dc64538 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55600dc644f8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55600dc643f0 <col:42> '<bound member function type>' ->simple_slot 0x55600dc5d760
|       |     | `-CXXThisExpr 0x55600dc643e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55600dc64498 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55600dc64440 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55600dbd7928 0x55600dbd6338 0x55600d9a0098
|       |     | `-DeclRefExpr 0x55600dc64420 <col:55> 'T' lvalue ParmVar 0x55600dc3c298 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55600dc644d8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55600dc64628 <line:705:13, col:34>
|         `-CallExpr 0x55600dc64600 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55600dc64588 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55600dc645e0 <col:33> 'T' lvalue ParmVar 0x55600dc3c298 'x' 'T &'
|-FunctionTemplateDecl 0x55600dc3c6f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55600dc3c488 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc3c658 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55600dc3c568 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55600dc64a40 <col:31, line:717:5>
|     |-DeclStmt 0x55600dc647a0 <line:713:9, col:23>
|     | `-VarDecl 0x55600dc64688 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55600dc64778 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55600dc64700 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55600dc64758 <col:21> 'T' lvalue ParmVar 0x55600dc3c568 'x' 'T &'
|     |-IfStmt 0x55600dc649f0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55600dc64898 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55600dc649d0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55600dc64970 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55600dc64900 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|     |   | `-DeclRefExpr 0x55600dc648e0 <col:14> 'T *' lvalue Var 0x55600dc64688 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55600dc649b0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55600dc64a28 <line:716:9, col:16>
|       `-DeclRefExpr 0x55600dc64a08 <col:16> 'T *' lvalue Var 0x55600dc64688 's' 'T *'
|-FunctionTemplateDecl 0x55600dc3cb08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55600dc3c758 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc3c7d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55600dc3ca68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55600dc3c8b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55600dc3c958 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55600dc64d50 <col:37, line:726:5>
|     |-IfStmt 0x55600dc64ce0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55600dc64d00 <line:723:13, col:26>
|     | | `-VarDecl 0x55600dc64aa8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55600dc64b98 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55600dc64b20 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55600dc64b78 <col:25> 'T' lvalue ParmVar 0x55600dc3c8b8 'x' 'T &'
|     | |-DeclRefExpr 0x55600dc64bc0 <col:16> 'T *' lvalue Var 0x55600dc64aa8 's' 'T *'
|     | `-BinaryOperator 0x55600dc64cc0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55600dc64c70 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55600dc64c00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|     |   | `-DeclRefExpr 0x55600dc64be0 <col:14> 'T *' lvalue Var 0x55600dc64aa8 's' 'T *'
|     |   `-DeclRefExpr 0x55600dc64ca0 <col:18> 'const V' lvalue ParmVar 0x55600dc3c958 'value' 'const V &'
|     `-ReturnStmt 0x55600dc64d40 <line:725:9, col:17>
|       `-UnaryOperator 0x55600dc64d28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55600dc64d18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55600dc3cf08 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55600dc3cb70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55600dc3ce68 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55600dc3cc20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3cca0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3cd48 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55600dc65b70 <col:65, line:737:5>
|     |-DeclStmt 0x55600dc64de8 <line:732:9, col:26>
|     | `-VarDecl 0x55600dc64d80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55600dc65b38 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55600dc65b58 <line:733:13, col:58>
|       | `-VarDecl 0x55600dc64e10 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55600dc64ff0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55600dc64fc0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55600dc64fa8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55600dc64f88 <col:26, col:58> 'String' (CXXTemporary 0x55600dc64f88)
|       |           `-CXXMemberCallExpr 0x55600dc64f18 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55600dc64e88 <col:26> '<bound member function type>' ->find 0x55600dc5cd78
|       |             | `-CXXThisExpr 0x55600dc64e78 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55600dc64f50 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc64eb8 <col:31> 'const char *' lvalue ParmVar 0x55600dc3cc20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55600dc64f68 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc64ed8 <col:40> 'int' lvalue ParmVar 0x55600dc3cca0 'flags' 'int'
|       |             `-DeclRefExpr 0x55600dc64ef8 <col:47> 'Args::Slot *' lvalue Var 0x55600dc64d80 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55600dc650a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55600dc65090 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55600dc65070 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55600dc65040 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |       `-ImplicitCastExpr 0x55600dc65028 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55600dc65008 <col:20> 'String' lvalue Var 0x55600dc64e10 'str' 'String'
|       `-CompoundStmt 0x55600dc65b18 <col:61, line:736:9>
|         |-DeclStmt 0x55600dc65560 <line:734:13, col:76>
|         | `-VarDecl 0x55600dc650f8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55600dc65530 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55600dc654a0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55600dc654e8 <col:60> 'T' lvalue ParmVar 0x55600dc3cd48 'variable' 'T &'
|         |     `-UnaryOperator 0x55600dc65518 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55600dc65508 <col:71> 'Args *' this
|         `-CallExpr 0x55600dc65ae8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55600dc65588 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|           | `-CXXThisExpr 0x55600dc65578 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55600dc65aa8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55600dc655b8 <col:23> 'T *' lvalue Var 0x55600dc650f8 's' 'T *'
|           | `-CallExpr 0x55600dc65a68 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55600dc65840 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55600dc65940 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55600dc65960 <col:86> 'String' lvalue Var 0x55600dc64e10 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55600dc65a10 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55600dc659a0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|           |   | `-DeclRefExpr 0x55600dc65980 <col:92> 'T *' lvalue Var 0x55600dc650f8 's' 'T *'
|           |   `-UnaryOperator 0x55600dc65a50 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55600dc65a40 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55600dc65ac8 <col:103> 'Args::Slot *' lvalue Var 0x55600dc64d80 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc3d458 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55600dc3cf78 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc3cff8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55600dc3d3b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55600dc3d0b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3d138 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3d1d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55600dc3d278 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55600dc66a10 <col:88, line:745:5>
|     |-DeclStmt 0x55600dc65c08 <line:741:9, col:26>
|     | `-VarDecl 0x55600dc65ba0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55600dc65e28 <line:742:9, col:55>
|     | `-VarDecl 0x55600dc65c30 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55600dc65e10 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55600dc65de0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55600dc65dc8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55600dc65da8 <col:22, col:54> 'String' (CXXTemporary 0x55600dc65da8)
|     |           `-CXXMemberCallExpr 0x55600dc65d38 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55600dc65ca8 <col:22> '<bound member function type>' ->find 0x55600dc5cd78
|     |             | `-CXXThisExpr 0x55600dc65c98 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55600dc65d70 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55600dc65cd8 <col:27> 'const char *' lvalue ParmVar 0x55600dc3d0b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55600dc65d88 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55600dc65cf8 <col:36> 'int' lvalue ParmVar 0x55600dc3d138 'flags' 'int'
|     |             `-DeclRefExpr 0x55600dc65d18 <col:43> 'Args::Slot *' lvalue Var 0x55600dc65ba0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55600dc66200 <line:743:9, col:72>
|     | `-VarDecl 0x55600dc65e78 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55600dc661d0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55600dc66140 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55600dc66188 <col:56> 'T' lvalue ParmVar 0x55600dc3d1d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55600dc661b8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55600dc661a8 <col:67> 'Args *' this
|     `-CallExpr 0x55600dc669e0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55600dc66228 <col:9> '<bound member function type>' ->postparse 0x55600dc5cf88
|       | `-CXXThisExpr 0x55600dc66218 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55600dc669a0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55600dc66258 <col:19> 'T *' lvalue Var 0x55600dc65e78 's' 'T *'
|       | `-ParenExpr 0x55600dc66980 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55600dc66950 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55600dc66938 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55600dc66920 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55600dc66900 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55600dc668d0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |     |       `-ImplicitCastExpr 0x55600dc668b8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55600dc66278 <col:25> 'String' lvalue Var 0x55600dc65c30 'str' 'String'
|       |     |-CallExpr 0x55600dc66728 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55600dc66500 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55600dc66600 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55600dc66620 <col:89> 'String' lvalue Var 0x55600dc65c30 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55600dc666d0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55600dc66660 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|       |     | | `-DeclRefExpr 0x55600dc66640 <col:95> 'T *' lvalue Var 0x55600dc65e78 's' 'T *'
|       |     | `-UnaryOperator 0x55600dc66710 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55600dc66700 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55600dc66898 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55600dc66878 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55600dc66848 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55600dc667f8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55600dc66788 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|       |         | | `-DeclRefExpr 0x55600dc66768 <col:109> 'T *' lvalue Var 0x55600dc65e78 's' 'T *'
|       |         | `-DeclRefExpr 0x55600dc66828 <col:113> 'const V' lvalue ParmVar 0x55600dc3d278 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55600dc66868 <col:120> 'bool' true
|       `-DeclRefExpr 0x55600dc669c0 <col:128> 'Args::Slot *' lvalue Var 0x55600dc65ba0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc3d988 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55600dc3d4d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc3d548 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc3d8e8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55600dc3d608 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3d688 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3d700 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3d7a8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55600dc67608 <col:75, line:754:5>
|     |-DeclStmt 0x55600dc66ab8 <line:749:9, col:26>
|     | `-VarDecl 0x55600dc66a50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55600dc675d0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55600dc675f0 <line:750:13, col:58>
|       | `-VarDecl 0x55600dc66ae0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55600dc66cc0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55600dc66c90 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55600dc66c78 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55600dc66c58 <col:26, col:58> 'String' (CXXTemporary 0x55600dc66c58)
|       |           `-CXXMemberCallExpr 0x55600dc66be8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55600dc66b58 <col:26> '<bound member function type>' ->find 0x55600dc5cd78
|       |             | `-CXXThisExpr 0x55600dc66b48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55600dc66c20 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc66b88 <col:31> 'const char *' lvalue ParmVar 0x55600dc3d608 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55600dc66c38 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc66ba8 <col:40> 'int' lvalue ParmVar 0x55600dc3d688 'flags' 'int'
|       |             `-DeclRefExpr 0x55600dc66bc8 <col:47> 'Args::Slot *' lvalue Var 0x55600dc66a50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55600dc66d78 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55600dc66d60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55600dc66d40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55600dc66d10 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |       `-ImplicitCastExpr 0x55600dc66cf8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55600dc66cd8 <col:20> 'String' lvalue Var 0x55600dc66ae0 'str' 'String'
|       `-CompoundStmt 0x55600dc675b0 <col:61, line:753:9>
|         |-DeclStmt 0x55600dc67150 <line:751:13, col:63>
|         | `-VarDecl 0x55600dc66dc8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55600dc67120 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55600dc67090 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55600dc670d8 <col:47> 'T' lvalue ParmVar 0x55600dc3d7a8 'variable' 'T &'
|         |     `-UnaryOperator 0x55600dc67108 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55600dc670f8 <col:58> 'Args *' this
|         `-CallExpr 0x55600dc67580 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55600dc67178 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|           | `-CXXThisExpr 0x55600dc67168 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55600dc67540 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55600dc671a8 <col:23> 'T *' lvalue Var 0x55600dc66dc8 's' 'T *'
|           | `-CallExpr 0x55600dc67500 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55600dc67390 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55600dc673d8 <col:56> 'P' lvalue ParmVar 0x55600dc3d700 'parser' 'P'
|           |   |-DeclRefExpr 0x55600dc673f8 <col:64> 'String' lvalue Var 0x55600dc66ae0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55600dc674a8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55600dc67438 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|           |   | `-DeclRefExpr 0x55600dc67418 <col:70> 'T *' lvalue Var 0x55600dc66dc8 's' 'T *'
|           |   `-UnaryOperator 0x55600dc674e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55600dc674d8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55600dc67560 <col:81> 'Args::Slot *' lvalue Var 0x55600dc66a50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc3dfe8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55600dc3da00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55600dc3da78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55600dc3daf8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55600dc3df48 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55600dc3dbc0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3dc40 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3dcb8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3dd58 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55600dc3ddf8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55600dc6a758 <col:98, line:762:5>
|     |-DeclStmt 0x55600dc676a0 <line:758:9, col:26>
|     | `-VarDecl 0x55600dc67638 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55600dc678c0 <line:759:9, col:55>
|     | `-VarDecl 0x55600dc676c8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55600dc678a8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55600dc67878 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55600dc67860 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55600dc67840 <col:22, col:54> 'String' (CXXTemporary 0x55600dc67840)
|     |           `-CXXMemberCallExpr 0x55600dc677d0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55600dc67740 <col:22> '<bound member function type>' ->find 0x55600dc5cd78
|     |             | `-CXXThisExpr 0x55600dc67730 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55600dc67808 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55600dc67770 <col:27> 'const char *' lvalue ParmVar 0x55600dc3dbc0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55600dc67820 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55600dc67790 <col:36> 'int' lvalue ParmVar 0x55600dc3dc40 'flags' 'int'
|     |             `-DeclRefExpr 0x55600dc677b0 <col:43> 'Args::Slot *' lvalue Var 0x55600dc67638 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55600dc67ce0 <line:760:9, col:59>
|     | `-VarDecl 0x55600dc67918 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55600dc67cb0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55600dc67c20 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55600dc67c68 <col:43> 'T' lvalue ParmVar 0x55600dc3dd58 'variable' 'T &'
|     |     `-UnaryOperator 0x55600dc67c98 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55600dc67c88 <col:54> 'Args *' this
|     `-CallExpr 0x55600dc6a728 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55600dc67d08 <col:9> '<bound member function type>' ->postparse 0x55600dc5cf88
|       | `-CXXThisExpr 0x55600dc67cf8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55600dc6a6e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55600dc67d38 <col:19> 'T *' lvalue Var 0x55600dc67918 's' 'T *'
|       | `-ParenExpr 0x55600dc6a6c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55600dc6a698 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55600dc6a680 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55600dc6a668 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55600dc6a648 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55600dc6a618 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |     |       `-ImplicitCastExpr 0x55600dc6a600 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55600dc67d58 <col:25> 'String' lvalue Var 0x55600dc676c8 'str' 'String'
|       |     |-CallExpr 0x55600dc6a470 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55600dc6a300 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55600dc6a348 <col:59> 'P' lvalue ParmVar 0x55600dc3dcb8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55600dc6a368 <col:67> 'String' lvalue Var 0x55600dc676c8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55600dc6a418 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55600dc6a3a8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|       |     | | `-DeclRefExpr 0x55600dc6a388 <col:73> 'T *' lvalue Var 0x55600dc67918 's' 'T *'
|       |     | `-UnaryOperator 0x55600dc6a458 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55600dc6a448 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55600dc6a5e0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55600dc6a5c0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55600dc6a590 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55600dc6a540 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55600dc6a4d0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|       |         | | `-DeclRefExpr 0x55600dc6a4b0 <col:87> 'T *' lvalue Var 0x55600dc67918 's' 'T *'
|       |         | `-DeclRefExpr 0x55600dc6a570 <col:91> 'const V' lvalue ParmVar 0x55600dc3ddf8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55600dc6a5b0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55600dc6a708 <col:106> 'Args::Slot *' lvalue Var 0x55600dc67638 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc47308 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55600dc3e068 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc3e0e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55600dc3e168 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55600dc47268 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55600dc3e230 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc3e2b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc3e328 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc3e3c8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55600dc47110 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55600dc6b738 <col:60, line:773:5>
|     |-DeclStmt 0x55600dc6a800 <line:767:9, col:26>
|     | `-VarDecl 0x55600dc6a798 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55600dc6b700 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55600dc6b720 <line:768:13, col:58>
|       | `-VarDecl 0x55600dc6a828 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55600dc6aa08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55600dc6a9d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55600dc6a9c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55600dc6a9a0 <col:26, col:58> 'String' (CXXTemporary 0x55600dc6a9a0)
|       |           `-CXXMemberCallExpr 0x55600dc6a930 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55600dc6a8a0 <col:26> '<bound member function type>' ->find 0x55600dc5cd78
|       |             | `-CXXThisExpr 0x55600dc6a890 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55600dc6a968 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc6a8d0 <col:31> 'const char *' lvalue ParmVar 0x55600dc3e230 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55600dc6a980 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc6a8f0 <col:40> 'int' lvalue ParmVar 0x55600dc3e2b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55600dc6a910 <col:47> 'Args::Slot *' lvalue Var 0x55600dc6a798 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55600dc6aac0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55600dc6aaa8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55600dc6aa88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55600dc6aa58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |       `-ImplicitCastExpr 0x55600dc6aa40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55600dc6aa20 <col:20> 'String' lvalue Var 0x55600dc6a828 'str' 'String'
|       `-CompoundStmt 0x55600dc6b6d8 <col:61, line:772:9>
|         |-DeclStmt 0x55600dc6ae00 <line:769:13, col:66>
|         | `-VarDecl 0x55600dc6ab18 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55600dc6add0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55600dc6ad40 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55600dc6ad88 <col:49> 'T1' lvalue ParmVar 0x55600dc3e3c8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55600dc6adb8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55600dc6ada8 <col:61> 'Args *' this
|         |-DeclStmt 0x55600dc6b170 <line:770:13, col:66>
|         | `-VarDecl 0x55600dc6ae88 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55600dc6b140 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55600dc6b0b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55600dc6b0f8 <col:49> 'T2' lvalue ParmVar 0x55600dc47110 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55600dc6b128 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55600dc6b118 <col:61> 'Args *' this
|         `-CallExpr 0x55600dc6b6a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55600dc6b198 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|           | `-CXXThisExpr 0x55600dc6b188 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55600dc6b668 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55600dc6b208 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55600dc6b1c8 <col:23> 'T1 *' lvalue Var 0x55600dc6ab18 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55600dc6b1e8 <col:29> 'T2 *' lvalue Var 0x55600dc6ae88 's2' 'T2 *'
|           | `-CallExpr 0x55600dc6b620 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55600dc6b3f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55600dc6b438 <col:63> 'P' lvalue ParmVar 0x55600dc3e328 'parser' 'P'
|           |   |-DeclRefExpr 0x55600dc6b458 <col:71> 'String' lvalue Var 0x55600dc6a828 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55600dc6b508 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55600dc6b498 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|           |   | `-DeclRefExpr 0x55600dc6b478 <col:77> 'T1 *' lvalue Var 0x55600dc6ab18 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55600dc6b5c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55600dc6b558 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|           |   | `-DeclRefExpr 0x55600dc6b538 <col:82> 'T2 *' lvalue Var 0x55600dc6ae88 's2' 'T2 *'
|           |   `-UnaryOperator 0x55600dc6b608 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55600dc6b5f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55600dc6b688 <col:94> 'Args::Slot *' lvalue Var 0x55600dc6a798 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc476f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55600dc47388 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc47658 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55600dc47440 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc474c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc47538 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55600dc6bc50 <col:67, line:780:5>
|     |-DeclStmt 0x55600dc6b7d0 <line:777:9, col:26>
|     | `-VarDecl 0x55600dc6b768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55600dc6bc18 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55600dc6bc38 <line:778:13, col:58>
|       | `-VarDecl 0x55600dc6b7f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55600dc6b9d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55600dc6b9a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55600dc6b990 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55600dc6b970 <col:26, col:58> 'String' (CXXTemporary 0x55600dc6b970)
|       |           `-CXXMemberCallExpr 0x55600dc6b900 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55600dc6b870 <col:26> '<bound member function type>' ->find 0x55600dc5cd78
|       |             | `-CXXThisExpr 0x55600dc6b860 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55600dc6b938 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc6b8a0 <col:31> 'const char *' lvalue ParmVar 0x55600dc47440 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55600dc6b950 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55600dc6b8c0 <col:40> 'int' lvalue ParmVar 0x55600dc474c0 'flags' 'int'
|       |             `-DeclRefExpr 0x55600dc6b8e0 <col:47> 'Args::Slot *' lvalue Var 0x55600dc6b768 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55600dc6ba90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55600dc6ba78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55600dc6ba58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55600dc6ba28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|       |       `-ImplicitCastExpr 0x55600dc6ba10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55600dc6b9f0 <col:20> 'String' lvalue Var 0x55600dc6b7f8 'str' 'String'
|       `-CallExpr 0x55600dc6bbe8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55600dc6bab8 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|         | `-CXXThisExpr 0x55600dc6baa8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55600dc6bb98 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55600dc6bb08 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55600dc6bae8 <col:23> 'P' lvalue ParmVar 0x55600dc47538 'parser' 'P'
|         | |-DeclRefExpr 0x55600dc6bb50 <col:36> 'String' lvalue Var 0x55600dc6b7f8 'str' 'String'
|         | `-UnaryOperator 0x55600dc6bb80 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55600dc6bb70 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55600dc6bbc8 <col:49> 'Args::Slot *' lvalue Var 0x55600dc6b768 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55600dc47a98 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55600dc47768 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55600dc479f8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55600dc47820 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc478a0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc47918 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55600dc6c5c0 <col:71, line:792:5>
|     |-DeclStmt 0x55600dc6bce8 <line:784:9, col:26>
|     | `-VarDecl 0x55600dc6bc80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55600dc6bdb8 <line:785:9, col:29>
|     | `-VarDecl 0x55600dc6bd18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55600dc6bda0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55600dc6bd80 <col:28> 'int' 1
|     |-WhileStmt 0x55600dc6c470 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55600dc6c490 <line:786:16, col:61>
|     | | `-VarDecl 0x55600dc6bde0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55600dc6bfc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55600dc6bf90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55600dc6bf78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55600dc6bf58 <col:29, col:61> 'String' (CXXTemporary 0x55600dc6bf58)
|     | |           `-CXXMemberCallExpr 0x55600dc6bee8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55600dc6be58 <col:29> '<bound member function type>' ->find 0x55600dc5cd78
|     | |             | `-CXXThisExpr 0x55600dc6be48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55600dc6bf20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6be88 <col:34> 'const char *' lvalue ParmVar 0x55600dc47820 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55600dc6bf38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6bea8 <col:43> 'int' lvalue ParmVar 0x55600dc478a0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55600dc6bec8 <col:50> 'Args::Slot *' lvalue Var 0x55600dc6bc80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55600dc6c078 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55600dc6c060 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55600dc6c040 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55600dc6c010 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|     | |       `-ImplicitCastExpr 0x55600dc6bff8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55600dc6bfd8 <col:23> 'String' lvalue Var 0x55600dc6bde0 'str' 'String'
|     | `-CompoundStmt 0x55600dc6c448 <col:64, line:790:9>
|     |   |-CallExpr 0x55600dc6c1d0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55600dc6c0a0 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|     |   | | `-CXXThisExpr 0x55600dc6c090 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55600dc6c180 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55600dc6c0f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55600dc6c0d0 <col:23> 'P' lvalue ParmVar 0x55600dc47918 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55600dc6c138 <col:36> 'String' lvalue Var 0x55600dc6bde0 'str' 'String'
|     |   | | `-UnaryOperator 0x55600dc6c168 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55600dc6c158 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55600dc6c1b0 <col:49> 'Args::Slot *' lvalue Var 0x55600dc6bc80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55600dc6c368 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55600dc6c200 <col:13> 'int' lvalue Var 0x55600dc6bd18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55600dc6c350 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55600dc6c330 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55600dc6c298 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55600dc6c278 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55600dc6c260 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55600dc6c220 <col:28> 'int' lvalue Var 0x55600dc6bd18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55600dc6c240 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55600dc6c318 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55600dc6c2e8 <col:49> 'bool' lvalue ->_read_status 0x55600dc25800
|     |   |         `-ImplicitCastExpr 0x55600dc6c2c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55600dc6c2b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55600dc6c418 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55600dc6c388 <col:13> 'int' lvalue ParmVar 0x55600dc478a0 'flags' 'int'
|     |     `-UnaryOperator 0x55600dc6c400 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55600dc6c3e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55600dc6c3c8 <col:23> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55600dc6c5a0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55600dc6c4d8 <col:9> 'bool' lvalue ->_read_status 0x55600dc25800
|       | `-ImplicitCastExpr 0x55600dc6c4b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55600dc6c4a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55600dc6c580 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55600dc6c560 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55600dc6c548 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55600dc6c508 <col:25> 'int' lvalue Var 0x55600dc6bd18 'read_status' 'int'
|           `-IntegerLiteral 0x55600dc6c528 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55600dc47f78 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55600dc47b08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc47b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc47ed8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55600dc47c48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc47cc8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc47d40 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc47de8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55600dc6d550 <col:84, line:805:5>
|     |-DeclStmt 0x55600dc6c668 <line:796:9, col:26>
|     | `-VarDecl 0x55600dc6c600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55600dc6c738 <line:797:9, col:29>
|     | `-VarDecl 0x55600dc6c698 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55600dc6c720 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55600dc6c700 <col:28> 'int' 1
|     |-DeclStmt 0x55600dc6ca70 <line:798:9, col:71>
|     | `-VarDecl 0x55600dc6c788 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55600dc6ca40 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55600dc6c9b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55600dc6c9f8 <col:55> 'T' lvalue ParmVar 0x55600dc47de8 'variable' 'T &'
|     |     `-UnaryOperator 0x55600dc6ca28 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55600dc6ca18 <col:66> 'Args *' this
|     |-WhileStmt 0x55600dc6d400 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55600dc6d420 <line:799:16, col:61>
|     | | `-VarDecl 0x55600dc6ca98 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55600dc6cc78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55600dc6cc48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55600dc6cc30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55600dc6cc10 <col:29, col:61> 'String' (CXXTemporary 0x55600dc6cc10)
|     | |           `-CXXMemberCallExpr 0x55600dc6cba0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55600dc6cb10 <col:29> '<bound member function type>' ->find 0x55600dc5cd78
|     | |             | `-CXXThisExpr 0x55600dc6cb00 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55600dc6cbd8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6cb40 <col:34> 'const char *' lvalue ParmVar 0x55600dc47c48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55600dc6cbf0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6cb60 <col:43> 'int' lvalue ParmVar 0x55600dc47cc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55600dc6cb80 <col:50> 'Args::Slot *' lvalue Var 0x55600dc6c600 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55600dc6cd30 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55600dc6cd18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55600dc6ccf8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55600dc6ccc8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|     | |       `-ImplicitCastExpr 0x55600dc6ccb0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55600dc6cc90 <col:23> 'String' lvalue Var 0x55600dc6ca98 'str' 'String'
|     | `-CompoundStmt 0x55600dc6d3d8 <col:64, line:803:9>
|     |   |-CallExpr 0x55600dc6d160 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55600dc6cd58 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|     |   | | `-CXXThisExpr 0x55600dc6cd48 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55600dc6d120 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55600dc6cd88 <col:23> 'T *' lvalue Var 0x55600dc6c788 's' 'T *'
|     |   | | `-CallExpr 0x55600dc6d0e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55600dc6cf70 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55600dc6cfb8 <col:56> 'P' lvalue ParmVar 0x55600dc47d40 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55600dc6cfd8 <col:64> 'String' lvalue Var 0x55600dc6ca98 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55600dc6d088 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55600dc6d018 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|     |   | |   | `-DeclRefExpr 0x55600dc6cff8 <col:70> 'T *' lvalue Var 0x55600dc6c788 's' 'T *'
|     |   | |   `-UnaryOperator 0x55600dc6d0c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55600dc6d0b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55600dc6d140 <col:81> 'Args::Slot *' lvalue Var 0x55600dc6c600 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55600dc6d2f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55600dc6d190 <col:13> 'int' lvalue Var 0x55600dc6c698 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55600dc6d2e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55600dc6d2c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55600dc6d228 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55600dc6d208 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55600dc6d1f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55600dc6d1b0 <col:28> 'int' lvalue Var 0x55600dc6c698 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55600dc6d1d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55600dc6d2a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55600dc6d278 <col:49> 'bool' lvalue ->_read_status 0x55600dc25800
|     |   |         `-ImplicitCastExpr 0x55600dc6d258 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55600dc6d248 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55600dc6d3a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55600dc6d318 <col:13> 'int' lvalue ParmVar 0x55600dc47cc8 'flags' 'int'
|     |     `-UnaryOperator 0x55600dc6d390 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55600dc6d378 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55600dc6d358 <col:23> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55600dc6d530 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55600dc6d468 <col:9> 'bool' lvalue ->_read_status 0x55600dc25800
|       | `-ImplicitCastExpr 0x55600dc6d448 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55600dc6d438 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55600dc6d510 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55600dc6d4f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55600dc6d4d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55600dc6d498 <col:25> 'int' lvalue Var 0x55600dc6c698 'read_status' 'int'
|           `-IntegerLiteral 0x55600dc6d4b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55600dc48558 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55600dc47ff0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55600dc48068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55600dc484b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55600dc48128 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55600dc481a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55600dc48220 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55600dc48370 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55600dc6e358 <col:87, line:821:5>
|     |-DeclStmt 0x55600dc6d600 <line:809:9, col:26>
|     | `-VarDecl 0x55600dc6d598 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55600dc6d6d0 <line:810:9, col:29>
|     | `-VarDecl 0x55600dc6d630 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55600dc6d6b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55600dc6d698 <col:28> 'int' 1
|     |-DeclStmt 0x55600dc6d918 <line:811:9, col:38>
|     | `-VarDecl 0x55600dc6d800 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55600dc6d8f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55600dc6d878 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55600dc6d8d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55600dc48370 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55600dc6e208 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55600dc6e228 <line:812:16, col:61>
|     | | `-VarDecl 0x55600dc6d940 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55600dc6db20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55600dc6daf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55600dc6dad8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55600dc6dab8 <col:29, col:61> 'String' (CXXTemporary 0x55600dc6dab8)
|     | |           `-CXXMemberCallExpr 0x55600dc6da48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55600dc6d9b8 <col:29> '<bound member function type>' ->find 0x55600dc5cd78
|     | |             | `-CXXThisExpr 0x55600dc6d9a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55600dc6da80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6d9e8 <col:34> 'const char *' lvalue ParmVar 0x55600dc48128 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55600dc6da98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55600dc6da08 <col:43> 'int' lvalue ParmVar 0x55600dc481a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55600dc6da28 <col:50> 'Args::Slot *' lvalue Var 0x55600dc6d598 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55600dc6dbd8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55600dc6dbc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55600dc6dba0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55600dc6db70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55600d963068
|     | |       `-ImplicitCastExpr 0x55600dc6db58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55600dc6db38 <col:23> 'String' lvalue Var 0x55600dc6d940 'str' 'String'
|     | `-CompoundStmt 0x55600dc6e1d0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55600dc6dc98 <line:813:13, col:23>
|     |   | `-VarDecl 0x55600dc6dc00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55600dc6dc78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55600dc6de18 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55600dc6dcc0 <col:13> '<bound member function type>' ->postparse 0x55600dc5cf88
|     |   | | `-CXXThisExpr 0x55600dc6dcb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55600dc6ddc0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55600dc6dd10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55600dc6dcf0 <col:23> 'P' lvalue ParmVar 0x55600dc48220 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55600dc6dd58 <col:36> 'String' lvalue Var 0x55600dc6d940 'str' 'String'
|     |   | | |-DeclRefExpr 0x55600dc6dd78 <col:41> 'T' lvalue Var 0x55600dc6dc00 'sx' 'T'
|     |   | | `-UnaryOperator 0x55600dc6dda8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55600dc6dd98 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55600dc6ddf8 <col:53> 'Args::Slot *' lvalue Var 0x55600dc6d598 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55600dc6df70 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55600dc6dea8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55600dc6de78 <col:17> 'bool' lvalue ->_read_status 0x55600dc25800
|     |   | |   `-ImplicitCastExpr 0x55600dc6de58 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55600dc6de48 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55600dc6df48 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55600dc6dee0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55600dc6dec0 <col:17> 'Vector<T> *' lvalue Var 0x55600dc6d800 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55600dc6df28 <col:30> 'T' lvalue Var 0x55600dc6dc00 'sx' 'T'
|     |   |-BinaryOperator 0x55600dc6e0f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55600dc6df88 <col:13> 'int' lvalue Var 0x55600dc6d630 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55600dc6e0d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55600dc6e0b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55600dc6e020 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55600dc6e000 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55600dc6dfe8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55600dc6dfa8 <col:28> 'int' lvalue Var 0x55600dc6d630 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55600dc6dfc8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55600dc6e0a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55600dc6e070 <col:49> 'bool' lvalue ->_read_status 0x55600dc25800
|     |   |         `-ImplicitCastExpr 0x55600dc6e050 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55600dc6e040 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55600dc6e1a0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55600dc6e110 <col:13> 'int' lvalue ParmVar 0x55600dc481a8 'flags' 'int'
|     |     `-UnaryOperator 0x55600dc6e188 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55600dc6e170 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55600dc6e150 <col:23> 'const int' lvalue Var 0x55600dc2cd18 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55600dc6e338 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55600dc6e270 <col:9> 'bool' lvalue ->_read_status 0x55600dc25800
|       | `-ImplicitCastExpr 0x55600dc6e250 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55600dc6e240 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55600dc6e318 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55600dc6e2f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55600dc6e2e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55600dc6e2a0 <col:25> 'int' lvalue Var 0x55600dc6d630 'read_status' 'int'
|           `-IntegerLiteral 0x55600dc6e2c0 <col:40> 'int' 1
|-AccessSpecDecl 0x55600dc485d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55600dc485f8 prev 0x55600dc2b050 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55600dc486f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55600dc487e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55600dc6e390 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55600dc488d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55600dc6e3a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55600dc489d0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55600dc48a80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55600dc48b28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55600dc48b28
| | `-ParmVarDecl 0x55600dc48c38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55600dc493f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55600dc493f8
|   `-ParmVarDecl 0x55600dc49508 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55600dc48ca8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55600dc48e08 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55600dc49000 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55600dc48eb0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55600dc48f28 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55600dc6e580 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55600dc492b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55600dc6e3f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55600dc6e3b0 <col:20> 'void *' lvalue ParmVar 0x55600dc48eb0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55600dc49320 '_slot' 'char *'
| | | `-CXXNewExpr 0x55600dc6e478 <col:32, col:45> 'char *' array Function 0x55600d785cd8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55600dc6e460 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55600dc6e430 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55600dc48f28 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55600dc49380 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55600dc6e540 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55600dc6e500 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55600dc48f28 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55600dc6e600 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55600dc49100 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55600dc488d0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55600dc6e688 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55600dc6e668 <line:840:13, col:22> 'void' array Function 0x55600d786038 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55600dc6e650 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55600dc6e620 <col:22> 'char *' lvalue ->_slot 0x55600dc49320
| |         `-CXXThisExpr 0x55600dc6e610 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55600dc49200 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55600dc489d0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55600dc6e878 <col:22, line:844:9>
| |   `-CallExpr 0x55600dc6e7e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55600dc6e7c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55600dc6e7a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55600d891ab8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55600dc6e818 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55600dc6e6f8 <col:20> 'void *' lvalue ->_ptr 0x55600dc492b8
| |     |   `-CXXThisExpr 0x55600dc6e6e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55600dc6e848 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55600dc6e830 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55600dc6e738 <col:26> 'char *' lvalue ->_slot 0x55600dc49320
| |     |     `-CXXThisExpr 0x55600dc6e728 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55600dc6e860 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55600dc6e778 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55600dc49380
| |         `-CXXThisExpr 0x55600dc6e768 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55600dc492b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55600dc49320 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55600dc49380 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55600dc49578 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55600dc49578
| | `-ParmVarDecl 0x55600dc49688 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55600dc49728 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55600dc49728
|   `-ParmVarDecl 0x55600dc49838 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55600dc499d8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55600dc498a8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55600dc49948 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55600dc49c70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55600dc49e68 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55600dc49d38 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55600dc49fe8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55600dc6e8b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55600dc6e890 <col:20> 'T *' lvalue ParmVar 0x55600dc49d38 'ptr' 'T *'
|   | `-CompoundStmt 0x55600dc6e900 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55600dc49f38 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55600dc489d0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55600dc6eab0 <col:22, line:857:9>
|   |   `-CallExpr 0x55600dc6ea80 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55600dc6e910 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55600d94a1e8 0x55600d8f4518
|   |     |-CXXOperatorCallExpr 0x55600dc6ea10 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55600dc6e9a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55600db57198 0x55600db56db8 0x55600db569e8 0x55600db56608 0x55600db56228 0x55600db55e58
|   |     | `-MemberExpr 0x55600dc6e970 <col:29> 'T *' lvalue ->_ptr 0x55600dc49fe8
|   |     |   `-CXXThisExpr 0x55600dc6e960 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55600dc6ea50 <col:35> 'T' lvalue ->_slot 0x55600dc4a048
|   |       `-CXXThisExpr 0x55600dc6ea40 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55600dc49fe8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55600dc4a048 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55600dc4a0b0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55600dc4a1b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55600dc4a200 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600dc4a190 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55600dc4a170 <col:31> 'int' 48
|-FieldDecl 0x55600dc4a228 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55600dc4a288 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55600dc4a2e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55600dc4a420 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55600dc5c620 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55600dc5c680 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55600dc5c730 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55600dc5c958 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55600dc5c860 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55600dc5caa8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55600dc5ca18 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55600dc5cd78 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55600dc5cb68 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55600dc5cbe8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55600dc5cc90 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55600dc5cf88 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55600dc5ce40 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55600dc5ceb8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55600dc5d058 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55600dc5d1a8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55600dc5d110 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55600dc5d538 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55600dc5d268 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55600dc5d2e8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55600dc5d390 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55600dc5d448 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55600dc5d760 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55600dc5d610 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55600dc5d688 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55600dc5da78 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55600dc5d810 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55600dc5d9d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55600dc5d8e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d952f10 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600d953028 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55600d9530b8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55600d953188 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55600d953270 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55600d953488 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55600d953330 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d953638 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55600d953540 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55600d953780 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55600d9536f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55600d9538c8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55600d953838 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d953a10 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55600d953980 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d953ad8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55600d953c20 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55600d953b90 <col:28> col:31 'int'
|-CXXMethodDecl 0x55600d953ce8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55600d953e30 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55600d953da0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55600d953fa8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55600d953ee8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d9540f0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55600d954060 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d9541b8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55600d954378 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55600d954268 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55600d9542e0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d9545c8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55600d954438 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600d9544b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55600d954678 <col:86> "" ""
|-CXXMethodDecl 0x55600d9548e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55600d954758 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55600d9547d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d954a98 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55600d9549a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55600d954c48 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55600d954b50 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55600d954f18 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55600d954d00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55600d954d78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55600d954df0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d9551f8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55600d954fe0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55600d955058 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600d9550d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55600d9552b0 <col:115> "" ""
|-AccessSpecDecl 0x55600d955320 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55600d955358 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600d956870 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55600d956870
| `-ParmVarDecl 0x55600d956978 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55600d956a18 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55600d956a18
| `-ParmVarDecl 0x55600d956b28 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55600d98c158 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55600db7df50 <col:7>
|-CXXConstructorDecl 0x55600d98c230 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55600d98c230
| `-ParmVarDecl 0x55600d98c348 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55600d98c3b8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55600d98c3b8
| `-ParmVarDecl 0x55600d98c4c8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55600db80950 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600db6caf8 prev 0x55600db61d00 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600db6cbf0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55600db6cce0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55600db6ce08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55600db6cf88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55600db6d108 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55600db6d288 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55600db7e0b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55600db7e928 <col:11>
|-CXXDestructorDecl 0x55600db7e190 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55600db7e2c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55600db7e2c8
| `-ParmVarDecl 0x55600db7e3d8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55600db7e478 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55600db7e478
| `-ParmVarDecl 0x55600db7e588 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55600db81348 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db81458 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55600db816d8 <col:11>
|   `-ReturnStmt 0x55600db816c8 <col:11>
|     `-UnaryOperator 0x55600db816b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600db816a0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55600db814c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55600db814c8
  `-ParmVarDecl 0x55600db815d8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600db6d2f0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600db6d408 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55600db6d4a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55600db6d510 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55600db6d578 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55600db6d5e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55600db6d640 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55600db6d700 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55600db6d760 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55600db6d7c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55600db7dfc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55600db6d4a8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55600db7e938 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55600db7e990 <col:12>
|-CXXConstructorDecl 0x55600db7e5f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55600db7e5f8
| `-ParmVarDecl 0x55600db7e708 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55600db7e7a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55600db7e7a8
| `-ParmVarDecl 0x55600db7e8b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55600db80a30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600db5b410 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55600db5b528 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55600db5b5b8 <col:16, col:22> col:16 public
|-EnumDecl 0x55600db5b5e0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55600db5b6e0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55600db5b7c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db5b6c0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55600db5b6a0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55600db5b770 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55600db5b7d8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db5b750 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55600db5b730 <col:22> 'int' 64
|-CXXMethodDecl 0x55600db5bb18 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55600db5b800 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600db5b880 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55600db5b8f8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600db5b970 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5bbd8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55600db5bdd8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55600db5bc50 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55600db5bcc8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5be88 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55600db5bfe8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55600db5bef8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5c090 <col:72> warn_unused_result ""
|-TypedefDecl 0x55600db5c3f0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55600db5c380 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55600db5c320 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55600db5c2e0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55600d6324e0 'void'
|       |-PointerType 0x55600d8db7b0 'unsigned char *'
|       | `-BuiltinType 0x55600d6325e0 'unsigned char'
|       |-TypedefType 0x55600d6d7d80 'size_t' sugar
|       | |-Typedef 0x55600d6a2be0 'size_t'
|       | `-BuiltinType 0x55600d632640 'unsigned long'
|       `-PointerType 0x55600d632ce0 'void *'
|         `-BuiltinType 0x55600d6324e0 'void'
|-CXXMethodDecl 0x55600db5c868 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55600db5c460 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55600db5c4d8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600db5c570 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55600db5c5f0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55600db76f60 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55600db76f48 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55600db76f10 <col:58> 'int' 0
| |-ParmVarDecl 0x55600db5c670 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55600db76f88 <col:76> 'int' 0
| |-ParmVarDecl 0x55600db5c6f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55600db76fa8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55600db5c938 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55600db5c9b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55600db5ca78 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55600db5cb18 <col:20>
| `-OptimizeNoneAttr 0x55600db5cb70 <col:30>
|-CXXMethodDecl 0x55600db5cbe8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55600db5cc88 <col:20>
| `-OptimizeNoneAttr 0x55600db5cce0 <col:30>
|-CXXMethodDecl 0x55600db5cd58 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55600db5cdf8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55600db5cea8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55600db5cf48 <col:20>
| |-OptimizeNoneAttr 0x55600db5cfa0 <col:30>
| `-WarnUnusedResultAttr 0x55600db5cfc8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55600db5d020 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55600db5d0c0 <col:20>
| `-OptimizeNoneAttr 0x55600db5d118 <col:30>
|-CXXMethodDecl 0x55600db5d168 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55600db5d208 <col:20>
| `-OptimizeNoneAttr 0x55600db5d260 <col:30>
|-CXXMethodDecl 0x55600db5d2a8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55600db5d348 <col:20>
| `-OptimizeNoneAttr 0x55600db5d3a0 <col:30>
|-CXXMethodDecl 0x55600db5d3e8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db5d4a8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db5d570 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55600db5d638 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55600db5d6f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db5d818 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55600db77070 <col:54, line:99:5>
|   `-ReturnStmt 0x55600db77060 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55600db77048 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55600db77018 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55600db6daf8
|         `-CXXThisExpr 0x55600db77008 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55600db5d9b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55600db5d8c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55600db77120 <col:67, line:103:5>
|   `-BinaryOperator 0x55600db77100 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55600db77098 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55600db6daf8
|     | `-CXXThisExpr 0x55600db77088 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55600db770e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55600db770c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55600db5d8c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55600db5dab0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55600db771a0 <col:33, line:107:5>
|   `-ReturnStmt 0x55600db77190 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55600db77178 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55600db77148 <col:16> 'void *' lvalue ->_destructor_argument 0x55600db6db60
|         `-CXXThisExpr 0x55600db77138 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55600db5db70 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55600db777d0 <col:25, line:113:5>
|   |-ParenExpr 0x55600db77518 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55600db774e8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55600db77258 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55600db77230 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55600db771f8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55600db771c8 <col:24> '<bound member function type>' ->shared 0x55600db5cbe8
|   |   |       `-ImplicitCastExpr 0x55600db77218 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55600db771b8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55600db772b8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db77298 <col:42> 'int' 0
|   |   `-CallExpr 0x55600db77448 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55600db77430 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db77410 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db77488 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db77328 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55600db774a0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db77350 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db774b8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db77388 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55600db774d0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db773f8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db773e0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db773a8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55600db77718 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55600db77548 <col:2> 'unsigned char *' lvalue ->_head 0x55600db6d900
|   | | `-CXXThisExpr 0x55600db77538 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55600db77700 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55600db776e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55600db77588 <col:10> 'unsigned char *' lvalue ->_data 0x55600db6d968
|   |     | `-CXXThisExpr 0x55600db77578 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55600db776c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55600db776a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55600db775c8 <col:18> 'unsigned char *' lvalue ->_tail 0x55600db6d9d0
|   |         | `-CXXThisExpr 0x55600db775b8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55600db77690 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55600db77670 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55600db77608 <col:26> 'unsigned char *' lvalue ->_end 0x55600db6da38
|   |             | `-CXXThisExpr 0x55600db775f8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55600db77658 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55600db77638 <col:33> 'int' 0
|   `-BinaryOperator 0x55600db777b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55600db77748 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55600db6daf8
|     | `-CXXThisExpr 0x55600db77738 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55600db77798 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55600db77778 <col:16> 'int' 0
|-CXXMethodDecl 0x55600db5dcb0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55600db5dc20 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db5dd58 <col:20>
| |-OptimizeNoneAttr 0x55600db5ddb0 <col:30>
| `-WarnUnusedResultAttr 0x55600db5ddd8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55600db5dea8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55600db5de18 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db5df50 <col:20>
| |-OptimizeNoneAttr 0x55600db5dfa8 <col:30>
| `-WarnUnusedResultAttr 0x55600db5dfd0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55600db5e108 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55600db5e010 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5e1b0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55600db5e2b0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55600db5e220 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db5e358 <col:20>
| `-OptimizeNoneAttr 0x55600db5e3b0 <col:30>
|-CXXMethodDecl 0x55600db5e478 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55600db5e3e8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5e520 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55600db5e620 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55600db5e590 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55600db5e6c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55600db5e7c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55600db5e738 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db5e870 <col:20>
| `-OptimizeNoneAttr 0x55600db5e8c8 <col:30>
|-CXXMethodDecl 0x55600db5ea58 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55600db5e908 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55600db5e980 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55600db76fc8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55600db5eb08 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55600db5ed08 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55600db5eb80 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55600db5ebf8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db5ef18 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55600db5edc8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55600db5ee40 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db5f128 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55600db5efd8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55600db5f058 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55600db76fd8 <col:39> 'int' 0
|-CXXMethodDecl 0x55600db5f1f8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55600db5f2c0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55600db5f388 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55600db5f448 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db5f510 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55600db5f658 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55600db5f5c8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55600db5f828 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55600db5f718 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55600db5f790 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db5f8f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55600db5f9b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55600db5fa58 <col:20>
| `-OptimizeNoneAttr 0x55600db5fab0 <col:30>
|-CXXMethodDecl 0x55600db5fb00 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55600db5fba0 <col:20>
| `-OptimizeNoneAttr 0x55600db5fbf8 <col:30>
|-CXXMethodDecl 0x55600db5fc48 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55600db5fd08 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db5fdd0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55600db5fe70 <col:20>
| `-OptimizeNoneAttr 0x55600db5fec8 <col:30>
|-CXXMethodDecl 0x55600db60018 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55600db5ff08 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55600db5ff80 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db60168 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55600db600d8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db60240 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55600db60300 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55600db603a0 <col:20>
| `-OptimizeNoneAttr 0x55600db603f8 <col:30>
|-CXXMethodDecl 0x55600db60448 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55600db604e8 <col:20>
| `-OptimizeNoneAttr 0x55600db60540 <col:30>
|-CXXMethodDecl 0x55600db60590 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55600db60658 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55600db606f8 <col:20>
| `-OptimizeNoneAttr 0x55600db60750 <col:30>
|-CXXMethodDecl 0x55600db60798 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55600db608b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55600db60a28 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55600db60968 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55600db60b18 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55600db60bb8 <col:20>
| `-OptimizeNoneAttr 0x55600db60c10 <col:30>
|-CXXMethodDecl 0x55600db60c60 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55600db60d20 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db60f58 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55600db60dd0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55600db60e48 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db61008 <col:20>
| `-OptimizeNoneAttr 0x55600db61060 <col:30>
|-CXXMethodDecl 0x55600db61108 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55600db611a8 <col:20>
| `-OptimizeNoneAttr 0x55600db61200 <col:30>
|-CXXMethodDecl 0x55600db61250 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55600db612f0 <col:20>
| `-OptimizeNoneAttr 0x55600db61348 <col:30>
|-CXXMethodDecl 0x55600db61390 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55600db61430 <col:20>
| `-OptimizeNoneAttr 0x55600db61488 <col:30>
|-CXXMethodDecl 0x55600db61588 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55600db614c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55600db61630 <col:20>
| `-OptimizeNoneAttr 0x55600db61688 <col:30>
|-CXXMethodDecl 0x55600db61848 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55600db616c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55600db61738 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db618f8 <col:20>
| `-OptimizeNoneAttr 0x55600db61950 <col:30>
|-CXXMethodDecl 0x55600db619f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55600db61b18 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55600db61c38 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55600db61cd8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55600db61d00 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55600db61e28 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55600db61ec8 <col:20>
| `-OptimizeNoneAttr 0x55600db61f20 <col:30>
|-CXXMethodDecl 0x55600db61fc8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55600db62068 <col:20>
| `-OptimizeNoneAttr 0x55600db620c0 <col:30>
|-AccessSpecDecl 0x55600db620e8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55600db62110 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55600db62210 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55600db62260 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db621f0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55600db621d0 <col:14> 'int' 48
|-CXXMethodDecl 0x55600db622c8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55600db62368 <col:20>
| `-OptimizeNoneAttr 0x55600db623c0 <col:30>
|-CXXMethodDecl 0x55600db62438 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55600db624d8 <col:20>
| `-OptimizeNoneAttr 0x55600db62530 <col:30>
|-CXXMethodDecl 0x55600db625f8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55600db62568 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55600db62798 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55600db62938 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55600db62848 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55600db629e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55600db62ae0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62e90 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62ac0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55600db62aa0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55600db62b70 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62ea8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62b50 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55600db62b30 <col:14> 'int' 1
| |-EnumConstantDecl 0x55600db62c00 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62ec0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62be0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55600db62bc0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55600db62c90 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62ed8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62c70 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55600db62c50 <col:14> 'int' 3
| |-EnumConstantDecl 0x55600db62d20 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62ef0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62d00 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55600db62ce0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55600db62db0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55600db62f08 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db62d90 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55600db62d70 <col:13> 'int' 5
| `-EnumConstantDecl 0x55600db62e40 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55600db62f20 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db62e20 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55600db62e00 <col:14> 'int' 6
|-CXXMethodDecl 0x55600db62f88 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55600db63028 <col:20>
| `-OptimizeNoneAttr 0x55600db63080 <col:30>
|-CXXMethodDecl 0x55600db63178 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55600db630b8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55600db63220 <col:20>
| `-OptimizeNoneAttr 0x55600db63278 <col:30>
|-CXXMethodDecl 0x55600db632e8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55600db63410 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55600db63588 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55600db634c0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55600db63650 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55600db63718 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55600db63858 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55600db637c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55600db63900 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55600db63a00 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55600db63c00 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db639e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55600db639c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55600db63a90 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55600db63c18 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db63a70 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55600db63a50 <col:45> 'int' 4
| |-EnumConstantDecl 0x55600db63b20 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55600db63c30 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db63b00 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55600db63ae0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55600db63bb0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55600db63c48 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db63b90 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55600db63b70 <col:47> 'int' 16
|-CXXMethodDecl 0x55600db63ca8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55600db63e18 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55600db63d58 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55600db63ec0 <col:20>
| `-OptimizeNoneAttr 0x55600db63f18 <col:30>
|-CXXMethodDecl 0x55600db63f68 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55600db778f0 <col:18, col:36>
|   `-ReturnStmt 0x55600db778e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55600db778c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55600db778a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55600db77878 <col:27> '<bound member function type>' ->xanno 0x55600db61fc8
|           `-CXXThisExpr 0x55600db77868 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55600db64060 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55600db77a00 <col:30, col:48>
|   `-ReturnStmt 0x55600db779f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55600db779d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55600db779b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55600db77988 <col:39> '<bound member function type>' ->xanno 0x55600db61e28
|           `-CXXThisExpr 0x55600db77978 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55600db64148 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55600db77b98 <col:24, col:50>
|   `-ReturnStmt 0x55600db77b88 <col:26, col:47>
|     `-UnaryOperator 0x55600db77b70 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600db77b50 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55600db77b38 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600db77ae8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55600db6ce08
|         |   `-CXXMemberCallExpr 0x55600db77ac8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55600db77a98 <col:34> '<bound member function type>' ->xanno 0x55600db61fc8
|         |       `-CXXThisExpr 0x55600db77a88 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55600db77b18 <col:46> 'int' 0
|-CXXMethodDecl 0x55600db64250 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55600db77d68 <col:36, col:62>
|   `-ReturnStmt 0x55600db77d58 <col:38, col:59>
|     `-UnaryOperator 0x55600db77d40 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600db77d20 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55600db77d08 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600db77c80 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55600db6ce08
|         |   `-CXXMemberCallExpr 0x55600db77c60 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55600db77c30 <col:46> '<bound member function type>' ->xanno 0x55600db61e28
|         |       `-CXXThisExpr 0x55600db77c20 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55600db77cb0 <col:58> 'int' 0
|-CXXMethodDecl 0x55600db64368 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55600db77f00 <col:26, col:53>
|   `-ReturnStmt 0x55600db77ef0 <col:28, col:50>
|     `-UnaryOperator 0x55600db77ed8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600db77eb8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55600db77ea0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600db77e50 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55600db6d108
|         |   `-CXXMemberCallExpr 0x55600db77e30 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55600db77e00 <col:36> '<bound member function type>' ->xanno 0x55600db61fc8
|         |       `-CXXThisExpr 0x55600db77df0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55600db77e80 <col:49> 'int' 0
|-CXXMethodDecl 0x55600db64488 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55600db780d8 <col:38, col:65>
|   `-ReturnStmt 0x55600db780c8 <col:40, col:62>
|     `-UnaryOperator 0x55600db780b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600db78090 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55600db78078 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600db77fe8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55600db6d108
|         |   `-CXXMemberCallExpr 0x55600db77fc8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55600db77f98 <col:48> '<bound member function type>' ->xanno 0x55600db61e28
|         |       `-CXXThisExpr 0x55600db77f88 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55600db78018 <col:61> 'int' 0
|-CXXMethodDecl 0x55600db64638 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55600db64540 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55600db787a8 <col:34, line:463:5>
|   |-ParenExpr 0x55600db785f0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55600db785c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55600db78228 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db781f8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db78148 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db78130 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db780f0 <col:23> 'int' lvalue ParmVar 0x55600db64540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db78110 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db781d8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db781a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db78168 <col:33> 'int' lvalue ParmVar 0x55600db64540 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55600db781c0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55600db78188 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55600db78288 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db78268 <col:56> 'int' 0
|   |   `-CallExpr 0x55600db78520 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55600db78508 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db784e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db78560 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db78378 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55600db78578 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db783a8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db78590 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db783e0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55600db785a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db784d0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db784b8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db78478 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55600db78798 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55600db78780 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55600db78760 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55600db78730 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600db786e0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55600db6ce08
|         |   `-CXXMemberCallExpr 0x55600db786c0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55600db78690 <col:9> '<bound member function type>' ->xanno 0x55600db61e28
|         |       `-CXXThisExpr 0x55600db78680 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55600db78748 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55600db78710 <col:21> 'int' lvalue ParmVar 0x55600db64540 'i' 'int'
|-CXXMethodDecl 0x55600db64888 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55600db646f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55600db64770 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55600db78e38 <col:40, line:472:5>
|   |-ParenExpr 0x55600db78c50 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55600db78c20 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55600db78900 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db788d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db78820 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db78808 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db787c8 <col:23> 'int' lvalue ParmVar 0x55600db646f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db787e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db788b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db78880 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db78840 <col:33> 'int' lvalue ParmVar 0x55600db646f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55600db78898 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55600db78860 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55600db78960 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db78940 <col:56> 'int' 0
|   |   `-CallExpr 0x55600db78b80 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55600db78b68 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db78b48 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db78bc0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db789d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55600db78bd8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db78a00 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db78bf0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db78a38 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55600db78c08 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db78b30 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db78b18 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db78ad8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55600db78e18 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55600db78dc0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55600db78d90 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55600db78d40 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55600db6ce08
|     | |   `-CXXMemberCallExpr 0x55600db78d20 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55600db78cf0 <col:2> '<bound member function type>' ->xanno 0x55600db61fc8
|     | |       `-CXXThisExpr 0x55600db78ce0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55600db78da8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55600db78d70 <col:14> 'int' lvalue ParmVar 0x55600db646f8 'i' 'int'
|     `-ImplicitCastExpr 0x55600db78e00 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55600db78de0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55600db64770 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55600db64a48 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55600db64950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55600db795b8 <col:36, line:485:5>
|   |-ParenExpr 0x55600db79320 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db792f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db78fd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db78fa0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db78eb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db78e98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db78e58 <col:23> 'int' lvalue ParmVar 0x55600db64950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db78e78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db78f80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db78f68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db78ed0 <col:33> 'int' lvalue ParmVar 0x55600db64950 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db78f48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db78f30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db78ef0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db78f10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55600db79030 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db79010 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db79250 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db79238 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db79218 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db79290 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db790a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55600db792a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db790d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db792c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db79110 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55600db792d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db79200 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db791e8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db791a8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55600db795a8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55600db79590 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55600db79578 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db79548 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55600db794e8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db794b8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db79430 <col:61, col:70> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db79410 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db793e0 <col:61> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db793d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db794d0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db79460 <col:74> 'int' lvalue ParmVar 0x55600db64950 'i' 'int'
|-CXXMethodDecl 0x55600db64c98 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55600db64b08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55600db64b80 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55600db79d08 <col:42, line:500:5>
|   |-ParenExpr 0x55600db79aa0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db79a70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db79750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db79720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db79630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db79618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db795d8 <col:23> 'int' lvalue ParmVar 0x55600db64b08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db795f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db79700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db796e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db79650 <col:33> 'int' lvalue ParmVar 0x55600db64b08 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db796c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db796b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db79670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db79690 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55600db797b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db79790 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db799d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db799b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db79998 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db79a10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db79820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55600db79a28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db79858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db79a40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db79890 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55600db79a58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db79980 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db79968 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db79928 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55600db79ce8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55600db79c98 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55600db79c68 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55600db79c10 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55600db79be0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55600db79b90 <col:48, col:57> 'char [48]' lvalue ->c 0x55600db6cce0
|     |     |   `-CXXMemberCallExpr 0x55600db79b70 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55600db79b40 <col:48> '<bound member function type>' ->xanno 0x55600db61fc8
|     |     |       `-CXXThisExpr 0x55600db79b30 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55600db79bf8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55600db79bc0 <col:61> 'int' lvalue ParmVar 0x55600db64b08 'i' 'int'
|     `-ImplicitCastExpr 0x55600db79cd0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55600db79cb0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55600db64b80 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55600db64e58 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55600db64d60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55600db7a468 <col:35, line:513:5>
|   |-ParenExpr 0x55600db7a178 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7a148 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db79ea0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db79e70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db79d80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db79d68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db79d28 <col:23> 'int' lvalue ParmVar 0x55600db64d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db79d48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db79e50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db79e38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db79da0 <col:33> 'int' lvalue ParmVar 0x55600db64d60 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db79e18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db79e00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db79dc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db79de0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55600db79f00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db79ee0 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7a0a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7a090 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7a070 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7a0e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db79f70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55600db7a100 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db79fa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7a118 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db79fe0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55600db7a130 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7a058 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7a040 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7a000 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55600db7a458 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55600db7a440 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55600db7a428 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db7a3f8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55600db7a370 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db7a340 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db7a2f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db7a2d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db7a2a0 <col:60> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db7a290 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db7a358 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db7a320 <col:73> 'int' lvalue ParmVar 0x55600db64d60 'i' 'int'
|-CXXMethodDecl 0x55600db650a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55600db64f18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55600db64f90 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55600db7ab88 <col:41, line:528:5>
|   |-ParenExpr 0x55600db7a910 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7a8e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7a600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7a5d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7a4e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7a4c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7a488 <col:23> 'int' lvalue ParmVar 0x55600db64f18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7a4a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7a5b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7a598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7a500 <col:33> 'int' lvalue ParmVar 0x55600db64f18 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7a578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7a560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7a520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7a540 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55600db7a660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7a640 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7a840 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7a828 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7a808 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7a880 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7a6d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55600db7a898 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7a708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7a8b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7a740 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55600db7a8c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7a7f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7a7d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7a798 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55600db7ab68 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55600db7ab18 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55600db7aae8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55600db7aa90 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55600db7aa50 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55600db7aa00 <col:47, col:56> 'char [48]' lvalue ->c 0x55600db6cce0
|     |     |   `-CXXMemberCallExpr 0x55600db7a9e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55600db7a9b0 <col:47> '<bound member function type>' ->xanno 0x55600db61fc8
|     |     |       `-CXXThisExpr 0x55600db7a9a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55600db7aa68 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55600db7aa30 <col:60> 'int' lvalue ParmVar 0x55600db64f18 'i' 'int'
|     `-ImplicitCastExpr 0x55600db7ab50 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55600db7ab30 <col:65> 'int16_t':'short' lvalue ParmVar 0x55600db64f90 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55600db65268 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55600db65170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55600db7b258 <col:36, line:541:5>
|   |-ParenExpr 0x55600db7aff8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7afc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7ad20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7acf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7ac00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7abe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7aba8 <col:23> 'int' lvalue ParmVar 0x55600db65170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7abc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7acd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7acb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7ac20 <col:33> 'int' lvalue ParmVar 0x55600db65170 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7ac98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7ac80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7ac40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7ac60 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55600db7ad80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7ad60 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7af28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7af10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7aef0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7af68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7adf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55600db7af80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7ae28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7af98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7ae60 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55600db7afb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7aed8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7aec0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7ae80 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55600db7b248 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55600db7b230 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55600db7b218 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db7b1e8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55600db7b190 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db7b160 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db7b110 <col:61, col:70> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db7b0f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db7b0c0 <col:61> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db7b0b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db7b178 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db7b140 <col:74> 'int' lvalue ParmVar 0x55600db65170 'i' 'int'
|-CXXMethodDecl 0x55600db65438 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55600db65328 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55600db653a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55600db654e8 <col:20>
| `-OptimizeNoneAttr 0x55600db65540 <col:30>
|-CXXMethodDecl 0x55600db65678 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55600db65580 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55600db7b928 <col:35, line:562:5>
|   |-ParenExpr 0x55600db7b6c8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7b698 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7b3f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7b3c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7b2d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7b2b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7b278 <col:23> 'int' lvalue ParmVar 0x55600db65580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7b298 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7b3a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7b388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7b2f0 <col:33> 'int' lvalue ParmVar 0x55600db65580 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7b368 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7b350 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7b310 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7b330 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55600db7b450 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7b430 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7b5f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7b5e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7b5c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7b638 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7b4c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55600db7b650 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7b4f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7b668 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7b530 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55600db7b680 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7b5a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7b590 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7b550 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55600db7b918 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55600db7b900 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55600db7b8e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db7b8b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55600db7b860 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db7b830 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db7b7e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db7b7c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db7b790 <col:60> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db7b780 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db7b848 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db7b810 <col:73> 'int' lvalue ParmVar 0x55600db65580 'i' 'int'
|-CXXMethodDecl 0x55600db65888 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55600db65738 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55600db657b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55600db7c008 <col:41, line:577:5>
|   |-ParenExpr 0x55600db7bd98 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7bd68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7bac0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7ba90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7b9a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7b988 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7b948 <col:23> 'int' lvalue ParmVar 0x55600db65738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7b968 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7ba70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7ba58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7b9c0 <col:33> 'int' lvalue ParmVar 0x55600db65738 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7ba38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7ba20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7b9e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7ba00 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55600db7bb20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7bb00 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7bcc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7bcb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7bc90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7bd08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7bb90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55600db7bd20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7bbc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7bd38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7bc00 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55600db7bd50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7bc78 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7bc60 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7bc20 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55600db7bfe8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55600db7bf98 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55600db7bf68 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55600db7bf08 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55600db7bed8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55600db7be88 <col:47, col:56> 'char [48]' lvalue ->c 0x55600db6cce0
|     |     |   `-CXXMemberCallExpr 0x55600db7be68 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55600db7be38 <col:47> '<bound member function type>' ->xanno 0x55600db61fc8
|     |     |       `-CXXThisExpr 0x55600db7be28 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55600db7bef0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55600db7beb8 <col:60> 'int' lvalue ParmVar 0x55600db65738 'i' 'int'
|     `-ImplicitCastExpr 0x55600db7bfd0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55600db7bfb0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55600db657b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55600db65a48 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55600db65950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55600db7c738 <col:36, line:591:5>
|   |-ParenExpr 0x55600db7c478 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7c448 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7c1a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7c170 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7c080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7c068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7c028 <col:23> 'int' lvalue ParmVar 0x55600db65950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7c048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7c150 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7c138 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7c0a0 <col:33> 'int' lvalue ParmVar 0x55600db65950 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7c118 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7c100 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7c0c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7c0e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55600db7c200 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7c1e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7c3a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7c390 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7c370 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7c3e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7c270 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55600db7c400 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7c2a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7c418 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7c2e0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55600db7c430 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7c358 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7c340 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7c300 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55600db7c728 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55600db7c710 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55600db7c6f8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db7c6c8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55600db7c640 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db7c610 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db7c5c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db7c5a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db7c570 <col:61> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db7c560 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db7c628 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db7c5f0 <col:74> 'int' lvalue ParmVar 0x55600db65950 'i' 'int'
|-CXXMethodDecl 0x55600db65c98 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55600db65b08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55600db65b80 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55600db7ce18 <col:42, line:606:5>
|   |-ParenExpr 0x55600db7cba8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55600db7cb78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7c8d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7c8a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7c7b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7c798 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7c758 <col:23> 'int' lvalue ParmVar 0x55600db65b08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7c778 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7c880 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55600db7c868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7c7d0 <col:33> 'int' lvalue ParmVar 0x55600db65b08 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7c848 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7c830 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7c7f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55600db7c810 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55600db7c930 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7c910 <col:60> 'int' 0
|   |   `-CallExpr 0x55600db7cad8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55600db7cac0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7caa0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7cb18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7c9a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55600db7cb30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7c9d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7cb48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7ca10 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55600db7cb60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7ca88 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7ca70 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7ca30 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55600db7cdf8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55600db7cda8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55600db7cd78 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55600db7cd18 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55600db7cce8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55600db7cc98 <col:48, col:57> 'char [48]' lvalue ->c 0x55600db6cce0
|     |     |   `-CXXMemberCallExpr 0x55600db7cc78 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55600db7cc48 <col:48> '<bound member function type>' ->xanno 0x55600db61fc8
|     |     |       `-CXXThisExpr 0x55600db7cc38 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55600db7cd00 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55600db7ccc8 <col:61> 'int' lvalue ParmVar 0x55600db65b08 'i' 'int'
|     `-ImplicitCastExpr 0x55600db7cde0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55600db7cdc0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55600db65b80 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55600db65e30 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55600db65d60 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55600db7d688 <col:33, line:620:5>
|   |-ParenExpr 0x55600db7d400 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55600db7d3d0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7d020 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7cff0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7ce90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7ce78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7ce38 <col:23> 'int' lvalue ParmVar 0x55600db65d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7ce58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7cfd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55600db7cfb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7ceb0 <col:33> 'int' lvalue ParmVar 0x55600db65d60 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7cf98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7cf80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7ced0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55600db7cf58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55600db7cf40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55600db7cf08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55600db7d080 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7d060 <col:79> 'int' 0
|   |   `-CallExpr 0x55600db7d330 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55600db7d318 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7d2f8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7d370 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7d168 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55600db7d388 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7d1b0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7d3a0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7d1e8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55600db7d3b8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7d2e0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7d2c8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7d288 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55600db7d678 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55600db7d660 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55600db7d648 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55600db7d618 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55600db7d590 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55600db7d560 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600db7d510 <col:67, col:76> 'char const[48]' lvalue ->c 0x55600db6cce0
|             |   `-CXXMemberCallExpr 0x55600db7d4f0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55600db7d4c0 <col:67> '<bound member function type>' ->xanno 0x55600db61e28
|             |       `-CXXThisExpr 0x55600db7d4b0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55600db7d578 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55600db7d540 <col:80> 'int' lvalue ParmVar 0x55600db65d60 'i' 'int'
|-CXXMethodDecl 0x55600db66048 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55600db65ef0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55600db65f70 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55600db7deb0 <col:45, line:635:5>
|   |-ParenExpr 0x55600db7dbf8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55600db7dbc8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55600db7d890 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55600db7d860 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55600db7d700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55600db7d6e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55600db7d6a8 <col:23> 'int' lvalue ParmVar 0x55600db65ef0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55600db7d6c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55600db7d840 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55600db7d828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55600db7d720 <col:33> 'int' lvalue ParmVar 0x55600db65ef0 'i' 'int'
|   |   |     `-BinaryOperator 0x55600db7d808 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55600db7d7f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55600db7d740 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55600db62210 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55600db7d7c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55600db7d7b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55600db7d778 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55600db7d8f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55600db7d8d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55600db7db28 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55600db7db10 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55600db7daf0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55600d6ceae0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55600db7db68 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7d960 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55600db7db80 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55600db7d9a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55600db7db98 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55600db7d9e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55600db7dbb0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55600db7dad8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55600db7dac0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55600db7da78 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55600db7de90 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55600db7ddf8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55600db7ddc8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55600db7dd68 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55600db7dd38 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55600db7dce8 <col:54, col:63> 'char [48]' lvalue ->c 0x55600db6cce0
|     |     |   `-CXXMemberCallExpr 0x55600db7dcc8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55600db7dc98 <col:54> '<bound member function type>' ->xanno 0x55600db61fc8
|     |     |       `-CXXThisExpr 0x55600db7dc88 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55600db7dd50 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55600db7dd18 <col:67> 'int' lvalue ParmVar 0x55600db65ef0 'i' 'int'
|     `-CXXConstCastExpr 0x55600db7de60 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55600db7de48 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55600db7de10 <col:91> 'const void *' lvalue ParmVar 0x55600db65f70 'x' 'const void *'
|-CXXMethodDecl 0x55600db66118 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55600db7df38 <col:34, line:640:5>
|   `-ReturnStmt 0x55600db7df28 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55600db7df10 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55600db7dee0 <col:16> 'Packet *' lvalue ->_data_packet 0x55600db6d898
|         `-CXXThisExpr 0x55600db7ded0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55600db66258 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55600db661c8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55600db76ff8 <col:46> 'bool' true
|-CXXMethodDecl 0x55600db663d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55600db66310 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55600db66480 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55600db66c30 <line:660:22> "" ""
| |-EnumConstantDecl 0x55600db66580 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66ca0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66560 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55600db66540 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55600db5b6e0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55600db66610 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66cb8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db665f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55600db665d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55600db5b770 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55600db666a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66cd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66680 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55600db66660 <col:21> 'int' 0
| |-EnumConstantDecl 0x55600db66730 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66ce8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66710 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55600db666f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55600db667c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db667a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55600db66780 <col:21> 'int' 16
| |-EnumConstantDecl 0x55600db66850 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66830 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55600db66810 <col:19> 'int' 32
| |-EnumConstantDecl 0x55600db668e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d30 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db668c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55600db668a0 <col:19> 'int' EnumConstant 0x55600db66730 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55600db66970 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66950 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55600db66930 <col:19> 'int' EnumConstant 0x55600db66850 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55600db66a40 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d60 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66a20 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55600db66a00 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55600db669c0 <col:23> 'int' EnumConstant 0x55600db66970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55600db669e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55600db66b10 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55600db66d78 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600db66af0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55600db66ad0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55600db66a90 <col:23> 'int' EnumConstant 0x55600db66970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55600db66ab0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55600db66be0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55600db66d90 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55600db66bc0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55600db66ba0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55600db66b60 <col:23> 'int' EnumConstant 0x55600db66970 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55600db66b80 <col:40> 'int' 8
|-CXXMethodDecl 0x55600db66dd0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55600db66e70 <col:68> "" ""
|-CXXMethodDecl 0x55600db66f08 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55600db66fa8 <col:45> "" ""
|-CXXMethodDecl 0x55600db67040 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55600db670e0 <col:57> "" ""
|-CXXMethodDecl 0x55600db67178 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55600db67218 <col:45> "" ""
|-CXXMethodDecl 0x55600db672b0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55600db67350 <col:57> "" ""
|-CXXMethodDecl 0x55600db673e0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55600db67480 <col:51> "" ""
|-CXXMethodDecl 0x55600db67510 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55600db675b0 <col:63> "" ""
|-CXXMethodDecl 0x55600db67640 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55600db676e0 <col:53> "" ""
|-CXXMethodDecl 0x55600db67770 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55600db67810 <col:65> "" ""
|-CXXMethodDecl 0x55600db67928 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55600db67898 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55600db679d0 <col:61> "" ""
|-CXXMethodDecl 0x55600db67b68 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55600db67a58 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55600db67ad0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55600db67c18 <col:67> "" ""
|-CXXMethodDecl 0x55600db67d30 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55600db67ca0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55600db67dd8 <col:63> "" ""
|-CXXMethodDecl 0x55600db67f70 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55600db67e60 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55600db67ed8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55600db68020 <col:69> "" ""
|-CXXMethodDecl 0x55600db68138 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55600db680a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55600db681e0 <col:63> "" ""
|-CXXMethodDecl 0x55600db6a8b8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55600db6a7a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55600db6a820 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55600db6a968 <col:69> "" ""
|-CXXMethodDecl 0x55600db6aa80 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55600db6a9f0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55600db6ab28 <col:62> "" ""
|-CXXMethodDecl 0x55600db6acc0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55600db6abb0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55600db6ac28 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55600db6ad70 <col:68> "" ""
|-CXXMethodDecl 0x55600db6ae88 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55600db6adf8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55600db6af30 <col:63> "" ""
|-CXXMethodDecl 0x55600db6b0c8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55600db6afb8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55600db6b030 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55600db6b178 <col:69> "" ""
|-CXXMethodDecl 0x55600db6b208 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55600db6b2a8 <col:64> "" ""
|-CXXMethodDecl 0x55600db6b338 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55600db6b3d8 <col:52> "" ""
|-CXXMethodDecl 0x55600db6b468 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55600db6b508 <col:67> "" ""
|-CXXMethodDecl 0x55600db6b598 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55600db6b638 <col:55> "" ""
|-CXXMethodDecl 0x55600db6b750 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55600db6b6c0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55600db6b7f8 <col:58> "" ""
|-CXXMethodDecl 0x55600db6b990 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55600db6b880 <col:33> col:36 'int'
| |-ParmVarDecl 0x55600db6b8f8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55600db6ba40 <col:62> "" ""
|-CXXMethodDecl 0x55600db6bb58 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55600db6bac8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55600db6bc00 <col:58> "" ""
|-CXXMethodDecl 0x55600db6bd98 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55600db6bc88 <col:33> col:36 'int'
| |-ParmVarDecl 0x55600db6bd00 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55600db6be48 <col:62> "" ""
|-CXXMethodDecl 0x55600db6bf60 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55600db6bed0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55600db6c008 <col:60> "" ""
|-CXXMethodDecl 0x55600db6c1a0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55600db6c090 <col:34> col:37 'int'
| |-ParmVarDecl 0x55600db6c108 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55600db6c250 <col:64> "" ""
|-CXXMethodDecl 0x55600db6c368 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55600db6c2d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55600db6c410 <col:58> "" ""
|-CXXMethodDecl 0x55600db6c5a8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55600db6c498 <col:33> col:36 'int'
| |-ParmVarDecl 0x55600db6c510 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55600db6c658 <col:62> "" ""
|-CXXMethodDecl 0x55600db6c770 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55600db6c6e0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55600db6c818 <col:59> "" ""
|-CXXMethodDecl 0x55600db6c9b0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55600db6c8a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55600db6c918 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55600db6ca60 <col:63> "" ""
|-AccessSpecDecl 0x55600db6cad0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55600db6caf8 prev 0x55600db61d00 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55600db6cbf0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55600db6cce0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55600db6ce08 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55600db6cf88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55600db6d108 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55600db6d288 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55600db7e0b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55600db7e928 <col:11>
| |-CXXDestructorDecl 0x55600db7e190 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55600db7e2c8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55600db7e2c8
| | `-ParmVarDecl 0x55600db7e3d8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55600db7e478 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55600db7e478
| | `-ParmVarDecl 0x55600db7e588 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55600db81348 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600db81458 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55600db816d8 <col:11>
| |   `-ReturnStmt 0x55600db816c8 <col:11>
| |     `-UnaryOperator 0x55600db816b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55600db816a0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55600db814c8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55600db814c8
|   `-ParmVarDecl 0x55600db815d8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55600db6d2f0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55600db6d408 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55600db6d4a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55600db6d510 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55600db6d578 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55600db6d5e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55600db6d640 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55600db6d700 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55600db6d760 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55600db6d7c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55600db7dfc8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55600db6d4a8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55600db7e938 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55600db7e990 <col:12>
| |-CXXConstructorDecl 0x55600db7e5f8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55600db7e5f8
| | `-ParmVarDecl 0x55600db7e708 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55600db7e7a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55600db7e7a8
| | `-ParmVarDecl 0x55600db7e8b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55600db80a30 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55600db6d838 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55600db6d898 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55600db6d900 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55600db6d968 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55600db6d9d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55600db6da38 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55600db6da98 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55600db6daf8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55600db6db60 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55600db6dbe8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55600db6d838 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55600db7df60 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55600db6da98 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55600db7e9a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55600db7ea00 <col:21, line:755:5>
|-CXXConstructorDecl 0x55600db6dd88 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55600db6dcc8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55600db6de80 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55600db6e068 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55600db6df70 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55600db6e338 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55600db6e120 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55600db6e198 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55600db6e210 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db6e558 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55600db6e408 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55600db6e480 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55600db76b38 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55600db6e618 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55600db6e690 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55600db6e708 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55600db76c90 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55600db76c00 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55600db76dd8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55600db76d48 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55600db76ed0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d8d33a8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55600d8d35c8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55600d8d36f8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55600d8d3828 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55600db19758 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55600db19f68 <col:5>
|-CXXDestructorDecl 0x55600db19830 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55600db19938 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db19a48 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55600dbcd710 <col:5>
|-CXXConstructorDecl 0x55600db19ae8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db19bf8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55600dbd6b48 <col:5>
|-CXXMethodDecl 0x55600db1a698 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db1a7a8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55600dbda950 <col:5>
|   `-ReturnStmt 0x55600dbda940 <col:5>
|     `-UnaryOperator 0x55600dbda928 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dbda918 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55600db1a818 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55600db1a818
  `-ParmVarDecl 0x55600db1a928 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600d871b40 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600d8d3318 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55600d8d33a8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55600d8d35c8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55600d8d36f8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55600d8d3828 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55600db19758 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55600db19f68 <col:5>
| |-CXXDestructorDecl 0x55600db19830 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55600db19938 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600db19a48 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55600dbcd710 <col:5>
| |-CXXConstructorDecl 0x55600db19ae8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600db19bf8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55600dbd6b48 <col:5>
| |-CXXMethodDecl 0x55600db1a698 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55600db1a7a8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55600dbda950 <col:5>
| |   `-ReturnStmt 0x55600dbda940 <col:5>
| |     `-UnaryOperator 0x55600dbda928 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55600dbda918 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55600db1a818 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55600db1a818
|   `-ParmVarDecl 0x55600db1a928 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55600d8d38e8 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55600db19668 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55600d8d38e8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55600db19f78 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55600db19fd0 <col:8>
|-CXXConstructorDecl 0x55600db19c68 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db19d48 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55600d8d38e8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55600dbcd720 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55600dbcd6e0 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
| |     `-DeclRefExpr 0x55600dbcd6c0 <col:8> 'const in6_addr' lvalue ParmVar 0x55600db19d48 '' 'const in6_addr &'
| `-CompoundStmt 0x55600dbcd780 <col:8>
|-CXXConstructorDecl 0x55600db19de8 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db19ef8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55600d8d38e8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55600dbd6b58 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55600dbd6b18 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55600d8d38e8
| |     `-CXXStaticCastExpr 0x55600dbd6ae8 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55600dbd6ab8 <col:8> 'in6_addr' lvalue ParmVar 0x55600db19ef8 '' 'in6_addr &&'
| `-CompoundStmt 0x55600dbd6bb8 <col:8>
|-CXXMethodDecl 0x55600db1a998 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db1aaa8 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55600dbda9c8 <col:8>
|   |-CXXMemberCallExpr 0x55600dbda968 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55600dbda8a8 <col:8> '<bound member function type>' .operator= 0x55600db1a698
|   | | `-MemberExpr 0x55600dbda7b8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55600d8d38e8
|   | |   `-CXXThisExpr 0x55600dbda7a8 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55600dbda878 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|   |   `-DeclRefExpr 0x55600dbda858 <col:8> 'const in6_addr' lvalue ParmVar 0x55600db1aaa8 '' 'const in6_addr &'
|   `-ReturnStmt 0x55600dbda9b8 <col:8>
|     `-UnaryOperator 0x55600dbda9a0 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55600dbda990 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55600db1ab18 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55600db1ab18
| `-ParmVarDecl 0x55600db1ac28 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55600db1afc8 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600db15f50 prev 0x55600db5b2b0 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600db16048 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55600db160d8 <col:20, col:26> col:20 public
|-TypedefDecl 0x55600db16110 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55600d787d40 'uninitialized_type'
|   `-CXXRecord 0x55600d787ca8 'uninitialized_type'
|-CXXConstructorDecl 0x55600db161d0 <line:19:5, line:21:5> line:19:12 IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600db19fe0 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55600db1a200 <col:25, line:21:5>
|   `-CallExpr 0x55600db1a1b0 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55600db1a198 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55600db1a178 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55600d892df8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55600db1a1e8 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55600db1a0c0 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55600db1a090 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|     |     `-CXXThisExpr 0x55600db1a080 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55600db1a0d8 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55600db1a158 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55600db1a138 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55600db1a108 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55600db1a0f8 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55600db16320 <line:24:5, line:26:5> line:24:21 used IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55600db16290 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600db1a218 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55600db1a468 <col:56, line:26:5>
|   `-CallExpr 0x55600db1a3e8 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55600db1a3d0 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55600db1a3b0 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55600d891ab8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55600db1a420 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55600db1a2f8 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55600db1a2c8 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|     |     `-CXXThisExpr 0x55600db1a2b8 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55600db1a450 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55600db1a438 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55600db1a310 <col:17> 'const unsigned char *' lvalue ParmVar 0x55600db16290 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55600db1a390 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55600db1a370 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55600db1a340 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55600db1a330 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55600db16470 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55600db163e0 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600db1a480 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55600dbcd600 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55600dbcd5e8 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55600dbcd5b0 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55600dbcd598 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55600dbcd518 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55600db18f88 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55600db1a4e8 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55600db1a4d8 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55600dbcd500 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55600dbcd4e8 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55600dbcd4d0 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55600dbcd4b0 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55600dbcd480 <col:10> '<bound member function type>' .operator in_addr 0x55600d996b20
|                 `-ImplicitCastExpr 0x55600dbcd468 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55600db1a500 <col:10> 'IPAddress' lvalue ParmVar 0x55600db163e0 'x' 'IPAddress'
|-CXXConstructorDecl 0x55600db165c0 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55600db16530 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55600db167e8 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55600db166f0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600dbcd790 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55600dbcd618 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55600db166f0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55600dbcd7f0 <col:13, line:41:5>
|-CXXConstructorDecl 0x55600db169b8 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55600db168f0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600dbcd800 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55600dbcd910 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55600dbcd8d8 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55600dbcd8c0 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55600dbcd8a0 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55600db18f88 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55600dbcd868 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55600dbcd858 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55600dbcd880 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55600db168f0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55600db16b08 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55600db16a78 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600dbcd928 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55600dbcd9d8 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55600dbcd9b0 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55600dbcd980 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55600db16a78 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55600db16c98 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55600db16bd0 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55600db16de8 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55600db16d58 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55600db16f98 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55600db16f10 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55600db5b340 'IP6Address'
|   | `-CXXRecord 0x55600db15f50 'IP6Address'
|   `-ParenType 0x55600db16eb0 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55600d953140 'uint32_t () const' const cdecl
|       `-TypedefType 0x55600d788030 'uint32_t' sugar
|         |-Typedef 0x55600d69b4c8 'uint32_t'
|         `-TypedefType 0x55600d6745a0 '__uint32_t' sugar
|           |-Typedef 0x55600d674198 '__uint32_t'
|           `-BuiltinType 0x55600d632620 'unsigned int'
|-CXXConversionDecl 0x55600db170d8 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55600db17260 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55600dbcda40 <col:46, col:62>
|   `-ReturnStmt 0x55600dbcda30 <col:48, col:55>
|     `-MemberExpr 0x55600dbcda00 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|       `-CXXThisExpr 0x55600dbcd9f0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55600db17450 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55600dbcdaa8 <col:34, col:50>
|   `-ReturnStmt 0x55600dbcda98 <col:36, col:43>
|     `-MemberExpr 0x55600dbcda68 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|       `-CXXThisExpr 0x55600dbcda58 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55600db17550 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55600dbcdb10 <col:45, col:61>
|   `-ReturnStmt 0x55600dbcdb00 <col:47, col:54>
|     `-MemberExpr 0x55600dbcdad0 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|       `-CXXThisExpr 0x55600dbcdac0 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55600db17628 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55600dbcdb78 <col:33, col:49>
|   `-ReturnStmt 0x55600dbcdb68 <col:35, col:42>
|     `-MemberExpr 0x55600dbcdb38 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|       `-CXXThisExpr 0x55600dbcdb28 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55600db176f0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55600dbcdcb0 <col:27, col:66>
|   `-ReturnStmt 0x55600dbcdca0 <col:29, col:63>
|     `-UnaryOperator 0x55600dbcdc88 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600dbcdc68 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55600dbcdc50 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600dbcdc00 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55600d8d35c8
|         |   `-MemberExpr 0x55600dbcdbd0 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|         |     `-MemberExpr 0x55600dbcdba0 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|         |       `-CXXThisExpr 0x55600dbcdb90 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55600dbcdc30 <col:62> 'int' 0
|-CXXMethodDecl 0x55600db177b8 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55600dbcde28 <col:39, col:78>
|   `-ReturnStmt 0x55600dbcde18 <col:41, col:75>
|     `-UnaryOperator 0x55600dbcde00 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55600dbcdde0 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55600dbcddc8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55600dbcdd38 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|         |   `-MemberExpr 0x55600dbcdd08 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|         |     `-MemberExpr 0x55600dbcdcd8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|         |       `-CXXThisExpr 0x55600dbcdcc8 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55600dbcdd68 <col:74> 'int' 0
|-CXXMethodDecl 0x55600db178d8 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55600dbcdf98 <col:24, col:75>
|   `-ReturnStmt 0x55600dbcdf88 <col:26, col:72>
|     `-CStyleCastExpr 0x55600dbcdf60 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55600dbcdf38 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55600dbcdf18 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55600dbcdf00 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55600dbcdeb0 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55600d8d35c8
|           |   `-MemberExpr 0x55600dbcde80 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|           |     `-MemberExpr 0x55600dbcde50 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|           |       `-CXXThisExpr 0x55600dbcde40 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55600dbcdee0 <col:71> 'int' 0
|-CXXMethodDecl 0x55600db17998 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55600dbce120 <col:36, col:87>
|   `-ReturnStmt 0x55600dbce110 <col:38, col:84>
|     `-ImplicitCastExpr 0x55600dbce0f8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55600dbce0d0 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55600dbce0a8 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55600dbce088 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55600dbce070 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600dbce020 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|             |   `-MemberExpr 0x55600dbcdff0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|             |     `-MemberExpr 0x55600dbcdfc0 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|             |       `-CXXThisExpr 0x55600dbcdfb0 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55600dbce050 <col:83> 'int' 0
|-CXXMethodDecl 0x55600db17a58 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55600dbce290 <col:24, col:75>
|   `-ReturnStmt 0x55600dbce280 <col:26, col:72>
|     `-CStyleCastExpr 0x55600dbce258 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55600dbce230 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55600dbce210 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55600dbce1f8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55600dbce1a8 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55600d8d35c8
|           |   `-MemberExpr 0x55600dbce178 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|           |     `-MemberExpr 0x55600dbce148 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55600db195e8
|           |       `-CXXThisExpr 0x55600dbce138 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55600dbce1d8 <col:71> 'int' 0
|-CXXMethodDecl 0x55600db17b18 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55600dbce418 <col:36, col:87>
|   `-ReturnStmt 0x55600dbce408 <col:38, col:84>
|     `-ImplicitCastExpr 0x55600dbce3f0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55600dbce3c8 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55600dbce3a0 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55600dbce380 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55600dbce368 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55600dbce318 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|             |   `-MemberExpr 0x55600dbce2e8 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|             |     `-MemberExpr 0x55600dbce2b8 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|             |       `-CXXThisExpr 0x55600dbce2a8 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55600dbce348 <col:83> 'int' 0
|-CXXMethodDecl 0x55600db17bd8 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55600db17ca0 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55600db17ec8 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55600db17d78 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55600db17df0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55600db18048 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55600db17f88 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55600db18110 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55600dbce730 <col:36, line:99:5>
|   `-ReturnStmt 0x55600dbce720 <line:98:2, col:81>
|     `-BinaryOperator 0x55600dbce700 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55600dbce578 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55600dbce560 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55600dbce548 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55600dbce508 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55600dbce4f0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55600dbce4a0 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|       | |     |   `-MemberExpr 0x55600dbce470 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|       | |     |     `-MemberExpr 0x55600dbce440 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|       | |     |       `-CXXThisExpr 0x55600dbce430 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55600dbce4d0 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55600dbce528 <col:41> 'int' 255
|       `-BinaryOperator 0x55600dbce6e0 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dbce6c8 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55600dbce6b0 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55600dbce670 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55600dbce658 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55600dbce608 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|         |     |   `-MemberExpr 0x55600dbce5d8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|         |     |     `-MemberExpr 0x55600dbce5a8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|         |     |       `-CXXThisExpr 0x55600dbce598 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55600dbce638 <col:74> 'int' 12
|         `-IntegerLiteral 0x55600dbce690 <col:81> 'int' 254
|-CXXMethodDecl 0x55600db18288 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55600db181c0 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55600db18350 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55600dbcec18 <col:43, line:114:5>
|   `-ReturnStmt 0x55600dbcec08 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55600dbcebe8 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55600dbcea48 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55600dbce8a8 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55600dbce878 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55600dbce838 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55600dbce7f8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55600dbce7c8 <col:9> '<bound member function type>' ->data32 0x55600db17b18
|       | | |   |   `-CXXThisExpr 0x55600dbce7b8 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55600dbce818 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55600dbce890 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55600dbce858 <col:24> 'int' 0
|       | `-BinaryOperator 0x55600dbcea28 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55600dbce9f8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55600dbce9b8 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55600dbce978 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55600dbce948 <col:29> '<bound member function type>' ->data32 0x55600db17b18
|       |   |   |   `-CXXThisExpr 0x55600dbce938 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55600dbce998 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55600dbcea10 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55600dbce9d8 <col:44> 'int' 0
|       `-BinaryOperator 0x55600dbcebc8 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dbceb98 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55600dbceb58 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55600dbceb18 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55600dbceae8 <col:9> '<bound member function type>' ->data32 0x55600db17b18
|         |   |   `-CXXThisExpr 0x55600dbcead8 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55600dbceb38 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55600dbcebb0 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55600dbceb78 <col:24> 'int' 0
|-CXXMethodDecl 0x55600db18410 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55600dbcf190 <col:39, line:123:5>
|   `-ReturnStmt 0x55600dbcf180 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55600dbcf160 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55600dbcef30 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55600dbced90 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55600dbced60 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55600dbced20 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55600dbcece0 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55600dbcecb0 <col:9> '<bound member function type>' ->data32 0x55600db17b18
|       | | |   |   `-CXXThisExpr 0x55600dbceca0 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55600dbced00 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55600dbced78 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55600dbced40 <col:24> 'int' 0
|       | `-BinaryOperator 0x55600dbcef10 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55600dbceee0 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55600dbceea0 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55600dbcee60 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55600dbcee30 <col:29> '<bound member function type>' ->data32 0x55600db17b18
|       |   |   |   `-CXXThisExpr 0x55600dbcee20 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55600dbcee80 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55600dbceef8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55600dbceec0 <col:44> 'int' 0
|       `-BinaryOperator 0x55600dbcf140 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dbcf128 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55600dbcf040 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55600dbcf000 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55600dbcefd0 <col:9> '<bound member function type>' ->data32 0x55600db17b18
|         |   |   `-CXXThisExpr 0x55600dbcefc0 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55600dbcf020 <col:18> 'int' 2
|         `-CallExpr 0x55600dbcf100 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55600dbcf0e8 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55600dbcf0c8 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55600d8d7758 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55600dbcf0a8 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55600db184d0 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55600dbcf320 <col:38, line:131:5>
|   `-ReturnStmt 0x55600dbcf310 <line:130:9, col:47>
|     `-BinaryOperator 0x55600dbcf2f0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55600dbcf2d8 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55600dbcf2c0 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55600dbcf280 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55600dbcf268 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55600dbcf218 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55600d8d35c8
|       |     |   `-MemberExpr 0x55600dbcf1e8 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55600d8d38e8
|       |     |     `-MemberExpr 0x55600dbcf1b8 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55600db195e8
|       |     |       `-CXXThisExpr 0x55600dbcf1a8 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55600dbcf248 <col:41> 'int' 0
|       `-IntegerLiteral 0x55600dbcf2a0 <col:47> 'int' 255
|-CXXMethodDecl 0x55600db18590 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55600dbcf6f8 <col:39, line:139:5>
|   `-ReturnStmt 0x55600dbcf6e8 <line:138:9, col:67>
|     `-BinaryOperator 0x55600dbcf6c8 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55600dbcf528 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55600dbcf510 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55600dbcf428 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55600dbcf3e8 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55600dbcf3b8 <col:16> '<bound member function type>' ->data32 0x55600db17b18
|       | |   |   `-CXXThisExpr 0x55600dbcf3a8 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55600dbcf408 <col:25> 'int' 0
|       | `-CallExpr 0x55600dbcf4e8 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55600dbcf4d0 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55600dbcf4b0 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55600d8d7758 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55600dbcf490 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55600dbcf6a8 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55600dbcf678 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55600dbcf638 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55600dbcf5f8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55600dbcf5c8 <col:52> '<bound member function type>' ->data32 0x55600db17b18
|         |   |   `-CXXThisExpr 0x55600dbcf5b8 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55600dbcf618 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55600dbcf690 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55600dbcf658 <col:67> 'int' 0
|-CXXMethodDecl 0x55600db18650 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55600db187f8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55600db18700 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55600db189b8 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55600db188c8 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55600db18b00 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55600db18a70 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55600db18c60 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55600db18bd0 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55600db18dc0 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55600db18d30 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55600db18f88 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55600db18e90 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55600db19108 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55600db19040 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55600db191d0 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55600db19290 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55600db19350 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55600dbcf878 <col:22, col:42>
|   `-ReturnStmt 0x55600dbcf868 <col:24, col:39>
|     `-ExprWithCleanups 0x55600dbcf850 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55600dbcf820 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55600dbcf808 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55600dbcf7e8 <col:31, col:39> 'String' (CXXTemporary 0x55600dbcf7e8)
|             `-CXXMemberCallExpr 0x55600dbcf7c0 <col:31, col:39> 'String'
|               `-MemberExpr 0x55600dbcf790 <col:31> '<bound member function type>' ->unparse 0x55600db191d0
|                 `-CXXThisExpr 0x55600dbcf780 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55600db19420 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55600db194c8 <col:51> "" ""
|-TypedefDecl 0x55600db19548 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55600db17d40 'const IP6Address &'
|   `-QualType 0x55600db5b341 'const IP6Address' const
|     `-RecordType 0x55600db5b340 'IP6Address'
|       `-CXXRecord 0x55600db15f50 'IP6Address'
|-AccessSpecDecl 0x55600db195a0 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55600db195e8 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55600db1a520 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55600db1a520
| `-ParmVarDecl 0x55600db1a5f8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55600db1acc8 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55600db1acc8
| `-ParmVarDecl 0x55600db1add8 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55600db1ae48 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55600db1ae48
| `-ParmVarDecl 0x55600db1af58 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55600db1b0b0 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600db1b1c8 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55600db195e8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55600dbd6bc8 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55600dbd6a70 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55600db195e8
| |     `-CXXStaticCastExpr 0x55600dbd6a40 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55600dbd6a10 <col:7> 'IP6Address' lvalue ParmVar 0x55600db1b1c8 '' 'IP6Address &&'
| `-CompoundStmt 0x55600dbd6c28 <col:7>
`-CXXDestructorDecl 0x55600dbd6878 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc78c70 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55600dc78d88 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55600dc78e18 <col:16, col:22> col:16 public
|-EnumDecl 0x55600dc78e40 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55600dc78f40 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55600dc79190 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc78f20 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55600dc78f00 <col:21> 'int' 0
| |-EnumConstantDecl 0x55600dc78fd0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55600dc791a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc78fb0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55600dc78f90 <col:24> 'int' 22
| |-EnumConstantDecl 0x55600dc79060 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55600dc791c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc79040 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55600dc79020 <col:24> 'int' 34
| |-EnumConstantDecl 0x55600dc790f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55600dc791d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55600dc790d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55600dc790b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55600dc79140 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55600dc7ab50 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55600dc7af88 <col:7>
|-CXXConstructorDecl 0x55600dc7ac58 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55600dc7ac58
| `-ParmVarDecl 0x55600dc7ad68 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55600dc7ae08 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600dc7af18 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55600dcd53f0 <col:7>
`-CXXDestructorDecl 0x55600dc7d0c8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55600dc79208 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55600dc79368 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55600dc793f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55600dc79430 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55600d788030 'uint32_t' sugar
|   |-Typedef 0x55600d69b4c8 'uint32_t'
|   `-TypedefType 0x55600d6745a0 '__uint32_t' sugar
|     |-Typedef 0x55600d674198 '__uint32_t'
|     `-BuiltinType 0x55600d632620 'unsigned int'
|-CXXConstructorDecl 0x55600dc79578 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55600dc794a0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55600dc7aa58 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55600dc7af98 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55600dc7a310 'base' 'int'
| | `-ImplicitCastExpr 0x55600dc7aaf8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55600dc7aab8 <col:16> 'int' lvalue ParmVar 0x55600dc794a0 'b' 'int'
| `-CompoundStmt 0x55600dc7b008 <col:19, line:1046:5>
|-CXXMethodDecl 0x55600dc79a70 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55600dc79640 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55600dc796c0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55600dc79738 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55600dc797b8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55600dc79878 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55600dc798f8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55600dc79ec8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55600dc79b40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55600dc79e28 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55600dc79be8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55600dc79c88 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55600dc79d00 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55600dc7aa78 <col:82> 'const ArgContext' lvalue Var 0x55600dc6ead8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55600dc7bf78 <col:94, line:1067:5>
| |   |-DeclStmt 0x55600dc7b198 <line:1054:9, col:64>
| |   | `-VarDecl 0x55600dc7b028 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55600dc7b150 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55600dc7b3b8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55600dc7b1c8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55600dc7b390 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55600dc7b370 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55600dc7b320 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55600dc7b300 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55600dc7b2a8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55600dc7b258 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55600dc7b288 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55600dc7b2e8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55600dc7b2c8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55600dc7b350 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55600dc7b518 <line:1056:9, col:27>
| |   | `-VarDecl 0x55600dc7b4b0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55600dc7b970 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55600dc7b8a0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55600dc7b810 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55600dbd0e48 0x55600dbb3880 0x55600db52018 0x55600d99b5f8 0x55600d99b2d0 0x55600d98cab0 0x55600d98c760 0x55600d98c050 0x55600d95e9c0 0x55600d8eae80
| |   | | |-CallExpr 0x55600dc7b750 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55600dc7b540 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55600dc7b5f0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55600dc7b5c0 <col:19, col:23> '<bound member function type>' .begin 0x55600d97bcb8
| |   | | | |   `-DeclRefExpr 0x55600dc7b5a0 <col:19> 'const String' lvalue ParmVar 0x55600dc79be8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55600dc7b660 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55600dc7b630 <col:32, col:36> '<bound member function type>' .end 0x55600d97bed0
| |   | | | |   `-DeclRefExpr 0x55600dc7b610 <col:32> 'const String' lvalue ParmVar 0x55600dc79be8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55600dc7b680 <col:43> 'const bool' lvalue Var 0x55600dc7b028 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55600dc7b6e8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55600dc7b6c8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55600dc7b710 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55600dc7b4b0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55600dc7b730 <col:73> 'const int' lvalue Var 0x55600dc7b1c8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55600dc7b7f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55600dc7b7c0 <col:16, col:20> '<bound member function type>' .end 0x55600d97bed0
| |   | |     `-DeclRefExpr 0x55600dc7b7a0 <col:16> 'const String' lvalue ParmVar 0x55600dc79be8 'str' 'const String &'
| |   | `-BinaryOperator 0x55600dc7b950 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55600dc7b8e8 <col:13> 'int' lvalue ->status 0x55600dc7a378
| |   |   | `-CXXThisExpr 0x55600dc7b8d8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55600dc7b938 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55600dc7b918 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc78fd0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55600dc7bbc0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55600dc7baa8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55600dc7ba90 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55600dc7ba78 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55600dc7b998 <col:13> 'int' lvalue ->status 0x55600dc7a378
| |   | | |     `-CXXThisExpr 0x55600dc7b988 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55600dc7ba58 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55600dc7ba28 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55600dc7b9d8 <col:23> 'int' lvalue ->status 0x55600dc7a378
| |   | |   |   `-CXXThisExpr 0x55600dc7b9c8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55600dc7ba40 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55600dc7ba08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55600dc7bba0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55600dc7bb40 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55600dc7bae8 <col:13, col:18> '<bound member function type>' .error 0x55600dc24e10
| |   |   | | `-DeclRefExpr 0x55600dc7bac8 <col:13> 'const ArgContext' lvalue ParmVar 0x55600dc79d00 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55600dc7bb68 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55600dc7bb18 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55600dc7bb90 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55600dc7bb80 <col:20> 'bool' false
| |   |-DeclStmt 0x55600dc7bdc8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55600dc7bd70 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55600dc7bd00 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55600dc7bf28 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55600dc7bde0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55600d91ee48
| |   | |-DeclRefExpr 0x55600dc7be28 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55600dc7b4b0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55600dc7bef8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55600dc7be70 <col:64> 'V' lvalue ParmVar 0x55600dc79c88 'result' 'V &'
| |   `-ReturnStmt 0x55600dc7bf68 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55600dc7bf58 <col:16> 'bool' true
| `-CXXMethodDecl 0x55600dcd8ba8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55600dcd8980 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55600dcd8a58 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55600dcd8ac0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55600dcec720 <col:94, line:1067:5>
|     |-DeclStmt 0x55600dceb188 <line:1054:9, col:64>
|     | `-VarDecl 0x55600dceafa0 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55600dceb118 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55600dceb0e8 <col:36, col:55> 'const bool' lvalue Var 0x55600d90edb8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55600dceb368 <line:1055:9, col:91>
|     | `-VarDecl 0x55600dceb1a0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55600dceb2e8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55600dceb2d0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55600dceb2b0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55600dceb290 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55600dceb270 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55600dceb238 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55600dceb218 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55600dc7b288 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55600dceb258 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55600dc7b2c8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55600dc7b350 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55600dceb500 <line:1056:9, col:27>
|     | `-VarDecl 0x55600dceb498 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55600dceb998 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55600dceb940 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55600dceb7f8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55600dceb7c8 <col:13> '<bound member function type>' ->parse 0x55600dc79a70
|     | | | | `-CXXThisExpr 0x55600dceb7b8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55600dceb658 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55600dceb628 <col:19, col:23> '<bound member function type>' .begin 0x55600d97bcb8
|     | | | |   `-DeclRefExpr 0x55600dceb608 <col:19> 'const String' lvalue ParmVar 0x55600dcd8980 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55600dceb6c8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55600dceb698 <col:32, col:36> '<bound member function type>' .end 0x55600d97bed0
|     | | | |   `-DeclRefExpr 0x55600dceb678 <col:32> 'const String' lvalue ParmVar 0x55600dcd8980 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55600dceb868 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55600dceb848 <col:43> 'const bool' lvalue Var 0x55600dceafa0 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55600dceb750 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55600dceb738 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55600dceb718 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55600dceb880 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55600dceb778 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55600dceb498 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55600dceb8b8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55600dceb898 <col:73> 'const int' lvalue Var 0x55600dceb1a0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55600dceb920 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55600dceb8f0 <col:16, col:20> '<bound member function type>' .end 0x55600d97bed0
|     | |     `-DeclRefExpr 0x55600dceb8d0 <col:16> 'const String' lvalue ParmVar 0x55600dcd8980 'str' 'const String &'
|     | `-BinaryOperator 0x55600dceb978 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55600dc7b8e8 <col:13> 'int' lvalue ->status 0x55600dc7a378
|     |   | `-CXXThisExpr 0x55600dc7b8d8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55600dceb960 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55600dc7b918 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc78fd0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55600dcebb10 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55600dceba30 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55600dceba18 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55600dceba00 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55600dc7b998 <col:13> 'int' lvalue ->status 0x55600dc7a378
|     | | |     `-CXXThisExpr 0x55600dc7b988 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55600dceb9e0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55600dceb9b0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55600dc7b9d8 <col:23> 'int' lvalue ->status 0x55600dc7a378
|     | |   |   `-CXXThisExpr 0x55600dc7b9c8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55600dceb9c8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55600dc7ba08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55600dcebaf0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55600dcebaa0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55600dceba70 <col:13, col:18> '<bound member function type>' .error 0x55600dc24e10
|     |   | | `-DeclRefExpr 0x55600dceba50 <col:13> 'const ArgContext' lvalue ParmVar 0x55600dcd8ac0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55600dcebac8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55600dc7bb18 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55600dcebae0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55600dc7bb80 <col:20> 'bool' false
|     |-DeclStmt 0x55600dcec058 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55600dcec000 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55600dcebfb0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55600dcebf90 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55600dcebf20 'type'
|     |       `-ElaboratedType 0x55600dcebed0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55600dcebeb0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55600d90ef10 'unsigned_type'
|     |           `-BuiltinType 0x55600d632620 'unsigned int'
|     |-CallExpr 0x55600dcec6b0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55600dcec698 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55600dcec618 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55600dcec4f8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55600d91ee48 'extract_integer')
|     | |-ImplicitCastExpr 0x55600dcec6f8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55600dcec6e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55600dcec0b8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55600dceb498 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55600dcec188 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55600dcec138 <col:64> 'int':'int' lvalue ParmVar 0x55600dcd8a58 'result' 'int &'
|     `-ReturnStmt 0x55600dcec710 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55600dc7bf58 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55600dc7a288 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55600dc79f38 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55600dc7a1e8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55600dc79fe8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55600dc7a088 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55600dc7a100 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55600dc7aa98 <col:71> 'const ArgContext' lvalue Var 0x55600dc6ead8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55600dc7c6e8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55600dc7c040 <line:1071:9, col:12>
| |   | `-VarDecl 0x55600dc7bfd8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55600dc7c6c0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55600dc7c2d0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55600dc7c158 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55600dc7c120 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55600dc7c068 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55600dc7c0c0 <col:31> 'const String' lvalue ParmVar 0x55600dc79fe8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55600dc7c0e0 <col:36> 'V' lvalue Var 0x55600dc7bfd8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55600dc7c100 <col:39> 'const ArgContext' lvalue ParmVar 0x55600dc7a100 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55600dc7c2b0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55600dc7c290 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55600dc7c278 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55600dc7c260 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55600dc7c180 <col:17> 'int' lvalue ->status 0x55600dc7a378
| |     |     |     `-CXXThisExpr 0x55600dc7c170 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55600dc7c240 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55600dc7c210 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55600dc7c1c0 <col:27> 'int' lvalue ->status 0x55600dc7a378
| |     |       |   `-CXXThisExpr 0x55600dc7c1b0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55600dc7c228 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55600dc7c1f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55600dc7c300 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55600dc7c2f0 <col:20> 'bool' false
| |     `-IfStmt 0x55600dc7c698 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55600dc7c3a0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55600dc7c370 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55600dc7c320 <col:18> 'int' lvalue ->status 0x55600dc7a378
| |       | |   `-CXXThisExpr 0x55600dc7c310 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55600dc7c388 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55600dc7c350 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55600dc7c5d8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55600dc7c580 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55600dc7c3d0 <line:1076:13> '<bound member function type>' ->range_error 0x55600dc7a988
| |       | | | `-CXXThisExpr 0x55600dc7c3c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55600dc7c400 <col:25> 'const ArgContext' lvalue ParmVar 0x55600dc7a100 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55600dc7c4e0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55600dc7c558 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55600dc7c538 <col:43> 'V' lvalue Var 0x55600dc7bfd8 'x' 'V'
| |       | `-ReturnStmt 0x55600dc7c5c8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55600dc7c5b8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55600dc7c678 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55600dc7c638 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55600dc7c5f8 <col:13> 'V' lvalue ParmVar 0x55600dc7a088 'result' 'V &'
| |         | `-DeclRefExpr 0x55600dc7c618 <col:22> 'V' lvalue Var 0x55600dc7bfd8 'x' 'V'
| |         `-ReturnStmt 0x55600dc7c668 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55600dc7c658 <col:20> 'bool' true
| `-CXXMethodDecl 0x55600dcd8568 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55600dcd8340 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55600dcd8418 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55600dcd8480 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55600dcd91b8 <col:83, line:1083:5>
|     |-DeclStmt 0x55600dcd87f0 <line:1071:9, col:12>
|     | `-VarDecl 0x55600dcd8788 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55600dcd9190 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55600dcd8e20 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55600dcd8d48 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55600dcd8d10 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55600dcd8cc8 <col:14> '<bound member function type>' ->parse_saturating 0x55600dcd8ba8
|       | |   | `-CXXThisExpr 0x55600dcd8cb8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55600dcd8860 <col:31> 'const String' lvalue ParmVar 0x55600dcd8340 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55600dcd8880 <col:36> 'int':'int' lvalue Var 0x55600dcd8788 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55600dcd88a0 <col:39> 'const ArgContext' lvalue ParmVar 0x55600dcd8480 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55600dcd8e00 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55600dcd8de0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55600dcd8dc8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55600dcd8db0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55600dc7c180 <col:17> 'int' lvalue ->status 0x55600dc7a378
|       |     |     `-CXXThisExpr 0x55600dc7c170 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55600dcd8d90 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55600dcd8d60 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55600dc7c1c0 <col:27> 'int' lvalue ->status 0x55600dc7a378
|       |       |   `-CXXThisExpr 0x55600dc7c1b0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55600dcd8d78 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55600dc7c1f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55600dcd8e40 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55600dc7c2f0 <col:20> 'bool' false
|       `-IfStmt 0x55600dcd9168 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55600dcd8e80 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55600dcd8e50 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55600dc7c320 <col:18> 'int' lvalue ->status 0x55600dc7a378
|         | |   `-CXXThisExpr 0x55600dc7c310 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55600dcd8e68 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55600dc7c350 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55600dc79060 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55600dcd90a0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55600dcd9010 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55600dc7c3d0 <line:1076:13> '<bound member function type>' ->range_error 0x55600dc7a988
|         | | | `-CXXThisExpr 0x55600dc7c3c0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55600dcd8ea0 <col:25> 'const ArgContext' lvalue ParmVar 0x55600dcd8480 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55600dcd9078 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55600dcd9048 <col:31, col:50> 'const bool' lvalue Var 0x55600d90edb8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55600dcd8fe8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55600dcd8fd0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55600dcd8fb8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55600dcd8f98 <col:43> 'int':'int' lvalue Var 0x55600dcd8788 'x' 'int':'int'
|         | `-ReturnStmt 0x55600dcd9090 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55600dc7c5b8 <col:20> 'bool' false
|         `-CompoundStmt 0x55600dcd9148 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55600dcd9118 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55600dcd90c0 <col:13> 'int':'int' lvalue ParmVar 0x55600dcd8418 'result' 'int &'
|           | `-ImplicitCastExpr 0x55600dcd9100 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55600dcd90e0 <col:22> 'int':'int' lvalue Var 0x55600dcd8788 'x' 'int':'int'
|           `-ReturnStmt 0x55600dcd9138 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55600dc7c658 <col:20> 'bool' true
|-FieldDecl 0x55600dc7a310 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55600dc7a378 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55600dc7a3c8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55600dc7a680 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55600dc7a408 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55600dc7a488 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55600dc7a500 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55600dc7a580 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55600dc7a988 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55600dc7a750 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55600dc7a7c8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55600dc7a860 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55600dc7cf48 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55600dc7cf48
| `-ParmVarDecl 0x55600dc7d058 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55600dc7d1d8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600dc7d2e8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55600dcd5400 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55600dcd53d0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55600dcd53a0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55600dcd5370 <col:7> 'IntArg' lvalue ParmVar 0x55600dc7d2e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55600dc7a310 'base' 'int'
| | `-ImplicitCastExpr 0x55600dcd54f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55600dcd54c8 <col:7> 'int' xvalue .base 0x55600dc7a310
| |     `-CXXStaticCastExpr 0x55600dcd5498 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55600dcd5468 <col:7> 'IntArg' lvalue ParmVar 0x55600dc7d2e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55600dc7a378 'status' 'int'
| | `-ImplicitCastExpr 0x55600dcd55c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55600dcd5598 <col:7> 'int' xvalue .status 0x55600dc7a378
| |     `-CXXStaticCastExpr 0x55600dcd5568 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55600dcd5538 <col:7> 'IntArg' lvalue ParmVar 0x55600dc7d2e8 '' 'IntArg &&'
| `-CompoundStmt 0x55600dcd5620 <col:7>
`-CXXDestructorDecl 0x55600dcd4560 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55600dc81810 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55600dc81a68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55600dcd4488 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55600dcd4a00 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55600dcd49e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55600dcd4a70 <col:19>
|-CXXConstructorDecl 0x55600dcd4668 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55600dcd4668
| `-ParmVarDecl 0x55600dcd4778 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55600dcd4818 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55600dcd4928 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55600dcd5630 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55600dcd5350 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55600dcd5320 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55600dcd52f0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55600dcd4928 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55600dcd56a0 <col:19>
`-CXXDestructorDecl 0x55600dcd4ab0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
