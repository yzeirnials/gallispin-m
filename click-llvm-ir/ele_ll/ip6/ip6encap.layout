
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136fd2f8 prev 0x55c7136f4a98 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7136fd3f0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55c7136fd480 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55c7136fd4f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55c7136fd5b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55c7136fd680 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55c7136fd7f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55c7136fd730 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55c7136fd8a0 <col:24>
| `-OptimizeNoneAttr 0x55c7136fd8f8 <col:34>
|-CXXMethodDecl 0x55c7136fd940 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55c7136fdbf8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55c7136fd9f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c7136fda68 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55c7136fdae8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55c7136fdcb0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55c7136fdce8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55c7136fdd50 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55c7136fddd8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55c7136fe0f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55c7136fde90 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c7136fdf08 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55c7136fdf80 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55c7136fe000 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55c7136fe210 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55c713705b88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c713705b88
| `-ParmVarDecl 0x55c713705c98 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55c713705d38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c713705d38
| `-ParmVarDecl 0x55c713705e48 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55c7136a91f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136f0310 prev 0x55c7136f0090 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c7136f0408 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55c7136f0498 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c7136f04f8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55c7136f05e8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55c7136f06e8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55c7136f08b8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55c7136f0768 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55c7136f07e0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55c7136f0a48 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55c7136f0980 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55c7136f0af0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55c7136f0c28 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55c7136f0b60 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55c7136f0dc8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55c7136f0d08 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55c7136f0f68 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55c7136f0ea8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55c7136f1010 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55c7136f1110 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55c7136f11f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f10f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55c7136f10d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55c7136f11a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55c7136f1208 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136f1180 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55c7136f1160 <col:44> 'int' 2
|-CXXMethodDecl 0x55c7136f1350 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55c7136f1238 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c7136f12b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55c7136f14a8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55c7136f1418 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55c7136f16e8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55c7136f1568 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55c7136f15e0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55c7136f1798 <col:20>
| `-OptimizeNoneAttr 0x55c7136f17f0 <col:30>
|-CXXMethodDecl 0x55c7136f18f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55c7136f1830 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55c7136f19a0 <col:20>
| `-OptimizeNoneAttr 0x55c7136f19f8 <col:30>
|-CXXMethodDecl 0x55c7136f1a48 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55c7136f1b10 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55c7136f1c28 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55c7136f1cb0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55c7136f1d38 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55c7136f1dc0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55c7136f1e48 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55c7136f1ed8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55c7136f1f98 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55c7136f2020 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55c7136f20a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55c7136f2130 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55c7136f21b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55c7136f2240 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55c7136f22d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55c7136f2390 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55c7136f2420 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55c7136f2570 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55c7136f24d8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55c7136f2700 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55c7136f2630 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55c7136f29b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55c7136f27b8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55c7136f2838 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55c7136f28b8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55c7136f2a68 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55c7136f2b70 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c7136f2e00 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f2b50 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7136f2b30 <col:33> 'int' 0
| |-EnumConstantDecl 0x55c7136f2c00 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c7136f2e18 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f2be0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55c7136f2bc0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55c7136f2c90 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c7136f2e30 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f2c70 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55c7136f2c50 <col:38> 'int' 90
| |-EnumConstantDecl 0x55c7136f2d20 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c7136f2e48 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f2d00 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55c7136f2ce0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55c7136f2db0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55c7136f2e60 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136f2d90 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55c7136f2d70 <col:32> 'int' 2000
|-CXXMethodDecl 0x55c7136f2ea0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55c7136f32e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c7136f3150 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c7136f31c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136f33b0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55c7136f3530 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55c7136f3460 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136f3738 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c7136f35e8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55c7136f3660 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136f3838 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55c7136f38d8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55c7136f39a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3a30 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55c7136f3c60 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f3a10 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55c7136f39f0 <col:36> 'int' EnumConstant 0x55c7136f39a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3a80 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3ad0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3b20 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3b70 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c7136f3bc0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55c7136f3c10 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55c7136f3d48 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55c7136f3c88 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55c7136f3e10 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55c7136f3ed0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55c7136f3f90 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55c7136f4050 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55c7136f4168 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55c7136f4230 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55c7136f43b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55c7136f42e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55c7136f44d8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55c7136f46d8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55c7136f4588 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55c7136f4608 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55c713702028 <col:54, line:127:5>
|   |-ParenExpr 0x55c713701ed8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55c713701ea8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55c713701b98 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c713701b70 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55c713701b58 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55c713701b40 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55c713701b10 <col:31> 'Router *' lvalue ->_router 0x55c7136ff9f0
|   |   |         `-CXXThisExpr 0x55c713701b00 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c713701bf8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c713701bd8 <col:48> 'int' 0
|   |   `-CallExpr 0x55c713701e08 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55c713701df0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c713701dd0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c713701e48 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c713701c68 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55c713701e60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c713701c88 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55c713701e78 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c713701cc0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55c713701e90 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c713701db8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c713701da0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c713701d58 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55c713701f70 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55c713701f08 <col:9> 'Router *' lvalue ->_router 0x55c7136ff9f0
|   | | `-CXXThisExpr 0x55c713701ef8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55c713701f58 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c713701f38 <col:19> 'Router *' lvalue ParmVar 0x55c7136f4588 'r' 'Router *'
|   `-BinaryOperator 0x55c713702008 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55c713701fa0 <col:9> 'int' lvalue ->_eindex 0x55c7136ffa58
|     | `-CXXThisExpr 0x55c713701f90 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55c713701ff0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c713701fd0 <col:19> 'int' lvalue ParmVar 0x55c7136f4608 'eindex' 'int'
|-CXXMethodDecl 0x55c7136f4860 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55c7136f4798 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55c7136f4930 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55c7136f49f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55c7136f4a98 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55c7136f4ce8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55c7136f4b60 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55c7136f4be0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55c7136f4d98 <col:20>
| `-OptimizeNoneAttr 0x55c7136f4df0 <col:30>
|-CXXMethodDecl 0x55c7136f4ef8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c7136f4e30 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55c7136f4fa0 <col:20>
| `-OptimizeNoneAttr 0x55c7136f4ff8 <col:30>
|-CXXMethodDecl 0x55c7136f50c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c7136f5038 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55c7136f5170 <col:20>
| `-OptimizeNoneAttr 0x55c7136f51c8 <col:30>
|-CXXMethodDecl 0x55c7136f5358 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55c7136f5200 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55c7136f5280 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55c7136f54e8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c7136f5420 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c7136f5638 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c7136f55a8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c7136f5788 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c7136f56f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c7136f58d8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c7136f5848 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c7136f5b98 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55c7136f5990 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55c7136f5a10 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55c7136f5ab8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55c7136f5c70 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55c7136f5d30 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55c7136f6000 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c7136f5eb0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55c7136f5f28 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136f6128 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55c7136f6300 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55c7136f61e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55c7136f6260 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55c7136f64e8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55c7136f63c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55c7136f6448 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55c7136f6858 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c7136f65a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c7136f6620 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c7136f66a0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c713701610 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c7137015f0 <col:106> 'int' 0
| `-ParmVarDecl 0x55c7136f6718 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c713701648 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c713701628 <col:126> 'int' 0
|-CXXMethodDecl 0x55c7136f6bf8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c7136f6928 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c7136f69c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c7136f6a40 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55c7136f6ab8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c713701680 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c713701660 <col:114> 'int' 0
|-CXXMethodDecl 0x55c7136f6f88 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c7136f6cd0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55c7136f6d48 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c7136f6dc8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55c713701698 <col:96> 'int' 0
| `-ParmVarDecl 0x55c7136f6e40 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c7137016d8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c7137016b8 <col:116> 'int' 0
|-CXXMethodDecl 0x55c7136f7308 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c7136f7058 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c7136f70d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f7150 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c713701710 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c7137016f0 <col:109> 'int' 0
| `-ParmVarDecl 0x55c7136f71c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c713701748 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c713701728 <col:129> 'int' 0
|-CXXMethodDecl 0x55c7136f7688 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c7136f73d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c7136f7450 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f74d0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55c7136f7548 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c713701780 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c713701760 <col:117> 'int' 0
|-CXXMethodDecl 0x55c7136f7a18 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c7136f7760 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136f77d8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f7858 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55c713701798 <col:99> 'int' 0
| `-ParmVarDecl 0x55c7136f78d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c7137017d8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c7137017b8 <col:119> 'int' 0
|-CXXMethodDecl 0x55c7136f7e38 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55c7136f7ae8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c7136f7b68 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c7136f7be0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f7c60 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c713701810 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c7137017f0 <col:108> 'int' 0
| `-ParmVarDecl 0x55c7136f7ce0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55c713701848 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55c713701828 <col:141> 'int' 0
|-CXXMethodDecl 0x55c7136f8258 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c7136f7f10 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c7136f7f90 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c7136f8008 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f8088 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55c7136f8108 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c713701860 <col:121> 'int' 0
|-CXXMethodDecl 0x55c7136f8688 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c7136f8338 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55c7136f83b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55c7136f8430 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c7136f84b0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55c713701880 <col:98> 'int' 0
| `-ParmVarDecl 0x55c7136f8530 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c7137018a0 <col:123> 'int' 0
|-CXXMethodDecl 0x55c7136f8950 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55c7136f8760 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c7136f87e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55c7136f8860 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55c7137018c0 <col:80> 'int' 0
|-EnumDecl 0x55c7136f8a08 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55c7136f8b10 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c7136f8da0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f8af0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55c7136f8ad0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55c7136f8ba0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c7136f8db8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f8b80 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55c7136f8b60 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c7136f8c30 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c7136f8dd0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f8c10 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55c7136f8bf0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55c7136f8cc0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c7136f8de8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136f8ca0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55c7136f8c80 <col:36> 'int' 7
| `-EnumConstantDecl 0x55c7136f8d50 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55c7136f8e00 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136f8d30 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55c7136f8d10 <col:34> 'int' 6
|-CXXMethodDecl 0x55c7136f90b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55c7136f8e28 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55c7136f8ec8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c7136f8f48 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55c7136f8fc0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55c713701978 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55c713701960 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55c713701948 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55c713701928 <col:98, col:105> 'String' (CXXTemporary 0x55c713701928)
|           `-CXXTemporaryObjectExpr 0x55c7137018f0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55c7136f9358 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55c7136f9188 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c7136f9200 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c7136f9278 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c713701a28 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c713701a10 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c7137019f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c7137019d8 <col:94, col:101> 'String' (CXXTemporary 0x55c7137019d8)
| |         `-CXXTemporaryObjectExpr 0x55c7137019a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55c713702210 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55c713702188 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55c713702158 <col:9> '<bound member function type>' ->add_task_handlers 0x55c7136f90b8
|     | `-CXXThisExpr 0x55c713702148 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c7137021c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c7137020c8 <col:27> 'Task *' lvalue ParmVar 0x55c7136f9188 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c7137021e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c7137020e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55c7136f9200 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55c7137021f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c713702108 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c7136f8d50 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c713702128 <col:62> 'const String' lvalue ParmVar 0x55c7136f9278 'prefix' 'const String &'
|-CXXMethodDecl 0x55c7136f9568 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55c7136f9420 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c7136f9498 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c713701ad8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c713701ac0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c713701aa8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c713701a88 <col:70, col:77> 'String' (CXXTemporary 0x55c713701a88)
| |         `-CXXTemporaryObjectExpr 0x55c713701a50 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55c7137023e8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55c713702360 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55c713702330 <col:9> '<bound member function type>' ->add_task_handlers 0x55c7136f90b8
|     | `-CXXThisExpr 0x55c713702320 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c7137023a0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c7137022a0 <col:27> 'Task *' lvalue ParmVar 0x55c7136f9420 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c7137023b8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55c7137022c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55c7137023d0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c7137022e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c7136f8d50 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c713702300 <col:57> 'const String' lvalue ParmVar 0x55c7136f9498 'prefix' 'const String &'
|-CXXMethodDecl 0x55c7136f9848 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55c7136f9630 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136f96b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136f9728 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55c7136f9af8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55c7136f9918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136f9998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136f9a18 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55c7136f9de8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c7136f9bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136f9c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136f9cc0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55c7136fa098 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55c7136f9eb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136f9f38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136f9fb8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55c7136fa348 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55c7136fa168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fa1e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fa268 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55c7136fa5f8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55c7136fa418 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fa498 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fa510 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55c7136fa8a8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55c7136fa6c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fa748 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fa7c8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55c7136fabb8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55c7136fa9d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136faa50 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136faad0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55c7136fae98 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55c7136fac88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fad08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fadb0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55c7136fb178 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55c7136faf68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fafe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fb090 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55c7136fb3e0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c7136fb248 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c7136fb2c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c7136fb340 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55c7136fb688 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55c7136fb4b0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c7136fb530 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c7136fb5a8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55c7136fb938 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55c7136fb758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fb7d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fb858 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55c7136fbbe8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55c7136fba08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fba88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fbb00 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55c7136fbe98 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55c7136fbcb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fbd38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fbdb0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55c7136fc168 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55c7136fbf68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fbfe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c7136fc088 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55c7136fc498 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55c7136fc238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c7136fc2b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55c7136fc330 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55c7136fc3a8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c713701af0 <col:93> 'bool' false
|-CXXMethodDecl 0x55c7136fc680 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c7136fc568 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55c7136fc5e8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55c7136fc858 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c7136fc740 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55c7136fc7c0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55c7136fcb38 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c7136fc918 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55c7136fc990 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55c7136fca10 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55c7136fca88 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136fce28 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c7136fcc08 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55c7136fcc80 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55c7136fcd00 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55c7136fcd78 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55c7136fd060 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55c7136fcf00 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55c7136fcf80 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55c7136fd248 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55c7136fd128 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55c7136fd1a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55c7136fd2f8 prev 0x55c7136f4a98 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c7136fd3f0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55c7136fd480 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55c7136fd4f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55c7136fd5b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55c7136fd680 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55c7136fd7f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55c7136fd730 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55c7136fd8a0 <col:24>
| | `-OptimizeNoneAttr 0x55c7136fd8f8 <col:34>
| |-CXXMethodDecl 0x55c7136fd940 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55c7136fdbf8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55c7136fd9f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c7136fda68 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55c7136fdae8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55c7136fdcb0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55c7136fdce8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55c7136fdd50 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55c7136fddd8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55c7136fe0f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55c7136fde90 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c7136fdf08 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55c7136fdf80 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55c7136fe000 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55c7136fe210 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55c713705b88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c713705b88
| | `-ParmVarDecl 0x55c713705c98 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55c713705d38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c713705d38
| | `-ParmVarDecl 0x55c713705e48 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55c7136a91f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c7136fe288 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55c7136fe328 <col:38> "" ""
|-CXXMethodDecl 0x55c7136fe3b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55c7136fe458 <col:44> "" ""
|-AccessSpecDecl 0x55c7136fe4c8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55c7136fe4f0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55c7136fe5f0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55c7136fe640 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136fe5d0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55c7136fe5b0 <col:27> 'int' 4
|-FieldDecl 0x55c7136fe6f8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55c7136fe8a8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55c7136fe960 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55c7136ff9f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55c7136ffa58 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55c7136ffba8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55c7136ffae8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55c7136ffd58 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55c7136ffc68 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55c7136fff38 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55c7136ffe18 <col:20> col:23 'int'
| `-ParmVarDecl 0x55c7136ffe98 <col:25> col:28 'int'
|-CXXMethodDecl 0x55c7137001e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55c713700000 <col:23> col:26 'int'
| |-ParmVarDecl 0x55c713700080 <col:28> col:31 'int'
| `-ParmVarDecl 0x55c7137000f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55c713700298 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55c713700360 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55c7137003b0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55c713700400 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55c7137005e0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55c713700490 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55c713700508 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c713700888 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55c7137006a8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55c713700728 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55c7137007a0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55c713700aa8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55c713700958 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55c7137009d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55c713700de0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55c713700b68 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55c713700be8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55c713700c60 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55c713700ce0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55c713700fc8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c713700eb0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55c713700f30 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55c713701118 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55c713701088 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55c713701498 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55c7137011d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55c713701258 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55c7137012d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55c713701350 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55c7137015b0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping AST Record Layout
         0 | class IP6Encap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ip6 _iph6
       108 |     union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
       108 |       struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
       108 |         uint32_t ip6_un1_flow
       112 |         uint16_t ip6_un1_plen
       114 |         uint8_t ip6_un1_nxt
       115 |         uint8_t ip6_un1_hlim
       108 |       uint8_t ip6_un2_vfc
       108 |       struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
   108:0-3 |         unsigned int ip6_un3_fc
   108:4-7 |         unsigned int ip6_un3_v
       116 |     struct in6_addr ip6_src
       116 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       116 |         uint8_t [16] __u6_addr8
       116 |         uint16_t [8] __u6_addr16
       116 |         uint32_t [4] __u6_addr32
       132 |     struct in6_addr ip6_dst
       132 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       132 |         uint8_t [16] __u6_addr8
       132 |         uint16_t [8] __u6_addr16
       132 |         uint32_t [4] __u6_addr32
       148 |   _Bool _use_dst_anno
           | [sizeof=152, dsize=149, align=8,
           |  nvsize=149, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c713709008 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55c713709138 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55c713709198 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55c7137091f8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
|-FieldDecl 0x55c713709258 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55c7136a7e88 <line:18:2> col:2 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55c7136a7f60 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a7f60
|-CXXConstructorDecl 0x55c7136a84f8 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a84f8
| `-ParmVarDecl 0x55c7136a8608 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &'
`-CXXConstructorDecl 0x55c7136a86a8 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a86a8
  `-ParmVarDecl 0x55c7136a87b8 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137093e0 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55c713709550 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55c713709530 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55c7137094f8 <col:28> 'int' 4
|-FieldDecl 0x55c7137095f8 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| `-ConstantExpr 0x55c7137095d8 <col:27> 'int' Int: 4
|   `-IntegerLiteral 0x55c7137095a0 <col:27> 'int' 4
|-CXXConstructorDecl 0x55c7136a8058 <line:30:2> col:2 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55c7136a8130 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a8130
|-CXXConstructorDecl 0x55c7136a8858 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a8858
| `-ParmVarDecl 0x55c7136a8968 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &'
`-CXXConstructorDecl 0x55c7136a8a08 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a8a08
  `-ParmVarDecl 0x55c7136a8b18 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon.0 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.0 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c713708ef0 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c713709008 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55c713709138 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c713709198 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55c7137091f8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| |-FieldDecl 0x55c713709258 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x55c7136a7e88 <line:18:2> col:2 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x55c7136a7f60 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a7f60
| |-CXXConstructorDecl 0x55c7136a84f8 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a84f8
| | `-ParmVarDecl 0x55c7136a8608 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &'
| `-CXXConstructorDecl 0x55c7136a86a8 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a86a8
|   `-ParmVarDecl 0x55c7136a87b8 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&'
|-FieldDecl 0x55c713709318 <col:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55c713709390 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55c7137093e0 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55c713709550 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55c713709530 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55c7137094f8 <col:28> 'int' 4
| |-FieldDecl 0x55c7137095f8 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| | `-ConstantExpr 0x55c7137095d8 <col:27> 'int' Int: 4
| |   `-IntegerLiteral 0x55c7137095a0 <col:27> 'int' 4
| |-CXXConstructorDecl 0x55c7136a8058 <line:30:2> col:2 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x55c7136a8130 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a8130
| |-CXXConstructorDecl 0x55c7136a8858 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a8858
| | `-ParmVarDecl 0x55c7136a8968 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &'
| `-CXXConstructorDecl 0x55c7136a8a08 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a8a08
|   `-ParmVarDecl 0x55c7136a8b18 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&'
|-FieldDecl 0x55c7137096b8 <col:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-CXXConstructorDecl 0x55c7136a7d98 <line:17:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c7136a9068 <col:5>
|-CXXDestructorDecl 0x55c7136a8210 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a8210
|-CXXConstructorDecl 0x55c7136a8348 <col:5> col:5 implicit constexpr  'void (const click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &)' inline default trivial noexcept-unevaluated 0x55c7136a8348
| `-ParmVarDecl 0x55c7136a8458 <col:5> col:5 'const click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &'
`-CXXConstructorDecl 0x55c7136a8bb8 <col:5> col:5 implicit constexpr  'void (click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &&)' inline default trivial noexcept-unevaluated 0x55c7136a8bb8
  `-ParmVarDecl 0x55c7136a8cc8 <col:5> col:5 'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c71342f258 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55c71342f478 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55c71342f5a8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55c71342f6d8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55c713675608 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c713675e18 <col:5>
|-CXXDestructorDecl 0x55c7136756e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c7136757e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7136758f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55c7137295c0 <col:5>
|-CXXConstructorDecl 0x55c713675998 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713675aa8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55c7137329f8 <col:5>
|-CXXMethodDecl 0x55c713676548 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713676658 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55c713736800 <col:5>
|   `-ReturnStmt 0x55c7137367f0 <col:5>
|     `-UnaryOperator 0x55c7137367d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137367c8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55c7136766c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55c7136766c8
  `-ParmVarDecl 0x55c7136767d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.1 = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7133cda20 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c71342f1c8 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55c71342f258 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55c71342f478 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55c71342f5a8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55c71342f6d8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55c713675608 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c713675e18 <col:5>
| |-CXXDestructorDecl 0x55c7136756e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c7136757e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c7136758f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55c7137295c0 <col:5>
| |-CXXConstructorDecl 0x55c713675998 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c713675aa8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55c7137329f8 <col:5>
| |-CXXMethodDecl 0x55c713676548 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c713676658 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55c713736800 <col:5>
| |   `-ReturnStmt 0x55c7137367f0 <col:5>
| |     `-UnaryOperator 0x55c7137367d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c7137367c8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55c7136766c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55c7136766c8
|   `-ParmVarDecl 0x55c7136767d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55c71342f798 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55c713675518 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c71342f798 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55c713675e28 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55c713675e80 <col:8>
|-CXXConstructorDecl 0x55c713675b18 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713675bf8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55c71342f798 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55c7137295d0 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55c713729590 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
| |     `-DeclRefExpr 0x55c713729570 <col:8> 'const in6_addr' lvalue ParmVar 0x55c713675bf8 '' 'const in6_addr &'
| `-CompoundStmt 0x55c713729630 <col:8>
|-CXXConstructorDecl 0x55c713675c98 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713675da8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55c71342f798 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55c713732a08 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55c7137329c8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55c71342f798
| |     `-CXXStaticCastExpr 0x55c713732998 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55c713732968 <col:8> 'in6_addr' lvalue ParmVar 0x55c713675da8 '' 'in6_addr &&'
| `-CompoundStmt 0x55c713732a68 <col:8>
|-CXXMethodDecl 0x55c713676848 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713676958 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55c713736878 <col:8>
|   |-CXXMemberCallExpr 0x55c713736818 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55c713736758 <col:8> '<bound member function type>' .operator= 0x55c713676548
|   | | `-MemberExpr 0x55c713736668 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55c71342f798
|   | |   `-CXXThisExpr 0x55c713736658 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55c713736728 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|   |   `-DeclRefExpr 0x55c713736708 <col:8> 'const in6_addr' lvalue ParmVar 0x55c713676958 '' 'const in6_addr &'
|   `-ReturnStmt 0x55c713736868 <col:8>
|     `-UnaryOperator 0x55c713736850 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c713736840 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55c7136769c8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55c7136769c8
| `-ParmVarDecl 0x55c713676ad8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55c713676e78 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon.1 }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c713708d68 prev 0x55c7136b6f50 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c713708e60 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55c713708ef0 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c713709008 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x55c713709138 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55c713709198 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55c7137091f8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| | |-FieldDecl 0x55c713709258 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x55c7136a7e88 <line:18:2> col:2 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x55c7136a7f60 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a7f60
| | |-CXXConstructorDecl 0x55c7136a84f8 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a84f8
| | | `-ParmVarDecl 0x55c7136a8608 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &'
| | `-CXXConstructorDecl 0x55c7136a86a8 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a86a8
| |   `-ParmVarDecl 0x55c7136a87b8 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2) &&'
| |-FieldDecl 0x55c713709318 <col:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55c713709390 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55c7137093e0 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x55c713709550 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55c713709530 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55c7137094f8 <col:28> 'int' 4
| | |-FieldDecl 0x55c7137095f8 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| | | `-ConstantExpr 0x55c7137095d8 <col:27> 'int' Int: 4
| | |   `-IntegerLiteral 0x55c7137095a0 <col:27> 'int' 4
| | |-CXXConstructorDecl 0x55c7136a8058 <line:30:2> col:2 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x55c7136a8130 <col:2> col:2 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a8130
| | |-CXXConstructorDecl 0x55c7136a8858 <col:2> col:2 implicit constexpr  'void (const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &)' inline default trivial noexcept-unevaluated 0x55c7136a8858
| | | `-ParmVarDecl 0x55c7136a8968 <col:2> col:2 'const click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &'
| | `-CXXConstructorDecl 0x55c7136a8a08 <col:2> col:2 implicit constexpr  'void (click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&)' inline default trivial noexcept-unevaluated 0x55c7136a8a08
| |   `-ParmVarDecl 0x55c7136a8b18 <col:2> col:2 'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2) &&'
| |-FieldDecl 0x55c7137096b8 <col:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
| |-CXXConstructorDecl 0x55c7136a7d98 <line:17:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c7136a9068 <col:5>
| |-CXXDestructorDecl 0x55c7136a8210 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55c7136a8210
| |-CXXConstructorDecl 0x55c7136a8348 <col:5> col:5 implicit constexpr  'void (const click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &)' inline default trivial noexcept-unevaluated 0x55c7136a8348
| | `-ParmVarDecl 0x55c7136a8458 <col:5> col:5 'const click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &'
| `-CXXConstructorDecl 0x55c7136a8bb8 <col:5> col:5 implicit constexpr  'void (click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &&)' inline default trivial noexcept-unevaluated 0x55c7136a8bb8
|   `-ParmVarDecl 0x55c7136a8cc8 <col:5> col:5 'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5) &&'
|-FieldDecl 0x55c713709868 <col:5, line:39:7> col:7 ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55c7137098f0 <line:40:5, col:21> col:21 ip6_src 'struct in6_addr':'in6_addr'
|-FieldDecl 0x55c713709960 <line:41:5, col:21> col:21 ip6_dst 'struct in6_addr':'in6_addr'
|-CXXConstructorDecl 0x55c7136a7ca0 <line:16:8> col:8 implicit used click_ip6 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c713709868 'ip6_ctlun' 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
| | `-CXXConstructExpr 0x55c7136a9078 <col:8> 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c7137098f0 'ip6_src' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c7136a90c8 <col:8> 'struct in6_addr':'in6_addr' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c713709960 'ip6_dst' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c7136a9118 <col:8> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c7136a9180 <col:8>
|-CXXConstructorDecl 0x55c7136a8d38 <col:8> col:8 implicit constexpr click_ip6 'void (const click_ip6 &)' inline default trivial noexcept-unevaluated 0x55c7136a8d38
| `-ParmVarDecl 0x55c7136a8e48 <col:8> col:8 'const click_ip6 &'
`-CXXConstructorDecl 0x55c7136a8ee8 <col:8> col:8 implicit constexpr click_ip6 'void (click_ip6 &&)' inline default trivial noexcept-unevaluated 0x55c7136a8ee8
  `-ParmVarDecl 0x55c7136a8ff8 <col:8> col:8 'click_ip6 &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c71373a920 <../elements/ip6/ip6encap.hh:60:1, line:81:1> line:60:7 class IP6Encap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55c71373aa78 <col:1, col:7> col:7 implicit referenced class IP6Encap
|-AccessSpecDecl 0x55c71373ab08 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55c71373ab90 <line:62:3, col:12> col:3 IP6Encap 'void ()'
|-CXXDestructorDecl 0x55c71373ac80 <line:63:3, col:13> col:3 ~IP6Encap 'void ()' noexcept-unevaluated 0x55c71373ac80
| `-Overrides: [ 0x55c7136f05e8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55c71373adb0 <line:65:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55c7136f1a48 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55c71373bb30 <col:34, col:55>
|   `-ReturnStmt 0x55c71373bb20 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c71373bb08 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55c71373bae8 <col:43> 'const char [9]' lvalue "IP6Encap"
|-CXXMethodDecl 0x55c71373ae78 <line:66:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55c7136f1b10 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55c71373bb90 <col:34, col:54>
|   `-ReturnStmt 0x55c71373bb80 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c71373bb68 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c71373bb48 <col:43> 'const char []' lvalue Var 0x55c7136f1dc0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55c71373b150 <line:68:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55c7136f32e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55c71373b000 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55c71373b078 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55c71373b220 <line:69:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55c7136f5d30 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55c71373bbc8 <col:37, col:52>
|   `-ReturnStmt 0x55c71373bbb8 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x55c71373bba8 <col:46> 'bool' true
|-CXXMethodDecl 0x55c71373b2e0 <line:70:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55c7136f33b0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55c71373b420 <line:72:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55c7136f0c28 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55c71373b390 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55c71373b4c8 <line:74:2, col:9> col:2 private
|-FieldDecl 0x55c71373b500 <line:76:3, col:13> col:13 _iph6 'click_ip6'
|-FieldDecl 0x55c71373b560 <line:77:3, col:8> col:8 referenced _use_dst_anno 'bool'
|-CXXMethodDecl 0x55c71373b6d8 <line:79:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c71373b5c0 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x55c71373b640 <col:41, col:46> col:47 'void *'
|-CXXConstructorDecl 0x55c71373b7b8 <line:60:7> col:7 implicit IP6Encap 'void (const IP6Encap &)' inline default_delete noexcept-unevaluated 0x55c71373b7b8
| `-ParmVarDecl 0x55c71373b8c8 <col:7> col:7 'const IP6Encap &'
`-CXXMethodDecl 0x55c71373b968 <col:7> col:7 implicit operator= 'IP6Encap &(const IP6Encap &)' inline default_delete noexcept-unevaluated 0x55c71373b968
  `-ParmVarDecl 0x55c71373ba78 <col:7> col:7 'const IP6Encap &'

Layout: <CGRecordLayout
  LLVMType:%class.IP6Encap = type <{ %class.Element.base, %struct.click_ip6, i8, [3 x i8] }>
  NonVirtualBaseLLVMType:%class.IP6Encap.base = type <{ %class.Element.base, %struct.click_ip6, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7134c31a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c7134c32b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55c7134c3358 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55c7134c33b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55c7134c3418 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55c7134c34c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7134c37d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7134c38e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55c7134c3990 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55c7134c39f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55c7134c3a88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55c7134c9b20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c7134c9f58 <col:12>
|-CXXConstructorDecl 0x55c7134c9c28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7134c9d38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c7134c3990 'data' 'const char *'
| | `-ImplicitCastExpr 0x55c7134cc4e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55c7134cc4b0 <col:12> 'const char *const' lvalue .data 0x55c7134c3990
| |     `-DeclRefExpr 0x55c7134cc490 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c7134c39f8 'length' 'int'
| | `-ImplicitCastExpr 0x55c7134cc570 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c7134cc540 <col:12> 'const int' lvalue .length 0x55c7134c39f8
| |     `-DeclRefExpr 0x55c7134cc520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c7134c3a88 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55c7134cc600 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55c7134cc5d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c7134c3a88
| |     `-DeclRefExpr 0x55c7134cc5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| `-CompoundStmt 0x55c7134cc658 <col:12>
|-CXXConstructorDecl 0x55c7134c9dd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c7134c9dd8
| `-ParmVarDecl 0x55c7134c9ee8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55c7134cf440 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c7134dae58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7134daf68 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55c7134db480 <col:12>
|   |-BinaryOperator 0x55c7134db298 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c7134db250 <col:12> 'const char *' lvalue ->data 0x55c7134c3990
|   | | `-CXXThisExpr 0x55c7134db240 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c7134db280 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55c7134db210 <col:12> 'const char *const' lvalue .data 0x55c7134c3990
|   |     `-DeclRefExpr 0x55c7134db1f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c7134db360 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55c7134db318 <col:12> 'int' lvalue ->length 0x55c7134c39f8
|   | | `-CXXThisExpr 0x55c7134db308 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c7134db348 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55c7134db2d8 <col:12> 'const int' lvalue .length 0x55c7134c39f8
|   |     `-DeclRefExpr 0x55c7134db2b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c7134db428 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55c7134db3e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55c7134c3a88
|   | | `-CXXThisExpr 0x55c7134db3d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c7134db410 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55c7134db3a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c7134c3a88
|   |     `-DeclRefExpr 0x55c7134db380 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55c7134db470 <col:12>
|     `-UnaryOperator 0x55c7134db458 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7134db448 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55c7134dafd8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c7134dafd8
  `-ParmVarDecl 0x55c7134db0e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7134ba710 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c7134ba828 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55c7134ba8b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55c7134ba8f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c71318dfd0 'const char *'
|   `-QualType 0x55c71318d521 'const char' const
|     `-BuiltinType 0x55c71318d520 'char'
|-TypedefDecl 0x55c7134ba980 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55c7134ba950 'String::const_iterator' sugar
|   |-Typedef 0x55c7134ba8f8 'const_iterator'
|   `-PointerType 0x55c71318dfd0 'const char *'
|     `-QualType 0x55c71318d521 'const char' const
|       `-BuiltinType 0x55c71318d520 'char'
|-TypedefDecl 0x55c7134baaf0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55c7134baa60 'int (String::*)() const'
|   |-RecordType 0x55c7134ba7a0 'String'
|   | `-CXXRecord 0x55c7134ba710 'String'
|   `-ParenType 0x55c7134baa00 'int () const' sugar
|     `-FunctionProtoType 0x55c71348f5a0 'int () const' const cdecl
|       `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7134bab58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55c7132e4180 'int64_t' sugar
|   |-Typedef 0x55c7131f6390 'int64_t'
|   `-TypedefType 0x55c7131cf630 '__int64_t' sugar
|     |-Typedef 0x55c7131cf208 '__int64_t'
|     `-BuiltinType 0x55c71318d5a0 'long'
|-TypedefDecl 0x55c7134babc0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55c7132e40a0 'uint64_t' sugar
|   |-Typedef 0x55c7131f6530 'uint64_t'
|   `-TypedefType 0x55c7131cf6c0 '__uint64_t' sugar
|     |-Typedef 0x55c7131cf278 '__uint64_t'
|     `-BuiltinType 0x55c71318d640 'unsigned long'
|-TypedefDecl 0x55c7134bac50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55c7134bac20 'String::intmax_t' sugar
|   |-Typedef 0x55c7134bab58 'intmax_t'
|   `-TypedefType 0x55c7132e4180 'int64_t' sugar
|     |-Typedef 0x55c7131f6390 'int64_t'
|     `-TypedefType 0x55c7131cf630 '__int64_t' sugar
|       |-Typedef 0x55c7131cf208 '__int64_t'
|       `-BuiltinType 0x55c71318d5a0 'long'
|-TypedefDecl 0x55c7134bace0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55c7134bacb0 'String::uintmax_t' sugar
|   |-Typedef 0x55c7134babc0 'uintmax_t'
|   `-TypedefType 0x55c7132e40a0 'uint64_t' sugar
|     |-Typedef 0x55c7131f6530 'uint64_t'
|     `-TypedefType 0x55c7131cf6c0 '__uint64_t' sugar
|       |-Typedef 0x55c7131cf278 '__uint64_t'
|       `-BuiltinType 0x55c71318d640 'unsigned long'
|-CXXConstructorDecl 0x55c7134bada0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55c7134baf48 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55c7134bae88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55c7134bb0f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55c7134bb038 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55c7134bb250 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55c7134bb1c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55c7134bb468 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c7134bb318 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55c7134bb398 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55c7134bb688 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c7134bb538 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55c7134bb5b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55c7134bb8a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c7134bb758 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55c7134bb7d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55c7134bbac8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c7134bb978 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55c7134bb9f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55c7134bbc58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55c7134bbb90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55c7134bbdd8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55c7134bbd18 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55c7134bbf68 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c7134bbea0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55c7134bc0c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55c7134bc030 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55c7134bc218 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55c7134bc188 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55c7134bc370 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55c7134bc2e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55c7134bc4f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55c7134bc438 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55c7134bc688 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55c7134bc5c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55c7134bc818 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55c7134bc750 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55c7134bc9a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55c7134bc8e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55c7134bcaa0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55c7134bcbc8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55c7134bcd48 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55c7134bcc80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55c7134bce98 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55c7134bce08 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55c7134bcf50 <col:63> "" ""
|-CXXMethodDecl 0x55c7134bd098 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55c7134bcfd8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55c7134bd2a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55c7134bd158 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55c7134bd1d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55c7134bd4c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55c7134bd370 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55c7134bd3f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55c7134bd7a8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55c7134bd588 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c7134bd608 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55c7134c95f0 <col:55> 'int' 10
| `-ParmVarDecl 0x55c7134bd680 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c7134c9610 <col:76> 'bool' true
|-CXXMethodDecl 0x55c7134bda88 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55c7134bd870 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c7134bd8f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c7134c9620 <col:56> 'int' 10
| `-ParmVarDecl 0x55c7134bd968 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c7134c9640 <col:77> 'bool' true
|-CXXMethodDecl 0x55c7134bdb90 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c7134bdc58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c7134bdd20 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55c7134bddc0 <col:20>
| `-OptimizeNoneAttr 0x55c7134bde18 <col:30>
|-CXXConversionDecl 0x55c7134bdf08 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c7134bdfd8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55c7134be098 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c7134be188 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c7134be248 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c7134be3c8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c7134be300 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c7134be518 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55c7134be488 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55c7134be608 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c7134be6c8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c7134be918 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55c7134be780 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55c7134be800 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55c7134beb78 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55c7134be9e0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55c7134bea60 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55c7134bec48 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7134bee58 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55c7134bed00 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55c7134bed80 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55c7134bf078 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55c7134bef20 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55c7134befa0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55c7134bf208 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55c7134bf140 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55c7134bf2f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55c7134bf468 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c7134bf3a8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c7134bf678 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55c7134bf528 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c7134bf5a8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c7134bf890 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55c7134bf738 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55c7134bf7b0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55c7134bfa20 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55c7134bf950 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c7134bfc40 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55c7134bfae0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55c7134bfb60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c7134bfd90 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c7134bfd00 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55c7134bff68 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c7134bfe50 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c7134bfed0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c7134c00b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55c7134c0028 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55c7134c02d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55c7134c0170 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55c7134c01f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55c7134c9650 <col:39> 'int' 0
|-CXXMethodDecl 0x55c7134c04f0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55c7134c0390 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55c7134c0410 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55c7134c9670 <col:48> 'int' 0
|-CXXMethodDecl 0x55c7134c06d0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55c7134c05b0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55c7134c0630 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55c7134c9690 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55c7134c07a0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55c7134c0860 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55c7134c0920 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55c7134c09e0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55c7134c0aa0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55c7134c0c48 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c7134c0b50 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55c7134c0dc8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55c7134c0d00 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55c7134c0fa0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c7134c0e88 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55c7134c1118 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55c7134c1058 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55c7134c1260 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55c7134c11d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c7134c13b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c7134c1320 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c7134c1588 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c7134c1470 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c7134c14f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c7134c1768 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c7134c1650 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c7134c16d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c7134c18b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55c7134c1828 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c7134c1ac8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c7134c1978 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c7134c19f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c7134c1c28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55c7134c1b90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c7134c1d80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55c7134c1ce8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55c7134c1e28 <col:57> "" ""
|-CXXMethodDecl 0x55c7134c1f38 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c7134c1ea8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55c7134c2088 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c7134c1ff8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55c7134c2208 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55c7134c2140 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55c7134c22d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55c7134c2390 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55c7134c2450 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55c7134c24f0 <col:49> "" ""
|-CXXMethodDecl 0x55c7134c2580 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55c7134c2640 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55c7134c2730 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55c7134c27f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55c7134c28b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55c7134c2978 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c7134c2a70 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55c7134c2b38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55c7134c2c00 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55c7134c2dd8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55c7134c2cb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55c7134c2d38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55c7134c3000 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55c7134c2ea0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55c7134c2f20 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55c7134c3110 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55c7134c3178 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55c7134c31a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55c7134c32b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55c7134c3358 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55c7134c33b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c7134c3418 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55c7134c34c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55c7134c3530 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55c7134c3768 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55c7134c37b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7134c3748 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55c7134c3658 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55c7134c3600 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55c7134c3640 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55c7134c3620 <col:32> 'int' 8
|-CXXRecordDecl 0x55c7134c37d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c7134c38e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55c7134c3990 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55c7134c39f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55c7134c3a88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55c7134c9b20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c7134c9f58 <col:12>
| |-CXXConstructorDecl 0x55c7134c9c28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c7134c9d38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c7134c3990 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55c7134cc4e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c7134cc4b0 <col:12> 'const char *const' lvalue .data 0x55c7134c3990
| | |     `-DeclRefExpr 0x55c7134cc490 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c7134c39f8 'length' 'int'
| | | `-ImplicitCastExpr 0x55c7134cc570 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c7134cc540 <col:12> 'const int' lvalue .length 0x55c7134c39f8
| | |     `-DeclRefExpr 0x55c7134cc520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c7134c3a88 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55c7134cc600 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55c7134cc5d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c7134c3a88
| | |     `-DeclRefExpr 0x55c7134cc5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134c9d38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55c7134cc658 <col:12>
| |-CXXConstructorDecl 0x55c7134c9dd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c7134c9dd8
| | `-ParmVarDecl 0x55c7134c9ee8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55c7134cf440 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c7134dae58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c7134daf68 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55c7134db480 <col:12>
| |   |-BinaryOperator 0x55c7134db298 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55c7134db250 <col:12> 'const char *' lvalue ->data 0x55c7134c3990
| |   | | `-CXXThisExpr 0x55c7134db240 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c7134db280 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c7134db210 <col:12> 'const char *const' lvalue .data 0x55c7134c3990
| |   |     `-DeclRefExpr 0x55c7134db1f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c7134db360 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55c7134db318 <col:12> 'int' lvalue ->length 0x55c7134c39f8
| |   | | `-CXXThisExpr 0x55c7134db308 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c7134db348 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55c7134db2d8 <col:12> 'const int' lvalue .length 0x55c7134c39f8
| |   |     `-DeclRefExpr 0x55c7134db2b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c7134db428 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55c7134db3e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55c7134c3a88
| |   | | `-CXXThisExpr 0x55c7134db3d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c7134db410 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c7134db3a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c7134c3a88
| |   |     `-DeclRefExpr 0x55c7134db380 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c7134daf68 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55c7134db470 <col:12>
| |     `-UnaryOperator 0x55c7134db458 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c7134db448 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55c7134dafd8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c7134dafd8
|   `-ParmVarDecl 0x55c7134db0e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55c7134c3b00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55c7134c3d48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55c7134c3b68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55c7134c3be8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55c7134c3c60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55c7134c9ae0 <col:79, line:261:5>
|   |-BinaryOperator 0x55c7134c9758 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c7134c96f0 <col:2, col:5> 'const char *' lvalue .data 0x55c7134c3990
|   | | `-MemberExpr 0x55c7134c96c0 <col:2> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|   | |   `-CXXThisExpr 0x55c7134c96b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c7134c9740 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c7134c9720 <col:12> 'const char *' lvalue ParmVar 0x55c7134c3b68 'data' 'const char *'
|   |-BinaryOperator 0x55c7134c9820 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55c7134c97b8 <col:2, col:5> 'int' lvalue .length 0x55c7134c39f8
|   | | `-MemberExpr 0x55c7134c9788 <col:2> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|   | |   `-CXXThisExpr 0x55c7134c9778 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c7134c9808 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c7134c97e8 <col:14> 'int' lvalue ParmVar 0x55c7134c3be8 'length' 'int'
|   `-IfStmt 0x55c7134c9ac8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55c7134c9940 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c7134c9928 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55c7134c9908 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55c7134c98e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55c7134c9880 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|     |       | `-MemberExpr 0x55c7134c9850 <col:7> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|     |       |   `-CXXThisExpr 0x55c7134c9840 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55c7134c98d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c7134c98b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55c7134c3c60 'memo' 'String::memo_t *'
|     `-CallExpr 0x55c7134c9aa0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55c7134c9a88 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c7134c9990 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55c7134b2778 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55c7134c99f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c7134c3358
|         `-ImplicitCastExpr 0x55c7134c99e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55c7134c99c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55c7134c3c60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55c7134c3ff8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55c7134c3e18 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55c7134c3e98 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55c7134c3f10 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55c7134c3b00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55c7134c9f68 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c7134ca0f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55c7134ca060 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55c7134c9fd0 <col:2> '<bound member function type>' ->assign_memo 0x55c7134c3d48
|     | `-ImplicitCastExpr 0x55c7134ca098 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55c7134c9fc0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55c7134ca0b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c7134ca000 <col:14> 'const char *' lvalue ParmVar 0x55c7134c3e18 'data' 'const char *'
|     |-ImplicitCastExpr 0x55c7134ca0c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c7134ca020 <col:20> 'int' lvalue ParmVar 0x55c7134c3e98 'length' 'int'
|     `-ImplicitCastExpr 0x55c7134ca0e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55c7134ca040 <col:28> 'String::memo_t *' lvalue ParmVar 0x55c7134c3f10 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55c7134c4188 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55c7134c40c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55c7134ca350 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55c7134ca2d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55c7134ca120 <col:2> '<bound member function type>' ->assign_memo 0x55c7134c3d48
|     | `-CXXThisExpr 0x55c7134ca110 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55c7134ca308 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55c7134ca1a0 <col:14, col:19> 'const char *' lvalue .data 0x55c7134c3990
|     |   `-MemberExpr 0x55c7134ca170 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55c7134c3b00
|     |     `-DeclRefExpr 0x55c7134ca150 <col:14> 'const String' lvalue ParmVar 0x55c7134c40c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55c7134ca320 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55c7134ca220 <col:25, col:30> 'int' lvalue .length 0x55c7134c39f8
|     |   `-MemberExpr 0x55c7134ca1f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55c7134c3b00
|     |     `-DeclRefExpr 0x55c7134ca1d0 <col:25> 'const String' lvalue ParmVar 0x55c7134c40c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55c7134ca338 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55c7134ca2a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|         `-MemberExpr 0x55c7134ca270 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55c7134c3b00
|           `-DeclRefExpr 0x55c7134ca250 <col:38> 'const String' lvalue ParmVar 0x55c7134c40c8 'x' 'const String &'
|-CXXMethodDecl 0x55c7134c4250 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55c7134cad10 <col:31, line:278:5>
|   `-IfStmt 0x55c7134cacf8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55c7134ca3f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c7134ca3d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55c7134ca3a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|     |     `-MemberExpr 0x55c7134ca378 <col:6> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|     |       `-CXXThisExpr 0x55c7134ca368 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55c7134cacd0 <col:15, line:277:2>
|       |-ParenExpr 0x55c7134ca8a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55c7134ca870 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55c7134ca500 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55c7134ca4e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55c7134ca4d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55c7134ca490 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c7134c3358
|       |   |       `-ImplicitCastExpr 0x55c7134ca478 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55c7134ca448 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|       |   |           `-MemberExpr 0x55c7134ca418 <col:27> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|       |   |             `-CXXThisExpr 0x55c7134ca408 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55c7134ca560 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55c7134ca540 <col:54> 'int' 0
|       |   `-CallExpr 0x55c7134ca7d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55c7134ca7b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c7134ca738 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55c7134ca810 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c7134ca648 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55c7134ca828 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c7134ca678 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55c7134ca840 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55c7134ca6b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55c7134ca858 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55c7134ca720 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55c7134ca708 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55c7134ca6d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55c7134cabf0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55c7134caab0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55c7134caa98 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55c7134caa10 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55c7134b3bc0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55c7134ca9e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c7134c3358
|       | |   `-ImplicitCastExpr 0x55c7134ca9c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55c7134ca998 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|       | |       `-MemberExpr 0x55c7134ca968 <col:40> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|       | |         `-CXXThisExpr 0x55c7134ca958 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55c7134cabb0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55c7134cab98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c7134caad8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55c7134c8a30 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55c7134cabd8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55c7134cab38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|       |       `-MemberExpr 0x55c7134cab08 <col:15> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|       |         `-CXXThisExpr 0x55c7134caaf8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55c7134cacb0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55c7134cac48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c7134c3a88
|         | `-MemberExpr 0x55c7134cac18 <col:6> 'String::rep_t' lvalue ->_r 0x55c7134c3b00
|         |   `-CXXThisExpr 0x55c7134cac08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55c7134cac98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55c7134cac78 <col:16> 'int' 0
|-CXXMethodDecl 0x55c7134c44e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55c7134c4308 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c7134c4388 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c7134c4400 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55c7134c45c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c7134c4810 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55c7134c4678 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c7134c46f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c7134c4770 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c7134c49f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55c7134c48e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55c7134c4960 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55c7134c4af8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55c7134cade8 <col:41, line:286:5>
|   `-ReturnStmt 0x55c7134cadd8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55c7134cada8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55c7134cad70 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55c7134cad58 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55c7134cad38 <col:46> 'int' 1
|-CXXMethodDecl 0x55c7134c4d98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55c7134c4bb0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55c7134c4c30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55c7134c4cb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55c7134c8a30 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55c7134c4e60 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c7134c8b00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55c7134c8cd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c7134c8bb8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c7134c8c38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55c7134c8d90 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55c7134c8e58 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55c7134c8f58 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55c7134c8fd0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55c7134c9048 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55c7134c90b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55c7134c91b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55c7134c9200 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7134c9190 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55c7134c9170 <col:22> 'int' 14
|-CXXMethodDecl 0x55c7134c9418 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55c7134c9230 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55c7134c92b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55c7134c9330 <col:43> col:46 'int'
|-FriendDecl 0x55c7134c9520 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55c7134c95b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c71358c6b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55c71358c888 prev 0x55c71358c6b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c71358c918 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c71358c940 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c71358e2a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55c71358e250 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55c71358e230 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55c71358cb58 'type'
|     `-SubstTemplateTypeParmType 0x55c71358cb20 'String' sugar
|       |-TemplateTypeParmType 0x55c71347efc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71347ef70 'T'
|       `-RecordType 0x55c7134ba7a0 'String'
|         `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71358e358 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55c71358e320 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55c71358e300 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c71358e2a0 'type'
|     `-ElaboratedType 0x55c71358e250 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55c71358e230 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55c71358cb58 'type'
|         `-SubstTemplateTypeParmType 0x55c71358cb20 'String' sugar
|           |-TemplateTypeParmType 0x55c71347efc0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c71347ef70 'T'
|           `-RecordType 0x55c7134ba7a0 'String'
|             `-CXXRecord 0x55c7134ba710 'String'
|-CXXMethodDecl 0x55c71358e4d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55c71358e3e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55c71358e5c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c71358e6a8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c71358e978 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c71358e880 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55c713769440 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c71358ea30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c71358eaa8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c713769610 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c713769500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c713769578 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c713769768 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c713769838 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c713769a88 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c7137698f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c713769970 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c713769ce8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55c713769b58 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c713769bd0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c713769ea8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c713769db8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c71376a068 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c713769f70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c71376a120 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c71376a1d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c71376a408 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c71376a280 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c71376a2f8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c71376a6a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c71376a5b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55c71376a770 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55c71376a7c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c71376a810 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c7136f2f50 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c71358b118 prev 0x55c7136f2f50 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c71358c620 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55c71358c5d0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55c71358c5b0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c71358c460 'type'
|     `-SubstTemplateTypeParmType 0x55c71358c2f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55c713454d70 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55c713454d18 'F'
|       `-RecordType 0x55c71358bf50 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55c71358be70 'typed_array_memory'
|-FieldDecl 0x55c71376a860 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55c71376a8b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c71376a8e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|   |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c71348c288 'T'
|   `-RecordType 0x55c7134ba7a0 'String'
|     `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376a978 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55c71376a940 'String &'
|   `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-RecordType 0x55c7134ba7a0 'String'
|       `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376aa08 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55c71376a9d0 'const String &'
|   `-QualType 0x55c71358b1b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-RecordType 0x55c7134ba7a0 'String'
|         `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376aa98 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55c71376aa60 'String *'
|   `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-RecordType 0x55c7134ba7a0 'String'
|       `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376ab28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55c71376aaf0 'const String *'
|   `-QualType 0x55c71358b1b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-RecordType 0x55c7134ba7a0 'String'
|         `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376b780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55c71376b730 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55c71376b710 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55c71376b648 'type'
|     `-LValueReferenceType 0x55c71376b610 'const String &'
|       `-QualType 0x55c71376b3b1 'const String' const
|         `-SubstTemplateTypeParmType 0x55c71376b3b0 'String' sugar
|           |-TemplateTypeParmType 0x55c71345ecc0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c71345ec68 'T'
|           `-RecordType 0x55c7134ba7a0 'String'
|             `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376b7e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55c71376a9d0 'const String &'
|   `-QualType 0x55c71358b1b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-RecordType 0x55c7134ba7a0 'String'
|         `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376b840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c71376b8a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55c71376aa60 'String *'
|   `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-RecordType 0x55c7134ba7a0 'String'
|       `-CXXRecord 0x55c7134ba710 'String'
|-TypedefDecl 0x55c71376b910 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55c71376aaf0 'const String *'
|   `-QualType 0x55c71358b1b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c71358b1b0 'String' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-RecordType 0x55c7134ba7a0 'String'
|         `-CXXRecord 0x55c7134ba710 'String'
|-EnumDecl 0x55c71376b968 <line:134:5> col:5
| `-EnumConstantDecl 0x55c71376ba60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c71376ba40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c71348d968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c71348d940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c71348d920 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c71376bae8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55c71376bd78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c71376bba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c71376bc40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55c71376c008 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55c71376bef0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55c71376c2c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55c71376c1b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c71376c5e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55c71376c4c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55c71376c8f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55c71376c7d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c71376cbe0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c71376ca28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c71376caa0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c71376cd08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c71376cdb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376ce10 <col:30> Inherited
|-CXXMethodDecl 0x55c71376ce58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c71376cf08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376cf60 <col:30> Inherited
|-CXXMethodDecl 0x55c71376d028 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c71376d0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376d130 <col:30> Inherited
|-CXXMethodDecl 0x55c71376d178 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c71376d228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376d280 <col:30> Inherited
|-CXXMethodDecl 0x55c71376d2c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c71376d378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376d3d0 <col:30> Inherited
|-CXXMethodDecl 0x55c71376d418 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c71376d4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c71376d520 <col:30> Inherited
|-CXXMethodDecl 0x55c71376d548 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c71376d5f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c71376d6a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c71376d868 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c71376d758 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c71376d7d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c71376d9b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c71376d928 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c71376db68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55c71376da70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c71376dc20 <col:20>
| `-OptimizeNoneAttr 0x55c71376dc78 <col:30>
|-CXXMethodDecl 0x55c71376dd98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55c71376dca0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c71376de50 <col:20>
| `-OptimizeNoneAttr 0x55c71376dea8 <col:30>
|-CXXMethodDecl 0x55c71376df60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c71376ded0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c71376e0a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c71376e018 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c71376e1d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55c71376e2d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55c71376e3a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55c71376e478 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55c71376e5b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c71376e528 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c71376e700 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c71376e670 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c71376e848 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c71376e7b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c71376e900 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c71376ea00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c71376e970 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c71376eab8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c71376eb78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55c71376ec78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55c71376edf8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c71376ed38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55c71376f5b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c71376eeb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55c71376f518 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55c71376f418 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55c71376f698 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c71376f7e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c71376f758 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c71376f8a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c71376fae8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c71376f960 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c71376f9d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c71376fc78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55c71376fbb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c71376fe88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55c71376fd40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c71376fdb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c71376ff48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c7137701a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55c7137700b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55c713770278 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55c71381cea8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c71381f838 prev 0x55c713808110 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c71381f930 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55c71381f9c0 <col:22, col:28> col:22 public
|-EnumDecl 0x55c71381f9e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55c71381fb08 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fae8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55c71381fad0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c71381fab0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55c71381fbb0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fb90 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55c71381fb78 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c71381fb58 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c71381fc40 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fc20 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55c71381fc00 <col:17> 'int' 0
| |-EnumConstantDecl 0x55c71381fcd0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fcb0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55c71381fc90 <col:13> 'int' 1
| |-EnumConstantDecl 0x55c71381fd60 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fd40 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55c71381fd20 <col:16> 'int' 2
| |-EnumConstantDecl 0x55c71381fdf0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fdd0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55c71381fdb0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55c71381fe80 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fe60 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55c71381fe40 <col:15> 'int' 4
| |-EnumConstantDecl 0x55c71381ff10 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381fef0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55c71381fed0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55c71381ffa0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c71381ff80 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55c71381ff60 <col:12> 'int' 6
| `-EnumConstantDecl 0x55c713820030 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55c713820010 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55c71381fff0 <col:13> 'int' 7
|-VarDecl 0x55c7138200a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55c713820128 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55c7138201b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55c713820238 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55c7138202c0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55c713820348 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55c7138203d0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55c713820458 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55c7138204e0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55c713820568 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55c7138205f0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55c7138206f0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55c71382f9f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55c713830188 <line:128:13> 'int' 0
| `-CompoundStmt 0x55c7138301f8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55c7138207e0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55c713830208 <col:29, line:132:5>
|-CXXMethodDecl 0x55c713820998 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55c7138208d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c713820a60 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c713820b48 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c713830260 <col:44, line:161:5>
|   `-ReturnStmt 0x55c713830250 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55c713830238 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c713830218 <col:9> 'ErrorHandler *' lvalue Var 0x55c71382fa58 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55c713820c88 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55c713820bf8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c713820d50 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c7138302c0 <col:43, line:173:5>
|   `-ReturnStmt 0x55c7138302b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55c713830298 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c713830278 <col:9> 'ErrorHandler *' lvalue Var 0x55c71382fad0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55c713820e08 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55c713820e88 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55c713820f98 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55c713820f08 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c7138210e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55c713821058 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c713821240 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55c7138211a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55c713821398 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55c713821300 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c7138214f0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55c713821458 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c713821700 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c7138215a8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55c713821628 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55c7138218d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c7138217c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55c713821840 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55c713821af8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c713821998 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55c713821a18 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55c713821cd8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c713821bb8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c713821c38 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c713821eb8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c713821d98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c713821e18 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c713822040 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55c713821f78 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55c713822210 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55c7138220f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c713822170 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55c713830518 <col:57, line:234:5>
|   `-ReturnStmt 0x55c713830508 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55c7138304f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c713830498 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c713830468 <col:9> '<bound member function type>' ->xmessage 0x55c713822040
|         | `-CXXThisExpr 0x55c713830458 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55c7138304d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c7138304c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c713830438 <col:18, col:40> 'String' (CXXTemporary 0x55c713830438)
|               `-CallExpr 0x55c713830400 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55c7138303e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55c713830360 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c713824208 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55c713830380 <col:31> 'const String' lvalue ParmVar 0x55c713822170 'str' 'const String &'
|                 `-DeclRefExpr 0x55c7138303a0 <col:36> 'const String' lvalue ParmVar 0x55c7138220f8 'anno' 'const String &'
|-CXXMethodDecl 0x55c7138224f0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c7138222d0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c713822350 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55c7138223c8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c7138307a8 <col:68, line:243:5>
|   `-ReturnStmt 0x55c713830798 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55c713830780 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c713830720 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c7138306f0 <col:9> '<bound member function type>' ->xmessage 0x55c713822210
|         | `-CXXThisExpr 0x55c7138306e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c7138305b8 <col:18> 'const String' lvalue ParmVar 0x55c7138222d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c713830768 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c713830750 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c7138306c0 <col:24, col:40> 'String' (CXXTemporary 0x55c7138306c0)
|               `-CXXMemberCallExpr 0x55c713830658 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55c7138305e8 <col:24> '<bound member function type>' ->vformat 0x55c7138236d0
|                 | `-CXXThisExpr 0x55c7138305d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c713830688 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c713830618 <col:32> 'const char *' lvalue ParmVar 0x55c713822350 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c7138306a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c713830638 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c7138223c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c713822790 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55c7138225b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c713822630 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c7138226a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55c713830ae8 <col:23, line:254:5>
|   `-ReturnStmt 0x55c713830ad8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55c713830ac0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55c713830a60 <col:9, col:71> 'int'
|         |-MemberExpr 0x55c713830a30 <col:9> '<bound member function type>' ->xmessage 0x55c713822210
|         | `-CXXThisExpr 0x55c713830a20 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55c713830aa8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55c713830a90 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55c7138309e0 <col:18, col:65> 'String' (CXXTemporary 0x55c7138309e0)
|         |     `-CallExpr 0x55c713830978 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55c713830960 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55c713830848 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c713824208 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55c713830868 <col:31> 'const String' lvalue ParmVar 0x55c713822630 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55c7138309c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55c7138309a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55c713830940 <col:37, col:64> 'String' (CXXTemporary 0x55c713830940)
|         |             `-CallExpr 0x55c713830910 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55c7138308f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55c713830888 <col:37> 'String (const String &)' lvalue CXXMethod 0x55c71382e878 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55c7138308a8 <col:56> 'const String' lvalue ParmVar 0x55c7138225b8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55c713830a00 <col:68> 'const String' lvalue ParmVar 0x55c7138226a8 'str' 'const String &'
|-CXXMethodDecl 0x55c713822b10 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c713822858 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c7138228d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c713822950 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55c7138229c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c713830da0 <col:34, line:267:5>
|   `-ReturnStmt 0x55c713830d90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55c713830d78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55c713830d10 <col:9, col:51> 'int'
|         |-MemberExpr 0x55c713830ce0 <col:9> '<bound member function type>' ->xmessage 0x55c713822790
|         | `-CXXThisExpr 0x55c713830cd0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c713830b88 <col:18> 'const String' lvalue ParmVar 0x55c713822858 'landmark' 'const String &'
|         |-DeclRefExpr 0x55c713830ba8 <col:28> 'const String' lvalue ParmVar 0x55c7138228d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c713830d60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c713830d48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c713830cb0 <col:34, col:50> 'String' (CXXTemporary 0x55c713830cb0)
|               `-CXXMemberCallExpr 0x55c713830c48 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55c713830bd8 <col:34> '<bound member function type>' ->vformat 0x55c7138236d0
|                 | `-CXXThisExpr 0x55c713830bc8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c713830c78 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c713830c08 <col:42> 'const char *' lvalue ParmVar 0x55c713822950 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c713830c90 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c713830c28 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c7138229c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c713822c20 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55c713830e20 <col:25, line:288:5>
|   `-ReturnStmt 0x55c713830e10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55c713830df8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55c713830dc8 <col:9> 'const int' lvalue ->_nerrors 0x55c71382f9f8
|         `-CXXThisExpr 0x55c713830db8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c713822e30 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55c713822cd8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55c713822d58 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55c713823118 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c713822ef8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55c713822f78 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55c713822ff0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c7138232b0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55c7138231e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55c7138234f8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c713823370 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55c7138233e8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c713831080 <col:58, line:357:5>
|   `-ReturnStmt 0x55c713831070 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55c713831058 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55c713831028 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c713831010 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c713830ff0 <col:9, col:29> 'String' (CXXTemporary 0x55c713830ff0)
|             `-CallExpr 0x55c713830f80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55c713830f68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c713830ee8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55c713823118 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55c713830e88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55c713830fb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55c713830ea8 <col:21> 'const char *' lvalue ParmVar 0x55c713823370 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55c713830fd0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55c713830ec8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c7138233e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c7138236d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55c7138235c0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55c713823638 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c713823828 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55c713823798 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55c713823970 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55c7138238e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55c713823c10 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55c713823a28 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55c713823aa8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55c713823b20 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55c713823d70 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55c713823ce0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55c713831198 <col:37, line:441:5>
|   `-IfStmt 0x55c713831180 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55c713831108 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55c7138310d8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c713831098 <col:6> 'int' lvalue ParmVar 0x55c713823ce0 'level' 'int'
|     | `-ImplicitCastExpr 0x55c7138310f0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55c7138310b8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55c71381fdf0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55c713831168 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55c713831138 <col:8> 'int' lvalue ->_nerrors 0x55c71382f9f8
|         `-CXXThisExpr 0x55c713831128 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c713823e38 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55c713831230 <col:26, line:448:5>
|   `-BinaryOperator 0x55c713831210 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55c7138311c0 <col:2> 'int' lvalue ->_nerrors 0x55c71382f9f8
|     | `-CXXThisExpr 0x55c7138311b0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55c7138311f0 <col:13> 'int' 0
|-CXXMethodDecl 0x55c713824000 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55c713823ef0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55c713823f68 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55c713824208 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55c7138240c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55c713824138 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55c7138244b8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55c7138242c8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55c713824348 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55c7138243c8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55c713824570 <col:59> 0 0
|-CXXMethodDecl 0x55c71382e728 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55c7138245e8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55c713824668 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55c7138318a0 <col:70, line:534:5>
|   |-DeclStmt 0x55c7138313a0 <line:528:2, col:20>
|   | |-VarDecl 0x55c713831258 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55c7138312c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55c7138312f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55c713831360 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55c713831470 <line:529:2, col:23>
|   | `-VarDecl 0x55c7138313d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55c713831458 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c713831438 <col:18> 'const char *' lvalue ParmVar 0x55c7138245e8 'begin' 'const char *'
|   |-DoStmt 0x55c713831838 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55c713831768 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55c713831750 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55c713831730 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55c713831488 <col:6> 'const char *' lvalue Var 0x55c7138313d0 'x' 'const char *'
|   | |     `-CallExpr 0x55c713831680 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55c713831668 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55c713831620 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55c71382fed0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55c7138316e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55c7138316d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55c713831540 <col:20, col:27> 'String' (CXXTemporary 0x55c713831540)
|   | |       |     `-CXXTemporaryObjectExpr 0x55c713831508 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55c713831700 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c713831560 <col:30> 'const char *' lvalue Var 0x55c7138313d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55c713831718 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c713831580 <col:33> 'const char *' lvalue ParmVar 0x55c713824668 'end' 'const char *'
|   | |       |-UnaryOperator 0x55c7138315c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c7138315a0 <col:39> 'String' lvalue Var 0x55c713831258 'name' 'String'
|   | |       |-UnaryOperator 0x55c7138315f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c7138315d8 <col:46> 'String' lvalue Var 0x55c7138312f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55c713831610 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55c713831820 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55c713831808 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55c7138317e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55c7138317b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|   |         `-ImplicitCastExpr 0x55c7138317a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55c713831780 <col:11> 'String' lvalue Var 0x55c713831258 'name' 'String'
|   `-ReturnStmt 0x55c713831890 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55c713831878 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55c713831858 <col:9> 'const char *' lvalue Var 0x55c7138313d0 'x' 'const char *'
|-CXXMethodDecl 0x55c71382e878 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55c71382e7e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55c713831ea8 <col:55, line:550:5>
|   `-IfStmt 0x55c713831e80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55c713831ae0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55c713831ac8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c713831ab0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c713831a90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c713831a60 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|     | |       `-DeclRefExpr 0x55c713831900 <col:6> 'const String' lvalue ParmVar 0x55c71382e7e8 'x' 'const String &'
|     | `-BinaryOperator 0x55c713831a40 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55c713831a10 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55c7138319c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55c7138319a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55c713831960 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55c7134d7740 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55c713831920 <col:11> 'const String' lvalue ParmVar 0x55c71382e7e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55c713831940 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55c713831a28 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55c7138319f8 <col:19> 'char' 123
|     |-ReturnStmt 0x55c713831b50 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55c713831b20 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55c713831b00 <col:13> 'const String' lvalue ParmVar 0x55c71382e7e8 'x' 'const String &'
|     `-IfStmt 0x55c713831e58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55c713831be8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c713831bd0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c713831bb0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c713831b80 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |       `-DeclRefExpr 0x55c713831b60 <col:11> 'const String' lvalue ParmVar 0x55c71382e7e8 'x' 'const String &'
|       |-ReturnStmt 0x55c713831d70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55c713831d58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55c713831d28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55c713831d10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55c713831cf0 <col:13, col:29> 'String' (CXXTemporary 0x55c713831cf0)
|       |         `-CallExpr 0x55c713831ca0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55c713831c88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55c713831c00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55c713824000 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55c713831cd0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55c713831c20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55c713831c40 <col:28> 'const String' lvalue ParmVar 0x55c71382e7e8 'x' 'const String &'
|       `-ReturnStmt 0x55c713831e48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55c713831e30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55c713831e00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55c713831de8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55c713831dc8 <col:13, col:20> 'String' (CXXTemporary 0x55c713831dc8)
|                 `-CXXTemporaryObjectExpr 0x55c713831d90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55c71382ea40 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55c71382e930 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55c71382e9a8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c713830178 <col:71> 'bool' false
|-CXXRecordDecl 0x55c71382eaf0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55c71382ede8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55c71382ed80 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55c71382ed20 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55c71382ece0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55c7134ba7a0 'String'
|       | `-CXXRecord 0x55c7134ba710 'String'
|       |-BuiltinType 0x55c71318d580 'int'
|       `-DecayedType 0x55c7137755a0 '__va_list_tag *' sugar
|         |-TypedefType 0x55c713775570 'va_list' sugar
|         | |-Typedef 0x55c7133ac890 'va_list'
|         | `-TypedefType 0x55c7133ac840 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55c7132e4438 '__gnuc_va_list'
|         |   `-TypedefType 0x55c7132e43a0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55c7131ced38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55c7131cece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55c71318e2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55c71318e238 '__va_list_tag'
|         `-PointerType 0x55c7133b2130 '__va_list_tag *'
|           `-RecordType 0x55c71318e2d0 '__va_list_tag'
|             `-CXXRecord 0x55c71318e238 '__va_list_tag'
|-EnumDecl 0x55c71382ee40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55c71382ef40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f4a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382ef20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55c71382ef00 <col:16> 'int' 1
| |-EnumConstantDecl 0x55c71382efd0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f4b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382efb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55c71382ef90 <col:21> 'int' 2
| |-EnumConstantDecl 0x55c71382f060 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f4d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f040 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55c71382f020 <col:22> 'int' 4
| |-EnumConstantDecl 0x55c71382f0f0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f4e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f0d0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55c71382f0b0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55c71382f180 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f500 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f160 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55c71382f140 <col:22> 'int' 16
| |-EnumConstantDecl 0x55c71382f210 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f518 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f1f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c71382f1d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c71382f2a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f530 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f280 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55c71382f260 <col:17> 'int' 64
| |-EnumConstantDecl 0x55c71382f330 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f548 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f310 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55c71382f2f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55c71382f3c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c71382f560 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c71382f3a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55c71382f380 <col:16> 'int' 256
| `-EnumConstantDecl 0x55c71382f450 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55c71382f578 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c71382f430 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55c71382f410 <col:12> 'int' 1024
|-CXXMethodDecl 0x55c71382f788 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55c71382f5a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55c71382f640 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55c71382f910 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55c71382f848 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55c71382f9b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55c71382f9f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55c71382fa58 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55c71382fad0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55c71382fed0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55c71382fb48 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c71382fbc8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55c71382fc48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55c71382fcc0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55c71382fd38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55c71382fdb0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55c71382fff8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55c71382fff8
| `-ParmVarDecl 0x55c713830108 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55c713832208 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55c713832208
  `-ParmVarDecl 0x55c713832318 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c713671e00 prev 0x55c7136b7160 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c713671ef8 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55c713671f88 <col:20, col:26> col:20 public
|-TypedefDecl 0x55c713671fc0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55c7132e3bf0 'uninitialized_type'
|   `-CXXRecord 0x55c7132e3b58 'uninitialized_type'
|-CXXConstructorDecl 0x55c713672080 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c713675e90 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c7136760b0 <col:25, line:21:5>
|   `-CallExpr 0x55c713676060 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55c713676048 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55c713676028 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55c7133eeca8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55c713676098 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55c713675f70 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55c713675f40 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|     |     `-CXXThisExpr 0x55c713675f30 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55c713675f88 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55c713676008 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55c713675fe8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55c713675fb8 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55c713675fa8 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55c7136721d0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55c713672140 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c7136760c8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c713676318 <col:56, line:26:5>
|   `-CallExpr 0x55c713676298 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55c713676280 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55c713676260 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c7133ed968 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55c7136762d0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55c7136761a8 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55c713676178 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|     |     `-CXXThisExpr 0x55c713676168 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55c713676300 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55c7136762e8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c7136761c0 <col:17> 'const unsigned char *' lvalue ParmVar 0x55c713672140 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55c713676240 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55c713676220 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55c7136761f0 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55c7136761e0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55c713672320 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55c713672290 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c713676330 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c7137294b0 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55c713729498 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55c713729460 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55c713729448 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c7137293c8 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55c713674e38 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55c713676398 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55c713676388 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55c7137293b0 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55c713729398 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55c713729380 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55c713729360 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55c713729330 <col:10> '<bound member function type>' .operator in_addr 0x55c7134f19c0
|                 `-ImplicitCastExpr 0x55c713729318 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55c7136763b0 <col:10> 'IPAddress' lvalue ParmVar 0x55c713672290 'x' 'IPAddress'
|-CXXConstructorDecl 0x55c713672470 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55c7136723e0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55c713672698 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55c7136725a0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c713729640 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55c7137294c8 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55c7136725a0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55c7137296a0 <col:13, line:41:5>
|-CXXConstructorDecl 0x55c713672868 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55c7136727a0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c7137296b0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c7137297c0 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55c713729788 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55c713729770 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55c713729750 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55c713674e38 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55c713729718 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55c713729708 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55c713729730 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55c7136727a0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55c7136729b8 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55c713672928 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c7137297d8 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55c713729888 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55c713729860 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55c713729830 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55c713672928 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55c713672b48 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55c713672a80 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55c713672c98 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55c713672c08 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55c713672e48 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55c713672dc0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55c7136b71f0 'IP6Address'
|   | `-CXXRecord 0x55c713671e00 'IP6Address'
|   `-ParenType 0x55c713672d60 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55c7134aeff0 'uint32_t () const' const cdecl
|       `-TypedefType 0x55c7132e3ee0 'uint32_t' sugar
|         |-Typedef 0x55c7131f64c8 'uint32_t'
|         `-TypedefType 0x55c7131cf5a0 '__uint32_t' sugar
|           |-Typedef 0x55c7131cf198 '__uint32_t'
|           `-BuiltinType 0x55c71318d620 'unsigned int'
|-CXXConversionDecl 0x55c713672f88 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55c713673110 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55c7137298f0 <col:46, col:62>
|   `-ReturnStmt 0x55c7137298e0 <col:48, col:55>
|     `-MemberExpr 0x55c7137298b0 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|       `-CXXThisExpr 0x55c7137298a0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55c713673300 <line:75:5, col:50> col:5 used operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55c713729958 <col:34, col:50>
|   `-ReturnStmt 0x55c713729948 <col:36, col:43>
|     `-MemberExpr 0x55c713729918 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|       `-CXXThisExpr 0x55c713729908 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55c713673400 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55c7137299c0 <col:45, col:61>
|   `-ReturnStmt 0x55c7137299b0 <col:47, col:54>
|     `-MemberExpr 0x55c713729980 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|       `-CXXThisExpr 0x55c713729970 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55c7136734d8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55c713729a28 <col:33, col:49>
|   `-ReturnStmt 0x55c713729a18 <col:35, col:42>
|     `-MemberExpr 0x55c7137299e8 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|       `-CXXThisExpr 0x55c7137299d8 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55c7136735a0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55c713729b60 <col:27, col:66>
|   `-ReturnStmt 0x55c713729b50 <col:29, col:63>
|     `-UnaryOperator 0x55c713729b38 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c713729b18 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c713729b00 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c713729ab0 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55c71342f478
|         |   `-MemberExpr 0x55c713729a80 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|         |     `-MemberExpr 0x55c713729a50 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|         |       `-CXXThisExpr 0x55c713729a40 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55c713729ae0 <col:62> 'int' 0
|-CXXMethodDecl 0x55c713673668 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55c713729cd8 <col:39, col:78>
|   `-ReturnStmt 0x55c713729cc8 <col:41, col:75>
|     `-UnaryOperator 0x55c713729cb0 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c713729c90 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c713729c78 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c713729be8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|         |   `-MemberExpr 0x55c713729bb8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|         |     `-MemberExpr 0x55c713729b88 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|         |       `-CXXThisExpr 0x55c713729b78 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55c713729c18 <col:74> 'int' 0
|-CXXMethodDecl 0x55c713673788 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55c713729e48 <col:24, col:75>
|   `-ReturnStmt 0x55c713729e38 <col:26, col:72>
|     `-CStyleCastExpr 0x55c713729e10 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55c713729de8 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55c713729dc8 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55c713729db0 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55c713729d60 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55c71342f478
|           |   `-MemberExpr 0x55c713729d30 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|           |     `-MemberExpr 0x55c713729d00 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|           |       `-CXXThisExpr 0x55c713729cf0 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55c713729d90 <col:71> 'int' 0
|-CXXMethodDecl 0x55c713673848 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55c713729fd0 <col:36, col:87>
|   `-ReturnStmt 0x55c713729fc0 <col:38, col:84>
|     `-ImplicitCastExpr 0x55c713729fa8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55c713729f80 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55c713729f58 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55c713729f38 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55c713729f20 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c713729ed0 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|             |   `-MemberExpr 0x55c713729ea0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|             |     `-MemberExpr 0x55c713729e70 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|             |       `-CXXThisExpr 0x55c713729e60 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55c713729f00 <col:83> 'int' 0
|-CXXMethodDecl 0x55c713673908 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55c71372a140 <col:24, col:75>
|   `-ReturnStmt 0x55c71372a130 <col:26, col:72>
|     `-CStyleCastExpr 0x55c71372a108 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55c71372a0e0 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55c71372a0c0 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55c71372a0a8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55c71372a058 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55c71342f478
|           |   `-MemberExpr 0x55c71372a028 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|           |     `-MemberExpr 0x55c713729ff8 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55c713675498
|           |       `-CXXThisExpr 0x55c713729fe8 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55c71372a088 <col:71> 'int' 0
|-CXXMethodDecl 0x55c7136739c8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55c71372a2c8 <col:36, col:87>
|   `-ReturnStmt 0x55c71372a2b8 <col:38, col:84>
|     `-ImplicitCastExpr 0x55c71372a2a0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55c71372a278 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55c71372a250 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55c71372a230 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55c71372a218 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c71372a1c8 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|             |   `-MemberExpr 0x55c71372a198 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|             |     `-MemberExpr 0x55c71372a168 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|             |       `-CXXThisExpr 0x55c71372a158 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55c71372a1f8 <col:83> 'int' 0
|-CXXMethodDecl 0x55c713673a88 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c713673b50 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55c713673d78 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55c713673c28 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55c713673ca0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55c713673ef8 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55c713673e38 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55c713673fc0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55c71372a5e0 <col:36, line:99:5>
|   `-ReturnStmt 0x55c71372a5d0 <line:98:2, col:81>
|     `-BinaryOperator 0x55c71372a5b0 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55c71372a428 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55c71372a410 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55c71372a3f8 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55c71372a3b8 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55c71372a3a0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55c71372a350 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|       | |     |   `-MemberExpr 0x55c71372a320 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|       | |     |     `-MemberExpr 0x55c71372a2f0 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|       | |     |       `-CXXThisExpr 0x55c71372a2e0 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55c71372a380 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55c71372a3d8 <col:41> 'int' 255
|       `-BinaryOperator 0x55c71372a590 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55c71372a578 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c71372a560 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c71372a520 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c71372a508 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c71372a4b8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|         |     |   `-MemberExpr 0x55c71372a488 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|         |     |     `-MemberExpr 0x55c71372a458 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|         |     |       `-CXXThisExpr 0x55c71372a448 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55c71372a4e8 <col:74> 'int' 12
|         `-IntegerLiteral 0x55c71372a540 <col:81> 'int' 254
|-CXXMethodDecl 0x55c713674138 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55c713674070 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55c713674200 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55c71372aac8 <col:43, line:114:5>
|   `-ReturnStmt 0x55c71372aab8 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55c71372aa98 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55c71372a8f8 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55c71372a758 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55c71372a728 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55c71372a6e8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55c71372a6a8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55c71372a678 <col:9> '<bound member function type>' ->data32 0x55c7136739c8
|       | | |   |   `-CXXThisExpr 0x55c71372a668 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55c71372a6c8 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55c71372a740 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55c71372a708 <col:24> 'int' 0
|       | `-BinaryOperator 0x55c71372a8d8 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55c71372a8a8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55c71372a868 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55c71372a828 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55c71372a7f8 <col:29> '<bound member function type>' ->data32 0x55c7136739c8
|       |   |   |   `-CXXThisExpr 0x55c71372a7e8 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55c71372a848 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55c71372a8c0 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55c71372a888 <col:44> 'int' 0
|       `-BinaryOperator 0x55c71372aa78 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55c71372aa48 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55c71372aa08 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55c71372a9c8 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55c71372a998 <col:9> '<bound member function type>' ->data32 0x55c7136739c8
|         |   |   `-CXXThisExpr 0x55c71372a988 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55c71372a9e8 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55c71372aa60 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55c71372aa28 <col:24> 'int' 0
|-CXXMethodDecl 0x55c7136742c0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55c71372b040 <col:39, line:123:5>
|   `-ReturnStmt 0x55c71372b030 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55c71372b010 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55c71372ade0 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55c71372ac40 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55c71372ac10 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55c71372abd0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55c71372ab90 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55c71372ab60 <col:9> '<bound member function type>' ->data32 0x55c7136739c8
|       | | |   |   `-CXXThisExpr 0x55c71372ab50 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55c71372abb0 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55c71372ac28 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55c71372abf0 <col:24> 'int' 0
|       | `-BinaryOperator 0x55c71372adc0 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55c71372ad90 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55c71372ad50 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55c71372ad10 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55c71372ace0 <col:29> '<bound member function type>' ->data32 0x55c7136739c8
|       |   |   |   `-CXXThisExpr 0x55c71372acd0 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55c71372ad30 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55c71372ada8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55c71372ad70 <col:44> 'int' 0
|       `-BinaryOperator 0x55c71372aff0 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55c71372afd8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55c71372aef0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55c71372aeb0 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55c71372ae80 <col:9> '<bound member function type>' ->data32 0x55c7136739c8
|         |   |   `-CXXThisExpr 0x55c71372ae70 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55c71372aed0 <col:18> 'int' 2
|         `-CallExpr 0x55c71372afb0 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55c71372af98 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55c71372af78 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c713433608 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55c71372af58 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55c713674380 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55c71372b1d0 <col:38, line:131:5>
|   `-ReturnStmt 0x55c71372b1c0 <line:130:9, col:47>
|     `-BinaryOperator 0x55c71372b1a0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55c71372b188 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55c71372b170 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55c71372b130 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55c71372b118 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55c71372b0c8 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55c71342f478
|       |     |   `-MemberExpr 0x55c71372b098 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55c71342f798
|       |     |     `-MemberExpr 0x55c71372b068 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55c713675498
|       |     |       `-CXXThisExpr 0x55c71372b058 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55c71372b0f8 <col:41> 'int' 0
|       `-IntegerLiteral 0x55c71372b150 <col:47> 'int' 255
|-CXXMethodDecl 0x55c713674440 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55c71372b5a8 <col:39, line:139:5>
|   `-ReturnStmt 0x55c71372b598 <line:138:9, col:67>
|     `-BinaryOperator 0x55c71372b578 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55c71372b3d8 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55c71372b3c0 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55c71372b2d8 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55c71372b298 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55c71372b268 <col:16> '<bound member function type>' ->data32 0x55c7136739c8
|       | |   |   `-CXXThisExpr 0x55c71372b258 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55c71372b2b8 <col:25> 'int' 0
|       | `-CallExpr 0x55c71372b398 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55c71372b380 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c71372b360 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c713433608 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55c71372b340 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55c71372b558 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55c71372b528 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55c71372b4e8 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55c71372b4a8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55c71372b478 <col:52> '<bound member function type>' ->data32 0x55c7136739c8
|         |   |   `-CXXThisExpr 0x55c71372b468 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55c71372b4c8 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55c71372b540 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55c71372b508 <col:67> 'int' 0
|-CXXMethodDecl 0x55c713674500 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55c7136746a8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55c7136745b0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55c713674868 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55c713674778 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55c7136749b0 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55c713674920 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55c713674b10 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55c713674a80 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55c713674c70 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55c713674be0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55c713674e38 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55c713674d40 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55c713674fb8 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55c713674ef0 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55c713675080 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55c713675140 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55c713675200 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55c71372b728 <col:22, col:42>
|   `-ReturnStmt 0x55c71372b718 <col:24, col:39>
|     `-ExprWithCleanups 0x55c71372b700 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55c71372b6d0 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c71372b6b8 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c71372b698 <col:31, col:39> 'String' (CXXTemporary 0x55c71372b698)
|             `-CXXMemberCallExpr 0x55c71372b670 <col:31, col:39> 'String'
|               `-MemberExpr 0x55c71372b640 <col:31> '<bound member function type>' ->unparse 0x55c713675080
|                 `-CXXThisExpr 0x55c71372b630 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55c7136752d0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55c713675378 <col:51> "" ""
|-TypedefDecl 0x55c7136753f8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55c713673bf0 'const IP6Address &'
|   `-QualType 0x55c7136b71f1 'const IP6Address' const
|     `-RecordType 0x55c7136b71f0 'IP6Address'
|       `-CXXRecord 0x55c713671e00 'IP6Address'
|-AccessSpecDecl 0x55c713675450 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55c713675498 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55c7136763d0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55c7136763d0
| `-ParmVarDecl 0x55c7136764a8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55c713676b78 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55c713676b78
| `-ParmVarDecl 0x55c713676c88 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55c713676cf8 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55c713676cf8
| `-ParmVarDecl 0x55c713676e08 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55c713676f60 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c713677078 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55c713675498 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55c713732a78 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55c713732920 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55c713675498
| |     `-CXXStaticCastExpr 0x55c7137328f0 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55c7137328c0 <col:7> 'IP6Address' lvalue ParmVar 0x55c713677078 '' 'IP6Address &&'
| `-CompoundStmt 0x55c713732ad8 <col:7>
`-CXXDestructorDecl 0x55c713732728 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137745e8 prev 0x55c71366f7b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7137746e0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55c713774770 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55c7137748a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55c7137747a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c713775cd0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c713775cb0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c713775848 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c713775d60 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c713775d20 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55c7137747a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c7137758b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c713775de0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c713775da0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c713775910 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c713775e20 <col:54> 'bool' false
| `-CompoundStmt 0x55c713775f28 <col:61, line:38:5>
|   `-BinaryOperator 0x55c713775f08 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55c713775ea0 <col:9> 'const Element *' lvalue ->_context 0x55c7137757e8
|     | `-CXXThisExpr 0x55c713775e90 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55c713775ef0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55c713775ed0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55c713774ab8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c713774968 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55c7137749e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c713775d08 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c713775ce8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55c7137757e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55c713775f80 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c713775f40 <col:20> 'const Element *' lvalue ParmVar 0x55c713774968 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55c713775848 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c713776000 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c713775fc0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55c7137749e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c7137758b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c713776080 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c713776040 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55c713775910 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c7137760c0 <col:73> 'bool' false
| `-CompoundStmt 0x55c713776138 <col:80, line:46:5>
|-CXXMethodDecl 0x55c713774be8 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x55c7137761b0 <col:36, line:51:5>
|   `-ReturnStmt 0x55c7137761a0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55c713776188 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55c713776158 <col:16> 'const Element *const' lvalue ->_context 0x55c7137757e8
|         `-CXXThisExpr 0x55c713776148 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c713774cd8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55c713776230 <col:32, line:57:5>
|   `-ReturnStmt 0x55c713776220 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55c713776208 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55c7137761d8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55c713775848
|         `-CXXThisExpr 0x55c7137761c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c713774d98 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55c713774f20 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c713774e50 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c713775070 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c713774fe0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c7137751c0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c713775130 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c7137753c8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55c713775278 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55c7137752f0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55c7137756f8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55c713775488 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55c713775508 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55c7137755d0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55c7137757b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55c7137757e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55c713775848 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55c7137758b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55c713775910 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55c713775960 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c713775960
| `-ParmVarDecl 0x55c713775a78 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55c713775b18 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c713775b18
| `-ParmVarDecl 0x55c713775c28 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55c7136aa460 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c7137a7e00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55c7137a7fd8 prev 0x55c7137a7e00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c7137a8068 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c7137a8090 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137a9c60 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55c7137a9c10 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55c7137a8540 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55c7137a8440 'type'
|     `-TemplateSpecializationType 0x55c7137a83d0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55c7137a82b0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55c7137a8290 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55c7137a8270 <col:24> 'unsigned long' 4
|       `-RecordType 0x55c7137a83b0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55c7137a82d0 'char_array'
|-TypedefDecl 0x55c7137a9d18 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55c7137a9ce0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55c7137a9cc0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55c7137a9c60 'type'
|     `-ElaboratedType 0x55c7137a9c10 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55c7137a8540 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55c7137a8440 'type'
|         `-TemplateSpecializationType 0x55c7137a83d0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55c7137a82b0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55c7137a8290 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55c7137a8270 <col:24> 'unsigned long' 4
|           `-RecordType 0x55c7137a83b0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55c7137a82d0 'char_array'
|-CXXMethodDecl 0x55c7137a9e98 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55c7137a9da8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55c7137a9f88 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c7137aa068 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c7137aa338 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c7137aa240 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55c7137aa578 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c7137aa3f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c7137aa468 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137aa748 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c7137aa638 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c7137aa6b0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137aa8a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c7137aa978 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c7137aabc8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c7137aaa38 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c7137aaab0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137aae28 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55c7137aac98 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c7137aad10 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137aafe8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c7137aaef8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137b2598 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c7137ab0b0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137b2650 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c7137b2700 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c7137b2938 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c7137b27b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c7137b2828 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c7137b2bd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c7137b2ae0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55c7137b2ca0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55c7137b2cf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c7137b2d40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c7137a6808 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55c7137a6a18 prev 0x55c7137a6808 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c7137a7d70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c7137a7d20 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55c7137a7d00 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55c7137a7bb0 'type'
|     `-SubstTemplateTypeParmType 0x55c7137a79d0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c7134545f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c713454598 'T'
|       `-RecordType 0x55c7137a7520 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c7137a7438 'sized_array_memory'
|-FieldDecl 0x55c7137b2d90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c7137b2de0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c7137b2e18 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|   |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c71348c288 'T'
|   `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b2ea8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55c7137b2e70 'int &'
|   `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b2f68 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55c7137b2f30 'const int &'
|   `-QualType 0x55c7137a6ab1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b2ff8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55c7137b2fc0 'int *'
|   `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3088 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55c7137b3050 'const int *'
|   `-QualType 0x55c7137a6ab1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3c70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55c7137b3c20 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55c7137b3c00 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55c7137b3b90 'type'
|     `-SubstTemplateTypeParmType 0x55c7137b3950 'int' sugar
|       |-TemplateTypeParmType 0x55c71345f3f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71345f3a0 'T'
|       `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3cd8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55c7137b2f30 'const int &'
|   `-QualType 0x55c7137a6ab1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3d30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3d98 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55c7137b2fc0 'int *'
|   `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|     |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c71348c288 'T'
|     `-BuiltinType 0x55c71318d580 'int'
|-TypedefDecl 0x55c7137b3e00 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55c7137b3050 'const int *'
|   `-QualType 0x55c7137a6ab1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c7137a6ab0 'int' sugar
|       |-TemplateTypeParmType 0x55c71348c2e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c71348c288 'T'
|       `-BuiltinType 0x55c71318d580 'int'
|-EnumDecl 0x55c7137b3e58 <line:134:5> col:5
| `-EnumConstantDecl 0x55c7137b3f50 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c7137b3f30 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c71348d968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c71348d940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c71348d920 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c7137b3fd8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c7137b4228 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c7137b4090 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c7137b4130 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55c7137b44e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55c7137b43d0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55c7137b47a8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55c7137b4690 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c7137b4af0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55c7137b49d0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55c7137b4e00 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55c7137b4ce0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c7137b50f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c7137b4f38 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c7137b4fb0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c7137b5218 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c7137b52f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b5350 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b5398 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c7137b5448 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b54a0 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b5568 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c7137b5618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b5670 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b56b8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c7137b5768 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b57c0 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b5808 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c7137b58b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b5910 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b5958 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c7137b5a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c7137b5a60 <col:30> Inherited
|-CXXMethodDecl 0x55c7137b5a88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c7137b5b38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c7137b5be8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c7137b5da8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c7137b5c98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c7137b5d10 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c7137b5ef8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c7137b5e68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c7137b60a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55c7137b5fb0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c7137b6160 <col:20>
| `-OptimizeNoneAttr 0x55c7137b61b8 <col:30>
|-CXXMethodDecl 0x55c7137b62d8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55c7137b61e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c7137b6390 <col:20>
| `-OptimizeNoneAttr 0x55c7137b63e8 <col:30>
|-CXXMethodDecl 0x55c7137b64a0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c7137b6410 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c7137b65e8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c7137b6558 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c7137b6718 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55c7137b6848 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55c7137b6918 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55c7137b69e8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55c7137b6b28 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c7137b6a98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c7137b6c70 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c7137b6be0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c7137b6db8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c7137b6d28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c7137b6e70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c7137b6f70 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c7137b6ee0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c7137b7028 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c7137b70e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55c7137b71e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55c7137b7368 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c7137b72a8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55c7137b7b28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c7137b7420 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55c7137b7a88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55c7137b7988 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55c7137b7c08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c7137b7d58 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c7137b7cc8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c7137b7e10 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c7137b8058 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c7137b7ed0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c7137b7f48 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c7137b8218 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55c7137b8128 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c7137b8468 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55c7137b82e0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c7137b8358 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c7137b8528 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c7137b8788 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55c7137b8690 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55c7137b8858 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137a4978 prev 0x55c71377e4c0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c7137a4a70 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55c7137a4b60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55c7137ca660 <col:16, line:828:9>
|-CXXDestructorDecl 0x55c7137a4c50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55c7137ca670 <col:25, line:830:9>
|-CXXMethodDecl 0x55c7137a4d50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55c7137a4e00 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55c7137a4ea8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c7137a4ea8
| `-ParmVarDecl 0x55c7137a4fb8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55c7137a5778 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c7137a5778
  `-ParmVarDecl 0x55c7137a5888 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c71377e2f8 prev 0x55c71366f848 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55c71377e430 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55c71377e4c0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55c71377e570 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55c71377e678 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55c71377e5a8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c7137b9e18 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c7137b9df8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c71377e998 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55c71377e810 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55c71377e888 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c7137b9e50 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c7137b9e30 <col:59> 'int' 0
|-CXXConstructorDecl 0x55c71377eb70 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c71377ea60 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55c71377ead8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c7137b9e88 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c7137b9e68 <col:55> 'int' 0
|-CXXConstructorDecl 0x55c71377ef28 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c71377ed10 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55c71377ed88 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55c71377ee00 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c7137b9ec0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c7137b9ea0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c71377f0e8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55c71377f028 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55c71377f1e0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55c71377f398 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55c71377f2d0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55c71377f488 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55c7137ba270 <col:24, line:291:5>
|   `-ReturnStmt 0x55c7137ba260 <line:290:9, col:79>
|     `-BinaryOperator 0x55c7137ba240 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55c7137ba118 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55c7137ba070 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55c7137ba050 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55c7137b9f48 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55c7137b9f30 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55c7137b9f18 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55c7137b9ee8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55c7137a67a0
|       | |   |       `-CXXThisExpr 0x55c7137b9ed8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55c7137ba038 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55c7137ba020 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55c7137b9fe8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55c7137b9fb8 <col:28, col:35> '<bound member function type>' ->size 0x55c71376d548
|       | |           `-ImplicitCastExpr 0x55c7137ba008 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55c7137b9fa0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55c7137b9f70 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55c7137a67a0
|       | |                 `-CXXThisExpr 0x55c7137b9f60 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55c7137ba100 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55c7137ba0e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55c7137ba0d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55c7137ba0a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55c7137b89a0
|       |         `-CXXThisExpr 0x55c7137ba090 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55c7137ba220 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55c7137ba208 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c7137ba1f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c7137ba1b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c7137ba198 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c7137ba148 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c7137b8a50
|         |     |   `-CXXThisExpr 0x55c7137ba138 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c7137ba178 <col:73> 'int' 0
|         `-IntegerLiteral 0x55c7137ba1d0 <col:79> 'int' 0
|-CXXMethodDecl 0x55c71377f548 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55c7137ba448 <col:32, line:296:5>
|   `-ReturnStmt 0x55c7137ba438 <line:295:9, col:49>
|     `-BinaryOperator 0x55c7137ba418 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55c7137ba2f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55c7137ba2e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55c7137ba2c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55c7137ba298 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55c7137b89a0
|       |       `-CXXThisExpr 0x55c7137ba288 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55c7137ba3f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55c7137ba3e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c7137ba3c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c7137ba388 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c7137ba370 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c7137ba320 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c7137b8a50
|         |     |   `-CXXThisExpr 0x55c7137ba310 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c7137ba350 <col:43> 'int' 0
|         `-IntegerLiteral 0x55c7137ba3a8 <col:49> 'int' 0
|-CXXMethodDecl 0x55c71377f638 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55c7137bbfb8 <col:19, line:306:5>
|   |-IfStmt 0x55c7137bbed8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55c7137ba4b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55c7137ba4a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55c7137ba470 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c7137a67a0
|   | |     `-CXXThisExpr 0x55c7137ba460 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55c7137bbeb8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55c7137bbe88 <col:13, col:20> '<bound member function type>' ->clear 0x55c71376ff48
|   |     `-ImplicitCastExpr 0x55c7137bbe70 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55c7137ba4e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c7137a67a0
|   |         `-CXXThisExpr 0x55c7137ba4d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55c7137bbf60 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55c7137bbf30 <col:9, col:16> '<bound member function type>' .clear 0x55c7137b8528
|   |   `-MemberExpr 0x55c7137bbf00 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55c7137b8940
|   |     `-CXXThisExpr 0x55c7137bbef0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55c7137bbfa8 <line:305:9, col:17>
|     `-UnaryOperator 0x55c7137bbf90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137bbf80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c71377f8b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55c71377f7c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55c71377fa38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55c71377f970 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55c71377fdb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55c71377fae0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55c71377fd18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55c71377fb88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55c71377fc00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55c7137bc2e8 <col:67, line:327:5>
|     |-WhileStmt 0x55c7137bc298 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55c7137bc0b0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55c7137bc020 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c71372ccf8 0x55c71370f730 0x55c7136adec8 0x55c7134f74a8 0x55c7134f7180 0x55c7134e7950 0x55c7134e7600 0x55c7134e6ef0 0x55c7134b9860 0x55c713446d30
|     | | |-DeclRefExpr 0x55c7137bbfe0 <col:16> 'Iter' lvalue ParmVar 0x55c71377fb88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55c7137bc000 <col:25> 'Iter' lvalue ParmVar 0x55c71377fc00 'end' 'Iter'
|     | `-CompoundStmt 0x55c7137bc278 <col:30, line:325:9>
|     |   |-CallExpr 0x55c7137bc218 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55c7137bc0f8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55c7137bc1e8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55c7137bc178 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|     |   |   `-DeclRefExpr 0x55c7137bc158 <col:24> 'Iter' lvalue ParmVar 0x55c71377fb88 'begin' 'Iter'
|     |   `-UnaryOperator 0x55c7137bc260 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55c7137bc240 <col:15> 'Iter' lvalue ParmVar 0x55c71377fb88 'begin' 'Iter'
|     `-ReturnStmt 0x55c7137bc2d8 <line:326:9, col:17>
|       `-UnaryOperator 0x55c7137bc2c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bc2b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c71377fec0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55c71377fe30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55c713780008 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55c71377ff78 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55c7137800d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55c7137bc3c8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55c7137bc368 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55c7137bc318 <col:9> '<bound member function type>' ->reset_from 0x55c7137b8dc8
|   | | `-CXXThisExpr 0x55c7137bc308 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55c7137bc348 <col:20> 'int' 0
|   `-ReturnStmt 0x55c7137bc3b8 <line:352:9, col:17>
|     `-UnaryOperator 0x55c7137bc3a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137bc390 <col:17> 'Args *' this
|-VarDecl 0x55c713780188 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c7137801f0 <col:38> 'int' 1
|-VarDecl 0x55c713780280 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c7137802e8 <col:39> 'int' 2
|-VarDecl 0x55c713780378 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c7137803e0 <col:39> 'int' 4
|-VarDecl 0x55c713780470 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c7137804d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55c713780858 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55c713780550 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c7137807b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c713780600 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c7137806a8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55c7137bc520 <col:43, line:371:5>
| |   `-ReturnStmt 0x55c7137bc510 <line:370:9, col:34>
| |     `-CallExpr 0x55c7137bc4d8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c7137bc3f8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c7137bc478 <col:21> 'const char *' lvalue ParmVar 0x55c713780600 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55c7137bc498 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55c7137bc4b8 <col:33> 'T' lvalue ParmVar 0x55c7137806a8 'x' 'T &'
| `-CXXMethodDecl 0x55c713857d78 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c713857b98 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55c713857c68 <col:37, col:40> col:40 x 'unsigned char &'
|-FunctionTemplateDecl 0x55c713780b88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55c7137808c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713780ae8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c713780970 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713780a18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bc670 <col:45, line:375:5>
|     `-ReturnStmt 0x55c7137bc660 <line:374:9, col:42>
|       `-CallExpr 0x55c7137bc628 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bc548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bc5c8 <col:21> 'const char *' lvalue ParmVar 0x55c713780970 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bc5e8 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c7137bc608 <col:41> 'T' lvalue ParmVar 0x55c713780a18 'x' 'T &'
|-FunctionTemplateDecl 0x55c713780eb8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55c713780bf0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713780e18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c713780ca0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713780d48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bc7c0 <col:45, line:379:5>
|     `-ReturnStmt 0x55c7137bc7b0 <line:378:9, col:43>
|       `-CallExpr 0x55c7137bc778 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bc698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bc718 <col:21> 'const char *' lvalue ParmVar 0x55c713780ca0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bc738 <col:30> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         `-DeclRefExpr 0x55c7137bc758 <col:42> 'T' lvalue ParmVar 0x55c713780d48 'x' 'T &'
|-FunctionTemplateDecl 0x55c7137811e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55c713780f20 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c713781148 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c713780fd0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c713781078 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55c7137bc9c0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55c7137bc9b0 <line:382:9, col:55>
| |     `-CallExpr 0x55c7137bc978 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c7137bc7e8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c7137bc868 <col:21> 'const char *' lvalue ParmVar 0x55c713780fd0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55c7137bc938 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55c7137bc8e8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55c7137bc8c8 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55c7137bc920 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55c7137bc900 <col:42> 'const int' lvalue Var 0x55c713780280 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55c7137bc958 <col:54> 'T' lvalue ParmVar 0x55c713781078 'x' 'T &'
| `-CXXMethodDecl 0x55c7136ab528 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
|   |-TemplateArgument type 'IP6Address'
|   |-ParmVarDecl 0x55c7136ab348 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55c7136ab418 <col:40, col:43> col:43 x 'IP6Address &'
|-FunctionTemplateDecl 0x55c7137815e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55c713781250 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713781548 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55c713781300 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713781380 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c713781428 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bcb00 <col:54, line:388:5>
|     |-CallExpr 0x55c7137bca88 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bc9d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c7137bca18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bca28 <col:30> 'const char *' lvalue ParmVar 0x55c713781300 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137bca48 <col:39> 'int' lvalue ParmVar 0x55c713781380 'flags' 'int'
|     | `-DeclRefExpr 0x55c7137bca68 <col:46> 'T' lvalue ParmVar 0x55c713781428 'x' 'T &'
|     `-ReturnStmt 0x55c7137bcaf0 <line:387:9, col:17>
|       `-UnaryOperator 0x55c7137bcad8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bcac8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713781a98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55c713781658 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c7137816d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c7137819f8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c713781798 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713781838 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55c7137818d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bcc70 <col:74, line:403:5>
|     `-ReturnStmt 0x55c7137bcc60 <line:402:9, col:56>
|       `-CallExpr 0x55c7137bcc20 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bcb30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bcba0 <col:28> 'const char *' lvalue ParmVar 0x55c713781798 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bcbc0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c7137bcbe0 <col:40> 'T' lvalue ParmVar 0x55c713781838 'x' 'T &'
|         `-DeclRefExpr 0x55c7137bcc00 <col:43> 'const V' lvalue ParmVar 0x55c7137818d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c713781f08 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c713781b08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c713781b88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c713781e68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c713781c48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713781ce8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55c713781d88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bcdd8 <col:76, line:407:5>
|     `-ReturnStmt 0x55c7137bcdc8 <line:406:9, col:65>
|       `-CallExpr 0x55c7137bcd88 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bcc98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bcd08 <col:28> 'const char *' lvalue ParmVar 0x55c713781c48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bcd28 <col:37> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         |-DeclRefExpr 0x55c7137bcd48 <col:49> 'T' lvalue ParmVar 0x55c713781ce8 'x' 'T &'
|         `-DeclRefExpr 0x55c7137bcd68 <col:52> 'const V' lvalue ParmVar 0x55c713781d88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c713782458 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55c713781f78 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c713781ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c7137823b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c7137820b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713782138 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137821d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55c713782278 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bcf40 <col:85, line:412:5>
|     |-CallExpr 0x55c7137bcec0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bcdf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c7137bce30 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bce40 <col:37> 'const char *' lvalue ParmVar 0x55c7137820b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137bce60 <col:46> 'int' lvalue ParmVar 0x55c713782138 'flags' 'int'
|     | |-DeclRefExpr 0x55c7137bce80 <col:53> 'T' lvalue ParmVar 0x55c7137821d8 'x' 'T &'
|     | `-DeclRefExpr 0x55c7137bcea0 <col:56> 'const V' lvalue ParmVar 0x55c713782278 'default_value' 'const V &'
|     `-ReturnStmt 0x55c7137bcf30 <line:411:9, col:17>
|       `-UnaryOperator 0x55c7137bcf18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bcf08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c7137828e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55c7137824d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713782548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713782848 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713782608 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713782680 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c713782728 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bd0c0 <col:53, line:425:5>
|     `-ReturnStmt 0x55c7137bd0b0 <line:424:9, col:42>
|       `-CallExpr 0x55c7137bd070 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bcf70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bcff0 <col:21> 'const char *' lvalue ParmVar 0x55c713782608 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bd010 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c7137bd030 <col:33> 'P' lvalue ParmVar 0x55c713782680 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bd050 <col:41> 'T' lvalue ParmVar 0x55c713782728 'x' 'T &'
|-FunctionTemplateDecl 0x55c713782d38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55c713782958 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137829d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713782c98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713782a98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713782b10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c713782bb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bd238 <col:55, line:429:5>
|     `-ReturnStmt 0x55c7137bd228 <line:428:9, col:50>
|       `-CallExpr 0x55c7137bd1e8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bd0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bd168 <col:21> 'const char *' lvalue ParmVar 0x55c713782a98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bd188 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c7137bd1a8 <col:41> 'P' lvalue ParmVar 0x55c713782b10 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bd1c8 <col:49> 'T' lvalue ParmVar 0x55c713782bb8 'x' 'T &'
|-FunctionTemplateDecl 0x55c713783188 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55c713782da8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713782e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c7137830e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713782ee8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713782f60 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c713783008 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bd3b0 <col:55, line:433:5>
|     `-ReturnStmt 0x55c7137bd3a0 <line:432:9, col:51>
|       `-CallExpr 0x55c7137bd360 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bd260 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bd2e0 <col:21> 'const char *' lvalue ParmVar 0x55c713782ee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bd300 <col:30> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         |-DeclRefExpr 0x55c7137bd320 <col:42> 'P' lvalue ParmVar 0x55c713782f60 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bd340 <col:50> 'T' lvalue ParmVar 0x55c713783008 'x' 'T &'
|-FunctionTemplateDecl 0x55c7137835d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55c7137831f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713783278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55c713783538 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55c713783338 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c7137833b0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55c713783458 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55c7137bd5d8 <col:56, line:437:5>
| |   `-ReturnStmt 0x55c7137bd5c8 <line:436:9, col:63>
| |     `-CallExpr 0x55c7137bd588 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c7137bd3d8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c7137bd458 <col:21> 'const char *' lvalue ParmVar 0x55c713783338 'keyword' 'const char *'
| |       |-BinaryOperator 0x55c7137bd528 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55c7137bd4d8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55c7137bd4b8 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55c7137bd510 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55c7137bd4f0 <col:42> 'const int' lvalue Var 0x55c713780280 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55c7137bd548 <col:54> 'P' lvalue ParmVar 0x55c7137833b0 'parser' 'P'
| |       `-DeclRefExpr 0x55c7137bd568 <col:62> 'T' lvalue ParmVar 0x55c713783458 'x' 'T &'
| |-CXXMethodDecl 0x55c7136aaec8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, NamedIntArg, int &)'
| | |-TemplateArgument type 'NamedIntArg'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55c7136aac30 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x55c7136aacd8 <col:40, col:42> col:42 parser 'NamedIntArg':'NamedIntArg'
| | `-ParmVarDecl 0x55c7136aada8 <col:50, col:53> col:53 x 'int &'
| `-CXXMethodDecl 0x55c7136abfd8 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55c7136abd40 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55c7136abde8 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x55c7136abeb8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55c713783b08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55c713783648 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137836c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713783a68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c713783788 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713783808 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c713783880 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c713783928 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bd740 <col:64, line:442:5>
|     |-CallExpr 0x55c7137bd6c0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bd5f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c7137bd630 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bd640 <col:30> 'const char *' lvalue ParmVar 0x55c713783788 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137bd660 <col:39> 'int' lvalue ParmVar 0x55c713783808 'flags' 'int'
|     | |-DeclRefExpr 0x55c7137bd680 <col:46> 'P' lvalue ParmVar 0x55c713783880 'parser' 'P'
|     | `-DeclRefExpr 0x55c7137bd6a0 <col:54> 'T' lvalue ParmVar 0x55c713783928 'x' 'T &'
|     `-ReturnStmt 0x55c7137bd730 <line:441:9, col:17>
|       `-UnaryOperator 0x55c7137bd718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bd708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713784108 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55c713783b80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713783bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c713783c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c713784068 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c713783d40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713783db8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c713783e58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55c713783f28 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bd8d8 <col:84, line:458:5>
|     `-ReturnStmt 0x55c7137bd8c8 <line:457:9, col:64>
|       `-CallExpr 0x55c7137bd880 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bd770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bd7e0 <col:28> 'const char *' lvalue ParmVar 0x55c713783d40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bd800 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c7137bd820 <col:40> 'P' lvalue ParmVar 0x55c713783db8 'parser' 'P'
|         |-DeclRefExpr 0x55c7137bd840 <col:48> 'T' lvalue ParmVar 0x55c713783e58 'x' 'T &'
|         `-DeclRefExpr 0x55c7137bd860 <col:51> 'const V' lvalue ParmVar 0x55c713783f28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c713784688 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c713784180 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137841f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c713784278 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c7137845e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c713784340 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137843b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c713784458 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55c7137844f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bda68 <col:86, line:462:5>
|     `-ReturnStmt 0x55c7137bda58 <line:461:9, col:73>
|       `-CallExpr 0x55c7137bda10 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bd900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bd970 <col:28> 'const char *' lvalue ParmVar 0x55c713784340 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bd990 <col:37> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         |-DeclRefExpr 0x55c7137bd9b0 <col:49> 'P' lvalue ParmVar 0x55c7137843b8 'parser' 'P'
|         |-DeclRefExpr 0x55c7137bd9d0 <col:57> 'T' lvalue ParmVar 0x55c713784458 'x' 'T &'
|         `-DeclRefExpr 0x55c7137bd9f0 <col:60> 'const V' lvalue ParmVar 0x55c7137844f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c713784ce8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55c713784700 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713784778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c7137847f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c713784c48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c7137848c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713784940 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137849b8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55c713784a58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55c713784af8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c7137bdbf8 <col:95, line:467:5>
|     |-CallExpr 0x55c7137bdb70 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bda80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c7137bdac0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bdad0 <col:37> 'const char *' lvalue ParmVar 0x55c7137848c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137bdaf0 <col:46> 'int' lvalue ParmVar 0x55c713784940 'flags' 'int'
|     | |-DeclRefExpr 0x55c7137bdb10 <col:53> 'P' lvalue ParmVar 0x55c7137849b8 'parser' 'P'
|     | |-DeclRefExpr 0x55c7137bdb30 <col:61> 'T' lvalue ParmVar 0x55c713784a58 'x' 'T &'
|     | `-DeclRefExpr 0x55c7137bdb50 <col:64> 'const V' lvalue ParmVar 0x55c713784af8 'default_value' 'const V &'
|     `-ReturnStmt 0x55c7137bdbe8 <line:466:9, col:17>
|       `-UnaryOperator 0x55c7137bdbd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bdbc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c7137852c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55c713784d68 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713784de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c713784e68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c713785228 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c713784f30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713784fa8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c713785048 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c7137850e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c7137bdda0 <col:63, line:481:5>
|     `-ReturnStmt 0x55c7137bdd90 <line:480:9, col:47>
|       `-CallExpr 0x55c7137bdd48 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bdc28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bdca8 <col:21> 'const char *' lvalue ParmVar 0x55c713784f30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bdcc8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c7137bdce8 <col:33> 'P' lvalue ParmVar 0x55c713784fa8 'parser' 'P'
|         |-DeclRefExpr 0x55c7137bdd08 <col:41> 'T1' lvalue ParmVar 0x55c713785048 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c7137bdd28 <col:45> 'T2' lvalue ParmVar 0x55c7137850e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c713785848 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55c713785340 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137853b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c713785438 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c7137857a8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c713785500 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713785578 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c713785618 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c7137856b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c7137bdf40 <col:65, line:485:5>
|     `-ReturnStmt 0x55c7137bdf30 <line:484:9, col:55>
|       `-CallExpr 0x55c7137bdee8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bddc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bde48 <col:21> 'const char *' lvalue ParmVar 0x55c713785500 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bde68 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c7137bde88 <col:41> 'P' lvalue ParmVar 0x55c713785578 'parser' 'P'
|         |-DeclRefExpr 0x55c7137bdea8 <col:49> 'T1' lvalue ParmVar 0x55c713785618 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c7137bdec8 <col:53> 'T2' lvalue ParmVar 0x55c7137856b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c713785dc8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55c7137858c0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713785938 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c7137859b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c713785d28 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c713785a80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713785af8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c713785b98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c713785c38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c7137be0e0 <col:65, line:489:5>
|     `-ReturnStmt 0x55c7137be0d0 <line:488:9, col:56>
|       `-CallExpr 0x55c7137be088 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bdf68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bdfe8 <col:21> 'const char *' lvalue ParmVar 0x55c713785a80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137be008 <col:30> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         |-DeclRefExpr 0x55c7137be028 <col:42> 'P' lvalue ParmVar 0x55c713785af8 'parser' 'P'
|         |-DeclRefExpr 0x55c7137be048 <col:50> 'T1' lvalue ParmVar 0x55c713785b98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c7137be068 <col:54> 'T2' lvalue ParmVar 0x55c713785c38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c713793898 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55c713785e40 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713793410 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c713793488 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c7137937f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c713793550 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137935c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c713793668 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c713793708 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c7137be330 <col:66, line:493:5>
|     `-ReturnStmt 0x55c7137be320 <line:492:9, col:68>
|       `-CallExpr 0x55c7137be2d8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137be108 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137be188 <col:21> 'const char *' lvalue ParmVar 0x55c713793550 'keyword' 'const char *'
|         |-BinaryOperator 0x55c7137be258 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c7137be208 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c7137be1e8 <col:30> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c7137be240 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c7137be220 <col:42> 'const int' lvalue Var 0x55c713780280 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c7137be278 <col:54> 'P' lvalue ParmVar 0x55c7137935c8 'parser' 'P'
|         |-DeclRefExpr 0x55c7137be298 <col:62> 'T1' lvalue ParmVar 0x55c713793668 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c7137be2b8 <col:66> 'T2' lvalue ParmVar 0x55c713793708 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c713793ef8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55c713793910 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713793988 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c713793a08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c713793e58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c713793ad0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713793b50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c713793bc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c713793c68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c713793d08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c7137be4c0 <col:74, line:498:5>
|     |-CallExpr 0x55c7137be438 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137be348 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c7137be388 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c7137be398 <col:30> 'const char *' lvalue ParmVar 0x55c713793ad0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137be3b8 <col:39> 'int' lvalue ParmVar 0x55c713793b50 'flags' 'int'
|     | |-DeclRefExpr 0x55c7137be3d8 <col:46> 'P' lvalue ParmVar 0x55c713793bc8 'parser' 'P'
|     | |-DeclRefExpr 0x55c7137be3f8 <col:54> 'T1' lvalue ParmVar 0x55c713793c68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55c7137be418 <col:58> 'T2' lvalue ParmVar 0x55c713793d08 'x2' 'T2 &'
|     `-ReturnStmt 0x55c7137be4b0 <line:497:9, col:17>
|       `-UnaryOperator 0x55c7137be498 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137be488 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713794258 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55c713793f78 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137941b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c713794030 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137940a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55c7137be608 <col:52, line:509:5>
|     `-ReturnStmt 0x55c7137be5f8 <line:508:9, col:44>
|       `-CallExpr 0x55c7137be5c0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137be4f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137be560 <col:26> 'const char *' lvalue ParmVar 0x55c713794030 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137be580 <col:35> 'int' 0
|         `-DeclRefExpr 0x55c7137be5a0 <col:38> 'P' lvalue ParmVar 0x55c7137940a8 'parser' 'P'
|-FunctionTemplateDecl 0x55c713794558 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55c7137942c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137944b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c713794370 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137943e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c7137be748 <col:54, line:513:5>
|     `-ReturnStmt 0x55c7137be738 <line:512:9, col:52>
|       `-CallExpr 0x55c7137be700 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137be630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137be6a0 <col:26> 'const char *' lvalue ParmVar 0x55c713794370 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137be6c0 <col:35> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c7137be6e0 <col:46> 'P' lvalue ParmVar 0x55c7137943e8 'parser' 'P'
|-FunctionTemplateDecl 0x55c713794858 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55c7137945c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137947b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c713794670 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137946e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c7137be888 <col:54, line:517:5>
|     `-ReturnStmt 0x55c7137be878 <line:516:9, col:53>
|       `-CallExpr 0x55c7137be840 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137be770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137be7e0 <col:26> 'const char *' lvalue ParmVar 0x55c713794670 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137be800 <col:35> 'const int' lvalue Var 0x55c713780280 'positional' 'const int'
|         `-DeclRefExpr 0x55c7137be820 <col:47> 'P' lvalue ParmVar 0x55c7137946e8 'parser' 'P'
|-FunctionTemplateDecl 0x55c713794b58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c7137948c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c713794ab8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c713794970 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137949e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55c7137bea78 <col:55, line:521:5>
|     `-ReturnStmt 0x55c7137bea68 <line:520:9, col:65>
|       `-CallExpr 0x55c7137bea30 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137be8b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137be920 <col:26> 'const char *' lvalue ParmVar 0x55c713794970 'keyword' 'const char *'
|         |-BinaryOperator 0x55c7137be9f0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55c7137be9a0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c7137be980 <col:35> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c7137be9d8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c7137be9b8 <col:47> 'const int' lvalue Var 0x55c713780280 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c7137bea10 <col:59> 'P' lvalue ParmVar 0x55c7137949e8 'parser' 'P'
|-FunctionTemplateDecl 0x55c713794f28 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55c713794bc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c713794e88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c713794c70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713794cf0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c713794d68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55c7137bebb8 <col:63, line:526:5>
|     |-CallExpr 0x55c7137beb40 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bea90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55c7137bead0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55c7137beae0 <col:35> 'const char *' lvalue ParmVar 0x55c713794c70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c7137beb00 <col:44> 'int' lvalue ParmVar 0x55c713794cf0 'flags' 'int'
|     | `-DeclRefExpr 0x55c7137beb20 <col:51> 'P' lvalue ParmVar 0x55c713794d68 'parser' 'P'
|     `-ReturnStmt 0x55c7137beba8 <line:525:9, col:17>
|       `-UnaryOperator 0x55c7137beb90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137beb80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713795378 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55c713794f98 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713795018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c7137952d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c7137950d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713795150 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137951f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bed10 <col:58, line:541:5>
|     `-ReturnStmt 0x55c7137bed00 <line:540:9, col:39>
|       `-CallExpr 0x55c7137becc8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bebe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bec68 <col:21> 'const char *' lvalue ParmVar 0x55c7137950d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bec88 <col:30> 'P' lvalue ParmVar 0x55c713795150 'parser' 'P'
|         `-DeclRefExpr 0x55c7137beca8 <col:38> 'T' lvalue ParmVar 0x55c7137951f8 'x' 'T &'
|-FunctionTemplateDecl 0x55c7137957c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55c7137953e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713795468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713795728 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713795528 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137955a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c713795648 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bee48 <col:60, line:545:5>
|     `-ReturnStmt 0x55c7137bee38 <line:544:9, col:41>
|       `-CallExpr 0x55c7137bee00 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bed38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137beda0 <col:23> 'const char *' lvalue ParmVar 0x55c713795528 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bedc0 <col:32> 'P' lvalue ParmVar 0x55c7137955a0 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bede0 <col:40> 'T' lvalue ParmVar 0x55c713795648 'x' 'T &'
|-FunctionTemplateDecl 0x55c713795c18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55c713795838 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137958b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713795b78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713795978 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137959f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c713795a98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bef80 <col:60, line:549:5>
|     `-ReturnStmt 0x55c7137bef70 <line:548:9, col:41>
|       `-CallExpr 0x55c7137bef38 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bee70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137beed8 <col:23> 'const char *' lvalue ParmVar 0x55c713795978 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137beef8 <col:32> 'P' lvalue ParmVar 0x55c7137959f0 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bef18 <col:40> 'T' lvalue ParmVar 0x55c713795a98 'x' 'T &'
|-FunctionTemplateDecl 0x55c713796068 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c713795c88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713795d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713795fc8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713795dc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713795e40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55c713795ee8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bf0b8 <col:61, line:553:5>
|     `-ReturnStmt 0x55c7137bf0a8 <line:552:9, col:42>
|       `-CallExpr 0x55c7137bf070 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137befa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bf010 <col:24> 'const char *' lvalue ParmVar 0x55c713795dc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bf030 <col:33> 'P' lvalue ParmVar 0x55c713795e40 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bf050 <col:41> 'T' lvalue ParmVar 0x55c713795ee8 'x' 'T &'
|-FunctionTemplateDecl 0x55c713796548 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55c7137960d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713796158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c7137964a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c713796218 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713796298 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c713796310 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137963b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bf230 <col:69, line:557:5>
|     `-ReturnStmt 0x55c7137bf220 <line:556:9, col:46>
|       `-CallExpr 0x55c7137bf1e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bf0e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bf160 <col:21> 'const char *' lvalue ParmVar 0x55c713796218 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bf180 <col:30> 'int' lvalue ParmVar 0x55c713796298 'flags' 'int'
|         |-DeclRefExpr 0x55c7137bf1a0 <col:37> 'P' lvalue ParmVar 0x55c713796310 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bf1c0 <col:45> 'T' lvalue ParmVar 0x55c7137963b8 'x' 'T &'
|-FunctionTemplateDecl 0x55c713796858 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55c7137965c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137967b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c713796670 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137966e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55c7137bf370 <col:56, line:571:5>
|     `-ReturnStmt 0x55c7137bf360 <line:570:9, col:48>
|       `-CallExpr 0x55c7137bf328 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bf258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bf2c8 <col:30> 'const char *' lvalue ParmVar 0x55c713796670 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bf2e8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55c7137bf308 <col:42> 'P' lvalue ParmVar 0x55c7137966e8 'parser' 'P'
|-FunctionTemplateDecl 0x55c713796be8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55c7137968c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c713796b48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c713796970 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137969f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c713796a68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c7137bf540 <col:67, line:576:5>
|     |-CallExpr 0x55c7137bf4c8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bf388 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c7137bf3c8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bf3d8 <col:39> 'const char *' lvalue ParmVar 0x55c713796970 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c7137bf488 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c7137bf438 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c7137bf3f8 <col:48> 'int' lvalue ParmVar 0x55c7137969f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c7137bf470 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c7137bf450 <col:56> 'const int' lvalue Var 0x55c713780470 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55c7137bf4a8 <col:68> 'P' lvalue ParmVar 0x55c713796a68 'parser' 'P'
|     `-ReturnStmt 0x55c7137bf530 <line:575:9, col:17>
|       `-UnaryOperator 0x55c7137bf518 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bf508 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713797038 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55c713796c58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713796cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713796f98 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c713796d98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713796e10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c713796eb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bf6b0 <col:62, line:592:5>
|     `-ReturnStmt 0x55c7137bf6a0 <line:591:9, col:51>
|       `-CallExpr 0x55c7137bf660 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bf570 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bf5e0 <col:30> 'const char *' lvalue ParmVar 0x55c713796d98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bf600 <col:39> 'int' 0
|         |-DeclRefExpr 0x55c7137bf620 <col:42> 'P' lvalue ParmVar 0x55c713796e10 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bf640 <col:50> 'T' lvalue ParmVar 0x55c713796eb8 'x' 'T &'
|-FunctionTemplateDecl 0x55c713797518 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55c7137970a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713797128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713797478 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c7137971e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713797268 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137972e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55c713797388 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55c7137bf8a8 <col:73, line:597:5>
|     |-CallExpr 0x55c7137bf828 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bf6c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c7137bf708 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bf718 <col:39> 'const char *' lvalue ParmVar 0x55c7137971e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c7137bf7c8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c7137bf778 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c7137bf738 <col:48> 'int' lvalue ParmVar 0x55c713797268 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c7137bf7b0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c7137bf790 <col:56> 'const int' lvalue Var 0x55c713780470 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c7137bf7e8 <col:68> 'P' lvalue ParmVar 0x55c7137972e0 'parser' 'P'
|     | `-DeclRefExpr 0x55c7137bf808 <col:76> 'T' lvalue ParmVar 0x55c713797388 'x' 'T &'
|     `-ReturnStmt 0x55c7137bf898 <line:596:9, col:17>
|       `-UnaryOperator 0x55c7137bf880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bf870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713797ac8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55c713797590 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713797608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713797a28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c7137976c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713797740 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55c713797900 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c7137bfa18 <col:65, line:614:5>
|     `-ReturnStmt 0x55c7137bfa08 <line:613:9, col:46>
|       `-CallExpr 0x55c7137bf9c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bf8d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bf948 <col:25> 'const char *' lvalue ParmVar 0x55c7137976c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bf968 <col:34> 'int' 0
|         |-DeclRefExpr 0x55c7137bf988 <col:37> 'P' lvalue ParmVar 0x55c713797740 'parser' 'P'
|         `-DeclRefExpr 0x55c7137bf9a8 <col:45> 'Vector<T>' lvalue ParmVar 0x55c713797900 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c713797ef8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55c713797b38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713797e58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55c713797bf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713797d40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c7137bfc30 <col:55, line:618:5>
|     `-ReturnStmt 0x55c7137bfc20 <line:617:9, col:55>
|       `-CallExpr 0x55c7137bfbe0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bfa40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bfab0 <col:25> 'const char *' lvalue ParmVar 0x55c713797bf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c7137bfad0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55c7137bfba0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c7137bfbc0 <col:54> 'Vector<T>' lvalue ParmVar 0x55c713797d40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c7137984c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55c713797f60 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c713797fd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713798428 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c713798098 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713798118 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c713798190 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137982e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c7137bfe28 <col:76, line:623:5>
|     |-CallExpr 0x55c7137bfda8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c7137bfc48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55c7137bfc88 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55c7137bfc98 <col:34> 'const char *' lvalue ParmVar 0x55c713798098 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c7137bfd48 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c7137bfcf8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c7137bfcb8 <col:43> 'int' lvalue ParmVar 0x55c713798118 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c7137bfd30 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c7137bfd10 <col:51> 'const int' lvalue Var 0x55c713780470 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c7137bfd68 <col:63> 'P' lvalue ParmVar 0x55c713798190 'parser' 'P'
|     | `-DeclRefExpr 0x55c7137bfd88 <col:71> 'Vector<T>' lvalue ParmVar 0x55c7137982e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55c7137bfe18 <line:622:9, col:17>
|       `-UnaryOperator 0x55c7137bfe00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137bfdf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c713798a08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55c713798540 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137985b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c713798968 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55c713798678 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137986f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c713798840 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c7137c0090 <col:66, line:627:5>
|     `-ReturnStmt 0x55c7137c0080 <line:626:9, col:59>
|       `-CallExpr 0x55c7137c0040 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c7137bfe58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c7137bfec8 <col:25> 'const char *' lvalue ParmVar 0x55c713798678 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c7137bfee8 <col:34> 'int' lvalue ParmVar 0x55c7137986f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55c7137c0000 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c7137c0020 <col:58> 'Vector<T>' lvalue ParmVar 0x55c713798840 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55c713798a98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55c7137c0110 <col:25, line:633:5>
|   `-ReturnStmt 0x55c7137c0100 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55c7137c00e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c7137c00b8 <col:16> 'const bool' lvalue ->_status 0x55c7137a6608
|         `-CXXThisExpr 0x55c7137c00a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c713798c18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55c713798b50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55c7137c01f8 <col:27, line:639:5>
|   |-BinaryOperator 0x55c7137c01a0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c7137c0128 <col:9> 'bool' lvalue ParmVar 0x55c713798b50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c7137c0188 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c7137c0158 <col:13> 'bool' lvalue ->_status 0x55c7137a6608
|   |     `-CXXThisExpr 0x55c7137c0148 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c7137c01e8 <line:638:9, col:17>
|     `-UnaryOperator 0x55c7137c01d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137c01c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c713798d98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c713798cd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55c7137c02e8 <col:39, line:644:5>
|   |-BinaryOperator 0x55c7137c0290 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c7137c0218 <col:9> 'bool' lvalue ParmVar 0x55c713798cd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c7137c0278 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c7137c0248 <col:13> 'const bool' lvalue ->_status 0x55c7137a6608
|   |     `-CXXThisExpr 0x55c7137c0238 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c7137c02d8 <line:643:9, col:17>
|     `-UnaryOperator 0x55c7137c02c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137c02b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c713798e60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55c7137c0390 <col:30, line:651:5>
|   `-ReturnStmt 0x55c7137c0380 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55c7137c0368 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c7137c0338 <col:16> 'bool' lvalue ->_read_status 0x55c713775910
|         `-ImplicitCastExpr 0x55c7137c0318 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55c7137c0308 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c713798fa8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55c713798f18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55c7137c0498 <col:32, line:658:5>
|   |-BinaryOperator 0x55c7137c0440 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c7137c03a8 <col:9> 'bool' lvalue ParmVar 0x55c713798f18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c7137c0428 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c7137c03f8 <col:13> 'bool' lvalue ->_read_status 0x55c713775910
|   |     `-ImplicitCastExpr 0x55c7137c03d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c7137c03c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c7137c0488 <line:657:9, col:17>
|     `-UnaryOperator 0x55c7137c0470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137c0460 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c7137990f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c713799068 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55c7137c05a8 <col:44, line:663:5>
|   |-BinaryOperator 0x55c7137c0550 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c7137c04b8 <col:9> 'bool' lvalue ParmVar 0x55c713799068 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c7137c0538 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c7137c0508 <col:13> 'bool' lvalue ->_read_status 0x55c713775910
|   |     `-ImplicitCastExpr 0x55c7137c04e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c7137c04d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c7137c0598 <line:662:9, col:17>
|     `-UnaryOperator 0x55c7137c0580 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7137c0570 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c7137991c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55c713799288 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55c713799350 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55c713799418 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55c713799728 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55c7137994b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713799688 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55c713799598 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55c7137c0970 <col:19, line:706:5>
|     `-IfStmt 0x55c7137c0948 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55c7137c06a8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55c7137c0878 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55c7137c0848 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55c7137c0808 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55c7137c0700 <col:42> '<bound member function type>' ->simple_slot 0x55c7137b9a80
|       |     | `-CXXThisExpr 0x55c7137c06f0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55c7137c07a8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55c7137c0750 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55c7137337d8 0x55c7137321e8 0x55c7134fbf48
|       |     | `-DeclRefExpr 0x55c7137c0730 <col:55> 'T' lvalue ParmVar 0x55c713799598 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55c7137c07e8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55c7137c0938 <line:705:13, col:34>
|         `-CallExpr 0x55c7137c0910 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55c7137c0898 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55c7137c08f0 <col:33> 'T' lvalue ParmVar 0x55c713799598 'x' 'T &'
|-FunctionTemplateDecl 0x55c7137999f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55c713799788 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c713799958 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55c713799868 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55c7137c0d50 <col:31, line:717:5>
|     |-DeclStmt 0x55c7137c0ab0 <line:713:9, col:23>
|     | `-VarDecl 0x55c7137c0998 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55c7137c0a88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c7137c0a10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c7137c0a68 <col:21> 'T' lvalue ParmVar 0x55c713799868 'x' 'T &'
|     |-IfStmt 0x55c7137c0d00 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55c7137c0ba8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55c7137c0ce0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c7137c0c80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c7137c0c10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|     |   | `-DeclRefExpr 0x55c7137c0bf0 <col:14> 'T *' lvalue Var 0x55c7137c0998 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55c7137c0cc0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55c7137c0d38 <line:716:9, col:16>
|       `-DeclRefExpr 0x55c7137c0d18 <col:16> 'T *' lvalue Var 0x55c7137c0998 's' 'T *'
|-FunctionTemplateDecl 0x55c713799e08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55c713799a58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c713799ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c713799d68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55c713799bb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55c713799c58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55c7137c1060 <col:37, line:726:5>
|     |-IfStmt 0x55c7137c0ff0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55c7137c1010 <line:723:13, col:26>
|     | | `-VarDecl 0x55c7137c0db8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55c7137c0ea8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55c7137c0e30 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55c7137c0e88 <col:25> 'T' lvalue ParmVar 0x55c713799bb8 'x' 'T &'
|     | |-DeclRefExpr 0x55c7137c0ed0 <col:16> 'T *' lvalue Var 0x55c7137c0db8 's' 'T *'
|     | `-BinaryOperator 0x55c7137c0fd0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c7137c0f80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c7137c0f10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|     |   | `-DeclRefExpr 0x55c7137c0ef0 <col:14> 'T *' lvalue Var 0x55c7137c0db8 's' 'T *'
|     |   `-DeclRefExpr 0x55c7137c0fb0 <col:18> 'const V' lvalue ParmVar 0x55c713799c58 'value' 'const V &'
|     `-ReturnStmt 0x55c7137c1050 <line:725:9, col:17>
|       `-UnaryOperator 0x55c7137c1038 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c7137c1028 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c71379a208 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55c713799e70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c71379a168 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55c713799f20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c713799fa0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c71379a048 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55c7137c1e80 <col:65, line:737:5>
|     |-DeclStmt 0x55c7137c10f8 <line:732:9, col:26>
|     | `-VarDecl 0x55c7137c1090 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c7137c1e48 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55c7137c1e68 <line:733:13, col:58>
|       | `-VarDecl 0x55c7137c1120 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c7137c1300 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c7137c12d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c7137c12b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c7137c1298 <col:26, col:58> 'String' (CXXTemporary 0x55c7137c1298)
|       |           `-CXXMemberCallExpr 0x55c7137c1228 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c7137c1198 <col:26> '<bound member function type>' ->find 0x55c7137b9098
|       |             | `-CXXThisExpr 0x55c7137c1188 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c7137c1260 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c11c8 <col:31> 'const char *' lvalue ParmVar 0x55c713799f20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c7137c1278 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c11e8 <col:40> 'int' lvalue ParmVar 0x55c713799fa0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c7137c1208 <col:47> 'Args::Slot *' lvalue Var 0x55c7137c1090 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c7137c13b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c7137c13a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c7137c1380 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c7137c1350 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |       `-ImplicitCastExpr 0x55c7137c1338 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c7137c1318 <col:20> 'String' lvalue Var 0x55c7137c1120 'str' 'String'
|       `-CompoundStmt 0x55c7137c1e28 <col:61, line:736:9>
|         |-DeclStmt 0x55c7137c1870 <line:734:13, col:76>
|         | `-VarDecl 0x55c7137c1408 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c7137c1840 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c7137c17b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c7137c17f8 <col:60> 'T' lvalue ParmVar 0x55c71379a048 'variable' 'T &'
|         |     `-UnaryOperator 0x55c7137c1828 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c7137c1818 <col:71> 'Args *' this
|         `-CallExpr 0x55c7137c1df8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55c7137c1898 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|           | `-CXXThisExpr 0x55c7137c1888 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c7137c1db8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c7137c18c8 <col:23> 'T *' lvalue Var 0x55c7137c1408 's' 'T *'
|           | `-CallExpr 0x55c7137c1d78 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c7137c1b50 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55c7137c1c50 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55c7137c1c70 <col:86> 'String' lvalue Var 0x55c7137c1120 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c7137c1d20 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c7137c1cb0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|           |   | `-DeclRefExpr 0x55c7137c1c90 <col:92> 'T *' lvalue Var 0x55c7137c1408 's' 'T *'
|           |   `-UnaryOperator 0x55c7137c1d60 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c7137c1d50 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55c7137c1dd8 <col:103> 'Args::Slot *' lvalue Var 0x55c7137c1090 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c71379a758 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c71379a278 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c71379a2f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c71379a6b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c71379a3b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c71379a438 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c71379a4d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55c71379a578 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55c7137c2d20 <col:88, line:745:5>
|     |-DeclStmt 0x55c7137c1f18 <line:741:9, col:26>
|     | `-VarDecl 0x55c7137c1eb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c7137c2138 <line:742:9, col:55>
|     | `-VarDecl 0x55c7137c1f40 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c7137c2120 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c7137c20f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c7137c20d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c7137c20b8 <col:22, col:54> 'String' (CXXTemporary 0x55c7137c20b8)
|     |           `-CXXMemberCallExpr 0x55c7137c2048 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c7137c1fb8 <col:22> '<bound member function type>' ->find 0x55c7137b9098
|     |             | `-CXXThisExpr 0x55c7137c1fa8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c7137c2080 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c7137c1fe8 <col:27> 'const char *' lvalue ParmVar 0x55c71379a3b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c7137c2098 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c7137c2008 <col:36> 'int' lvalue ParmVar 0x55c71379a438 'flags' 'int'
|     |             `-DeclRefExpr 0x55c7137c2028 <col:43> 'Args::Slot *' lvalue Var 0x55c7137c1eb0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c7137c2510 <line:743:9, col:72>
|     | `-VarDecl 0x55c7137c2188 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c7137c24e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c7137c2450 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c7137c2498 <col:56> 'T' lvalue ParmVar 0x55c71379a4d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c7137c24c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c7137c24b8 <col:67> 'Args *' this
|     `-CallExpr 0x55c7137c2cf0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55c7137c2538 <col:9> '<bound member function type>' ->postparse 0x55c7137b92a8
|       | `-CXXThisExpr 0x55c7137c2528 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c7137c2cb0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c7137c2568 <col:19> 'T *' lvalue Var 0x55c7137c2188 's' 'T *'
|       | `-ParenExpr 0x55c7137c2c90 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55c7137c2c60 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c7137c2c48 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c7137c2c30 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c7137c2c10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c7137c2be0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |     |       `-ImplicitCastExpr 0x55c7137c2bc8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c7137c2588 <col:25> 'String' lvalue Var 0x55c7137c1f40 'str' 'String'
|       |     |-CallExpr 0x55c7137c2a38 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c7137c2810 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55c7137c2910 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55c7137c2930 <col:89> 'String' lvalue Var 0x55c7137c1f40 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c7137c29e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c7137c2970 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|       |     | | `-DeclRefExpr 0x55c7137c2950 <col:95> 'T *' lvalue Var 0x55c7137c2188 's' 'T *'
|       |     | `-UnaryOperator 0x55c7137c2a20 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c7137c2a10 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55c7137c2ba8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55c7137c2b88 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c7137c2b58 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c7137c2b08 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c7137c2a98 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|       |         | | `-DeclRefExpr 0x55c7137c2a78 <col:109> 'T *' lvalue Var 0x55c7137c2188 's' 'T *'
|       |         | `-DeclRefExpr 0x55c7137c2b38 <col:113> 'const V' lvalue ParmVar 0x55c71379a578 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c7137c2b78 <col:120> 'bool' true
|       `-DeclRefExpr 0x55c7137c2cd0 <col:128> 'Args::Slot *' lvalue Var 0x55c7137c1eb0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c71379ac88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55c71379a7d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c71379a848 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c71379abe8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c71379a908 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c71379a988 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c71379aa00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c71379aaa8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55c7137c3918 <col:75, line:754:5>
|     |-DeclStmt 0x55c7137c2dc8 <line:749:9, col:26>
|     | `-VarDecl 0x55c7137c2d60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c7137c38e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55c7137c3900 <line:750:13, col:58>
|       | `-VarDecl 0x55c7137c2df0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c7137c2fd0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c7137c2fa0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c7137c2f88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c7137c2f68 <col:26, col:58> 'String' (CXXTemporary 0x55c7137c2f68)
|       |           `-CXXMemberCallExpr 0x55c7137c2ef8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c7137c2e68 <col:26> '<bound member function type>' ->find 0x55c7137b9098
|       |             | `-CXXThisExpr 0x55c7137c2e58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c7137c2f30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c2e98 <col:31> 'const char *' lvalue ParmVar 0x55c71379a908 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c7137c2f48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c2eb8 <col:40> 'int' lvalue ParmVar 0x55c71379a988 'flags' 'int'
|       |             `-DeclRefExpr 0x55c7137c2ed8 <col:47> 'Args::Slot *' lvalue Var 0x55c7137c2d60 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c7137c3088 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c7137c3070 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c7137c3050 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c7137c3020 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |       `-ImplicitCastExpr 0x55c7137c3008 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c7137c2fe8 <col:20> 'String' lvalue Var 0x55c7137c2df0 'str' 'String'
|       `-CompoundStmt 0x55c7137c38c0 <col:61, line:753:9>
|         |-DeclStmt 0x55c7137c3460 <line:751:13, col:63>
|         | `-VarDecl 0x55c7137c30d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c7137c3430 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c7137c33a0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c7137c33e8 <col:47> 'T' lvalue ParmVar 0x55c71379aaa8 'variable' 'T &'
|         |     `-UnaryOperator 0x55c7137c3418 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c7137c3408 <col:58> 'Args *' this
|         `-CallExpr 0x55c7137c3890 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55c7137c3488 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|           | `-CXXThisExpr 0x55c7137c3478 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c7137c3850 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c7137c34b8 <col:23> 'T *' lvalue Var 0x55c7137c30d8 's' 'T *'
|           | `-CallExpr 0x55c7137c3810 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c7137c36a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c7137c36e8 <col:56> 'P' lvalue ParmVar 0x55c71379aa00 'parser' 'P'
|           |   |-DeclRefExpr 0x55c7137c3708 <col:64> 'String' lvalue Var 0x55c7137c2df0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c7137c37b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c7137c3748 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|           |   | `-DeclRefExpr 0x55c7137c3728 <col:70> 'T *' lvalue Var 0x55c7137c30d8 's' 'T *'
|           |   `-UnaryOperator 0x55c7137c37f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c7137c37e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55c7137c3870 <col:81> 'Args::Slot *' lvalue Var 0x55c7137c2d60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c71379b2e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c71379ad00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c71379ad78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55c71379adf8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c71379b248 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c71379aec0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c71379af40 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c71379afb8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55c71379b058 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55c71379b0f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55c7137c6a28 <col:98, line:762:5>
|     |-DeclStmt 0x55c7137c39b0 <line:758:9, col:26>
|     | `-VarDecl 0x55c7137c3948 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c7137c3bd0 <line:759:9, col:55>
|     | `-VarDecl 0x55c7137c39d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c7137c3bb8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c7137c3b88 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c7137c3b70 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c7137c3b50 <col:22, col:54> 'String' (CXXTemporary 0x55c7137c3b50)
|     |           `-CXXMemberCallExpr 0x55c7137c3ae0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c7137c3a50 <col:22> '<bound member function type>' ->find 0x55c7137b9098
|     |             | `-CXXThisExpr 0x55c7137c3a40 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c7137c3b18 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c7137c3a80 <col:27> 'const char *' lvalue ParmVar 0x55c71379aec0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c7137c3b30 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c7137c3aa0 <col:36> 'int' lvalue ParmVar 0x55c71379af40 'flags' 'int'
|     |             `-DeclRefExpr 0x55c7137c3ac0 <col:43> 'Args::Slot *' lvalue Var 0x55c7137c3948 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c7137c6370 <line:760:9, col:59>
|     | `-VarDecl 0x55c7137c3c28 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c7137c6340 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c7137c62b0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c7137c62f8 <col:43> 'T' lvalue ParmVar 0x55c71379b058 'variable' 'T &'
|     |     `-UnaryOperator 0x55c7137c6328 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c7137c6318 <col:54> 'Args *' this
|     `-CallExpr 0x55c7137c69f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55c7137c6398 <col:9> '<bound member function type>' ->postparse 0x55c7137b92a8
|       | `-CXXThisExpr 0x55c7137c6388 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c7137c69b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c7137c63c8 <col:19> 'T *' lvalue Var 0x55c7137c3c28 's' 'T *'
|       | `-ParenExpr 0x55c7137c6998 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55c7137c6968 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c7137c6950 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c7137c6938 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c7137c6918 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c7137c68e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |     |       `-ImplicitCastExpr 0x55c7137c68d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c7137c63e8 <col:25> 'String' lvalue Var 0x55c7137c39d8 'str' 'String'
|       |     |-CallExpr 0x55c7137c6740 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c7137c65d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55c7137c6618 <col:59> 'P' lvalue ParmVar 0x55c71379afb8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55c7137c6638 <col:67> 'String' lvalue Var 0x55c7137c39d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c7137c66e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c7137c6678 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|       |     | | `-DeclRefExpr 0x55c7137c6658 <col:73> 'T *' lvalue Var 0x55c7137c3c28 's' 'T *'
|       |     | `-UnaryOperator 0x55c7137c6728 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c7137c6718 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55c7137c68b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55c7137c6890 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c7137c6860 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c7137c6810 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c7137c67a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|       |         | | `-DeclRefExpr 0x55c7137c6780 <col:87> 'T *' lvalue Var 0x55c7137c3c28 's' 'T *'
|       |         | `-DeclRefExpr 0x55c7137c6840 <col:91> 'const V' lvalue ParmVar 0x55c71379b0f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c7137c6880 <col:98> 'bool' true
|       `-DeclRefExpr 0x55c7137c69d8 <col:106> 'Args::Slot *' lvalue Var 0x55c7137c3948 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c7137a3688 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55c71379b368 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137a3120 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c7137a3198 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c7137a35e8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c7137a3260 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137a32e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137a3358 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137a33f8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55c7137a3498 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55c7137c7a08 <col:60, line:773:5>
|     |-DeclStmt 0x55c7137c6ad0 <line:767:9, col:26>
|     | `-VarDecl 0x55c7137c6a68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c7137c79d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55c7137c79f0 <line:768:13, col:58>
|       | `-VarDecl 0x55c7137c6af8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c7137c6cd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c7137c6ca8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c7137c6c90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c7137c6c70 <col:26, col:58> 'String' (CXXTemporary 0x55c7137c6c70)
|       |           `-CXXMemberCallExpr 0x55c7137c6c00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c7137c6b70 <col:26> '<bound member function type>' ->find 0x55c7137b9098
|       |             | `-CXXThisExpr 0x55c7137c6b60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c7137c6c38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c6ba0 <col:31> 'const char *' lvalue ParmVar 0x55c7137a3260 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c7137c6c50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c6bc0 <col:40> 'int' lvalue ParmVar 0x55c7137a32e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c7137c6be0 <col:47> 'Args::Slot *' lvalue Var 0x55c7137c6a68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c7137c6d90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c7137c6d78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c7137c6d58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c7137c6d28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |       `-ImplicitCastExpr 0x55c7137c6d10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c7137c6cf0 <col:20> 'String' lvalue Var 0x55c7137c6af8 'str' 'String'
|       `-CompoundStmt 0x55c7137c79a8 <col:61, line:772:9>
|         |-DeclStmt 0x55c7137c70d0 <line:769:13, col:66>
|         | `-VarDecl 0x55c7137c6de8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55c7137c70a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c7137c7010 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c7137c7058 <col:49> 'T1' lvalue ParmVar 0x55c7137a33f8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55c7137c7088 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c7137c7078 <col:61> 'Args *' this
|         |-DeclStmt 0x55c7137c7440 <line:770:13, col:66>
|         | `-VarDecl 0x55c7137c7158 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55c7137c7410 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c7137c7380 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c7137c73c8 <col:49> 'T2' lvalue ParmVar 0x55c7137a3498 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55c7137c73f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c7137c73e8 <col:61> 'Args *' this
|         `-CallExpr 0x55c7137c7978 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55c7137c7468 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|           | `-CXXThisExpr 0x55c7137c7458 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c7137c7938 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55c7137c74d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55c7137c7498 <col:23> 'T1 *' lvalue Var 0x55c7137c6de8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55c7137c74b8 <col:29> 'T2 *' lvalue Var 0x55c7137c7158 's2' 'T2 *'
|           | `-CallExpr 0x55c7137c78f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c7137c76c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c7137c7708 <col:63> 'P' lvalue ParmVar 0x55c7137a3358 'parser' 'P'
|           |   |-DeclRefExpr 0x55c7137c7728 <col:71> 'String' lvalue Var 0x55c7137c6af8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c7137c77d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c7137c7768 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|           |   | `-DeclRefExpr 0x55c7137c7748 <col:77> 'T1 *' lvalue Var 0x55c7137c6de8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55c7137c7898 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c7137c7828 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|           |   | `-DeclRefExpr 0x55c7137c7808 <col:82> 'T2 *' lvalue Var 0x55c7137c7158 's2' 'T2 *'
|           |   `-UnaryOperator 0x55c7137c78d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c7137c78c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55c7137c7958 <col:94> 'Args::Slot *' lvalue Var 0x55c7137c6a68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c7137a3a78 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55c7137a3708 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137a39d8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c7137a37c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137a3840 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137a38b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c7137c7f20 <col:67, line:780:5>
|     |-DeclStmt 0x55c7137c7aa0 <line:777:9, col:26>
|     | `-VarDecl 0x55c7137c7a38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c7137c7ee8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55c7137c7f08 <line:778:13, col:58>
|       | `-VarDecl 0x55c7137c7ac8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c7137c7ca8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c7137c7c78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c7137c7c60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c7137c7c40 <col:26, col:58> 'String' (CXXTemporary 0x55c7137c7c40)
|       |           `-CXXMemberCallExpr 0x55c7137c7bd0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c7137c7b40 <col:26> '<bound member function type>' ->find 0x55c7137b9098
|       |             | `-CXXThisExpr 0x55c7137c7b30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c7137c7c08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c7b70 <col:31> 'const char *' lvalue ParmVar 0x55c7137a37c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c7137c7c20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c7137c7b90 <col:40> 'int' lvalue ParmVar 0x55c7137a3840 'flags' 'int'
|       |             `-DeclRefExpr 0x55c7137c7bb0 <col:47> 'Args::Slot *' lvalue Var 0x55c7137c7a38 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c7137c7d60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c7137c7d48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c7137c7d28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c7137c7cf8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|       |       `-ImplicitCastExpr 0x55c7137c7ce0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c7137c7cc0 <col:20> 'String' lvalue Var 0x55c7137c7ac8 'str' 'String'
|       `-CallExpr 0x55c7137c7eb8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55c7137c7d88 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|         | `-CXXThisExpr 0x55c7137c7d78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55c7137c7e68 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55c7137c7dd8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55c7137c7db8 <col:23> 'P' lvalue ParmVar 0x55c7137a38b8 'parser' 'P'
|         | |-DeclRefExpr 0x55c7137c7e20 <col:36> 'String' lvalue Var 0x55c7137c7ac8 'str' 'String'
|         | `-UnaryOperator 0x55c7137c7e50 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55c7137c7e40 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55c7137c7e98 <col:49> 'Args::Slot *' lvalue Var 0x55c7137c7a38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c7137a3e18 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c7137a3ae8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c7137a3d78 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c7137a3ba0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137a3c20 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137a3c98 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55c7137c8890 <col:71, line:792:5>
|     |-DeclStmt 0x55c7137c7fb8 <line:784:9, col:26>
|     | `-VarDecl 0x55c7137c7f50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c7137c8088 <line:785:9, col:29>
|     | `-VarDecl 0x55c7137c7fe8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c7137c8070 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c7137c8050 <col:28> 'int' 1
|     |-WhileStmt 0x55c7137c8740 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55c7137c8760 <line:786:16, col:61>
|     | | `-VarDecl 0x55c7137c80b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c7137c8290 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c7137c8260 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c7137c8248 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c7137c8228 <col:29, col:61> 'String' (CXXTemporary 0x55c7137c8228)
|     | |           `-CXXMemberCallExpr 0x55c7137c81b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c7137c8128 <col:29> '<bound member function type>' ->find 0x55c7137b9098
|     | |             | `-CXXThisExpr 0x55c7137c8118 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c7137c81f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c8158 <col:34> 'const char *' lvalue ParmVar 0x55c7137a3ba0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c7137c8208 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c8178 <col:43> 'int' lvalue ParmVar 0x55c7137a3c20 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c7137c8198 <col:50> 'Args::Slot *' lvalue Var 0x55c7137c7f50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c7137c8348 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c7137c8330 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c7137c8310 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c7137c82e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|     | |       `-ImplicitCastExpr 0x55c7137c82c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c7137c82a8 <col:23> 'String' lvalue Var 0x55c7137c80b0 'str' 'String'
|     | `-CompoundStmt 0x55c7137c8718 <col:64, line:790:9>
|     |   |-CallExpr 0x55c7137c84a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55c7137c8370 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|     |   | | `-CXXThisExpr 0x55c7137c8360 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c7137c8450 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c7137c83c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c7137c83a0 <col:23> 'P' lvalue ParmVar 0x55c7137a3c98 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c7137c8408 <col:36> 'String' lvalue Var 0x55c7137c80b0 'str' 'String'
|     |   | | `-UnaryOperator 0x55c7137c8438 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c7137c8428 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55c7137c8480 <col:49> 'Args::Slot *' lvalue Var 0x55c7137c7f50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c7137c8638 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c7137c84d0 <col:13> 'int' lvalue Var 0x55c7137c7fe8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c7137c8620 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c7137c8600 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c7137c8568 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c7137c8548 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c7137c8530 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c7137c84f0 <col:28> 'int' lvalue Var 0x55c7137c7fe8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c7137c8510 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c7137c85e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c7137c85b8 <col:49> 'bool' lvalue ->_read_status 0x55c713775910
|     |   |         `-ImplicitCastExpr 0x55c7137c8598 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c7137c8588 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c7137c86e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c7137c8658 <col:13> 'int' lvalue ParmVar 0x55c7137a3c20 'flags' 'int'
|     |     `-UnaryOperator 0x55c7137c86d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c7137c86b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c7137c8698 <col:23> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c7137c8870 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c7137c87a8 <col:9> 'bool' lvalue ->_read_status 0x55c713775910
|       | `-ImplicitCastExpr 0x55c7137c8788 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c7137c8778 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c7137c8850 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c7137c8830 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c7137c8818 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c7137c87d8 <col:25> 'int' lvalue Var 0x55c7137c7fe8 'read_status' 'int'
|           `-IntegerLiteral 0x55c7137c87f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c7137a42f8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c7137a3e88 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137a3f08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c7137a4258 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c7137a3fc8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137a4048 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137a40c0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137a4168 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55c7137c9820 <col:84, line:805:5>
|     |-DeclStmt 0x55c7137c8938 <line:796:9, col:26>
|     | `-VarDecl 0x55c7137c88d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c7137c8a08 <line:797:9, col:29>
|     | `-VarDecl 0x55c7137c8968 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c7137c89f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c7137c89d0 <col:28> 'int' 1
|     |-DeclStmt 0x55c7137c8d40 <line:798:9, col:71>
|     | `-VarDecl 0x55c7137c8a58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c7137c8d10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c7137c8c80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55c7137c8cc8 <col:55> 'T' lvalue ParmVar 0x55c7137a4168 'variable' 'T &'
|     |     `-UnaryOperator 0x55c7137c8cf8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c7137c8ce8 <col:66> 'Args *' this
|     |-WhileStmt 0x55c7137c96d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55c7137c96f0 <line:799:16, col:61>
|     | | `-VarDecl 0x55c7137c8d68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c7137c8f48 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c7137c8f18 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c7137c8f00 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c7137c8ee0 <col:29, col:61> 'String' (CXXTemporary 0x55c7137c8ee0)
|     | |           `-CXXMemberCallExpr 0x55c7137c8e70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c7137c8de0 <col:29> '<bound member function type>' ->find 0x55c7137b9098
|     | |             | `-CXXThisExpr 0x55c7137c8dd0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c7137c8ea8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c8e10 <col:34> 'const char *' lvalue ParmVar 0x55c7137a3fc8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c7137c8ec0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c8e30 <col:43> 'int' lvalue ParmVar 0x55c7137a4048 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c7137c8e50 <col:50> 'Args::Slot *' lvalue Var 0x55c7137c88d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c7137c9000 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c7137c8fe8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c7137c8fc8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c7137c8f98 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|     | |       `-ImplicitCastExpr 0x55c7137c8f80 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c7137c8f60 <col:23> 'String' lvalue Var 0x55c7137c8d68 'str' 'String'
|     | `-CompoundStmt 0x55c7137c96a8 <col:64, line:803:9>
|     |   |-CallExpr 0x55c7137c9430 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55c7137c9028 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|     |   | | `-CXXThisExpr 0x55c7137c9018 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55c7137c93f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55c7137c9058 <col:23> 'T *' lvalue Var 0x55c7137c8a58 's' 'T *'
|     |   | | `-CallExpr 0x55c7137c93b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55c7137c9240 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55c7137c9288 <col:56> 'P' lvalue ParmVar 0x55c7137a40c0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55c7137c92a8 <col:64> 'String' lvalue Var 0x55c7137c8d68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55c7137c9358 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55c7137c92e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|     |   | |   | `-DeclRefExpr 0x55c7137c92c8 <col:70> 'T *' lvalue Var 0x55c7137c8a58 's' 'T *'
|     |   | |   `-UnaryOperator 0x55c7137c9398 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55c7137c9388 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55c7137c9410 <col:81> 'Args::Slot *' lvalue Var 0x55c7137c88d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c7137c95c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c7137c9460 <col:13> 'int' lvalue Var 0x55c7137c8968 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c7137c95b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c7137c9590 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c7137c94f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c7137c94d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c7137c94c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c7137c9480 <col:28> 'int' lvalue Var 0x55c7137c8968 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c7137c94a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c7137c9578 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c7137c9548 <col:49> 'bool' lvalue ->_read_status 0x55c713775910
|     |   |         `-ImplicitCastExpr 0x55c7137c9528 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c7137c9518 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c7137c9678 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c7137c95e8 <col:13> 'int' lvalue ParmVar 0x55c7137a4048 'flags' 'int'
|     |     `-UnaryOperator 0x55c7137c9660 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c7137c9648 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c7137c9628 <col:23> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c7137c9800 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c7137c9738 <col:9> 'bool' lvalue ->_read_status 0x55c713775910
|       | `-ImplicitCastExpr 0x55c7137c9718 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c7137c9708 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c7137c97e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c7137c97c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c7137c97a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c7137c9768 <col:25> 'int' lvalue Var 0x55c7137c8968 'read_status' 'int'
|           `-IntegerLiteral 0x55c7137c9788 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c7137a48d8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55c7137a4370 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c7137a43e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c7137a4838 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c7137a44a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c7137a4528 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55c7137a45a0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55c7137a46f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55c7137ca628 <col:87, line:821:5>
|     |-DeclStmt 0x55c7137c98d0 <line:809:9, col:26>
|     | `-VarDecl 0x55c7137c9868 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c7137c99a0 <line:810:9, col:29>
|     | `-VarDecl 0x55c7137c9900 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c7137c9988 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c7137c9968 <col:28> 'int' 1
|     |-DeclStmt 0x55c7137c9be8 <line:811:9, col:38>
|     | `-VarDecl 0x55c7137c9ad0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55c7137c9bc0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c7137c9b48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c7137c9ba0 <col:29> 'Vector<T>' lvalue ParmVar 0x55c7137a46f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55c7137ca4d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55c7137ca4f8 <line:812:16, col:61>
|     | | `-VarDecl 0x55c7137c9c10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c7137c9df0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c7137c9dc0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c7137c9da8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c7137c9d88 <col:29, col:61> 'String' (CXXTemporary 0x55c7137c9d88)
|     | |           `-CXXMemberCallExpr 0x55c7137c9d18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c7137c9c88 <col:29> '<bound member function type>' ->find 0x55c7137b9098
|     | |             | `-CXXThisExpr 0x55c7137c9c78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c7137c9d50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c9cb8 <col:34> 'const char *' lvalue ParmVar 0x55c7137a44a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c7137c9d68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c7137c9cd8 <col:43> 'int' lvalue ParmVar 0x55c7137a4528 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c7137c9cf8 <col:50> 'Args::Slot *' lvalue Var 0x55c7137c9868 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c7137c9ea8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c7137c9e90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c7137c9e70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c7137c9e40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c7134bdf08
|     | |       `-ImplicitCastExpr 0x55c7137c9e28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c7137c9e08 <col:23> 'String' lvalue Var 0x55c7137c9c10 'str' 'String'
|     | `-CompoundStmt 0x55c7137ca4a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55c7137c9f68 <line:813:13, col:23>
|     |   | `-VarDecl 0x55c7137c9ed0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55c7137c9f48 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55c7137ca0e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55c7137c9f90 <col:13> '<bound member function type>' ->postparse 0x55c7137b92a8
|     |   | | `-CXXThisExpr 0x55c7137c9f80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c7137ca090 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c7137c9fe0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c7137c9fc0 <col:23> 'P' lvalue ParmVar 0x55c7137a45a0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c7137ca028 <col:36> 'String' lvalue Var 0x55c7137c9c10 'str' 'String'
|     |   | | |-DeclRefExpr 0x55c7137ca048 <col:41> 'T' lvalue Var 0x55c7137c9ed0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55c7137ca078 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c7137ca068 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55c7137ca0c8 <col:53> 'Args::Slot *' lvalue Var 0x55c7137c9868 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55c7137ca240 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55c7137ca178 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55c7137ca148 <col:17> 'bool' lvalue ->_read_status 0x55c713775910
|     |   | |   `-ImplicitCastExpr 0x55c7137ca128 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55c7137ca118 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55c7137ca218 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55c7137ca1b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55c7137ca190 <col:17> 'Vector<T> *' lvalue Var 0x55c7137c9ad0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55c7137ca1f8 <col:30> 'T' lvalue Var 0x55c7137c9ed0 'sx' 'T'
|     |   |-BinaryOperator 0x55c7137ca3c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c7137ca258 <col:13> 'int' lvalue Var 0x55c7137c9900 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c7137ca3a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c7137ca388 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c7137ca2f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c7137ca2d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c7137ca2b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c7137ca278 <col:28> 'int' lvalue Var 0x55c7137c9900 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c7137ca298 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c7137ca370 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c7137ca340 <col:49> 'bool' lvalue ->_read_status 0x55c713775910
|     |   |         `-ImplicitCastExpr 0x55c7137ca320 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c7137ca310 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c7137ca470 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c7137ca3e0 <col:13> 'int' lvalue ParmVar 0x55c7137a4528 'flags' 'int'
|     |     `-UnaryOperator 0x55c7137ca458 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c7137ca440 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c7137ca420 <col:23> 'const int' lvalue Var 0x55c713780188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c7137ca608 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c7137ca540 <col:9> 'bool' lvalue ->_read_status 0x55c713775910
|       | `-ImplicitCastExpr 0x55c7137ca520 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c7137ca510 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c7137ca5e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c7137ca5c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c7137ca5b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c7137ca570 <col:25> 'int' lvalue Var 0x55c7137c9900 'read_status' 'int'
|           `-IntegerLiteral 0x55c7137ca590 <col:40> 'int' 1
|-AccessSpecDecl 0x55c7137a4950 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55c7137a4978 prev 0x55c71377e4c0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55c7137a4a70 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55c7137a4b60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55c7137ca660 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55c7137a4c50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55c7137ca670 <col:25, line:830:9>
| |-CXXMethodDecl 0x55c7137a4d50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55c7137a4e00 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55c7137a4ea8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c7137a4ea8
| | `-ParmVarDecl 0x55c7137a4fb8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55c7137a5778 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c7137a5778
|   `-ParmVarDecl 0x55c7137a5888 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55c7137a5028 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55c7137a5188 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55c7137a5380 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55c7137a5230 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55c7137a52a8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55c7137ca850 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55c7137a5638 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55c7137ca6c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c7137ca680 <col:20> 'void *' lvalue ParmVar 0x55c7137a5230 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55c7137a56a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55c7137ca748 <col:32, col:45> 'char *' array Function 0x55c7132e1b88 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55c7137ca730 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55c7137ca700 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55c7137a52a8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55c7137a5700 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55c7137ca810 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c7137ca7d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55c7137a52a8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55c7137ca8d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55c7137a5480 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55c7137a4c50 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55c7137ca958 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55c7137ca938 <line:840:13, col:22> 'void' array Function 0x55c7132e1ee8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55c7137ca920 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55c7137ca8f0 <col:22> 'char *' lvalue ->_slot 0x55c7137a56a0
| |         `-CXXThisExpr 0x55c7137ca8e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55c7137a5580 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55c7137a4d50 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55c7137cab48 <col:22, line:844:9>
| |   `-CallExpr 0x55c7137caab0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55c7137caa98 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55c7137caa78 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c7133ed968 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55c7137caae8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55c7137ca9c8 <col:20> 'void *' lvalue ->_ptr 0x55c7137a5638
| |     |   `-CXXThisExpr 0x55c7137ca9b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55c7137cab18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55c7137cab00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55c7137caa08 <col:26> 'char *' lvalue ->_slot 0x55c7137a56a0
| |     |     `-CXXThisExpr 0x55c7137ca9f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55c7137cab30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55c7137caa48 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55c7137a5700
| |         `-CXXThisExpr 0x55c7137caa38 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55c7137a5638 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55c7137a56a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55c7137a5700 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55c7137a58f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c7137a58f8
| | `-ParmVarDecl 0x55c7137a5a08 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55c7137a5aa8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c7137a5aa8
|   `-ParmVarDecl 0x55c7137a5bb8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55c7137a5d58 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55c7137a5c28 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55c7137a5cc8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55c7137a5ff0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55c7137a61e8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55c7137a60b8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55c7137a6368 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55c7137cab80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55c7137cab60 <col:20> 'T *' lvalue ParmVar 0x55c7137a60b8 'ptr' 'T *'
|   | `-CompoundStmt 0x55c7137cabd0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55c7137a62b8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55c7137a4d50 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55c7137cad80 <col:22, line:857:9>
|   |   `-CallExpr 0x55c7137cad50 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55c7137cabe0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55c7134a6098 0x55c7134503c8
|   |     |-CXXOperatorCallExpr 0x55c7137cace0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55c7137cac70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c7136b3048 0x55c7136b2c68 0x55c7136b2898 0x55c7136b24b8 0x55c7136b20d8 0x55c7136b1d08
|   |     | `-MemberExpr 0x55c7137cac40 <col:29> 'T *' lvalue ->_ptr 0x55c7137a6368
|   |     |   `-CXXThisExpr 0x55c7137cac30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55c7137cad20 <col:35> 'T' lvalue ->_slot 0x55c7137a63c8
|   |       `-CXXThisExpr 0x55c7137cad10 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55c7137a6368 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55c7137a63c8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55c7137a6430 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55c7137a6530 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55c7137a6580 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7137a6510 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55c7137a64f0 <col:31> 'int' 48
|-FieldDecl 0x55c7137a65a8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55c7137a6608 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55c7137a6668 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c7137a67a0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55c7137b8940 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55c7137b89a0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55c7137b8a50 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55c7137b8c78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55c7137b8b80 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55c7137b8dc8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55c7137b8d38 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55c7137b9098 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55c7137b8e88 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55c7137b8f08 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55c7137b8fb0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55c7137b92a8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55c7137b9160 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55c7137b91d8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55c7137b9378 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55c7137b94c8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55c7137b9430 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55c7137b9858 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55c7137b9588 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55c7137b9608 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55c7137b96b0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55c7137b9768 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55c7137b9a80 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55c7137b9930 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55c7137b99a8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55c7137b9d98 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55c7137b9b30 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55c7137b9cf8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55c7137b9c08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NamedIntArg
         0 |   int _type
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c71381e798 <../dummy_inc/click/nameinfo.hh:515:1, line:525:1> line:515:8 referenced struct NamedIntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c71381e8b8 <col:1, col:8> col:8 implicit referenced struct NamedIntArg
|-CXXConstructorDecl 0x55c71381ea28 <line:516:5, line:518:5> line:516:5 used NamedIntArg 'void (uint32_t)'
| |-ParmVarDecl 0x55c71381e958 <col:17, col:26> col:26 used type 'uint32_t':'unsigned int'
| |-CXXCtorInitializer Field 0x55c71381ed50 '_type' 'int'
| | `-ImplicitCastExpr 0x55c71381ee10 <line:517:10> 'int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55c71381edf8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55c71381edb8 <col:10> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c71381e958 'type' 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c71381ee58 <col:16, line:518:5>
|-CXXMethodDecl 0x55c71381ec80 <line:519:5, line:523:5> line:519:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55c71381eae8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x55c71381eb68 <col:35, col:40> col:40 used value 'int &'
| |-ParmVarDecl 0x55c71381ebe0 <col:47, col:65> col:65 used args 'const ArgContext &'
| `-CompoundStmt 0x55c71381f820 <col:71, line:523:5>
|   `-ReturnStmt 0x55c71381f810 <line:520:2, line:522:40>
|     `-ExprWithCleanups 0x55c71381f7f8 <line:520:9, line:522:40> 'bool'
|       `-BinaryOperator 0x55c71381f7d8 <line:520:9, line:522:40> 'bool' '||'
|         |-CallExpr 0x55c71381f0b0 <line:520:9, line:521:32> 'bool'
|         | |-ImplicitCastExpr 0x55c71381f098 <line:520:9, col:19> 'bool (*)(uint32_t, const Element *, const String &, void *, size_t)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55c71381eea0 <col:9, col:19> 'bool (uint32_t, const Element *, const String &, void *, size_t)' lvalue CXXMethod 0x55c71380a218 'query' 'bool (uint32_t, const Element *, const String &, void *, size_t)'
|         | |-ImplicitCastExpr 0x55c71381f110 <col:25> 'uint32_t':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55c71381f0f8 <col:25> 'int' <LValueToRValue>
|         | |   `-MemberExpr 0x55c71381eee0 <col:25> 'int' lvalue ->_type 0x55c71381ed50
|         | |     `-CXXThisExpr 0x55c71381eed0 <col:25> 'NamedIntArg *' implicit this
|         | |-CXXMemberCallExpr 0x55c71381ef60 <col:32, col:45> 'const Element *'
|         | | `-MemberExpr 0x55c71381ef30 <col:32, col:37> '<bound member function type>' .context 0x55c713774be8
|         | |   `-DeclRefExpr 0x55c71381ef10 <col:32> 'const ArgContext' lvalue ParmVar 0x55c71381ebe0 'args' 'const ArgContext &'
|         | |-DeclRefExpr 0x55c71381ef80 <col:48> 'const String' lvalue ParmVar 0x55c71381eae8 'str' 'const String &'
|         | |-ImplicitCastExpr 0x55c71381f128 <line:521:11, col:12> 'void *' <BitCast>
|         | | `-UnaryOperator 0x55c71381efc0 <col:11, col:12> 'int *' prefix '&' cannot overflow
|         | |   `-DeclRefExpr 0x55c71381efa0 <col:12> 'int' lvalue ParmVar 0x55c71381eb68 'value' 'int &'
|         | `-UnaryExprOrTypeTraitExpr 0x55c71381f018 <col:19, col:31> 'unsigned long' sizeof
|         |   `-ParenExpr 0x55c71381eff8 <col:25, col:31> 'int' lvalue
|         |     `-DeclRefExpr 0x55c71381efd8 <col:26> 'int' lvalue ParmVar 0x55c71381eb68 'value' 'int &' non_odr_use_unevaluated
|         `-CXXMemberCallExpr 0x55c71381f7a0 <line:522:9, col:40> 'bool'
|           |-MemberExpr 0x55c71381f758 <col:9, col:18> '<bound member function type>' .parse 0x55c71381f648
|           | `-MaterializeTemporaryExpr 0x55c71381f290 <col:9, col:16> 'IntArg' xvalue
|           |   `-CXXTemporaryObjectExpr 0x55c71381f170 <col:9, col:16> 'IntArg' 'void (int)'
|           |     `-CXXDefaultArgExpr 0x55c71381f150 <<invalid sloc>> 'int'
|           |-DeclRefExpr 0x55c71381f308 <col:24> 'const String' lvalue ParmVar 0x55c71381eae8 'str' 'const String &'
|           |-DeclRefExpr 0x55c71381f328 <col:29> 'int' lvalue ParmVar 0x55c71381eb68 'value' 'int &'
|           `-DeclRefExpr 0x55c71381f348 <col:36> 'const ArgContext' lvalue ParmVar 0x55c71381ebe0 'args' 'const ArgContext &'
|-FieldDecl 0x55c71381ed50 <line:524:5, col:9> col:9 referenced _type 'int'
|-CXXConstructorDecl 0x55c7136aa6a8 <line:515:8> col:8 implicit constexpr NamedIntArg 'void (const NamedIntArg &)' inline default trivial noexcept-unevaluated 0x55c7136aa6a8
| `-ParmVarDecl 0x55c7136aa7b8 <col:8> col:8 'const NamedIntArg &'
|-CXXConstructorDecl 0x55c7136aa858 <col:8> col:8 implicit used constexpr NamedIntArg 'void (NamedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7136aa968 <col:8> col:8 used 'NamedIntArg &&'
| |-CXXCtorInitializer Field 0x55c71381ed50 '_type' 'int'
| | `-ImplicitCastExpr 0x55c7136ab160 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c7136ab130 <col:8> 'int' xvalue ._type 0x55c71381ed50
| |     `-CXXStaticCastExpr 0x55c7136ab100 <col:8> 'NamedIntArg' xvalue static_cast<struct NamedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c7136ab0d0 <col:8> 'NamedIntArg' lvalue ParmVar 0x55c7136aa968 '' 'NamedIntArg &&'
| `-CompoundStmt 0x55c7136ab1a8 <col:8>
`-CXXDestructorDecl 0x55c7136aaa20 <col:8> col:8 implicit referenced ~NamedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.NamedIntArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.NamedIntArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137e7ca0 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7137e7db8 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x55c7137e7e48 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x55c7137e7ff8 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x55c7137e7e80 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x55c7137e7ef8 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55c7137e8708 <col:60> 'const ArgContext' lvalue Var 0x55c7137cada8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55c7137e8788 <col:72, line:1329:5>
|   `-ReturnStmt 0x55c7137e8778 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x55c7137e8768 <col:16> 'bool' true
|-CXXMethodDecl 0x55c7137e8288 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55c7137e80b8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55c7137e8130 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55c7137e81a8 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55c7137e8728 <col:79> 'const ArgContext' lvalue Var 0x55c7137cada8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55c7137e8b68 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x55c7137e8b10 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x55c7137e8af8 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55c7137e8ad8 <col:16> 'String &(const String &)' lvalue CXXMethod 0x55c7134da520 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x55c7137e87a0 <col:9> 'String' lvalue ParmVar 0x55c7137e8130 'result' 'String &'
|   | `-DeclRefExpr 0x55c7137e87c0 <col:18> 'const String' lvalue ParmVar 0x55c7137e80b8 'str' 'const String &'
|   `-ReturnStmt 0x55c7137e8b58 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x55c7137e8b48 <col:16> 'bool' true
|-CXXMethodDecl 0x55c7137e8638 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x55c7137e8350 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55c7137e84a0 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x55c7137e8518 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55c7137e8748 <col:87> 'const ArgContext' lvalue Var 0x55c7137cada8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55c7137e8ca0 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x55c7137e8c58 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x55c7137e8c28 <col:9, col:16> '<bound member function type>' .push_back 0x55c71376edf8
|   | | `-DeclRefExpr 0x55c7137e8b88 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x55c7137e84a0 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x55c7137e8c08 <col:26> 'const String' lvalue ParmVar 0x55c7137e8350 'str' 'const String &'
|   `-ReturnStmt 0x55c7137e8c90 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x55c7137e8c80 <col:16> 'bool' true
|-CXXConstructorDecl 0x55c7136ab770 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c7136ab878 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x55c7136ab878
| `-ParmVarDecl 0x55c7136ab988 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x55c7136aba28 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7136abb38 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x55c713857960 <col:7>
`-CXXDestructorDecl 0x55c7136abbd8 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7134aedc0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7134aeed8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55c7134aef68 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55c7134af038 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55c7134af120 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7134af338 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c7134af1e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134af4e8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c7134af3f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c7134af630 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c7134af5a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c7134af778 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c7134af6e8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134af8c0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c7134af830 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134af988 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55c7134afad0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55c7134afa40 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c7134afb98 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55c7134afce0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55c7134afc50 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c7134afe58 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c7134afd98 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134affa0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c7134aff10 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134b0068 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55c7134b0228 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c7134b0118 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c7134b0190 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134b0478 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c7134b02e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7134b0360 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c7134b0528 <col:86> "" ""
|-CXXMethodDecl 0x55c7134b0798 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55c7134b0608 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55c7134b0680 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134b0948 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c7134b0858 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c7134b0af8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c7134b0a00 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c7134b0dc8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c7134b0bb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c7134b0c28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c7134b0ca0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134b10a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c7134b0e90 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c7134b0f08 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7134b0f80 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c7134b1160 <col:115> "" ""
|-AccessSpecDecl 0x55c7134b11d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55c7134b1208 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7134b1710 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c7134b1710
| `-ParmVarDecl 0x55c7134b1818 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55c7134b18b8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c7134b18b8
| `-ParmVarDecl 0x55c7134b19c8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55c7134e6ff8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c7136d9e00 <col:7>
|-CXXConstructorDecl 0x55c7134e70d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c7134e70d0
| `-ParmVarDecl 0x55c7134e71e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55c7134e7258 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c7134e7258
| `-ParmVarDecl 0x55c7134e7368 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55c7136dc800 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136c89a8 prev 0x55c7136bdbb0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7136c8aa0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55c7136c8b90 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55c7136c8cb8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55c7136c8e38 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55c7136c8fb8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55c7136c9138 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55c7136d9f68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c7136da7d8 <col:11>
|-CXXDestructorDecl 0x55c7136da040 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c7136da178 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c7136da178
| `-ParmVarDecl 0x55c7136da288 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55c7136da328 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c7136da328
| `-ParmVarDecl 0x55c7136da438 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55c7136dd1f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7136dd308 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55c7136dd588 <col:11>
|   `-ReturnStmt 0x55c7136dd578 <col:11>
|     `-UnaryOperator 0x55c7136dd560 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c7136dd550 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55c7136dd378 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c7136dd378
  `-ParmVarDecl 0x55c7136dd488 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136c91a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7136c92b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55c7136c9358 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55c7136c93c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55c7136c9428 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55c7136c9490 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55c7136c94f0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55c7136c95b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55c7136c9610 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55c7136c9670 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55c7136d9e78 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c7136c9358 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55c7136da7e8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55c7136da840 <col:12>
|-CXXConstructorDecl 0x55c7136da4a8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c7136da4a8
| `-ParmVarDecl 0x55c7136da5b8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55c7136da658 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c7136da658
| `-ParmVarDecl 0x55c7136da768 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55c7136dc8e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136b72c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c7136b73d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55c7136b7468 <col:16, col:22> col:16 public
|-EnumDecl 0x55c7136b7490 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55c7136b7590 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55c7136b7670 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136b7570 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55c7136b7550 <col:21> 'int' 28
| `-EnumConstantDecl 0x55c7136b7620 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55c7136b7688 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136b7600 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55c7136b75e0 <col:22> 'int' 64
|-CXXMethodDecl 0x55c7136b79c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c7136b76b0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7136b7730 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55c7136b77a8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7136b7820 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136b7a88 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b7c88 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55c7136b7b00 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55c7136b7b78 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136b7d38 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b7e98 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55c7136b7da8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136b7f40 <col:72> warn_unused_result ""
|-TypedefDecl 0x55c7136b82a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55c7136b8230 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55c7136b81d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55c7136b8190 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55c71318d4e0 'void'
|       |-PointerType 0x55c713437660 'unsigned char *'
|       | `-BuiltinType 0x55c71318d5e0 'unsigned char'
|       |-TypedefType 0x55c713233c30 'size_t' sugar
|       | |-Typedef 0x55c7131fdbe0 'size_t'
|       | `-BuiltinType 0x55c71318d640 'unsigned long'
|       `-PointerType 0x55c71318dce0 'void *'
|         `-BuiltinType 0x55c71318d4e0 'void'
|-CXXMethodDecl 0x55c7136b8718 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55c7136b8310 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55c7136b8388 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7136b8420 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55c7136b84a0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55c7136d2e10 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55c7136d2df8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55c7136d2dc0 <col:58> 'int' 0
| |-ParmVarDecl 0x55c7136b8520 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55c7136d2e38 <col:76> 'int' 0
| |-ParmVarDecl 0x55c7136b85a0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55c7136d2e58 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55c7136b87e8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b8868 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c7136b8928 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55c7136b89c8 <col:20>
| `-OptimizeNoneAttr 0x55c7136b8a20 <col:30>
|-CXXMethodDecl 0x55c7136b8a98 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55c7136b8b38 <col:20>
| `-OptimizeNoneAttr 0x55c7136b8b90 <col:30>
|-CXXMethodDecl 0x55c7136b8c08 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55c7136b8ca8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b8d58 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55c7136b8df8 <col:20>
| |-OptimizeNoneAttr 0x55c7136b8e50 <col:30>
| `-WarnUnusedResultAttr 0x55c7136b8e78 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b8ed0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c7136b8f70 <col:20>
| `-OptimizeNoneAttr 0x55c7136b8fc8 <col:30>
|-CXXMethodDecl 0x55c7136b9018 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c7136b90b8 <col:20>
| `-OptimizeNoneAttr 0x55c7136b9110 <col:30>
|-CXXMethodDecl 0x55c7136b9158 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55c7136b91f8 <col:20>
| `-OptimizeNoneAttr 0x55c7136b9250 <col:30>
|-CXXMethodDecl 0x55c7136b9298 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136b9358 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136b9420 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136b94e8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136b95a8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136b96c8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55c7136d2f20 <col:54, line:99:5>
|   `-ReturnStmt 0x55c7136d2f10 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55c7136d2ef8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55c7136d2ec8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c7136c99a8
|         `-CXXThisExpr 0x55c7136d2eb8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c7136b9868 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55c7136b9778 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55c7136d2fd0 <col:67, line:103:5>
|   `-BinaryOperator 0x55c7136d2fb0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c7136d2f48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c7136c99a8
|     | `-CXXThisExpr 0x55c7136d2f38 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c7136d2f98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d2f78 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55c7136b9778 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55c7136b9960 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55c7136d3050 <col:33, line:107:5>
|   `-ReturnStmt 0x55c7136d3040 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55c7136d3028 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55c7136d2ff8 <col:16> 'void *' lvalue ->_destructor_argument 0x55c7136c9a10
|         `-CXXThisExpr 0x55c7136d2fe8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c7136b9a20 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55c7136d3680 <col:25, line:113:5>
|   |-ParenExpr 0x55c7136d33c8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55c7136d3398 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d3108 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c7136d30e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55c7136d30a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55c7136d3078 <col:24> '<bound member function type>' ->shared 0x55c7136b8a98
|   |   |       `-ImplicitCastExpr 0x55c7136d30c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55c7136d3068 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c7136d3168 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d3148 <col:42> 'int' 0
|   |   `-CallExpr 0x55c7136d32f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d32e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d32c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d3338 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d31d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55c7136d3350 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d3200 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d3368 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d3238 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55c7136d3380 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d32a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d3290 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d3258 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55c7136d35c8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55c7136d33f8 <col:2> 'unsigned char *' lvalue ->_head 0x55c7136c97b0
|   | | `-CXXThisExpr 0x55c7136d33e8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55c7136d35b0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55c7136d3590 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55c7136d3438 <col:10> 'unsigned char *' lvalue ->_data 0x55c7136c9818
|   |     | `-CXXThisExpr 0x55c7136d3428 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55c7136d3578 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55c7136d3558 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55c7136d3478 <col:18> 'unsigned char *' lvalue ->_tail 0x55c7136c9880
|   |         | `-CXXThisExpr 0x55c7136d3468 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55c7136d3540 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55c7136d3520 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55c7136d34b8 <col:26> 'unsigned char *' lvalue ->_end 0x55c7136c98e8
|   |             | `-CXXThisExpr 0x55c7136d34a8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55c7136d3508 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55c7136d34e8 <col:33> 'int' 0
|   `-BinaryOperator 0x55c7136d3660 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c7136d35f8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c7136c99a8
|     | `-CXXThisExpr 0x55c7136d35e8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c7136d3648 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55c7136d3628 <col:16> 'int' 0
|-CXXMethodDecl 0x55c7136b9b60 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c7136b9ad0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136b9c08 <col:20>
| |-OptimizeNoneAttr 0x55c7136b9c60 <col:30>
| `-WarnUnusedResultAttr 0x55c7136b9c88 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b9d58 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c7136b9cc8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136b9e00 <col:20>
| |-OptimizeNoneAttr 0x55c7136b9e58 <col:30>
| `-WarnUnusedResultAttr 0x55c7136b9e80 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55c7136b9fb8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c7136b9ec0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136ba060 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55c7136ba160 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55c7136ba0d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136ba208 <col:20>
| `-OptimizeNoneAttr 0x55c7136ba260 <col:30>
|-CXXMethodDecl 0x55c7136ba328 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c7136ba298 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136ba3d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55c7136ba4d0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c7136ba440 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c7136ba578 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c7136ba678 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55c7136ba5e8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136ba720 <col:20>
| `-OptimizeNoneAttr 0x55c7136ba778 <col:30>
|-CXXMethodDecl 0x55c7136ba908 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55c7136ba7b8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55c7136ba830 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55c7136d2e78 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55c7136ba9b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55c7136babb8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c7136baa30 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55c7136baaa8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136badc8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c7136bac78 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c7136bacf0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136bafd8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55c7136bae88 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55c7136baf08 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55c7136d2e88 <col:39> 'int' 0
|-CXXMethodDecl 0x55c7136bb0a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55c7136bb170 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136bb238 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c7136bb2f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136bb3c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55c7136bb508 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55c7136bb478 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55c7136bb6d8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c7136bb5c8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55c7136bb640 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136bb7a8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55c7136bb868 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55c7136bb908 <col:20>
| `-OptimizeNoneAttr 0x55c7136bb960 <col:30>
|-CXXMethodDecl 0x55c7136bb9b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c7136bba50 <col:20>
| `-OptimizeNoneAttr 0x55c7136bbaa8 <col:30>
|-CXXMethodDecl 0x55c7136bbaf8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c7136bbbb8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136bbc80 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55c7136bbd20 <col:20>
| `-OptimizeNoneAttr 0x55c7136bbd78 <col:30>
|-CXXMethodDecl 0x55c7136bbec8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c7136bbdb8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55c7136bbe30 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136bc018 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c7136bbf88 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136bc0f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55c7136bc1b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55c7136bc250 <col:20>
| `-OptimizeNoneAttr 0x55c7136bc2a8 <col:30>
|-CXXMethodDecl 0x55c7136bc2f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c7136bc398 <col:20>
| `-OptimizeNoneAttr 0x55c7136bc3f0 <col:30>
|-CXXMethodDecl 0x55c7136bc440 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c7136bc508 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55c7136bc5a8 <col:20>
| `-OptimizeNoneAttr 0x55c7136bc600 <col:30>
|-CXXMethodDecl 0x55c7136bc648 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55c7136bc768 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55c7136bc8d8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55c7136bc818 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55c7136bc9c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55c7136bca68 <col:20>
| `-OptimizeNoneAttr 0x55c7136bcac0 <col:30>
|-CXXMethodDecl 0x55c7136bcb10 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c7136bcbd0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c7136bce08 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55c7136bcc80 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55c7136bccf8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136bceb8 <col:20>
| `-OptimizeNoneAttr 0x55c7136bcf10 <col:30>
|-CXXMethodDecl 0x55c7136bcfb8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55c7136bd058 <col:20>
| `-OptimizeNoneAttr 0x55c7136bd0b0 <col:30>
|-CXXMethodDecl 0x55c7136bd100 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55c7136bd1a0 <col:20>
| `-OptimizeNoneAttr 0x55c7136bd1f8 <col:30>
|-CXXMethodDecl 0x55c7136bd240 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55c7136bd2e0 <col:20>
| `-OptimizeNoneAttr 0x55c7136bd338 <col:30>
|-CXXMethodDecl 0x55c7136bd438 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55c7136bd370 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55c7136bd4e0 <col:20>
| `-OptimizeNoneAttr 0x55c7136bd538 <col:30>
|-CXXMethodDecl 0x55c7136bd6f8 <line:316:5, col:95> col:45 used set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55c7136bd570 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55c7136bd5e8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136bd7a8 <col:20>
| `-OptimizeNoneAttr 0x55c7136bd800 <col:30>
|-CXXMethodDecl 0x55c7136bd8a8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55c7136bd9c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55c7136bdae8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55c7136bdb88 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55c7136bdbb0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55c7136bdcd8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55c7136bdd78 <col:20>
| `-OptimizeNoneAttr 0x55c7136bddd0 <col:30>
|-CXXMethodDecl 0x55c7136bde78 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55c7136bdf18 <col:20>
| `-OptimizeNoneAttr 0x55c7136bdf70 <col:30>
|-AccessSpecDecl 0x55c7136bdf98 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55c7136bdfc0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55c7136be0c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55c7136be110 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136be0a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55c7136be080 <col:14> 'int' 48
|-CXXMethodDecl 0x55c7136be178 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55c7136be218 <col:20>
| `-OptimizeNoneAttr 0x55c7136be270 <col:30>
|-CXXMethodDecl 0x55c7136be2e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55c7136be388 <col:20>
| `-OptimizeNoneAttr 0x55c7136be3e0 <col:30>
|-CXXMethodDecl 0x55c7136be4a8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55c7136be418 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55c7136be648 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55c7136be7e8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55c7136be6f8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55c7136be890 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55c7136be990 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136bed40 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136be970 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7136be950 <col:9> 'int' 0
| |-EnumConstantDecl 0x55c7136bea20 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136bed58 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bea00 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55c7136be9e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c7136beab0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136bed70 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bea90 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55c7136bea70 <col:14> 'int' 2
| |-EnumConstantDecl 0x55c7136beb40 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136bed88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136beb20 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55c7136beb00 <col:14> 'int' 3
| |-EnumConstantDecl 0x55c7136bebd0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136beda0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bebb0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55c7136beb90 <col:13> 'int' 4
| |-EnumConstantDecl 0x55c7136bec60 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c7136bedb8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bec40 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55c7136bec20 <col:13> 'int' 5
| `-EnumConstantDecl 0x55c7136becf0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55c7136bedd0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136becd0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55c7136becb0 <col:14> 'int' 6
|-CXXMethodDecl 0x55c7136bee38 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55c7136beed8 <col:20>
| `-OptimizeNoneAttr 0x55c7136bef30 <col:30>
|-CXXMethodDecl 0x55c7136bf028 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55c7136bef68 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55c7136bf0d0 <col:20>
| `-OptimizeNoneAttr 0x55c7136bf128 <col:30>
|-CXXMethodDecl 0x55c7136bf198 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55c7136bf2c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55c7136bf438 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55c7136bf370 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55c7136bf500 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55c7136bf5c8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55c7136bf708 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55c7136bf678 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55c7136bf7b0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55c7136bf8b0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c7136bfab0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bf890 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7136bf870 <col:23> 'int' 0
| |-EnumConstantDecl 0x55c7136bf940 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c7136bfac8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bf920 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55c7136bf900 <col:45> 'int' 4
| |-EnumConstantDecl 0x55c7136bf9d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c7136bfae0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136bf9b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7136bf990 <col:24> 'int' 0
| `-EnumConstantDecl 0x55c7136bfa60 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55c7136bfaf8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136bfa40 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55c7136bfa20 <col:47> 'int' 16
|-CXXMethodDecl 0x55c7136bfb58 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55c7136bfcc8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55c7136bfc08 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55c7136bfd70 <col:20>
| `-OptimizeNoneAttr 0x55c7136bfdc8 <col:30>
|-CXXMethodDecl 0x55c7136bfe18 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55c7136d37a0 <col:18, col:36>
|   `-ReturnStmt 0x55c7136d3790 <col:20, col:33>
|     `-ImplicitCastExpr 0x55c7136d3778 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c7136d3758 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55c7136d3728 <col:27> '<bound member function type>' ->xanno 0x55c7136bde78
|           `-CXXThisExpr 0x55c7136d3718 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55c7136bff10 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55c7136d38b0 <col:30, col:48>
|   `-ReturnStmt 0x55c7136d38a0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55c7136d3888 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c7136d3868 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55c7136d3838 <col:39> '<bound member function type>' ->xanno 0x55c7136bdcd8
|           `-CXXThisExpr 0x55c7136d3828 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c7136bfff8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55c7136d3a48 <col:24, col:50>
|   `-ReturnStmt 0x55c7136d3a38 <col:26, col:47>
|     `-UnaryOperator 0x55c7136d3a20 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c7136d3a00 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c7136d39e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c7136d3998 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55c7136c8cb8
|         |   `-CXXMemberCallExpr 0x55c7136d3978 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c7136d3948 <col:34> '<bound member function type>' ->xanno 0x55c7136bde78
|         |       `-CXXThisExpr 0x55c7136d3938 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c7136d39c8 <col:46> 'int' 0
|-CXXMethodDecl 0x55c7136c0100 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55c7136d3c18 <col:36, col:62>
|   `-ReturnStmt 0x55c7136d3c08 <col:38, col:59>
|     `-UnaryOperator 0x55c7136d3bf0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c7136d3bd0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c7136d3bb8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c7136d3b30 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55c7136c8cb8
|         |   `-CXXMemberCallExpr 0x55c7136d3b10 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c7136d3ae0 <col:46> '<bound member function type>' ->xanno 0x55c7136bdcd8
|         |       `-CXXThisExpr 0x55c7136d3ad0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c7136d3b60 <col:58> 'int' 0
|-CXXMethodDecl 0x55c7136c0218 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55c7136d3db0 <col:26, col:53>
|   `-ReturnStmt 0x55c7136d3da0 <col:28, col:50>
|     `-UnaryOperator 0x55c7136d3d88 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c7136d3d68 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c7136d3d50 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c7136d3d00 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55c7136c8fb8
|         |   `-CXXMemberCallExpr 0x55c7136d3ce0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c7136d3cb0 <col:36> '<bound member function type>' ->xanno 0x55c7136bde78
|         |       `-CXXThisExpr 0x55c7136d3ca0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c7136d3d30 <col:49> 'int' 0
|-CXXMethodDecl 0x55c7136c0338 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55c7136d3f88 <col:38, col:65>
|   `-ReturnStmt 0x55c7136d3f78 <col:40, col:62>
|     `-UnaryOperator 0x55c7136d3f60 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c7136d3f40 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c7136d3f28 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c7136d3e98 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55c7136c8fb8
|         |   `-CXXMemberCallExpr 0x55c7136d3e78 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c7136d3e48 <col:48> '<bound member function type>' ->xanno 0x55c7136bdcd8
|         |       `-CXXThisExpr 0x55c7136d3e38 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c7136d3ec8 <col:61> 'int' 0
|-CXXMethodDecl 0x55c7136c04e8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55c7136c03f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55c7136d4658 <col:34, line:463:5>
|   |-ParenExpr 0x55c7136d44a0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c7136d4470 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d40d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d40a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d3ff8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d3fe0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d3fa0 <col:23> 'int' lvalue ParmVar 0x55c7136c03f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d3fc0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d4088 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d4058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d4018 <col:33> 'int' lvalue ParmVar 0x55c7136c03f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c7136d4070 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c7136d4038 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c7136d4138 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d4118 <col:56> 'int' 0
|   |   `-CallExpr 0x55c7136d43d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d43b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d4398 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d4410 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d4228 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c7136d4428 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d4258 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d4440 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d4290 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55c7136d4458 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d4380 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d4368 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d4328 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55c7136d4648 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55c7136d4630 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55c7136d4610 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c7136d45e0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c7136d4590 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55c7136c8cb8
|         |   `-CXXMemberCallExpr 0x55c7136d4570 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c7136d4540 <col:9> '<bound member function type>' ->xanno 0x55c7136bdcd8
|         |       `-CXXThisExpr 0x55c7136d4530 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55c7136d45f8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55c7136d45c0 <col:21> 'int' lvalue ParmVar 0x55c7136c03f0 'i' 'int'
|-CXXMethodDecl 0x55c7136c0738 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55c7136c05a8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55c7136c0620 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55c7136d4ce8 <col:40, line:472:5>
|   |-ParenExpr 0x55c7136d4b00 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c7136d4ad0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d47b0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d4780 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d46d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d46b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d4678 <col:23> 'int' lvalue ParmVar 0x55c7136c05a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d4698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d4760 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d4730 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d46f0 <col:33> 'int' lvalue ParmVar 0x55c7136c05a8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c7136d4748 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c7136d4710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c7136d4810 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d47f0 <col:56> 'int' 0
|   |   `-CallExpr 0x55c7136d4a30 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d4a18 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d49f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d4a70 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d4880 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c7136d4a88 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d48b0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d4aa0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d48e8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55c7136d4ab8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d49e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d49c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d4988 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55c7136d4cc8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55c7136d4c70 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55c7136d4c40 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55c7136d4bf0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55c7136c8cb8
|     | |   `-CXXMemberCallExpr 0x55c7136d4bd0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55c7136d4ba0 <col:2> '<bound member function type>' ->xanno 0x55c7136bde78
|     | |       `-CXXThisExpr 0x55c7136d4b90 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55c7136d4c58 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c7136d4c20 <col:14> 'int' lvalue ParmVar 0x55c7136c05a8 'i' 'int'
|     `-ImplicitCastExpr 0x55c7136d4cb0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d4c90 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55c7136c0620 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55c7136c08f8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55c7136c0800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c7136d5468 <col:36, line:485:5>
|   |-ParenExpr 0x55c7136d51d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d51a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d4e80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d4e50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d4d60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d4d48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d4d08 <col:23> 'int' lvalue ParmVar 0x55c7136c0800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d4d28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d4e30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d4e18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d4d80 <col:33> 'int' lvalue ParmVar 0x55c7136c0800 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d4df8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d4de0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d4da0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d4dc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c7136d4ee0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d4ec0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d5100 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d50e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d50c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d5140 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d4f50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c7136d5158 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d4f88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d5170 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d4fc0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55c7136d5188 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d50b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d5098 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d5058 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55c7136d5458 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55c7136d5440 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d5428 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d53f8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d5398 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d5368 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d52e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d52c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d5290 <col:61> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d5280 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d5380 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d5310 <col:74> 'int' lvalue ParmVar 0x55c7136c0800 'i' 'int'
|-CXXMethodDecl 0x55c7136c0b48 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55c7136c09b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c7136c0a30 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55c7136d5bb8 <col:42, line:500:5>
|   |-ParenExpr 0x55c7136d5950 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d5920 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d5600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d55d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d54e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d54c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d5488 <col:23> 'int' lvalue ParmVar 0x55c7136c09b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d54a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d55b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d5598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d5500 <col:33> 'int' lvalue ParmVar 0x55c7136c09b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d5578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d5560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d5520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d5540 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c7136d5660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d5640 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d5880 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d5868 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d5848 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d58c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d56d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c7136d58d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d5708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d58f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d5740 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55c7136d5908 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d5830 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d5818 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d57d8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55c7136d5b98 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55c7136d5b48 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c7136d5b18 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c7136d5ac0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c7136d5a90 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c7136d5a40 <col:48, col:57> 'char [48]' lvalue ->c 0x55c7136c8b90
|     |     |   `-CXXMemberCallExpr 0x55c7136d5a20 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c7136d59f0 <col:48> '<bound member function type>' ->xanno 0x55c7136bde78
|     |     |       `-CXXThisExpr 0x55c7136d59e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c7136d5aa8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c7136d5a70 <col:61> 'int' lvalue ParmVar 0x55c7136c09b8 'i' 'int'
|     `-ImplicitCastExpr 0x55c7136d5b80 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d5b60 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55c7136c0a30 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55c7136c0d08 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55c7136c0c10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c7136d6318 <col:35, line:513:5>
|   |-ParenExpr 0x55c7136d6028 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d5ff8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d5d50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d5d20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d5c30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d5c18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d5bd8 <col:23> 'int' lvalue ParmVar 0x55c7136c0c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d5bf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d5d00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d5ce8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d5c50 <col:33> 'int' lvalue ParmVar 0x55c7136c0c10 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d5cc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d5cb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d5c70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d5c90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c7136d5db0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d5d90 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d5f58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d5f40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d5f20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d5f98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d5e20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c7136d5fb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d5e58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d5fc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d5e90 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55c7136d5fe0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d5f08 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d5ef0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d5eb0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55c7136d6308 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55c7136d62f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d62d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d62a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d6220 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d61f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d61a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d6180 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d6150 <col:60> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d6140 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d6208 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d61d0 <col:73> 'int' lvalue ParmVar 0x55c7136c0c10 'i' 'int'
|-CXXMethodDecl 0x55c7136c0f58 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55c7136c0dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c7136c0e40 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55c7136d6a38 <col:41, line:528:5>
|   |-ParenExpr 0x55c7136d67c0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d6790 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d64b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d6480 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d6390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d6378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d6338 <col:23> 'int' lvalue ParmVar 0x55c7136c0dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d6358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d6460 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d6448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d63b0 <col:33> 'int' lvalue ParmVar 0x55c7136c0dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d6428 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d6410 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d63d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d63f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c7136d6510 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d64f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d66f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d66d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d66b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d6730 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d6580 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c7136d6748 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d65b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d6760 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d65f0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55c7136d6778 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d66a0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d6688 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d6648 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55c7136d6a18 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55c7136d69c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c7136d6998 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c7136d6940 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c7136d6900 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c7136d68b0 <col:47, col:56> 'char [48]' lvalue ->c 0x55c7136c8b90
|     |     |   `-CXXMemberCallExpr 0x55c7136d6890 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c7136d6860 <col:47> '<bound member function type>' ->xanno 0x55c7136bde78
|     |     |       `-CXXThisExpr 0x55c7136d6850 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c7136d6918 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c7136d68e0 <col:60> 'int' lvalue ParmVar 0x55c7136c0dc8 'i' 'int'
|     `-ImplicitCastExpr 0x55c7136d6a00 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d69e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55c7136c0e40 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55c7136c1118 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55c7136c1020 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c7136d7108 <col:36, line:541:5>
|   |-ParenExpr 0x55c7136d6ea8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d6e78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d6bd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d6ba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d6ab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d6a98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d6a58 <col:23> 'int' lvalue ParmVar 0x55c7136c1020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d6a78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d6b80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d6b68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d6ad0 <col:33> 'int' lvalue ParmVar 0x55c7136c1020 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d6b48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d6b30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d6af0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d6b10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c7136d6c30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d6c10 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d6dd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d6dc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d6da0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d6e18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d6ca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c7136d6e30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d6cd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d6e48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d6d10 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55c7136d6e60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d6d88 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d6d70 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d6d30 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55c7136d70f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55c7136d70e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d70c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d7098 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d7040 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d7010 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d6fc0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d6fa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d6f70 <col:61> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d6f60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d7028 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d6ff0 <col:74> 'int' lvalue ParmVar 0x55c7136c1020 'i' 'int'
|-CXXMethodDecl 0x55c7136c12e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55c7136c11d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55c7136c1250 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c7136c1398 <col:20>
| `-OptimizeNoneAttr 0x55c7136c13f0 <col:30>
|-CXXMethodDecl 0x55c7136c1528 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55c7136c1430 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c7136d77d8 <col:35, line:562:5>
|   |-ParenExpr 0x55c7136d7578 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d7548 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d72a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d7270 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d7180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d7168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d7128 <col:23> 'int' lvalue ParmVar 0x55c7136c1430 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d7148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d7250 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d7238 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d71a0 <col:33> 'int' lvalue ParmVar 0x55c7136c1430 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d7218 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d7200 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d71c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d71e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c7136d7300 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d72e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d74a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d7490 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d7470 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d74e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d7370 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c7136d7500 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d73a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d7518 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d73e0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55c7136d7530 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d7458 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d7440 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d7400 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55c7136d77c8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55c7136d77b0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d7798 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d7768 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d7710 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d76e0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d7690 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d7670 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d7640 <col:60> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d7630 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d76f8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d76c0 <col:73> 'int' lvalue ParmVar 0x55c7136c1430 'i' 'int'
|-CXXMethodDecl 0x55c7136c1738 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55c7136c15e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c7136c1660 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55c7136d7eb8 <col:41, line:577:5>
|   |-ParenExpr 0x55c7136d7c48 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d7c18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d7970 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d7940 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d7850 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d7838 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d77f8 <col:23> 'int' lvalue ParmVar 0x55c7136c15e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d7818 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d7920 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d7908 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d7870 <col:33> 'int' lvalue ParmVar 0x55c7136c15e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d78e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d78d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d7890 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d78b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c7136d79d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d79b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d7b78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d7b60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d7b40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d7bb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d7a40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c7136d7bd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d7a78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d7be8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d7ab0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55c7136d7c00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d7b28 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d7b10 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d7ad0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55c7136d7e98 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55c7136d7e48 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c7136d7e18 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55c7136d7db8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c7136d7d88 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c7136d7d38 <col:47, col:56> 'char [48]' lvalue ->c 0x55c7136c8b90
|     |     |   `-CXXMemberCallExpr 0x55c7136d7d18 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c7136d7ce8 <col:47> '<bound member function type>' ->xanno 0x55c7136bde78
|     |     |       `-CXXThisExpr 0x55c7136d7cd8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c7136d7da0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c7136d7d68 <col:60> 'int' lvalue ParmVar 0x55c7136c15e8 'i' 'int'
|     `-ImplicitCastExpr 0x55c7136d7e80 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d7e60 <col:65> 'int32_t':'int' lvalue ParmVar 0x55c7136c1660 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55c7136c18f8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55c7136c1800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c7136d85e8 <col:36, line:591:5>
|   |-ParenExpr 0x55c7136d8328 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d82f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d8050 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d8020 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d7f30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d7f18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d7ed8 <col:23> 'int' lvalue ParmVar 0x55c7136c1800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d7ef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d8000 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d7fe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d7f50 <col:33> 'int' lvalue ParmVar 0x55c7136c1800 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d7fc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d7fb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d7f70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d7f90 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c7136d80b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d8090 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d8258 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d8240 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d8220 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d8298 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d8120 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c7136d82b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d8158 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d82c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d8190 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55c7136d82e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d8208 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d81f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d81b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55c7136d85d8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55c7136d85c0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d85a8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d8578 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d84f0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d84c0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d8470 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d8450 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d8420 <col:61> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d8410 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d84d8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d84a0 <col:74> 'int' lvalue ParmVar 0x55c7136c1800 'i' 'int'
|-CXXMethodDecl 0x55c7136c1b48 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55c7136c19b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c7136c1a30 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55c7136d8cc8 <col:42, line:606:5>
|   |-ParenExpr 0x55c7136d8a58 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c7136d8a28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d8780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d8750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d8660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d8648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d8608 <col:23> 'int' lvalue ParmVar 0x55c7136c19b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d8628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d8730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c7136d8718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d8680 <col:33> 'int' lvalue ParmVar 0x55c7136c19b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d86f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d86e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d86a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c7136d86c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c7136d87e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d87c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c7136d8988 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d8970 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d8950 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d89c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d8850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c7136d89e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d8888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d89f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d88c0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55c7136d8a10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d8938 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d8920 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d88e0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55c7136d8ca8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55c7136d8c58 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c7136d8c28 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55c7136d8bc8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c7136d8b98 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c7136d8b48 <col:48, col:57> 'char [48]' lvalue ->c 0x55c7136c8b90
|     |     |   `-CXXMemberCallExpr 0x55c7136d8b28 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c7136d8af8 <col:48> '<bound member function type>' ->xanno 0x55c7136bde78
|     |     |       `-CXXThisExpr 0x55c7136d8ae8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c7136d8bb0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c7136d8b78 <col:61> 'int' lvalue ParmVar 0x55c7136c19b8 'i' 'int'
|     `-ImplicitCastExpr 0x55c7136d8c90 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55c7136d8c70 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55c7136c1a30 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55c7136c1ce0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55c7136c1c10 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55c7136d9538 <col:33, line:620:5>
|   |-ParenExpr 0x55c7136d92b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c7136d9280 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d8ed0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d8ea0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d8d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d8d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d8ce8 <col:23> 'int' lvalue ParmVar 0x55c7136c1c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d8d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d8e80 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c7136d8e68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d8d60 <col:33> 'int' lvalue ParmVar 0x55c7136c1c10 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d8e48 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d8e30 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d8d80 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c7136d8e08 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c7136d8df0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c7136d8db8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c7136d8f30 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d8f10 <col:79> 'int' 0
|   |   `-CallExpr 0x55c7136d91e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d91c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d91a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d9220 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d9018 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c7136d9238 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d9060 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d9250 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d9098 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55c7136d9268 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d9190 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d9178 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d9138 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55c7136d9528 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55c7136d9510 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55c7136d94f8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c7136d94c8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55c7136d9440 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c7136d9410 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c7136d93c0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55c7136c8b90
|             |   `-CXXMemberCallExpr 0x55c7136d93a0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c7136d9370 <col:67> '<bound member function type>' ->xanno 0x55c7136bdcd8
|             |       `-CXXThisExpr 0x55c7136d9360 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c7136d9428 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c7136d93f0 <col:80> 'int' lvalue ParmVar 0x55c7136c1c10 'i' 'int'
|-CXXMethodDecl 0x55c7136c1ef8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55c7136c1da0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c7136c1e20 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55c7136d9d60 <col:45, line:635:5>
|   |-ParenExpr 0x55c7136d9aa8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c7136d9a78 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c7136d9740 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c7136d9710 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c7136d95b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c7136d9598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c7136d9558 <col:23> 'int' lvalue ParmVar 0x55c7136c1da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c7136d9578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c7136d96f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c7136d96d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c7136d95d0 <col:33> 'int' lvalue ParmVar 0x55c7136c1da0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c7136d96b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c7136d96a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c7136d95f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c7136be0c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c7136d9678 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c7136d9660 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c7136d9628 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c7136d97a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c7136d9780 <col:79> 'int' 0
|   |   `-CallExpr 0x55c7136d99d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c7136d99c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c7136d99a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c71322a990 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c7136d9a18 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d9810 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c7136d9a30 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c7136d9858 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c7136d9a48 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c7136d9890 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55c7136d9a60 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c7136d9988 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c7136d9970 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c7136d9928 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55c7136d9d40 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55c7136d9ca8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c7136d9c78 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55c7136d9c18 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c7136d9be8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c7136d9b98 <col:54, col:63> 'char [48]' lvalue ->c 0x55c7136c8b90
|     |     |   `-CXXMemberCallExpr 0x55c7136d9b78 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c7136d9b48 <col:54> '<bound member function type>' ->xanno 0x55c7136bde78
|     |     |       `-CXXThisExpr 0x55c7136d9b38 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c7136d9c00 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c7136d9bc8 <col:67> 'int' lvalue ParmVar 0x55c7136c1da0 'i' 'int'
|     `-CXXConstCastExpr 0x55c7136d9d10 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55c7136d9cf8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55c7136d9cc0 <col:91> 'const void *' lvalue ParmVar 0x55c7136c1e20 'x' 'const void *'
|-CXXMethodDecl 0x55c7136c1fc8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55c7136d9de8 <col:34, line:640:5>
|   `-ReturnStmt 0x55c7136d9dd8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55c7136d9dc0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55c7136d9d90 <col:16> 'Packet *' lvalue ->_data_packet 0x55c7136c9748
|         `-CXXThisExpr 0x55c7136d9d80 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c7136c2108 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55c7136c2078 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c7136d2ea8 <col:46> 'bool' true
|-CXXMethodDecl 0x55c7136c2288 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55c7136c21c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55c7136c2330 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55c7136c2ae0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55c7136c2430 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2b50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c2410 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55c7136c23f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c7136b7590 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c7136c24c0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2b68 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c24a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55c7136c2480 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c7136b7620 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c7136c2550 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2b80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c2530 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7136c2510 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c7136c25e0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2b98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c25c0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55c7136c25a0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55c7136c2670 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c2650 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55c7136c2630 <col:21> 'int' 16
| |-EnumConstantDecl 0x55c7136c2700 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2bc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c26e0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c7136c26c0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c7136c2790 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2be0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c2770 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55c7136c2750 <col:19> 'int' EnumConstant 0x55c7136c25e0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c7136c2820 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c2800 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55c7136c27e0 <col:19> 'int' EnumConstant 0x55c7136c2700 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c7136c28f0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2c10 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c28d0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55c7136c28b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c7136c2870 <col:23> 'int' EnumConstant 0x55c7136c2820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c7136c2890 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c7136c29c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c7136c2c28 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7136c29a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55c7136c2980 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c7136c2940 <col:23> 'int' EnumConstant 0x55c7136c2820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c7136c2960 <col:40> 'int' 4
| `-EnumConstantDecl 0x55c7136c2a90 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55c7136c2c40 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c7136c2a70 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55c7136c2a50 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55c7136c2a10 <col:23> 'int' EnumConstant 0x55c7136c2820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55c7136c2a30 <col:40> 'int' 8
|-CXXMethodDecl 0x55c7136c2c80 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55c7136c2d20 <col:68> "" ""
|-CXXMethodDecl 0x55c7136c2db8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55c7136c2e58 <col:45> "" ""
|-CXXMethodDecl 0x55c7136c2ef0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c7136c2f90 <col:57> "" ""
|-CXXMethodDecl 0x55c7136c3028 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55c7136c30c8 <col:45> "" ""
|-CXXMethodDecl 0x55c7136c3160 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c7136c3200 <col:57> "" ""
|-CXXMethodDecl 0x55c7136c3290 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c7136c3330 <col:51> "" ""
|-CXXMethodDecl 0x55c7136c33c0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c7136c3460 <col:63> "" ""
|-CXXMethodDecl 0x55c7136c34f0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c7136c3590 <col:53> "" ""
|-CXXMethodDecl 0x55c7136c3620 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c7136c36c0 <col:65> "" ""
|-CXXMethodDecl 0x55c7136c37d8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c7136c3748 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55c7136c3880 <col:61> "" ""
|-CXXMethodDecl 0x55c7136c3a18 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c7136c3908 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55c7136c3980 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c7136c3ac8 <col:67> "" ""
|-CXXMethodDecl 0x55c7136c3be0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c7136c3b50 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c7136c3c88 <col:63> "" ""
|-CXXMethodDecl 0x55c7136c3e20 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c7136c3d10 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c7136c3d88 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c7136c3ed0 <col:69> "" ""
|-CXXMethodDecl 0x55c7136c3fe8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c7136c3f58 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c7136c4090 <col:63> "" ""
|-CXXMethodDecl 0x55c7136c6768 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c7136c6658 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c7136c66d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c7136c6818 <col:69> "" ""
|-CXXMethodDecl 0x55c7136c6930 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c7136c68a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55c7136c69d8 <col:62> "" ""
|-CXXMethodDecl 0x55c7136c6b70 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c7136c6a60 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c7136c6ad8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55c7136c6c20 <col:68> "" ""
|-CXXMethodDecl 0x55c7136c6d38 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55c7136c6ca8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c7136c6de0 <col:63> "" ""
|-CXXMethodDecl 0x55c7136c6f78 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55c7136c6e68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c7136c6ee0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55c7136c7028 <col:69> "" ""
|-CXXMethodDecl 0x55c7136c70b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c7136c7158 <col:64> "" ""
|-CXXMethodDecl 0x55c7136c71e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c7136c7288 <col:52> "" ""
|-CXXMethodDecl 0x55c7136c7318 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c7136c73b8 <col:67> "" ""
|-CXXMethodDecl 0x55c7136c7448 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c7136c74e8 <col:55> "" ""
|-CXXMethodDecl 0x55c7136c7600 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c7136c7570 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c7136c76a8 <col:58> "" ""
|-CXXMethodDecl 0x55c7136c7840 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c7136c7730 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c7136c77a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c7136c78f0 <col:62> "" ""
|-CXXMethodDecl 0x55c7136c7a08 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55c7136c7978 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c7136c7ab0 <col:58> "" ""
|-CXXMethodDecl 0x55c7136c7c48 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55c7136c7b38 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c7136c7bb0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55c7136c7cf8 <col:62> "" ""
|-CXXMethodDecl 0x55c7136c7e10 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c7136c7d80 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55c7136c7eb8 <col:60> "" ""
|-CXXMethodDecl 0x55c7136c8050 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c7136c7f40 <col:34> col:37 'int'
| |-ParmVarDecl 0x55c7136c7fb8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c7136c8100 <col:64> "" ""
|-CXXMethodDecl 0x55c7136c8218 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c7136c8188 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c7136c82c0 <col:58> "" ""
|-CXXMethodDecl 0x55c7136c8458 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c7136c8348 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c7136c83c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55c7136c8508 <col:62> "" ""
|-CXXMethodDecl 0x55c7136c8620 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c7136c8590 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55c7136c86c8 <col:59> "" ""
|-CXXMethodDecl 0x55c7136c8860 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c7136c8750 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c7136c87c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c7136c8910 <col:63> "" ""
|-AccessSpecDecl 0x55c7136c8980 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55c7136c89a8 prev 0x55c7136bdbb0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c7136c8aa0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55c7136c8b90 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55c7136c8cb8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55c7136c8e38 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55c7136c8fb8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55c7136c9138 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55c7136d9f68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c7136da7d8 <col:11>
| |-CXXDestructorDecl 0x55c7136da040 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c7136da178 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c7136da178
| | `-ParmVarDecl 0x55c7136da288 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55c7136da328 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c7136da328
| | `-ParmVarDecl 0x55c7136da438 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55c7136dd1f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c7136dd308 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55c7136dd588 <col:11>
| |   `-ReturnStmt 0x55c7136dd578 <col:11>
| |     `-UnaryOperator 0x55c7136dd560 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c7136dd550 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55c7136dd378 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c7136dd378
|   `-ParmVarDecl 0x55c7136dd488 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55c7136c91a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c7136c92b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55c7136c9358 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55c7136c93c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55c7136c9428 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55c7136c9490 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55c7136c94f0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55c7136c95b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55c7136c9610 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55c7136c9670 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55c7136d9e78 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55c7136c9358 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55c7136da7e8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55c7136da840 <col:12>
| |-CXXConstructorDecl 0x55c7136da4a8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c7136da4a8
| | `-ParmVarDecl 0x55c7136da5b8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55c7136da658 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c7136da658
| | `-ParmVarDecl 0x55c7136da768 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55c7136dc8e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55c7136c96e8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55c7136c9748 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55c7136c97b0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55c7136c9818 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55c7136c9880 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55c7136c98e8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55c7136c9948 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55c7136c99a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55c7136c9a10 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55c7136c9a98 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55c7136c96e8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55c7136d9e10 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c7136c9948 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55c7136da850 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55c7136da8b0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55c7136c9c38 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55c7136c9b78 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55c7136c9d30 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55c7136c9f18 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55c7136c9e20 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55c7136ca1e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55c7136c9fd0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7136ca048 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c7136ca0c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136ca408 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55c7136ca2b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55c7136ca330 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55c7136d29e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55c7136ca4c8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55c7136ca540 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55c7136ca5b8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55c7136d2b40 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c7136d2ab0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136d2c88 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c7136d2bf8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55c7136d2d80 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7136da950 prev 0x55c7136b7210 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55c7136daa88 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55c7136dab18 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55c7136dabc0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55c7136dac60 <col:20>
| `-OptimizeNoneAttr 0x55c7136dacb8 <col:30>
|-CXXMethodDecl 0x55c7136dad08 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55c7136dada8 <col:20>
| `-OptimizeNoneAttr 0x55c7136dae00 <col:30>
|-CXXMethodDecl 0x55c7136dae50 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136daf18 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136dafe0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136db0f8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55c7136db1c0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55c7136db260 <col:20>
| `-OptimizeNoneAttr 0x55c7136db2b8 <col:30>
|-CXXMethodDecl 0x55c7136db328 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55c7136db3c8 <col:20>
| `-OptimizeNoneAttr 0x55c7136db420 <col:30>
|-CXXMethodDecl 0x55c7136db4c8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55c7136db568 <col:20>
| `-OptimizeNoneAttr 0x55c7136db5c0 <col:30>
|-CXXMethodDecl 0x55c7136db610 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c7136db728 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55c7136db848 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55c7136db968 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55c7136dba30 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55c7136dbad0 <col:62> "" ""
|-AccessSpecDecl 0x55c7136dbb40 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55c7136dbba0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55c7136dc798 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55c7136dc9c0 <col:29, col:31>
|-CXXMethodDecl 0x55c7136dbc68 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55c7136dbda8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55c7136dbd18 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55c7136dbea0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55c7136dc9d0 <col:23, col:25>
|-CXXMethodDecl 0x55c7136dc058 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55c7136dbf90 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55c7136dc328 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c7136dc110 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c7136dc188 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c7136dc200 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c7136dc4b8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55c7136dc3f0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55c7136dc5b0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55c7136dc618 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55c7136dc618
  `-ParmVarDecl 0x55c7136dc728 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137d4f80 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c7137d5098 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55c7137d5128 <col:16, col:22> col:16 public
|-EnumDecl 0x55c7137d5150 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55c7137d5250 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c7137d54a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7137d5230 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c7137d5210 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c7137d52e0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c7137d54b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7137d52c0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55c7137d52a0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55c7137d5370 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c7137d54d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7137d5350 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55c7137d5330 <col:24> 'int' 34
| |-EnumConstantDecl 0x55c7137d5400 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55c7137d54e8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c7137d53e0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55c7137d53c0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55c7137d5450 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55c7137d6e60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c7137d7298 <col:7>
|-CXXConstructorDecl 0x55c7137d6f68 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55c7137d6f68
| `-ParmVarDecl 0x55c7137d7078 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55c7137d7118 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7137d7228 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55c7138c4ab0 <col:7>
`-CXXDestructorDecl 0x55c7137db3e8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137d5518 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55c7137d5678 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55c7137d5708 <col:32, col:38> col:32 public
|-TypedefDecl 0x55c7137d5740 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55c7132e3ee0 'uint32_t' sugar
|   |-Typedef 0x55c7131f64c8 'uint32_t'
|   `-TypedefType 0x55c7131cf5a0 '__uint32_t' sugar
|     |-Typedef 0x55c7131cf198 '__uint32_t'
|     `-BuiltinType 0x55c71318d620 'unsigned int'
|-CXXConstructorDecl 0x55c7137d5888 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55c7137d57b0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55c7137d6d68 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c7137d72a8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c7137d6620 'base' 'int'
| | `-ImplicitCastExpr 0x55c7137d6e08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c7137d6dc8 <col:16> 'int' lvalue ParmVar 0x55c7137d57b0 'b' 'int'
| `-CompoundStmt 0x55c7137d7318 <col:19, line:1046:5>
|-CXXMethodDecl 0x55c7137d5d80 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55c7137d5950 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55c7137d59d0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55c7137d5a48 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55c7137d5ac8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55c7137d5b88 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55c7137d5c08 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55c7137d61d8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55c7137d5e50 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55c7137d6138 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55c7137d5ef8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55c7137d5f98 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55c7137d6010 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55c7137d6d88 <col:82> 'const ArgContext' lvalue Var 0x55c7137cada8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55c7137da298 <col:94, line:1067:5>
| |   |-DeclStmt 0x55c7137d74a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55c7137d7338 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55c7137d7460 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55c7137d76c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55c7137d74d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55c7137d76a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55c7137d7680 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55c7137d7630 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55c7137d7610 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55c7137d75b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55c7137d7568 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55c7137d7598 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55c7137d75f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55c7137d75d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55c7137d7660 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55c7137d7828 <line:1056:9, col:27>
| |   | `-VarDecl 0x55c7137d77c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55c7137d9cc8 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55c7137d7bb0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55c7137d7b20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c71372ccf8 0x55c71370f730 0x55c7136adec8 0x55c7134f74a8 0x55c7134f7180 0x55c7134e7950 0x55c7134e7600 0x55c7134e6ef0 0x55c7134b9860 0x55c713446d30
| |   | | |-CallExpr 0x55c7137d7a60 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55c7137d7850 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55c7137d7900 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c7137d78d0 <col:19, col:23> '<bound member function type>' .begin 0x55c7134d6b58
| |   | | | |   `-DeclRefExpr 0x55c7137d78b0 <col:19> 'const String' lvalue ParmVar 0x55c7137d5ef8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55c7137d7970 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c7137d7940 <col:32, col:36> '<bound member function type>' .end 0x55c7134d6d70
| |   | | | |   `-DeclRefExpr 0x55c7137d7920 <col:32> 'const String' lvalue ParmVar 0x55c7137d5ef8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55c7137d7990 <col:43> 'const bool' lvalue Var 0x55c7137d7338 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55c7137d79f8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55c7137d79d8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55c7137d7a20 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55c7137d77c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55c7137d7a40 <col:73> 'const int' lvalue Var 0x55c7137d74d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55c7137d7b00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55c7137d7ad0 <col:16, col:20> '<bound member function type>' .end 0x55c7134d6d70
| |   | |     `-DeclRefExpr 0x55c7137d7ab0 <col:16> 'const String' lvalue ParmVar 0x55c7137d5ef8 'str' 'const String &'
| |   | `-BinaryOperator 0x55c7137d9ca8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55c7137d9c40 <col:13> 'int' lvalue ->status 0x55c7137d6688
| |   |   | `-CXXThisExpr 0x55c7137d7be8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55c7137d9c90 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55c7137d9c70 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d52e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55c7137d9f18 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55c7137d9e00 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55c7137d9de8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55c7137d9dd0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55c7137d9cf0 <col:13> 'int' lvalue ->status 0x55c7137d6688
| |   | | |     `-CXXThisExpr 0x55c7137d9ce0 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55c7137d9db0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55c7137d9d80 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55c7137d9d30 <col:23> 'int' lvalue ->status 0x55c7137d6688
| |   | |   |   `-CXXThisExpr 0x55c7137d9d20 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55c7137d9d98 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55c7137d9d60 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55c7137d9ef8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55c7137d9e98 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55c7137d9e40 <col:13, col:18> '<bound member function type>' .error 0x55c713774f20
| |   |   | | `-DeclRefExpr 0x55c7137d9e20 <col:13> 'const ArgContext' lvalue ParmVar 0x55c7137d6010 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55c7137d9ec0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55c7137d9e70 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55c7137d9ee8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55c7137d9ed8 <col:20> 'bool' false
| |   |-DeclStmt 0x55c7137da0e8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55c7137da090 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55c7137da020 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55c7137da248 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55c7137da100 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55c71347acf8
| |   | |-DeclRefExpr 0x55c7137da148 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55c7137d77c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55c7137da218 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55c7137da190 <col:64> 'V' lvalue ParmVar 0x55c7137d5f98 'result' 'V &'
| |   `-ReturnStmt 0x55c7137da288 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55c7137da278 <col:16> 'bool' true
| |-CXXMethodDecl 0x55c713899b18 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55c7138998f0 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x55c7138999c8 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x55c713899a30 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x55c71389b8d0 <col:94, line:1067:5>
| |   |-DeclStmt 0x55c71389a328 <line:1054:9, col:64>
| |   | `-VarDecl 0x55c71389a148 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x55c71389a2b8 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55c71389a288 <col:36, col:55> 'const bool' lvalue Var 0x55c71346ac68 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x55c71389a508 <line:1055:9, col:91>
| |   | `-VarDecl 0x55c71389a340 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55c71389a488 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x55c71389a470 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x55c71389a450 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x55c71389a430 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x55c71389a410 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x55c71389a3d8 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x55c71389a3b8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x55c7137d7598 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x55c71389a3f8 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x55c7137d75d8 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x55c7137d7660 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55c71389a6a0 <line:1056:9, col:27>
| |   | `-VarDecl 0x55c71389a638 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x55c71389ab50 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x55c71389aaf8 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x55c71389a9b0 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x55c71389a980 <col:13> '<bound member function type>' ->parse 0x55c7137d5d80
| |   | | | | `-CXXThisExpr 0x55c71389a970 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x55c71389a810 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c71389a7e0 <col:19, col:23> '<bound member function type>' .begin 0x55c7134d6b58
| |   | | | |   `-DeclRefExpr 0x55c71389a7c0 <col:19> 'const String' lvalue ParmVar 0x55c7138998f0 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55c71389a880 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55c71389a850 <col:32, col:36> '<bound member function type>' .end 0x55c7134d6d70
| |   | | | |   `-DeclRefExpr 0x55c71389a830 <col:32> 'const String' lvalue ParmVar 0x55c7138998f0 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x55c71389aa20 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x55c71389aa00 <col:43> 'const bool' lvalue Var 0x55c71389a148 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x55c71389a908 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x55c71389a8f0 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x55c71389a8d0 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x55c71389aa38 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x55c71389a930 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55c71389a638 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x55c71389aa70 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x55c71389aa50 <col:73> 'const int' lvalue Var 0x55c71389a340 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x55c71389aad8 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55c71389aaa8 <col:16, col:20> '<bound member function type>' .end 0x55c7134d6d70
| |   | |     `-DeclRefExpr 0x55c71389aa88 <col:16> 'const String' lvalue ParmVar 0x55c7138998f0 'str' 'const String &'
| |   | `-BinaryOperator 0x55c71389ab30 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55c7137d9c40 <col:13> 'int' lvalue ->status 0x55c7137d6688
| |   |   | `-CXXThisExpr 0x55c7137d7be8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55c71389ab18 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55c7137d9c70 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d52e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55c71389acc8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55c71389abe8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55c71389abd0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55c71389abb8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55c7137d9cf0 <col:13> 'int' lvalue ->status 0x55c7137d6688
| |   | | |     `-CXXThisExpr 0x55c7137d9ce0 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55c71389ab98 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55c71389ab68 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55c7137d9d30 <col:23> 'int' lvalue ->status 0x55c7137d6688
| |   | |   |   `-CXXThisExpr 0x55c7137d9d20 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55c71389ab80 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55c7137d9d60 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55c71389aca8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55c71389ac58 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55c71389ac28 <col:13, col:18> '<bound member function type>' .error 0x55c713774f20
| |   |   | | `-DeclRefExpr 0x55c71389ac08 <col:13> 'const ArgContext' lvalue ParmVar 0x55c713899a30 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55c71389ac80 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55c7137d9e70 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55c71389ac98 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55c7137d9ed8 <col:20> 'bool' false
| |   |-DeclStmt 0x55c71389b208 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55c71389b1b0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x55c71389b160 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x55c71389b140 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x55c71389b0d0 'type'
| |   |       `-ElaboratedType 0x55c71389b080 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x55c71389b060 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x55c71346adc0 'unsigned_type'
| |   |           `-BuiltinType 0x55c71318d620 'unsigned int'
| |   |-CallExpr 0x55c71389b860 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x55c71389b848 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55c71389b7c8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55c71389b6a8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55c71347acf8 'extract_integer')
| |   | |-ImplicitCastExpr 0x55c71389b8a8 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x55c71389b890 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x55c71389b268 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55c71389a638 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x55c71389b338 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x55c71389b2e8 <col:64> 'int':'int' lvalue ParmVar 0x55c7138999c8 'result' 'int &'
| |   `-ReturnStmt 0x55c71389b8c0 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55c7137da278 <col:16> 'bool' true
| `-CXXMethodDecl 0x55c7138c8408 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c7138c81e0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55c7138c82b8 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x55c7138c8320 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55c7138ca050 <col:94, line:1067:5>
|     |-DeclStmt 0x55c7138c8c18 <line:1054:9, col:64>
|     | `-VarDecl 0x55c7138c8a38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55c7138c8ba8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55c7138c8b78 <col:36, col:55> 'const bool' lvalue Var 0x55c713463c20 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55c7138c8df8 <line:1055:9, col:91>
|     | `-VarDecl 0x55c7138c8c30 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55c7138c8d78 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55c7138c8d60 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55c7138c8d40 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55c7138c8d20 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55c7138c8d00 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55c7138c8cc8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55c7138c8ca8 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55c7137d7598 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55c7138c8ce8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55c7137d75d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55c7137d7660 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55c7138c8f10 <line:1056:9, col:27>
|     | `-VarDecl 0x55c7138c8ea8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55c7138c93a8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55c7138c9350 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55c7138c9208 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55c7138c91d8 <col:13> '<bound member function type>' ->parse 0x55c7137d5d80
|     | | | | `-CXXThisExpr 0x55c7138c91c8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55c7138c9068 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55c7138c9038 <col:19, col:23> '<bound member function type>' .begin 0x55c7134d6b58
|     | | | |   `-DeclRefExpr 0x55c7138c9018 <col:19> 'const String' lvalue ParmVar 0x55c7138c81e0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55c7138c90d8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55c7138c90a8 <col:32, col:36> '<bound member function type>' .end 0x55c7134d6d70
|     | | | |   `-DeclRefExpr 0x55c7138c9088 <col:32> 'const String' lvalue ParmVar 0x55c7138c81e0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55c7138c9278 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55c7138c9258 <col:43> 'const bool' lvalue Var 0x55c7138c8a38 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55c7138c9160 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55c7138c9148 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55c7138c9128 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x55c7138c9290 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55c7138c9188 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55c7138c8ea8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55c7138c92c8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55c7138c92a8 <col:73> 'const int' lvalue Var 0x55c7138c8c30 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55c7138c9330 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55c7138c9300 <col:16, col:20> '<bound member function type>' .end 0x55c7134d6d70
|     | |     `-DeclRefExpr 0x55c7138c92e0 <col:16> 'const String' lvalue ParmVar 0x55c7138c81e0 'str' 'const String &'
|     | `-BinaryOperator 0x55c7138c9388 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55c7137d9c40 <col:13> 'int' lvalue ->status 0x55c7137d6688
|     |   | `-CXXThisExpr 0x55c7137d7be8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55c7138c9370 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55c7137d9c70 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d52e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55c7138c9520 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55c7138c9440 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55c7138c9428 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55c7138c9410 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55c7137d9cf0 <col:13> 'int' lvalue ->status 0x55c7137d6688
|     | | |     `-CXXThisExpr 0x55c7137d9ce0 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55c7138c93f0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55c7138c93c0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55c7137d9d30 <col:23> 'int' lvalue ->status 0x55c7137d6688
|     | |   |   `-CXXThisExpr 0x55c7137d9d20 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55c7138c93d8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55c7137d9d60 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55c7138c9500 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55c7138c94b0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55c7138c9480 <col:13, col:18> '<bound member function type>' .error 0x55c713774f20
|     |   | | `-DeclRefExpr 0x55c7138c9460 <col:13> 'const ArgContext' lvalue ParmVar 0x55c7138c8320 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55c7138c94d8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55c7137d9e70 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55c7138c94f0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55c7137d9ed8 <col:20> 'bool' false
|     |-DeclStmt 0x55c7138c9a68 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55c7138c9a10 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x55c7138c99c0 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x55c7138c99a0 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x55c7138c9930 'type'
|     |       `-ElaboratedType 0x55c7138c98e0 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x55c7138c98c0 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x55c713463d78 'unsigned_type'
|     |           `-BuiltinType 0x55c71318d5e0 'unsigned char'
|     |-CallExpr 0x55c7138c9fe0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55c7138c9fc8 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55c7138c9f48 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x55c7138c9e28 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x55c71347acf8 'extract_integer')
|     | |-ImplicitCastExpr 0x55c7138ca028 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55c7138ca010 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55c7138c9ac8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55c7138c8ea8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55c7138c9b98 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55c7138c9b48 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x55c7138c82b8 'result' 'unsigned char &'
|     `-ReturnStmt 0x55c7138ca040 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55c7137da278 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55c7137d6598 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55c7137d6248 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55c7137d64f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55c7137d62f8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55c7137d6398 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55c7137d6410 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55c7137d6da8 <col:71> 'const ArgContext' lvalue Var 0x55c7137cada8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55c7137daa08 <col:83, line:1083:5>
| |   |-DeclStmt 0x55c7137da360 <line:1071:9, col:12>
| |   | `-VarDecl 0x55c7137da2f8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55c7137da9e0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55c7137da5f0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55c7137da478 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55c7137da440 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55c7137da388 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55c7137da3e0 <col:31> 'const String' lvalue ParmVar 0x55c7137d62f8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55c7137da400 <col:36> 'V' lvalue Var 0x55c7137da2f8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55c7137da420 <col:39> 'const ArgContext' lvalue ParmVar 0x55c7137d6410 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55c7137da5d0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55c7137da5b0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55c7137da598 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55c7137da580 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55c7137da4a0 <col:17> 'int' lvalue ->status 0x55c7137d6688
| |     |     |     `-CXXThisExpr 0x55c7137da490 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55c7137da560 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55c7137da530 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55c7137da4e0 <col:27> 'int' lvalue ->status 0x55c7137d6688
| |     |       |   `-CXXThisExpr 0x55c7137da4d0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55c7137da548 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55c7137da510 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55c7137da620 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55c7137da610 <col:20> 'bool' false
| |     `-IfStmt 0x55c7137da9b8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55c7137da6c0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55c7137da690 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55c7137da640 <col:18> 'int' lvalue ->status 0x55c7137d6688
| |       | |   `-CXXThisExpr 0x55c7137da630 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55c7137da6a8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55c7137da670 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55c7137da8f8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55c7137da8a0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55c7137da6f0 <line:1076:13> '<bound member function type>' ->range_error 0x55c7137d6c98
| |       | | | `-CXXThisExpr 0x55c7137da6e0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55c7137da720 <col:25> 'const ArgContext' lvalue ParmVar 0x55c7137d6410 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55c7137da800 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55c7137da878 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55c7137da858 <col:43> 'V' lvalue Var 0x55c7137da2f8 'x' 'V'
| |       | `-ReturnStmt 0x55c7137da8e8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55c7137da8d8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55c7137da998 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55c7137da958 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55c7137da918 <col:13> 'V' lvalue ParmVar 0x55c7137d6398 'result' 'V &'
| |         | `-DeclRefExpr 0x55c7137da938 <col:22> 'V' lvalue Var 0x55c7137da2f8 'x' 'V'
| |         `-ReturnStmt 0x55c7137da988 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55c7137da978 <col:20> 'bool' true
| |-CXXMethodDecl 0x55c71381f648 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55c71381f428 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x55c71381f4f8 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x55c71381f560 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x55c71389a128 <col:83, line:1083:5>
| |   |-DeclStmt 0x55c713899760 <line:1071:9, col:12>
| |   | `-VarDecl 0x55c7138996f8 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x55c71389a100 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55c713899d90 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x55c713899cb8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x55c713899c80 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x55c713899c38 <col:14> '<bound member function type>' ->parse_saturating 0x55c713899b18
| |     | |   | `-CXXThisExpr 0x55c713899c28 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x55c7138997d0 <col:31> 'const String' lvalue ParmVar 0x55c71381f428 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55c7138997f0 <col:36> 'int':'int' lvalue Var 0x55c7138996f8 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x55c713899810 <col:39> 'const ArgContext' lvalue ParmVar 0x55c71381f560 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55c713899d70 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55c713899d50 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55c713899d38 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55c713899d20 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55c7137da4a0 <col:17> 'int' lvalue ->status 0x55c7137d6688
| |     |     |     `-CXXThisExpr 0x55c7137da490 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55c713899d00 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55c713899cd0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55c7137da4e0 <col:27> 'int' lvalue ->status 0x55c7137d6688
| |     |       |   `-CXXThisExpr 0x55c7137da4d0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55c713899ce8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55c7137da510 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55c713899db0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55c7137da610 <col:20> 'bool' false
| |     `-IfStmt 0x55c71389a0d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55c713899df0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55c713899dc0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55c7137da640 <col:18> 'int' lvalue ->status 0x55c7137d6688
| |       | |   `-CXXThisExpr 0x55c7137da630 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55c713899dd8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55c7137da670 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55c71389a010 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x55c713899f80 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x55c7137da6f0 <line:1076:13> '<bound member function type>' ->range_error 0x55c7137d6c98
| |       | | | `-CXXThisExpr 0x55c7137da6e0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55c713899e10 <col:25> 'const ArgContext' lvalue ParmVar 0x55c71381f560 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x55c713899fe8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x55c713899fb8 <col:31, col:50> 'const bool' lvalue Var 0x55c71346ac68 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x55c713899f58 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x55c713899f40 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x55c713899f28 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x55c713899f08 <col:43> 'int':'int' lvalue Var 0x55c7138996f8 'x' 'int':'int'
| |       | `-ReturnStmt 0x55c71389a000 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55c7137da8d8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55c71389a0b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55c71389a088 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x55c71389a030 <col:13> 'int':'int' lvalue ParmVar 0x55c71381f4f8 'result' 'int &'
| |         | `-ImplicitCastExpr 0x55c71389a070 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x55c71389a050 <col:22> 'int':'int' lvalue Var 0x55c7138996f8 'x' 'int':'int'
| |         `-ReturnStmt 0x55c71389a0a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55c7137da978 <col:20> 'bool' true
| `-CXXMethodDecl 0x55c7138c7e48 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55c7138c7be0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55c7138c7cb8 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x55c7138c7d20 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55c7138c8a18 <col:83, line:1083:5>
|     |-DeclStmt 0x55c7138c80d0 <line:1071:9, col:12>
|     | `-VarDecl 0x55c7138c8068 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x55c7138c89f0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55c7138c8680 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55c7138c85a8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55c7138c8570 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55c7138c8528 <col:14> '<bound member function type>' ->parse_saturating 0x55c7138c8408
|       | |   | `-CXXThisExpr 0x55c7138c8518 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55c7138c8140 <col:31> 'const String' lvalue ParmVar 0x55c7138c7be0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55c7138c8160 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x55c7138c8068 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x55c7138c8180 <col:39> 'const ArgContext' lvalue ParmVar 0x55c7138c7d20 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55c7138c8660 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55c7138c8640 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55c7138c8628 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55c7138c8610 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55c7137da4a0 <col:17> 'int' lvalue ->status 0x55c7137d6688
|       |     |     `-CXXThisExpr 0x55c7137da490 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55c7138c85f0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55c7138c85c0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55c7137da4e0 <col:27> 'int' lvalue ->status 0x55c7137d6688
|       |       |   `-CXXThisExpr 0x55c7137da4d0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55c7138c85d8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55c7137da510 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55c7138c86a0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55c7137da610 <col:20> 'bool' false
|       `-IfStmt 0x55c7138c89c8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55c7138c86e0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55c7138c86b0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55c7137da640 <col:18> 'int' lvalue ->status 0x55c7137d6688
|         | |   `-CXXThisExpr 0x55c7137da630 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55c7138c86c8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55c7137da670 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55c7137d5370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55c7138c8900 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55c7138c8870 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55c7137da6f0 <line:1076:13> '<bound member function type>' ->range_error 0x55c7137d6c98
|         | | | `-CXXThisExpr 0x55c7137da6e0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55c7138c8700 <col:25> 'const ArgContext' lvalue ParmVar 0x55c7138c7d20 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55c7138c88d8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55c7138c88a8 <col:31, col:50> 'const bool' lvalue Var 0x55c713463c20 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55c7138c8848 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55c7138c8830 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55c7138c8818 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55c7138c87f8 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x55c7138c8068 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x55c7138c88f0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55c7137da8d8 <col:20> 'bool' false
|         `-CompoundStmt 0x55c7138c89a8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55c7138c8978 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x55c7138c8920 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x55c7138c7cb8 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x55c7138c8960 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x55c7138c8940 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x55c7138c8068 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x55c7138c8998 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55c7137da978 <col:20> 'bool' true
|-FieldDecl 0x55c7137d6620 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55c7137d6688 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55c7137d66d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55c7137d6990 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55c7137d6718 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55c7137d6798 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55c7137d6810 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55c7137d6890 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55c7137d6c98 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55c7137d6a60 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55c7137d6ad8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55c7137d6b70 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55c7137db268 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55c7137db268
| `-ParmVarDecl 0x55c7137db378 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55c7137db4f8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7137db608 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55c7138c4ac0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c7138c4a90 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55c7138c4a60 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c7138c4a30 <col:7> 'IntArg' lvalue ParmVar 0x55c7137db608 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55c7137d6620 'base' 'int'
| | `-ImplicitCastExpr 0x55c7138c4bb8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c7138c4b88 <col:7> 'int' xvalue .base 0x55c7137d6620
| |     `-CXXStaticCastExpr 0x55c7138c4b58 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c7138c4b28 <col:7> 'IntArg' lvalue ParmVar 0x55c7137db608 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55c7137d6688 'status' 'int'
| | `-ImplicitCastExpr 0x55c7138c4c88 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c7138c4c58 <col:7> 'int' xvalue .status 0x55c7137d6688
| |     `-CXXStaticCastExpr 0x55c7138c4c28 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c7138c4bf8 <col:7> 'IntArg' lvalue ParmVar 0x55c7137db608 '' 'IntArg &&'
| `-CompoundStmt 0x55c7138c4ce0 <col:7>
`-CXXDestructorDecl 0x55c71381f1a8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c7137381e8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c713738308 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x55c7137385b0 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55c7137383a8 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x55c713738420 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x55c713738498 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c713738c08 <col:33> 'const ArgContext' lvalue Var 0x55c71366f910 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c713738848 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55c713738678 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55c7137386f0 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x55c713738768 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c713738c28 <col:34> 'const ArgContext' lvalue Var 0x55c71366f910 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c713738b38 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55c713738910 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55c7137389a0 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x55c713738a18 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55c713738c48 <col:34> 'const ArgContext' lvalue Var 0x55c71366f910 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55c713738e08 <col:46, line:381:5>
|   `-ReturnStmt 0x55c713738df8 <line:380:9, col:71>
|     `-CallExpr 0x55c713738dc0 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x55c713738da8 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c713738d58 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x55c713738848 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x55c713738cb8 <col:22> 'const String' lvalue ParmVar 0x55c713738910 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55c713738d08 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x55c713738cd8 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x55c7137389a0 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x55c713738d38 <col:67> 'const ArgContext' lvalue ParmVar 0x55c713738a18 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x55c7138aa2b8 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55c7138aa390 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c7138aa4c8 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x55c7138aa4c8
| `-ParmVarDecl 0x55c7138aa5d8 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x55c7138aa678 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55c7138aa788 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x55c7138ab3e0 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c713739fb0 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x55c71373a208 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c7138aa1c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c7138aa7f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x55c7138aa7f8
| `-ParmVarDecl 0x55c7138aa908 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x55c7138aa9a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7138aaab8 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x55c7138ab3f0 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c7138ab3c0 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x55c7138ab390 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x55c7138ab360 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x55c7138aaab8 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x55c7138ab460 <col:19>
`-CXXDestructorDecl 0x55c7138aab58 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c7138baa18 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c7138bae28 prev 0x55c7138baa18 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55c7138bb020 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55c7138baf28 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55c7138bbf78 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55c7138bb1a0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55c7138bbf38 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c7138bbef8 <col:20> 'String *' lvalue ParmVar 0x55c7138baf28 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55c7138bb200 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55c7138bbfd8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55c7137cabd0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55c7138bb0e0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55c7137a4d50 Slot::store 'void ()' ]
| `-CompoundStmt 0x55c7138bc698 <col:22, line:857:9>
|   `-CallExpr 0x55c7138bc650 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55c7138bc638 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55c7138bc5b8 <col:13> 'void (String &, const String &)' lvalue Function 0x55c7138bc498 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55c7134503c8 'assign_consume')
|     |-UnaryOperator 0x55c7138bc168 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55c7138bc150 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55c7138bc120 <col:29> 'String *' lvalue ->_ptr 0x55c7138bb1a0
|     |     `-CXXThisExpr 0x55c7138bc110 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55c7138bc680 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55c7138bc190 <col:35> 'String':'String' lvalue ->_slot 0x55c7138bb200
|         `-CXXThisExpr 0x55c7138bc180 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55c7138bb1a0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55c7138bb200 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55c7138bb278 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55c7138bb278
| `-ParmVarDecl 0x55c7138bb388 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55c7138bb428 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55c7138bb428
| `-ParmVarDecl 0x55c7138bb538 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55c7138bb5d8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55c7138bb5d8
| `-ParmVarDecl 0x55c7138bb6e8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55c7138bb758 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55c7138bb758
| `-ParmVarDecl 0x55c7138bb868 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55c7138bb8f0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55c7137a4c50 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55c7138bc040 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c7137de808 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x55c7137dea68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c7138c1328 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55c7138c17c0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55c7138c17a0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55c7138c1830 <col:19>
|-CXXConstructorDecl 0x55c7138c1428 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x55c7138c1428
| `-ParmVarDecl 0x55c7138c1538 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x55c7138c15d8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c7138c16e8 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55c7138c4cf0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c7138c4a10 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55c7138c49e0 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x55c7138c49b0 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x55c7138c16e8 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x55c7138c4d60 <col:19>
`-CXXDestructorDecl 0x55c7138c1870 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
