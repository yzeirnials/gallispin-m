
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492e7488 prev 0x55e5492dec28 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e5492e7580 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e5492e7610 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e5492e7688 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e5492e7748 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e5492e7810 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e5492e7988 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e5492e78c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e5492e7a30 <col:24>
| `-OptimizeNoneAttr 0x55e5492e7a88 <col:34>
|-CXXMethodDecl 0x55e5492e7ad0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e5492e7d88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e5492e7b80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e5492e7bf8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e5492e7c78 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e5492e7e40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e5492e7e78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e5492e7ee0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e5492e7f68 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e5492e8288 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e5492e8020 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e5492e8098 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e5492e8110 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e5492e8190 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e5492e83a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e5492efd18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e5492efd18
| `-ParmVarDecl 0x55e5492efe28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e5492efec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e5492efec8
| `-ParmVarDecl 0x55e5492effd8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e5493ab828 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492da4a0 prev 0x55e5492da220 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e5492da598 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e5492da628 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e5492da688 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e5492da778 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e5492da878 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e5492daa48 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e5492da8f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e5492da970 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e5492dabd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e5492dab10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e5492dac80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e5492dadb8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e5492dacf0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e5492daf58 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e5492dae98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e5492db0f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e5492db038 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e5492db1a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e5492db2a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e5492db380 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492db280 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e5492db260 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e5492db330 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e5492db398 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492db310 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e5492db2f0 <col:44> 'int' 2
|-CXXMethodDecl 0x55e5492db4e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e5492db3c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e5492db448 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e5492db638 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e5492db5a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e5492db878 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e5492db6f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e5492db770 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e5492db928 <col:20>
| `-OptimizeNoneAttr 0x55e5492db980 <col:30>
|-CXXMethodDecl 0x55e5492dba88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e5492db9c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e5492dbb30 <col:20>
| `-OptimizeNoneAttr 0x55e5492dbb88 <col:30>
|-CXXMethodDecl 0x55e5492dbbd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e5492dbca0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e5492dbdb8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e5492dbe40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e5492dbec8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e5492dbf50 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55e5492dbfd8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e5492dc068 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e5492dc128 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e5492dc1b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e5492dc238 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e5492dc2c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e5492dc348 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e5492dc3d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e5492dc460 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e5492dc520 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e5492dc5b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e5492dc700 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e5492dc668 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e5492dc890 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e5492dc7c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e5492dcb40 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e5492dc948 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e5492dc9c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e5492dca48 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e5492dcbf8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e5492dcd00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e5492dcf90 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492dcce0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e5492dccc0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e5492dcd90 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e5492dcfa8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492dcd70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e5492dcd50 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e5492dce20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e5492dcfc0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492dce00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e5492dcde0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e5492dceb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e5492dcfd8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492dce90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e5492dce70 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e5492dcf40 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e5492dcff0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492dcf20 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e5492dcf00 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e5492dd030 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e5492dd470 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e5492dd2e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e5492dd358 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492dd540 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e5492dd6c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e5492dd5f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492dd8c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e5492dd778 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e5492dd7f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492dd9c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e5492dda68 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e5492ddb30 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddbc0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e5492dddf0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ddba0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e5492ddb80 <col:36> 'int' EnumConstant 0x55e5492ddb30 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddc10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddc60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddcb0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddd00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e5492ddd50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e5492ddda0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e5492dded8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e5492dde18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e5492ddfa0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e5492de060 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e5492de120 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e5492de1e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e5492de2f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e5492de3c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e5492de540 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e5492de470 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e5492de668 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e5492de868 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e5492de718 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e5492de798 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e5492ec1b8 <col:54, line:127:5>
|   |-ParenExpr 0x55e5492ec068 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e5492ec038 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492ebd28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e5492ebd00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e5492ebce8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e5492ebcd0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e5492ebca0 <col:31> 'Router *' lvalue ->_router 0x55e5492e9b80
|   |   |         `-CXXThisExpr 0x55e5492ebc90 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e5492ebd88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492ebd68 <col:48> 'int' 0
|   |   `-CallExpr 0x55e5492ebf98 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e5492ebf80 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492ebf60 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492ebfd8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492ebdf8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e5492ebff0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492ebe18 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e5492ec008 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492ebe50 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e5492ec020 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492ebf48 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492ebf30 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492ebee8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e5492ec100 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e5492ec098 <col:9> 'Router *' lvalue ->_router 0x55e5492e9b80
|   | | `-CXXThisExpr 0x55e5492ec088 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e5492ec0e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e5492ec0c8 <col:19> 'Router *' lvalue ParmVar 0x55e5492de718 'r' 'Router *'
|   `-BinaryOperator 0x55e5492ec198 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e5492ec130 <col:9> 'int' lvalue ->_eindex 0x55e5492e9be8
|     | `-CXXThisExpr 0x55e5492ec120 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e5492ec180 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492ec160 <col:19> 'int' lvalue ParmVar 0x55e5492de798 'eindex' 'int'
|-CXXMethodDecl 0x55e5492de9f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e5492de928 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e5492deac0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e5492deb88 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e5492dec28 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e5492dee78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e5492decf0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e5492ded70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e5492def28 <col:20>
| `-OptimizeNoneAttr 0x55e5492def80 <col:30>
|-CXXMethodDecl 0x55e5492df088 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e5492defc0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e5492df130 <col:20>
| `-OptimizeNoneAttr 0x55e5492df188 <col:30>
|-CXXMethodDecl 0x55e5492df258 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e5492df1c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e5492df300 <col:20>
| `-OptimizeNoneAttr 0x55e5492df358 <col:30>
|-CXXMethodDecl 0x55e5492df4e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e5492df390 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e5492df410 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e5492df678 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e5492df5b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e5492df7c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e5492df738 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e5492df918 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e5492df888 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e5492dfa68 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e5492df9d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e5492dfd28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e5492dfb20 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e5492dfba0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e5492dfc48 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e5492dfe00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e5492dfec0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e5492e0190 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e5492e0040 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e5492e00b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492e02b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e5492e0490 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e5492e0370 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e5492e03f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e5492e0678 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e5492e0558 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e5492e05d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e5492e09e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e5492e0738 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e5492e07b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e5492e0830 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e5492eb7a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e5492eb780 <col:106> 'int' 0
| `-ParmVarDecl 0x55e5492e08a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb7d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb7b8 <col:126> 'int' 0
|-CXXMethodDecl 0x55e5492e0d88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e5492e0ab8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e5492e0b50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e5492e0bd0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e5492e0c48 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb810 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb7f0 <col:114> 'int' 0
|-CXXMethodDecl 0x55e5492e1118 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e5492e0e60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e5492e0ed8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e5492e0f58 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e5492eb828 <col:96> 'int' 0
| `-ParmVarDecl 0x55e5492e0fd0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb868 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb848 <col:116> 'int' 0
|-CXXMethodDecl 0x55e5492e1498 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e5492e11e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e5492e1260 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e12e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e5492eb8a0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e5492eb880 <col:109> 'int' 0
| `-ParmVarDecl 0x55e5492e1358 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb8d8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb8b8 <col:129> 'int' 0
|-CXXMethodDecl 0x55e5492e1818 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e5492e1568 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e5492e15e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e1660 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e5492e16d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb910 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb8f0 <col:117> 'int' 0
|-CXXMethodDecl 0x55e5492e1ba8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e5492e18f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e1968 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e19e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e5492eb928 <col:99> 'int' 0
| `-ParmVarDecl 0x55e5492e1a60 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e5492eb968 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e5492eb948 <col:119> 'int' 0
|-CXXMethodDecl 0x55e5492e1fc8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e5492e1c78 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e5492e1cf8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e5492e1d70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e1df0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e5492eb9a0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e5492eb980 <col:108> 'int' 0
| `-ParmVarDecl 0x55e5492e1e70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e5492eb9d8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e5492eb9b8 <col:141> 'int' 0
|-CXXMethodDecl 0x55e5492e23e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e5492e20a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e5492e2120 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e5492e2198 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e2218 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e5492e2298 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e5492eb9f0 <col:121> 'int' 0
|-CXXMethodDecl 0x55e5492e2818 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e5492e24c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e5492e2548 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e5492e25c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492e2640 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e5492eba10 <col:98> 'int' 0
| `-ParmVarDecl 0x55e5492e26c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e5492eba30 <col:123> 'int' 0
|-CXXMethodDecl 0x55e5492e2ae0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e5492e28f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e5492e2970 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e5492e29f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e5492eba50 <col:80> 'int' 0
|-EnumDecl 0x55e5492e2b98 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e5492e2ca0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e5492e2f30 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492e2c80 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e5492e2c60 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e5492e2d30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e5492e2f48 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492e2d10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e5492e2cf0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e5492e2dc0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e5492e2f60 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492e2da0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e5492e2d80 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e5492e2e50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e5492e2f78 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492e2e30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e5492e2e10 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e5492e2ee0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e5492e2f90 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492e2ec0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e5492e2ea0 <col:34> 'int' 6
|-CXXMethodDecl 0x55e5492e3248 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e5492e2fb8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e5492e3058 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e5492e30d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e5492e3150 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e5492ebb08 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e5492ebaf0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e5492ebad8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e5492ebab8 <col:98, col:105> 'String' (CXXTemporary 0x55e5492ebab8)
|           `-CXXTemporaryObjectExpr 0x55e5492eba80 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e5492e34e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e5492e3318 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e5492e3390 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e5492e3408 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e5492ebbb8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e5492ebba0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e5492ebb88 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e5492ebb68 <col:94, col:101> 'String' (CXXTemporary 0x55e5492ebb68)
| |         `-CXXTemporaryObjectExpr 0x55e5492ebb30 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e5492ec3a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e5492ec318 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e5492ec2e8 <col:9> '<bound member function type>' ->add_task_handlers 0x55e5492e3248
|     | `-CXXThisExpr 0x55e5492ec2d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e5492ec358 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e5492ec258 <col:27> 'Task *' lvalue ParmVar 0x55e5492e3318 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e5492ec370 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e5492ec278 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e5492e3390 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e5492ec388 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e5492ec298 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e5492e2ee0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e5492ec2b8 <col:62> 'const String' lvalue ParmVar 0x55e5492e3408 'prefix' 'const String &'
|-CXXMethodDecl 0x55e5492e36f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e5492e35b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e5492e3628 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e5492ebc68 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e5492ebc50 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e5492ebc38 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e5492ebc18 <col:70, col:77> 'String' (CXXTemporary 0x55e5492ebc18)
| |         `-CXXTemporaryObjectExpr 0x55e5492ebbe0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e5492ec578 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e5492ec4f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e5492ec4c0 <col:9> '<bound member function type>' ->add_task_handlers 0x55e5492e3248
|     | `-CXXThisExpr 0x55e5492ec4b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e5492ec530 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e5492ec430 <col:27> 'Task *' lvalue ParmVar 0x55e5492e35b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e5492ec548 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e5492ec450 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e5492ec560 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e5492ec470 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e5492e2ee0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e5492ec490 <col:57> 'const String' lvalue ParmVar 0x55e5492e3628 'prefix' 'const String &'
|-CXXMethodDecl 0x55e5492e39d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e5492e37c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e3840 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e38b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e5492e3c88 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e5492e3aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e3b28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e3ba8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e5492e3f78 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e5492e3d58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e3dd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e3e50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e5492e4228 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e5492e4048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e40c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e4148 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e5492e44d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e5492e42f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e4378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e43f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e5492e4788 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e5492e45a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e4628 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e46a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e5492e4a38 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e5492e4858 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e48d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e4958 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e5492e4d48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e5492e4b60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e4be0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e4c60 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e5492e5028 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e5492e4e18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e4e98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e4f40 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e5492e5308 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e5492e50f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e5178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e5220 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e5492e5570 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e5492e53d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e5492e5458 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e5492e54d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e5492e5818 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e5492e5640 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e5492e56c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e5492e5738 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e5492e5ac8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e5492e58e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e5968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e59e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e5492e5d78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e5492e5b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e5c18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e5c90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e5492e6028 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e5492e5e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e5ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e5f40 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e5492e62f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e5492e60f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e6178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e5492e6218 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e5492e6628 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e5492e63c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e5492e6448 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e5492e64c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e5492e6538 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e5492ebc80 <col:93> 'bool' false
|-CXXMethodDecl 0x55e5492e6810 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e5492e66f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e5492e6778 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e5492e69e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e5492e68d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e5492e6950 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e5492e6cc8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e5492e6aa8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e5492e6b20 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e5492e6ba0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e5492e6c18 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492e6fb8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e5492e6d98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e5492e6e10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e5492e6e90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e5492e6f08 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492e71f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e5492e7090 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e5492e7110 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e5492e73d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e5492e72b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e5492e7338 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e5492e7488 prev 0x55e5492dec28 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e5492e7580 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e5492e7610 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e5492e7688 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e5492e7748 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e5492e7810 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e5492e7988 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e5492e78c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e5492e7a30 <col:24>
| | `-OptimizeNoneAttr 0x55e5492e7a88 <col:34>
| |-CXXMethodDecl 0x55e5492e7ad0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e5492e7d88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e5492e7b80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e5492e7bf8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e5492e7c78 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e5492e7e40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e5492e7e78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e5492e7ee0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e5492e7f68 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e5492e8288 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e5492e8020 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e5492e8098 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e5492e8110 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e5492e8190 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e5492e83a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e5492efd18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e5492efd18
| | `-ParmVarDecl 0x55e5492efe28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e5492efec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e5492efec8
| | `-ParmVarDecl 0x55e5492effd8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e5493ab828 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e5492e8418 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e5492e84b8 <col:38> "" ""
|-CXXMethodDecl 0x55e5492e8548 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e5492e85e8 <col:44> "" ""
|-AccessSpecDecl 0x55e5492e8658 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e5492e8680 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e5492e8780 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e5492e87d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492e8760 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e5492e8740 <col:27> 'int' 4
|-FieldDecl 0x55e5492e8888 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e5492e8a38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e5492e8af0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e5492e9b80 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e5492e9be8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e5492e9d38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e5492e9c78 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e5492e9ee8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e5492e9df8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e5492ea0c8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e5492e9fa8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e5492ea028 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e5492ea370 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e5492ea190 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e5492ea210 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e5492ea288 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e5492ea428 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e5492ea4f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e5492ea540 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e5492ea590 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e5492ea770 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e5492ea620 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e5492ea698 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492eaa18 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e5492ea838 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e5492ea8b8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e5492ea930 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492eac38 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e5492eaae8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e5492eab68 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e5492eaf70 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e5492eacf8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e5492ead78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e5492eadf0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e5492eae70 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e5492eb158 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e5492eb040 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e5492eb0c0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e5492eb2a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e5492eb218 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e5492eb628 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e5492eb368 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e5492eb3e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e5492eb460 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e5492eb4e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e5492eb740 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class MarkIP6Header
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492f2e88 <../elements/ip6/markip6header.hh:20:1, line:35:1> line:20:7 class MarkIP6Header definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e5492f2fe8 <col:1, col:7> col:7 implicit referenced class MarkIP6Header
|-FieldDecl 0x55e5492f3090 <line:22:3, col:7> col:7 _offset 'int'
|-AccessSpecDecl 0x55e5492f30e0 <line:24:2, col:8> col:2 public
|-CXXConstructorDecl 0x55e5492f3170 <line:26:3, col:17> col:3 MarkIP6Header 'void ()'
|-CXXDestructorDecl 0x55e5492f3260 <line:27:3, col:18> col:3 ~MarkIP6Header 'void ()' noexcept-unevaluated 0x55e5492f3260
| `-Overrides: [ 0x55e5492da778 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55e5492f3390 <line:29:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55e5492dbbd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e5492f3cd8 <col:34, col:60>
|   `-ReturnStmt 0x55e5492f3cc8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e5492f3cb0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e5492f3c88 <col:43> 'const char [14]' lvalue "MarkIP6Header"
|-CXXMethodDecl 0x55e5492f3458 <line:30:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55e5492dbca0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e5492f3d38 <col:34, col:54>
|   `-ReturnStmt 0x55e5492f3d28 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e5492f3d10 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e5492f3cf0 <col:43> 'const char []' lvalue Var 0x55e5492dbf50 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55e5492f3730 <line:31:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e5492dd470 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e5492f35e0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55e5492f3658 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55e5492f3880 <line:33:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55e5492dadb8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55e5492f37f0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x55e5492f3958 <line:20:7> col:7 implicit MarkIP6Header 'void (const MarkIP6Header &)' inline default_delete noexcept-unevaluated 0x55e5492f3958
| `-ParmVarDecl 0x55e5492f3a68 <col:7> col:7 'const MarkIP6Header &'
`-CXXMethodDecl 0x55e5492f3b08 <col:7> col:7 implicit operator= 'MarkIP6Header &(const MarkIP6Header &)' inline default_delete noexcept-unevaluated 0x55e5492f3b08
  `-ParmVarDecl 0x55e5492f3c18 <col:7> col:7 'const MarkIP6Header &'

Layout: <CGRecordLayout
  LLVMType:%class.MarkIP6Header = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.MarkIP6Header = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5490ae340 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e5490ae458 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e5490ae4f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e5490ae558 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e5490ae5b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e5490ae668 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5490ae970 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e5490aea88 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e5490aeb30 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e5490aeb98 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e5490aec28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e5490b4cc0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e5490b50f8 <col:12>
|-CXXConstructorDecl 0x55e5490b4dc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e5490b4ed8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e5490aeb30 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e5490b7680 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e5490b7650 <col:12> 'const char *const' lvalue .data 0x55e5490aeb30
| |     `-DeclRefExpr 0x55e5490b7630 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e5490aeb98 'length' 'int'
| | `-ImplicitCastExpr 0x55e5490b7710 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e5490b76e0 <col:12> 'const int' lvalue .length 0x55e5490aeb98
| |     `-DeclRefExpr 0x55e5490b76c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e5490aec28 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e5490b77a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e5490b7770 <col:12> 'String::memo_t *const' lvalue .memo 0x55e5490aec28
| |     `-DeclRefExpr 0x55e5490b7750 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e5490b77f8 <col:12>
|-CXXConstructorDecl 0x55e5490b4f78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e5490b4f78
| `-ParmVarDecl 0x55e5490b5088 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e5490ba5e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e5490c5ff8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e5490c6108 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e5490c6620 <col:12>
|   |-BinaryOperator 0x55e5490c6438 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e5490c63f0 <col:12> 'const char *' lvalue ->data 0x55e5490aeb30
|   | | `-CXXThisExpr 0x55e5490c63e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e5490c6420 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e5490c63b0 <col:12> 'const char *const' lvalue .data 0x55e5490aeb30
|   |     `-DeclRefExpr 0x55e5490c6390 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e5490c6500 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e5490c64b8 <col:12> 'int' lvalue ->length 0x55e5490aeb98
|   | | `-CXXThisExpr 0x55e5490c64a8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e5490c64e8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e5490c6478 <col:12> 'const int' lvalue .length 0x55e5490aeb98
|   |     `-DeclRefExpr 0x55e5490c6458 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e5490c65c8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e5490c6580 <col:12> 'String::memo_t *' lvalue ->memo 0x55e5490aec28
|   | | `-CXXThisExpr 0x55e5490c6570 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e5490c65b0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e5490c6540 <col:12> 'String::memo_t *const' lvalue .memo 0x55e5490aec28
|   |     `-DeclRefExpr 0x55e5490c6520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e5490c6610 <col:12>
|     `-UnaryOperator 0x55e5490c65f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e5490c65e8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e5490c6178 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e5490c6178
  `-ParmVarDecl 0x55e5490c6288 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5490a58b0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e5490a59c8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e5490a5a58 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e5490a5a98 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e548d79fd0 'const char *'
|   `-QualType 0x55e548d79521 'const char' const
|     `-BuiltinType 0x55e548d79520 'char'
|-TypedefDecl 0x55e5490a5b20 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e5490a5af0 'String::const_iterator' sugar
|   |-Typedef 0x55e5490a5a98 'const_iterator'
|   `-PointerType 0x55e548d79fd0 'const char *'
|     `-QualType 0x55e548d79521 'const char' const
|       `-BuiltinType 0x55e548d79520 'char'
|-TypedefDecl 0x55e5490a5c90 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e5490a5c00 'int (String::*)() const'
|   |-RecordType 0x55e5490a5940 'String'
|   | `-CXXRecord 0x55e5490a58b0 'String'
|   `-ParenType 0x55e5490a5ba0 'int () const' sugar
|     `-FunctionProtoType 0x55e549079730 'int () const' const cdecl
|       `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5490a5cf8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e548ece310 'int64_t' sugar
|   |-Typedef 0x55e548de2390 'int64_t'
|   `-TypedefType 0x55e548dbb630 '__int64_t' sugar
|     |-Typedef 0x55e548dbb208 '__int64_t'
|     `-BuiltinType 0x55e548d795a0 'long'
|-TypedefDecl 0x55e5490a5d60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e548ece230 'uint64_t' sugar
|   |-Typedef 0x55e548de2530 'uint64_t'
|   `-TypedefType 0x55e548dbb6c0 '__uint64_t' sugar
|     |-Typedef 0x55e548dbb278 '__uint64_t'
|     `-BuiltinType 0x55e548d79640 'unsigned long'
|-TypedefDecl 0x55e5490a5df0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e5490a5dc0 'String::intmax_t' sugar
|   |-Typedef 0x55e5490a5cf8 'intmax_t'
|   `-TypedefType 0x55e548ece310 'int64_t' sugar
|     |-Typedef 0x55e548de2390 'int64_t'
|     `-TypedefType 0x55e548dbb630 '__int64_t' sugar
|       |-Typedef 0x55e548dbb208 '__int64_t'
|       `-BuiltinType 0x55e548d795a0 'long'
|-TypedefDecl 0x55e5490a5e80 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e5490a5e50 'String::uintmax_t' sugar
|   |-Typedef 0x55e5490a5d60 'uintmax_t'
|   `-TypedefType 0x55e548ece230 'uint64_t' sugar
|     |-Typedef 0x55e548de2530 'uint64_t'
|     `-TypedefType 0x55e548dbb6c0 '__uint64_t' sugar
|       |-Typedef 0x55e548dbb278 '__uint64_t'
|       `-BuiltinType 0x55e548d79640 'unsigned long'
|-CXXConstructorDecl 0x55e5490a5f40 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e5490a60e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e5490a6028 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e5490a6298 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e5490a61d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e5490a63f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e5490a6360 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e5490a6608 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e5490a64b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e5490a6538 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e5490a6828 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e5490a66d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e5490a6758 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e5490a6a48 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e5490a68f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e5490a6978 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e5490a6c68 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e5490a6b18 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e5490a6b98 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e5490a6df8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e5490a6d30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e5490a6f78 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e5490a6eb8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e5490a7108 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e5490a7040 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e5490a7260 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e5490a71d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e5490a73b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e5490a7328 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e5490a7510 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e5490a7480 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e5490a7698 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e5490a75d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e5490a7828 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e5490a7760 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e5490a79b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e5490a78f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e5490a7b48 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e5490a7a80 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e5490a7c40 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e5490a7d68 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e5490a7ee8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e5490a7e20 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e5490a8038 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e5490a7fa8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e5490a80f0 <col:63> "" ""
|-CXXMethodDecl 0x55e5490a8238 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e5490a8178 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e5490a8448 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e5490a82f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e5490a8378 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e5490a8668 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e5490a8510 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e5490a8590 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e5490a8948 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e5490a8728 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e5490a87a8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e5490b4790 <col:55> 'int' 10
| `-ParmVarDecl 0x55e5490a8820 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e5490b47b0 <col:76> 'bool' true
|-CXXMethodDecl 0x55e5490a8c28 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e5490a8a10 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e5490a8a90 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e5490b47c0 <col:56> 'int' 10
| `-ParmVarDecl 0x55e5490a8b08 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e5490b47e0 <col:77> 'bool' true
|-CXXMethodDecl 0x55e5490a8d30 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e5490a8df8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e5490a8ec0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e5490a8f60 <col:20>
| `-OptimizeNoneAttr 0x55e5490a8fb8 <col:30>
|-CXXConversionDecl 0x55e5490a90a8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e5490a9178 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e5490a9238 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e5490a9328 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e5490a93e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e5490a9568 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e5490a94a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e5490a96b8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e5490a9628 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e5490a97a8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e5490a9868 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e5490a9ab8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e5490a9920 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e5490a99a0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e5490a9d18 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e5490a9b80 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e5490a9c00 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e5490a9de8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5490a9ff8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e5490a9ea0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e5490a9f20 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e5490aa218 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e5490aa0c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e5490aa140 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e5490aa3a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e5490aa2e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e5490aa498 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e5490aa608 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e5490aa548 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e5490aa818 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e5490aa6c8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e5490aa748 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e5490aaa30 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e5490aa8d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e5490aa950 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e5490aabc0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e5490aaaf0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e5490aade0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e5490aac80 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e5490aad00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e5490aaf30 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e5490aaea0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e5490ab108 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e5490aaff0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e5490ab070 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e5490ab258 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e5490ab1c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e5490ab470 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e5490ab310 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e5490ab390 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e5490b47f0 <col:39> 'int' 0
|-CXXMethodDecl 0x55e5490ab690 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e5490ab530 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e5490ab5b0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e5490b4810 <col:48> 'int' 0
|-CXXMethodDecl 0x55e5490ab870 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e5490ab750 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e5490ab7d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e5490b4830 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e5490ab940 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e5490aba00 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e5490abac0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e5490abb80 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e5490abc40 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e5490abde8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e5490abcf0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e5490abf68 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e5490abea0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e5490ac140 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e5490ac028 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e5490ac2b8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e5490ac1f8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e5490ac400 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e5490ac370 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e5490ac550 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e5490ac4c0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e5490ac728 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e5490ac610 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e5490ac690 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e5490ac908 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e5490ac7f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e5490ac870 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e5490aca58 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e5490ac9c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e5490acc68 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e5490acb18 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e5490acb98 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e5490acdc8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e5490acd30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e5490acf20 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e5490ace88 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e5490acfc8 <col:57> "" ""
|-CXXMethodDecl 0x55e5490ad0d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e5490ad048 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e5490ad228 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e5490ad198 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e5490ad3a8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e5490ad2e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e5490ad470 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e5490ad530 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e5490ad5f0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e5490ad690 <col:49> "" ""
|-CXXMethodDecl 0x55e5490ad720 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e5490ad7e0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e5490ad8d0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e5490ad998 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e5490ada58 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e5490adb18 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e5490adc10 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e5490adcd8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e5490adda0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e5490adf78 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e5490ade58 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e5490aded8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e5490ae1a0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e5490ae040 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e5490ae0c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e5490ae2b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e5490ae318 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e5490ae340 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e5490ae458 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e5490ae4f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e5490ae558 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e5490ae5b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e5490ae668 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e5490ae6d0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e5490ae908 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e5490ae958 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5490ae8e8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e5490ae7f8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e5490ae7a0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e5490ae7e0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e5490ae7c0 <col:32> 'int' 8
|-CXXRecordDecl 0x55e5490ae970 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e5490aea88 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e5490aeb30 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e5490aeb98 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e5490aec28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e5490b4cc0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e5490b50f8 <col:12>
| |-CXXConstructorDecl 0x55e5490b4dc8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e5490b4ed8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e5490aeb30 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e5490b7680 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e5490b7650 <col:12> 'const char *const' lvalue .data 0x55e5490aeb30
| | |     `-DeclRefExpr 0x55e5490b7630 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e5490aeb98 'length' 'int'
| | | `-ImplicitCastExpr 0x55e5490b7710 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e5490b76e0 <col:12> 'const int' lvalue .length 0x55e5490aeb98
| | |     `-DeclRefExpr 0x55e5490b76c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e5490aec28 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e5490b77a0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e5490b7770 <col:12> 'String::memo_t *const' lvalue .memo 0x55e5490aec28
| | |     `-DeclRefExpr 0x55e5490b7750 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490b4ed8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e5490b77f8 <col:12>
| |-CXXConstructorDecl 0x55e5490b4f78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e5490b4f78
| | `-ParmVarDecl 0x55e5490b5088 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e5490ba5e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e5490c5ff8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e5490c6108 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e5490c6620 <col:12>
| |   |-BinaryOperator 0x55e5490c6438 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e5490c63f0 <col:12> 'const char *' lvalue ->data 0x55e5490aeb30
| |   | | `-CXXThisExpr 0x55e5490c63e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e5490c6420 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e5490c63b0 <col:12> 'const char *const' lvalue .data 0x55e5490aeb30
| |   |     `-DeclRefExpr 0x55e5490c6390 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e5490c6500 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e5490c64b8 <col:12> 'int' lvalue ->length 0x55e5490aeb98
| |   | | `-CXXThisExpr 0x55e5490c64a8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e5490c64e8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e5490c6478 <col:12> 'const int' lvalue .length 0x55e5490aeb98
| |   |     `-DeclRefExpr 0x55e5490c6458 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e5490c65c8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e5490c6580 <col:12> 'String::memo_t *' lvalue ->memo 0x55e5490aec28
| |   | | `-CXXThisExpr 0x55e5490c6570 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e5490c65b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e5490c6540 <col:12> 'String::memo_t *const' lvalue .memo 0x55e5490aec28
| |   |     `-DeclRefExpr 0x55e5490c6520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e5490c6108 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e5490c6610 <col:12>
| |     `-UnaryOperator 0x55e5490c65f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e5490c65e8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e5490c6178 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e5490c6178
|   `-ParmVarDecl 0x55e5490c6288 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e5490aeca0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e5490aeee8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e5490aed08 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e5490aed88 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e5490aee00 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e5490b4c80 <col:79, line:261:5>
|   |-BinaryOperator 0x55e5490b48f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e5490b4890 <col:2, col:5> 'const char *' lvalue .data 0x55e5490aeb30
|   | | `-MemberExpr 0x55e5490b4860 <col:2> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|   | |   `-CXXThisExpr 0x55e5490b4850 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e5490b48e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e5490b48c0 <col:12> 'const char *' lvalue ParmVar 0x55e5490aed08 'data' 'const char *'
|   |-BinaryOperator 0x55e5490b49c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e5490b4958 <col:2, col:5> 'int' lvalue .length 0x55e5490aeb98
|   | | `-MemberExpr 0x55e5490b4928 <col:2> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|   | |   `-CXXThisExpr 0x55e5490b4918 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e5490b49a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e5490b4988 <col:14> 'int' lvalue ParmVar 0x55e5490aed88 'length' 'int'
|   `-IfStmt 0x55e5490b4c68 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e5490b4ae0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e5490b4ac8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e5490b4aa8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e5490b4a88 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e5490b4a20 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|     |       | `-MemberExpr 0x55e5490b49f0 <col:7> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|     |       |   `-CXXThisExpr 0x55e5490b49e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e5490b4a70 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e5490b4a50 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e5490aee00 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e5490b4c40 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e5490b4c28 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e5490b4b30 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e54909d918 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e5490b4b98 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e5490ae4f8
|         `-ImplicitCastExpr 0x55e5490b4b80 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e5490b4b60 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e5490aee00 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e5490af198 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e5490aefb8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e5490af038 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e5490af0b0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e5490aeca0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e5490b5108 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e5490b5298 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e5490b5200 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e5490b5170 <col:2> '<bound member function type>' ->assign_memo 0x55e5490aeee8
|     | `-ImplicitCastExpr 0x55e5490b5238 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e5490b5160 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e5490b5250 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e5490b51a0 <col:14> 'const char *' lvalue ParmVar 0x55e5490aefb8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e5490b5268 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e5490b51c0 <col:20> 'int' lvalue ParmVar 0x55e5490af038 'length' 'int'
|     `-ImplicitCastExpr 0x55e5490b5280 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e5490b51e0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e5490af0b0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e5490af328 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e5490af268 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e5490b54f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e5490b5470 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e5490b52c0 <col:2> '<bound member function type>' ->assign_memo 0x55e5490aeee8
|     | `-CXXThisExpr 0x55e5490b52b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e5490b54a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e5490b5340 <col:14, col:19> 'const char *' lvalue .data 0x55e5490aeb30
|     |   `-MemberExpr 0x55e5490b5310 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e5490aeca0
|     |     `-DeclRefExpr 0x55e5490b52f0 <col:14> 'const String' lvalue ParmVar 0x55e5490af268 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e5490b54c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e5490b53c0 <col:25, col:30> 'int' lvalue .length 0x55e5490aeb98
|     |   `-MemberExpr 0x55e5490b5390 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e5490aeca0
|     |     `-DeclRefExpr 0x55e5490b5370 <col:25> 'const String' lvalue ParmVar 0x55e5490af268 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e5490b54d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e5490b5440 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|         `-MemberExpr 0x55e5490b5410 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e5490aeca0
|           `-DeclRefExpr 0x55e5490b53f0 <col:38> 'const String' lvalue ParmVar 0x55e5490af268 'x' 'const String &'
|-CXXMethodDecl 0x55e5490af3f0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e5490b5eb0 <col:31, line:278:5>
|   `-IfStmt 0x55e5490b5e98 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e5490b5590 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e5490b5578 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e5490b5548 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|     |     `-MemberExpr 0x55e5490b5518 <col:6> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|     |       `-CXXThisExpr 0x55e5490b5508 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e5490b5e70 <col:15, line:277:2>
|       |-ParenExpr 0x55e5490b5a40 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e5490b5a10 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e5490b56a0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e5490b5688 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e5490b5670 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e5490b5630 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e5490ae4f8
|       |   |       `-ImplicitCastExpr 0x55e5490b5618 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e5490b55e8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|       |   |           `-MemberExpr 0x55e5490b55b8 <col:27> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|       |   |             `-CXXThisExpr 0x55e5490b55a8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e5490b5700 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e5490b56e0 <col:54> 'int' 0
|       |   `-CallExpr 0x55e5490b5970 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e5490b5958 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e5490b58d8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e5490b59b0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e5490b57e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e5490b59c8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e5490b5818 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e5490b59e0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e5490b5850 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e5490b59f8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e5490b58c0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e5490b58a8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e5490b5870 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e5490b5d90 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e5490b5c50 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e5490b5c38 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e5490b5bb0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e54909ed60 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e5490b5b80 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e5490ae4f8
|       | |   `-ImplicitCastExpr 0x55e5490b5b68 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e5490b5b38 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|       | |       `-MemberExpr 0x55e5490b5b08 <col:40> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|       | |         `-CXXThisExpr 0x55e5490b5af8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e5490b5d50 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e5490b5d38 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e5490b5c78 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e5490b3bd0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e5490b5d78 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e5490b5cd8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|       |       `-MemberExpr 0x55e5490b5ca8 <col:15> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|       |         `-CXXThisExpr 0x55e5490b5c98 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e5490b5e50 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e5490b5de8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e5490aec28
|         | `-MemberExpr 0x55e5490b5db8 <col:6> 'String::rep_t' lvalue ->_r 0x55e5490aeca0
|         |   `-CXXThisExpr 0x55e5490b5da8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e5490b5e38 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e5490b5e18 <col:16> 'int' 0
|-CXXMethodDecl 0x55e5490af688 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e5490af4a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e5490af528 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e5490af5a0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e5490af760 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e5490af9b0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e5490af818 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e5490af898 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e5490af910 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e5490afb98 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e5490afa80 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e5490afb00 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e5490afc98 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e5490b5f88 <col:41, line:286:5>
|   `-ReturnStmt 0x55e5490b5f78 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e5490b5f48 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e5490b5f10 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e5490b5ef8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e5490b5ed8 <col:46> 'int' 1
|-CXXMethodDecl 0x55e5490aff38 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e5490afd50 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e5490afdd0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e5490afe50 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e5490b3bd0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e5490b0000 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e5490b3ca0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e5490b3e70 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e5490b3d58 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e5490b3dd8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e5490b3f30 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e5490b3ff8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e5490b40f8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e5490b4170 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e5490b41e8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e5490b4250 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e5490b4350 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e5490b43a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5490b4330 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e5490b4310 <col:22> 'int' 14
|-CXXMethodDecl 0x55e5490b45b8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e5490b43d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e5490b4450 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e5490b44d0 <col:43> col:46 'int'
|-FriendDecl 0x55e5490b46c0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e5490b4750 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e549176040 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e549176218 prev 0x55e549176040 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e5491762a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e5491762d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549177c30 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e549177be0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e549177bc0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e5491764e8 'type'
|     `-SubstTemplateTypeParmType 0x55e5491764b0 'String' sugar
|       |-TemplateTypeParmType 0x55e549069150 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549069100 'T'
|       `-RecordType 0x55e5490a5940 'String'
|         `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549177ce8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e549177cb0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e549177c90 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e549177c30 'type'
|     `-ElaboratedType 0x55e549177be0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e549177bc0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e5491764e8 'type'
|         `-SubstTemplateTypeParmType 0x55e5491764b0 'String' sugar
|           |-TemplateTypeParmType 0x55e549069150 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e549069100 'T'
|           `-RecordType 0x55e5490a5940 'String'
|             `-CXXRecord 0x55e5490a58b0 'String'
|-CXXMethodDecl 0x55e549177e68 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e549177d78 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e549177f58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e549178038 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e549178038
|-CXXMethodDecl 0x55e549178308 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e549178210 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e549178548 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e5491783c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e549178438 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549178718 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e549178608 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e549178680 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549178878 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e549178948 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e549178b98 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e549178a08 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e549178a80 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549324d58 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e549178c68 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e549178ce0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549324f18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e549324e28 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e5493250d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e549324fe0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549325190 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e549325240 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e549325478 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e5493252f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e549325368 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e549325718 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e549325620 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e5493257e0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e549325830 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e549325880 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e5492dd0e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e549174aa8 prev 0x55e5492dd0e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e549175fb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e549175f60 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e549175f40 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e549175df0 'type'
|     `-SubstTemplateTypeParmType 0x55e549175c80 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e54903ef00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e54903eea8 'F'
|       `-RecordType 0x55e5491758e0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e549175800 'typed_array_memory'
|-FieldDecl 0x55e5493258d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e549325920 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e549325958 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|   |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e549076418 'T'
|   `-RecordType 0x55e5490a5940 'String'
|     `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e5493259e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e5493259b0 'String &'
|   `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-RecordType 0x55e5490a5940 'String'
|       `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549325a78 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e549325a40 'const String &'
|   `-QualType 0x55e549174b41 'const String' const
|     `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-RecordType 0x55e5490a5940 'String'
|         `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549325b08 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e549325ad0 'String *'
|   `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-RecordType 0x55e5490a5940 'String'
|       `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549325b98 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e549325b60 'const String *'
|   `-QualType 0x55e549174b41 'const String' const
|     `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-RecordType 0x55e5490a5940 'String'
|         `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e5493267f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e5493267a0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e549326780 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e5493266b8 'type'
|     `-LValueReferenceType 0x55e549326680 'const String &'
|       `-QualType 0x55e549326421 'const String' const
|         `-SubstTemplateTypeParmType 0x55e549326420 'String' sugar
|           |-TemplateTypeParmType 0x55e549048e50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e549048df8 'T'
|           `-RecordType 0x55e5490a5940 'String'
|             `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549326858 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e549325a40 'const String &'
|   `-QualType 0x55e549174b41 'const String' const
|     `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-RecordType 0x55e5490a5940 'String'
|         `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e5493268b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549326918 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e549325ad0 'String *'
|   `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-RecordType 0x55e5490a5940 'String'
|       `-CXXRecord 0x55e5490a58b0 'String'
|-TypedefDecl 0x55e549326980 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e549325b60 'const String *'
|   `-QualType 0x55e549174b41 'const String' const
|     `-SubstTemplateTypeParmType 0x55e549174b40 'String' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-RecordType 0x55e5490a5940 'String'
|         `-CXXRecord 0x55e5490a58b0 'String'
|-EnumDecl 0x55e5493269d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e549326ad0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e549326ab0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e549077af8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e549077ad0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e549077ab0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e549326b58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e549326de8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e549326c10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e549326cb0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e549327078 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e549326f60 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e549327338 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e549327220 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e549327650 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e549327530 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e549327960 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e549327840 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e549327c50 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e549327a98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e549327b10 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e549327d78 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e549327e28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549327e80 <col:30> Inherited
|-CXXMethodDecl 0x55e549327ec8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e549327f78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549327fd0 <col:30> Inherited
|-CXXMethodDecl 0x55e549328098 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e549328148 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e5493281a0 <col:30> Inherited
|-CXXMethodDecl 0x55e5493281e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e549328298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e5493282f0 <col:30> Inherited
|-CXXMethodDecl 0x55e549328338 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e5493283e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549328440 <col:30> Inherited
|-CXXMethodDecl 0x55e549328488 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e549328538 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549328590 <col:30> Inherited
|-CXXMethodDecl 0x55e5493285b8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e549328668 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e549328718 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e5493288d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e5493287c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e549328840 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e549328a28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e549328998 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549328bd8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e549328ae0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e549328c90 <col:20>
| `-OptimizeNoneAttr 0x55e549328ce8 <col:30>
|-CXXMethodDecl 0x55e549328e08 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e549328d10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e549328ec0 <col:20>
| `-OptimizeNoneAttr 0x55e549328f18 <col:30>
|-CXXMethodDecl 0x55e549328fd0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e549328f40 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549329118 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e549329088 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549329248 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e549329348 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e549329418 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e5493294e8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e549329628 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e549329598 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549329770 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e5493296e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e5493298b8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e549329828 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e549329970 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e549329a70 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e5493299e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e549329b28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e549329be8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e549329ce8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e549329e68 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e549329da8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e54932a628 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e549329f20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e54932a588 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e54932a488 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e54932a708 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e54932a858 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e54932a7c8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e54932a910 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e54932ab58 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e54932a9d0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e54932aa48 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e54932ace8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e54932ac28 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e54932aef8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e54932adb0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e54932ae28 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e54932afb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e54932b218 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e54932b120 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e54932b2e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e54932b2e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e54925a888 prev 0x55e54929fb88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e54925a980 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e54925aa10 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e54925ab48 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e54925aa48 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e54925bf70 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e54925bf50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e54925bae8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e54925c000 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e54925bfc0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e54925aa48 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e54925bb50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e54925c080 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e54925c040 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e54925bbb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e54925c0c0 <col:54> 'bool' false
| `-CompoundStmt 0x55e54925c1c8 <col:61, line:38:5>
|   `-BinaryOperator 0x55e54925c1a8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e54925c140 <col:9> 'const Element *' lvalue ->_context 0x55e54925ba88
|     | `-CXXThisExpr 0x55e54925c130 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e54925c190 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e54925c170 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e54925ad58 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e54925ac08 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e54925ac80 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e54925bfa8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e54925bf88 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e54925ba88 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e54925c220 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e54925c1e0 <col:20> 'const Element *' lvalue ParmVar 0x55e54925ac08 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e54925bae8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e54925c2a0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e54925c260 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e54925ac80 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e54925bb50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e54925c320 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e54925c2e0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e54925bbb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e54925c360 <col:73> 'bool' false
| `-CompoundStmt 0x55e54925c3d8 <col:80, line:46:5>
|-CXXMethodDecl 0x55e54925ae88 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e54925c450 <col:36, line:51:5>
|   `-ReturnStmt 0x55e54925c440 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e54925c428 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e54925c3f8 <col:16> 'const Element *const' lvalue ->_context 0x55e54925ba88
|         `-CXXThisExpr 0x55e54925c3e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e54925af78 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e54925c4d0 <col:32, line:57:5>
|   `-ReturnStmt 0x55e54925c4c0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e54925c4a8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e54925c478 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e54925bae8
|         `-CXXThisExpr 0x55e54925c468 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e54925b038 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e54925b1c0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e54925b0f0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e54925b310 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e54925b280 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e54925b460 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e54925b3d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e54925b668 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e54925b518 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e54925b590 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e54925b998 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e54925b728 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e54925b7a8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e54925b870 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e54925ba50 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e54925ba88 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e54925bae8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e54925bb50 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e54925bbb0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e54925bc00 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e54925bc00
| `-ParmVarDecl 0x55e54925bd18 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e54925bdb8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e54925bdb8
| `-ParmVarDecl 0x55e54925bec8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e5493ac318 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e549368210 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e5493683e8 prev 0x55e549368210 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e549368478 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e5493684a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e54936a070 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e54936a020 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e549368950 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e549368850 'type'
|     `-TemplateSpecializationType 0x55e5493687e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e5493686c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e5493686a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e549368680 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e5493687c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e5493686e0 'char_array'
|-TypedefDecl 0x55e54936a128 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e54936a0f0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e54936a0d0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e54936a070 'type'
|     `-ElaboratedType 0x55e54936a020 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e549368950 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e549368850 'type'
|         `-TemplateSpecializationType 0x55e5493687e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e5493686c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e5493686a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e549368680 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e5493687c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e5493686e0 'char_array'
|-CXXMethodDecl 0x55e54936a2a8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e54936a1b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e54936a398 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e54936a478 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e54936a748 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e54936a650 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e54936a988 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e54936a800 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e54936a878 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936ab58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e54936aa48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e54936aac0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936acb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e54936ad88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e54936afd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e54936ae48 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e54936aec0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936b238 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e54936b0a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e54936b120 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936b3f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e54936b308 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936b5b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e54936b4c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936b670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e54936b720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e54936b958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e54936b7d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e54936b848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e54936bbf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e54936bb00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e54936bcc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e54936bd10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e549372180 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e549366c18 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e549366e28 prev 0x55e549366c18 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e549368180 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e549368130 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e549368110 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e549367fc0 'type'
|     `-SubstTemplateTypeParmType 0x55e549367de0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e54903e780 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e54903e728 'T'
|       `-RecordType 0x55e549367930 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e549367848 'sized_array_memory'
|-FieldDecl 0x55e5493721d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e549372220 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e549372258 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|   |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e549076418 'T'
|   `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5493722e8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e5493722b0 'int &'
|   `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5493723a8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e549372370 'const int &'
|   `-QualType 0x55e549366ec1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549372438 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e549372400 'int *'
|   `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5493724c8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e549372490 'const int *'
|   `-QualType 0x55e549366ec1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5493730b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e549373060 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e549373040 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e549372fd0 'type'
|     `-SubstTemplateTypeParmType 0x55e549372d90 'int' sugar
|       |-TemplateTypeParmType 0x55e549049580 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549049530 'T'
|       `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549373118 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e549372370 'const int &'
|   `-QualType 0x55e549366ec1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549373170 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e5493731d8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e549372400 'int *'
|   `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|     |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e549076418 'T'
|     `-BuiltinType 0x55e548d79580 'int'
|-TypedefDecl 0x55e549373240 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e549372490 'const int *'
|   `-QualType 0x55e549366ec1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e549366ec0 'int' sugar
|       |-TemplateTypeParmType 0x55e549076470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e549076418 'T'
|       `-BuiltinType 0x55e548d79580 'int'
|-EnumDecl 0x55e549373298 <line:134:5> col:5
| `-EnumConstantDecl 0x55e549373390 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e549373370 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e549077af8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e549077ad0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e549077ab0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e549373418 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e549373668 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e5493734d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e549373570 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e549373928 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e549373810 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e549373be8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e549373ad0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e549373f30 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e549373e10 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e549374240 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e549374120 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e549374530 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e549374378 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e5493743f0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e549374658 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e549374738 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549374790 <col:30> Inherited
|-CXXMethodDecl 0x55e5493747d8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e549374888 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e5493748e0 <col:30> Inherited
|-CXXMethodDecl 0x55e5493749a8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e549374a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549374ab0 <col:30> Inherited
|-CXXMethodDecl 0x55e549374af8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e549374ba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549374c00 <col:30> Inherited
|-CXXMethodDecl 0x55e549374c48 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e549374cf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549374d50 <col:30> Inherited
|-CXXMethodDecl 0x55e549374d98 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e549374e48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e549374ea0 <col:30> Inherited
|-CXXMethodDecl 0x55e549374ec8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e549374f78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e549375028 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e5493751e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e5493750d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e549375150 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e549375338 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e5493752a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e5493754e8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e5493753f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e5493755a0 <col:20>
| `-OptimizeNoneAttr 0x55e5493755f8 <col:30>
|-CXXMethodDecl 0x55e549375718 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e549375620 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e5493757d0 <col:20>
| `-OptimizeNoneAttr 0x55e549375828 <col:30>
|-CXXMethodDecl 0x55e5493758e0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e549375850 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549375a28 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e549375998 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e549375b58 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e549375c88 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e549375d58 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e549375e28 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e549375f68 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e549375ed8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e5493760b0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e549376020 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e5493761f8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e549376168 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e5493762b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e5493763b0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e549376320 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e549376468 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e549376528 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e549376628 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e5493767a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e5493766e8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e549376f68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e549376860 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e549376ec8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e549376dc8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e549377048 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e549377198 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e549377108 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e549377250 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e549377498 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e549377310 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e549377388 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e549377658 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e549377568 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e5493778a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e549377720 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e549377798 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e549377968 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e549377bc8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e549377ad0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e549377c98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e549364d88 prev 0x55e5492613e8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e549364e80 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e549364f70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e549389a50 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e549365060 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e549389a60 <col:25, line:830:9>
|-CXXMethodDecl 0x55e549365160 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e549365210 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e5493652b8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e5493652b8
| `-ParmVarDecl 0x55e5493653c8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e549365b88 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e549365b88
  `-ParmVarDecl 0x55e549365c98 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492611f8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e549261358 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e5492613e8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e5492614a0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e5492615a8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e5492614d8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e549379258 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e549379238 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e549346f78 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e549346df0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e549346e68 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e549379290 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e549379270 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e549347150 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e549347040 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e5493470b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e5493792c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e5493792a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e549347508 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e5493472f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e549347368 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e5493473e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e549379300 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e5493792e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e5493476c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e549347608 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e5493477c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e5493479a8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e5493478b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e549347a98 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e5493796b0 <col:24, line:291:5>
|   `-ReturnStmt 0x55e5493796a0 <line:290:9, col:79>
|     `-BinaryOperator 0x55e549379680 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e549379558 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e5493794b0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e549379490 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e549379388 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e549379370 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e549379358 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e549379328 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e549366bb0
|       | |   |       `-CXXThisExpr 0x55e549379318 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e549379478 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e549379460 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e549379428 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e5493793f8 <col:28, col:35> '<bound member function type>' ->size 0x55e5493285b8
|       | |           `-ImplicitCastExpr 0x55e549379448 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e5493793e0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e5493793b0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e549366bb0
|       | |                 `-CXXThisExpr 0x55e5493793a0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e549379540 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e549379528 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e549379510 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e5493794e0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e549377de0
|       |         `-CXXThisExpr 0x55e5493794d0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e549379660 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e549379648 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e549379630 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e5493795f0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e5493795d8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e549379588 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e549377e90
|         |     |   `-CXXThisExpr 0x55e549379578 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e5493795b8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e549379610 <col:79> 'int' 0
|-CXXMethodDecl 0x55e549347b58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e549379888 <col:32, line:296:5>
|   `-ReturnStmt 0x55e549379878 <line:295:9, col:49>
|     `-BinaryOperator 0x55e549379858 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e549379738 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e549379720 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e549379708 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e5493796d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e549377de0
|       |       `-CXXThisExpr 0x55e5493796c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e549379838 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e549379820 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e549379808 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e5493797c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e5493797b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e549379760 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e549377e90
|         |     |   `-CXXThisExpr 0x55e549379750 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e549379790 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e5493797e8 <col:49> 'int' 0
|-CXXMethodDecl 0x55e549347c48 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e549379a98 <col:19, line:306:5>
|   |-IfStmt 0x55e5493799b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e5493798f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e5493798e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e5493798b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e549366bb0
|   | |     `-CXXThisExpr 0x55e5493798a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e549379998 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e549379968 <col:13, col:20> '<bound member function type>' ->clear 0x55e54932afb8
|   |     `-ImplicitCastExpr 0x55e549379950 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e549379920 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e549366bb0
|   |         `-CXXThisExpr 0x55e549379910 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e549379a40 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e549379a10 <col:9, col:16> '<bound member function type>' .clear 0x55e549377968
|   |   `-MemberExpr 0x55e5493799e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e549377d80
|   |     `-CXXThisExpr 0x55e5493799d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e549379a88 <line:305:9, col:17>
|     `-UnaryOperator 0x55e549379a70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e549379a60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e549347ec8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e549347dd0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e549348048 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e549347f80 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e5493483c8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e5493480f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e549348328 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e549348198 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e549348210 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e549379db8 <col:67, line:327:5>
|     |-WhileStmt 0x55e549379d68 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e549379b80 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e549379b00 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e549298058 0x55e5490e1638 0x55e5490e1310 0x55e5490d2af0 0x55e5490d27a0 0x55e5490d2090 0x55e5490a4a00 0x55e549030ec0
|     | | |-DeclRefExpr 0x55e549379ac0 <col:16> 'Iter' lvalue ParmVar 0x55e549348198 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e549379ae0 <col:25> 'Iter' lvalue ParmVar 0x55e549348210 'end' 'Iter'
|     | `-CompoundStmt 0x55e549379d48 <col:30, line:325:9>
|     |   |-CallExpr 0x55e549379ce8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e549379bc8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e549379cb8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e549379c48 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|     |   |   `-DeclRefExpr 0x55e549379c28 <col:24> 'Iter' lvalue ParmVar 0x55e549348198 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e549379d30 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e549379d10 <col:15> 'Iter' lvalue ParmVar 0x55e549348198 'begin' 'Iter'
|     `-ReturnStmt 0x55e549379da8 <line:326:9, col:17>
|       `-UnaryOperator 0x55e549379d90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e549379d80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e5493484d0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e549348440 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e549348618 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e549348588 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e5493486e0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e549379e98 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e549379e38 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e549379de8 <col:9> '<bound member function type>' ->reset_from 0x55e549378208
|   | | `-CXXThisExpr 0x55e549379dd8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e549379e18 <col:20> 'int' 0
|   `-ReturnStmt 0x55e549379e88 <line:352:9, col:17>
|     `-UnaryOperator 0x55e549379e70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e549379e60 <col:17> 'Args *' this
|-VarDecl 0x55e549348798 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e549348800 <col:38> 'int' 1
|-VarDecl 0x55e549348890 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e5493488f8 <col:39> 'int' 2
|-VarDecl 0x55e549348988 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e5493489f0 <col:39> 'int' 4
|-VarDecl 0x55e549348a80 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e549348ae8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e549348e68 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e549348b60 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549348dc8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e549348c10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549348cb8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e549379ff0 <col:43, line:371:5>
|     `-ReturnStmt 0x55e549379fe0 <line:370:9, col:34>
|       `-CallExpr 0x55e549379fa8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e549379ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e549379f48 <col:21> 'const char *' lvalue ParmVar 0x55e549348c10 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e549379f68 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e549379f88 <col:33> 'T' lvalue ParmVar 0x55e549348cb8 'x' 'T &'
|-FunctionTemplateDecl 0x55e549349198 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e549348ed0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e5493490f8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e549348f80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549349028 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e54937a140 <col:45, line:375:5>
|     `-ReturnStmt 0x55e54937a130 <line:374:9, col:42>
|       `-CallExpr 0x55e54937a0f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937a018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937a098 <col:21> 'const char *' lvalue ParmVar 0x55e549348f80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937a0b8 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e54937a0d8 <col:41> 'T' lvalue ParmVar 0x55e549349028 'x' 'T &'
|-FunctionTemplateDecl 0x55e5493494c8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e549349200 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e549349428 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e5493492b0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e549349358 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55e54937bbc8 <col:45, line:379:5>
| |   `-ReturnStmt 0x55e54937bbb8 <line:378:9, col:43>
| |     `-CallExpr 0x55e54937bb80 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e54937baa0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e54937bb20 <col:21> 'const char *' lvalue ParmVar 0x55e5493492b0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55e54937bb40 <col:30> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
| |       `-DeclRefExpr 0x55e54937bb60 <col:42> 'T' lvalue ParmVar 0x55e549349358 'x' 'T &'
| `-CXXMethodDecl 0x55e5493ac7a8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e5493ac5c8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55e5493ac698 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55e5493497f8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e549349530 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549349758 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e5493495e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549349688 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55e54937bdc8 <col:46, line:383:5>
|     `-ReturnStmt 0x55e54937bdb8 <line:382:9, col:55>
|       `-CallExpr 0x55e54937bd80 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937bbf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937bc70 <col:21> 'const char *' lvalue ParmVar 0x55e5493495e0 'keyword' 'const char *'
|         |-BinaryOperator 0x55e54937bd40 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e54937bcf0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e54937bcd0 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e54937bd28 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e54937bd08 <col:42> 'const int' lvalue Var 0x55e549348890 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e54937bd60 <col:54> 'T' lvalue ParmVar 0x55e549349688 'x' 'T &'
|-FunctionTemplateDecl 0x55e549349bf8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e549349860 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549349b58 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e549349910 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549349990 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e549349a38 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e54937bf08 <col:54, line:388:5>
|     |-CallExpr 0x55e54937be90 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937bde0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e54937be20 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e54937be30 <col:30> 'const char *' lvalue ParmVar 0x55e549349910 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937be50 <col:39> 'int' lvalue ParmVar 0x55e549349990 'flags' 'int'
|     | `-DeclRefExpr 0x55e54937be70 <col:46> 'T' lvalue ParmVar 0x55e549349a38 'x' 'T &'
|     `-ReturnStmt 0x55e54937bef8 <line:387:9, col:17>
|       `-UnaryOperator 0x55e54937bee0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937bed0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e54934a0a8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e549349c68 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e549349ce8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e54934a008 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e549349da8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549349e48 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e549349ee8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937c078 <col:74, line:403:5>
|     `-ReturnStmt 0x55e54937c068 <line:402:9, col:56>
|       `-CallExpr 0x55e54937c028 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937bf38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937bfa8 <col:28> 'const char *' lvalue ParmVar 0x55e549349da8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937bfc8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e54937bfe8 <col:40> 'T' lvalue ParmVar 0x55e549349e48 'x' 'T &'
|         `-DeclRefExpr 0x55e54937c008 <col:43> 'const V' lvalue ParmVar 0x55e549349ee8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e54934a518 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e54934a118 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e54934a198 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e54934a478 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e54934a258 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934a2f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e54934a398 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937c1e0 <col:76, line:407:5>
|     `-ReturnStmt 0x55e54937c1d0 <line:406:9, col:65>
|       `-CallExpr 0x55e54937c190 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937c0a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937c110 <col:28> 'const char *' lvalue ParmVar 0x55e54934a258 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937c130 <col:37> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
|         |-DeclRefExpr 0x55e54937c150 <col:49> 'T' lvalue ParmVar 0x55e54934a2f8 'x' 'T &'
|         `-DeclRefExpr 0x55e54937c170 <col:52> 'const V' lvalue ParmVar 0x55e54934a398 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e54934aa68 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e54934a588 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e54934a608 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e54934a9c8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e54934a6c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934a748 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e54934a7e8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e54934a888 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937c348 <col:85, line:412:5>
|     |-CallExpr 0x55e54937c2c8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937c1f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e54937c238 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e54937c248 <col:37> 'const char *' lvalue ParmVar 0x55e54934a6c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937c268 <col:46> 'int' lvalue ParmVar 0x55e54934a748 'flags' 'int'
|     | |-DeclRefExpr 0x55e54937c288 <col:53> 'T' lvalue ParmVar 0x55e54934a7e8 'x' 'T &'
|     | `-DeclRefExpr 0x55e54937c2a8 <col:56> 'const V' lvalue ParmVar 0x55e54934a888 'default_value' 'const V &'
|     `-ReturnStmt 0x55e54937c338 <line:411:9, col:17>
|       `-UnaryOperator 0x55e54937c320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937c310 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e54934aef8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e54934aae0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934ab58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54934ae58 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e54934ac18 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934ac90 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934ad38 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e54937c4c8 <col:53, line:425:5>
|     `-ReturnStmt 0x55e54937c4b8 <line:424:9, col:42>
|       `-CallExpr 0x55e54937c478 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937c378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937c3f8 <col:21> 'const char *' lvalue ParmVar 0x55e54934ac18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937c418 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e54937c438 <col:33> 'P' lvalue ParmVar 0x55e54934ac90 'parser' 'P'
|         `-DeclRefExpr 0x55e54937c458 <col:41> 'T' lvalue ParmVar 0x55e54934ad38 'x' 'T &'
|-FunctionTemplateDecl 0x55e54934b348 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e54934af68 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934afe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54934b2a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e54934b0a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934b120 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934b1c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e54937c640 <col:55, line:429:5>
|     `-ReturnStmt 0x55e54937c630 <line:428:9, col:50>
|       `-CallExpr 0x55e54937c5f0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937c4f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937c570 <col:21> 'const char *' lvalue ParmVar 0x55e54934b0a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937c590 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e54937c5b0 <col:41> 'P' lvalue ParmVar 0x55e54934b120 'parser' 'P'
|         `-DeclRefExpr 0x55e54937c5d0 <col:49> 'T' lvalue ParmVar 0x55e54934b1c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e54934b798 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e54934b3b8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934b438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54934b6f8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e54934b4f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934b570 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934b618 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e54937c7b8 <col:55, line:433:5>
|     `-ReturnStmt 0x55e54937c7a8 <line:432:9, col:51>
|       `-CallExpr 0x55e54937c768 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937c668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937c6e8 <col:21> 'const char *' lvalue ParmVar 0x55e54934b4f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937c708 <col:30> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
|         |-DeclRefExpr 0x55e54937c728 <col:42> 'P' lvalue ParmVar 0x55e54934b570 'parser' 'P'
|         `-DeclRefExpr 0x55e54937c748 <col:50> 'T' lvalue ParmVar 0x55e54934b618 'x' 'T &'
|-FunctionTemplateDecl 0x55e54934bbe8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e54934b808 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934b888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54934bb48 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e54934b948 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934b9c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934ba68 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e54937c9e0 <col:56, line:437:5>
|     `-ReturnStmt 0x55e54937c9d0 <line:436:9, col:63>
|       `-CallExpr 0x55e54937c990 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937c7e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937c860 <col:21> 'const char *' lvalue ParmVar 0x55e54934b948 'keyword' 'const char *'
|         |-BinaryOperator 0x55e54937c930 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e54937c8e0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e54937c8c0 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e54937c918 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e54937c8f8 <col:42> 'const int' lvalue Var 0x55e549348890 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e54937c950 <col:54> 'P' lvalue ParmVar 0x55e54934b9c0 'parser' 'P'
|         `-DeclRefExpr 0x55e54937c970 <col:62> 'T' lvalue ParmVar 0x55e54934ba68 'x' 'T &'
|-FunctionTemplateDecl 0x55e54934c118 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e54934bc58 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934bcd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54934c078 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e54934bd98 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934be18 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e54934be90 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934bf38 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e54937cb48 <col:64, line:442:5>
|     |-CallExpr 0x55e54937cac8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937c9f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e54937ca38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e54937ca48 <col:30> 'const char *' lvalue ParmVar 0x55e54934bd98 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937ca68 <col:39> 'int' lvalue ParmVar 0x55e54934be18 'flags' 'int'
|     | |-DeclRefExpr 0x55e54937ca88 <col:46> 'P' lvalue ParmVar 0x55e54934be90 'parser' 'P'
|     | `-DeclRefExpr 0x55e54937caa8 <col:54> 'T' lvalue ParmVar 0x55e54934bf38 'x' 'T &'
|     `-ReturnStmt 0x55e54937cb38 <line:441:9, col:17>
|       `-UnaryOperator 0x55e54937cb20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937cb10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e54934c718 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e54934c190 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934c208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e54934c288 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e54934c678 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e54934c350 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934c3c8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934c468 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e54934c538 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937cce0 <col:84, line:458:5>
|     `-ReturnStmt 0x55e54937ccd0 <line:457:9, col:64>
|       `-CallExpr 0x55e54937cc88 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937cb78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937cbe8 <col:28> 'const char *' lvalue ParmVar 0x55e54934c350 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937cc08 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e54937cc28 <col:40> 'P' lvalue ParmVar 0x55e54934c3c8 'parser' 'P'
|         |-DeclRefExpr 0x55e54937cc48 <col:48> 'T' lvalue ParmVar 0x55e54934c468 'x' 'T &'
|         `-DeclRefExpr 0x55e54937cc68 <col:51> 'const V' lvalue ParmVar 0x55e54934c538 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e54934cc98 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e54934c790 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934c808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e54934c888 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e54934cbf8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e54934c950 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934c9c8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934ca68 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e54934cb08 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937ce70 <col:86, line:462:5>
|     `-ReturnStmt 0x55e54937ce60 <line:461:9, col:73>
|       `-CallExpr 0x55e54937ce18 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937cd08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937cd78 <col:28> 'const char *' lvalue ParmVar 0x55e54934c950 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937cd98 <col:37> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
|         |-DeclRefExpr 0x55e54937cdb8 <col:49> 'P' lvalue ParmVar 0x55e54934c9c8 'parser' 'P'
|         |-DeclRefExpr 0x55e54937cdd8 <col:57> 'T' lvalue ParmVar 0x55e54934ca68 'x' 'T &'
|         `-DeclRefExpr 0x55e54937cdf8 <col:60> 'const V' lvalue ParmVar 0x55e54934cb08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e54934d2f8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e54934cd10 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934cd88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e54934ce08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e54934d258 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e54934ced0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934cf50 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e54934cfc8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934d068 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e54934d108 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e54937d000 <col:95, line:467:5>
|     |-CallExpr 0x55e54937cf78 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937ce88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e54937cec8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e54937ced8 <col:37> 'const char *' lvalue ParmVar 0x55e54934ced0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937cef8 <col:46> 'int' lvalue ParmVar 0x55e54934cf50 'flags' 'int'
|     | |-DeclRefExpr 0x55e54937cf18 <col:53> 'P' lvalue ParmVar 0x55e54934cfc8 'parser' 'P'
|     | |-DeclRefExpr 0x55e54937cf38 <col:61> 'T' lvalue ParmVar 0x55e54934d068 'x' 'T &'
|     | `-DeclRefExpr 0x55e54937cf58 <col:64> 'const V' lvalue ParmVar 0x55e54934d108 'default_value' 'const V &'
|     `-ReturnStmt 0x55e54937cff0 <line:466:9, col:17>
|       `-UnaryOperator 0x55e54937cfd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937cfc8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e54934d8d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e54934d378 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934d3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54934d478 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e54934d838 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54934d540 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934d5b8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934d658 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e54934d6f8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e54937d1a8 <col:63, line:481:5>
|     `-ReturnStmt 0x55e54937d198 <line:480:9, col:47>
|       `-CallExpr 0x55e54937d150 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937d030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937d0b0 <col:21> 'const char *' lvalue ParmVar 0x55e54934d540 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937d0d0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e54937d0f0 <col:33> 'P' lvalue ParmVar 0x55e54934d5b8 'parser' 'P'
|         |-DeclRefExpr 0x55e54937d110 <col:41> 'T1' lvalue ParmVar 0x55e54934d658 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e54937d130 <col:45> 'T2' lvalue ParmVar 0x55e54934d6f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e54934de58 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e54934d950 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934d9c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54934da48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e54934ddb8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54934db10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934db88 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934dc28 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e54934dcc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e54937d348 <col:65, line:485:5>
|     `-ReturnStmt 0x55e54937d338 <line:484:9, col:55>
|       `-CallExpr 0x55e54937d2f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937d1d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937d250 <col:21> 'const char *' lvalue ParmVar 0x55e54934db10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937d270 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e54937d290 <col:41> 'P' lvalue ParmVar 0x55e54934db88 'parser' 'P'
|         |-DeclRefExpr 0x55e54937d2b0 <col:49> 'T1' lvalue ParmVar 0x55e54934dc28 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e54937d2d0 <col:53> 'T2' lvalue ParmVar 0x55e54934dcc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e54934e3d8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e54934ded0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934df48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54934dfc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e54934e338 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54934e090 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934e108 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934e1a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e54934e248 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e54937d4e8 <col:65, line:489:5>
|     `-ReturnStmt 0x55e54937d4d8 <line:488:9, col:56>
|       `-CallExpr 0x55e54937d490 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937d370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937d3f0 <col:21> 'const char *' lvalue ParmVar 0x55e54934e090 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937d410 <col:30> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
|         |-DeclRefExpr 0x55e54937d430 <col:42> 'P' lvalue ParmVar 0x55e54934e108 'parser' 'P'
|         |-DeclRefExpr 0x55e54937d450 <col:50> 'T1' lvalue ParmVar 0x55e54934e1a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e54937d470 <col:54> 'T2' lvalue ParmVar 0x55e54934e248 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e54934e958 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e54934e450 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934e4c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54934e548 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e54934e8b8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54934e610 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934e688 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e54934e728 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e54934e7c8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e54937d738 <col:66, line:493:5>
|     `-ReturnStmt 0x55e54937d728 <line:492:9, col:68>
|       `-CallExpr 0x55e54937d6e0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937d510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937d590 <col:21> 'const char *' lvalue ParmVar 0x55e54934e610 'keyword' 'const char *'
|         |-BinaryOperator 0x55e54937d660 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e54937d610 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e54937d5f0 <col:30> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e54937d648 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e54937d628 <col:42> 'const int' lvalue Var 0x55e549348890 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e54937d680 <col:54> 'P' lvalue ParmVar 0x55e54934e688 'parser' 'P'
|         |-DeclRefExpr 0x55e54937d6a0 <col:62> 'T1' lvalue ParmVar 0x55e54934e728 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e54937d6c0 <col:66> 'T2' lvalue ParmVar 0x55e54934e7c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e5493536c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e54934e9d0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54934ea48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54934eac8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e549353628 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54934eb90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54934ec10 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e54934ec88 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e549353438 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e5493534d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e54937d8c8 <col:74, line:498:5>
|     |-CallExpr 0x55e54937d840 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937d750 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e54937d790 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e54937d7a0 <col:30> 'const char *' lvalue ParmVar 0x55e54934eb90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937d7c0 <col:39> 'int' lvalue ParmVar 0x55e54934ec10 'flags' 'int'
|     | |-DeclRefExpr 0x55e54937d7e0 <col:46> 'P' lvalue ParmVar 0x55e54934ec88 'parser' 'P'
|     | |-DeclRefExpr 0x55e54937d800 <col:54> 'T1' lvalue ParmVar 0x55e549353438 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e54937d820 <col:58> 'T2' lvalue ParmVar 0x55e5493534d8 'x2' 'T2 &'
|     `-ReturnStmt 0x55e54937d8b8 <line:497:9, col:17>
|       `-UnaryOperator 0x55e54937d8a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937d890 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e549353a28 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e549353748 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549353988 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e549353800 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549353878 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e54937da10 <col:52, line:509:5>
|     `-ReturnStmt 0x55e54937da00 <line:508:9, col:44>
|       `-CallExpr 0x55e54937d9c8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937d8f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937d968 <col:26> 'const char *' lvalue ParmVar 0x55e549353800 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937d988 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e54937d9a8 <col:38> 'P' lvalue ParmVar 0x55e549353878 'parser' 'P'
|-FunctionTemplateDecl 0x55e549353d28 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e549353a90 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549353c88 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e549353b40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549353bb8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e54937db50 <col:54, line:513:5>
|     `-ReturnStmt 0x55e54937db40 <line:512:9, col:52>
|       `-CallExpr 0x55e54937db08 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937da38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937daa8 <col:26> 'const char *' lvalue ParmVar 0x55e549353b40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937dac8 <col:35> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e54937dae8 <col:46> 'P' lvalue ParmVar 0x55e549353bb8 'parser' 'P'
|-FunctionTemplateDecl 0x55e549354028 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e549353d90 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549353f88 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e549353e40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549353eb8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e54937dc90 <col:54, line:517:5>
|     `-ReturnStmt 0x55e54937dc80 <line:516:9, col:53>
|       `-CallExpr 0x55e54937dc48 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937db78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937dbe8 <col:26> 'const char *' lvalue ParmVar 0x55e549353e40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937dc08 <col:35> 'const int' lvalue Var 0x55e549348890 'positional' 'const int'
|         `-DeclRefExpr 0x55e54937dc28 <col:47> 'P' lvalue ParmVar 0x55e549353eb8 'parser' 'P'
|-FunctionTemplateDecl 0x55e549354328 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e549354090 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549354288 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e549354140 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493541b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e54937de80 <col:55, line:521:5>
|     `-ReturnStmt 0x55e54937de70 <line:520:9, col:65>
|       `-CallExpr 0x55e54937de38 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937dcb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937dd28 <col:26> 'const char *' lvalue ParmVar 0x55e549354140 'keyword' 'const char *'
|         |-BinaryOperator 0x55e54937ddf8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e54937dda8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e54937dd88 <col:35> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e54937dde0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e54937ddc0 <col:47> 'const int' lvalue Var 0x55e549348890 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e54937de18 <col:59> 'P' lvalue ParmVar 0x55e5493541b8 'parser' 'P'
|-FunctionTemplateDecl 0x55e5493546f8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e549354390 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549354658 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e549354440 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493544c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e549354538 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e54937dfc0 <col:63, line:526:5>
|     |-CallExpr 0x55e54937df48 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937de98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e54937ded8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e54937dee8 <col:35> 'const char *' lvalue ParmVar 0x55e549354440 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e54937df08 <col:44> 'int' lvalue ParmVar 0x55e5493544c0 'flags' 'int'
|     | `-DeclRefExpr 0x55e54937df28 <col:51> 'P' lvalue ParmVar 0x55e549354538 'parser' 'P'
|     `-ReturnStmt 0x55e54937dfb0 <line:525:9, col:17>
|       `-UnaryOperator 0x55e54937df98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937df88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e549354b48 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e549354768 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493547e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549354aa8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e5493548a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549354920 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e5493549c8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e54937e118 <col:58, line:541:5>
|     `-ReturnStmt 0x55e54937e108 <line:540:9, col:39>
|       `-CallExpr 0x55e54937e0d0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937dff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e070 <col:21> 'const char *' lvalue ParmVar 0x55e5493548a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937e090 <col:30> 'P' lvalue ParmVar 0x55e549354920 'parser' 'P'
|         `-DeclRefExpr 0x55e54937e0b0 <col:38> 'T' lvalue ParmVar 0x55e5493549c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e549354f98 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e549354bb8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549354c38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549354ef8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e549354cf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549354d70 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e549354e18 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e54937e250 <col:60, line:545:5>
|     `-ReturnStmt 0x55e54937e240 <line:544:9, col:41>
|       `-CallExpr 0x55e54937e208 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e1a8 <col:23> 'const char *' lvalue ParmVar 0x55e549354cf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937e1c8 <col:32> 'P' lvalue ParmVar 0x55e549354d70 'parser' 'P'
|         `-DeclRefExpr 0x55e54937e1e8 <col:40> 'T' lvalue ParmVar 0x55e549354e18 'x' 'T &'
|-FunctionTemplateDecl 0x55e5493553e8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e549355008 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549355088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549355348 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e549355148 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493551c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e549355268 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e54937e388 <col:60, line:549:5>
|     `-ReturnStmt 0x55e54937e378 <line:548:9, col:41>
|       `-CallExpr 0x55e54937e340 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e2e0 <col:23> 'const char *' lvalue ParmVar 0x55e549355148 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937e300 <col:32> 'P' lvalue ParmVar 0x55e5493551c0 'parser' 'P'
|         `-DeclRefExpr 0x55e54937e320 <col:40> 'T' lvalue ParmVar 0x55e549355268 'x' 'T &'
|-FunctionTemplateDecl 0x55e549355838 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e549355458 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493554d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549355798 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e549355598 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549355610 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e5493556b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e54937e4c0 <col:61, line:553:5>
|     `-ReturnStmt 0x55e54937e4b0 <line:552:9, col:42>
|       `-CallExpr 0x55e54937e478 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e3b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e418 <col:24> 'const char *' lvalue ParmVar 0x55e549355598 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937e438 <col:33> 'P' lvalue ParmVar 0x55e549355610 'parser' 'P'
|         `-DeclRefExpr 0x55e54937e458 <col:41> 'T' lvalue ParmVar 0x55e5493556b8 'x' 'T &'
|-FunctionTemplateDecl 0x55e549355d18 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e5493558a8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549355928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549355c78 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e5493559e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549355a68 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e549355ae0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e549355b88 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e54937e638 <col:69, line:557:5>
|     `-ReturnStmt 0x55e54937e628 <line:556:9, col:46>
|       `-CallExpr 0x55e54937e5e8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e4e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e568 <col:21> 'const char *' lvalue ParmVar 0x55e5493559e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937e588 <col:30> 'int' lvalue ParmVar 0x55e549355a68 'flags' 'int'
|         |-DeclRefExpr 0x55e54937e5a8 <col:37> 'P' lvalue ParmVar 0x55e549355ae0 'parser' 'P'
|         `-DeclRefExpr 0x55e54937e5c8 <col:45> 'T' lvalue ParmVar 0x55e549355b88 'x' 'T &'
|-FunctionTemplateDecl 0x55e549356028 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e549355d90 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549355f88 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e549355e40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549355eb8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e54937e778 <col:56, line:571:5>
|     `-ReturnStmt 0x55e54937e768 <line:570:9, col:48>
|       `-CallExpr 0x55e54937e730 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e6d0 <col:30> 'const char *' lvalue ParmVar 0x55e549355e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937e6f0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e54937e710 <col:42> 'P' lvalue ParmVar 0x55e549355eb8 'parser' 'P'
|-FunctionTemplateDecl 0x55e5493563b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e549356090 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549356318 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e549356140 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493561c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e549356238 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e54937e948 <col:67, line:576:5>
|     |-CallExpr 0x55e54937e8d0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937e790 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e54937e7d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e54937e7e0 <col:39> 'const char *' lvalue ParmVar 0x55e549356140 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e54937e890 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e54937e840 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e54937e800 <col:48> 'int' lvalue ParmVar 0x55e5493561c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e54937e878 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e54937e858 <col:56> 'const int' lvalue Var 0x55e549348a80 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e54937e8b0 <col:68> 'P' lvalue ParmVar 0x55e549356238 'parser' 'P'
|     `-ReturnStmt 0x55e54937e938 <line:575:9, col:17>
|       `-UnaryOperator 0x55e54937e920 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937e910 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e549356808 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e549356428 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493564a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549356768 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e549356568 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493565e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e549356688 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e54937eab8 <col:62, line:592:5>
|     `-ReturnStmt 0x55e54937eaa8 <line:591:9, col:51>
|       `-CallExpr 0x55e54937ea68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937e978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937e9e8 <col:30> 'const char *' lvalue ParmVar 0x55e549356568 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937ea08 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e54937ea28 <col:42> 'P' lvalue ParmVar 0x55e5493565e0 'parser' 'P'
|         `-DeclRefExpr 0x55e54937ea48 <col:50> 'T' lvalue ParmVar 0x55e549356688 'x' 'T &'
|-FunctionTemplateDecl 0x55e549356ce8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e549356878 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493568f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549356c48 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e5493569b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549356a38 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e549356ab0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e549356b58 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e54937ecb0 <col:73, line:597:5>
|     |-CallExpr 0x55e54937ec30 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937ead0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e54937eb10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e54937eb20 <col:39> 'const char *' lvalue ParmVar 0x55e5493569b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e54937ebd0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e54937eb80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e54937eb40 <col:48> 'int' lvalue ParmVar 0x55e549356a38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e54937ebb8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e54937eb98 <col:56> 'const int' lvalue Var 0x55e549348a80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e54937ebf0 <col:68> 'P' lvalue ParmVar 0x55e549356ab0 'parser' 'P'
|     | `-DeclRefExpr 0x55e54937ec10 <col:76> 'T' lvalue ParmVar 0x55e549356b58 'x' 'T &'
|     `-ReturnStmt 0x55e54937eca0 <line:596:9, col:17>
|       `-UnaryOperator 0x55e54937ec88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937ec78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e549357298 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e549356d60 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549356dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e5493571f8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e549356e98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549356f10 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e5493570d0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e54937ee20 <col:65, line:614:5>
|     `-ReturnStmt 0x55e54937ee10 <line:613:9, col:46>
|       `-CallExpr 0x55e54937edd0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937ece0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937ed50 <col:25> 'const char *' lvalue ParmVar 0x55e549356e98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937ed70 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e54937ed90 <col:37> 'P' lvalue ParmVar 0x55e549356f10 'parser' 'P'
|         `-DeclRefExpr 0x55e54937edb0 <col:45> 'Vector<T>' lvalue ParmVar 0x55e5493570d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e5493576c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e549357308 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549357628 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e5493573c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549357510 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e54937f040 <col:55, line:618:5>
|     `-ReturnStmt 0x55e54937f030 <line:617:9, col:55>
|       `-CallExpr 0x55e54937eff0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937ee48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937eeb8 <col:25> 'const char *' lvalue ParmVar 0x55e5493573c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e54937eed8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e54937efb0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e54937efd0 <col:54> 'Vector<T>' lvalue ParmVar 0x55e549357510 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e549357c98 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e549357730 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493577a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549357bf8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e549357868 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e5493578e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e549357960 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e549357ab0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e54937f238 <col:76, line:623:5>
|     |-CallExpr 0x55e54937f1b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e54937f058 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e54937f098 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e54937f0a8 <col:34> 'const char *' lvalue ParmVar 0x55e549357868 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e54937f158 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e54937f108 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e54937f0c8 <col:43> 'int' lvalue ParmVar 0x55e5493578e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e54937f140 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e54937f120 <col:51> 'const int' lvalue Var 0x55e549348a80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e54937f178 <col:63> 'P' lvalue ParmVar 0x55e549357960 'parser' 'P'
|     | `-DeclRefExpr 0x55e54937f198 <col:71> 'Vector<T>' lvalue ParmVar 0x55e549357ab0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e54937f228 <line:622:9, col:17>
|       `-UnaryOperator 0x55e54937f210 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e54937f200 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e5493581d8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e549357d10 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549357d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549358138 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e549357e48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549357ec8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e549358010 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e54937f4a0 <col:66, line:627:5>
|     `-ReturnStmt 0x55e54937f490 <line:626:9, col:59>
|       `-CallExpr 0x55e54937f450 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e54937f268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e54937f2d8 <col:25> 'const char *' lvalue ParmVar 0x55e549357e48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e54937f2f8 <col:34> 'int' lvalue ParmVar 0x55e549357ec8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e54937f410 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e54937f430 <col:58> 'Vector<T>' lvalue ParmVar 0x55e549358010 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e549358268 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e54937f520 <col:25, line:633:5>
|   `-ReturnStmt 0x55e54937f510 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e54937f4f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e54937f4c8 <col:16> 'const bool' lvalue ->_status 0x55e549366a18
|         `-CXXThisExpr 0x55e54937f4b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e5493583e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e549358320 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e54937f608 <col:27, line:639:5>
|   |-BinaryOperator 0x55e54937f5b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e54937f538 <col:9> 'bool' lvalue ParmVar 0x55e549358320 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e54937f598 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e54937f568 <col:13> 'bool' lvalue ->_status 0x55e549366a18
|   |     `-CXXThisExpr 0x55e54937f558 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e54937f5f8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e54937f5e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e54937f5d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e549358568 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e5493584a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e54937f6f8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e54937f6a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e54937f628 <col:9> 'bool' lvalue ParmVar 0x55e5493584a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e54937f688 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e54937f658 <col:13> 'const bool' lvalue ->_status 0x55e549366a18
|   |     `-CXXThisExpr 0x55e54937f648 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e54937f6e8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e54937f6d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e54937f6c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e549358630 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e54937f7a0 <col:30, line:651:5>
|   `-ReturnStmt 0x55e54937f790 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e54937f778 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e54937f748 <col:16> 'bool' lvalue ->_read_status 0x55e54925bbb0
|         `-ImplicitCastExpr 0x55e54937f728 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e54937f718 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e549358778 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e5493586e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e54937f8a8 <col:32, line:658:5>
|   |-BinaryOperator 0x55e54937f850 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e54937f7b8 <col:9> 'bool' lvalue ParmVar 0x55e5493586e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e54937f838 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e54937f808 <col:13> 'bool' lvalue ->_read_status 0x55e54925bbb0
|   |     `-ImplicitCastExpr 0x55e54937f7e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e54937f7d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e54937f898 <line:657:9, col:17>
|     `-UnaryOperator 0x55e54937f880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e54937f870 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e5493588c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e549358838 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e54937f9b8 <col:44, line:663:5>
|   |-BinaryOperator 0x55e54937f960 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e54937f8c8 <col:9> 'bool' lvalue ParmVar 0x55e549358838 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e54937f948 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e54937f918 <col:13> 'bool' lvalue ->_read_status 0x55e54925bbb0
|   |     `-ImplicitCastExpr 0x55e54937f8f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e54937f8e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e54937f9a8 <line:662:9, col:17>
|     `-UnaryOperator 0x55e54937f990 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e54937f980 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e549358990 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e549358a58 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e549358b20 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e549358be8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e549358ef8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e549358c88 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549358e58 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e549358d68 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e54937fd70 <col:19, line:706:5>
|     `-IfStmt 0x55e54937fd48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e54937fab8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e54937fc78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e54937fc48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e54937fc08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e54937fb10 <col:42> '<bound member function type>' ->simple_slot 0x55e549378ec0
|       |     | `-CXXThisExpr 0x55e54937fb00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e54937fba8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e54937fb60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e5490e60d8
|       |     | `-DeclRefExpr 0x55e54937fb40 <col:55> 'T' lvalue ParmVar 0x55e549358d68 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e54937fbe8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e54937fd38 <line:705:13, col:34>
|         `-CallExpr 0x55e54937fd10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e54937fc98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e54937fcf0 <col:33> 'T' lvalue ParmVar 0x55e549358d68 'x' 'T &'
|-FunctionTemplateDecl 0x55e5493591c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e549358f58 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549359128 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e549359038 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e549380150 <col:31, line:717:5>
|     |-DeclStmt 0x55e54937feb0 <line:713:9, col:23>
|     | `-VarDecl 0x55e54937fd98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e54937fe88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e54937fe10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e54937fe68 <col:21> 'T' lvalue ParmVar 0x55e549359038 'x' 'T &'
|     |-IfStmt 0x55e549380100 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e54937ffa8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e5493800e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e549380080 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e549380010 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|     |   | `-DeclRefExpr 0x55e54937fff0 <col:14> 'T *' lvalue Var 0x55e54937fd98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e5493800c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e549380138 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e549380118 <col:16> 'T *' lvalue Var 0x55e54937fd98 's' 'T *'
|-FunctionTemplateDecl 0x55e5493595d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e549359228 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e5493592a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e549359538 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e549359388 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e549359428 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e549380460 <col:37, line:726:5>
|     |-IfStmt 0x55e5493803f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e549380410 <line:723:13, col:26>
|     | | `-VarDecl 0x55e5493801b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e5493802a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e549380230 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e549380288 <col:25> 'T' lvalue ParmVar 0x55e549359388 'x' 'T &'
|     | |-DeclRefExpr 0x55e5493802d0 <col:16> 'T *' lvalue Var 0x55e5493801b8 's' 'T *'
|     | `-BinaryOperator 0x55e5493803d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e549380380 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e549380310 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|     |   | `-DeclRefExpr 0x55e5493802f0 <col:14> 'T *' lvalue Var 0x55e5493801b8 's' 'T *'
|     |   `-DeclRefExpr 0x55e5493803b0 <col:18> 'const V' lvalue ParmVar 0x55e549359428 'value' 'const V &'
|     `-ReturnStmt 0x55e549380450 <line:725:9, col:17>
|       `-UnaryOperator 0x55e549380438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e549380428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e5493599d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e549359640 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e549359938 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e5493596f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549359770 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e549359818 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e549381280 <col:65, line:737:5>
|     |-DeclStmt 0x55e5493804f8 <line:732:9, col:26>
|     | `-VarDecl 0x55e549380490 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e549381248 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e549381268 <line:733:13, col:58>
|       | `-VarDecl 0x55e549380520 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e549380700 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e5493806d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e5493806b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e549380698 <col:26, col:58> 'String' (CXXTemporary 0x55e549380698)
|       |           `-CXXMemberCallExpr 0x55e549380628 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e549380598 <col:26> '<bound member function type>' ->find 0x55e5493784d8
|       |             | `-CXXThisExpr 0x55e549380588 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e549380660 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e5493805c8 <col:31> 'const char *' lvalue ParmVar 0x55e5493596f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e549380678 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e5493805e8 <col:40> 'int' lvalue ParmVar 0x55e549359770 'flags' 'int'
|       |             `-DeclRefExpr 0x55e549380608 <col:47> 'Args::Slot *' lvalue Var 0x55e549380490 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e5493807b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e5493807a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e549380780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e549380750 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |       `-ImplicitCastExpr 0x55e549380738 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e549380718 <col:20> 'String' lvalue Var 0x55e549380520 'str' 'String'
|       `-CompoundStmt 0x55e549381228 <col:61, line:736:9>
|         |-DeclStmt 0x55e549380c70 <line:734:13, col:76>
|         | `-VarDecl 0x55e549380808 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e549380c40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e549380bb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e549380bf8 <col:60> 'T' lvalue ParmVar 0x55e549359818 'variable' 'T &'
|         |     `-UnaryOperator 0x55e549380c28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e549380c18 <col:71> 'Args *' this
|         `-CallExpr 0x55e5493811f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e549380c98 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|           | `-CXXThisExpr 0x55e549380c88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e5493811b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e549380cc8 <col:23> 'T *' lvalue Var 0x55e549380808 's' 'T *'
|           | `-CallExpr 0x55e549381178 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e549380f50 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e549381050 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e549381070 <col:86> 'String' lvalue Var 0x55e549380520 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e549381120 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e5493810b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|           |   | `-DeclRefExpr 0x55e549381090 <col:92> 'T *' lvalue Var 0x55e549380808 's' 'T *'
|           |   `-UnaryOperator 0x55e549381160 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e549381150 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e5493811d8 <col:103> 'Args::Slot *' lvalue Var 0x55e549380490 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e549359f28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e549359a48 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e549359ac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e549359e88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e549359b88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549359c08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e549359ca8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e549359d48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e549382120 <col:88, line:745:5>
|     |-DeclStmt 0x55e549381318 <line:741:9, col:26>
|     | `-VarDecl 0x55e5493812b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e549381538 <line:742:9, col:55>
|     | `-VarDecl 0x55e549381340 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e549381520 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e5493814f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e5493814d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e5493814b8 <col:22, col:54> 'String' (CXXTemporary 0x55e5493814b8)
|     |           `-CXXMemberCallExpr 0x55e549381448 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e5493813b8 <col:22> '<bound member function type>' ->find 0x55e5493784d8
|     |             | `-CXXThisExpr 0x55e5493813a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e549381480 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e5493813e8 <col:27> 'const char *' lvalue ParmVar 0x55e549359b88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e549381498 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e549381408 <col:36> 'int' lvalue ParmVar 0x55e549359c08 'flags' 'int'
|     |             `-DeclRefExpr 0x55e549381428 <col:43> 'Args::Slot *' lvalue Var 0x55e5493812b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e549381910 <line:743:9, col:72>
|     | `-VarDecl 0x55e549381588 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e5493818e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e549381850 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e549381898 <col:56> 'T' lvalue ParmVar 0x55e549359ca8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e5493818c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e5493818b8 <col:67> 'Args *' this
|     `-CallExpr 0x55e5493820f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e549381938 <col:9> '<bound member function type>' ->postparse 0x55e5493786e8
|       | `-CXXThisExpr 0x55e549381928 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e5493820b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e549381968 <col:19> 'T *' lvalue Var 0x55e549381588 's' 'T *'
|       | `-ParenExpr 0x55e549382090 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e549382060 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e549382048 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e549382030 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e549382010 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e549381fe0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |     |       `-ImplicitCastExpr 0x55e549381fc8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e549381988 <col:25> 'String' lvalue Var 0x55e549381340 'str' 'String'
|       |     |-CallExpr 0x55e549381e38 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e549381c10 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e549381d10 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e549381d30 <col:89> 'String' lvalue Var 0x55e549381340 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e549381de0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e549381d70 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|       |     | | `-DeclRefExpr 0x55e549381d50 <col:95> 'T *' lvalue Var 0x55e549381588 's' 'T *'
|       |     | `-UnaryOperator 0x55e549381e20 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e549381e10 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e549381fa8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e549381f88 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e549381f58 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e549381f08 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e549381e98 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|       |         | | `-DeclRefExpr 0x55e549381e78 <col:109> 'T *' lvalue Var 0x55e549381588 's' 'T *'
|       |         | `-DeclRefExpr 0x55e549381f38 <col:113> 'const V' lvalue ParmVar 0x55e549359d48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e549381f78 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e5493820d0 <col:128> 'Args::Slot *' lvalue Var 0x55e5493812b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e54935a458 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e549359fa0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54935a018 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e54935a3b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e54935a0d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54935a158 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e54935a1d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e54935a278 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e549382d18 <col:75, line:754:5>
|     |-DeclStmt 0x55e5493821c8 <line:749:9, col:26>
|     | `-VarDecl 0x55e549382160 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e549382ce0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e549382d00 <line:750:13, col:58>
|       | `-VarDecl 0x55e5493821f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e5493823d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e5493823a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e549382388 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e549382368 <col:26, col:58> 'String' (CXXTemporary 0x55e549382368)
|       |           `-CXXMemberCallExpr 0x55e5493822f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e549382268 <col:26> '<bound member function type>' ->find 0x55e5493784d8
|       |             | `-CXXThisExpr 0x55e549382258 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e549382330 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e549382298 <col:31> 'const char *' lvalue ParmVar 0x55e54935a0d8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e549382348 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e5493822b8 <col:40> 'int' lvalue ParmVar 0x55e54935a158 'flags' 'int'
|       |             `-DeclRefExpr 0x55e5493822d8 <col:47> 'Args::Slot *' lvalue Var 0x55e549382160 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e549382488 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e549382470 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e549382450 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e549382420 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |       `-ImplicitCastExpr 0x55e549382408 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e5493823e8 <col:20> 'String' lvalue Var 0x55e5493821f0 'str' 'String'
|       `-CompoundStmt 0x55e549382cc0 <col:61, line:753:9>
|         |-DeclStmt 0x55e549382860 <line:751:13, col:63>
|         | `-VarDecl 0x55e5493824d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e549382830 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e5493827a0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e5493827e8 <col:47> 'T' lvalue ParmVar 0x55e54935a278 'variable' 'T &'
|         |     `-UnaryOperator 0x55e549382818 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e549382808 <col:58> 'Args *' this
|         `-CallExpr 0x55e549382c90 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e549382888 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|           | `-CXXThisExpr 0x55e549382878 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e549382c50 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e5493828b8 <col:23> 'T *' lvalue Var 0x55e5493824d8 's' 'T *'
|           | `-CallExpr 0x55e549382c10 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e549382aa0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e549382ae8 <col:56> 'P' lvalue ParmVar 0x55e54935a1d0 'parser' 'P'
|           |   |-DeclRefExpr 0x55e549382b08 <col:64> 'String' lvalue Var 0x55e5493821f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e549382bb8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e549382b48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|           |   | `-DeclRefExpr 0x55e549382b28 <col:70> 'T *' lvalue Var 0x55e5493824d8 's' 'T *'
|           |   `-UnaryOperator 0x55e549382bf8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e549382be8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e549382c70 <col:81> 'Args::Slot *' lvalue Var 0x55e549382160 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e54935aab8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e54935a4d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e54935a548 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e54935a5c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e54935aa18 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e54935a690 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54935a710 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e54935a788 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e54935a828 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e54935a8c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e549385e20 <col:98, line:762:5>
|     |-DeclStmt 0x55e549382db0 <line:758:9, col:26>
|     | `-VarDecl 0x55e549382d48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e549382fd0 <line:759:9, col:55>
|     | `-VarDecl 0x55e549382dd8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e549382fb8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e549382f88 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e549382f70 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e549382f50 <col:22, col:54> 'String' (CXXTemporary 0x55e549382f50)
|     |           `-CXXMemberCallExpr 0x55e549382ee0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e549382e50 <col:22> '<bound member function type>' ->find 0x55e5493784d8
|     |             | `-CXXThisExpr 0x55e549382e40 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e549382f18 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e549382e80 <col:27> 'const char *' lvalue ParmVar 0x55e54935a690 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e549382f30 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e549382ea0 <col:36> 'int' lvalue ParmVar 0x55e54935a710 'flags' 'int'
|     |             `-DeclRefExpr 0x55e549382ec0 <col:43> 'Args::Slot *' lvalue Var 0x55e549382d48 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e5493833f0 <line:760:9, col:59>
|     | `-VarDecl 0x55e549383028 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e5493833c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e549383330 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e549383378 <col:43> 'T' lvalue ParmVar 0x55e54935a828 'variable' 'T &'
|     |     `-UnaryOperator 0x55e5493833a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e549383398 <col:54> 'Args *' this
|     `-CallExpr 0x55e549385df0 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e549383418 <col:9> '<bound member function type>' ->postparse 0x55e5493786e8
|       | `-CXXThisExpr 0x55e549383408 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e549383a38 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e549383448 <col:19> 'T *' lvalue Var 0x55e549383028 's' 'T *'
|       | `-ParenExpr 0x55e549383a18 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e5493839e8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e5493839d0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e5493839b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e549383998 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e549383968 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |     |       `-ImplicitCastExpr 0x55e549383950 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e549383468 <col:25> 'String' lvalue Var 0x55e549382dd8 'str' 'String'
|       |     |-CallExpr 0x55e5493837c0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e549383650 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e549383698 <col:59> 'P' lvalue ParmVar 0x55e54935a788 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e5493836b8 <col:67> 'String' lvalue Var 0x55e549382dd8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e549383768 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e5493836f8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|       |     | | `-DeclRefExpr 0x55e5493836d8 <col:73> 'T *' lvalue Var 0x55e549383028 's' 'T *'
|       |     | `-UnaryOperator 0x55e5493837a8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e549383798 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e549383930 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e549383910 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e5493838e0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e549383890 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e549383820 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|       |         | | `-DeclRefExpr 0x55e549383800 <col:87> 'T *' lvalue Var 0x55e549383028 's' 'T *'
|       |         | `-DeclRefExpr 0x55e5493838c0 <col:91> 'const V' lvalue ParmVar 0x55e54935a8c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e549383900 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e549383a58 <col:106> 'Args::Slot *' lvalue Var 0x55e549382d48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e54935b128 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e54935ab38 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e54935abb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e54935ac38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e54935b088 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e54935ad00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54935ad80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e54935adf8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e54935ae98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e54935af38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e549386df8 <col:60, line:773:5>
|     |-DeclStmt 0x55e549385ec8 <line:767:9, col:26>
|     | `-VarDecl 0x55e549385e60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e549386dc0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e549386de0 <line:768:13, col:58>
|       | `-VarDecl 0x55e549385ef0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e5493860d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e5493860a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e549386088 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e549386068 <col:26, col:58> 'String' (CXXTemporary 0x55e549386068)
|       |           `-CXXMemberCallExpr 0x55e549385ff8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e549385f68 <col:26> '<bound member function type>' ->find 0x55e5493784d8
|       |             | `-CXXThisExpr 0x55e549385f58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e549386030 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e549385f98 <col:31> 'const char *' lvalue ParmVar 0x55e54935ad00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e549386048 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e549385fb8 <col:40> 'int' lvalue ParmVar 0x55e54935ad80 'flags' 'int'
|       |             `-DeclRefExpr 0x55e549385fd8 <col:47> 'Args::Slot *' lvalue Var 0x55e549385e60 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e549386188 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e549386170 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e549386150 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e549386120 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |       `-ImplicitCastExpr 0x55e549386108 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e5493860e8 <col:20> 'String' lvalue Var 0x55e549385ef0 'str' 'String'
|       `-CompoundStmt 0x55e549386d98 <col:61, line:772:9>
|         |-DeclStmt 0x55e5493864c0 <line:769:13, col:66>
|         | `-VarDecl 0x55e5493861d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e549386490 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e549386400 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e549386448 <col:49> 'T1' lvalue ParmVar 0x55e54935ae98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e549386478 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e549386468 <col:61> 'Args *' this
|         |-DeclStmt 0x55e549386830 <line:770:13, col:66>
|         | `-VarDecl 0x55e549386548 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e549386800 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e549386770 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e5493867b8 <col:49> 'T2' lvalue ParmVar 0x55e54935af38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e5493867e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e5493867d8 <col:61> 'Args *' this
|         `-CallExpr 0x55e549386d68 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e549386858 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|           | `-CXXThisExpr 0x55e549386848 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e549386d28 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e5493868c8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e549386888 <col:23> 'T1 *' lvalue Var 0x55e5493861d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e5493868a8 <col:29> 'T2 *' lvalue Var 0x55e549386548 's2' 'T2 *'
|           | `-CallExpr 0x55e549386ce0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e549386ab0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e549386af8 <col:63> 'P' lvalue ParmVar 0x55e54935adf8 'parser' 'P'
|           |   |-DeclRefExpr 0x55e549386b18 <col:71> 'String' lvalue Var 0x55e549385ef0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e549386bc8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e549386b58 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|           |   | `-DeclRefExpr 0x55e549386b38 <col:77> 'T1 *' lvalue Var 0x55e5493861d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e549386c88 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e549386c18 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|           |   | `-DeclRefExpr 0x55e549386bf8 <col:82> 'T2 *' lvalue Var 0x55e549386548 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e549386cc8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e549386cb8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e549386d48 <col:94> 'Args::Slot *' lvalue Var 0x55e549385e60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e549363e88 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e54935b1a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549363de8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e54935b260 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e54935b2e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e54935b358 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e549387310 <col:67, line:780:5>
|     |-DeclStmt 0x55e549386e90 <line:777:9, col:26>
|     | `-VarDecl 0x55e549386e28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e5493872d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e5493872f8 <line:778:13, col:58>
|       | `-VarDecl 0x55e549386eb8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e549387098 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e549387068 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e549387050 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e549387030 <col:26, col:58> 'String' (CXXTemporary 0x55e549387030)
|       |           `-CXXMemberCallExpr 0x55e549386fc0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e549386f30 <col:26> '<bound member function type>' ->find 0x55e5493784d8
|       |             | `-CXXThisExpr 0x55e549386f20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e549386ff8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e549386f60 <col:31> 'const char *' lvalue ParmVar 0x55e54935b260 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e549387010 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e549386f80 <col:40> 'int' lvalue ParmVar 0x55e54935b2e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55e549386fa0 <col:47> 'Args::Slot *' lvalue Var 0x55e549386e28 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e549387150 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e549387138 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e549387118 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e5493870e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|       |       `-ImplicitCastExpr 0x55e5493870d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e5493870b0 <col:20> 'String' lvalue Var 0x55e549386eb8 'str' 'String'
|       `-CallExpr 0x55e5493872a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e549387178 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|         | `-CXXThisExpr 0x55e549387168 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e549387258 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e5493871c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e5493871a8 <col:23> 'P' lvalue ParmVar 0x55e54935b358 'parser' 'P'
|         | |-DeclRefExpr 0x55e549387210 <col:36> 'String' lvalue Var 0x55e549386eb8 'str' 'String'
|         | `-UnaryOperator 0x55e549387240 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e549387230 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e549387288 <col:49> 'Args::Slot *' lvalue Var 0x55e549386e28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e549364228 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e549363ef8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e549364188 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e549363fb0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549364030 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e5493640a8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e549387c80 <col:71, line:792:5>
|     |-DeclStmt 0x55e5493873a8 <line:784:9, col:26>
|     | `-VarDecl 0x55e549387340 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e549387478 <line:785:9, col:29>
|     | `-VarDecl 0x55e5493873d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e549387460 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e549387440 <col:28> 'int' 1
|     |-WhileStmt 0x55e549387b30 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e549387b50 <line:786:16, col:61>
|     | | `-VarDecl 0x55e5493874a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e549387680 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e549387650 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e549387638 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e549387618 <col:29, col:61> 'String' (CXXTemporary 0x55e549387618)
|     | |           `-CXXMemberCallExpr 0x55e5493875a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e549387518 <col:29> '<bound member function type>' ->find 0x55e5493784d8
|     | |             | `-CXXThisExpr 0x55e549387508 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e5493875e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e549387548 <col:34> 'const char *' lvalue ParmVar 0x55e549363fb0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e5493875f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e549387568 <col:43> 'int' lvalue ParmVar 0x55e549364030 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e549387588 <col:50> 'Args::Slot *' lvalue Var 0x55e549387340 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e549387738 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e549387720 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e549387700 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e5493876d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|     | |       `-ImplicitCastExpr 0x55e5493876b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e549387698 <col:23> 'String' lvalue Var 0x55e5493874a0 'str' 'String'
|     | `-CompoundStmt 0x55e549387b08 <col:64, line:790:9>
|     |   |-CallExpr 0x55e549387890 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e549387760 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|     |   | | `-CXXThisExpr 0x55e549387750 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e549387840 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e5493877b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e549387790 <col:23> 'P' lvalue ParmVar 0x55e5493640a8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e5493877f8 <col:36> 'String' lvalue Var 0x55e5493874a0 'str' 'String'
|     |   | | `-UnaryOperator 0x55e549387828 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e549387818 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e549387870 <col:49> 'Args::Slot *' lvalue Var 0x55e549387340 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e549387a28 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e5493878c0 <col:13> 'int' lvalue Var 0x55e5493873d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e549387a10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e5493879f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e549387958 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e549387938 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e549387920 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e5493878e0 <col:28> 'int' lvalue Var 0x55e5493873d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e549387900 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e5493879d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e5493879a8 <col:49> 'bool' lvalue ->_read_status 0x55e54925bbb0
|     |   |         `-ImplicitCastExpr 0x55e549387988 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e549387978 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e549387ad8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e549387a48 <col:13> 'int' lvalue ParmVar 0x55e549364030 'flags' 'int'
|     |     `-UnaryOperator 0x55e549387ac0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e549387aa8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e549387a88 <col:23> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e549387c60 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e549387b98 <col:9> 'bool' lvalue ->_read_status 0x55e54925bbb0
|       | `-ImplicitCastExpr 0x55e549387b78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e549387b68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e549387c40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e549387c20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e549387c08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e549387bc8 <col:25> 'int' lvalue Var 0x55e5493873d8 'read_status' 'int'
|           `-IntegerLiteral 0x55e549387be8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e549364708 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e549364298 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e549364318 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549364668 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e5493643d8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549364458 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e5493644d0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e549364578 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e549388c10 <col:84, line:805:5>
|     |-DeclStmt 0x55e549387d28 <line:796:9, col:26>
|     | `-VarDecl 0x55e549387cc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e549387df8 <line:797:9, col:29>
|     | `-VarDecl 0x55e549387d58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e549387de0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e549387dc0 <col:28> 'int' 1
|     |-DeclStmt 0x55e549388130 <line:798:9, col:71>
|     | `-VarDecl 0x55e549387e48 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e549388100 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e549388070 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e5493880b8 <col:55> 'T' lvalue ParmVar 0x55e549364578 'variable' 'T &'
|     |     `-UnaryOperator 0x55e5493880e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e5493880d8 <col:66> 'Args *' this
|     |-WhileStmt 0x55e549388ac0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e549388ae0 <line:799:16, col:61>
|     | | `-VarDecl 0x55e549388158 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e549388338 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e549388308 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e5493882f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e5493882d0 <col:29, col:61> 'String' (CXXTemporary 0x55e5493882d0)
|     | |           `-CXXMemberCallExpr 0x55e549388260 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e5493881d0 <col:29> '<bound member function type>' ->find 0x55e5493784d8
|     | |             | `-CXXThisExpr 0x55e5493881c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e549388298 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e549388200 <col:34> 'const char *' lvalue ParmVar 0x55e5493643d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e5493882b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e549388220 <col:43> 'int' lvalue ParmVar 0x55e549364458 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e549388240 <col:50> 'Args::Slot *' lvalue Var 0x55e549387cc0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e5493883f0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e5493883d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e5493883b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e549388388 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|     | |       `-ImplicitCastExpr 0x55e549388370 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e549388350 <col:23> 'String' lvalue Var 0x55e549388158 'str' 'String'
|     | `-CompoundStmt 0x55e549388a98 <col:64, line:803:9>
|     |   |-CallExpr 0x55e549388820 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e549388418 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|     |   | | `-CXXThisExpr 0x55e549388408 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e5493887e0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e549388448 <col:23> 'T *' lvalue Var 0x55e549387e48 's' 'T *'
|     |   | | `-CallExpr 0x55e5493887a0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e549388630 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e549388678 <col:56> 'P' lvalue ParmVar 0x55e5493644d0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e549388698 <col:64> 'String' lvalue Var 0x55e549388158 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e549388748 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e5493886d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|     |   | |   | `-DeclRefExpr 0x55e5493886b8 <col:70> 'T *' lvalue Var 0x55e549387e48 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e549388788 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e549388778 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e549388800 <col:81> 'Args::Slot *' lvalue Var 0x55e549387cc0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e5493889b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e549388850 <col:13> 'int' lvalue Var 0x55e549387d58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e5493889a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e549388980 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e5493888e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e5493888c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e5493888b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e549388870 <col:28> 'int' lvalue Var 0x55e549387d58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e549388890 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e549388968 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e549388938 <col:49> 'bool' lvalue ->_read_status 0x55e54925bbb0
|     |   |         `-ImplicitCastExpr 0x55e549388918 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e549388908 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e549388a68 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e5493889d8 <col:13> 'int' lvalue ParmVar 0x55e549364458 'flags' 'int'
|     |     `-UnaryOperator 0x55e549388a50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e549388a38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e549388a18 <col:23> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e549388bf0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e549388b28 <col:9> 'bool' lvalue ->_read_status 0x55e54925bbb0
|       | `-ImplicitCastExpr 0x55e549388b08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e549388af8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e549388bd0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e549388bb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e549388b98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e549388b58 <col:25> 'int' lvalue Var 0x55e549387d58 'read_status' 'int'
|           `-IntegerLiteral 0x55e549388b78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e549364ce8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e549364780 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e5493647f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e549364c48 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e5493648b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e549364938 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e5493649b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e549364b00 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e549389a18 <col:87, line:821:5>
|     |-DeclStmt 0x55e549388cc0 <line:809:9, col:26>
|     | `-VarDecl 0x55e549388c58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e549388d90 <line:810:9, col:29>
|     | `-VarDecl 0x55e549388cf0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e549388d78 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e549388d58 <col:28> 'int' 1
|     |-DeclStmt 0x55e549388fd8 <line:811:9, col:38>
|     | `-VarDecl 0x55e549388ec0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e549388fb0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e549388f38 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e549388f90 <col:29> 'Vector<T>' lvalue ParmVar 0x55e549364b00 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e5493898c8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e5493898e8 <line:812:16, col:61>
|     | | `-VarDecl 0x55e549389000 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e5493891e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e5493891b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e549389198 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e549389178 <col:29, col:61> 'String' (CXXTemporary 0x55e549389178)
|     | |           `-CXXMemberCallExpr 0x55e549389108 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e549389078 <col:29> '<bound member function type>' ->find 0x55e5493784d8
|     | |             | `-CXXThisExpr 0x55e549389068 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e549389140 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e5493890a8 <col:34> 'const char *' lvalue ParmVar 0x55e5493648b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e549389158 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e5493890c8 <col:43> 'int' lvalue ParmVar 0x55e549364938 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e5493890e8 <col:50> 'Args::Slot *' lvalue Var 0x55e549388c58 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e549389298 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e549389280 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e549389260 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e549389230 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e5490a90a8
|     | |       `-ImplicitCastExpr 0x55e549389218 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e5493891f8 <col:23> 'String' lvalue Var 0x55e549389000 'str' 'String'
|     | `-CompoundStmt 0x55e549389890 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e549389358 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e5493892c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e549389338 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e5493894d8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e549389380 <col:13> '<bound member function type>' ->postparse 0x55e5493786e8
|     |   | | `-CXXThisExpr 0x55e549389370 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e549389480 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e5493893d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e5493893b0 <col:23> 'P' lvalue ParmVar 0x55e5493649b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e549389418 <col:36> 'String' lvalue Var 0x55e549389000 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e549389438 <col:41> 'T' lvalue Var 0x55e5493892c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e549389468 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e549389458 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e5493894b8 <col:53> 'Args::Slot *' lvalue Var 0x55e549388c58 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e549389630 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e549389568 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e549389538 <col:17> 'bool' lvalue ->_read_status 0x55e54925bbb0
|     |   | |   `-ImplicitCastExpr 0x55e549389518 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e549389508 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e549389608 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e5493895a0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e549389580 <col:17> 'Vector<T> *' lvalue Var 0x55e549388ec0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e5493895e8 <col:30> 'T' lvalue Var 0x55e5493892c0 'sx' 'T'
|     |   |-BinaryOperator 0x55e5493897b0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e549389648 <col:13> 'int' lvalue Var 0x55e549388cf0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e549389798 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e549389778 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e5493896e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e5493896c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e5493896a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e549389668 <col:28> 'int' lvalue Var 0x55e549388cf0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e549389688 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e549389760 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e549389730 <col:49> 'bool' lvalue ->_read_status 0x55e54925bbb0
|     |   |         `-ImplicitCastExpr 0x55e549389710 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e549389700 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e549389860 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e5493897d0 <col:13> 'int' lvalue ParmVar 0x55e549364938 'flags' 'int'
|     |     `-UnaryOperator 0x55e549389848 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e549389830 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e549389810 <col:23> 'const int' lvalue Var 0x55e549348798 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e5493899f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e549389930 <col:9> 'bool' lvalue ->_read_status 0x55e54925bbb0
|       | `-ImplicitCastExpr 0x55e549389910 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e549389900 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e5493899d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e5493899b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e5493899a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e549389960 <col:25> 'int' lvalue Var 0x55e549388cf0 'read_status' 'int'
|           `-IntegerLiteral 0x55e549389980 <col:40> 'int' 1
|-AccessSpecDecl 0x55e549364d60 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e549364d88 prev 0x55e5492613e8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e549364e80 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e549364f70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e549389a50 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e549365060 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e549389a60 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e549365160 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e549365210 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e5493652b8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e5493652b8
| | `-ParmVarDecl 0x55e5493653c8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e549365b88 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e549365b88
|   `-ParmVarDecl 0x55e549365c98 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e549365438 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e549365598 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e549365790 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e549365640 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e5493656b8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e549389c40 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e549365a48 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e549389ab0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e549389a70 <col:20> 'void *' lvalue ParmVar 0x55e549365640 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e549365ab0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e549389b38 <col:32, col:45> 'char *' array Function 0x55e548ecbd18 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e549389b20 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e549389af0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e5493656b8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e549365b10 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e549389c00 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e549389bc0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e5493656b8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e549389cc0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e549365890 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e549365060 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e549389d48 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e549389d28 <line:840:13, col:22> 'void' array Function 0x55e548ecc078 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e549389d10 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e549389ce0 <col:22> 'char *' lvalue ->_slot 0x55e549365ab0
| |         `-CXXThisExpr 0x55e549389cd0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e549365990 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e549365160 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e549389f38 <col:22, line:844:9>
| |   `-CallExpr 0x55e549389ea0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e549389e88 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e549389e68 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e548fd7af8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e549389ed8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e549389db8 <col:20> 'void *' lvalue ->_ptr 0x55e549365a48
| |     |   `-CXXThisExpr 0x55e549389da8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e549389f08 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e549389ef0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e549389df8 <col:26> 'char *' lvalue ->_slot 0x55e549365ab0
| |     |     `-CXXThisExpr 0x55e549389de8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e549389f20 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e549389e38 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e549365b10
| |         `-CXXThisExpr 0x55e549389e28 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e549365a48 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e549365ab0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e549365b10 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e549365d08 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e549365d08
| | `-ParmVarDecl 0x55e549365e18 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e549365eb8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e549365eb8
|   `-ParmVarDecl 0x55e549365fc8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e549366168 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e549366038 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e5493660d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e549366400 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e5493665f8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e5493664c8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e549366778 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e549389f70 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e549389f50 <col:20> 'T *' lvalue ParmVar 0x55e5493664c8 'ptr' 'T *'
|   | `-CompoundStmt 0x55e549389fc0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e5493666c8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e549365160 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e54938a170 <col:22, line:857:9>
|   |   `-CallExpr 0x55e54938a140 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e549389fd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e549090228 0x55e54903a558
|   |     |-CXXOperatorCallExpr 0x55e54938a0d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e54938a060 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e54929d1d8 0x55e54929cdf8 0x55e54929ca28 0x55e54929c648 0x55e54929c268 0x55e54929be98
|   |     | `-MemberExpr 0x55e54938a030 <col:29> 'T *' lvalue ->_ptr 0x55e549366778
|   |     |   `-CXXThisExpr 0x55e54938a020 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e54938a110 <col:35> 'T' lvalue ->_slot 0x55e5493667d8
|   |       `-CXXThisExpr 0x55e54938a100 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e549366778 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e5493667d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e549366840 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e549366940 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e549366990 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e549366920 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e549366900 <col:31> 'int' 48
|-FieldDecl 0x55e5493669b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e549366a18 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e549366a78 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e549366bb0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e549377d80 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e549377de0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e549377e90 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e5493780b8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e549377fc0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e549378208 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e549378178 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e5493784d8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e5493782c8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e549378348 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e5493783f0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e5493786e8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e5493785a0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e549378618 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e5493787b8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e549378908 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e549378870 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e549378c98 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e5493789c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e549378a48 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e549378af0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e549378ba8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e549378ec0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e549378d70 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e549378de8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e5493791d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e549378f70 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e549379138 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e549379048 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e549098f50 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e549099068 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e5490990f8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e5490991c8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e5490992b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5490994c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e549099370 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e549099678 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e549099580 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e5490997c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e549099730 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e549099908 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e549099878 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e549099a50 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e5490999c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e549099b18 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e549099c60 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e549099bd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e549099d28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e549099e70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e549099de0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e549099fe8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e549099f28 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909a130 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e54909a0a0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909a1f8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e54909a3b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e54909a2a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e54909a320 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909a608 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e54909a478 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e54909a4f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e54909a6b8 <col:86> "" ""
|-CXXMethodDecl 0x55e54909a928 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e54909a798 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e54909a810 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909aad8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e54909a9e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e54909ac88 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e54909ab90 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e54909af58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e54909ad40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e54909adb8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e54909ae30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909b238 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e54909b020 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e54909b098 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e54909b110 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e54909b2f0 <col:115> "" ""
|-AccessSpecDecl 0x55e54909b360 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e54909b398 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e54909c8b0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e54909c8b0
| `-ParmVarDecl 0x55e54909c9b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e54909ca58 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e54909ca58
| `-ParmVarDecl 0x55e54909cb68 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e5490d2198 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e5492c3f90 <col:7>
|-CXXConstructorDecl 0x55e5490d2270 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e5490d2270
| `-ParmVarDecl 0x55e5490d2388 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e5490d23f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e5490d23f8
| `-ParmVarDecl 0x55e5490d2508 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e5492c6990 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492b2b38 prev 0x55e5492a7d40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e5492b2c30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e5492b2d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e5492b2e48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e5492b2fc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e5492b3148 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e5492b32c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e5492c40f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e5492c4968 <col:11>
|-CXXDestructorDecl 0x55e5492c41d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e5492c4308 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e5492c4308
| `-ParmVarDecl 0x55e5492c4418 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e5492c44b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e5492c44b8
| `-ParmVarDecl 0x55e5492c45c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e5492c7388 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e5492c7498 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e5492c7718 <col:11>
|   `-ReturnStmt 0x55e5492c7708 <col:11>
|     `-UnaryOperator 0x55e5492c76f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e5492c76e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e5492c7508 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e5492c7508
  `-ParmVarDecl 0x55e5492c7618 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492b3330 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e5492b3448 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e5492b34e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e5492b3550 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e5492b35b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e5492b3620 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e5492b3680 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e5492b3740 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e5492b37a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e5492b3800 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e5492c4008 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e5492b34e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e5492c4978 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e5492c49d0 <col:12>
|-CXXConstructorDecl 0x55e5492c4638 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e5492c4638
| `-ParmVarDecl 0x55e5492c4748 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e5492c47e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e5492c47e8
| `-ParmVarDecl 0x55e5492c48f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e5492c6a70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5492a1450 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e5492a1568 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e5492a15f8 <col:16, col:22> col:16 public
|-EnumDecl 0x55e5492a1620 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e5492a1720 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e5492a1800 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a1700 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e5492a16e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e5492a17b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e5492a1818 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492a1790 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e5492a1770 <col:22> 'int' 64
|-CXXMethodDecl 0x55e5492a1b58 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e5492a1840 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e5492a18c0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e5492a1938 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e5492a19b0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a1c18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a1e18 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e5492a1c90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e5492a1d08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a1ec8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a2028 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e5492a1f38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a20d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e5492a2430 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e5492a23c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e5492a2360 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e5492a2320 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e548d794e0 'void'
|       |-PointerType 0x55e5490217f0 'unsigned char *'
|       | `-BuiltinType 0x55e548d795e0 'unsigned char'
|       |-TypedefType 0x55e548e1ddc0 'size_t' sugar
|       | |-Typedef 0x55e548de9be0 'size_t'
|       | `-BuiltinType 0x55e548d79640 'unsigned long'
|       `-PointerType 0x55e548d79ce0 'void *'
|         `-BuiltinType 0x55e548d794e0 'void'
|-CXXMethodDecl 0x55e5492a28a8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e5492a24a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e5492a2518 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e5492a25b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e5492a2630 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e5492bcfa0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e5492bcf88 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e5492bcf50 <col:58> 'int' 0
| |-ParmVarDecl 0x55e5492a26b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e5492bcfc8 <col:76> 'int' 0
| |-ParmVarDecl 0x55e5492a2730 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e5492bcfe8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e5492a2978 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a29f8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e5492a2ab8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e5492a2b58 <col:20>
| `-OptimizeNoneAttr 0x55e5492a2bb0 <col:30>
|-CXXMethodDecl 0x55e5492a2c28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e5492a2cc8 <col:20>
| `-OptimizeNoneAttr 0x55e5492a2d20 <col:30>
|-CXXMethodDecl 0x55e5492a2d98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e5492a2e38 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a2ee8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e5492a2f88 <col:20>
| |-OptimizeNoneAttr 0x55e5492a2fe0 <col:30>
| `-WarnUnusedResultAttr 0x55e5492a3008 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a3060 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e5492a3100 <col:20>
| `-OptimizeNoneAttr 0x55e5492a3158 <col:30>
|-CXXMethodDecl 0x55e5492a31a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e5492a3248 <col:20>
| `-OptimizeNoneAttr 0x55e5492a32a0 <col:30>
|-CXXMethodDecl 0x55e5492a32e8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e5492a3388 <col:20>
| `-OptimizeNoneAttr 0x55e5492a33e0 <col:30>
|-CXXMethodDecl 0x55e5492a3428 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a34e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a35b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e5492a3678 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e5492a3738 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a3858 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e5492bd0b0 <col:54, line:99:5>
|   `-ReturnStmt 0x55e5492bd0a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e5492bd088 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e5492bd058 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e5492b3b38
|         `-CXXThisExpr 0x55e5492bd048 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e5492a39f8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e5492a3908 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e5492bd160 <col:67, line:103:5>
|   `-BinaryOperator 0x55e5492bd140 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e5492bd0d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e5492b3b38
|     | `-CXXThisExpr 0x55e5492bd0c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e5492bd128 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492bd108 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e5492a3908 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e5492a3af0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e5492bd1e0 <col:33, line:107:5>
|   `-ReturnStmt 0x55e5492bd1d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e5492bd1b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e5492bd188 <col:16> 'void *' lvalue ->_destructor_argument 0x55e5492b3ba0
|         `-CXXThisExpr 0x55e5492bd178 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e5492a3bb0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e5492bd810 <col:25, line:113:5>
|   |-ParenExpr 0x55e5492bd558 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e5492bd528 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492bd298 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e5492bd270 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e5492bd238 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e5492bd208 <col:24> '<bound member function type>' ->shared 0x55e5492a2c28
|   |   |       `-ImplicitCastExpr 0x55e5492bd258 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e5492bd1f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e5492bd2f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492bd2d8 <col:42> 'int' 0
|   |   `-CallExpr 0x55e5492bd488 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e5492bd470 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492bd450 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492bd4c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bd368 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e5492bd4e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bd390 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492bd4f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492bd3c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e5492bd510 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492bd438 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492bd420 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492bd3e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e5492bd758 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e5492bd588 <col:2> 'unsigned char *' lvalue ->_head 0x55e5492b3940
|   | | `-CXXThisExpr 0x55e5492bd578 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e5492bd740 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e5492bd720 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e5492bd5c8 <col:10> 'unsigned char *' lvalue ->_data 0x55e5492b39a8
|   |     | `-CXXThisExpr 0x55e5492bd5b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e5492bd708 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e5492bd6e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e5492bd608 <col:18> 'unsigned char *' lvalue ->_tail 0x55e5492b3a10
|   |         | `-CXXThisExpr 0x55e5492bd5f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e5492bd6d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e5492bd6b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e5492bd648 <col:26> 'unsigned char *' lvalue ->_end 0x55e5492b3a78
|   |             | `-CXXThisExpr 0x55e5492bd638 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e5492bd698 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e5492bd678 <col:33> 'int' 0
|   `-BinaryOperator 0x55e5492bd7f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e5492bd788 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e5492b3b38
|     | `-CXXThisExpr 0x55e5492bd778 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e5492bd7d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e5492bd7b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55e5492a3cf0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e5492a3c60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a3d98 <col:20>
| |-OptimizeNoneAttr 0x55e5492a3df0 <col:30>
| `-WarnUnusedResultAttr 0x55e5492a3e18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a3ee8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e5492a3e58 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a3f90 <col:20>
| |-OptimizeNoneAttr 0x55e5492a3fe8 <col:30>
| `-WarnUnusedResultAttr 0x55e5492a4010 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a4148 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e5492a4050 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a41f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a42f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e5492a4260 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a4398 <col:20>
| `-OptimizeNoneAttr 0x55e5492a43f0 <col:30>
|-CXXMethodDecl 0x55e5492a44b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e5492a4428 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a4560 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a4660 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e5492a45d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e5492a4708 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a4808 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e5492a4778 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a48b0 <col:20>
| `-OptimizeNoneAttr 0x55e5492a4908 <col:30>
|-CXXMethodDecl 0x55e5492a4a98 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e5492a4948 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e5492a49c0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e5492bd008 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e5492a4b48 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e5492a4d48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e5492a4bc0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e5492a4c38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492a4f58 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e5492a4e08 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e5492a4e80 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492a5168 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e5492a5018 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e5492a5098 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e5492bd018 <col:39> 'int' 0
|-CXXMethodDecl 0x55e5492a5238 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e5492a5300 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e5492a53c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e5492a5488 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a5550 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e5492a5698 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e5492a5608 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e5492a5868 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e5492a5758 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e5492a57d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492a5938 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e5492a59f8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55e5492a5a98 <col:20>
| `-OptimizeNoneAttr 0x55e5492a5af0 <col:30>
|-CXXMethodDecl 0x55e5492a5b40 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e5492a5be0 <col:20>
| `-OptimizeNoneAttr 0x55e5492a5c38 <col:30>
|-CXXMethodDecl 0x55e5492a5c88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e5492a5d48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a5e10 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e5492a5eb0 <col:20>
| `-OptimizeNoneAttr 0x55e5492a5f08 <col:30>
|-CXXMethodDecl 0x55e5492a6058 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e5492a5f48 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e5492a5fc0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492a61a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e5492a6118 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492a6280 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e5492a6340 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e5492a63e0 <col:20>
| `-OptimizeNoneAttr 0x55e5492a6438 <col:30>
|-CXXMethodDecl 0x55e5492a6488 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e5492a6528 <col:20>
| `-OptimizeNoneAttr 0x55e5492a6580 <col:30>
|-CXXMethodDecl 0x55e5492a65d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e5492a6698 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e5492a6738 <col:20>
| `-OptimizeNoneAttr 0x55e5492a6790 <col:30>
|-CXXMethodDecl 0x55e5492a67d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e5492a68f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e5492a6a68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e5492a69a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e5492a6b58 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e5492a6bf8 <col:20>
| `-OptimizeNoneAttr 0x55e5492a6c50 <col:30>
|-CXXMethodDecl 0x55e5492a6ca0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e5492a6d60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e5492a6f98 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e5492a6e10 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e5492a6e88 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a7048 <col:20>
| `-OptimizeNoneAttr 0x55e5492a70a0 <col:30>
|-CXXMethodDecl 0x55e5492a7148 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e5492a71e8 <col:20>
| `-OptimizeNoneAttr 0x55e5492a7240 <col:30>
|-CXXMethodDecl 0x55e5492a7290 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e5492a7330 <col:20>
| `-OptimizeNoneAttr 0x55e5492a7388 <col:30>
|-CXXMethodDecl 0x55e5492a73d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e5492a7470 <col:20>
| `-OptimizeNoneAttr 0x55e5492a74c8 <col:30>
|-CXXMethodDecl 0x55e5492a75c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e5492a7500 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e5492a7670 <col:20>
| `-OptimizeNoneAttr 0x55e5492a76c8 <col:30>
|-CXXMethodDecl 0x55e5492a7888 <line:316:5, col:95> col:45 used set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e5492a7700 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e5492a7778 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492a7938 <col:20>
| `-OptimizeNoneAttr 0x55e5492a7990 <col:30>
|-CXXMethodDecl 0x55e5492a7a38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e5492a7b58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e5492a7c78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e5492a7d18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e5492a7d40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e5492a7e68 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e5492a7f08 <col:20>
| `-OptimizeNoneAttr 0x55e5492a7f60 <col:30>
|-CXXMethodDecl 0x55e5492a8008 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e5492a80a8 <col:20>
| `-OptimizeNoneAttr 0x55e5492a8100 <col:30>
|-AccessSpecDecl 0x55e5492a8128 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e5492a8150 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e5492a8250 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e5492a82a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492a8230 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e5492a8210 <col:14> 'int' 48
|-CXXMethodDecl 0x55e5492a8308 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e5492a83a8 <col:20>
| `-OptimizeNoneAttr 0x55e5492a8400 <col:30>
|-CXXMethodDecl 0x55e5492a8478 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e5492a8518 <col:20>
| `-OptimizeNoneAttr 0x55e5492a8570 <col:30>
|-CXXMethodDecl 0x55e5492a8638 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e5492a85a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e5492a87d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e5492a8978 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e5492a8888 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e5492a8a20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e5492a8b20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8ed0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8b00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e5492a8ae0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e5492a8bb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8ee8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8b90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e5492a8b70 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e5492a8c40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8f00 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8c20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e5492a8c00 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e5492a8cd0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8f18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8cb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e5492a8c90 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e5492a8d60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8f30 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8d40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e5492a8d20 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e5492a8df0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e5492a8f48 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a8dd0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e5492a8db0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e5492a8e80 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e5492a8f60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492a8e60 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e5492a8e40 <col:14> 'int' 6
|-CXXMethodDecl 0x55e5492a8fc8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e5492a9068 <col:20>
| `-OptimizeNoneAttr 0x55e5492a90c0 <col:30>
|-CXXMethodDecl 0x55e5492a91b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e5492a90f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e5492a9260 <col:20>
| `-OptimizeNoneAttr 0x55e5492a92b8 <col:30>
|-CXXMethodDecl 0x55e5492a9328 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e5492a9450 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e5492a95c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e5492a9500 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e5492a9690 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e5492a9758 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e5492a9898 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e5492a9808 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e5492a9940 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e5492a9a40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e5492a9c40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a9a20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e5492a9a00 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e5492a9ad0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e5492a9c58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a9ab0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e5492a9a90 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e5492a9b60 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e5492a9c70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492a9b40 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e5492a9b20 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e5492a9bf0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e5492a9c88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492a9bd0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e5492a9bb0 <col:47> 'int' 16
|-CXXMethodDecl 0x55e5492a9ce8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e5492a9e58 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e5492a9d98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e5492a9f00 <col:20>
| `-OptimizeNoneAttr 0x55e5492a9f58 <col:30>
|-CXXMethodDecl 0x55e5492a9fa8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e5492bd930 <col:18, col:36>
|   `-ReturnStmt 0x55e5492bd920 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e5492bd908 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e5492bd8e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e5492bd8b8 <col:27> '<bound member function type>' ->xanno 0x55e5492a8008
|           `-CXXThisExpr 0x55e5492bd8a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e5492aa0a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e5492bda40 <col:30, col:48>
|   `-ReturnStmt 0x55e5492bda30 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e5492bda18 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e5492bd9f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e5492bd9c8 <col:39> '<bound member function type>' ->xanno 0x55e5492a7e68
|           `-CXXThisExpr 0x55e5492bd9b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e5492aa188 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e5492bdbd8 <col:24, col:50>
|   `-ReturnStmt 0x55e5492bdbc8 <col:26, col:47>
|     `-UnaryOperator 0x55e5492bdbb0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e5492bdb90 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e5492bdb78 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e5492bdb28 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e5492b2e48
|         |   `-CXXMemberCallExpr 0x55e5492bdb08 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e5492bdad8 <col:34> '<bound member function type>' ->xanno 0x55e5492a8008
|         |       `-CXXThisExpr 0x55e5492bdac8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e5492bdb58 <col:46> 'int' 0
|-CXXMethodDecl 0x55e5492aa290 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e5492bdda8 <col:36, col:62>
|   `-ReturnStmt 0x55e5492bdd98 <col:38, col:59>
|     `-UnaryOperator 0x55e5492bdd80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e5492bdd60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e5492bdd48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e5492bdcc0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e5492b2e48
|         |   `-CXXMemberCallExpr 0x55e5492bdca0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e5492bdc70 <col:46> '<bound member function type>' ->xanno 0x55e5492a7e68
|         |       `-CXXThisExpr 0x55e5492bdc60 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e5492bdcf0 <col:58> 'int' 0
|-CXXMethodDecl 0x55e5492aa3a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e5492bdf40 <col:26, col:53>
|   `-ReturnStmt 0x55e5492bdf30 <col:28, col:50>
|     `-UnaryOperator 0x55e5492bdf18 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e5492bdef8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e5492bdee0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e5492bde90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e5492b3148
|         |   `-CXXMemberCallExpr 0x55e5492bde70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e5492bde40 <col:36> '<bound member function type>' ->xanno 0x55e5492a8008
|         |       `-CXXThisExpr 0x55e5492bde30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e5492bdec0 <col:49> 'int' 0
|-CXXMethodDecl 0x55e5492aa4c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e5492be118 <col:38, col:65>
|   `-ReturnStmt 0x55e5492be108 <col:40, col:62>
|     `-UnaryOperator 0x55e5492be0f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e5492be0d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e5492be0b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e5492be028 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e5492b3148
|         |   `-CXXMemberCallExpr 0x55e5492be008 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e5492bdfd8 <col:48> '<bound member function type>' ->xanno 0x55e5492a7e68
|         |       `-CXXThisExpr 0x55e5492bdfc8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e5492be058 <col:61> 'int' 0
|-CXXMethodDecl 0x55e5492aa678 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e5492aa580 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e5492be7e8 <col:34, line:463:5>
|   |-ParenExpr 0x55e5492be630 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e5492be600 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492be268 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492be238 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492be188 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492be170 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492be130 <col:23> 'int' lvalue ParmVar 0x55e5492aa580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492be150 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492be218 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492be1e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492be1a8 <col:33> 'int' lvalue ParmVar 0x55e5492aa580 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e5492be200 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e5492be1c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e5492be2c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492be2a8 <col:56> 'int' 0
|   |   `-CallExpr 0x55e5492be560 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e5492be548 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492be528 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492be5a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492be3b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e5492be5b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492be3e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492be5d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492be420 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e5492be5e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492be510 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492be4f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492be4b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e5492be7d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e5492be7c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e5492be7a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e5492be770 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e5492be720 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e5492b2e48
|         |   `-CXXMemberCallExpr 0x55e5492be700 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e5492be6d0 <col:9> '<bound member function type>' ->xanno 0x55e5492a7e68
|         |       `-CXXThisExpr 0x55e5492be6c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e5492be788 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e5492be750 <col:21> 'int' lvalue ParmVar 0x55e5492aa580 'i' 'int'
|-CXXMethodDecl 0x55e5492aa8c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e5492aa738 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e5492aa7b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e5492bee78 <col:40, line:472:5>
|   |-ParenExpr 0x55e5492bec90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e5492bec60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492be940 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492be910 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492be860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492be848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492be808 <col:23> 'int' lvalue ParmVar 0x55e5492aa738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492be828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492be8f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492be8c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492be880 <col:33> 'int' lvalue ParmVar 0x55e5492aa738 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e5492be8d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e5492be8a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e5492be9a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492be980 <col:56> 'int' 0
|   |   `-CallExpr 0x55e5492bebc0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e5492beba8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492beb88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492bec00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bea10 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e5492bec18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bea40 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492bec30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492bea78 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e5492bec48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492beb70 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492beb58 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492beb18 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e5492bee58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e5492bee00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e5492bedd0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e5492bed80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e5492b2e48
|     | |   `-CXXMemberCallExpr 0x55e5492bed60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e5492bed30 <col:2> '<bound member function type>' ->xanno 0x55e5492a8008
|     | |       `-CXXThisExpr 0x55e5492bed20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e5492bede8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e5492bedb0 <col:14> 'int' lvalue ParmVar 0x55e5492aa738 'i' 'int'
|     `-ImplicitCastExpr 0x55e5492bee40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492bee20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e5492aa7b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e5492aaa88 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e5492aa990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e5492bf5f8 <col:36, line:485:5>
|   |-ParenExpr 0x55e5492bf360 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492bf330 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492bf010 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492befe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492beef0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492beed8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492bee98 <col:23> 'int' lvalue ParmVar 0x55e5492aa990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492beeb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492befc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492befa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492bef10 <col:33> 'int' lvalue ParmVar 0x55e5492aa990 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492bef88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492bef70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492bef30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492bef50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e5492bf070 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492bf050 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492bf290 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492bf278 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492bf258 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492bf2d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bf0e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e5492bf2e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bf118 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492bf300 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492bf150 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e5492bf318 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492bf240 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492bf228 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492bf1e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e5492bf5e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e5492bf5d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e5492bf5b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492bf588 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e5492bf528 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492bf4f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492bf470 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492bf450 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492bf420 <col:61> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492bf410 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492bf510 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492bf4a0 <col:74> 'int' lvalue ParmVar 0x55e5492aa990 'i' 'int'
|-CXXMethodDecl 0x55e5492aacd8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e5492aab48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e5492aabc0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e5492bfd48 <col:42, line:500:5>
|   |-ParenExpr 0x55e5492bfae0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492bfab0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492bf790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492bf760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492bf670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492bf658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492bf618 <col:23> 'int' lvalue ParmVar 0x55e5492aab48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492bf638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492bf740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492bf728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492bf690 <col:33> 'int' lvalue ParmVar 0x55e5492aab48 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492bf708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492bf6f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492bf6b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492bf6d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e5492bf7f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492bf7d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492bfa10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492bf9f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492bf9d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492bfa50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bf860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e5492bfa68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bf898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492bfa80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492bf8d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e5492bfa98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492bf9c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492bf9a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492bf968 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e5492bfd28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e5492bfcd8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e5492bfca8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e5492bfc50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e5492bfc20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e5492bfbd0 <col:48, col:57> 'char [48]' lvalue ->c 0x55e5492b2d20
|     |     |   `-CXXMemberCallExpr 0x55e5492bfbb0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e5492bfb80 <col:48> '<bound member function type>' ->xanno 0x55e5492a8008
|     |     |       `-CXXThisExpr 0x55e5492bfb70 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e5492bfc38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e5492bfc00 <col:61> 'int' lvalue ParmVar 0x55e5492aab48 'i' 'int'
|     `-ImplicitCastExpr 0x55e5492bfd10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492bfcf0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e5492aabc0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e5492aae98 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e5492aada0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e5492c04a8 <col:35, line:513:5>
|   |-ParenExpr 0x55e5492c01b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c0188 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492bfee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492bfeb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492bfdc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492bfda8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492bfd68 <col:23> 'int' lvalue ParmVar 0x55e5492aada0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492bfd88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492bfe90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492bfe78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492bfde0 <col:33> 'int' lvalue ParmVar 0x55e5492aada0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492bfe58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492bfe40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492bfe00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492bfe20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e5492bff40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492bff20 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c00e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c00d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c00b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c0128 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bffb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e5492c0140 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492bffe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c0158 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c0020 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e5492c0170 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c0098 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c0080 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c0040 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e5492c0498 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e5492c0480 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e5492c0468 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492c0438 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e5492c03b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492c0380 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492c0330 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492c0310 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492c02e0 <col:60> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492c02d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492c0398 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492c0360 <col:73> 'int' lvalue ParmVar 0x55e5492aada0 'i' 'int'
|-CXXMethodDecl 0x55e5492ab0e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e5492aaf58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e5492aafd0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e5492c0bc8 <col:41, line:528:5>
|   |-ParenExpr 0x55e5492c0950 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c0920 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c0640 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c0610 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c0520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c0508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c04c8 <col:23> 'int' lvalue ParmVar 0x55e5492aaf58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c04e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c05f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c05d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c0540 <col:33> 'int' lvalue ParmVar 0x55e5492aaf58 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c05b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c05a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c0560 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c0580 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e5492c06a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c0680 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c0880 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c0868 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c0848 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c08c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c0710 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e5492c08d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c0748 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c08f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c0780 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e5492c0908 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c0830 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c0818 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c07d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e5492c0ba8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e5492c0b58 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e5492c0b28 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e5492c0ad0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e5492c0a90 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e5492c0a40 <col:47, col:56> 'char [48]' lvalue ->c 0x55e5492b2d20
|     |     |   `-CXXMemberCallExpr 0x55e5492c0a20 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e5492c09f0 <col:47> '<bound member function type>' ->xanno 0x55e5492a8008
|     |     |       `-CXXThisExpr 0x55e5492c09e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e5492c0aa8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e5492c0a70 <col:60> 'int' lvalue ParmVar 0x55e5492aaf58 'i' 'int'
|     `-ImplicitCastExpr 0x55e5492c0b90 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492c0b70 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e5492aafd0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e5492ab2a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e5492ab1b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e5492c1298 <col:36, line:541:5>
|   |-ParenExpr 0x55e5492c1038 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c1008 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c0d60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c0d30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c0c40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c0c28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c0be8 <col:23> 'int' lvalue ParmVar 0x55e5492ab1b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c0c08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c0d10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c0cf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c0c60 <col:33> 'int' lvalue ParmVar 0x55e5492ab1b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c0cd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c0cc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c0c80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c0ca0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e5492c0dc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c0da0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c0f68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c0f50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c0f30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c0fa8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c0e30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e5492c0fc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c0e68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c0fd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c0ea0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e5492c0ff0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c0f18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c0f00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c0ec0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e5492c1288 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e5492c1270 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e5492c1258 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492c1228 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e5492c11d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492c11a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492c1150 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492c1130 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492c1100 <col:61> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492c10f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492c11b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492c1180 <col:74> 'int' lvalue ParmVar 0x55e5492ab1b0 'i' 'int'
|-CXXMethodDecl 0x55e5492ab478 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e5492ab368 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e5492ab3e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e5492ab528 <col:20>
| `-OptimizeNoneAttr 0x55e5492ab580 <col:30>
|-CXXMethodDecl 0x55e5492ab6b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e5492ab5c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e5492c1968 <col:35, line:562:5>
|   |-ParenExpr 0x55e5492c1708 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c16d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c1430 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c1400 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c1310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c12f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c12b8 <col:23> 'int' lvalue ParmVar 0x55e5492ab5c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c12d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c13e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c13c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c1330 <col:33> 'int' lvalue ParmVar 0x55e5492ab5c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c13a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c1390 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c1350 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c1370 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e5492c1490 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c1470 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c1638 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c1620 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c1600 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c1678 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c1500 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e5492c1690 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c1538 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c16a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c1570 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e5492c16c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c15e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c15d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c1590 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e5492c1958 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e5492c1940 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e5492c1928 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492c18f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e5492c18a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492c1870 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492c1820 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492c1800 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492c17d0 <col:60> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492c17c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492c1888 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492c1850 <col:73> 'int' lvalue ParmVar 0x55e5492ab5c0 'i' 'int'
|-CXXMethodDecl 0x55e5492ab8c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e5492ab778 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e5492ab7f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e5492c2048 <col:41, line:577:5>
|   |-ParenExpr 0x55e5492c1dd8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c1da8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c1b00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c1ad0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c19e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c19c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c1988 <col:23> 'int' lvalue ParmVar 0x55e5492ab778 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c19a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c1ab0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c1a98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c1a00 <col:33> 'int' lvalue ParmVar 0x55e5492ab778 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c1a78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c1a60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c1a20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c1a40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e5492c1b60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c1b40 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c1d08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c1cf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c1cd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c1d48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c1bd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e5492c1d60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c1c08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c1d78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c1c40 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e5492c1d90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c1cb8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c1ca0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c1c60 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e5492c2028 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e5492c1fd8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e5492c1fa8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e5492c1f48 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e5492c1f18 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e5492c1ec8 <col:47, col:56> 'char [48]' lvalue ->c 0x55e5492b2d20
|     |     |   `-CXXMemberCallExpr 0x55e5492c1ea8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e5492c1e78 <col:47> '<bound member function type>' ->xanno 0x55e5492a8008
|     |     |       `-CXXThisExpr 0x55e5492c1e68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e5492c1f30 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e5492c1ef8 <col:60> 'int' lvalue ParmVar 0x55e5492ab778 'i' 'int'
|     `-ImplicitCastExpr 0x55e5492c2010 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492c1ff0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e5492ab7f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e5492aba88 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e5492ab990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e5492c2778 <col:36, line:591:5>
|   |-ParenExpr 0x55e5492c24b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c2488 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c21e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c21b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c20c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c20a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c2068 <col:23> 'int' lvalue ParmVar 0x55e5492ab990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c2088 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c2190 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c2178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c20e0 <col:33> 'int' lvalue ParmVar 0x55e5492ab990 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c2158 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c2140 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c2100 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c2120 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e5492c2240 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c2220 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c23e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c23d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c23b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c2428 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c22b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e5492c2440 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c22e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c2458 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c2320 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e5492c2470 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c2398 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c2380 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c2340 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e5492c2768 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e5492c2750 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e5492c2738 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492c2708 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e5492c2680 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492c2650 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492c2600 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492c25e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492c25b0 <col:61> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492c25a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492c2668 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492c2630 <col:74> 'int' lvalue ParmVar 0x55e5492ab990 'i' 'int'
|-CXXMethodDecl 0x55e5492abcd8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e5492abb48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e5492abbc0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e5492c2e58 <col:42, line:606:5>
|   |-ParenExpr 0x55e5492c2be8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e5492c2bb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c2910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c28e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c27f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c27d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c2798 <col:23> 'int' lvalue ParmVar 0x55e5492abb48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c27b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c28c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e5492c28a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c2810 <col:33> 'int' lvalue ParmVar 0x55e5492abb48 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c2888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c2870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c2830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e5492c2850 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e5492c2970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c2950 <col:60> 'int' 0
|   |   `-CallExpr 0x55e5492c2b18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c2b00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c2ae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c2b58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c29e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e5492c2b70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c2a18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c2b88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c2a50 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e5492c2ba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c2ac8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c2ab0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c2a70 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e5492c2e38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e5492c2de8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e5492c2db8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e5492c2d58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e5492c2d28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e5492c2cd8 <col:48, col:57> 'char [48]' lvalue ->c 0x55e5492b2d20
|     |     |   `-CXXMemberCallExpr 0x55e5492c2cb8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e5492c2c88 <col:48> '<bound member function type>' ->xanno 0x55e5492a8008
|     |     |       `-CXXThisExpr 0x55e5492c2c78 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e5492c2d40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e5492c2d08 <col:61> 'int' lvalue ParmVar 0x55e5492abb48 'i' 'int'
|     `-ImplicitCastExpr 0x55e5492c2e20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e5492c2e00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e5492abbc0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e5492abe70 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e5492abda0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e5492c36c8 <col:33, line:620:5>
|   |-ParenExpr 0x55e5492c3440 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e5492c3410 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c3060 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c3030 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c2ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c2eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c2e78 <col:23> 'int' lvalue ParmVar 0x55e5492abda0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c2e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c3010 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e5492c2ff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c2ef0 <col:33> 'int' lvalue ParmVar 0x55e5492abda0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c2fd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c2fc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c2f10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e5492c2f98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e5492c2f80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e5492c2f48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e5492c30c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c30a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55e5492c3370 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c3358 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c3338 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c33b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c31a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e5492c33c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c31f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c33e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c3228 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e5492c33f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c3320 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c3308 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c32c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e5492c36b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e5492c36a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e5492c3688 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e5492c3658 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e5492c35d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e5492c35a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e5492c3550 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e5492b2d20
|             |   `-CXXMemberCallExpr 0x55e5492c3530 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e5492c3500 <col:67> '<bound member function type>' ->xanno 0x55e5492a7e68
|             |       `-CXXThisExpr 0x55e5492c34f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e5492c35b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e5492c3580 <col:80> 'int' lvalue ParmVar 0x55e5492abda0 'i' 'int'
|-CXXMethodDecl 0x55e5492ac088 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e5492abf30 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e5492abfb0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e5492c3ef0 <col:45, line:635:5>
|   |-ParenExpr 0x55e5492c3c38 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e5492c3c08 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e5492c38d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e5492c38a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e5492c3740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e5492c3728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e5492c36e8 <col:23> 'int' lvalue ParmVar 0x55e5492abf30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e5492c3708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e5492c3880 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e5492c3868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e5492c3760 <col:33> 'int' lvalue ParmVar 0x55e5492abf30 'i' 'int'
|   |   |     `-BinaryOperator 0x55e5492c3848 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e5492c3830 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e5492c3780 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e5492a8250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e5492c3808 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e5492c37f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e5492c37b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e5492c3930 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e5492c3910 <col:79> 'int' 0
|   |   `-CallExpr 0x55e5492c3b68 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e5492c3b50 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e5492c3b30 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e548e14b20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e5492c3ba8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c39a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e5492c3bc0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e5492c39e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e5492c3bd8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e5492c3a20 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e5492c3bf0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e5492c3b18 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e5492c3b00 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e5492c3ab8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e5492c3ed0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e5492c3e38 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e5492c3e08 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e5492c3da8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e5492c3d78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e5492c3d28 <col:54, col:63> 'char [48]' lvalue ->c 0x55e5492b2d20
|     |     |   `-CXXMemberCallExpr 0x55e5492c3d08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e5492c3cd8 <col:54> '<bound member function type>' ->xanno 0x55e5492a8008
|     |     |       `-CXXThisExpr 0x55e5492c3cc8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e5492c3d90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e5492c3d58 <col:67> 'int' lvalue ParmVar 0x55e5492abf30 'i' 'int'
|     `-CXXConstCastExpr 0x55e5492c3ea0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e5492c3e88 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e5492c3e50 <col:91> 'const void *' lvalue ParmVar 0x55e5492abfb0 'x' 'const void *'
|-CXXMethodDecl 0x55e5492ac158 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e5492c3f78 <col:34, line:640:5>
|   `-ReturnStmt 0x55e5492c3f68 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e5492c3f50 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e5492c3f20 <col:16> 'Packet *' lvalue ->_data_packet 0x55e5492b38d8
|         `-CXXThisExpr 0x55e5492c3f10 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e5492ac298 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e5492ac208 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e5492bd038 <col:46> 'bool' true
|-CXXMethodDecl 0x55e5492ac418 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e5492ac350 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e5492ac4c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e5492acc70 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e5492ac5c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acce0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac5a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e5492ac580 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e5492a1720 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e5492ac650 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492accf8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac630 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e5492ac610 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e5492a17b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e5492ac6e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac6c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e5492ac6a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e5492ac770 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac750 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e5492ac730 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e5492ac800 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac7e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e5492ac7c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e5492ac890 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac870 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e5492ac850 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e5492ac920 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac900 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e5492ac8e0 <col:19> 'int' EnumConstant 0x55e5492ac770 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e5492ac9b0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acd88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492ac990 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e5492ac970 <col:19> 'int' EnumConstant 0x55e5492ac890 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e5492aca80 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acda0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492aca60 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e5492aca40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e5492aca00 <col:23> 'int' EnumConstant 0x55e5492ac9b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e5492aca20 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e5492acb50 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e5492acdb8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e5492acb30 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e5492acb10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e5492acad0 <col:23> 'int' EnumConstant 0x55e5492ac9b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e5492acaf0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e5492acc20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e5492acdd0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e5492acc00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e5492acbe0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e5492acba0 <col:23> 'int' EnumConstant 0x55e5492ac9b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e5492acbc0 <col:40> 'int' 8
|-CXXMethodDecl 0x55e5492ace10 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e5492aceb0 <col:68> "" ""
|-CXXMethodDecl 0x55e5492acf48 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e5492acfe8 <col:45> "" ""
|-CXXMethodDecl 0x55e5492ad080 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e5492ad120 <col:57> "" ""
|-CXXMethodDecl 0x55e5492ad1b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e5492ad258 <col:45> "" ""
|-CXXMethodDecl 0x55e5492ad2f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e5492ad390 <col:57> "" ""
|-CXXMethodDecl 0x55e5492ad420 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e5492ad4c0 <col:51> "" ""
|-CXXMethodDecl 0x55e5492ad550 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e5492ad5f0 <col:63> "" ""
|-CXXMethodDecl 0x55e5492ad680 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e5492ad720 <col:53> "" ""
|-CXXMethodDecl 0x55e5492ad7b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e5492ad850 <col:65> "" ""
|-CXXMethodDecl 0x55e5492ad968 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e5492ad8d8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e5492ada10 <col:61> "" ""
|-CXXMethodDecl 0x55e5492adba8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e5492ada98 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e5492adb10 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e5492adc58 <col:67> "" ""
|-CXXMethodDecl 0x55e5492add70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e5492adce0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e5492ade18 <col:63> "" ""
|-CXXMethodDecl 0x55e5492adfb0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e5492adea0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e5492adf18 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e5492ae060 <col:69> "" ""
|-CXXMethodDecl 0x55e5492ae178 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e5492ae0e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e5492ae220 <col:63> "" ""
|-CXXMethodDecl 0x55e5492b08f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e5492b07e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e5492b0860 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e5492b09a8 <col:69> "" ""
|-CXXMethodDecl 0x55e5492b0ac0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e5492b0a30 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e5492b0b68 <col:62> "" ""
|-CXXMethodDecl 0x55e5492b0d00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e5492b0bf0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e5492b0c68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e5492b0db0 <col:68> "" ""
|-CXXMethodDecl 0x55e5492b0ec8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e5492b0e38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e5492b0f70 <col:63> "" ""
|-CXXMethodDecl 0x55e5492b1108 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e5492b0ff8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e5492b1070 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e5492b11b8 <col:69> "" ""
|-CXXMethodDecl 0x55e5492b1248 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e5492b12e8 <col:64> "" ""
|-CXXMethodDecl 0x55e5492b1378 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e5492b1418 <col:52> "" ""
|-CXXMethodDecl 0x55e5492b14a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e5492b1548 <col:67> "" ""
|-CXXMethodDecl 0x55e5492b15d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e5492b1678 <col:55> "" ""
|-CXXMethodDecl 0x55e5492b1790 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e5492b1700 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e5492b1838 <col:58> "" ""
|-CXXMethodDecl 0x55e5492b19d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e5492b18c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e5492b1938 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e5492b1a80 <col:62> "" ""
|-CXXMethodDecl 0x55e5492b1b98 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e5492b1b08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e5492b1c40 <col:58> "" ""
|-CXXMethodDecl 0x55e5492b1dd8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e5492b1cc8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e5492b1d40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e5492b1e88 <col:62> "" ""
|-CXXMethodDecl 0x55e5492b1fa0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e5492b1f10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e5492b2048 <col:60> "" ""
|-CXXMethodDecl 0x55e5492b21e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e5492b20d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e5492b2148 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e5492b2290 <col:64> "" ""
|-CXXMethodDecl 0x55e5492b23a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e5492b2318 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e5492b2450 <col:58> "" ""
|-CXXMethodDecl 0x55e5492b25e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e5492b24d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e5492b2550 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e5492b2698 <col:62> "" ""
|-CXXMethodDecl 0x55e5492b27b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e5492b2720 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e5492b2858 <col:59> "" ""
|-CXXMethodDecl 0x55e5492b29f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e5492b28e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e5492b2958 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e5492b2aa0 <col:63> "" ""
|-AccessSpecDecl 0x55e5492b2b10 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e5492b2b38 prev 0x55e5492a7d40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e5492b2c30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e5492b2d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e5492b2e48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e5492b2fc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e5492b3148 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e5492b32c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e5492c40f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e5492c4968 <col:11>
| |-CXXDestructorDecl 0x55e5492c41d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e5492c4308 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e5492c4308
| | `-ParmVarDecl 0x55e5492c4418 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e5492c44b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e5492c44b8
| | `-ParmVarDecl 0x55e5492c45c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e5492c7388 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e5492c7498 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e5492c7718 <col:11>
| |   `-ReturnStmt 0x55e5492c7708 <col:11>
| |     `-UnaryOperator 0x55e5492c76f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e5492c76e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e5492c7508 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e5492c7508
|   `-ParmVarDecl 0x55e5492c7618 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e5492b3330 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e5492b3448 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e5492b34e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e5492b3550 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e5492b35b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e5492b3620 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e5492b3680 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e5492b3740 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e5492b37a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e5492b3800 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e5492c4008 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e5492b34e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e5492c4978 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e5492c49d0 <col:12>
| |-CXXConstructorDecl 0x55e5492c4638 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e5492c4638
| | `-ParmVarDecl 0x55e5492c4748 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e5492c47e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e5492c47e8
| | `-ParmVarDecl 0x55e5492c48f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e5492c6a70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e5492b3878 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e5492b38d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e5492b3940 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e5492b39a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e5492b3a10 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e5492b3a78 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e5492b3ad8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e5492b3b38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e5492b3ba0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e5492b3c28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e5492b3878 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e5492c3fa0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e5492b3ad8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e5492c49e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e5492c4a40 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e5492b3dc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e5492b3d08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e5492b3ec0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e5492b40a8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e5492b3fb0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e5492b4378 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e5492b4160 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e5492b41d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e5492b4250 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492b4598 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e5492b4448 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e5492b44c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e5492bcb78 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e5492b4658 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e5492b46d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e5492b4748 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e5492bccd0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e5492bcc40 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e5492bce18 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e5492bcd88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e5492bcf10 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5493a9d18 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e5493a9e48 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55e5493a9ea8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55e5493a9f08 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x55e5493a9f68 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5493aa0f0 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e5493aa260 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55e5493aa240 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55e5493aa208 <col:28> 'int' 4
`-FieldDecl 0x55e5493aa308 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x55e5493aa2e8 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x55e5493aa2b0 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5493a9c00 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e5493a9d18 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e5493a9e48 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e5493a9ea8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55e5493a9f08 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x55e5493a9f68 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x55e5493aa028 <line:18:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55e5493aa0a0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55e5493aa0f0 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e5493aa260 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55e5493aa240 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55e5493aa208 <col:28> 'int' 4
| `-FieldDecl 0x55e5493aa308 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x55e5493aa2e8 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x55e5493aa2b0 <col:27> 'int' 4
`-FieldDecl 0x55e5493aa3c8 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5490193e8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e549019608 <line:216:2, col:23> col:10 __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55e549019738 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
`-FieldDecl 0x55e549019868 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e548fb7b80 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e549019358 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55e5490193e8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e549019608 <line:216:2, col:23> col:10 __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55e549019738 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| `-FieldDecl 0x55e549019868 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
`-FieldDecl 0x55e549019928 <line:214:5, line:219:9> col:9 __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon.3 }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5493a9a78 prev 0x55e5492a10e0 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e5493a9b70 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55e5493a9c00 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e5493a9d18 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55e5493a9e48 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55e5493a9ea8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55e5493a9f08 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x55e5493a9f68 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x55e5493aa028 <line:18:2, line:27:4> col:4 ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55e5493aa0a0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55e5493aa0f0 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55e5493aa260 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55e5493aa240 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55e5493aa208 <col:28> 'int' 4
| | `-FieldDecl 0x55e5493aa308 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x55e5493aa2e8 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x55e5493aa2b0 <col:27> 'int' 4
| `-FieldDecl 0x55e5493aa3c8 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x55e5493aa578 <line:17:5, line:39:7> col:7 ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55e5493aa600 <line:40:5, col:21> col:21 ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55e5493aa670 <line:41:5, col:21> col:21 ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e5493942c0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e5493943d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55e549394468 <col:16, col:22> col:16 public
|-EnumDecl 0x55e549394490 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55e549394590 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e5493947e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e549394570 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e549394550 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e549394620 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e5493947f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e549394600 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55e5493945e0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55e5493946b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e549394810 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e549394690 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55e549394670 <col:24> 'int' 34
| |-EnumConstantDecl 0x55e549394740 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e549394828 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e549394720 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55e549394700 <col:25> 'int' 95
| `-EnumConstantDecl 0x55e549394790 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55e5493961a0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e5493965d8 <col:7>
|-CXXConstructorDecl 0x55e5493962a8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55e5493962a8
| `-ParmVarDecl 0x55e5493963b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55e549396458 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e549396568 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55e5493df990 <col:7>
`-CXXDestructorDecl 0x55e5493986e8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e549394858 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55e5493949b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55e549394a48 <col:32, col:38> col:32 public
|-TypedefDecl 0x55e549394a80 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55e548ece070 'uint32_t' sugar
|   |-Typedef 0x55e548de24c8 'uint32_t'
|   `-TypedefType 0x55e548dbb5a0 '__uint32_t' sugar
|     |-Typedef 0x55e548dbb198 '__uint32_t'
|     `-BuiltinType 0x55e548d79620 'unsigned int'
|-CXXConstructorDecl 0x55e549394bc8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55e549394af0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55e5493960a8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e5493965e8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e549395960 'base' 'int'
| | `-ImplicitCastExpr 0x55e549396148 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e549396108 <col:16> 'int' lvalue ParmVar 0x55e549394af0 'b' 'int'
| `-CompoundStmt 0x55e549396658 <col:19, line:1046:5>
|-CXXMethodDecl 0x55e5493950c0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55e549394c90 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55e549394d10 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55e549394d88 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55e549394e08 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55e549394ec8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55e549394f48 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55e549395518 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55e549395190 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e549395478 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e549395238 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55e5493952d8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55e549395350 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e5493960c8 <col:82> 'const ArgContext' lvalue Var 0x55e54938a198 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e549397588 <col:94, line:1067:5>
| |   |-DeclStmt 0x55e5493967e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55e549396678 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55e5493967a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55e549396a08 <line:1055:9, col:91>
| |   | `-VarDecl 0x55e549396818 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55e5493969e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55e5493969c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55e549396970 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55e549396950 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55e5493968f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55e5493968a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55e5493968d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55e549396938 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55e549396918 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55e5493969a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55e549396b68 <line:1056:9, col:27>
| |   | `-VarDecl 0x55e549396b00 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55e549396fb0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55e549396ee0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55e549396e60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e549298058 0x55e5490e1638 0x55e5490e1310 0x55e5490d2af0 0x55e5490d27a0 0x55e5490d2090 0x55e5490a4a00 0x55e549030ec0
| |   | | |-CallExpr 0x55e549396da0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55e549396b90 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55e549396c40 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e549396c10 <col:19, col:23> '<bound member function type>' .begin 0x55e5490c1cf8
| |   | | | |   `-DeclRefExpr 0x55e549396bf0 <col:19> 'const String' lvalue ParmVar 0x55e549395238 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55e549396cb0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e549396c80 <col:32, col:36> '<bound member function type>' .end 0x55e5490c1f10
| |   | | | |   `-DeclRefExpr 0x55e549396c60 <col:32> 'const String' lvalue ParmVar 0x55e549395238 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55e549396cd0 <col:43> 'const bool' lvalue Var 0x55e549396678 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55e549396d38 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55e549396d18 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55e549396d60 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e549396b00 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55e549396d80 <col:73> 'const int' lvalue Var 0x55e549396818 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55e549396e40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55e549396e10 <col:16, col:20> '<bound member function type>' .end 0x55e5490c1f10
| |   | |     `-DeclRefExpr 0x55e549396df0 <col:16> 'const String' lvalue ParmVar 0x55e549395238 'str' 'const String &'
| |   | `-BinaryOperator 0x55e549396f90 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55e549396f28 <col:13> 'int' lvalue ->status 0x55e5493959c8
| |   |   | `-CXXThisExpr 0x55e549396f18 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55e549396f78 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55e549396f58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e549394620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55e549397200 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55e5493970e8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55e5493970d0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55e5493970b8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55e549396fd8 <col:13> 'int' lvalue ->status 0x55e5493959c8
| |   | | |     `-CXXThisExpr 0x55e549396fc8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55e549397098 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55e549397068 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55e549397018 <col:23> 'int' lvalue ->status 0x55e5493959c8
| |   | |   |   `-CXXThisExpr 0x55e549397008 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55e549397080 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55e549397048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55e5493971e0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55e549397180 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55e549397128 <col:13, col:18> '<bound member function type>' .error 0x55e54925b1c0
| |   |   | | `-DeclRefExpr 0x55e549397108 <col:13> 'const ArgContext' lvalue ParmVar 0x55e549395350 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55e5493971a8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55e549397158 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55e5493971d0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55e5493971c0 <col:20> 'bool' false
| |   |-DeclStmt 0x55e5493973d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55e549397380 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55e549397310 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55e549397538 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55e5493973f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55e549064e88
| |   | |-DeclRefExpr 0x55e549397438 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e549396b00 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55e549397508 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55e549397480 <col:64> 'V' lvalue ParmVar 0x55e5493952d8 'result' 'V &'
| |   `-ReturnStmt 0x55e549397578 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55e549397568 <col:16> 'bool' true
| `-CXXMethodDecl 0x55e5493e82e8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e5493e80c0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55e5493e8198 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55e5493e8200 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e5493ea080 <col:94, line:1067:5>
|     |-DeclStmt 0x55e5493e8af8 <line:1054:9, col:64>
|     | `-VarDecl 0x55e5493e8918 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55e5493e8a88 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55e5493e8a58 <col:36, col:55> 'const bool' lvalue Var 0x55e549054df8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55e5493e8cd8 <line:1055:9, col:91>
|     | `-VarDecl 0x55e5493e8b10 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55e5493e8c58 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55e5493e8c40 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55e5493e8c20 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55e5493e8c00 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55e5493e8be0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55e5493e8ba8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55e5493e8b88 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55e5493968d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55e5493e8bc8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55e549396918 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55e5493969a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55e5493e8e70 <line:1056:9, col:27>
|     | `-VarDecl 0x55e5493e8e08 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55e5493e92f8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55e5493e92a0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55e5493e9158 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55e5493e9128 <col:13> '<bound member function type>' ->parse 0x55e5493950c0
|     | | | | `-CXXThisExpr 0x55e5493e9118 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55e5493e8fb8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e5493e8f88 <col:19, col:23> '<bound member function type>' .begin 0x55e5490c1cf8
|     | | | |   `-DeclRefExpr 0x55e5493e8f68 <col:19> 'const String' lvalue ParmVar 0x55e5493e80c0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55e5493e9028 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e5493e8ff8 <col:32, col:36> '<bound member function type>' .end 0x55e5490c1f10
|     | | | |   `-DeclRefExpr 0x55e5493e8fd8 <col:32> 'const String' lvalue ParmVar 0x55e5493e80c0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55e5493e91c8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55e5493e91a8 <col:43> 'const bool' lvalue Var 0x55e5493e8918 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55e5493e90b0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55e5493e9098 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55e5493e9078 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55e5493e91e0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55e5493e90d8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55e5493e8e08 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55e5493e9218 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55e5493e91f8 <col:73> 'const int' lvalue Var 0x55e5493e8b10 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55e5493e9280 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55e5493e9250 <col:16, col:20> '<bound member function type>' .end 0x55e5490c1f10
|     | |     `-DeclRefExpr 0x55e5493e9230 <col:16> 'const String' lvalue ParmVar 0x55e5493e80c0 'str' 'const String &'
|     | `-BinaryOperator 0x55e5493e92d8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55e549396f28 <col:13> 'int' lvalue ->status 0x55e5493959c8
|     |   | `-CXXThisExpr 0x55e549396f18 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55e5493e92c0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55e549396f58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e549394620 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55e5493e9470 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55e5493e9390 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55e5493e9378 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55e5493e9360 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55e549396fd8 <col:13> 'int' lvalue ->status 0x55e5493959c8
|     | | |     `-CXXThisExpr 0x55e549396fc8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55e5493e9340 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55e5493e9310 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55e549397018 <col:23> 'int' lvalue ->status 0x55e5493959c8
|     | |   |   `-CXXThisExpr 0x55e549397008 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55e5493e9328 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55e549397048 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55e5493e9450 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55e5493e9400 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55e5493e93d0 <col:13, col:18> '<bound member function type>' .error 0x55e54925b1c0
|     |   | | `-DeclRefExpr 0x55e5493e93b0 <col:13> 'const ArgContext' lvalue ParmVar 0x55e5493e8200 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55e5493e9428 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55e549397158 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55e5493e9440 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55e5493971c0 <col:20> 'bool' false
|     |-DeclStmt 0x55e5493e99b8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55e5493e9960 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55e5493e9910 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55e5493e98f0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55e5493e9880 'type'
|     |       `-ElaboratedType 0x55e5493e9830 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55e5493e9810 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55e549054f50 'unsigned_type'
|     |           `-BuiltinType 0x55e548d79620 'unsigned int'
|     |-CallExpr 0x55e5493ea010 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55e5493e9ff8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55e5493e9f78 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55e5493e9e58 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55e549064e88 'extract_integer')
|     | |-ImplicitCastExpr 0x55e5493ea058 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55e5493ea040 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55e5493e9a18 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55e5493e8e08 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55e5493e9ae8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55e5493e9a98 <col:64> 'int':'int' lvalue ParmVar 0x55e5493e8198 'result' 'int &'
|     `-ReturnStmt 0x55e5493ea070 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55e549397568 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55e5493958d8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55e549395588 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e549395838 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e549395638 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55e5493956d8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55e549395750 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e5493960e8 <col:71> 'const ArgContext' lvalue Var 0x55e54938a198 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e549397d08 <col:83, line:1083:5>
| |   |-DeclStmt 0x55e549397650 <line:1071:9, col:12>
| |   | `-VarDecl 0x55e5493975e8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55e549397ce0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55e5493978f0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55e549397768 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55e549397730 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55e549397678 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55e5493976d0 <col:31> 'const String' lvalue ParmVar 0x55e549395638 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55e5493976f0 <col:36> 'V' lvalue Var 0x55e5493975e8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55e549397710 <col:39> 'const ArgContext' lvalue ParmVar 0x55e549395750 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55e5493978d0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55e5493978b0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55e549397898 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55e549397880 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55e549397790 <col:17> 'int' lvalue ->status 0x55e5493959c8
| |     |     |     `-CXXThisExpr 0x55e549397780 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55e549397860 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55e549397830 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55e5493977d0 <col:27> 'int' lvalue ->status 0x55e5493959c8
| |     |       |   `-CXXThisExpr 0x55e5493977c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55e549397848 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55e549397810 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55e549397920 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55e549397910 <col:20> 'bool' false
| |     `-IfStmt 0x55e549397cb8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55e5493979c0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55e549397990 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55e549397940 <col:18> 'int' lvalue ->status 0x55e5493959c8
| |       | |   `-CXXThisExpr 0x55e549397930 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55e5493979a8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55e549397970 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55e549397bf8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55e549397ba0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55e5493979f0 <line:1076:13> '<bound member function type>' ->range_error 0x55e549395fd8
| |       | | | `-CXXThisExpr 0x55e5493979e0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55e549397a20 <col:25> 'const ArgContext' lvalue ParmVar 0x55e549395750 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55e549397b00 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55e549397b78 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55e549397b58 <col:43> 'V' lvalue Var 0x55e5493975e8 'x' 'V'
| |       | `-ReturnStmt 0x55e549397be8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55e549397bd8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55e549397c98 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55e549397c58 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55e549397c18 <col:13> 'V' lvalue ParmVar 0x55e5493956d8 'result' 'V &'
| |         | `-DeclRefExpr 0x55e549397c38 <col:22> 'V' lvalue Var 0x55e5493975e8 'x' 'V'
| |         `-ReturnStmt 0x55e549397c88 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55e549397c78 <col:20> 'bool' true
| `-CXXMethodDecl 0x55e5493e7ca8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e5493e28b0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55e5493e2988 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55e5493e7bc0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e5493e88f8 <col:83, line:1083:5>
|     |-DeclStmt 0x55e5493e7f30 <line:1071:9, col:12>
|     | `-VarDecl 0x55e5493e7ec8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55e5493e88d0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55e5493e8560 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55e5493e8488 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55e5493e8450 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55e5493e8408 <col:14> '<bound member function type>' ->parse_saturating 0x55e5493e82e8
|       | |   | `-CXXThisExpr 0x55e5493e83f8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55e5493e7fa0 <col:31> 'const String' lvalue ParmVar 0x55e5493e28b0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55e5493e7fc0 <col:36> 'int':'int' lvalue Var 0x55e5493e7ec8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55e5493e7fe0 <col:39> 'const ArgContext' lvalue ParmVar 0x55e5493e7bc0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55e5493e8540 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55e5493e8520 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55e5493e8508 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55e5493e84f0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55e549397790 <col:17> 'int' lvalue ->status 0x55e5493959c8
|       |     |     `-CXXThisExpr 0x55e549397780 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55e5493e84d0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55e5493e84a0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55e5493977d0 <col:27> 'int' lvalue ->status 0x55e5493959c8
|       |       |   `-CXXThisExpr 0x55e5493977c0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55e5493e84b8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55e549397810 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55e5493e8580 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55e549397910 <col:20> 'bool' false
|       `-IfStmt 0x55e5493e88a8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55e5493e85c0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55e5493e8590 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55e549397940 <col:18> 'int' lvalue ->status 0x55e5493959c8
|         | |   `-CXXThisExpr 0x55e549397930 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55e5493e85a8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55e549397970 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e5493946b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55e5493e87e0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55e5493e8750 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55e5493979f0 <line:1076:13> '<bound member function type>' ->range_error 0x55e549395fd8
|         | | | `-CXXThisExpr 0x55e5493979e0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55e5493e85e0 <col:25> 'const ArgContext' lvalue ParmVar 0x55e5493e7bc0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55e5493e87b8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55e5493e8788 <col:31, col:50> 'const bool' lvalue Var 0x55e549054df8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55e5493e8728 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55e5493e8710 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55e5493e86f8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55e5493e86d8 <col:43> 'int':'int' lvalue Var 0x55e5493e7ec8 'x' 'int':'int'
|         | `-ReturnStmt 0x55e5493e87d0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55e549397bd8 <col:20> 'bool' false
|         `-CompoundStmt 0x55e5493e8888 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55e5493e8858 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55e5493e8800 <col:13> 'int':'int' lvalue ParmVar 0x55e5493e2988 'result' 'int &'
|           | `-ImplicitCastExpr 0x55e5493e8840 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55e5493e8820 <col:22> 'int':'int' lvalue Var 0x55e5493e7ec8 'x' 'int':'int'
|           `-ReturnStmt 0x55e5493e8878 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55e549397c78 <col:20> 'bool' true
|-FieldDecl 0x55e549395960 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55e5493959c8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55e549395a18 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55e549395cd0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55e549395a58 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55e549395ad8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55e549395b50 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55e549395bd0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55e549395fd8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55e549395da0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55e549395e18 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55e549395eb0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55e549398568 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55e549398568
| `-ParmVarDecl 0x55e549398678 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55e5493987f8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e549398908 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e5493df9a0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e5493df970 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55e5493df940 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e5493df910 <col:7> 'IntArg' lvalue ParmVar 0x55e549398908 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e549395960 'base' 'int'
| | `-ImplicitCastExpr 0x55e5493dfa98 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e5493dfa68 <col:7> 'int' xvalue .base 0x55e549395960
| |     `-CXXStaticCastExpr 0x55e5493dfa38 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e5493dfa08 <col:7> 'IntArg' lvalue ParmVar 0x55e549398908 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e5493959c8 'status' 'int'
| | `-ImplicitCastExpr 0x55e5493dfb68 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e5493dfb38 <col:7> 'int' xvalue .status 0x55e5493959c8
| |     `-CXXStaticCastExpr 0x55e5493dfb08 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e5493dfad8 <col:7> 'IntArg' lvalue ParmVar 0x55e549398908 '' 'IntArg &&'
| `-CompoundStmt 0x55e5493dfbc0 <col:7>
`-CXXDestructorDecl 0x55e5493deb00 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e54939ce30 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e54939d088 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e5493dea28 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e5493defa0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55e5493def80 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55e5493df010 <col:19>
|-CXXConstructorDecl 0x55e5493dec08 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55e5493dec08
| `-ParmVarDecl 0x55e5493ded18 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55e5493dedb8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e5493deec8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e5493dfbd0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e5493df8f0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55e5493df8c0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55e5493df890 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55e5493deec8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55e5493dfc40 <col:19>
`-CXXDestructorDecl 0x55e5493df050 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
