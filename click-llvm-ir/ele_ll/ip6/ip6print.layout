
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b053ffb8 prev 0x55b7b0537758 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b05400b0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55b7b0540140 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55b7b05401b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55b7b0540278 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55b7b0540340 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55b7b05404b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55b7b05403f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55b7b0540560 <col:24>
| `-OptimizeNoneAttr 0x55b7b05405b8 <col:34>
|-CXXMethodDecl 0x55b7b0540600 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55b7b05408b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55b7b05406b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b7b0540728 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55b7b05407a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55b7b0540970 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55b7b05409a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55b7b0540a10 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55b7b0540a98 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55b7b0540db8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55b7b0540b50 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b7b0540bc8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55b7b0540c40 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55b7b0540cc0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55b7b0540ed0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55b7b0548848 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b7b0548848
| `-ParmVarDecl 0x55b7b0548958 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55b7b05489f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b7b05489f8
| `-ParmVarDecl 0x55b7b0548b08 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55b7b0658910 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0532fd0 prev 0x55b7b0532d50 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b05330c8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55b7b0533158 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55b7b05331b8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55b7b05332a8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55b7b05333a8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55b7b0533578 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55b7b0533428 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55b7b05334a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55b7b0533708 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55b7b0533640 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55b7b05337b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55b7b05338e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55b7b0533820 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55b7b0533a88 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55b7b05339c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55b7b0533c28 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55b7b0533b68 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55b7b0533cd0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55b7b0533dd0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55b7b0533eb0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0533db0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55b7b0533d90 <col:26> 'int' 1
| `-EnumConstantDecl 0x55b7b0533e60 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55b7b0533ec8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0533e40 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55b7b0533e20 <col:44> 'int' 2
|-CXXMethodDecl 0x55b7b0534010 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55b7b0533ef8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55b7b0533f78 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55b7b0534168 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55b7b05340d8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55b7b05343a8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55b7b0534228 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55b7b05342a0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55b7b0534458 <col:20>
| `-OptimizeNoneAttr 0x55b7b05344b0 <col:30>
|-CXXMethodDecl 0x55b7b05345b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55b7b05344f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55b7b0534660 <col:20>
| `-OptimizeNoneAttr 0x55b7b05346b8 <col:30>
|-CXXMethodDecl 0x55b7b0534708 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55b7b05347d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55b7b05348e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55b7b0534970 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55b7b05349f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55b7b0534a80 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55b7b0534b08 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55b7b0534b98 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55b7b0534c58 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55b7b0534ce0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55b7b0534d68 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55b7b0534df0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55b7b0534e78 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55b7b0534f00 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55b7b0534f90 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55b7b0535050 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55b7b05350e0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55b7b0535230 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55b7b0535198 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55b7b05353c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55b7b05352f0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55b7b0535670 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55b7b0535478 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55b7b05354f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55b7b0535578 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55b7b0535728 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55b7b0535830 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b7b0535ac0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0535810 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b05357f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55b7b05358c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b7b0535ad8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05358a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55b7b0535880 <col:32> 'int' 20
| |-EnumConstantDecl 0x55b7b0535950 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b7b0535af0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0535930 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55b7b0535910 <col:38> 'int' 90
| |-EnumConstantDecl 0x55b7b05359e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b7b0535b08 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05359c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55b7b05359a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55b7b0535a70 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55b7b0535b20 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0535a50 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55b7b0535a30 <col:32> 'int' 2000
|-CXXMethodDecl 0x55b7b0535b60 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55b7b0535fa0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b7b0535e10 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55b7b0535e88 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0536070 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55b7b05361f0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55b7b0536120 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b05363f8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b7b05362a8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55b7b0536320 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b05364f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55b7b0536598 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55b7b0536660 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b05366f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55b7b0536920 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05366d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55b7b05366b0 <col:36> 'int' EnumConstant 0x55b7b0536660 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b0536740 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b0536790 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b05367e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b0536830 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b7b0536880 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55b7b05368d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55b7b0536a08 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55b7b0536948 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55b7b0536ad0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55b7b0536b90 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55b7b0536c50 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55b7b0536d10 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55b7b0536e28 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55b7b0536ef0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55b7b0537070 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55b7b0536fa0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55b7b0537198 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55b7b0537398 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55b7b0537248 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55b7b05372c8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55b7b0544ce8 <col:54, line:127:5>
|   |-ParenExpr 0x55b7b0544b98 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55b7b0544b68 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0544858 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b7b0544830 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55b7b0544818 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55b7b0544800 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55b7b05447d0 <col:31> 'Router *' lvalue ->_router 0x55b7b05426b0
|   |   |         `-CXXThisExpr 0x55b7b05447c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b7b05448b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0544898 <col:48> 'int' 0
|   |   `-CallExpr 0x55b7b0544ac8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0544ab0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0544a90 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0544b08 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0544928 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55b7b0544b20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0544948 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55b7b0544b38 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0544980 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55b7b0544b50 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0544a78 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0544a60 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0544a18 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55b7b0544c30 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55b7b0544bc8 <col:9> 'Router *' lvalue ->_router 0x55b7b05426b0
|   | | `-CXXThisExpr 0x55b7b0544bb8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55b7b0544c18 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b7b0544bf8 <col:19> 'Router *' lvalue ParmVar 0x55b7b0537248 'r' 'Router *'
|   `-BinaryOperator 0x55b7b0544cc8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55b7b0544c60 <col:9> 'int' lvalue ->_eindex 0x55b7b0542718
|     | `-CXXThisExpr 0x55b7b0544c50 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55b7b0544cb0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b0544c90 <col:19> 'int' lvalue ParmVar 0x55b7b05372c8 'eindex' 'int'
|-CXXMethodDecl 0x55b7b0537520 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55b7b0537458 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55b7b05375f0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55b7b05376b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55b7b0537758 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55b7b05379a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55b7b0537820 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55b7b05378a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55b7b0537a58 <col:20>
| `-OptimizeNoneAttr 0x55b7b0537ab0 <col:30>
|-CXXMethodDecl 0x55b7b0537bb8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b7b0537af0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55b7b0537c60 <col:20>
| `-OptimizeNoneAttr 0x55b7b0537cb8 <col:30>
|-CXXMethodDecl 0x55b7b0537d88 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b7b0537cf8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55b7b0537e30 <col:20>
| `-OptimizeNoneAttr 0x55b7b0537e88 <col:30>
|-CXXMethodDecl 0x55b7b0538018 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55b7b0537ec0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55b7b0537f40 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55b7b05381a8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b7b05380e0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b7b05382f8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b7b0538268 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b7b0538448 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b7b05383b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b7b0538598 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b7b0538508 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b7b0538858 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55b7b0538650 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55b7b05386d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55b7b0538778 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55b7b0538930 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55b7b05389f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55b7b0538cc0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b7b0538b70 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55b7b0538be8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0538de8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55b7b0538fc0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55b7b0538ea0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55b7b0538f20 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55b7b05391a8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55b7b0539088 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55b7b0539108 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55b7b0539518 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b7b0539268 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b7b05392e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b7b0539360 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b7b05442d0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b05442b0 <col:106> 'int' 0
| `-ParmVarDecl 0x55b7b05393d8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544308 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b05442e8 <col:126> 'int' 0
|-CXXMethodDecl 0x55b7b05398b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b7b05395e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b7b0539680 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b7b0539700 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55b7b0539778 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544340 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b0544320 <col:114> 'int' 0
|-CXXMethodDecl 0x55b7b0539c48 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b7b0539990 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55b7b0539a08 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b7b0539a88 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55b7b0544358 <col:96> 'int' 0
| `-ParmVarDecl 0x55b7b0539b00 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544398 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b0544378 <col:116> 'int' 0
|-CXXMethodDecl 0x55b7b0539fc8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b7b0539d18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b7b0539d90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b0539e10 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b7b05443d0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b05443b0 <col:109> 'int' 0
| `-ParmVarDecl 0x55b7b0539e88 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544408 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b05443e8 <col:129> 'int' 0
|-CXXMethodDecl 0x55b7b053a348 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b7b053a098 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b7b053a110 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b053a190 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55b7b053a208 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544440 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b0544420 <col:117> 'int' 0
|-CXXMethodDecl 0x55b7b053a6d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b7b053a420 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053a498 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b053a518 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55b7b0544458 <col:99> 'int' 0
| `-ParmVarDecl 0x55b7b053a590 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b7b0544498 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b7b0544478 <col:119> 'int' 0
|-CXXMethodDecl 0x55b7b053aaf8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55b7b053a7a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b7b053a828 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b7b053a8a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b053a920 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b7b05444d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b05444b0 <col:108> 'int' 0
| `-ParmVarDecl 0x55b7b053a9a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55b7b0544508 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55b7b05444e8 <col:141> 'int' 0
|-CXXMethodDecl 0x55b7b053af18 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b7b053abd0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b7b053ac50 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b7b053acc8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b053ad48 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55b7b053adc8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b7b0544520 <col:121> 'int' 0
|-CXXMethodDecl 0x55b7b053b348 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b7b053aff8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55b7b053b078 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55b7b053b0f0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b053b170 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55b7b0544540 <col:98> 'int' 0
| `-ParmVarDecl 0x55b7b053b1f0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b7b0544560 <col:123> 'int' 0
|-CXXMethodDecl 0x55b7b053b610 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55b7b053b420 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b7b053b4a0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55b7b053b520 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55b7b0544580 <col:80> 'int' 0
|-EnumDecl 0x55b7b053b6c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55b7b053b7d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b7b053ba60 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b053b7b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55b7b053b790 <col:42> 'int' 1
| |-EnumConstantDecl 0x55b7b053b860 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b7b053ba78 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b053b840 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55b7b053b820 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b7b053b8f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b7b053ba90 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b053b8d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55b7b053b8b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55b7b053b980 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b7b053baa8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b053b960 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55b7b053b940 <col:36> 'int' 7
| `-EnumConstantDecl 0x55b7b053ba10 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55b7b053bac0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b053b9f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55b7b053b9d0 <col:34> 'int' 6
|-CXXMethodDecl 0x55b7b053bd78 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55b7b053bae8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55b7b053bb88 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b7b053bc08 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55b7b053bc80 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55b7b0544638 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55b7b0544620 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55b7b0544608 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55b7b05445e8 <col:98, col:105> 'String' (CXXTemporary 0x55b7b05445e8)
|           `-CXXTemporaryObjectExpr 0x55b7b05445b0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55b7b053c018 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55b7b053be48 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b7b053bec0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b7b053bf38 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b7b05446e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b7b05446d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b7b05446b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b7b0544698 <col:94, col:101> 'String' (CXXTemporary 0x55b7b0544698)
| |         `-CXXTemporaryObjectExpr 0x55b7b0544660 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55b7b0544ed0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55b7b0544e48 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55b7b0544e18 <col:9> '<bound member function type>' ->add_task_handlers 0x55b7b053bd78
|     | `-CXXThisExpr 0x55b7b0544e08 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b7b0544e88 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b7b0544d88 <col:27> 'Task *' lvalue ParmVar 0x55b7b053be48 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b7b0544ea0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b7b0544da8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55b7b053bec0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55b7b0544eb8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b7b0544dc8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b7b053ba10 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b7b0544de8 <col:62> 'const String' lvalue ParmVar 0x55b7b053bf38 'prefix' 'const String &'
|-CXXMethodDecl 0x55b7b053c228 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55b7b053c0e0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b7b053c158 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b7b0544798 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b7b0544780 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b7b0544768 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b7b0544748 <col:70, col:77> 'String' (CXXTemporary 0x55b7b0544748)
| |         `-CXXTemporaryObjectExpr 0x55b7b0544710 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55b7b05450a8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55b7b0545020 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55b7b0544ff0 <col:9> '<bound member function type>' ->add_task_handlers 0x55b7b053bd78
|     | `-CXXThisExpr 0x55b7b0544fe0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b7b0545060 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b7b0544f60 <col:27> 'Task *' lvalue ParmVar 0x55b7b053c0e0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b7b0545078 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55b7b0544f80 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55b7b0545090 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b7b0544fa0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b7b053ba10 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b7b0544fc0 <col:57> 'const String' lvalue ParmVar 0x55b7b053c158 'prefix' 'const String &'
|-CXXMethodDecl 0x55b7b053c508 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55b7b053c2f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053c370 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053c3e8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55b7b053c7b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55b7b053c5d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053c658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053c6d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55b7b053caa8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b7b053c888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053c908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053c980 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55b7b053cd58 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55b7b053cb78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053cbf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053cc78 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55b7b053d008 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55b7b053ce28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053cea8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053cf28 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55b7b053d2b8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55b7b053d0d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053d158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053d1d0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55b7b053d568 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55b7b053d388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053d408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053d488 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55b7b053d878 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55b7b053d690 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053d710 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053d790 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55b7b053db58 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55b7b053d948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053d9c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053da70 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55b7b053de38 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55b7b053dc28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053dca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053dd50 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55b7b053e0a0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b7b053df08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b7b053df88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b7b053e000 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55b7b053e348 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55b7b053e170 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b7b053e1f0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b7b053e268 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55b7b053e5f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55b7b053e418 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053e498 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053e518 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55b7b053e8a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55b7b053e6c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053e748 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053e7c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55b7b053eb58 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55b7b053e978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053e9f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053ea70 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55b7b053ee28 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55b7b053ec28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053eca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b7b053ed48 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55b7b053f158 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55b7b053eef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b7b053ef78 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55b7b053eff0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55b7b053f068 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b05447b0 <col:93> 'bool' false
|-CXXMethodDecl 0x55b7b053f340 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b7b053f228 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55b7b053f2a8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55b7b053f518 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b7b053f400 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55b7b053f480 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55b7b053f7f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b7b053f5d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55b7b053f650 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55b7b053f6d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55b7b053f748 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b053fae8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b7b053f8c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55b7b053f940 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55b7b053f9c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55b7b053fa38 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b053fd20 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55b7b053fbc0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55b7b053fc40 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55b7b053ff08 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55b7b053fde8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55b7b053fe68 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55b7b053ffb8 prev 0x55b7b0537758 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b7b05400b0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55b7b0540140 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55b7b05401b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55b7b0540278 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55b7b0540340 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55b7b05404b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55b7b05403f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55b7b0540560 <col:24>
| | `-OptimizeNoneAttr 0x55b7b05405b8 <col:34>
| |-CXXMethodDecl 0x55b7b0540600 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55b7b05408b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55b7b05406b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b7b0540728 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55b7b05407a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55b7b0540970 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55b7b05409a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55b7b0540a10 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55b7b0540a98 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55b7b0540db8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55b7b0540b50 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b7b0540bc8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55b7b0540c40 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55b7b0540cc0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55b7b0540ed0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55b7b0548848 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b7b0548848
| | `-ParmVarDecl 0x55b7b0548958 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55b7b05489f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b7b05489f8
| | `-ParmVarDecl 0x55b7b0548b08 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55b7b0658910 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b7b0540f48 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55b7b0540fe8 <col:38> "" ""
|-CXXMethodDecl 0x55b7b0541078 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55b7b0541118 <col:44> "" ""
|-AccessSpecDecl 0x55b7b0541188 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55b7b05411b0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55b7b05412b0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55b7b0541300 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0541290 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55b7b0541270 <col:27> 'int' 4
|-FieldDecl 0x55b7b05413b8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55b7b0541568 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55b7b0541620 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55b7b05426b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55b7b0542718 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55b7b0542868 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55b7b05427a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55b7b0542a18 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55b7b0542928 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55b7b0542bf8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55b7b0542ad8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55b7b0542b58 <col:25> col:28 'int'
|-CXXMethodDecl 0x55b7b0542ea0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b0542cc0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55b7b0542d40 <col:28> col:31 'int'
| `-ParmVarDecl 0x55b7b0542db8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55b7b0542f58 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55b7b0543020 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55b7b0543070 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55b7b05430c0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55b7b05432a0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55b7b0543150 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55b7b05431c8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0543548 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55b7b0543368 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55b7b05433e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55b7b0543460 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0543768 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55b7b0543618 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55b7b0543698 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55b7b0543aa0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55b7b0543828 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55b7b05438a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55b7b0543920 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55b7b05439a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55b7b0543c88 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b7b0543b70 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55b7b0543bf0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55b7b0543dd8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55b7b0543d48 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55b7b0544158 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55b7b0543e98 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55b7b0543f18 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55b7b0543f90 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55b7b0544010 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55b7b0544270 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Print
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _label
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
       136 |   unsigned int _bytes
       140 |   _Bool _contents
           | [sizeof=144, dsize=141, align=8,
           |  nvsize=141, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0305e60 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b7b0305f78 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55b7b0306018 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55b7b0306078 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55b7b03060d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55b7b0306188 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0306490 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b03065a8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55b7b0306650 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55b7b03066b8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55b7b0306748 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55b7b030c7e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b030cc18 <col:12>
|-CXXConstructorDecl 0x55b7b030c8e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b030c9f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b0306650 'data' 'const char *'
| | `-ImplicitCastExpr 0x55b7b030f1a0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55b7b030f170 <col:12> 'const char *const' lvalue .data 0x55b7b0306650
| |     `-DeclRefExpr 0x55b7b030f150 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b03066b8 'length' 'int'
| | `-ImplicitCastExpr 0x55b7b030f230 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b030f200 <col:12> 'const int' lvalue .length 0x55b7b03066b8
| |     `-DeclRefExpr 0x55b7b030f1e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b0306748 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55b7b030f2c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55b7b030f290 <col:12> 'String::memo_t *const' lvalue .memo 0x55b7b0306748
| |     `-DeclRefExpr 0x55b7b030f270 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55b7b030f318 <col:12>
|-CXXConstructorDecl 0x55b7b030ca98 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b030ca98
| `-ParmVarDecl 0x55b7b030cba8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55b7b0312100 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b7b031db18 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b031dc28 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55b7b031e140 <col:12>
|   |-BinaryOperator 0x55b7b031df58 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b7b031df10 <col:12> 'const char *' lvalue ->data 0x55b7b0306650
|   | | `-CXXThisExpr 0x55b7b031df00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b7b031df40 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b031ded0 <col:12> 'const char *const' lvalue .data 0x55b7b0306650
|   |     `-DeclRefExpr 0x55b7b031deb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b7b031e020 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55b7b031dfd8 <col:12> 'int' lvalue ->length 0x55b7b03066b8
|   | | `-CXXThisExpr 0x55b7b031dfc8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b7b031e008 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b031df98 <col:12> 'const int' lvalue .length 0x55b7b03066b8
|   |     `-DeclRefExpr 0x55b7b031df78 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b7b031e0e8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55b7b031e0a0 <col:12> 'String::memo_t *' lvalue ->memo 0x55b7b0306748
|   | | `-CXXThisExpr 0x55b7b031e090 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b7b031e0d0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b031e060 <col:12> 'String::memo_t *const' lvalue .memo 0x55b7b0306748
|   |     `-DeclRefExpr 0x55b7b031e040 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55b7b031e130 <col:12>
|     `-UnaryOperator 0x55b7b031e118 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b031e108 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55b7b031dc98 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b031dc98
  `-ParmVarDecl 0x55b7b031dda8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b02fd3d0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b02fd4e8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55b7b02fd578 <col:16, col:22> col:16 public
|-TypedefDecl 0x55b7b02fd5b8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55b7affd0fd0 'const char *'
|   `-QualType 0x55b7affd0521 'const char' const
|     `-BuiltinType 0x55b7affd0520 'char'
|-TypedefDecl 0x55b7b02fd640 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55b7b02fd610 'String::const_iterator' sugar
|   |-Typedef 0x55b7b02fd5b8 'const_iterator'
|   `-PointerType 0x55b7affd0fd0 'const char *'
|     `-QualType 0x55b7affd0521 'const char' const
|       `-BuiltinType 0x55b7affd0520 'char'
|-TypedefDecl 0x55b7b02fd7b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55b7b02fd720 'int (String::*)() const'
|   |-RecordType 0x55b7b02fd460 'String'
|   | `-CXXRecord 0x55b7b02fd3d0 'String'
|   `-ParenType 0x55b7b02fd6c0 'int () const' sugar
|     `-FunctionProtoType 0x55b7b02d2260 'int () const' const cdecl
|       `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b02fd818 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55b7b0126c20 'int64_t' sugar
|   |-Typedef 0x55b7b0039390 'int64_t'
|   `-TypedefType 0x55b7b0012630 '__int64_t' sugar
|     |-Typedef 0x55b7b0012208 '__int64_t'
|     `-BuiltinType 0x55b7affd05a0 'long'
|-TypedefDecl 0x55b7b02fd880 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55b7b0126b40 'uint64_t' sugar
|   |-Typedef 0x55b7b0039530 'uint64_t'
|   `-TypedefType 0x55b7b00126c0 '__uint64_t' sugar
|     |-Typedef 0x55b7b0012278 '__uint64_t'
|     `-BuiltinType 0x55b7affd0640 'unsigned long'
|-TypedefDecl 0x55b7b02fd910 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55b7b02fd8e0 'String::intmax_t' sugar
|   |-Typedef 0x55b7b02fd818 'intmax_t'
|   `-TypedefType 0x55b7b0126c20 'int64_t' sugar
|     |-Typedef 0x55b7b0039390 'int64_t'
|     `-TypedefType 0x55b7b0012630 '__int64_t' sugar
|       |-Typedef 0x55b7b0012208 '__int64_t'
|       `-BuiltinType 0x55b7affd05a0 'long'
|-TypedefDecl 0x55b7b02fd9a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55b7b02fd970 'String::uintmax_t' sugar
|   |-Typedef 0x55b7b02fd880 'uintmax_t'
|   `-TypedefType 0x55b7b0126b40 'uint64_t' sugar
|     |-Typedef 0x55b7b0039530 'uint64_t'
|     `-TypedefType 0x55b7b00126c0 '__uint64_t' sugar
|       |-Typedef 0x55b7b0012278 '__uint64_t'
|       `-BuiltinType 0x55b7affd0640 'unsigned long'
|-CXXConstructorDecl 0x55b7b02fda60 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55b7b02fdc08 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55b7b02fdb48 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55b7b02fddb8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55b7b02fdcf8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55b7b02fdf10 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55b7b02fde80 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55b7b02fe128 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b7b02fdfd8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55b7b02fe058 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55b7b02fe348 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55b7b02fe1f8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55b7b02fe278 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55b7b02fe568 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b7b02fe418 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55b7b02fe498 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55b7b02fe788 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55b7b02fe638 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55b7b02fe6b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55b7b02fe918 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55b7b02fe850 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55b7b02fea98 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55b7b02fe9d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55b7b02fec28 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55b7b02feb60 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55b7b02fed80 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55b7b02fecf0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55b7b02feed8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55b7b02fee48 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55b7b02ff030 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55b7b02fefa0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55b7b02ff1b8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55b7b02ff0f8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55b7b02ff348 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55b7b02ff280 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55b7b02ff4d8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55b7b02ff410 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55b7b02ff668 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55b7b02ff5a0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55b7b02ff760 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55b7b02ff888 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55b7b02ffa08 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55b7b02ff940 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55b7b02ffb58 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55b7b02ffac8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55b7b02ffc10 <col:63> "" ""
|-CXXMethodDecl 0x55b7b02ffd58 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55b7b02ffc98 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55b7b02fff68 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55b7b02ffe18 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55b7b02ffe98 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55b7b0300188 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55b7b0300030 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55b7b03000b0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55b7b0300468 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55b7b0300248 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55b7b03002c8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55b7b030c2b0 <col:55> 'int' 10
| `-ParmVarDecl 0x55b7b0300340 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b030c2d0 <col:76> 'bool' true
|-CXXMethodDecl 0x55b7b0300748 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55b7b0300530 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55b7b03005b0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55b7b030c2e0 <col:56> 'int' 10
| `-ParmVarDecl 0x55b7b0300628 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b030c300 <col:77> 'bool' true
|-CXXMethodDecl 0x55b7b0300850 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55b7b0300918 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55b7b03009e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55b7b0300a80 <col:20>
| `-OptimizeNoneAttr 0x55b7b0300ad8 <col:30>
|-CXXConversionDecl 0x55b7b0300bc8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55b7b0300c98 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55b7b0300d58 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55b7b0300e48 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b7b0300f08 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b7b0301088 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55b7b0300fc0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55b7b03011d8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55b7b0301148 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55b7b03012c8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55b7b0301388 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55b7b03015d8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55b7b0301440 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55b7b03014c0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55b7b0301838 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55b7b03016a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55b7b0301720 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55b7b0301908 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b0301b18 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55b7b03019c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55b7b0301a40 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55b7b0301d38 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55b7b0301be0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55b7b0301c60 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55b7b0301ec8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55b7b0301e00 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55b7b0301fb8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55b7b0302128 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b7b0302068 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b7b0302338 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55b7b03021e8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b7b0302268 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b7b0302550 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55b7b03023f8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55b7b0302470 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55b7b03026e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55b7b0302610 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b7b0302900 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55b7b03027a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55b7b0302820 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b7b0302a50 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b7b03029c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55b7b0302c28 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b7b0302b10 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b7b0302b90 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55b7b0302d78 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55b7b0302ce8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55b7b0302f90 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55b7b0302e30 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55b7b0302eb0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55b7b030c310 <col:39> 'int' 0
|-CXXMethodDecl 0x55b7b03031b0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55b7b0303050 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55b7b03030d0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55b7b030c330 <col:48> 'int' 0
|-CXXMethodDecl 0x55b7b0303390 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55b7b0303270 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55b7b03032f0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55b7b030c350 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55b7b0303460 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55b7b0303520 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55b7b03035e0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55b7b03036a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55b7b0303760 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55b7b0303908 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b7b0303810 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55b7b0303a88 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55b7b03039c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55b7b0303c60 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b7b0303b48 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55b7b0303dd8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55b7b0303d18 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55b7b0303f20 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55b7b0303e90 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b7b0304070 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55b7b0303fe0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55b7b0304248 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b7b0304130 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b7b03041b0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b7b0304428 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b7b0304310 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55b7b0304390 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55b7b0304578 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55b7b03044e8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55b7b0304788 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55b7b0304638 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55b7b03046b8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55b7b03048e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55b7b0304850 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b7b0304a40 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55b7b03049a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55b7b0304ae8 <col:57> "" ""
|-CXXMethodDecl 0x55b7b0304bf8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b7b0304b68 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55b7b0304d48 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b7b0304cb8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55b7b0304ec8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55b7b0304e00 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55b7b0304f90 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55b7b0305050 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55b7b0305110 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55b7b03051b0 <col:49> "" ""
|-CXXMethodDecl 0x55b7b0305240 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55b7b0305300 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55b7b03053f0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55b7b03054b8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55b7b0305578 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55b7b0305638 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55b7b0305730 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55b7b03057f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55b7b03058c0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55b7b0305a98 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55b7b0305978 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55b7b03059f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55b7b0305cc0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55b7b0305b60 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55b7b0305be0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55b7b0305dd0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55b7b0305e38 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55b7b0305e60 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55b7b0305f78 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55b7b0306018 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55b7b0306078 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55b7b03060d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55b7b0306188 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55b7b03061f0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55b7b0306428 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55b7b0306478 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0306408 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55b7b0306318 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55b7b03062c0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55b7b0306300 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55b7b03062e0 <col:32> 'int' 8
|-CXXRecordDecl 0x55b7b0306490 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b7b03065a8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55b7b0306650 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55b7b03066b8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55b7b0306748 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55b7b030c7e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b7b030cc18 <col:12>
| |-CXXConstructorDecl 0x55b7b030c8e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b030c9f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b0306650 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55b7b030f1a0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b030f170 <col:12> 'const char *const' lvalue .data 0x55b7b0306650
| | |     `-DeclRefExpr 0x55b7b030f150 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b03066b8 'length' 'int'
| | | `-ImplicitCastExpr 0x55b7b030f230 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b030f200 <col:12> 'const int' lvalue .length 0x55b7b03066b8
| | |     `-DeclRefExpr 0x55b7b030f1e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b0306748 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55b7b030f2c0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b030f290 <col:12> 'String::memo_t *const' lvalue .memo 0x55b7b0306748
| | |     `-DeclRefExpr 0x55b7b030f270 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b030c9f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55b7b030f318 <col:12>
| |-CXXConstructorDecl 0x55b7b030ca98 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b030ca98
| | `-ParmVarDecl 0x55b7b030cba8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55b7b0312100 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55b7b031db18 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b031dc28 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55b7b031e140 <col:12>
| |   |-BinaryOperator 0x55b7b031df58 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55b7b031df10 <col:12> 'const char *' lvalue ->data 0x55b7b0306650
| |   | | `-CXXThisExpr 0x55b7b031df00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b7b031df40 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b7b031ded0 <col:12> 'const char *const' lvalue .data 0x55b7b0306650
| |   |     `-DeclRefExpr 0x55b7b031deb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b7b031e020 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55b7b031dfd8 <col:12> 'int' lvalue ->length 0x55b7b03066b8
| |   | | `-CXXThisExpr 0x55b7b031dfc8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b7b031e008 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55b7b031df98 <col:12> 'const int' lvalue .length 0x55b7b03066b8
| |   |     `-DeclRefExpr 0x55b7b031df78 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b7b031e0e8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55b7b031e0a0 <col:12> 'String::memo_t *' lvalue ->memo 0x55b7b0306748
| |   | | `-CXXThisExpr 0x55b7b031e090 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b7b031e0d0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b7b031e060 <col:12> 'String::memo_t *const' lvalue .memo 0x55b7b0306748
| |   |     `-DeclRefExpr 0x55b7b031e040 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b7b031dc28 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55b7b031e130 <col:12>
| |     `-UnaryOperator 0x55b7b031e118 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b7b031e108 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55b7b031dc98 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b031dc98
|   `-ParmVarDecl 0x55b7b031dda8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55b7b03067c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55b7b0306a08 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55b7b0306828 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55b7b03068a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55b7b0306920 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55b7b030c7a0 <col:79, line:261:5>
|   |-BinaryOperator 0x55b7b030c418 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b7b030c3b0 <col:2, col:5> 'const char *' lvalue .data 0x55b7b0306650
|   | | `-MemberExpr 0x55b7b030c380 <col:2> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|   | |   `-CXXThisExpr 0x55b7b030c370 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b7b030c400 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b7b030c3e0 <col:12> 'const char *' lvalue ParmVar 0x55b7b0306828 'data' 'const char *'
|   |-BinaryOperator 0x55b7b030c4e0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55b7b030c478 <col:2, col:5> 'int' lvalue .length 0x55b7b03066b8
|   | | `-MemberExpr 0x55b7b030c448 <col:2> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|   | |   `-CXXThisExpr 0x55b7b030c438 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b7b030c4c8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b7b030c4a8 <col:14> 'int' lvalue ParmVar 0x55b7b03068a8 'length' 'int'
|   `-IfStmt 0x55b7b030c788 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55b7b030c600 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b7b030c5e8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55b7b030c5c8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55b7b030c5a8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55b7b030c540 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|     |       | `-MemberExpr 0x55b7b030c510 <col:7> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|     |       |   `-CXXThisExpr 0x55b7b030c500 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55b7b030c590 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b7b030c570 <col:17> 'String::memo_t *' lvalue ParmVar 0x55b7b0306920 'memo' 'String::memo_t *'
|     `-CallExpr 0x55b7b030c760 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55b7b030c748 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b7b030c650 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55b7b02f5438 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55b7b030c6b8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b7b0306018
|         `-ImplicitCastExpr 0x55b7b030c6a0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b7b030c680 <col:27> 'String::memo_t *' lvalue ParmVar 0x55b7b0306920 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55b7b0306cb8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55b7b0306ad8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55b7b0306b58 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55b7b0306bd0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55b7b03067c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55b7b030cc28 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55b7b030cdb8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55b7b030cd20 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55b7b030cc90 <col:2> '<bound member function type>' ->assign_memo 0x55b7b0306a08
|     | `-ImplicitCastExpr 0x55b7b030cd58 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55b7b030cc80 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55b7b030cd70 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b7b030ccc0 <col:14> 'const char *' lvalue ParmVar 0x55b7b0306ad8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55b7b030cd88 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b7b030cce0 <col:20> 'int' lvalue ParmVar 0x55b7b0306b58 'length' 'int'
|     `-ImplicitCastExpr 0x55b7b030cda0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b030cd00 <col:28> 'String::memo_t *' lvalue ParmVar 0x55b7b0306bd0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55b7b0306e48 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55b7b0306d88 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55b7b030d010 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55b7b030cf90 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55b7b030cde0 <col:2> '<bound member function type>' ->assign_memo 0x55b7b0306a08
|     | `-CXXThisExpr 0x55b7b030cdd0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55b7b030cfc8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55b7b030ce60 <col:14, col:19> 'const char *' lvalue .data 0x55b7b0306650
|     |   `-MemberExpr 0x55b7b030ce30 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55b7b03067c0
|     |     `-DeclRefExpr 0x55b7b030ce10 <col:14> 'const String' lvalue ParmVar 0x55b7b0306d88 'x' 'const String &'
|     |-ImplicitCastExpr 0x55b7b030cfe0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55b7b030cee0 <col:25, col:30> 'int' lvalue .length 0x55b7b03066b8
|     |   `-MemberExpr 0x55b7b030ceb0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55b7b03067c0
|     |     `-DeclRefExpr 0x55b7b030ce90 <col:25> 'const String' lvalue ParmVar 0x55b7b0306d88 'x' 'const String &'
|     `-ImplicitCastExpr 0x55b7b030cff8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55b7b030cf60 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|         `-MemberExpr 0x55b7b030cf30 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55b7b03067c0
|           `-DeclRefExpr 0x55b7b030cf10 <col:38> 'const String' lvalue ParmVar 0x55b7b0306d88 'x' 'const String &'
|-CXXMethodDecl 0x55b7b0306f10 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55b7b030d9d0 <col:31, line:278:5>
|   `-IfStmt 0x55b7b030d9b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55b7b030d0b0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b7b030d098 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55b7b030d068 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|     |     `-MemberExpr 0x55b7b030d038 <col:6> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|     |       `-CXXThisExpr 0x55b7b030d028 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55b7b030d990 <col:15, line:277:2>
|       |-ParenExpr 0x55b7b030d560 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55b7b030d530 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55b7b030d1c0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55b7b030d1a8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55b7b030d190 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55b7b030d150 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b7b0306018
|       |   |       `-ImplicitCastExpr 0x55b7b030d138 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55b7b030d108 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|       |   |           `-MemberExpr 0x55b7b030d0d8 <col:27> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|       |   |             `-CXXThisExpr 0x55b7b030d0c8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55b7b030d220 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55b7b030d200 <col:54> 'int' 0
|       |   `-CallExpr 0x55b7b030d490 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55b7b030d478 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55b7b030d3f8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55b7b030d4d0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b7b030d308 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55b7b030d4e8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b7b030d338 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55b7b030d500 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55b7b030d370 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55b7b030d518 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55b7b030d3e0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55b7b030d3c8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55b7b030d390 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55b7b030d8b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55b7b030d770 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55b7b030d758 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b7b030d6d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55b7b02f6880 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55b7b030d6a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b7b0306018
|       | |   `-ImplicitCastExpr 0x55b7b030d688 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55b7b030d658 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|       | |       `-MemberExpr 0x55b7b030d628 <col:40> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|       | |         `-CXXThisExpr 0x55b7b030d618 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55b7b030d870 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55b7b030d858 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b7b030d798 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55b7b030b6f0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55b7b030d898 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55b7b030d7f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|       |       `-MemberExpr 0x55b7b030d7c8 <col:15> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|       |         `-CXXThisExpr 0x55b7b030d7b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55b7b030d970 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55b7b030d908 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b7b0306748
|         | `-MemberExpr 0x55b7b030d8d8 <col:6> 'String::rep_t' lvalue ->_r 0x55b7b03067c0
|         |   `-CXXThisExpr 0x55b7b030d8c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55b7b030d958 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55b7b030d938 <col:16> 'int' 0
|-CXXMethodDecl 0x55b7b03071a8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55b7b0306fc8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b7b0307048 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b7b03070c0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55b7b0307280 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55b7b03074d0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55b7b0307338 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b7b03073b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b7b0307430 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b7b03076b8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55b7b03075a0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55b7b0307620 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55b7b03077b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55b7b030daa8 <col:41, line:286:5>
|   `-ReturnStmt 0x55b7b030da98 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55b7b030da68 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55b7b030da30 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55b7b030da18 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55b7b030d9f8 <col:46> 'int' 1
|-CXXMethodDecl 0x55b7b0307a58 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55b7b0307870 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55b7b03078f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55b7b0307970 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55b7b030b6f0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55b7b0307b20 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b7b030b7c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55b7b030b990 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b7b030b878 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b7b030b8f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55b7b030ba50 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55b7b030bb18 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55b7b030bc18 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55b7b030bc90 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55b7b030bd08 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55b7b030bd70 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55b7b030be70 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55b7b030bec0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b030be50 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55b7b030be30 <col:22> 'int' 14
|-CXXMethodDecl 0x55b7b030c0d8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55b7b030bef0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55b7b030bf70 <col:38> col:41 'int'
| `-ParmVarDecl 0x55b7b030bff0 <col:43> col:46 'int'
|-FriendDecl 0x55b7b030c1e0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55b7b030c270 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b054b9b8 <../elements/ip6/ip6print.hh:28:1, line:45:1> line:28:7 class IP6Print definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55b7b054bb18 <col:1, col:7> col:7 implicit referenced class IP6Print
|-AccessSpecDecl 0x55b7b054bba8 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55b7b054bc30 <line:30:3, col:12> col:3 IP6Print 'void ()'
|-CXXDestructorDecl 0x55b7b054bd20 <line:31:3, col:13> col:3 ~IP6Print 'void ()' noexcept-unevaluated 0x55b7b054bd20
| `-Overrides: [ 0x55b7b05332a8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55b7b054be50 <line:33:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55b7b0534708 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55b7b054c8e0 <col:34, col:55>
|   `-ReturnStmt 0x55b7b054c8d0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55b7b054c8b8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55b7b054c898 <col:43> 'const char [9]' lvalue "IP6Print"
|-CXXMethodDecl 0x55b7b054bf18 <line:34:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55b7b05347d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55b7b054c940 <col:34, col:54>
|   `-ReturnStmt 0x55b7b054c930 <col:36, col:43>
|     `-ImplicitCastExpr 0x55b7b054c918 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55b7b054c8f8 <col:43> 'const char []' lvalue Var 0x55b7b0534a80 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55b7b054c1f0 <line:36:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55b7b0535fa0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55b7b054c0a0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55b7b054c118 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b054c340 <line:38:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55b7b05338e8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55b7b054c2b0 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55b7b054c3e8 <line:40:2, col:9> col:2 private
|-FieldDecl 0x55b7b054c420 <line:42:3, col:10> col:10 _label 'String'
|-FieldDecl 0x55b7b054c488 <line:43:3, col:12> col:12 _bytes 'unsigned int'
|-FieldDecl 0x55b7b054c4e8 <line:44:3, col:8> col:8 _contents 'bool'
|-CXXConstructorDecl 0x55b7b054c568 <line:28:7> col:7 implicit IP6Print 'void (const IP6Print &)' inline default_delete noexcept-unevaluated 0x55b7b054c568
| `-ParmVarDecl 0x55b7b054c678 <col:7> col:7 'const IP6Print &'
`-CXXMethodDecl 0x55b7b054c718 <col:7> col:7 implicit operator= 'IP6Print &(const IP6Print &)' inline default_delete noexcept-unevaluated 0x55b7b054c718
  `-ParmVarDecl 0x55b7b054c828 <col:7> col:7 'const IP6Print &'

Layout: <CGRecordLayout
  LLVMType:%class.IP6Print = type <{ %class.Element.base, [4 x i8], %class.String, i32, i8, [3 x i8] }>
  NonVirtualBaseLLVMType:%class.IP6Print.base = type <{ %class.Element.base, [4 x i8], %class.String, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b057a750 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55b7b057a928 prev 0x55b7b057a750 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b7b057a9b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b7b057a9e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b057c340 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55b7b057c2f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55b7b057c2d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55b7b057abf8 'type'
|     `-SubstTemplateTypeParmType 0x55b7b057abc0 'String' sugar
|       |-TemplateTypeParmType 0x55b7b02c1c80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02c1c30 'T'
|       `-RecordType 0x55b7b02fd460 'String'
|         `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b057c3f8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55b7b057c3c0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55b7b057c3a0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b7b057c340 'type'
|     `-ElaboratedType 0x55b7b057c2f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55b7b057c2d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55b7b057abf8 'type'
|         `-SubstTemplateTypeParmType 0x55b7b057abc0 'String' sugar
|           |-TemplateTypeParmType 0x55b7b02c1c80 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b7b02c1c30 'T'
|           `-RecordType 0x55b7b02fd460 'String'
|             `-CXXRecord 0x55b7b02fd3d0 'String'
|-CXXMethodDecl 0x55b7b057c578 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55b7b057c488 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55b7b057c668 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b7b057c748 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55b7b057c748
|-CXXMethodDecl 0x55b7b057ca18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b7b057c920 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55b7b057cc58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b7b057cad0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b057cb48 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b057ce28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b7b057cd18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b057cd90 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b057cf88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b7b057d058 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b7b057d2a8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b7b057d118 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b7b057d190 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b0581538 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55b7b05813b0 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b7b0581428 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b05816f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b7b0581608 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b05818b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b7b05817c0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b0581970 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b7b0581a20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b7b0581c58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b7b0581ad0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b0581b48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b7b0581ef8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b7b0581e00 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55b7b0581fc0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55b7b0582010 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b7b0582060 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b0535c10 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55b7b05791b8 prev 0x55b7b0535c10 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b7b057a6c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55b7b057a670 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55b7b057a650 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b7b057a500 'type'
|     `-SubstTemplateTypeParmType 0x55b7b057a390 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55b7b0297810 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55b7b02977b8 'F'
|       `-RecordType 0x55b7b0579ff0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55b7b0579f10 'typed_array_memory'
|-FieldDecl 0x55b7b05820b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55b7b0582100 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b7b0582138 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|   |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b7b02cef48 'T'
|   `-RecordType 0x55b7b02fd460 'String'
|     `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b05821c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55b7b0582190 'String &'
|   `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-RecordType 0x55b7b02fd460 'String'
|       `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0582258 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55b7b0582220 'const String &'
|   `-QualType 0x55b7b0579251 'const String' const
|     `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-RecordType 0x55b7b02fd460 'String'
|         `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b05822e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55b7b05822b0 'String *'
|   `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-RecordType 0x55b7b02fd460 'String'
|       `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0582378 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55b7b0582340 'const String *'
|   `-QualType 0x55b7b0579251 'const String' const
|     `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-RecordType 0x55b7b02fd460 'String'
|         `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0582fd0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55b7b0582f80 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55b7b0582f60 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55b7b0582e98 'type'
|     `-LValueReferenceType 0x55b7b0582e60 'const String &'
|       `-QualType 0x55b7b0582c01 'const String' const
|         `-SubstTemplateTypeParmType 0x55b7b0582c00 'String' sugar
|           |-TemplateTypeParmType 0x55b7b02a1760 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b7b02a1708 'T'
|           `-RecordType 0x55b7b02fd460 'String'
|             `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0583038 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55b7b0582220 'const String &'
|   `-QualType 0x55b7b0579251 'const String' const
|     `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-RecordType 0x55b7b02fd460 'String'
|         `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0583090 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05830f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55b7b05822b0 'String *'
|   `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-RecordType 0x55b7b02fd460 'String'
|       `-CXXRecord 0x55b7b02fd3d0 'String'
|-TypedefDecl 0x55b7b0583160 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55b7b0582340 'const String *'
|   `-QualType 0x55b7b0579251 'const String' const
|     `-SubstTemplateTypeParmType 0x55b7b0579250 'String' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-RecordType 0x55b7b02fd460 'String'
|         `-CXXRecord 0x55b7b02fd3d0 'String'
|-EnumDecl 0x55b7b05831b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55b7b05832b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b7b0583290 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b7b02d0628 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b7b02d0600 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b7b02d05e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b7b0583338 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b7b05835c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05833f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b0583490 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55b7b0583858 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55b7b0583740 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55b7b0583b18 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55b7b0583a00 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b7b0583e30 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55b7b0583d10 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55b7b0584140 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55b7b0584020 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b7b0584430 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b0584278 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b05842f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b7b0584558 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b7b0584608 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b0584660 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05846a8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b7b0584758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05847b0 <col:30> Inherited
|-CXXMethodDecl 0x55b7b0584878 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b7b0584928 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b0584980 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05849c8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b7b0584a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b0584ad0 <col:30> Inherited
|-CXXMethodDecl 0x55b7b0584b18 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b7b0584bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b0584c20 <col:30> Inherited
|-CXXMethodDecl 0x55b7b0584c68 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b7b0584d18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b0584d70 <col:30> Inherited
|-CXXMethodDecl 0x55b7b0584d98 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b7b0584e48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b7b0584ef8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b7b05850b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b0584fa8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b0585020 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b7b0585208 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b0585178 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05853b8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55b7b05852c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b7b0585470 <col:20>
| `-OptimizeNoneAttr 0x55b7b05854c8 <col:30>
|-CXXMethodDecl 0x55b7b05855e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55b7b05854f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b7b05856a0 <col:20>
| `-OptimizeNoneAttr 0x55b7b05856f8 <col:30>
|-CXXMethodDecl 0x55b7b05857b0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b0585720 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05858f8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b7b0585868 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b0585a28 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55b7b0585b28 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55b7b0585bf8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55b7b0585cc8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55b7b0585e08 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b0585d78 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b0585f50 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b7b0585ec0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b0586098 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b7b0586008 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b7b0586150 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b7b0586250 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b7b05861c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b7b0586308 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b7b05863c8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55b7b05864c8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55b7b0586648 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b7b0586588 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55b7b0586e08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b7b0586700 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55b7b0586d68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55b7b0586c68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55b7b0586ee8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b7b0587038 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b7b0586fa8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b7b05870f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b7b0587338 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05871b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b7b0587228 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b7b05874c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55b7b0587408 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b7b05876d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55b7b0587590 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b7b0587608 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b7b0587798 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b7b05879f8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55b7b0587900 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55b7b0587ac8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55b7b0587ac8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0602678 prev 0x55b7b04b3428 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b0602770 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55b7b0602800 <col:22, col:28> col:22 public
|-EnumDecl 0x55b7b0602828 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55b7b0602948 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602928 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55b7b0602910 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b7b06028f0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55b7b06029f0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b06029d0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55b7b06029b8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b7b0602998 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b7b0602a80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602a60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55b7b0602a40 <col:17> 'int' 0
| |-EnumConstantDecl 0x55b7b0602b10 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602af0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55b7b0602ad0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55b7b0602ba0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602b80 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55b7b0602b60 <col:16> 'int' 2
| |-EnumConstantDecl 0x55b7b0602c30 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602c10 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55b7b0602bf0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55b7b0602cc0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602ca0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55b7b0602c80 <col:15> 'int' 4
| |-EnumConstantDecl 0x55b7b0602d50 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602d30 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55b7b0602d10 <col:14> 'int' 5
| |-EnumConstantDecl 0x55b7b0602de0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b7b0602dc0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55b7b0602da0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55b7b0602e70 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55b7b0602e50 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55b7b0602e30 <col:13> 'int' 7
|-VarDecl 0x55b7b0602ee0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55b7b0602f68 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55b7b0602ff0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55b7b0603078 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55b7b0603100 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55b7b0603188 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55b7b0603210 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55b7b0603298 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55b7b0603320 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55b7b06033a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55b7b0603430 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55b7b0603530 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55b7b0608828 '_nerrors' 'int'
| | `-IntegerLiteral 0x55b7b0608fb8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55b7b0609028 <col:16, line:129:5>
|-CXXDestructorDecl 0x55b7b0603620 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55b7b0609038 <col:29, line:132:5>
|-CXXMethodDecl 0x55b7b06037d8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55b7b0603710 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b06038a0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b7b0603988 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b7b0609090 <col:44, line:161:5>
|   `-ReturnStmt 0x55b7b0609080 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55b7b0609068 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b0609048 <col:9> 'ErrorHandler *' lvalue Var 0x55b7b0608888 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0603ac8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55b7b0603a38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b7b0603b90 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b7b06090f0 <col:43, line:173:5>
|   `-ReturnStmt 0x55b7b06090e0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55b7b06090c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b06090a8 <col:9> 'ErrorHandler *' lvalue Var 0x55b7b0608900 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55b7b0603c48 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55b7b0603cc8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55b7b0603dd8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55b7b0603d48 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0603f28 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55b7b0603e98 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604080 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55b7b0603fe8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55b7b06041d8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55b7b0604140 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604330 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55b7b0604298 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604540 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b7b06043e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55b7b0604468 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604718 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b7b0604600 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55b7b0604680 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604938 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b7b06047d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55b7b0604858 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604b18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b7b06049f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b7b0604a78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604cf8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b7b0604bd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b7b0604c58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0604e80 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55b7b0604db8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55b7b0605050 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55b7b0604f38 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b7b0604fb0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55b7b0609348 <col:57, line:234:5>
|   `-ReturnStmt 0x55b7b0609338 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55b7b0609320 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b7b06092c8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b7b0609298 <col:9> '<bound member function type>' ->xmessage 0x55b7b0604e80
|         | `-CXXThisExpr 0x55b7b0609288 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55b7b0609308 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b7b06092f0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b7b0609268 <col:18, col:40> 'String' (CXXTemporary 0x55b7b0609268)
|               `-CallExpr 0x55b7b0609230 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55b7b0609218 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55b7b0609190 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b7b0607048 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55b7b06091b0 <col:31> 'const String' lvalue ParmVar 0x55b7b0604fb0 'str' 'const String &'
|                 `-DeclRefExpr 0x55b7b06091d0 <col:36> 'const String' lvalue ParmVar 0x55b7b0604f38 'anno' 'const String &'
|-CXXMethodDecl 0x55b7b0605330 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b7b0605110 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b7b0605190 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55b7b0605208 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b7b06095d8 <col:68, line:243:5>
|   `-ReturnStmt 0x55b7b06095c8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55b7b06095b0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b7b0609550 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b7b0609520 <col:9> '<bound member function type>' ->xmessage 0x55b7b0605050
|         | `-CXXThisExpr 0x55b7b0609510 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b7b06093e8 <col:18> 'const String' lvalue ParmVar 0x55b7b0605110 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b7b0609598 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b7b0609580 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b7b06094f0 <col:24, col:40> 'String' (CXXTemporary 0x55b7b06094f0)
|               `-CXXMemberCallExpr 0x55b7b0609488 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55b7b0609418 <col:24> '<bound member function type>' ->vformat 0x55b7b0606510
|                 | `-CXXThisExpr 0x55b7b0609408 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b7b06094b8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b7b0609448 <col:32> 'const char *' lvalue ParmVar 0x55b7b0605190 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b7b06094d0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b7b0609468 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b7b0605208 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b7b06055d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55b7b06053f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b7b0605470 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b7b06054e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55b7b0609918 <col:23, line:254:5>
|   `-ReturnStmt 0x55b7b0609908 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55b7b06098f0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55b7b0609890 <col:9, col:71> 'int'
|         |-MemberExpr 0x55b7b0609860 <col:9> '<bound member function type>' ->xmessage 0x55b7b0605050
|         | `-CXXThisExpr 0x55b7b0609850 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55b7b06098d8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55b7b06098c0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55b7b0609810 <col:18, col:65> 'String' (CXXTemporary 0x55b7b0609810)
|         |     `-CallExpr 0x55b7b06097a8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55b7b0609790 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55b7b0609678 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b7b0607048 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55b7b0609698 <col:31> 'const String' lvalue ParmVar 0x55b7b0605470 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55b7b06097f0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55b7b06097d8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55b7b0609770 <col:37, col:64> 'String' (CXXTemporary 0x55b7b0609770)
|         |             `-CallExpr 0x55b7b0609740 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55b7b0609728 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55b7b06096b8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55b7b0607698 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55b7b06096d8 <col:56> 'const String' lvalue ParmVar 0x55b7b06053f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55b7b0609830 <col:68> 'const String' lvalue ParmVar 0x55b7b06054e8 'str' 'const String &'
|-CXXMethodDecl 0x55b7b0605950 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b7b0605698 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b7b0605710 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b7b0605790 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55b7b0605808 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b7b0609bd0 <col:34, line:267:5>
|   `-ReturnStmt 0x55b7b0609bc0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55b7b0609ba8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55b7b0609b40 <col:9, col:51> 'int'
|         |-MemberExpr 0x55b7b0609b10 <col:9> '<bound member function type>' ->xmessage 0x55b7b06055d0
|         | `-CXXThisExpr 0x55b7b0609b00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b7b06099b8 <col:18> 'const String' lvalue ParmVar 0x55b7b0605698 'landmark' 'const String &'
|         |-DeclRefExpr 0x55b7b06099d8 <col:28> 'const String' lvalue ParmVar 0x55b7b0605710 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b7b0609b90 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b7b0609b78 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b7b0609ae0 <col:34, col:50> 'String' (CXXTemporary 0x55b7b0609ae0)
|               `-CXXMemberCallExpr 0x55b7b0609a78 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55b7b0609a08 <col:34> '<bound member function type>' ->vformat 0x55b7b0606510
|                 | `-CXXThisExpr 0x55b7b06099f8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b7b0609aa8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b7b0609a38 <col:42> 'const char *' lvalue ParmVar 0x55b7b0605790 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b7b0609ac0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b7b0609a58 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b7b0605808 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b7b0605a60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55b7b0609c50 <col:25, line:288:5>
|   `-ReturnStmt 0x55b7b0609c40 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55b7b0609c28 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55b7b0609bf8 <col:9> 'const int' lvalue ->_nerrors 0x55b7b0608828
|         `-CXXThisExpr 0x55b7b0609be8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b7b0605c70 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55b7b0605b18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55b7b0605b98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0605f58 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b7b0605d38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55b7b0605db8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55b7b0605e30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b7b06060f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55b7b0606028 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55b7b0606338 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b7b06061b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55b7b0606228 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b7b0609eb0 <col:58, line:357:5>
|   `-ReturnStmt 0x55b7b0609ea0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55b7b0609e88 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55b7b0609e58 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55b7b0609e40 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55b7b0609e20 <col:9, col:29> 'String' (CXXTemporary 0x55b7b0609e20)
|             `-CallExpr 0x55b7b0609db0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55b7b0609d98 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55b7b0609d18 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55b7b0605f58 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55b7b0609cb8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55b7b0609de8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55b7b0609cd8 <col:21> 'const char *' lvalue ParmVar 0x55b7b06061b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55b7b0609e00 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55b7b0609cf8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b7b0606228 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b7b0606510 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55b7b0606400 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55b7b0606478 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b7b0606668 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55b7b06065d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55b7b06067b0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55b7b0606720 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55b7b0606a50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55b7b0606868 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55b7b06068e8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55b7b0606960 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55b7b0606bb0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55b7b0606b20 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55b7b0609fc8 <col:37, line:441:5>
|   `-IfStmt 0x55b7b0609fb0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55b7b0609f38 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55b7b0609f08 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b7b0609ec8 <col:6> 'int' lvalue ParmVar 0x55b7b0606b20 'level' 'int'
|     | `-ImplicitCastExpr 0x55b7b0609f20 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55b7b0609ee8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55b7b0602c30 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55b7b0609f98 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55b7b0609f68 <col:8> 'int' lvalue ->_nerrors 0x55b7b0608828
|         `-CXXThisExpr 0x55b7b0609f58 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b7b0606c78 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55b7b060a060 <col:26, line:448:5>
|   `-BinaryOperator 0x55b7b060a040 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55b7b0609ff0 <col:2> 'int' lvalue ->_nerrors 0x55b7b0608828
|     | `-CXXThisExpr 0x55b7b0609fe0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55b7b060a020 <col:13> 'int' 0
|-CXXMethodDecl 0x55b7b0606e40 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55b7b0606d30 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55b7b0606da8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55b7b0607048 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55b7b0606f00 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55b7b0606f78 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55b7b06072f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55b7b0607108 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55b7b0607188 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55b7b0607208 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55b7b06073b0 <col:59> 0 0
|-CXXMethodDecl 0x55b7b0607548 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55b7b0607428 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55b7b06074a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55b7b060a6d0 <col:70, line:534:5>
|   |-DeclStmt 0x55b7b060a1d0 <line:528:2, col:20>
|   | |-VarDecl 0x55b7b060a088 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55b7b060a0f0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55b7b060a128 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55b7b060a190 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55b7b060a2a0 <line:529:2, col:23>
|   | `-VarDecl 0x55b7b060a200 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55b7b060a288 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b7b060a268 <col:18> 'const char *' lvalue ParmVar 0x55b7b0607428 'begin' 'const char *'
|   |-DoStmt 0x55b7b060a668 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55b7b060a598 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55b7b060a580 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55b7b060a560 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55b7b060a2b8 <col:6> 'const char *' lvalue Var 0x55b7b060a200 'x' 'const char *'
|   | |     `-CallExpr 0x55b7b060a4b0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55b7b060a498 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55b7b060a450 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55b7b0608d00 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55b7b060a518 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55b7b060a500 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55b7b060a370 <col:20, col:27> 'String' (CXXTemporary 0x55b7b060a370)
|   | |       |     `-CXXTemporaryObjectExpr 0x55b7b060a338 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55b7b060a530 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b7b060a390 <col:30> 'const char *' lvalue Var 0x55b7b060a200 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55b7b060a548 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b7b060a3b0 <col:33> 'const char *' lvalue ParmVar 0x55b7b06074a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55b7b060a3f0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b7b060a3d0 <col:39> 'String' lvalue Var 0x55b7b060a088 'name' 'String'
|   | |       |-UnaryOperator 0x55b7b060a428 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b7b060a408 <col:46> 'String' lvalue Var 0x55b7b060a128 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55b7b060a440 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55b7b060a650 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55b7b060a638 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55b7b060a618 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55b7b060a5e8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|   |         `-ImplicitCastExpr 0x55b7b060a5d0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55b7b060a5b0 <col:11> 'String' lvalue Var 0x55b7b060a088 'name' 'String'
|   `-ReturnStmt 0x55b7b060a6c0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55b7b060a6a8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b060a688 <col:9> 'const char *' lvalue Var 0x55b7b060a200 'x' 'const char *'
|-CXXMethodDecl 0x55b7b0607698 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55b7b0607608 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55b7b060acd8 <col:55, line:550:5>
|   `-IfStmt 0x55b7b060acb0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55b7b060a910 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55b7b060a8f8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b7b060a8e0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b7b060a8c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b7b060a890 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|     | |       `-DeclRefExpr 0x55b7b060a730 <col:6> 'const String' lvalue ParmVar 0x55b7b0607608 'x' 'const String &'
|     | `-BinaryOperator 0x55b7b060a870 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55b7b060a840 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55b7b060a7f0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55b7b060a7d8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b7b060a790 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55b7b031a400 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55b7b060a750 <col:11> 'const String' lvalue ParmVar 0x55b7b0607608 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55b7b060a770 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55b7b060a858 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55b7b060a828 <col:19> 'char' 123
|     |-ReturnStmt 0x55b7b060a980 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55b7b060a950 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55b7b060a930 <col:13> 'const String' lvalue ParmVar 0x55b7b0607608 'x' 'const String &'
|     `-IfStmt 0x55b7b060ac88 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55b7b060aa18 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b7b060aa00 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b7b060a9e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b7b060a9b0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |       `-DeclRefExpr 0x55b7b060a990 <col:11> 'const String' lvalue ParmVar 0x55b7b0607608 'x' 'const String &'
|       |-ReturnStmt 0x55b7b060aba0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55b7b060ab88 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55b7b060ab58 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55b7b060ab40 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55b7b060ab20 <col:13, col:29> 'String' (CXXTemporary 0x55b7b060ab20)
|       |         `-CallExpr 0x55b7b060aad0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55b7b060aab8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55b7b060aa30 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55b7b0606e40 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55b7b060ab00 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55b7b060aa50 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55b7b060aa70 <col:28> 'const String' lvalue ParmVar 0x55b7b0607608 'x' 'const String &'
|       `-ReturnStmt 0x55b7b060ac78 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55b7b060ac60 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55b7b060ac30 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55b7b060ac18 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55b7b060abf8 <col:13, col:20> 'String' (CXXTemporary 0x55b7b060abf8)
|                 `-CXXTemporaryObjectExpr 0x55b7b060abc0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55b7b0607860 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55b7b0607750 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55b7b06077c8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b0608fa8 <col:71> 'bool' false
|-CXXRecordDecl 0x55b7b0607910 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55b7b0607c08 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55b7b0607ba0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55b7b0607b40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55b7b0607b00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55b7b02fd460 'String'
|       | `-CXXRecord 0x55b7b02fd3d0 'String'
|       |-BuiltinType 0x55b7affd0580 'int'
|       `-DecayedType 0x55b7b04b4470 '__va_list_tag *' sugar
|         |-TypedefType 0x55b7b04b4440 'va_list' sugar
|         | |-Typedef 0x55b7b01ef300 'va_list'
|         | `-TypedefType 0x55b7b01ef2b0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55b7b0126ed8 '__gnuc_va_list'
|         |   `-TypedefType 0x55b7b0126e40 '__builtin_va_list' sugar
|         |     |-Typedef 0x55b7b0011d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55b7b0011ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55b7affd12d0 '__va_list_tag'
|         |         `-CXXRecord 0x55b7affd1238 '__va_list_tag'
|         `-PointerType 0x55b7b01f4ba0 '__va_list_tag *'
|           `-RecordType 0x55b7affd12d0 '__va_list_tag'
|             `-CXXRecord 0x55b7affd1238 '__va_list_tag'
|-EnumDecl 0x55b7b0607c60 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55b7b0607d60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b06082c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0607d40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55b7b0607d20 <col:16> 'int' 1
| |-EnumConstantDecl 0x55b7b0607df0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b06082d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0607dd0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55b7b0607db0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55b7b0607e80 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b06082f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0607e60 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55b7b0607e40 <col:22> 'int' 4
| |-EnumConstantDecl 0x55b7b0607f10 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608308 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0607ef0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55b7b0607ed0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55b7b0607fa0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608320 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0607f80 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55b7b0607f60 <col:22> 'int' 16
| |-EnumConstantDecl 0x55b7b0608030 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608338 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0608010 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b7b0607ff0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b7b06080c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608360 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b06080a0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55b7b0608080 <col:17> 'int' 64
| |-EnumConstantDecl 0x55b7b0608150 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608378 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0608130 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55b7b0608110 <col:14> 'int' 128
| |-EnumConstantDecl 0x55b7b06081e0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b7b0608390 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b06081c0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55b7b06081a0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55b7b0608270 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55b7b06083a8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0608250 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55b7b0608230 <col:12> 'int' 1024
|-CXXMethodDecl 0x55b7b06085b8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55b7b06083d0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55b7b0608470 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55b7b0608740 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55b7b0608678 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55b7b06087e8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55b7b0608828 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55b7b0608888 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55b7b0608900 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55b7b0608d00 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55b7b0608978 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55b7b06089f8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55b7b0608a78 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55b7b0608af0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55b7b0608b68 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55b7b0608be0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55b7b0608e28 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55b7b0608e28
| `-ParmVarDecl 0x55b7b0608f38 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55b7b060b038 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55b7b060b038
  `-ParmVarDecl 0x55b7b060b148 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b04b34b8 prev 0x55b7b04f86b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b04b35b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55b7b04b3640 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55b7b04b3778 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55b7b04b3678 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b7b04b4ba0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b04b4b80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b7b04b4718 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b7b04b4c30 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b7b04b4bf0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55b7b04b3678 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b7b04b4780 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b7b04b4cb0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b04b4c70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b7b04b47e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b7b04b4cf0 <col:54> 'bool' false
| `-CompoundStmt 0x55b7b04b4df8 <col:61, line:38:5>
|   `-BinaryOperator 0x55b7b04b4dd8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55b7b04b4d70 <col:9> 'const Element *' lvalue ->_context 0x55b7b04b46b8
|     | `-CXXThisExpr 0x55b7b04b4d60 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55b7b04b4dc0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55b7b04b4da0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55b7b04b3988 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b04b3838 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55b7b04b38b0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b7b04b4bd8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b04b4bb8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55b7b04b46b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55b7b04b4e50 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b7b04b4e10 <col:20> 'const Element *' lvalue ParmVar 0x55b7b04b3838 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55b7b04b4718 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b7b04b4ed0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b7b04b4e90 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55b7b04b38b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b7b04b4780 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b7b04b4f50 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b7b04b4f10 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55b7b04b47e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b7b04b4f90 <col:73> 'bool' false
| `-CompoundStmt 0x55b7b04b5008 <col:80, line:46:5>
|-CXXMethodDecl 0x55b7b04b3ab8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55b7b04b5080 <col:36, line:51:5>
|   `-ReturnStmt 0x55b7b04b5070 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55b7b04b5058 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55b7b04b5028 <col:16> 'const Element *const' lvalue ->_context 0x55b7b04b46b8
|         `-CXXThisExpr 0x55b7b04b5018 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b7b04b3ba8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55b7b04b5100 <col:32, line:57:5>
|   `-ReturnStmt 0x55b7b04b50f0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55b7b04b50d8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55b7b04b50a8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55b7b04b4718
|         `-CXXThisExpr 0x55b7b04b5098 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b7b04b3c68 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55b7b04b3df0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b7b04b3d20 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b7b04b3f40 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b7b04b3eb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b7b04b4090 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b7b04b4000 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b7b04b4298 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55b7b04b4148 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55b7b04b41c0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55b7b04b45c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55b7b04b4358 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55b7b04b43d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55b7b04b44a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55b7b04b4680 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55b7b04b46b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55b7b04b4718 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55b7b04b4780 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55b7b04b47e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55b7b04b4830 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b7b04b4830
| `-ParmVarDecl 0x55b7b04b4948 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55b7b04b49e8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b7b04b49e8
| `-ParmVarDecl 0x55b7b04b4af8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55b7b0659720 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b05c0ed0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55b7b05c10a8 prev 0x55b7b05c0ed0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b7b05c1138 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b7b05c1160 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05c2d30 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55b7b05c2ce0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55b7b05c1610 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55b7b05c1510 'type'
|     `-TemplateSpecializationType 0x55b7b05c14a0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55b7b05c1380 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55b7b05c1360 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55b7b05c1340 <col:24> 'unsigned long' 4
|       `-RecordType 0x55b7b05c1480 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55b7b05c13a0 'char_array'
|-TypedefDecl 0x55b7b05c2de8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55b7b05c2db0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55b7b05c2d90 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55b7b05c2d30 'type'
|     `-ElaboratedType 0x55b7b05c2ce0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55b7b05c1610 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55b7b05c1510 'type'
|         `-TemplateSpecializationType 0x55b7b05c14a0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55b7b05c1380 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55b7b05c1360 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55b7b05c1340 <col:24> 'unsigned long' 4
|           `-RecordType 0x55b7b05c1480 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55b7b05c13a0 'char_array'
|-CXXMethodDecl 0x55b7b05c2f68 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55b7b05c2e78 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55b7b05c3058 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b7b05c3138 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55b7b05c3408 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b7b05c3310 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55b7b05c3648 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b7b05c34c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b05c3538 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c3818 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b7b05c3708 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b05c3780 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c3978 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b7b05c3a48 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b7b05c3c98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b7b05c3b08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b7b05c3b80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c3ef8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55b7b05c3d68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b7b05c3de0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c40b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b7b05c3fc8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c4278 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b7b05c4180 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05c4330 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b7b05c43e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b7b05c4618 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b7b05c4490 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b7b05c4508 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b7b05cacc8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b7b05c47c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55b7b05cad90 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55b7b05cade0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b7b05cae30 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b05bf8d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55b7b05bfae8 prev 0x55b7b05bf8d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b7b05c0e40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55b7b05c0df0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55b7b05c0dd0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55b7b05c0c80 'type'
|     `-SubstTemplateTypeParmType 0x55b7b05c0aa0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55b7b0297090 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b0297038 'T'
|       `-RecordType 0x55b7b05c05f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55b7b05c0508 'sized_array_memory'
|-FieldDecl 0x55b7b05cae80 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55b7b05caed0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b7b05caf08 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|   |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b7b02cef48 'T'
|   `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05caf98 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55b7b05caf60 'int &'
|   `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cb058 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55b7b05cb020 'const int &'
|   `-QualType 0x55b7b05bfb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cb0e8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55b7b05cb0b0 'int *'
|   `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cb178 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55b7b05cb140 'const int *'
|   `-QualType 0x55b7b05bfb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cbd60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55b7b05cbd10 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55b7b05cbcf0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55b7b05cbc80 'type'
|     `-SubstTemplateTypeParmType 0x55b7b05cba40 'int' sugar
|       |-TemplateTypeParmType 0x55b7b02a1e90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02a1e40 'T'
|       `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cbdc8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55b7b05cb020 'const int &'
|   `-QualType 0x55b7b05bfb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cbe20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cbe88 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55b7b05cb0b0 'int *'
|   `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|     |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b7b02cef48 'T'
|     `-BuiltinType 0x55b7affd0580 'int'
|-TypedefDecl 0x55b7b05cbef0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55b7b05cb140 'const int *'
|   `-QualType 0x55b7b05bfb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55b7b05bfb80 'int' sugar
|       |-TemplateTypeParmType 0x55b7b02cefa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b7b02cef48 'T'
|       `-BuiltinType 0x55b7affd0580 'int'
|-EnumDecl 0x55b7b05cbf48 <line:134:5> col:5
| `-EnumConstantDecl 0x55b7b05cc040 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b7b05cc020 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b7b02d0628 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b7b02d0600 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b7b02d05e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b7b05cc0c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b7b05cc318 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05cc180 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b05cc220 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55b7b05cc5d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55b7b05cc4c0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55b7b05cc898 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55b7b05cc780 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b7b05ccbe0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55b7b05ccac0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55b7b05ccef0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55b7b05ccdd0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b7b05cd1e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05cd028 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b05cd0a0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b7b05cd308 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b7b05cd3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cd440 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cd488 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b7b05cd538 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cd590 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cd658 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b7b05cd708 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cd760 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cd7a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b7b05cd858 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cd8b0 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cd8f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b7b05cd9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cda00 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cda48 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b7b05cdaf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b7b05cdb50 <col:30> Inherited
|-CXXMethodDecl 0x55b7b05cdb78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b7b05cdc28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b7b05cdcd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b7b05cde98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05cdd88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b7b05cde00 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b7b05cdfe8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b05cdf58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05ce198 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55b7b05ce0a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b7b05ce250 <col:20>
| `-OptimizeNoneAttr 0x55b7b05ce2a8 <col:30>
|-CXXMethodDecl 0x55b7b05ce3c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55b7b05ce2d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b7b05ce480 <col:20>
| `-OptimizeNoneAttr 0x55b7b05ce4d8 <col:30>
|-CXXMethodDecl 0x55b7b05ce590 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b05ce500 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05ce6d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b7b05ce648 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05ce808 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55b7b05ce938 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55b7b05cea08 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55b7b05cead8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55b7b05cec18 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b7b05ceb88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05ced60 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b7b05cecd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b7b05ceea8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b7b05cee18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b7b05cef60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b7b05cf060 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b7b05cefd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b7b05cf118 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b7b05cf1d8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55b7b05cf2d8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55b7b05cf458 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b7b05cf398 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55b7b05cfc18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b7b05cf510 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55b7b05cfb78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55b7b05cfa78 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55b7b05cfcf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b7b05cfe48 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b7b05cfdb8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b7b05cff00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b7b05d0148 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b7b05cffc0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b7b05d0038 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b7b05d0308 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55b7b05d0218 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b7b05d0558 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55b7b05d03d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b7b05d0448 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b7b05d0618 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b7b05d0878 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55b7b05d0780 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55b7b05d0948 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b05bda48 prev 0x55b7b04ba018 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b05bdb40 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55b7b05bdc30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55b7b05e26c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55b7b05bdd20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55b7b05e26d0 <col:25, line:830:9>
|-CXXMethodDecl 0x55b7b05bde20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55b7b05bded0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55b7b05bdf78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b7b05bdf78
| `-ParmVarDecl 0x55b7b05be088 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55b7b05be848 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b7b05be848
  `-ParmVarDecl 0x55b7b05be958 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b04b9e28 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55b7b04b9f88 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55b7b04ba018 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55b7b04ba0d0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55b7b05a3468 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55b7b04ba108 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b7b05d1f08 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b7b05d1ee8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b7b05a3788 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b05a3600 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55b7b05a3678 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b7b05d1f40 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b7b05d1f20 <col:59> 'int' 0
|-CXXConstructorDecl 0x55b7b05a3960 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b05a3850 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55b7b05a38c8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b7b05d1f78 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b7b05d1f58 <col:55> 'int' 0
|-CXXConstructorDecl 0x55b7b05a3d18 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b7b05a3b00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55b7b05a3b78 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55b7b05a3bf0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b7b05d1fb0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b7b05d1f90 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b7b05a3ed8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55b7b05a3e18 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55b7b05a3fd0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55b7b05a41b8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55b7b05a40c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55b7b05a42a8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55b7b05d2360 <col:24, line:291:5>
|   `-ReturnStmt 0x55b7b05d2350 <line:290:9, col:79>
|     `-BinaryOperator 0x55b7b05d2330 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55b7b05d2208 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55b7b05d2160 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55b7b05d2140 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55b7b05d2038 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55b7b05d2020 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55b7b05d2008 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55b7b05d1fd8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55b7b05bf870
|       | |   |       `-CXXThisExpr 0x55b7b05d1fc8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55b7b05d2128 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55b7b05d2110 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55b7b05d20d8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55b7b05d20a8 <col:28, col:35> '<bound member function type>' ->size 0x55b7b0584d98
|       | |           `-ImplicitCastExpr 0x55b7b05d20f8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55b7b05d2090 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55b7b05d2060 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55b7b05bf870
|       | |                 `-CXXThisExpr 0x55b7b05d2050 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55b7b05d21f0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55b7b05d21d8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55b7b05d21c0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55b7b05d2190 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55b7b05d0a90
|       |         `-CXXThisExpr 0x55b7b05d2180 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55b7b05d2310 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b05d22f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b7b05d22e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b7b05d22a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b7b05d2288 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b7b05d2238 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b7b05d0b40
|         |     |   `-CXXThisExpr 0x55b7b05d2228 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b7b05d2268 <col:73> 'int' 0
|         `-IntegerLiteral 0x55b7b05d22c0 <col:79> 'int' 0
|-CXXMethodDecl 0x55b7b05a4368 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55b7b05d2538 <col:32, line:296:5>
|   `-ReturnStmt 0x55b7b05d2528 <line:295:9, col:49>
|     `-BinaryOperator 0x55b7b05d2508 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55b7b05d23e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55b7b05d23d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55b7b05d23b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55b7b05d2388 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55b7b05d0a90
|       |       `-CXXThisExpr 0x55b7b05d2378 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55b7b05d24e8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b05d24d0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b7b05d24b8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b7b05d2478 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b7b05d2460 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b7b05d2410 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b7b05d0b40
|         |     |   `-CXXThisExpr 0x55b7b05d2400 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b7b05d2440 <col:43> 'int' 0
|         `-IntegerLiteral 0x55b7b05d2498 <col:49> 'int' 0
|-CXXMethodDecl 0x55b7b05a4458 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55b7b05d2748 <col:19, line:306:5>
|   |-IfStmt 0x55b7b05d2668 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55b7b05d25a8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55b7b05d2590 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55b7b05d2560 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b7b05bf870
|   | |     `-CXXThisExpr 0x55b7b05d2550 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55b7b05d2648 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55b7b05d2618 <col:13, col:20> '<bound member function type>' ->clear 0x55b7b0587798
|   |     `-ImplicitCastExpr 0x55b7b05d2600 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55b7b05d25d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b7b05bf870
|   |         `-CXXThisExpr 0x55b7b05d25c0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55b7b05d26f0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55b7b05d26c0 <col:9, col:16> '<bound member function type>' .clear 0x55b7b05d0618
|   |   `-MemberExpr 0x55b7b05d2690 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55b7b05d0a30
|   |     `-CXXThisExpr 0x55b7b05d2680 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55b7b05d2738 <line:305:9, col:17>
|     `-UnaryOperator 0x55b7b05d2720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d2710 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b7b05a46d8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55b7b05a45e0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55b7b05a4858 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55b7b05a4790 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55b7b05a4bd8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55b7b05a4900 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55b7b05a4b38 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55b7b05a49a8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55b7b05a4a20 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55b7b05d2a68 <col:67, line:327:5>
|     |-WhileStmt 0x55b7b05d2a18 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55b7b05d2830 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55b7b05d27b0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b7b04f0b88 0x55b7b033a168 0x55b7b0339e40 0x55b7b032a610 0x55b7b032a2c0 0x55b7b0329bb0 0x55b7b02fc520 0x55b7b02897d0
|     | | |-DeclRefExpr 0x55b7b05d2770 <col:16> 'Iter' lvalue ParmVar 0x55b7b05a49a8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55b7b05d2790 <col:25> 'Iter' lvalue ParmVar 0x55b7b05a4a20 'end' 'Iter'
|     | `-CompoundStmt 0x55b7b05d29f8 <col:30, line:325:9>
|     |   |-CallExpr 0x55b7b05d2998 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55b7b05d2878 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55b7b05d2968 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55b7b05d28f8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|     |   |   `-DeclRefExpr 0x55b7b05d28d8 <col:24> 'Iter' lvalue ParmVar 0x55b7b05a49a8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55b7b05d29e0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55b7b05d29c0 <col:15> 'Iter' lvalue ParmVar 0x55b7b05a49a8 'begin' 'Iter'
|     `-ReturnStmt 0x55b7b05d2a58 <line:326:9, col:17>
|       `-UnaryOperator 0x55b7b05d2a40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d2a30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b7b05a4ce0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55b7b05a4c50 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55b7b05a4e28 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55b7b05a4d98 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55b7b05a4ef0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55b7b05d2b48 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55b7b05d2ae8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55b7b05d2a98 <col:9> '<bound member function type>' ->reset_from 0x55b7b05d0eb8
|   | | `-CXXThisExpr 0x55b7b05d2a88 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55b7b05d2ac8 <col:20> 'int' 0
|   `-ReturnStmt 0x55b7b05d2b38 <line:352:9, col:17>
|     `-UnaryOperator 0x55b7b05d2b20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d2b10 <col:17> 'Args *' this
|-VarDecl 0x55b7b05a4fa8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b7b05a5010 <col:38> 'int' 1
|-VarDecl 0x55b7b05a50a0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b7b05a5108 <col:39> 'int' 2
|-VarDecl 0x55b7b05a5198 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b7b05a5200 <col:39> 'int' 4
|-VarDecl 0x55b7b05a5290 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b7b05a52f8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55b7b05a5678 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55b7b05a5370 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55b7b05a55d8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55b7b05a5420 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55b7b05a54c8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55b7b05d45c0 <col:43, line:371:5>
| |   `-ReturnStmt 0x55b7b05d2c90 <line:370:9, col:34>
| |     `-CallExpr 0x55b7b05d2c58 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55b7b05d2b78 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55b7b05d2bf8 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a5420 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55b7b05d2c18 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55b7b05d2c38 <col:33> 'T' lvalue ParmVar 0x55b7b05a54c8 'x' 'T &'
| |-CXXMethodDecl 0x55b7b065a0b8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x55b7b0659ed8 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x55b7b0659fa8 <col:37, col:40> col:40 x 'bool &'
| `-CXXMethodDecl 0x55b7b065a558 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b7b065a370 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55b7b065a448 <col:37, col:40> col:40 x 'unsigned int &'
|-FunctionTemplateDecl 0x55b7b05a59a8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55b7b05a56e0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05a5908 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b7b05a5790 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a5838 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d4710 <col:45, line:375:5>
|     `-ReturnStmt 0x55b7b05d4700 <line:374:9, col:42>
|       `-CallExpr 0x55b7b05d46c8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d45e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d4668 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a5790 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d4688 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b7b05d46a8 <col:41> 'T' lvalue ParmVar 0x55b7b05a5838 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a5cd8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55b7b05a5a10 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55b7b05a5c38 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55b7b05a5ac0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55b7b05a5b68 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55b7b05d4860 <col:45, line:379:5>
| |   `-ReturnStmt 0x55b7b05d4850 <line:378:9, col:43>
| |     `-CallExpr 0x55b7b05d4818 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55b7b05d4738 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55b7b05d47b8 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a5ac0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55b7b05d47d8 <col:30> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
| |       `-DeclRefExpr 0x55b7b05d47f8 <col:42> 'T' lvalue ParmVar 0x55b7b05a5b68 'x' 'T &'
| `-CXXMethodDecl 0x55b7b0659ba8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55b7b06599c0 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55b7b0659a98 <col:39, col:42> col:42 x 'String &'
|-FunctionTemplateDecl 0x55b7b05a6008 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55b7b05a5d40 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05a5f68 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b7b05a5df0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a5e98 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d4a60 <col:46, line:383:5>
|     `-ReturnStmt 0x55b7b05d4a50 <line:382:9, col:55>
|       `-CallExpr 0x55b7b05d4a18 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d4888 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d4908 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a5df0 'keyword' 'const char *'
|         |-BinaryOperator 0x55b7b05d49d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b7b05d4988 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b7b05d4968 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b7b05d49c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b7b05d49a0 <col:42> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55b7b05d49f8 <col:54> 'T' lvalue ParmVar 0x55b7b05a5e98 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a6408 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55b7b05a6070 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05a6368 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55b7b05a6120 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a61a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05a6248 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d4ba0 <col:54, line:388:5>
|     |-CallExpr 0x55b7b05d4b28 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d4a78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b7b05d4ab8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d4ac8 <col:30> 'const char *' lvalue ParmVar 0x55b7b05a6120 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d4ae8 <col:39> 'int' lvalue ParmVar 0x55b7b05a61a0 'flags' 'int'
|     | `-DeclRefExpr 0x55b7b05d4b08 <col:46> 'T' lvalue ParmVar 0x55b7b05a6248 'x' 'T &'
|     `-ReturnStmt 0x55b7b05d4b90 <line:387:9, col:17>
|       `-UnaryOperator 0x55b7b05d4b78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d4b68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05a68b8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55b7b05a6478 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05a64f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b7b05a6818 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a65b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a6658 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a66f8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d4d10 <col:74, line:403:5>
|     `-ReturnStmt 0x55b7b05d4d00 <line:402:9, col:56>
|       `-CallExpr 0x55b7b05d4cc0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d4bd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d4c40 <col:28> 'const char *' lvalue ParmVar 0x55b7b05a65b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d4c60 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b7b05d4c80 <col:40> 'T' lvalue ParmVar 0x55b7b05a6658 'x' 'T &'
|         `-DeclRefExpr 0x55b7b05d4ca0 <col:43> 'const V' lvalue ParmVar 0x55b7b05a66f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b7b05a6d28 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b7b05a6928 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05a69a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b7b05a6c88 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a6a68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a6b08 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a6ba8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d4e78 <col:76, line:407:5>
|     `-ReturnStmt 0x55b7b05d4e68 <line:406:9, col:65>
|       `-CallExpr 0x55b7b05d4e28 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d4d38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d4da8 <col:28> 'const char *' lvalue ParmVar 0x55b7b05a6a68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d4dc8 <col:37> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
|         |-DeclRefExpr 0x55b7b05d4de8 <col:49> 'T' lvalue ParmVar 0x55b7b05a6b08 'x' 'T &'
|         `-DeclRefExpr 0x55b7b05d4e08 <col:52> 'const V' lvalue ParmVar 0x55b7b05a6ba8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b7b05a7278 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55b7b05a6d98 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05a6e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b7b05a71d8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a6ed8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a6f58 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05a6ff8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a7098 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d4fe0 <col:85, line:412:5>
|     |-CallExpr 0x55b7b05d4f60 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d4e90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b7b05d4ed0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d4ee0 <col:37> 'const char *' lvalue ParmVar 0x55b7b05a6ed8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d4f00 <col:46> 'int' lvalue ParmVar 0x55b7b05a6f58 'flags' 'int'
|     | |-DeclRefExpr 0x55b7b05d4f20 <col:53> 'T' lvalue ParmVar 0x55b7b05a6ff8 'x' 'T &'
|     | `-DeclRefExpr 0x55b7b05d4f40 <col:56> 'const V' lvalue ParmVar 0x55b7b05a7098 'default_value' 'const V &'
|     `-ReturnStmt 0x55b7b05d4fd0 <line:411:9, col:17>
|       `-UnaryOperator 0x55b7b05d4fb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d4fa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05a7708 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55b7b05a72f0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a7368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05a7668 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05a7428 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a74a0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a7548 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d5160 <col:53, line:425:5>
|     `-ReturnStmt 0x55b7b05d5150 <line:424:9, col:42>
|       `-CallExpr 0x55b7b05d5110 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5090 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a7428 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d50b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b7b05d50d0 <col:33> 'P' lvalue ParmVar 0x55b7b05a74a0 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d50f0 <col:41> 'T' lvalue ParmVar 0x55b7b05a7548 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a7b58 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55b7b05a7778 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a77f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05a7ab8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05a78b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a7930 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a79d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d52d8 <col:55, line:429:5>
|     `-ReturnStmt 0x55b7b05d52c8 <line:428:9, col:50>
|       `-CallExpr 0x55b7b05d5288 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5208 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a78b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d5228 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b7b05d5248 <col:41> 'P' lvalue ParmVar 0x55b7b05a7930 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d5268 <col:49> 'T' lvalue ParmVar 0x55b7b05a79d8 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a7fa8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55b7b05a7bc8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a7c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05a7f08 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05a7d08 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a7d80 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a7e28 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d5450 <col:55, line:433:5>
|     `-ReturnStmt 0x55b7b05d5440 <line:432:9, col:51>
|       `-CallExpr 0x55b7b05d5400 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5300 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5380 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a7d08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d53a0 <col:30> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
|         |-DeclRefExpr 0x55b7b05d53c0 <col:42> 'P' lvalue ParmVar 0x55b7b05a7d80 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d53e0 <col:50> 'T' lvalue ParmVar 0x55b7b05a7e28 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a83f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55b7b05a8018 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a8098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05a8358 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05a8158 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a81d0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a8278 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d5678 <col:56, line:437:5>
|     `-ReturnStmt 0x55b7b05d5668 <line:436:9, col:63>
|       `-CallExpr 0x55b7b05d5628 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5478 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d54f8 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a8158 'keyword' 'const char *'
|         |-BinaryOperator 0x55b7b05d55c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b7b05d5578 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b7b05d5558 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b7b05d55b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b7b05d5590 <col:42> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b7b05d55e8 <col:54> 'P' lvalue ParmVar 0x55b7b05a81d0 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d5608 <col:62> 'T' lvalue ParmVar 0x55b7b05a8278 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05a8928 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55b7b05a8468 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a84e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05a8888 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b7b05a85a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a8628 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05a86a0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a8748 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d57e0 <col:64, line:442:5>
|     |-CallExpr 0x55b7b05d5760 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d5690 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b7b05d56d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d56e0 <col:30> 'const char *' lvalue ParmVar 0x55b7b05a85a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d5700 <col:39> 'int' lvalue ParmVar 0x55b7b05a8628 'flags' 'int'
|     | |-DeclRefExpr 0x55b7b05d5720 <col:46> 'P' lvalue ParmVar 0x55b7b05a86a0 'parser' 'P'
|     | `-DeclRefExpr 0x55b7b05d5740 <col:54> 'T' lvalue ParmVar 0x55b7b05a8748 'x' 'T &'
|     `-ReturnStmt 0x55b7b05d57d0 <line:441:9, col:17>
|       `-UnaryOperator 0x55b7b05d57b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d57a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05a8f28 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55b7b05a89a0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a8a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b7b05a8a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b7b05a8e88 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a8b60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a8bd8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a8c78 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a8d48 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d5978 <col:84, line:458:5>
|     `-ReturnStmt 0x55b7b05d5968 <line:457:9, col:64>
|       `-CallExpr 0x55b7b05d5920 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5880 <col:28> 'const char *' lvalue ParmVar 0x55b7b05a8b60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d58a0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b7b05d58c0 <col:40> 'P' lvalue ParmVar 0x55b7b05a8bd8 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d58e0 <col:48> 'T' lvalue ParmVar 0x55b7b05a8c78 'x' 'T &'
|         `-DeclRefExpr 0x55b7b05d5900 <col:51> 'const V' lvalue ParmVar 0x55b7b05a8d48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b7b05a94a8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b7b05a8fa0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a9018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b7b05a9098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b7b05a9408 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a9160 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a91d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a9278 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a9318 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d5b08 <col:86, line:462:5>
|     `-ReturnStmt 0x55b7b05d5af8 <line:461:9, col:73>
|       `-CallExpr 0x55b7b05d5ab0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d59a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5a10 <col:28> 'const char *' lvalue ParmVar 0x55b7b05a9160 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d5a30 <col:37> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
|         |-DeclRefExpr 0x55b7b05d5a50 <col:49> 'P' lvalue ParmVar 0x55b7b05a91d8 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d5a70 <col:57> 'T' lvalue ParmVar 0x55b7b05a9278 'x' 'T &'
|         `-DeclRefExpr 0x55b7b05d5a90 <col:60> 'const V' lvalue ParmVar 0x55b7b05a9318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b7b05a9b08 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55b7b05a9520 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a9598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b7b05a9618 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b7b05a9a68 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05a96e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a9760 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05a97d8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a9878 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05a9918 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b7b05d5c98 <col:95, line:467:5>
|     |-CallExpr 0x55b7b05d5c10 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d5b20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b7b05d5b60 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d5b70 <col:37> 'const char *' lvalue ParmVar 0x55b7b05a96e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d5b90 <col:46> 'int' lvalue ParmVar 0x55b7b05a9760 'flags' 'int'
|     | |-DeclRefExpr 0x55b7b05d5bb0 <col:53> 'P' lvalue ParmVar 0x55b7b05a97d8 'parser' 'P'
|     | |-DeclRefExpr 0x55b7b05d5bd0 <col:61> 'T' lvalue ParmVar 0x55b7b05a9878 'x' 'T &'
|     | `-DeclRefExpr 0x55b7b05d5bf0 <col:64> 'const V' lvalue ParmVar 0x55b7b05a9918 'default_value' 'const V &'
|     `-ReturnStmt 0x55b7b05d5c88 <line:466:9, col:17>
|       `-UnaryOperator 0x55b7b05d5c70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d5c60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05aa0e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55b7b05a9b88 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05a9c08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05a9c88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05aa048 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05a9d50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05a9dc8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05a9e68 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b7b05a9f08 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b7b05d5e40 <col:63, line:481:5>
|     `-ReturnStmt 0x55b7b05d5e30 <line:480:9, col:47>
|       `-CallExpr 0x55b7b05d5de8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5cc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5d48 <col:21> 'const char *' lvalue ParmVar 0x55b7b05a9d50 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d5d68 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b7b05d5d88 <col:33> 'P' lvalue ParmVar 0x55b7b05a9dc8 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d5da8 <col:41> 'T1' lvalue ParmVar 0x55b7b05a9e68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b7b05d5dc8 <col:45> 'T2' lvalue ParmVar 0x55b7b05a9f08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b7b05aa668 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55b7b05aa160 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05aa1d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05aa258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05aa5c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05aa320 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05aa398 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05aa438 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b7b05aa4d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b7b05d5fe0 <col:65, line:485:5>
|     `-ReturnStmt 0x55b7b05d5fd0 <line:484:9, col:55>
|       `-CallExpr 0x55b7b05d5f88 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d5e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d5ee8 <col:21> 'const char *' lvalue ParmVar 0x55b7b05aa320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d5f08 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b7b05d5f28 <col:41> 'P' lvalue ParmVar 0x55b7b05aa398 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d5f48 <col:49> 'T1' lvalue ParmVar 0x55b7b05aa438 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b7b05d5f68 <col:53> 'T2' lvalue ParmVar 0x55b7b05aa4d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b7b05aabe8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55b7b05aa6e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05aa758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05aa7d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05aab48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05aa8a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05aa918 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05aa9b8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b7b05aaa58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b7b05d6180 <col:65, line:489:5>
|     `-ReturnStmt 0x55b7b05d6170 <line:488:9, col:56>
|       `-CallExpr 0x55b7b05d6128 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6088 <col:21> 'const char *' lvalue ParmVar 0x55b7b05aa8a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d60a8 <col:30> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
|         |-DeclRefExpr 0x55b7b05d60c8 <col:42> 'P' lvalue ParmVar 0x55b7b05aa918 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d60e8 <col:50> 'T1' lvalue ParmVar 0x55b7b05aa9b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b7b05d6108 <col:54> 'T2' lvalue ParmVar 0x55b7b05aaa58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b7b05ab168 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55b7b05aac60 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05aacd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05aad58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05ab0c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05aae20 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05aae98 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05aaf38 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b7b05aafd8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b7b05d63d0 <col:66, line:493:5>
|     `-ReturnStmt 0x55b7b05d63c0 <line:492:9, col:68>
|       `-CallExpr 0x55b7b05d6378 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d61a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6228 <col:21> 'const char *' lvalue ParmVar 0x55b7b05aae20 'keyword' 'const char *'
|         |-BinaryOperator 0x55b7b05d62f8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b7b05d62a8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b7b05d6288 <col:30> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b7b05d62e0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b7b05d62c0 <col:42> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b7b05d6318 <col:54> 'P' lvalue ParmVar 0x55b7b05aae98 'parser' 'P'
|         |-DeclRefExpr 0x55b7b05d6338 <col:62> 'T1' lvalue ParmVar 0x55b7b05aaf38 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b7b05d6358 <col:66> 'T2' lvalue ParmVar 0x55b7b05aafd8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b7b05ac468 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55b7b05ab1e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ab258 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05ab2d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05ac3c8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05ac040 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ac0c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05ac138 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05ac1d8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b7b05ac278 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b7b05d6560 <col:74, line:498:5>
|     |-CallExpr 0x55b7b05d64d8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d63e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b7b05d6428 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d6438 <col:30> 'const char *' lvalue ParmVar 0x55b7b05ac040 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d6458 <col:39> 'int' lvalue ParmVar 0x55b7b05ac0c0 'flags' 'int'
|     | |-DeclRefExpr 0x55b7b05d6478 <col:46> 'P' lvalue ParmVar 0x55b7b05ac138 'parser' 'P'
|     | |-DeclRefExpr 0x55b7b05d6498 <col:54> 'T1' lvalue ParmVar 0x55b7b05ac1d8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55b7b05d64b8 <col:58> 'T2' lvalue ParmVar 0x55b7b05ac278 'x2' 'T2 &'
|     `-ReturnStmt 0x55b7b05d6550 <line:497:9, col:17>
|       `-UnaryOperator 0x55b7b05d6538 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d6528 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05ac7c8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55b7b05ac4e8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05ac728 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b7b05ac5a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ac618 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d66a8 <col:52, line:509:5>
|     `-ReturnStmt 0x55b7b05d6698 <line:508:9, col:44>
|       `-CallExpr 0x55b7b05d6660 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6590 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6600 <col:26> 'const char *' lvalue ParmVar 0x55b7b05ac5a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d6620 <col:35> 'int' 0
|         `-DeclRefExpr 0x55b7b05d6640 <col:38> 'P' lvalue ParmVar 0x55b7b05ac618 'parser' 'P'
|-FunctionTemplateDecl 0x55b7b05acac8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55b7b05ac830 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05aca28 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b7b05ac8e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ac958 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d67e8 <col:54, line:513:5>
|     `-ReturnStmt 0x55b7b05d67d8 <line:512:9, col:52>
|       `-CallExpr 0x55b7b05d67a0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d66d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6740 <col:26> 'const char *' lvalue ParmVar 0x55b7b05ac8e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d6760 <col:35> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b7b05d6780 <col:46> 'P' lvalue ParmVar 0x55b7b05ac958 'parser' 'P'
|-FunctionTemplateDecl 0x55b7b05acdc8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55b7b05acb30 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05acd28 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b7b05acbe0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05acc58 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d6928 <col:54, line:517:5>
|     `-ReturnStmt 0x55b7b05d6918 <line:516:9, col:53>
|       `-CallExpr 0x55b7b05d68e0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6880 <col:26> 'const char *' lvalue ParmVar 0x55b7b05acbe0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d68a0 <col:35> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int'
|         `-DeclRefExpr 0x55b7b05d68c0 <col:47> 'P' lvalue ParmVar 0x55b7b05acc58 'parser' 'P'
|-FunctionTemplateDecl 0x55b7b05ad0c8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b7b05ace30 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05ad028 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b7b05acee0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05acf58 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d6b18 <col:55, line:521:5>
|     `-ReturnStmt 0x55b7b05d6b08 <line:520:9, col:65>
|       `-CallExpr 0x55b7b05d6ad0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d69c0 <col:26> 'const char *' lvalue ParmVar 0x55b7b05acee0 'keyword' 'const char *'
|         |-BinaryOperator 0x55b7b05d6a90 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55b7b05d6a40 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b7b05d6a20 <col:35> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b7b05d6a78 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b7b05d6a58 <col:47> 'const int' lvalue Var 0x55b7b05a50a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55b7b05d6ab0 <col:59> 'P' lvalue ParmVar 0x55b7b05acf58 'parser' 'P'
|-FunctionTemplateDecl 0x55b7b05ad498 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55b7b05ad130 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05ad3f8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b7b05ad1e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ad260 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05ad2d8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d6c58 <col:63, line:526:5>
|     |-CallExpr 0x55b7b05d6be0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d6b30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55b7b05d6b70 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d6b80 <col:35> 'const char *' lvalue ParmVar 0x55b7b05ad1e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b7b05d6ba0 <col:44> 'int' lvalue ParmVar 0x55b7b05ad260 'flags' 'int'
|     | `-DeclRefExpr 0x55b7b05d6bc0 <col:51> 'P' lvalue ParmVar 0x55b7b05ad2d8 'parser' 'P'
|     `-ReturnStmt 0x55b7b05d6c48 <line:525:9, col:17>
|       `-UnaryOperator 0x55b7b05d6c30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d6c20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05ad8e8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55b7b05ad508 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ad588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05ad848 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05ad648 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ad6c0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05ad768 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d6db0 <col:58, line:541:5>
|     `-ReturnStmt 0x55b7b05d6da0 <line:540:9, col:39>
|       `-CallExpr 0x55b7b05d6d68 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6d08 <col:21> 'const char *' lvalue ParmVar 0x55b7b05ad648 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d6d28 <col:30> 'P' lvalue ParmVar 0x55b7b05ad6c0 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d6d48 <col:38> 'T' lvalue ParmVar 0x55b7b05ad768 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05add38 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55b7b05ad958 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ad9d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05adc98 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05ada98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05adb10 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05adbb8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d6ee8 <col:60, line:545:5>
|     `-ReturnStmt 0x55b7b05d6ed8 <line:544:9, col:41>
|       `-CallExpr 0x55b7b05d6ea0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6e40 <col:23> 'const char *' lvalue ParmVar 0x55b7b05ada98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d6e60 <col:32> 'P' lvalue ParmVar 0x55b7b05adb10 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d6e80 <col:40> 'T' lvalue ParmVar 0x55b7b05adbb8 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05ae188 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55b7b05adda8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ade28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05ae0e8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05adee8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05adf60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05ae008 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d7020 <col:60, line:549:5>
|     `-ReturnStmt 0x55b7b05d7010 <line:548:9, col:41>
|       `-CallExpr 0x55b7b05d6fd8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d6f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d6f78 <col:23> 'const char *' lvalue ParmVar 0x55b7b05adee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d6f98 <col:32> 'P' lvalue ParmVar 0x55b7b05adf60 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d6fb8 <col:40> 'T' lvalue ParmVar 0x55b7b05ae008 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05ae5d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b7b05ae1f8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ae278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05ae538 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05ae338 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ae3b0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05ae458 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d7158 <col:61, line:553:5>
|     `-ReturnStmt 0x55b7b05d7148 <line:552:9, col:42>
|       `-CallExpr 0x55b7b05d7110 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7048 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d70b0 <col:24> 'const char *' lvalue ParmVar 0x55b7b05ae338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d70d0 <col:33> 'P' lvalue ParmVar 0x55b7b05ae3b0 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d70f0 <col:41> 'T' lvalue ParmVar 0x55b7b05ae458 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05aeab8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55b7b05ae648 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05ae6c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05aea18 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b7b05ae788 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05ae808 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05ae880 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05ae928 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d72d0 <col:69, line:557:5>
|     `-ReturnStmt 0x55b7b05d72c0 <line:556:9, col:46>
|       `-CallExpr 0x55b7b05d7280 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d7200 <col:21> 'const char *' lvalue ParmVar 0x55b7b05ae788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d7220 <col:30> 'int' lvalue ParmVar 0x55b7b05ae808 'flags' 'int'
|         |-DeclRefExpr 0x55b7b05d7240 <col:37> 'P' lvalue ParmVar 0x55b7b05ae880 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d7260 <col:45> 'T' lvalue ParmVar 0x55b7b05ae928 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05aedc8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55b7b05aeb30 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05aed28 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b7b05aebe0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05aec58 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d7410 <col:56, line:571:5>
|     `-ReturnStmt 0x55b7b05d7400 <line:570:9, col:48>
|       `-CallExpr 0x55b7b05d73c8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d72f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d7368 <col:30> 'const char *' lvalue ParmVar 0x55b7b05aebe0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d7388 <col:39> 'int' 0
|         `-DeclRefExpr 0x55b7b05d73a8 <col:42> 'P' lvalue ParmVar 0x55b7b05aec58 'parser' 'P'
|-FunctionTemplateDecl 0x55b7b05af158 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55b7b05aee30 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05af0b8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b7b05aeee0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05aef60 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05aefd8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05d75e0 <col:67, line:576:5>
|     |-CallExpr 0x55b7b05d7568 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d7428 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b7b05d7468 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d7478 <col:39> 'const char *' lvalue ParmVar 0x55b7b05aeee0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b7b05d7528 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b7b05d74d8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b7b05d7498 <col:48> 'int' lvalue ParmVar 0x55b7b05aef60 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b7b05d7510 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b7b05d74f0 <col:56> 'const int' lvalue Var 0x55b7b05a5290 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55b7b05d7548 <col:68> 'P' lvalue ParmVar 0x55b7b05aefd8 'parser' 'P'
|     `-ReturnStmt 0x55b7b05d75d0 <line:575:9, col:17>
|       `-UnaryOperator 0x55b7b05d75b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d75a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05af5a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55b7b05af1c8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05af248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05af508 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b7b05af308 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05af380 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05af428 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d7750 <col:62, line:592:5>
|     `-ReturnStmt 0x55b7b05d7740 <line:591:9, col:51>
|       `-CallExpr 0x55b7b05d7700 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d7680 <col:30> 'const char *' lvalue ParmVar 0x55b7b05af308 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d76a0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55b7b05d76c0 <col:42> 'P' lvalue ParmVar 0x55b7b05af380 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d76e0 <col:50> 'T' lvalue ParmVar 0x55b7b05af428 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05afa88 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55b7b05af618 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05af698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05af9e8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b7b05af758 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05af7d8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05af850 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05af8f8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d7948 <col:73, line:597:5>
|     |-CallExpr 0x55b7b05d78c8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d7768 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b7b05d77a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d77b8 <col:39> 'const char *' lvalue ParmVar 0x55b7b05af758 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b7b05d7868 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b7b05d7818 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b7b05d77d8 <col:48> 'int' lvalue ParmVar 0x55b7b05af7d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b7b05d7850 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b7b05d7830 <col:56> 'const int' lvalue Var 0x55b7b05a5290 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b7b05d7888 <col:68> 'P' lvalue ParmVar 0x55b7b05af850 'parser' 'P'
|     | `-DeclRefExpr 0x55b7b05d78a8 <col:76> 'T' lvalue ParmVar 0x55b7b05af8f8 'x' 'T &'
|     `-ReturnStmt 0x55b7b05d7938 <line:596:9, col:17>
|       `-UnaryOperator 0x55b7b05d7920 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d7910 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05b0038 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55b7b05afb00 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05afb78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05aff98 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b7b05afc38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05afcb0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05afe70 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b7b05d7ab8 <col:65, line:614:5>
|     `-ReturnStmt 0x55b7b05d7aa8 <line:613:9, col:46>
|       `-CallExpr 0x55b7b05d7a68 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d79e8 <col:25> 'const char *' lvalue ParmVar 0x55b7b05afc38 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d7a08 <col:34> 'int' 0
|         |-DeclRefExpr 0x55b7b05d7a28 <col:37> 'P' lvalue ParmVar 0x55b7b05afcb0 'parser' 'P'
|         `-DeclRefExpr 0x55b7b05d7a48 <col:45> 'Vector<T>' lvalue ParmVar 0x55b7b05afe70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b7b05b0468 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55b7b05b00a8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05b03c8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55b7b05b0160 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b02b0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b7b05d7cd0 <col:55, line:618:5>
|     `-ReturnStmt 0x55b7b05d7cc0 <line:617:9, col:55>
|       `-CallExpr 0x55b7b05d7c80 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7ae0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d7b50 <col:25> 'const char *' lvalue ParmVar 0x55b7b05b0160 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b7b05d7b70 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55b7b05d7c40 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b7b05d7c60 <col:54> 'Vector<T>' lvalue ParmVar 0x55b7b05b02b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b7b05b0a38 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55b7b05b04d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05b0548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05b0998 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b7b05b0608 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b0688 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b0700 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05b0850 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b7b05d7ec8 <col:76, line:623:5>
|     |-CallExpr 0x55b7b05d7e48 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b7b05d7ce8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55b7b05d7d28 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55b7b05d7d38 <col:34> 'const char *' lvalue ParmVar 0x55b7b05b0608 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b7b05d7de8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b7b05d7d98 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b7b05d7d58 <col:43> 'int' lvalue ParmVar 0x55b7b05b0688 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b7b05d7dd0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b7b05d7db0 <col:51> 'const int' lvalue Var 0x55b7b05a5290 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b7b05d7e08 <col:63> 'P' lvalue ParmVar 0x55b7b05b0700 'parser' 'P'
|     | `-DeclRefExpr 0x55b7b05d7e28 <col:71> 'Vector<T>' lvalue ParmVar 0x55b7b05b0850 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55b7b05d7eb8 <line:622:9, col:17>
|       `-UnaryOperator 0x55b7b05d7ea0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d7e90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05b0f78 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55b7b05b0ab0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05b0b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05b0ed8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55b7b05b0be8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b0c68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b0db0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b7b05d8130 <col:66, line:627:5>
|     `-ReturnStmt 0x55b7b05d8120 <line:626:9, col:59>
|       `-CallExpr 0x55b7b05d80e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b7b05d7ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b7b05d7f68 <col:25> 'const char *' lvalue ParmVar 0x55b7b05b0be8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b7b05d7f88 <col:34> 'int' lvalue ParmVar 0x55b7b05b0c68 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55b7b05d80a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b7b05d80c0 <col:58> 'Vector<T>' lvalue ParmVar 0x55b7b05b0db0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55b7b05b1008 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55b7b05d81b0 <col:25, line:633:5>
|   `-ReturnStmt 0x55b7b05d81a0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55b7b05d8188 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b7b05d8158 <col:16> 'const bool' lvalue ->_status 0x55b7b05bf6d8
|         `-CXXThisExpr 0x55b7b05d8148 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b7b05b1188 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55b7b05b10c0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55b7b05d8298 <col:27, line:639:5>
|   |-BinaryOperator 0x55b7b05d8240 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b7b05d81c8 <col:9> 'bool' lvalue ParmVar 0x55b7b05b10c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b7b05d8228 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b05d81f8 <col:13> 'bool' lvalue ->_status 0x55b7b05bf6d8
|   |     `-CXXThisExpr 0x55b7b05d81e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b7b05d8288 <line:638:9, col:17>
|     `-UnaryOperator 0x55b7b05d8270 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d8260 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b7b05b1308 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b7b05b1248 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55b7b05d8388 <col:39, line:644:5>
|   |-BinaryOperator 0x55b7b05d8330 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b7b05d82b8 <col:9> 'bool' lvalue ParmVar 0x55b7b05b1248 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b7b05d8318 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b05d82e8 <col:13> 'const bool' lvalue ->_status 0x55b7b05bf6d8
|   |     `-CXXThisExpr 0x55b7b05d82d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b7b05d8378 <line:643:9, col:17>
|     `-UnaryOperator 0x55b7b05d8360 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d8350 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b7b05b13d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55b7b05d8430 <col:30, line:651:5>
|   `-ReturnStmt 0x55b7b05d8420 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55b7b05d8408 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b7b05d83d8 <col:16> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|         `-ImplicitCastExpr 0x55b7b05d83b8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55b7b05d83a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b7b05b1518 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55b7b05b1488 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55b7b05d8538 <col:32, line:658:5>
|   |-BinaryOperator 0x55b7b05d84e0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b7b05d8448 <col:9> 'bool' lvalue ParmVar 0x55b7b05b1488 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b7b05d84c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b05d8498 <col:13> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|   |     `-ImplicitCastExpr 0x55b7b05d8478 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b7b05d8468 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b7b05d8528 <line:657:9, col:17>
|     `-UnaryOperator 0x55b7b05d8510 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d8500 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b7b05b1668 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b7b05b15d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55b7b05d8648 <col:44, line:663:5>
|   |-BinaryOperator 0x55b7b05d85f0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b7b05d8558 <col:9> 'bool' lvalue ParmVar 0x55b7b05b15d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b7b05d85d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b7b05d85a8 <col:13> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|   |     `-ImplicitCastExpr 0x55b7b05d8588 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b7b05d8578 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b7b05d8638 <line:662:9, col:17>
|     `-UnaryOperator 0x55b7b05d8620 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b05d8610 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b7b05b1730 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55b7b05b17f8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55b7b05b18c0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55b7b05b1988 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55b7b05b1c98 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55b7b05b1a28 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05b1bf8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55b7b05b1b08 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d8a00 <col:19, line:706:5>
|     `-IfStmt 0x55b7b05d89d8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55b7b05d8748 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55b7b05d8908 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55b7b05d88d8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55b7b05d8898 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55b7b05d87a0 <col:42> '<bound member function type>' ->simple_slot 0x55b7b05d1b70
|       |     | `-CXXThisExpr 0x55b7b05d8790 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55b7b05d8838 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55b7b05d87f0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55b7b033ec08
|       |     | `-DeclRefExpr 0x55b7b05d87d0 <col:55> 'T' lvalue ParmVar 0x55b7b05b1b08 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55b7b05d8878 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55b7b05d89c8 <line:705:13, col:34>
|         `-CallExpr 0x55b7b05d89a0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55b7b05d8928 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55b7b05d8980 <col:33> 'T' lvalue ParmVar 0x55b7b05b1b08 'x' 'T &'
|-FunctionTemplateDecl 0x55b7b05b1f68 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55b7b05b1cf8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05b1ec8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55b7b05b1dd8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55b7b05d8de0 <col:31, line:717:5>
|     |-DeclStmt 0x55b7b05d8b40 <line:713:9, col:23>
|     | `-VarDecl 0x55b7b05d8a28 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55b7b05d8b18 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b7b05d8aa0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b7b05d8af8 <col:21> 'T' lvalue ParmVar 0x55b7b05b1dd8 'x' 'T &'
|     |-IfStmt 0x55b7b05d8d90 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55b7b05d8c38 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55b7b05d8d70 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b7b05d8d10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b7b05d8ca0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|     |   | `-DeclRefExpr 0x55b7b05d8c80 <col:14> 'T *' lvalue Var 0x55b7b05d8a28 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55b7b05d8d50 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55b7b05d8dc8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55b7b05d8da8 <col:16> 'T *' lvalue Var 0x55b7b05d8a28 's' 'T *'
|-FunctionTemplateDecl 0x55b7b05b2378 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55b7b05b1fc8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05b2048 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b7b05b22d8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55b7b05b2128 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55b7b05b21c8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55b7b05d90f0 <col:37, line:726:5>
|     |-IfStmt 0x55b7b05d9080 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55b7b05d90a0 <line:723:13, col:26>
|     | | `-VarDecl 0x55b7b05d8e48 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55b7b05d8f38 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55b7b05d8ec0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55b7b05d8f18 <col:25> 'T' lvalue ParmVar 0x55b7b05b2128 'x' 'T &'
|     | |-DeclRefExpr 0x55b7b05d8f60 <col:16> 'T *' lvalue Var 0x55b7b05d8e48 's' 'T *'
|     | `-BinaryOperator 0x55b7b05d9060 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b7b05d9010 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b7b05d8fa0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|     |   | `-DeclRefExpr 0x55b7b05d8f80 <col:14> 'T *' lvalue Var 0x55b7b05d8e48 's' 'T *'
|     |   `-DeclRefExpr 0x55b7b05d9040 <col:18> 'const V' lvalue ParmVar 0x55b7b05b21c8 'value' 'const V &'
|     `-ReturnStmt 0x55b7b05d90e0 <line:725:9, col:17>
|       `-UnaryOperator 0x55b7b05d90c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b7b05d90b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b7b05b2778 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55b7b05b23e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b7b05b26d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55b7b05b2490 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b2510 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b25b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55b7b05d9f10 <col:65, line:737:5>
|     |-DeclStmt 0x55b7b05d9188 <line:732:9, col:26>
|     | `-VarDecl 0x55b7b05d9120 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b7b05d9ed8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55b7b05d9ef8 <line:733:13, col:58>
|       | `-VarDecl 0x55b7b05d91b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b7b05d9390 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b7b05d9360 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b7b05d9348 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b7b05d9328 <col:26, col:58> 'String' (CXXTemporary 0x55b7b05d9328)
|       |           `-CXXMemberCallExpr 0x55b7b05d92b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b7b05d9228 <col:26> '<bound member function type>' ->find 0x55b7b05d1188
|       |             | `-CXXThisExpr 0x55b7b05d9218 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b7b05d92f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05d9258 <col:31> 'const char *' lvalue ParmVar 0x55b7b05b2490 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b7b05d9308 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05d9278 <col:40> 'int' lvalue ParmVar 0x55b7b05b2510 'flags' 'int'
|       |             `-DeclRefExpr 0x55b7b05d9298 <col:47> 'Args::Slot *' lvalue Var 0x55b7b05d9120 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b7b05d9448 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b7b05d9430 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b7b05d9410 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b7b05d93e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |       `-ImplicitCastExpr 0x55b7b05d93c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b7b05d93a8 <col:20> 'String' lvalue Var 0x55b7b05d91b0 'str' 'String'
|       `-CompoundStmt 0x55b7b05d9eb8 <col:61, line:736:9>
|         |-DeclStmt 0x55b7b05d9900 <line:734:13, col:76>
|         | `-VarDecl 0x55b7b05d9498 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b7b05d98d0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b7b05d9840 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b7b05d9888 <col:60> 'T' lvalue ParmVar 0x55b7b05b25b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55b7b05d98b8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b7b05d98a8 <col:71> 'Args *' this
|         `-CallExpr 0x55b7b05d9e88 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55b7b05d9928 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|           | `-CXXThisExpr 0x55b7b05d9918 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b7b05d9e48 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b7b05d9958 <col:23> 'T *' lvalue Var 0x55b7b05d9498 's' 'T *'
|           | `-CallExpr 0x55b7b05d9e08 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b7b05d9be0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55b7b05d9ce0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55b7b05d9d00 <col:86> 'String' lvalue Var 0x55b7b05d91b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b7b05d9db0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b7b05d9d40 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|           |   | `-DeclRefExpr 0x55b7b05d9d20 <col:92> 'T *' lvalue Var 0x55b7b05d9498 's' 'T *'
|           |   `-UnaryOperator 0x55b7b05d9df0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b7b05d9de0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55b7b05d9e68 <col:103> 'Args::Slot *' lvalue Var 0x55b7b05d9120 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05b2cc8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b7b05b27e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05b2868 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b7b05b2c28 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05b2928 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b29a8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b2a48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55b7b05b2ae8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55b7b05dadb0 <col:88, line:745:5>
|     |-DeclStmt 0x55b7b05d9fa8 <line:741:9, col:26>
|     | `-VarDecl 0x55b7b05d9f40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b7b05da1c8 <line:742:9, col:55>
|     | `-VarDecl 0x55b7b05d9fd0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b7b05da1b0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b7b05da180 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b7b05da168 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b7b05da148 <col:22, col:54> 'String' (CXXTemporary 0x55b7b05da148)
|     |           `-CXXMemberCallExpr 0x55b7b05da0d8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b7b05da048 <col:22> '<bound member function type>' ->find 0x55b7b05d1188
|     |             | `-CXXThisExpr 0x55b7b05da038 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b7b05da110 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b7b05da078 <col:27> 'const char *' lvalue ParmVar 0x55b7b05b2928 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b7b05da128 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b7b05da098 <col:36> 'int' lvalue ParmVar 0x55b7b05b29a8 'flags' 'int'
|     |             `-DeclRefExpr 0x55b7b05da0b8 <col:43> 'Args::Slot *' lvalue Var 0x55b7b05d9f40 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b7b05da5a0 <line:743:9, col:72>
|     | `-VarDecl 0x55b7b05da218 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b7b05da570 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b7b05da4e0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b7b05da528 <col:56> 'T' lvalue ParmVar 0x55b7b05b2a48 'variable' 'T &'
|     |     `-UnaryOperator 0x55b7b05da558 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b7b05da548 <col:67> 'Args *' this
|     `-CallExpr 0x55b7b05dad80 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55b7b05da5c8 <col:9> '<bound member function type>' ->postparse 0x55b7b05d1398
|       | `-CXXThisExpr 0x55b7b05da5b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b7b05dad40 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b7b05da5f8 <col:19> 'T *' lvalue Var 0x55b7b05da218 's' 'T *'
|       | `-ParenExpr 0x55b7b05dad20 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55b7b05dacf0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b7b05dacd8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b7b05dacc0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b7b05daca0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b7b05dac70 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |     |       `-ImplicitCastExpr 0x55b7b05dac58 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b7b05da618 <col:25> 'String' lvalue Var 0x55b7b05d9fd0 'str' 'String'
|       |     |-CallExpr 0x55b7b05daac8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b7b05da8a0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55b7b05da9a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55b7b05da9c0 <col:89> 'String' lvalue Var 0x55b7b05d9fd0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b7b05daa70 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b7b05daa00 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|       |     | | `-DeclRefExpr 0x55b7b05da9e0 <col:95> 'T *' lvalue Var 0x55b7b05da218 's' 'T *'
|       |     | `-UnaryOperator 0x55b7b05daab0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b7b05daaa0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55b7b05dac38 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55b7b05dac18 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b7b05dabe8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b7b05dab98 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b7b05dab28 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|       |         | | `-DeclRefExpr 0x55b7b05dab08 <col:109> 'T *' lvalue Var 0x55b7b05da218 's' 'T *'
|       |         | `-DeclRefExpr 0x55b7b05dabc8 <col:113> 'const V' lvalue ParmVar 0x55b7b05b2ae8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b7b05dac08 <col:120> 'bool' true
|       `-DeclRefExpr 0x55b7b05dad60 <col:128> 'Args::Slot *' lvalue Var 0x55b7b05d9f40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05b31f8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55b7b05b2d40 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05b2db8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05b3158 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b7b05b2e78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b2ef8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b2f70 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05b3018 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55b7b05db9a8 <col:75, line:754:5>
|     |-DeclStmt 0x55b7b05dae58 <line:749:9, col:26>
|     | `-VarDecl 0x55b7b05dadf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b7b05db970 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55b7b05db990 <line:750:13, col:58>
|       | `-VarDecl 0x55b7b05dae80 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b7b05db060 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b7b05db030 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b7b05db018 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b7b05daff8 <col:26, col:58> 'String' (CXXTemporary 0x55b7b05daff8)
|       |           `-CXXMemberCallExpr 0x55b7b05daf88 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b7b05daef8 <col:26> '<bound member function type>' ->find 0x55b7b05d1188
|       |             | `-CXXThisExpr 0x55b7b05daee8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b7b05dafc0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05daf28 <col:31> 'const char *' lvalue ParmVar 0x55b7b05b2e78 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b7b05dafd8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05daf48 <col:40> 'int' lvalue ParmVar 0x55b7b05b2ef8 'flags' 'int'
|       |             `-DeclRefExpr 0x55b7b05daf68 <col:47> 'Args::Slot *' lvalue Var 0x55b7b05dadf0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b7b05db118 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b7b05db100 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b7b05db0e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b7b05db0b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |       `-ImplicitCastExpr 0x55b7b05db098 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b7b05db078 <col:20> 'String' lvalue Var 0x55b7b05dae80 'str' 'String'
|       `-CompoundStmt 0x55b7b05db950 <col:61, line:753:9>
|         |-DeclStmt 0x55b7b05db4f0 <line:751:13, col:63>
|         | `-VarDecl 0x55b7b05db168 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b7b05db4c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b7b05db430 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b7b05db478 <col:47> 'T' lvalue ParmVar 0x55b7b05b3018 'variable' 'T &'
|         |     `-UnaryOperator 0x55b7b05db4a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b7b05db498 <col:58> 'Args *' this
|         `-CallExpr 0x55b7b05db920 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55b7b05db518 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|           | `-CXXThisExpr 0x55b7b05db508 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b7b05db8e0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b7b05db548 <col:23> 'T *' lvalue Var 0x55b7b05db168 's' 'T *'
|           | `-CallExpr 0x55b7b05db8a0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b7b05db730 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b7b05db778 <col:56> 'P' lvalue ParmVar 0x55b7b05b2f70 'parser' 'P'
|           |   |-DeclRefExpr 0x55b7b05db798 <col:64> 'String' lvalue Var 0x55b7b05dae80 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b7b05db848 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b7b05db7d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|           |   | `-DeclRefExpr 0x55b7b05db7b8 <col:70> 'T *' lvalue Var 0x55b7b05db168 's' 'T *'
|           |   `-UnaryOperator 0x55b7b05db888 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b7b05db878 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55b7b05db900 <col:81> 'Args::Slot *' lvalue Var 0x55b7b05dadf0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05b3858 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b7b05b3270 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b7b05b32e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55b7b05b3368 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b7b05b37b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b7b05b3430 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b34b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b3528 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05b35c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55b7b05b3668 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55b7b05dea88 <col:98, line:762:5>
|     |-DeclStmt 0x55b7b05dba40 <line:758:9, col:26>
|     | `-VarDecl 0x55b7b05db9d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b7b05dbc60 <line:759:9, col:55>
|     | `-VarDecl 0x55b7b05dba68 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b7b05dbc48 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b7b05dbc18 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b7b05dbc00 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b7b05dbbe0 <col:22, col:54> 'String' (CXXTemporary 0x55b7b05dbbe0)
|     |           `-CXXMemberCallExpr 0x55b7b05dbb70 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b7b05dbae0 <col:22> '<bound member function type>' ->find 0x55b7b05d1188
|     |             | `-CXXThisExpr 0x55b7b05dbad0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b7b05dbba8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b7b05dbb10 <col:27> 'const char *' lvalue ParmVar 0x55b7b05b3430 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b7b05dbbc0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b7b05dbb30 <col:36> 'int' lvalue ParmVar 0x55b7b05b34b0 'flags' 'int'
|     |             `-DeclRefExpr 0x55b7b05dbb50 <col:43> 'Args::Slot *' lvalue Var 0x55b7b05db9d8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b7b05dc080 <line:760:9, col:59>
|     | `-VarDecl 0x55b7b05dbcb8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b7b05dc050 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b7b05dbfc0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b7b05dc008 <col:43> 'T' lvalue ParmVar 0x55b7b05b35c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55b7b05dc038 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b7b05dc028 <col:54> 'Args *' this
|     `-CallExpr 0x55b7b05dea58 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55b7b05dc0a8 <col:9> '<bound member function type>' ->postparse 0x55b7b05d1398
|       | `-CXXThisExpr 0x55b7b05dc098 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b7b05dea18 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b7b05dc0d8 <col:19> 'T *' lvalue Var 0x55b7b05dbcb8 's' 'T *'
|       | `-ParenExpr 0x55b7b05de9f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55b7b05de9c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b7b05de9b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b7b05de998 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b7b05de978 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b7b05de948 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |     |       `-ImplicitCastExpr 0x55b7b05de930 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b7b05dc0f8 <col:25> 'String' lvalue Var 0x55b7b05dba68 'str' 'String'
|       |     |-CallExpr 0x55b7b05dc450 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b7b05dc2e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55b7b05dc328 <col:59> 'P' lvalue ParmVar 0x55b7b05b3528 'parser' 'P'
|       |     | |-DeclRefExpr 0x55b7b05dc348 <col:67> 'String' lvalue Var 0x55b7b05dba68 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b7b05dc3f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b7b05dc388 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|       |     | | `-DeclRefExpr 0x55b7b05dc368 <col:73> 'T *' lvalue Var 0x55b7b05dbcb8 's' 'T *'
|       |     | `-UnaryOperator 0x55b7b05dc438 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b7b05dc428 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55b7b05de910 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55b7b05dc5a0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b7b05dc570 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b7b05dc520 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b7b05dc4b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|       |         | | `-DeclRefExpr 0x55b7b05dc490 <col:87> 'T *' lvalue Var 0x55b7b05dbcb8 's' 'T *'
|       |         | `-DeclRefExpr 0x55b7b05dc550 <col:91> 'const V' lvalue ParmVar 0x55b7b05b3668 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b7b05dc590 <col:98> 'bool' true
|       `-DeclRefExpr 0x55b7b05dea38 <col:106> 'Args::Slot *' lvalue Var 0x55b7b05db9d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05b3ec8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55b7b05b38d8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05b3958 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b7b05b39d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b7b05b3e28 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b7b05b3aa0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05b3b20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05b3b98 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05b3c38 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55b7b05b3cd8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55b7b05dfa68 <col:60, line:773:5>
|     |-DeclStmt 0x55b7b05deb30 <line:767:9, col:26>
|     | `-VarDecl 0x55b7b05deac8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b7b05dfa30 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55b7b05dfa50 <line:768:13, col:58>
|       | `-VarDecl 0x55b7b05deb58 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b7b05ded38 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b7b05ded08 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b7b05decf0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b7b05decd0 <col:26, col:58> 'String' (CXXTemporary 0x55b7b05decd0)
|       |           `-CXXMemberCallExpr 0x55b7b05dec60 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b7b05debd0 <col:26> '<bound member function type>' ->find 0x55b7b05d1188
|       |             | `-CXXThisExpr 0x55b7b05debc0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b7b05dec98 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05dec00 <col:31> 'const char *' lvalue ParmVar 0x55b7b05b3aa0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b7b05decb0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05dec20 <col:40> 'int' lvalue ParmVar 0x55b7b05b3b20 'flags' 'int'
|       |             `-DeclRefExpr 0x55b7b05dec40 <col:47> 'Args::Slot *' lvalue Var 0x55b7b05deac8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b7b05dedf0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b7b05dedd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b7b05dedb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b7b05ded88 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |       `-ImplicitCastExpr 0x55b7b05ded70 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b7b05ded50 <col:20> 'String' lvalue Var 0x55b7b05deb58 'str' 'String'
|       `-CompoundStmt 0x55b7b05dfa08 <col:61, line:772:9>
|         |-DeclStmt 0x55b7b05df130 <line:769:13, col:66>
|         | `-VarDecl 0x55b7b05dee48 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55b7b05df100 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b7b05df070 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b7b05df0b8 <col:49> 'T1' lvalue ParmVar 0x55b7b05b3c38 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55b7b05df0e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b7b05df0d8 <col:61> 'Args *' this
|         |-DeclStmt 0x55b7b05df4a0 <line:770:13, col:66>
|         | `-VarDecl 0x55b7b05df1b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55b7b05df470 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b7b05df3e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b7b05df428 <col:49> 'T2' lvalue ParmVar 0x55b7b05b3cd8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55b7b05df458 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b7b05df448 <col:61> 'Args *' this
|         `-CallExpr 0x55b7b05df9d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55b7b05df4c8 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|           | `-CXXThisExpr 0x55b7b05df4b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b7b05df998 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55b7b05df538 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55b7b05df4f8 <col:23> 'T1 *' lvalue Var 0x55b7b05dee48 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55b7b05df518 <col:29> 'T2 *' lvalue Var 0x55b7b05df1b8 's2' 'T2 *'
|           | `-CallExpr 0x55b7b05df950 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b7b05df720 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b7b05df768 <col:63> 'P' lvalue ParmVar 0x55b7b05b3b98 'parser' 'P'
|           |   |-DeclRefExpr 0x55b7b05df788 <col:71> 'String' lvalue Var 0x55b7b05deb58 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b7b05df838 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b7b05df7c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|           |   | `-DeclRefExpr 0x55b7b05df7a8 <col:77> 'T1 *' lvalue Var 0x55b7b05dee48 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55b7b05df8f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b7b05df888 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|           |   | `-DeclRefExpr 0x55b7b05df868 <col:82> 'T2 *' lvalue Var 0x55b7b05df1b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55b7b05df938 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b7b05df928 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55b7b05df9b8 <col:94> 'Args::Slot *' lvalue Var 0x55b7b05deac8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05bcb48 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55b7b05b3f48 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05bcaa8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b7b05bc890 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05bc910 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05bc988 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05dff80 <col:67, line:780:5>
|     |-DeclStmt 0x55b7b05dfb00 <line:777:9, col:26>
|     | `-VarDecl 0x55b7b05dfa98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b7b05dff48 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55b7b05dff68 <line:778:13, col:58>
|       | `-VarDecl 0x55b7b05dfb28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b7b05dfd08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b7b05dfcd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b7b05dfcc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b7b05dfca0 <col:26, col:58> 'String' (CXXTemporary 0x55b7b05dfca0)
|       |           `-CXXMemberCallExpr 0x55b7b05dfc30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b7b05dfba0 <col:26> '<bound member function type>' ->find 0x55b7b05d1188
|       |             | `-CXXThisExpr 0x55b7b05dfb90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b7b05dfc68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05dfbd0 <col:31> 'const char *' lvalue ParmVar 0x55b7b05bc890 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b7b05dfc80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b7b05dfbf0 <col:40> 'int' lvalue ParmVar 0x55b7b05bc910 'flags' 'int'
|       |             `-DeclRefExpr 0x55b7b05dfc10 <col:47> 'Args::Slot *' lvalue Var 0x55b7b05dfa98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b7b05dfdc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b7b05dfda8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b7b05dfd88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b7b05dfd58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|       |       `-ImplicitCastExpr 0x55b7b05dfd40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b7b05dfd20 <col:20> 'String' lvalue Var 0x55b7b05dfb28 'str' 'String'
|       `-CallExpr 0x55b7b05dff18 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55b7b05dfde8 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|         | `-CXXThisExpr 0x55b7b05dfdd8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55b7b05dfec8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55b7b05dfe38 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55b7b05dfe18 <col:23> 'P' lvalue ParmVar 0x55b7b05bc988 'parser' 'P'
|         | |-DeclRefExpr 0x55b7b05dfe80 <col:36> 'String' lvalue Var 0x55b7b05dfb28 'str' 'String'
|         | `-UnaryOperator 0x55b7b05dfeb0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55b7b05dfea0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55b7b05dfef8 <col:49> 'Args::Slot *' lvalue Var 0x55b7b05dfa98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b7b05bcee8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b7b05bcbb8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b7b05bce48 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b7b05bcc70 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05bccf0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05bcd68 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55b7b05e08f0 <col:71, line:792:5>
|     |-DeclStmt 0x55b7b05e0018 <line:784:9, col:26>
|     | `-VarDecl 0x55b7b05dffb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b7b05e00e8 <line:785:9, col:29>
|     | `-VarDecl 0x55b7b05e0048 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b7b05e00d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b7b05e00b0 <col:28> 'int' 1
|     |-WhileStmt 0x55b7b05e07a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55b7b05e07c0 <line:786:16, col:61>
|     | | `-VarDecl 0x55b7b05e0110 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b7b05e02f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b7b05e02c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b7b05e02a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b7b05e0288 <col:29, col:61> 'String' (CXXTemporary 0x55b7b05e0288)
|     | |           `-CXXMemberCallExpr 0x55b7b05e0218 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b7b05e0188 <col:29> '<bound member function type>' ->find 0x55b7b05d1188
|     | |             | `-CXXThisExpr 0x55b7b05e0178 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b7b05e0250 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e01b8 <col:34> 'const char *' lvalue ParmVar 0x55b7b05bcc70 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b7b05e0268 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e01d8 <col:43> 'int' lvalue ParmVar 0x55b7b05bccf0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b7b05e01f8 <col:50> 'Args::Slot *' lvalue Var 0x55b7b05dffb0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b7b05e03a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b7b05e0390 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b7b05e0370 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b7b05e0340 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|     | |       `-ImplicitCastExpr 0x55b7b05e0328 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b7b05e0308 <col:23> 'String' lvalue Var 0x55b7b05e0110 'str' 'String'
|     | `-CompoundStmt 0x55b7b05e0778 <col:64, line:790:9>
|     |   |-CallExpr 0x55b7b05e0500 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55b7b05e03d0 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|     |   | | `-CXXThisExpr 0x55b7b05e03c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b7b05e04b0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b7b05e0420 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b7b05e0400 <col:23> 'P' lvalue ParmVar 0x55b7b05bcd68 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b7b05e0468 <col:36> 'String' lvalue Var 0x55b7b05e0110 'str' 'String'
|     |   | | `-UnaryOperator 0x55b7b05e0498 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b7b05e0488 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55b7b05e04e0 <col:49> 'Args::Slot *' lvalue Var 0x55b7b05dffb0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b7b05e0698 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b7b05e0530 <col:13> 'int' lvalue Var 0x55b7b05e0048 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b7b05e0680 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b7b05e0660 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b7b05e05c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b7b05e05a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b7b05e0590 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b7b05e0550 <col:28> 'int' lvalue Var 0x55b7b05e0048 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b7b05e0570 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b7b05e0648 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b7b05e0618 <col:49> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|     |   |         `-ImplicitCastExpr 0x55b7b05e05f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b7b05e05e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b7b05e0748 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b7b05e06b8 <col:13> 'int' lvalue ParmVar 0x55b7b05bccf0 'flags' 'int'
|     |     `-UnaryOperator 0x55b7b05e0730 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b7b05e0718 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b7b05e06f8 <col:23> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b7b05e08d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b7b05e0808 <col:9> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|       | `-ImplicitCastExpr 0x55b7b05e07e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b7b05e07d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b7b05e08b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b7b05e0890 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b7b05e0878 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b7b05e0838 <col:25> 'int' lvalue Var 0x55b7b05e0048 'read_status' 'int'
|           `-IntegerLiteral 0x55b7b05e0858 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b7b05bd3c8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b7b05bcf58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05bcfd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05bd328 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b7b05bd098 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05bd118 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05bd190 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05bd238 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55b7b05e1880 <col:84, line:805:5>
|     |-DeclStmt 0x55b7b05e0998 <line:796:9, col:26>
|     | `-VarDecl 0x55b7b05e0930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b7b05e0a68 <line:797:9, col:29>
|     | `-VarDecl 0x55b7b05e09c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b7b05e0a50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b7b05e0a30 <col:28> 'int' 1
|     |-DeclStmt 0x55b7b05e0da0 <line:798:9, col:71>
|     | `-VarDecl 0x55b7b05e0ab8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b7b05e0d70 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b7b05e0ce0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55b7b05e0d28 <col:55> 'T' lvalue ParmVar 0x55b7b05bd238 'variable' 'T &'
|     |     `-UnaryOperator 0x55b7b05e0d58 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b7b05e0d48 <col:66> 'Args *' this
|     |-WhileStmt 0x55b7b05e1730 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55b7b05e1750 <line:799:16, col:61>
|     | | `-VarDecl 0x55b7b05e0dc8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b7b05e0fa8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b7b05e0f78 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b7b05e0f60 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b7b05e0f40 <col:29, col:61> 'String' (CXXTemporary 0x55b7b05e0f40)
|     | |           `-CXXMemberCallExpr 0x55b7b05e0ed0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b7b05e0e40 <col:29> '<bound member function type>' ->find 0x55b7b05d1188
|     | |             | `-CXXThisExpr 0x55b7b05e0e30 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b7b05e0f08 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e0e70 <col:34> 'const char *' lvalue ParmVar 0x55b7b05bd098 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b7b05e0f20 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e0e90 <col:43> 'int' lvalue ParmVar 0x55b7b05bd118 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b7b05e0eb0 <col:50> 'Args::Slot *' lvalue Var 0x55b7b05e0930 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b7b05e1060 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b7b05e1048 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b7b05e1028 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b7b05e0ff8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|     | |       `-ImplicitCastExpr 0x55b7b05e0fe0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b7b05e0fc0 <col:23> 'String' lvalue Var 0x55b7b05e0dc8 'str' 'String'
|     | `-CompoundStmt 0x55b7b05e1708 <col:64, line:803:9>
|     |   |-CallExpr 0x55b7b05e1490 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55b7b05e1088 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|     |   | | `-CXXThisExpr 0x55b7b05e1078 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55b7b05e1450 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55b7b05e10b8 <col:23> 'T *' lvalue Var 0x55b7b05e0ab8 's' 'T *'
|     |   | | `-CallExpr 0x55b7b05e1410 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55b7b05e12a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55b7b05e12e8 <col:56> 'P' lvalue ParmVar 0x55b7b05bd190 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55b7b05e1308 <col:64> 'String' lvalue Var 0x55b7b05e0dc8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55b7b05e13b8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55b7b05e1348 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|     |   | |   | `-DeclRefExpr 0x55b7b05e1328 <col:70> 'T *' lvalue Var 0x55b7b05e0ab8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55b7b05e13f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55b7b05e13e8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55b7b05e1470 <col:81> 'Args::Slot *' lvalue Var 0x55b7b05e0930 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b7b05e1628 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b7b05e14c0 <col:13> 'int' lvalue Var 0x55b7b05e09c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b7b05e1610 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b7b05e15f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b7b05e1558 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b7b05e1538 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b7b05e1520 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b7b05e14e0 <col:28> 'int' lvalue Var 0x55b7b05e09c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b7b05e1500 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b7b05e15d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b7b05e15a8 <col:49> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|     |   |         `-ImplicitCastExpr 0x55b7b05e1588 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b7b05e1578 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b7b05e16d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b7b05e1648 <col:13> 'int' lvalue ParmVar 0x55b7b05bd118 'flags' 'int'
|     |     `-UnaryOperator 0x55b7b05e16c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b7b05e16a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b7b05e1688 <col:23> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b7b05e1860 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b7b05e1798 <col:9> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|       | `-ImplicitCastExpr 0x55b7b05e1778 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b7b05e1768 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b7b05e1840 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b7b05e1820 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b7b05e1808 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b7b05e17c8 <col:25> 'int' lvalue Var 0x55b7b05e09c8 'read_status' 'int'
|           `-IntegerLiteral 0x55b7b05e17e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b7b05bd9a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55b7b05bd440 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b7b05bd4b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b7b05bd908 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b7b05bd578 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b7b05bd5f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55b7b05bd670 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55b7b05bd7c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55b7b05e2688 <col:87, line:821:5>
|     |-DeclStmt 0x55b7b05e1930 <line:809:9, col:26>
|     | `-VarDecl 0x55b7b05e18c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b7b05e1a00 <line:810:9, col:29>
|     | `-VarDecl 0x55b7b05e1960 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b7b05e19e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b7b05e19c8 <col:28> 'int' 1
|     |-DeclStmt 0x55b7b05e1c48 <line:811:9, col:38>
|     | `-VarDecl 0x55b7b05e1b30 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55b7b05e1c20 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b7b05e1ba8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b7b05e1c00 <col:29> 'Vector<T>' lvalue ParmVar 0x55b7b05bd7c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55b7b05e2538 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55b7b05e2558 <line:812:16, col:61>
|     | | `-VarDecl 0x55b7b05e1c70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b7b05e1e50 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b7b05e1e20 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b7b05e1e08 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b7b05e1de8 <col:29, col:61> 'String' (CXXTemporary 0x55b7b05e1de8)
|     | |           `-CXXMemberCallExpr 0x55b7b05e1d78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b7b05e1ce8 <col:29> '<bound member function type>' ->find 0x55b7b05d1188
|     | |             | `-CXXThisExpr 0x55b7b05e1cd8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b7b05e1db0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e1d18 <col:34> 'const char *' lvalue ParmVar 0x55b7b05bd578 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b7b05e1dc8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b7b05e1d38 <col:43> 'int' lvalue ParmVar 0x55b7b05bd5f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b7b05e1d58 <col:50> 'Args::Slot *' lvalue Var 0x55b7b05e18c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b7b05e1f08 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b7b05e1ef0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b7b05e1ed0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b7b05e1ea0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b7b0300bc8
|     | |       `-ImplicitCastExpr 0x55b7b05e1e88 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b7b05e1e68 <col:23> 'String' lvalue Var 0x55b7b05e1c70 'str' 'String'
|     | `-CompoundStmt 0x55b7b05e2500 <col:64, line:819:9>
|     |   |-DeclStmt 0x55b7b05e1fc8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55b7b05e1f30 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55b7b05e1fa8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55b7b05e2148 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55b7b05e1ff0 <col:13> '<bound member function type>' ->postparse 0x55b7b05d1398
|     |   | | `-CXXThisExpr 0x55b7b05e1fe0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b7b05e20f0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b7b05e2040 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b7b05e2020 <col:23> 'P' lvalue ParmVar 0x55b7b05bd670 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b7b05e2088 <col:36> 'String' lvalue Var 0x55b7b05e1c70 'str' 'String'
|     |   | | |-DeclRefExpr 0x55b7b05e20a8 <col:41> 'T' lvalue Var 0x55b7b05e1f30 'sx' 'T'
|     |   | | `-UnaryOperator 0x55b7b05e20d8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b7b05e20c8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55b7b05e2128 <col:53> 'Args::Slot *' lvalue Var 0x55b7b05e18c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55b7b05e22a0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55b7b05e21d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55b7b05e21a8 <col:17> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|     |   | |   `-ImplicitCastExpr 0x55b7b05e2188 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55b7b05e2178 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55b7b05e2278 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55b7b05e2210 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55b7b05e21f0 <col:17> 'Vector<T> *' lvalue Var 0x55b7b05e1b30 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55b7b05e2258 <col:30> 'T' lvalue Var 0x55b7b05e1f30 'sx' 'T'
|     |   |-BinaryOperator 0x55b7b05e2420 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b7b05e22b8 <col:13> 'int' lvalue Var 0x55b7b05e1960 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b7b05e2408 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b7b05e23e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b7b05e2350 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b7b05e2330 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b7b05e2318 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b7b05e22d8 <col:28> 'int' lvalue Var 0x55b7b05e1960 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b7b05e22f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b7b05e23d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b7b05e23a0 <col:49> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|     |   |         `-ImplicitCastExpr 0x55b7b05e2380 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b7b05e2370 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b7b05e24d0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b7b05e2440 <col:13> 'int' lvalue ParmVar 0x55b7b05bd5f8 'flags' 'int'
|     |     `-UnaryOperator 0x55b7b05e24b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b7b05e24a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b7b05e2480 <col:23> 'const int' lvalue Var 0x55b7b05a4fa8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b7b05e2668 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b7b05e25a0 <col:9> 'bool' lvalue ->_read_status 0x55b7b04b47e0
|       | `-ImplicitCastExpr 0x55b7b05e2580 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b7b05e2570 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b7b05e2648 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b7b05e2628 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b7b05e2610 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b7b05e25d0 <col:25> 'int' lvalue Var 0x55b7b05e1960 'read_status' 'int'
|           `-IntegerLiteral 0x55b7b05e25f0 <col:40> 'int' 1
|-AccessSpecDecl 0x55b7b05bda20 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55b7b05bda48 prev 0x55b7b04ba018 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55b7b05bdb40 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55b7b05bdc30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55b7b05e26c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55b7b05bdd20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55b7b05e26d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55b7b05bde20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55b7b05bded0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55b7b05bdf78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b7b05bdf78
| | `-ParmVarDecl 0x55b7b05be088 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55b7b05be848 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b7b05be848
|   `-ParmVarDecl 0x55b7b05be958 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55b7b05be0f8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55b7b05be258 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55b7b05be450 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55b7b05be300 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55b7b05be378 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55b7b05e28b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55b7b05be708 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55b7b05e2720 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b7b05e26e0 <col:20> 'void *' lvalue ParmVar 0x55b7b05be300 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55b7b05be770 '_slot' 'char *'
| | | `-CXXNewExpr 0x55b7b05e27a8 <col:32, col:45> 'char *' array Function 0x55b7b0124628 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55b7b05e2790 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55b7b05e2760 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55b7b05be378 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55b7b05be7d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55b7b05e2870 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b7b05e2830 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55b7b05be378 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55b7b05e2930 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55b7b05be550 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55b7b05bdd20 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55b7b05e29b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55b7b05e2998 <line:840:13, col:22> 'void' array Function 0x55b7b0124988 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55b7b05e2980 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55b7b05e2950 <col:22> 'char *' lvalue ->_slot 0x55b7b05be770
| |         `-CXXThisExpr 0x55b7b05e2940 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55b7b05be650 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55b7b05bde20 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55b7b05e2ba8 <col:22, line:844:9>
| |   `-CallExpr 0x55b7b05e2b10 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55b7b05e2af8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b7b05e2ad8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55b7b0230408 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55b7b05e2b48 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55b7b05e2a28 <col:20> 'void *' lvalue ->_ptr 0x55b7b05be708
| |     |   `-CXXThisExpr 0x55b7b05e2a18 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55b7b05e2b78 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55b7b05e2b60 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55b7b05e2a68 <col:26> 'char *' lvalue ->_slot 0x55b7b05be770
| |     |     `-CXXThisExpr 0x55b7b05e2a58 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55b7b05e2b90 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55b7b05e2aa8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55b7b05be7d0
| |         `-CXXThisExpr 0x55b7b05e2a98 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55b7b05be708 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55b7b05be770 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55b7b05be7d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55b7b05be9c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b7b05be9c8
| | `-ParmVarDecl 0x55b7b05bead8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55b7b05beb78 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b7b05beb78
|   `-ParmVarDecl 0x55b7b05bec88 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55b7b05bee28 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55b7b05becf8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55b7b05bed98 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55b7b05bf0c0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55b7b05bf2b8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55b7b05bf188 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55b7b05bf438 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55b7b05e2be0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55b7b05e2bc0 <col:20> 'T *' lvalue ParmVar 0x55b7b05bf188 'ptr' 'T *'
|   | `-CompoundStmt 0x55b7b05e2c30 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55b7b05bf388 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55b7b05bde20 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55b7b05e2de0 <col:22, line:857:9>
|   |   `-CallExpr 0x55b7b05e2db0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55b7b05e2c40 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55b7b02e8d58 0x55b7b0292e68
|   |     |-CXXOperatorCallExpr 0x55b7b05e2d40 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55b7b05e2cd0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b7b04f5d08 0x55b7b04f5928 0x55b7b04f5558 0x55b7b04f5178 0x55b7b04f4d98 0x55b7b04f49c8
|   |     | `-MemberExpr 0x55b7b05e2ca0 <col:29> 'T *' lvalue ->_ptr 0x55b7b05bf438
|   |     |   `-CXXThisExpr 0x55b7b05e2c90 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55b7b05e2d80 <col:35> 'T' lvalue ->_slot 0x55b7b05bf498
|   |       `-CXXThisExpr 0x55b7b05e2d70 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55b7b05bf438 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55b7b05bf498 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55b7b05bf500 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55b7b05bf600 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55b7b05bf650 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b05bf5e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55b7b05bf5c0 <col:31> 'int' 48
|-FieldDecl 0x55b7b05bf678 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55b7b05bf6d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55b7b05bf738 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55b7b05bf870 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55b7b05d0a30 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55b7b05d0a90 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55b7b05d0b40 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55b7b05d0d68 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55b7b05d0c70 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55b7b05d0eb8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55b7b05d0e28 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55b7b05d1188 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55b7b05d0f78 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55b7b05d0ff8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55b7b05d10a0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55b7b05d1398 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55b7b05d1250 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55b7b05d12c8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55b7b05d1468 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55b7b05d15b8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55b7b05d1520 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55b7b05d1948 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55b7b05d1678 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55b7b05d16f8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55b7b05d17a0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55b7b05d1858 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55b7b05d1b70 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55b7b05d1a20 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55b7b05d1a98 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55b7b05d1e88 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55b7b05d1c20 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55b7b05d1de8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55b7b05d1cf8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b02f1a80 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b02f1b98 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55b7b02f1c28 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55b7b02f1cf8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55b7b02f1de0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b02f1ff8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b7b02f1ea0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f21a8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b7b02f20b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b7b02f22f0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b7b02f2260 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b7b02f2438 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b7b02f23a8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f2580 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b7b02f24f0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f2648 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55b7b02f2790 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55b7b02f2700 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b7b02f2858 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55b7b02f29a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55b7b02f2910 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b7b02f2b18 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b7b02f2a58 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f2c60 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b7b02f2bd0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f2d28 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55b7b02f2ee8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b7b02f2dd8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b7b02f2e50 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f3138 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b7b02f2fa8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b02f3020 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b7b02f31e8 <col:86> "" ""
|-CXXMethodDecl 0x55b7b02f3458 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55b7b02f32c8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55b7b02f3340 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f3608 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b7b02f3518 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b7b02f37b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b7b02f36c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b7b02f3a88 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b7b02f3870 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b7b02f38e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b7b02f3960 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f3d68 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b7b02f3b50 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b7b02f3bc8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b02f3c40 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b7b02f3e20 <col:115> "" ""
|-AccessSpecDecl 0x55b7b02f3e90 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55b7b02f3ec8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b02f43d0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b7b02f43d0
| `-ParmVarDecl 0x55b7b02f44d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55b7b02f4578 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b7b02f4578
| `-ParmVarDecl 0x55b7b02f4688 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55b7b0329cb8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b051cac0 <col:7>
|-CXXConstructorDecl 0x55b7b0329d90 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b7b0329d90
| `-ParmVarDecl 0x55b7b0329ea8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55b7b0329f18 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b7b0329f18
| `-ParmVarDecl 0x55b7b032a028 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55b7b051f4c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b050b668 prev 0x55b7b0500870 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b050b760 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55b7b050b850 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55b7b050b978 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55b7b050baf8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55b7b050bc78 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55b7b050bdf8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55b7b051cc28 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b051d498 <col:11>
|-CXXDestructorDecl 0x55b7b051cd00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b051ce38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b7b051ce38
| `-ParmVarDecl 0x55b7b051cf48 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55b7b051cfe8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b7b051cfe8
| `-ParmVarDecl 0x55b7b051d0f8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55b7b051feb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b051ffc8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55b7b0520248 <col:11>
|   `-ReturnStmt 0x55b7b0520238 <col:11>
|     `-UnaryOperator 0x55b7b0520220 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b0520210 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55b7b0520038 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b7b0520038
  `-ParmVarDecl 0x55b7b0520148 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b050be60 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b050bf78 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55b7b050c018 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55b7b050c080 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55b7b050c0e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55b7b050c150 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55b7b050c1b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55b7b050c270 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55b7b050c2d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55b7b050c330 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55b7b051cb38 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55b7b050c018 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55b7b051d4a8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55b7b051d500 <col:12>
|-CXXConstructorDecl 0x55b7b051d168 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b7b051d168
| `-ParmVarDecl 0x55b7b051d278 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55b7b051d318 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b7b051d318
| `-ParmVarDecl 0x55b7b051d428 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55b7b051f5a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b04f9f80 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b04fa098 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55b7b04fa128 <col:16, col:22> col:16 public
|-EnumDecl 0x55b7b04fa150 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55b7b04fa250 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55b7b04fa330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b04fa230 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55b7b04fa210 <col:21> 'int' 28
| `-EnumConstantDecl 0x55b7b04fa2e0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55b7b04fa348 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b04fa2c0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55b7b04fa2a0 <col:22> 'int' 64
|-CXXMethodDecl 0x55b7b04fa688 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55b7b04fa370 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b04fa3f0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55b7b04fa468 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b04fa4e0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fa748 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fa948 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55b7b04fa7c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55b7b04fa838 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fa9f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fab58 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55b7b04faa68 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fac00 <col:72> warn_unused_result ""
|-TypedefDecl 0x55b7b04faf60 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55b7b04faef0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55b7b04fae90 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55b7b04fae50 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55b7affd04e0 'void'
|       |-PointerType 0x55b7b027a100 'unsigned char *'
|       | `-BuiltinType 0x55b7affd05e0 'unsigned char'
|       |-TypedefType 0x55b7b00766d0 'size_t' sugar
|       | |-Typedef 0x55b7b0040be0 'size_t'
|       | `-BuiltinType 0x55b7affd0640 'unsigned long'
|       `-PointerType 0x55b7affd0ce0 'void *'
|         `-BuiltinType 0x55b7affd04e0 'void'
|-CXXMethodDecl 0x55b7b04fb3d8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55b7b04fafd0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55b7b04fb048 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b04fb0e0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55b7b04fb160 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55b7b0515ad0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55b7b0515ab8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55b7b0515a80 <col:58> 'int' 0
| |-ParmVarDecl 0x55b7b04fb1e0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55b7b0515af8 <col:76> 'int' 0
| |-ParmVarDecl 0x55b7b04fb260 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55b7b0515b18 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55b7b04fb4a8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fb528 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b7b04fb5e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55b7b04fb688 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fb6e0 <col:30>
|-CXXMethodDecl 0x55b7b04fb758 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55b7b04fb7f8 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fb850 <col:30>
|-CXXMethodDecl 0x55b7b04fb8c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55b7b04fb968 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fba18 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55b7b04fbab8 <col:20>
| |-OptimizeNoneAttr 0x55b7b04fbb10 <col:30>
| `-WarnUnusedResultAttr 0x55b7b04fbb38 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fbb90 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b7b04fbc30 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fbc88 <col:30>
|-CXXMethodDecl 0x55b7b04fbcd8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b7b04fbd78 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fbdd0 <col:30>
|-CXXMethodDecl 0x55b7b04fbe18 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55b7b04fbeb8 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fbf10 <col:30>
|-CXXMethodDecl 0x55b7b04fbf58 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04fc018 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04fc0e0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b7b04fc1a8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b7b04fc268 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04fc388 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55b7b0515be0 <col:54, line:99:5>
|   `-ReturnStmt 0x55b7b0515bd0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55b7b0515bb8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55b7b0515b88 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b7b050c668
|         `-CXXThisExpr 0x55b7b0515b78 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b7b04fc528 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55b7b04fc438 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55b7b0515c90 <col:67, line:103:5>
|   `-BinaryOperator 0x55b7b0515c70 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b7b0515c08 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b7b050c668
|     | `-CXXThisExpr 0x55b7b0515bf8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b7b0515c58 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b0515c38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55b7b04fc438 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55b7b04fc620 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55b7b0515d10 <col:33, line:107:5>
|   `-ReturnStmt 0x55b7b0515d00 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55b7b0515ce8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55b7b0515cb8 <col:16> 'void *' lvalue ->_destructor_argument 0x55b7b050c6d0
|         `-CXXThisExpr 0x55b7b0515ca8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b7b04fc6e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55b7b0516340 <col:25, line:113:5>
|   |-ParenExpr 0x55b7b0516088 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55b7b0516058 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0515dc8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b7b0515da0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55b7b0515d68 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55b7b0515d38 <col:24> '<bound member function type>' ->shared 0x55b7b04fb758
|   |   |       `-ImplicitCastExpr 0x55b7b0515d88 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55b7b0515d28 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b7b0515e28 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0515e08 <col:42> 'int' 0
|   |   `-CallExpr 0x55b7b0515fb8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0515fa0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0515f80 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0515ff8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0515e98 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55b7b0516010 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0515ec0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0516028 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0515ef8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55b7b0516040 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0515f68 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0515f50 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0515f18 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55b7b0516288 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55b7b05160b8 <col:2> 'unsigned char *' lvalue ->_head 0x55b7b050c470
|   | | `-CXXThisExpr 0x55b7b05160a8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55b7b0516270 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55b7b0516250 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55b7b05160f8 <col:10> 'unsigned char *' lvalue ->_data 0x55b7b050c4d8
|   |     | `-CXXThisExpr 0x55b7b05160e8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55b7b0516238 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55b7b0516218 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55b7b0516138 <col:18> 'unsigned char *' lvalue ->_tail 0x55b7b050c540
|   |         | `-CXXThisExpr 0x55b7b0516128 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55b7b0516200 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55b7b05161e0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55b7b0516178 <col:26> 'unsigned char *' lvalue ->_end 0x55b7b050c5a8
|   |             | `-CXXThisExpr 0x55b7b0516168 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55b7b05161c8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55b7b05161a8 <col:33> 'int' 0
|   `-BinaryOperator 0x55b7b0516320 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b7b05162b8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b7b050c668
|     | `-CXXThisExpr 0x55b7b05162a8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b7b0516308 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55b7b05162e8 <col:16> 'int' 0
|-CXXMethodDecl 0x55b7b04fc820 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b7b04fc790 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b04fc8c8 <col:20>
| |-OptimizeNoneAttr 0x55b7b04fc920 <col:30>
| `-WarnUnusedResultAttr 0x55b7b04fc948 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fca18 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b7b04fc988 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b04fcac0 <col:20>
| |-OptimizeNoneAttr 0x55b7b04fcb18 <col:30>
| `-WarnUnusedResultAttr 0x55b7b04fcb40 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fcc78 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b7b04fcb80 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fcd20 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fce20 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55b7b04fcd90 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b04fcec8 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fcf20 <col:30>
|-CXXMethodDecl 0x55b7b04fcfe8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b7b04fcf58 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fd090 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fd190 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b7b04fd100 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b7b04fd238 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fd338 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55b7b04fd2a8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b04fd3e0 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fd438 <col:30>
|-CXXMethodDecl 0x55b7b04fd5c8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55b7b04fd478 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55b7b04fd4f0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55b7b0515b38 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55b7b04fd678 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55b7b04fd878 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b7b04fd6f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55b7b04fd768 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b04fda88 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b7b04fd938 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b7b04fd9b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b04fdc98 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55b7b04fdb48 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55b7b04fdbc8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55b7b0515b48 <col:39> 'int' 0
|-CXXMethodDecl 0x55b7b04fdd68 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55b7b04fde30 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b7b04fdef8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b7b04fdfb8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04fe080 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55b7b04fe1c8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55b7b04fe138 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55b7b04fe398 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b7b04fe288 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55b7b04fe300 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b04fe468 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55b7b04fe528 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55b7b04fe5c8 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fe620 <col:30>
|-CXXMethodDecl 0x55b7b04fe670 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b7b04fe710 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fe768 <col:30>
|-CXXMethodDecl 0x55b7b04fe7b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b7b04fe878 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04fe940 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55b7b04fe9e0 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fea38 <col:30>
|-CXXMethodDecl 0x55b7b04feb88 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b7b04fea78 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55b7b04feaf0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b04fecd8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55b7b04fec48 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b04fedb0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55b7b04fee70 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55b7b04fef10 <col:20>
| `-OptimizeNoneAttr 0x55b7b04fef68 <col:30>
|-CXXMethodDecl 0x55b7b04fefb8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b7b04ff058 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ff0b0 <col:30>
|-CXXMethodDecl 0x55b7b04ff100 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b7b04ff1c8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55b7b04ff268 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ff2c0 <col:30>
|-CXXMethodDecl 0x55b7b04ff308 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55b7b04ff428 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55b7b04ff598 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55b7b04ff4d8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55b7b04ff688 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55b7b04ff728 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ff780 <col:30>
|-CXXMethodDecl 0x55b7b04ff7d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b7b04ff890 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b04ffac8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55b7b04ff940 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55b7b04ff9b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b04ffb78 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ffbd0 <col:30>
|-CXXMethodDecl 0x55b7b04ffc78 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55b7b04ffd18 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ffd70 <col:30>
|-CXXMethodDecl 0x55b7b04ffdc0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55b7b04ffe60 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ffeb8 <col:30>
|-CXXMethodDecl 0x55b7b04fff00 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55b7b04fffa0 <col:20>
| `-OptimizeNoneAttr 0x55b7b04ffff8 <col:30>
|-CXXMethodDecl 0x55b7b05000f8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55b7b0500030 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55b7b05001a0 <col:20>
| `-OptimizeNoneAttr 0x55b7b05001f8 <col:30>
|-CXXMethodDecl 0x55b7b05003b8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55b7b0500230 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55b7b05002a8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b0500468 <col:20>
| `-OptimizeNoneAttr 0x55b7b05004c0 <col:30>
|-CXXMethodDecl 0x55b7b0500568 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55b7b0500688 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55b7b05007a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55b7b0500848 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55b7b0500870 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55b7b0500998 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55b7b0500a38 <col:20>
| `-OptimizeNoneAttr 0x55b7b0500a90 <col:30>
|-CXXMethodDecl 0x55b7b0500b38 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55b7b0500bd8 <col:20>
| `-OptimizeNoneAttr 0x55b7b0500c30 <col:30>
|-AccessSpecDecl 0x55b7b0500c58 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55b7b0500c80 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55b7b0500d80 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55b7b0500dd0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0500d60 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55b7b0500d40 <col:14> 'int' 48
|-CXXMethodDecl 0x55b7b0500e38 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55b7b0500ed8 <col:20>
| `-OptimizeNoneAttr 0x55b7b0500f30 <col:30>
|-CXXMethodDecl 0x55b7b0500fa8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55b7b0501048 <col:20>
| `-OptimizeNoneAttr 0x55b7b05010a0 <col:30>
|-CXXMethodDecl 0x55b7b0501168 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55b7b05010d8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55b7b0501308 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55b7b05014a8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55b7b05013b8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55b7b0501550 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55b7b0501650 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a00 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0501630 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b0501610 <col:9> 'int' 0
| |-EnumConstantDecl 0x55b7b05016e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05016c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55b7b05016a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b7b0501770 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a30 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0501750 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55b7b0501730 <col:14> 'int' 2
| |-EnumConstantDecl 0x55b7b0501800 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05017e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55b7b05017c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55b7b0501890 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a60 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0501870 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55b7b0501850 <col:13> 'int' 4
| |-EnumConstantDecl 0x55b7b0501920 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b7b0501a78 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0501900 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55b7b05018e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55b7b05019b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55b7b0501a90 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0501990 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55b7b0501970 <col:14> 'int' 6
|-CXXMethodDecl 0x55b7b0501af8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55b7b0501b98 <col:20>
| `-OptimizeNoneAttr 0x55b7b0501bf0 <col:30>
|-CXXMethodDecl 0x55b7b0501ce8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55b7b0501c28 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55b7b0501d90 <col:20>
| `-OptimizeNoneAttr 0x55b7b0501de8 <col:30>
|-CXXMethodDecl 0x55b7b0501e58 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55b7b0501f80 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55b7b05020f8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55b7b0502030 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55b7b05021c0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55b7b0502288 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55b7b05023c8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55b7b0502338 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55b7b0502470 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55b7b0502570 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b7b0502770 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0502550 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b0502530 <col:23> 'int' 0
| |-EnumConstantDecl 0x55b7b0502600 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b7b0502788 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05025e0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55b7b05025c0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55b7b0502690 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b7b05027a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0502670 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b0502650 <col:24> 'int' 0
| `-EnumConstantDecl 0x55b7b0502720 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55b7b05027b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0502700 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55b7b05026e0 <col:47> 'int' 16
|-CXXMethodDecl 0x55b7b0502818 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55b7b0502988 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55b7b05028c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55b7b0502a30 <col:20>
| `-OptimizeNoneAttr 0x55b7b0502a88 <col:30>
|-CXXMethodDecl 0x55b7b0502ad8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55b7b0516460 <col:18, col:36>
|   `-ReturnStmt 0x55b7b0516450 <col:20, col:33>
|     `-ImplicitCastExpr 0x55b7b0516438 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b7b0516418 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55b7b05163e8 <col:27> '<bound member function type>' ->xanno 0x55b7b0500b38
|           `-CXXThisExpr 0x55b7b05163d8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55b7b0502bd0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55b7b0516570 <col:30, col:48>
|   `-ReturnStmt 0x55b7b0516560 <col:32, col:45>
|     `-ImplicitCastExpr 0x55b7b0516548 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b7b0516528 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55b7b05164f8 <col:39> '<bound member function type>' ->xanno 0x55b7b0500998
|           `-CXXThisExpr 0x55b7b05164e8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b7b0502cb8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55b7b0516708 <col:24, col:50>
|   `-ReturnStmt 0x55b7b05166f8 <col:26, col:47>
|     `-UnaryOperator 0x55b7b05166e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b05166c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b7b05166a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b0516658 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55b7b050b978
|         |   `-CXXMemberCallExpr 0x55b7b0516638 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b7b0516608 <col:34> '<bound member function type>' ->xanno 0x55b7b0500b38
|         |       `-CXXThisExpr 0x55b7b05165f8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b7b0516688 <col:46> 'int' 0
|-CXXMethodDecl 0x55b7b0502dc0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55b7b05168d8 <col:36, col:62>
|   `-ReturnStmt 0x55b7b05168c8 <col:38, col:59>
|     `-UnaryOperator 0x55b7b05168b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b0516890 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b7b0516878 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b05167f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55b7b050b978
|         |   `-CXXMemberCallExpr 0x55b7b05167d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b7b05167a0 <col:46> '<bound member function type>' ->xanno 0x55b7b0500998
|         |       `-CXXThisExpr 0x55b7b0516790 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b7b0516820 <col:58> 'int' 0
|-CXXMethodDecl 0x55b7b0502ed8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55b7b0516a70 <col:26, col:53>
|   `-ReturnStmt 0x55b7b0516a60 <col:28, col:50>
|     `-UnaryOperator 0x55b7b0516a48 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b0516a28 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b7b0516a10 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b05169c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55b7b050bc78
|         |   `-CXXMemberCallExpr 0x55b7b05169a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b7b0516970 <col:36> '<bound member function type>' ->xanno 0x55b7b0500b38
|         |       `-CXXThisExpr 0x55b7b0516960 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b7b05169f0 <col:49> 'int' 0
|-CXXMethodDecl 0x55b7b0502ff8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55b7b0516c48 <col:38, col:65>
|   `-ReturnStmt 0x55b7b0516c38 <col:40, col:62>
|     `-UnaryOperator 0x55b7b0516c20 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b0516c00 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b7b0516be8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b0516b58 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55b7b050bc78
|         |   `-CXXMemberCallExpr 0x55b7b0516b38 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b7b0516b08 <col:48> '<bound member function type>' ->xanno 0x55b7b0500998
|         |       `-CXXThisExpr 0x55b7b0516af8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b7b0516b88 <col:61> 'int' 0
|-CXXMethodDecl 0x55b7b05031a8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55b7b05030b0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55b7b0517318 <col:34, line:463:5>
|   |-ParenExpr 0x55b7b0517160 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b7b0517130 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0516d98 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0516d68 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0516cb8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0516ca0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0516c60 <col:23> 'int' lvalue ParmVar 0x55b7b05030b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0516c80 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0516d48 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0516d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0516cd8 <col:33> 'int' lvalue ParmVar 0x55b7b05030b0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b7b0516d30 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b7b0516cf8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b7b0516df8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0516dd8 <col:56> 'int' 0
|   |   `-CallExpr 0x55b7b0517090 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0517078 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0517058 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b05170d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0516ee8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b7b05170e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0516f18 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0517100 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0516f50 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55b7b0517118 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0517040 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0517028 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0516fe8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55b7b0517308 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55b7b05172f0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55b7b05172d0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b7b05172a0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b0517250 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55b7b050b978
|         |   `-CXXMemberCallExpr 0x55b7b0517230 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b7b0517200 <col:9> '<bound member function type>' ->xanno 0x55b7b0500998
|         |       `-CXXThisExpr 0x55b7b05171f0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55b7b05172b8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55b7b0517280 <col:21> 'int' lvalue ParmVar 0x55b7b05030b0 'i' 'int'
|-CXXMethodDecl 0x55b7b05033f8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55b7b0503268 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55b7b05032e0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55b7b05179a8 <col:40, line:472:5>
|   |-ParenExpr 0x55b7b05177c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b7b0517790 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0517470 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0517440 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0517390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0517378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0517338 <col:23> 'int' lvalue ParmVar 0x55b7b0503268 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0517358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0517420 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b05173f0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b05173b0 <col:33> 'int' lvalue ParmVar 0x55b7b0503268 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b7b0517408 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b7b05173d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b7b05174d0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b05174b0 <col:56> 'int' 0
|   |   `-CallExpr 0x55b7b05176f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b7b05176d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b05176b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0517730 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0517540 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b7b0517748 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0517570 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0517760 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b05175a8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55b7b0517778 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b05176a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0517688 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0517648 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55b7b0517988 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55b7b0517930 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55b7b0517900 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55b7b05178b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55b7b050b978
|     | |   `-CXXMemberCallExpr 0x55b7b0517890 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55b7b0517860 <col:2> '<bound member function type>' ->xanno 0x55b7b0500b38
|     | |       `-CXXThisExpr 0x55b7b0517850 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55b7b0517918 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b7b05178e0 <col:14> 'int' lvalue ParmVar 0x55b7b0503268 'i' 'int'
|     `-ImplicitCastExpr 0x55b7b0517970 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b0517950 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55b7b05032e0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55b7b05035b8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55b7b05034c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b7b0518128 <col:36, line:485:5>
|   |-ParenExpr 0x55b7b0517e90 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b0517e60 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0517b40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0517b10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0517a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0517a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b05179c8 <col:23> 'int' lvalue ParmVar 0x55b7b05034c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b05179e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0517af0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0517ad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0517a40 <col:33> 'int' lvalue ParmVar 0x55b7b05034c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b0517ab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b0517aa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b0517a60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b0517a80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b7b0517ba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0517b80 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b0517dc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0517da8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0517d88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0517e00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0517c10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b7b0517e18 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0517c48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0517e30 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0517c80 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55b7b0517e48 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0517d70 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0517d58 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0517d18 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55b7b0518118 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55b7b0518100 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55b7b05180e8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b05180b8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55b7b0518058 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b0518028 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b0517fa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b0517f80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b0517f50 <col:61> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b0517f40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b0518040 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b0517fd0 <col:74> 'int' lvalue ParmVar 0x55b7b05034c0 'i' 'int'
|-CXXMethodDecl 0x55b7b0503808 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55b7b0503678 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b7b05036f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55b7b0518878 <col:42, line:500:5>
|   |-ParenExpr 0x55b7b0518610 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b05185e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b05182c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0518290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b05181a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0518188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0518148 <col:23> 'int' lvalue ParmVar 0x55b7b0503678 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0518168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0518270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0518258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b05181c0 <col:33> 'int' lvalue ParmVar 0x55b7b0503678 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b0518238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b0518220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b05181e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b0518200 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b7b0518320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0518300 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b0518540 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0518528 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0518508 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0518580 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0518390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b7b0518598 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b05183c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b05185b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0518400 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55b7b05185c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b05184f0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b05184d8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0518498 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55b7b0518858 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55b7b0518808 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b7b05187d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b7b0518780 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b7b0518750 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b7b0518700 <col:48, col:57> 'char [48]' lvalue ->c 0x55b7b050b850
|     |     |   `-CXXMemberCallExpr 0x55b7b05186e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b7b05186b0 <col:48> '<bound member function type>' ->xanno 0x55b7b0500b38
|     |     |       `-CXXThisExpr 0x55b7b05186a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b7b0518768 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b7b0518730 <col:61> 'int' lvalue ParmVar 0x55b7b0503678 'i' 'int'
|     `-ImplicitCastExpr 0x55b7b0518840 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b0518820 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55b7b05036f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55b7b05039c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55b7b05038d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b7b0518fd8 <col:35, line:513:5>
|   |-ParenExpr 0x55b7b0518ce8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b0518cb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0518a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b05189e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b05188f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b05188d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0518898 <col:23> 'int' lvalue ParmVar 0x55b7b05038d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b05188b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b05189c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b05189a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0518910 <col:33> 'int' lvalue ParmVar 0x55b7b05038d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b0518988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b0518970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b0518930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b0518950 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b7b0518a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0518a50 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b0518c18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0518c00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0518be0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0518c58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0518ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b7b0518c70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0518b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0518c88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b0518b50 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55b7b0518ca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0518bc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0518bb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0518b70 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55b7b0518fc8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55b7b0518fb0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55b7b0518f98 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b0518f68 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55b7b0518ee0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b0518eb0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b0518e60 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b0518e40 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b0518e10 <col:60> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b0518e00 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b0518ec8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b0518e90 <col:73> 'int' lvalue ParmVar 0x55b7b05038d0 'i' 'int'
|-CXXMethodDecl 0x55b7b0503c18 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55b7b0503a88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b7b0503b00 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55b7b05196f8 <col:41, line:528:5>
|   |-ParenExpr 0x55b7b0519480 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b0519450 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0519170 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0519140 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0519050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0519038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0518ff8 <col:23> 'int' lvalue ParmVar 0x55b7b0503a88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0519018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0519120 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0519108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0519070 <col:33> 'int' lvalue ParmVar 0x55b7b0503a88 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b05190e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b05190d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b0519090 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b05190b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b7b05191d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b05191b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b05193b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0519398 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0519378 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b05193f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0519240 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b7b0519408 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0519278 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0519420 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b05192b0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55b7b0519438 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0519360 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0519348 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b0519308 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55b7b05196d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55b7b0519688 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b7b0519658 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b7b0519600 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b7b05195c0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b7b0519570 <col:47, col:56> 'char [48]' lvalue ->c 0x55b7b050b850
|     |     |   `-CXXMemberCallExpr 0x55b7b0519550 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b7b0519520 <col:47> '<bound member function type>' ->xanno 0x55b7b0500b38
|     |     |       `-CXXThisExpr 0x55b7b0519510 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b7b05195d8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b7b05195a0 <col:60> 'int' lvalue ParmVar 0x55b7b0503a88 'i' 'int'
|     `-ImplicitCastExpr 0x55b7b05196c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b05196a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55b7b0503b00 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55b7b0503dd8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55b7b0503ce0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b7b0519dc8 <col:36, line:541:5>
|   |-ParenExpr 0x55b7b0519b68 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b0519b38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0519890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0519860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0519770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0519758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0519718 <col:23> 'int' lvalue ParmVar 0x55b7b0503ce0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0519738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0519840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0519828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0519790 <col:33> 'int' lvalue ParmVar 0x55b7b0503ce0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b0519808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b05197f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b05197b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b05197d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b7b05198f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b05198d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b0519a98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b0519a80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b0519a60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b0519ad8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0519960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b7b0519af0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b0519998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b0519b08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b05199d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55b7b0519b20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b0519a48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b0519a30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b05199f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55b7b0519db8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55b7b0519da0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55b7b0519d88 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b0519d58 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55b7b0519d00 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b0519cd0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b0519c80 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b0519c60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b0519c30 <col:61> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b0519c20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b0519ce8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b0519cb0 <col:74> 'int' lvalue ParmVar 0x55b7b0503ce0 'i' 'int'
|-CXXMethodDecl 0x55b7b0503fa8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55b7b0503e98 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55b7b0503f10 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b7b0504058 <col:20>
| `-OptimizeNoneAttr 0x55b7b05040b0 <col:30>
|-CXXMethodDecl 0x55b7b05041e8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55b7b05040f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b7b051a498 <col:35, line:562:5>
|   |-ParenExpr 0x55b7b051a238 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b051a208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b0519f60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b0519f30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b0519e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b0519e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b0519de8 <col:23> 'int' lvalue ParmVar 0x55b7b05040f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b0519e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b0519f10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b0519ef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b0519e60 <col:33> 'int' lvalue ParmVar 0x55b7b05040f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b0519ed8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b0519ec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b0519e80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b0519ea0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b7b0519fc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b0519fa0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b051a168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051a150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051a130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051a1a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051a030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b7b051a1c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051a068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051a1d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051a0a0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55b7b051a1f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051a118 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051a100 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051a0c0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55b7b051a488 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55b7b051a470 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55b7b051a458 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b051a428 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55b7b051a3d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b051a3a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b051a350 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b051a330 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b051a300 <col:60> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b051a2f0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b051a3b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b051a380 <col:73> 'int' lvalue ParmVar 0x55b7b05040f0 'i' 'int'
|-CXXMethodDecl 0x55b7b05043f8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55b7b05042a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b7b0504320 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55b7b051ab78 <col:41, line:577:5>
|   |-ParenExpr 0x55b7b051a908 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b051a8d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b051a630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b051a600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b051a510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b051a4f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b051a4b8 <col:23> 'int' lvalue ParmVar 0x55b7b05042a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b051a4d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b051a5e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b051a5c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b051a530 <col:33> 'int' lvalue ParmVar 0x55b7b05042a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b051a5a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b051a590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b051a550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b051a570 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b7b051a690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b051a670 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b051a838 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051a820 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051a800 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051a878 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051a700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b7b051a890 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051a738 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051a8a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051a770 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55b7b051a8c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051a7e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051a7d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051a790 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55b7b051ab58 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55b7b051ab08 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b7b051aad8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55b7b051aa78 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b7b051aa48 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b7b051a9f8 <col:47, col:56> 'char [48]' lvalue ->c 0x55b7b050b850
|     |     |   `-CXXMemberCallExpr 0x55b7b051a9d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b7b051a9a8 <col:47> '<bound member function type>' ->xanno 0x55b7b0500b38
|     |     |       `-CXXThisExpr 0x55b7b051a998 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b7b051aa60 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b7b051aa28 <col:60> 'int' lvalue ParmVar 0x55b7b05042a8 'i' 'int'
|     `-ImplicitCastExpr 0x55b7b051ab40 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b051ab20 <col:65> 'int32_t':'int' lvalue ParmVar 0x55b7b0504320 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55b7b05045b8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55b7b05044c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b7b051b2a8 <col:36, line:591:5>
|   |-ParenExpr 0x55b7b051afe8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b051afb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b051ad10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b051ace0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b051abf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b051abd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b051ab98 <col:23> 'int' lvalue ParmVar 0x55b7b05044c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b051abb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b051acc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b051aca8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b051ac10 <col:33> 'int' lvalue ParmVar 0x55b7b05044c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b051ac88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b051ac70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b051ac30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b051ac50 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b7b051ad70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b051ad50 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b051af18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051af00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051aee0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051af58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051ade0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b7b051af70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051ae18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051af88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051ae50 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55b7b051afa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051aec8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051aeb0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051ae70 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55b7b051b298 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55b7b051b280 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55b7b051b268 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b051b238 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55b7b051b1b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b051b180 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b051b130 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b051b110 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b051b0e0 <col:61> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b051b0d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b051b198 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b051b160 <col:74> 'int' lvalue ParmVar 0x55b7b05044c0 'i' 'int'
|-CXXMethodDecl 0x55b7b0504808 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55b7b0504678 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b7b05046f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55b7b051b988 <col:42, line:606:5>
|   |-ParenExpr 0x55b7b051b718 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b7b051b6e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b051b440 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b051b410 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b051b320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b051b308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b051b2c8 <col:23> 'int' lvalue ParmVar 0x55b7b0504678 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b051b2e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b051b3f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b7b051b3d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b051b340 <col:33> 'int' lvalue ParmVar 0x55b7b0504678 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b051b3b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b051b3a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b051b360 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b7b051b380 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b7b051b4a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b051b480 <col:60> 'int' 0
|   |   `-CallExpr 0x55b7b051b648 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051b630 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051b610 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051b688 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051b510 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b7b051b6a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051b548 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051b6b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051b580 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55b7b051b6d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051b5f8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051b5e0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051b5a0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55b7b051b968 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55b7b051b918 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b7b051b8e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55b7b051b888 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b7b051b858 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b7b051b808 <col:48, col:57> 'char [48]' lvalue ->c 0x55b7b050b850
|     |     |   `-CXXMemberCallExpr 0x55b7b051b7e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b7b051b7b8 <col:48> '<bound member function type>' ->xanno 0x55b7b0500b38
|     |     |       `-CXXThisExpr 0x55b7b051b7a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b7b051b870 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b7b051b838 <col:61> 'int' lvalue ParmVar 0x55b7b0504678 'i' 'int'
|     `-ImplicitCastExpr 0x55b7b051b950 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55b7b051b930 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55b7b05046f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55b7b05049a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55b7b05048d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55b7b051c1f8 <col:33, line:620:5>
|   |-ParenExpr 0x55b7b051bf70 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b7b051bf40 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b051bb90 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b051bb60 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b051ba00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b051b9e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b051b9a8 <col:23> 'int' lvalue ParmVar 0x55b7b05048d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b051b9c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b051bb40 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b7b051bb28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b051ba20 <col:33> 'int' lvalue ParmVar 0x55b7b05048d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b051bb08 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b051baf0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b051ba40 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b7b051bac8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b7b051bab0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b7b051ba78 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b7b051bbf0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b051bbd0 <col:79> 'int' 0
|   |   `-CallExpr 0x55b7b051bea0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051be88 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051be68 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051bee0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051bcd8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b7b051bef8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051bd20 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051bf10 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051bd58 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55b7b051bf28 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051be50 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051be38 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051bdf8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55b7b051c1e8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55b7b051c1d0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55b7b051c1b8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b7b051c188 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55b7b051c100 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b7b051c0d0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b051c080 <col:67, col:76> 'char const[48]' lvalue ->c 0x55b7b050b850
|             |   `-CXXMemberCallExpr 0x55b7b051c060 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b7b051c030 <col:67> '<bound member function type>' ->xanno 0x55b7b0500998
|             |       `-CXXThisExpr 0x55b7b051c020 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b7b051c0e8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b7b051c0b0 <col:80> 'int' lvalue ParmVar 0x55b7b05048d0 'i' 'int'
|-CXXMethodDecl 0x55b7b0504bb8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55b7b0504a60 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b7b0504ae0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55b7b051ca20 <col:45, line:635:5>
|   |-ParenExpr 0x55b7b051c768 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b7b051c738 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b7b051c400 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b7b051c3d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b7b051c270 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b7b051c258 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b7b051c218 <col:23> 'int' lvalue ParmVar 0x55b7b0504a60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b7b051c238 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b7b051c3b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b7b051c398 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b7b051c290 <col:33> 'int' lvalue ParmVar 0x55b7b0504a60 'i' 'int'
|   |   |     `-BinaryOperator 0x55b7b051c378 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b7b051c360 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b7b051c2b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b7b0500d80 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b7b051c338 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b7b051c320 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b7b051c2e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b7b051c460 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b7b051c440 <col:79> 'int' 0
|   |   `-CallExpr 0x55b7b051c698 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b7b051c680 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b7b051c660 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b7b006d430 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b7b051c6d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051c4d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b7b051c6f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b7b051c518 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b7b051c708 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b7b051c550 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55b7b051c720 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b7b051c648 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b7b051c630 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b7b051c5e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55b7b051ca00 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55b7b051c968 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b7b051c938 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55b7b051c8d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b7b051c8a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b7b051c858 <col:54, col:63> 'char [48]' lvalue ->c 0x55b7b050b850
|     |     |   `-CXXMemberCallExpr 0x55b7b051c838 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b7b051c808 <col:54> '<bound member function type>' ->xanno 0x55b7b0500b38
|     |     |       `-CXXThisExpr 0x55b7b051c7f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b7b051c8c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b7b051c888 <col:67> 'int' lvalue ParmVar 0x55b7b0504a60 'i' 'int'
|     `-CXXConstCastExpr 0x55b7b051c9d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55b7b051c9b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55b7b051c980 <col:91> 'const void *' lvalue ParmVar 0x55b7b0504ae0 'x' 'const void *'
|-CXXMethodDecl 0x55b7b0504c88 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55b7b051caa8 <col:34, line:640:5>
|   `-ReturnStmt 0x55b7b051ca98 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55b7b051ca80 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55b7b051ca50 <col:16> 'Packet *' lvalue ->_data_packet 0x55b7b050c408
|         `-CXXThisExpr 0x55b7b051ca40 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b7b0504dc8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55b7b0504d38 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b0515b68 <col:46> 'bool' true
|-CXXMethodDecl 0x55b7b0504f48 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55b7b0504e80 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55b7b0504ff0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55b7b05057a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55b7b05050f0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505810 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05050d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55b7b05050b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b7b04fa250 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b7b0505180 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505828 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505160 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55b7b0505140 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b7b04fa2e0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b7b0505210 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505840 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05051f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b05051d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b7b05052a0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505858 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505280 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55b7b0505260 <col:19> 'int' 16
| |-EnumConstantDecl 0x55b7b0505330 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505870 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505310 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55b7b05052f0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55b7b05053c0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b0505888 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05053a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b7b0505380 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b7b0505450 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b05058a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505430 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55b7b0505410 <col:19> 'int' EnumConstant 0x55b7b05052a0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b7b05054e0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b05058b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05054c0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55b7b05054a0 <col:19> 'int' EnumConstant 0x55b7b05053c0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b7b05055b0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b05058d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505590 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55b7b0505570 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b7b0505530 <col:23> 'int' EnumConstant 0x55b7b05054e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b7b0505550 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b7b0505680 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b7b05058e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b0505660 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55b7b0505640 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b7b0505600 <col:23> 'int' EnumConstant 0x55b7b05054e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b7b0505620 <col:40> 'int' 4
| `-EnumConstantDecl 0x55b7b0505750 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55b7b0505900 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b0505730 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55b7b0505710 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55b7b05056d0 <col:23> 'int' EnumConstant 0x55b7b05054e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55b7b05056f0 <col:40> 'int' 8
|-CXXMethodDecl 0x55b7b0505940 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55b7b05059e0 <col:68> "" ""
|-CXXMethodDecl 0x55b7b0505a78 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55b7b0505b18 <col:45> "" ""
|-CXXMethodDecl 0x55b7b0505bb0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b7b0505c50 <col:57> "" ""
|-CXXMethodDecl 0x55b7b0505ce8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55b7b0505d88 <col:45> "" ""
|-CXXMethodDecl 0x55b7b0505e20 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b7b0505ec0 <col:57> "" ""
|-CXXMethodDecl 0x55b7b0505f50 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b7b0505ff0 <col:51> "" ""
|-CXXMethodDecl 0x55b7b0506080 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b7b0506120 <col:63> "" ""
|-CXXMethodDecl 0x55b7b05061b0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b7b0506250 <col:53> "" ""
|-CXXMethodDecl 0x55b7b05062e0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b7b0506380 <col:65> "" ""
|-CXXMethodDecl 0x55b7b0506498 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b7b0506408 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55b7b0506540 <col:61> "" ""
|-CXXMethodDecl 0x55b7b05066d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b7b05065c8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55b7b0506640 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b7b0506788 <col:67> "" ""
|-CXXMethodDecl 0x55b7b05068a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b7b0506810 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b7b0506948 <col:63> "" ""
|-CXXMethodDecl 0x55b7b0506ae0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b7b05069d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b7b0506a48 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b7b0506b90 <col:69> "" ""
|-CXXMethodDecl 0x55b7b0506ca8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b7b0506c18 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b7b0506d50 <col:63> "" ""
|-CXXMethodDecl 0x55b7b0509428 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b7b0509318 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b7b0509390 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b7b05094d8 <col:69> "" ""
|-CXXMethodDecl 0x55b7b05095f0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b7b0509560 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55b7b0509698 <col:62> "" ""
|-CXXMethodDecl 0x55b7b0509830 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b7b0509720 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b7b0509798 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55b7b05098e0 <col:68> "" ""
|-CXXMethodDecl 0x55b7b05099f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55b7b0509968 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b7b0509aa0 <col:63> "" ""
|-CXXMethodDecl 0x55b7b0509c38 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55b7b0509b28 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b7b0509ba0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55b7b0509ce8 <col:69> "" ""
|-CXXMethodDecl 0x55b7b0509d78 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b7b0509e18 <col:64> "" ""
|-CXXMethodDecl 0x55b7b0509ea8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b7b0509f48 <col:52> "" ""
|-CXXMethodDecl 0x55b7b0509fd8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b7b050a078 <col:67> "" ""
|-CXXMethodDecl 0x55b7b050a108 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b7b050a1a8 <col:55> "" ""
|-CXXMethodDecl 0x55b7b050a2c0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b7b050a230 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b7b050a368 <col:58> "" ""
|-CXXMethodDecl 0x55b7b050a500 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b7b050a3f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b7b050a468 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b7b050a5b0 <col:62> "" ""
|-CXXMethodDecl 0x55b7b050a6c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55b7b050a638 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b7b050a770 <col:58> "" ""
|-CXXMethodDecl 0x55b7b050a908 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55b7b050a7f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b7b050a870 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55b7b050a9b8 <col:62> "" ""
|-CXXMethodDecl 0x55b7b050aad0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b7b050aa40 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55b7b050ab78 <col:60> "" ""
|-CXXMethodDecl 0x55b7b050ad10 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b7b050ac00 <col:34> col:37 'int'
| |-ParmVarDecl 0x55b7b050ac78 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b7b050adc0 <col:64> "" ""
|-CXXMethodDecl 0x55b7b050aed8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b7b050ae48 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b7b050af80 <col:58> "" ""
|-CXXMethodDecl 0x55b7b050b118 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b7b050b008 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b7b050b080 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55b7b050b1c8 <col:62> "" ""
|-CXXMethodDecl 0x55b7b050b2e0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b7b050b250 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55b7b050b388 <col:59> "" ""
|-CXXMethodDecl 0x55b7b050b520 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b7b050b410 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b7b050b488 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b7b050b5d0 <col:63> "" ""
|-AccessSpecDecl 0x55b7b050b640 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55b7b050b668 prev 0x55b7b0500870 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b7b050b760 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55b7b050b850 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55b7b050b978 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55b7b050baf8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55b7b050bc78 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55b7b050bdf8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55b7b051cc28 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b7b051d498 <col:11>
| |-CXXDestructorDecl 0x55b7b051cd00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55b7b051ce38 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b7b051ce38
| | `-ParmVarDecl 0x55b7b051cf48 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55b7b051cfe8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b7b051cfe8
| | `-ParmVarDecl 0x55b7b051d0f8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55b7b051feb8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b051ffc8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55b7b0520248 <col:11>
| |   `-ReturnStmt 0x55b7b0520238 <col:11>
| |     `-UnaryOperator 0x55b7b0520220 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b7b0520210 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55b7b0520038 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b7b0520038
|   `-ParmVarDecl 0x55b7b0520148 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55b7b050be60 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b7b050bf78 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55b7b050c018 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55b7b050c080 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55b7b050c0e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55b7b050c150 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55b7b050c1b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55b7b050c270 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55b7b050c2d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55b7b050c330 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55b7b051cb38 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55b7b050c018 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55b7b051d4a8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55b7b051d500 <col:12>
| |-CXXConstructorDecl 0x55b7b051d168 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b7b051d168
| | `-ParmVarDecl 0x55b7b051d278 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55b7b051d318 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b7b051d318
| | `-ParmVarDecl 0x55b7b051d428 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55b7b051f5a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55b7b050c3a8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55b7b050c408 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55b7b050c470 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55b7b050c4d8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55b7b050c540 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55b7b050c5a8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55b7b050c608 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55b7b050c668 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55b7b050c6d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55b7b050c758 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55b7b050c3a8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55b7b051cad0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b7b050c608 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55b7b051d510 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55b7b051d570 <col:21, line:755:5>
|-CXXConstructorDecl 0x55b7b050c8f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55b7b050c838 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55b7b050c9f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55b7b050cbd8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55b7b050cae0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55b7b050cea8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55b7b050cc90 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b7b050cd08 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b7b050cd80 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b050d0c8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55b7b050cf78 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55b7b050cff0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55b7b05156a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55b7b050d188 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55b7b050d200 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55b7b050d278 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55b7b0515800 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b7b0515770 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b7b0515948 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b7b05158b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55b7b0515a40 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b062d548 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55b7b062d678 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55b7b062d6d8 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55b7b062d738 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x55b7b062d798 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b062d920 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55b7b062da90 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55b7b062da70 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55b7b062da38 <col:28> 'int' 4
`-FieldDecl 0x55b7b062db38 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x55b7b062db18 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x55b7b062dae0 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b062d430 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b7b062d548 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55b7b062d678 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55b7b062d6d8 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55b7b062d738 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x55b7b062d798 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x55b7b062d858 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55b7b062d8d0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55b7b062d920 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55b7b062da90 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55b7b062da70 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55b7b062da38 <col:28> 'int' 4
| `-FieldDecl 0x55b7b062db38 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x55b7b062db18 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x55b7b062dae0 <col:27> 'int' 4
`-FieldDecl 0x55b7b062dbf8 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0271cf8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55b7b0271f18 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55b7b0272048 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55b7b0272178 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55b7b06417e8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b0641ff8 <col:5>
|-CXXDestructorDecl 0x55b7b06418c0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b06419c8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0641ad8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55b7b06439c0 <col:5>
|-CXXConstructorDecl 0x55b7b0641b78 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0641c88 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55b7b064f7d8 <col:5>
|-CXXMethodDecl 0x55b7b0642728 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0642838 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55b7b06535e0 <col:5>
|   `-ReturnStmt 0x55b7b06535d0 <col:5>
|     `-UnaryOperator 0x55b7b06535b8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b06535a8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55b7b06428a8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55b7b06428a8
  `-ParmVarDecl 0x55b7b06429b8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0210490 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b0271c68 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55b7b0271cf8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55b7b0271f18 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55b7b0272048 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55b7b0272178 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55b7b06417e8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b7b0641ff8 <col:5>
| |-CXXDestructorDecl 0x55b7b06418c0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55b7b06419c8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b0641ad8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55b7b06439c0 <col:5>
| |-CXXConstructorDecl 0x55b7b0641b78 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b0641c88 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55b7b064f7d8 <col:5>
| |-CXXMethodDecl 0x55b7b0642728 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b0642838 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55b7b06535e0 <col:5>
| |   `-ReturnStmt 0x55b7b06535d0 <col:5>
| |     `-UnaryOperator 0x55b7b06535b8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b7b06535a8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55b7b06428a8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55b7b06428a8
|   `-ParmVarDecl 0x55b7b06429b8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55b7b0272238 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55b7b06416f8 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55b7b0272238 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55b7b0642008 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55b7b0642060 <col:8>
|-CXXConstructorDecl 0x55b7b0641cf8 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0641dd8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55b7b0272238 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55b7b06439d0 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55b7b0643990 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
| |     `-DeclRefExpr 0x55b7b0643970 <col:8> 'const in6_addr' lvalue ParmVar 0x55b7b0641dd8 '' 'const in6_addr &'
| `-CompoundStmt 0x55b7b0643a30 <col:8>
|-CXXConstructorDecl 0x55b7b0641e78 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0641f88 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55b7b0272238 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55b7b064f7e8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55b7b064f7a8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55b7b0272238
| |     `-CXXStaticCastExpr 0x55b7b064f778 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b064f748 <col:8> 'in6_addr' lvalue ParmVar 0x55b7b0641f88 '' 'in6_addr &&'
| `-CompoundStmt 0x55b7b064f848 <col:8>
|-CXXMethodDecl 0x55b7b0642a28 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0642b38 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55b7b0653658 <col:8>
|   |-CXXMemberCallExpr 0x55b7b06535f8 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55b7b0653538 <col:8> '<bound member function type>' .operator= 0x55b7b0642728
|   | | `-MemberExpr 0x55b7b0653448 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55b7b0272238
|   | |   `-CXXThisExpr 0x55b7b0653438 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55b7b0653508 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|   |   `-DeclRefExpr 0x55b7b06534e8 <col:8> 'const in6_addr' lvalue ParmVar 0x55b7b0642b38 '' 'const in6_addr &'
|   `-ReturnStmt 0x55b7b0653648 <col:8>
|     `-UnaryOperator 0x55b7b0653630 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b7b0653620 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55b7b0642ba8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55b7b0642ba8
| `-ParmVarDecl 0x55b7b0642cb8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55b7b0643058 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon.3 }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b062d2a8 prev 0x55b7b04f9c10 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b7b062d3a0 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55b7b062d430 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55b7b062d548 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55b7b062d678 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55b7b062d6d8 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55b7b062d738 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x55b7b062d798 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x55b7b062d858 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55b7b062d8d0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55b7b062d920 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55b7b062da90 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55b7b062da70 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55b7b062da38 <col:28> 'int' 4
| | `-FieldDecl 0x55b7b062db38 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x55b7b062db18 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x55b7b062dae0 <col:27> 'int' 4
| `-FieldDecl 0x55b7b062dbf8 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x55b7b062dda8 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55b7b062de30 <line:40:5, col:21> col:21 referenced ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55b7b062dea0 <line:41:5, col:21> col:21 referenced ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0267988 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b0267aa8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55b7b0267b70 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55b7b0338360 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b033d678 <col:8>
|-CXXConstructorDecl 0x55b7b0338468 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55b7b0338468
| `-ParmVarDecl 0x55b7b0338578 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55b7b0338618 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0338728 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55b7b0267b70 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55b7b033d890 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b033d860 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55b7b0267b70
| |     `-CXXStaticCastExpr 0x55b7b033d830 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b033d800 <col:8> 'in_addr' lvalue ParmVar 0x55b7b0338728 '' 'in_addr &&'
| `-CompoundStmt 0x55b7b033d8d8 <col:8>
`-CXXDestructorDecl 0x55b7b033db10 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0330048 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b7b0330168 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55b7b0330250 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55b7b0330230 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55b7b03301f8 <col:22> 'int' 4
|-FieldDecl 0x55b7b03302f8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55b7b03302d8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55b7b03302a0 <col:21> 'int' 4
|-FieldDecl 0x55b7b0330358 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55b7b03303b8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55b7b0330418 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55b7b0330478 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55b7b03304d8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55b7b0330538 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55b7b0330598 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55b7b0330608 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55b7b0330678 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0618770 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b0618888 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55b7b0618930 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55b7b0618998 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55b7b0618a00 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55b7b0618ab0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55b7b0618930 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55b7b06199b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55b7b0619968 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55b7b0619930 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55b7b0619918 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55b7b06198c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55b7b03236b0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55b7b0618998 'len' 'int'
| | `-IntegerLiteral 0x55b7b0619a28 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55b7b0618a00 'cap' 'int'
| | `-IntegerLiteral 0x55b7b0619a90 <col:20> 'int' 0
| `-CompoundStmt 0x55b7b0619b10 <col:23, line:119:2>
|-CXXConstructorDecl 0x55b7b0618c28 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55b7b0618b68 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55b7b0619b20 <col:37, line:121:2>
|-CXXConstructorDecl 0x55b7b061bd38 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b061be48 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b0618930 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55b7b061d800 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55b7b061d7d0 <col:12> 'unsigned char *const' lvalue .s 0x55b7b0618930
| |     `-DeclRefExpr 0x55b7b061d7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b0618998 'len' 'int'
| | `-ImplicitCastExpr 0x55b7b061d890 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b061d860 <col:12> 'const int' lvalue .len 0x55b7b0618998
| |     `-DeclRefExpr 0x55b7b061d840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55b7b0618a00 'cap' 'int'
| | `-ImplicitCastExpr 0x55b7b061d920 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b061d8f0 <col:12> 'const int' lvalue .cap 0x55b7b0618a00
| |     `-DeclRefExpr 0x55b7b061d8d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55b7b061d978 <col:12>
|-CXXConstructorDecl 0x55b7b061bee8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b061bee8
| `-ParmVarDecl 0x55b7b061bff8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55b7b061dc30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b0613f18 prev 0x55b7b054cb08 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b7b0614010 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55b7b06140a0 <col:21, col:27> col:21 public
|-TypedefDecl 0x55b7b06140e0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55b7affd0fd0 'const char *'
|   `-QualType 0x55b7affd0521 'const char' const
|     `-BuiltinType 0x55b7affd0520 'char'
|-TypedefDecl 0x55b7b0614150 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55b7affd11a0 'char *'
|   `-BuiltinType 0x55b7affd0520 'char'
|-TypedefDecl 0x55b7b0614290 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55b7b0614200 'int (StringAccum::*)() const'
|   |-RecordType 0x55b7b028ed60 'StringAccum'
|   | `-CXXRecord 0x55b7b0613f18 'StringAccum'
|   `-ParenType 0x55b7b02fd6c0 'int () const' sugar
|     `-FunctionProtoType 0x55b7b02d2260 'int () const' const cdecl
|       `-BuiltinType 0x55b7affd0580 'int'
|-CXXConstructorDecl 0x55b7b0614350 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55b7b06144a0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55b7b0614410 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55b7b06145f0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55b7b0614560 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55b7b0614798 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55b7b06146d8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55b7b0614948 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55b7b0614888 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55b7b0614a40 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55b7b0614bf8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55b7b0614b30 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55b7b0614d78 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55b7b0614cb0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55b7b0614e70 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55b7b0614f38 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55b7b0615000 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55b7b06150c8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55b7b0615190 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x55b7b06152f8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55b7b06153c8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b7b0615488 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55b7b0615598 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55b7b06156a8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55b7b0615768 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55b7b0615828 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55b7b0615970 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55b7b06158e0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55b7b0615b00 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55b7b0615a30 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55b7b0615bc8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55b7b0615cc0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55b7b0615d80 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55b7b0615e48 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55b7b0615f08 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55b7b0615fc8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55b7b0616088 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b7b06161d8 <line:76:5, col:31> col:18 used reserve 'char *(int)' inline
| `-ParmVarDecl 0x55b7b0616140 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55b7b0616328 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55b7b0616298 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55b7b0616480 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55b7b06163e8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55b7b06165d0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55b7b0616540 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55b7b06167f0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55b7b0616690 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55b7b0616710 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55b7b06197e8 <col:53> 'int' 0
|-CXXMethodDecl 0x55b7b0616948 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55b7b06168b8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55b7b0619808 <col:34> 'int' 1
|-CXXMethodDecl 0x55b7b0616a90 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55b7b0616a00 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55b7b0616be0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55b7b0616b50 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55b7b0616d30 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55b7b0616ca0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55b7b0616e80 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55b7b0616df0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55b7b0617058 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b7b0616f40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b7b0616fc0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b7b0617238 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55b7b0617120 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55b7b06171a0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55b7b0617418 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b7b0617300 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55b7b0617380 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55b7b06175f8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55b7b06174e0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55b7b0617560 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55b7b06177d8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55b7b06176c0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55b7b0617740 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55b7b0617b38 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55b7b0617920 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55b7b06179a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55b7b0619828 <col:56> 'int' 10
| `-ParmVarDecl 0x55b7b0617a18 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b0619848 <col:77> 'bool' true
|-CXXMethodDecl 0x55b7b0617e98 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55b7b0617c80 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55b7b0617d00 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55b7b0619858 <col:57> 'int' 10
| `-ParmVarDecl 0x55b7b0617d78 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b7b0619878 <col:78> 'bool' true
|-CXXMethodDecl 0x55b7b06180c0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55b7b0617f68 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55b7b0617fe8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55b7b06181b8 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x55b7b0618328 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55b7b0618268 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55b7b0618478 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55b7b06183e8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55b7b0618520 <col:51> "" ""
|-AccessSpecDecl 0x55b7b0618590 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55b7b06185b8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55b7b0618708 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55b7b0618758 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b7b06186e8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55b7b06186b8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55b7b0306428 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55b7b0618770 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b7b0618888 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55b7b0618930 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55b7b0618998 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55b7b0618a00 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55b7b0618ab0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55b7b0618930 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55b7b06199b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55b7b0619968 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55b7b0619930 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55b7b0619918 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55b7b06198c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55b7b03236b0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55b7b0618998 'len' 'int'
| | | `-IntegerLiteral 0x55b7b0619a28 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55b7b0618a00 'cap' 'int'
| | | `-IntegerLiteral 0x55b7b0619a90 <col:20> 'int' 0
| | `-CompoundStmt 0x55b7b0619b10 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55b7b0618c28 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55b7b0618b68 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55b7b0619b20 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55b7b061bd38 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b7b061be48 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b0618930 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55b7b061d800 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b061d7d0 <col:12> 'unsigned char *const' lvalue .s 0x55b7b0618930
| | |     `-DeclRefExpr 0x55b7b061d7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b0618998 'len' 'int'
| | | `-ImplicitCastExpr 0x55b7b061d890 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b061d860 <col:12> 'const int' lvalue .len 0x55b7b0618998
| | |     `-DeclRefExpr 0x55b7b061d840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55b7b0618a00 'cap' 'int'
| | | `-ImplicitCastExpr 0x55b7b061d920 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55b7b061d8f0 <col:12> 'const int' lvalue .cap 0x55b7b0618a00
| | |     `-DeclRefExpr 0x55b7b061d8d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55b7b061be48 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55b7b061d978 <col:12>
| |-CXXConstructorDecl 0x55b7b061bee8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b7b061bee8
| | `-ParmVarDecl 0x55b7b061bff8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55b7b061dc30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55b7b0618d00 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55b7b0618e00 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55b7b0618d68 <col:16> col:19 'int'
|-CXXMethodDecl 0x55b7b0618fe0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55b7b0618ec0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55b7b0618f40 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55b7b06191c0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55b7b06190a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b7b0619128 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55b7b0619390 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55b7b0619288 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55b7b06194e0 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55b7b0619450 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55b7b06197a8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55b7b06196e8 parent 0x55b7affd0488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55b7b0619598 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55b7b0619610 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b063c6c0 prev 0x55b7b0559530 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b063c7b8 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55b7b063c848 <col:20, col:26> col:20 public
|-TypedefDecl 0x55b7b063c880 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55b7b0126690 'uninitialized_type'
|   `-CXXRecord 0x55b7b01265f8 'uninitialized_type'
|-CXXConstructorDecl 0x55b7b063c910 <line:19:5, line:21:5> line:19:12 IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b0642070 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55b7b0642290 <col:25, line:21:5>
|   `-CallExpr 0x55b7b0642240 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55b7b0642228 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b7b0642208 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55b7b0231748 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55b7b0642278 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55b7b0642150 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55b7b0642120 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|     |     `-CXXThisExpr 0x55b7b0642110 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55b7b0642168 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55b7b06421e8 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55b7b06421c8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55b7b0642198 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55b7b0642188 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55b7b063ca60 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55b7b063c9d0 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b06422a8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55b7b06424f8 <col:56, line:26:5>
|   `-CallExpr 0x55b7b0642478 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55b7b0642460 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b7b0642440 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55b7b0230408 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55b7b06424b0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55b7b0642388 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55b7b0642358 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|     |     `-CXXThisExpr 0x55b7b0642348 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55b7b06424e0 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55b7b06424c8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b7b06423a0 <col:17> 'const unsigned char *' lvalue ParmVar 0x55b7b063c9d0 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55b7b0642420 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55b7b0642400 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55b7b06423d0 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55b7b06423c0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55b7b063cbb0 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55b7b063cb20 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b0642510 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55b7b06438b0 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55b7b0643898 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55b7b0643860 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55b7b0643848 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b7b06437c8 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55b7b0641020 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55b7b0642578 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55b7b0642568 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55b7b06437b0 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55b7b0643798 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55b7b0643780 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55b7b0643760 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55b7b0643730 <col:10> '<bound member function type>' .operator in_addr 0x55b7b0334680
|                 `-ImplicitCastExpr 0x55b7b0643718 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55b7b0642590 <col:10> 'IPAddress' lvalue ParmVar 0x55b7b063cb20 'x' 'IPAddress'
|-CXXConstructorDecl 0x55b7b063cd00 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55b7b063cc70 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55b7b063cf28 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55b7b063ce30 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b0643a40 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55b7b06438c8 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55b7b063ce30 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55b7b0643aa0 <col:13, line:41:5>
|-CXXConstructorDecl 0x55b7b063d0f8 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55b7b063d030 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b0643ab0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55b7b0643bc0 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55b7b0643b88 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55b7b0643b70 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b7b0643b50 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55b7b0641020 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55b7b0643b18 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55b7b0643b08 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55b7b0643b30 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55b7b063d030 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55b7b063d248 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55b7b063d1b8 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b0643bd8 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55b7b0643c88 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55b7b0643c60 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55b7b0643c30 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55b7b063d1b8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55b7b063d3d8 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55b7b063d310 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55b7b063d528 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55b7b063d498 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55b7b063d6d8 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55b7b063d650 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55b7b04f9eb0 'IP6Address'
|   | `-CXXRecord 0x55b7b063c6c0 'IP6Address'
|   `-ParenType 0x55b7b063d5f0 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55b7b02f1cb0 'uint32_t () const' const cdecl
|       `-TypedefType 0x55b7b0126980 'uint32_t' sugar
|         |-Typedef 0x55b7b00394c8 'uint32_t'
|         `-TypedefType 0x55b7b00125a0 '__uint32_t' sugar
|           |-Typedef 0x55b7b0012198 '__uint32_t'
|           `-BuiltinType 0x55b7affd0620 'unsigned int'
|-CXXConversionDecl 0x55b7b063d818 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55b7b063d9a0 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55b7b0643cf0 <col:46, col:62>
|   `-ReturnStmt 0x55b7b0643ce0 <col:48, col:55>
|     `-MemberExpr 0x55b7b0643cb0 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|       `-CXXThisExpr 0x55b7b0643ca0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55b7b063db90 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55b7b0643d58 <col:34, col:50>
|   `-ReturnStmt 0x55b7b0643d48 <col:36, col:43>
|     `-MemberExpr 0x55b7b0643d18 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|       `-CXXThisExpr 0x55b7b0643d08 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55b7b063dc90 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55b7b0643dc0 <col:45, col:61>
|   `-ReturnStmt 0x55b7b0643db0 <col:47, col:54>
|     `-MemberExpr 0x55b7b0643d80 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|       `-CXXThisExpr 0x55b7b0643d70 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55b7b063dd68 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55b7b0643e28 <col:33, col:49>
|   `-ReturnStmt 0x55b7b0643e18 <col:35, col:42>
|     `-MemberExpr 0x55b7b0643de8 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|       `-CXXThisExpr 0x55b7b0643dd8 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55b7b063de30 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55b7b0643f60 <col:27, col:66>
|   `-ReturnStmt 0x55b7b0643f50 <col:29, col:63>
|     `-UnaryOperator 0x55b7b0643f38 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b0643f18 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b7b0643f00 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b0643eb0 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55b7b0271f18
|         |   `-MemberExpr 0x55b7b0643e80 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|         |     `-MemberExpr 0x55b7b0643e50 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|         |       `-CXXThisExpr 0x55b7b0643e40 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55b7b0643ee0 <col:62> 'int' 0
|-CXXMethodDecl 0x55b7b063def8 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55b7b06440d8 <col:39, col:78>
|   `-ReturnStmt 0x55b7b06440c8 <col:41, col:75>
|     `-UnaryOperator 0x55b7b06440b0 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b7b0644090 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b7b0644078 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b7b0643fe8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|         |   `-MemberExpr 0x55b7b0643fb8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|         |     `-MemberExpr 0x55b7b0643f88 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|         |       `-CXXThisExpr 0x55b7b0643f78 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55b7b0644018 <col:74> 'int' 0
|-CXXMethodDecl 0x55b7b063e018 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55b7b0644248 <col:24, col:75>
|   `-ReturnStmt 0x55b7b0644238 <col:26, col:72>
|     `-CStyleCastExpr 0x55b7b0644210 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55b7b06441e8 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55b7b06441c8 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55b7b06441b0 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55b7b0644160 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55b7b0271f18
|           |   `-MemberExpr 0x55b7b0644130 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|           |     `-MemberExpr 0x55b7b0644100 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|           |       `-CXXThisExpr 0x55b7b06440f0 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55b7b0644190 <col:71> 'int' 0
|-CXXMethodDecl 0x55b7b063e0d8 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55b7b06443d0 <col:36, col:87>
|   `-ReturnStmt 0x55b7b06443c0 <col:38, col:84>
|     `-ImplicitCastExpr 0x55b7b06443a8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55b7b0644380 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55b7b0644358 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55b7b0644338 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55b7b0644320 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b06442d0 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|             |   `-MemberExpr 0x55b7b06442a0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|             |     `-MemberExpr 0x55b7b0644270 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|             |       `-CXXThisExpr 0x55b7b0644260 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55b7b0644300 <col:83> 'int' 0
|-CXXMethodDecl 0x55b7b063e198 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55b7b0644540 <col:24, col:75>
|   `-ReturnStmt 0x55b7b0644530 <col:26, col:72>
|     `-CStyleCastExpr 0x55b7b0644508 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55b7b06444e0 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55b7b06444c0 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55b7b06444a8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55b7b0644458 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55b7b0271f18
|           |   `-MemberExpr 0x55b7b0644428 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|           |     `-MemberExpr 0x55b7b06443f8 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55b7b0641678
|           |       `-CXXThisExpr 0x55b7b06443e8 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55b7b0644488 <col:71> 'int' 0
|-CXXMethodDecl 0x55b7b063e258 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55b7b06446c8 <col:36, col:87>
|   `-ReturnStmt 0x55b7b06446b8 <col:38, col:84>
|     `-ImplicitCastExpr 0x55b7b06446a0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55b7b0644678 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55b7b0644650 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55b7b0644630 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55b7b0644618 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b7b06445c8 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|             |   `-MemberExpr 0x55b7b0644598 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|             |     `-MemberExpr 0x55b7b0644568 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|             |       `-CXXThisExpr 0x55b7b0644558 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55b7b06445f8 <col:83> 'int' 0
|-CXXMethodDecl 0x55b7b063e318 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55b7b063e3e0 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55b7b063e608 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55b7b063e4b8 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55b7b063e530 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55b7b063e788 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55b7b063e6c8 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55b7b063e850 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55b7b06449e0 <col:36, line:99:5>
|   `-ReturnStmt 0x55b7b06449d0 <line:98:2, col:81>
|     `-BinaryOperator 0x55b7b06449b0 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55b7b0644828 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55b7b0644810 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55b7b06447f8 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55b7b06447b8 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55b7b06447a0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55b7b0644750 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|       | |     |   `-MemberExpr 0x55b7b0644720 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|       | |     |     `-MemberExpr 0x55b7b06446f0 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|       | |     |       `-CXXThisExpr 0x55b7b06446e0 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55b7b0644780 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55b7b06447d8 <col:41> 'int' 255
|       `-BinaryOperator 0x55b7b0644990 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b0644978 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b7b0644960 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b7b0644920 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b7b0644908 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b7b06448b8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|         |     |   `-MemberExpr 0x55b7b0644888 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|         |     |     `-MemberExpr 0x55b7b0644858 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|         |     |       `-CXXThisExpr 0x55b7b0644848 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55b7b06448e8 <col:74> 'int' 12
|         `-IntegerLiteral 0x55b7b0644940 <col:81> 'int' 254
|-CXXMethodDecl 0x55b7b063e9c8 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55b7b063e900 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55b7b063ea90 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55b7b0644ec8 <col:43, line:114:5>
|   `-ReturnStmt 0x55b7b0644eb8 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55b7b0644e98 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55b7b0644cf8 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55b7b0644b58 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55b7b0644b28 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55b7b0644ae8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55b7b0644aa8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55b7b0644a78 <col:9> '<bound member function type>' ->data32 0x55b7b063e258
|       | | |   |   `-CXXThisExpr 0x55b7b0644a68 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55b7b0644ac8 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55b7b0644b40 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55b7b0644b08 <col:24> 'int' 0
|       | `-BinaryOperator 0x55b7b0644cd8 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55b7b0644ca8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55b7b0644c68 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55b7b0644c28 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55b7b0644bf8 <col:29> '<bound member function type>' ->data32 0x55b7b063e258
|       |   |   |   `-CXXThisExpr 0x55b7b0644be8 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55b7b0644c48 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55b7b0644cc0 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55b7b0644c88 <col:44> 'int' 0
|       `-BinaryOperator 0x55b7b0644e78 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b0644e48 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55b7b0644e08 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55b7b0644dc8 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55b7b0644d98 <col:9> '<bound member function type>' ->data32 0x55b7b063e258
|         |   |   `-CXXThisExpr 0x55b7b0644d88 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55b7b0644de8 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55b7b0644e60 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55b7b0644e28 <col:24> 'int' 0
|-CXXMethodDecl 0x55b7b063eb50 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55b7b0645440 <col:39, line:123:5>
|   `-ReturnStmt 0x55b7b0645430 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55b7b0645410 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55b7b06451e0 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55b7b0645040 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55b7b0645010 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55b7b0644fd0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55b7b0644f90 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55b7b0644f60 <col:9> '<bound member function type>' ->data32 0x55b7b063e258
|       | | |   |   `-CXXThisExpr 0x55b7b0644f50 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55b7b0644fb0 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55b7b0645028 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55b7b0644ff0 <col:24> 'int' 0
|       | `-BinaryOperator 0x55b7b06451c0 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55b7b0645190 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55b7b0645150 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55b7b0645110 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55b7b06450e0 <col:29> '<bound member function type>' ->data32 0x55b7b063e258
|       |   |   |   `-CXXThisExpr 0x55b7b06450d0 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55b7b0645130 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55b7b06451a8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55b7b0645170 <col:44> 'int' 0
|       `-BinaryOperator 0x55b7b06453f0 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b06453d8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55b7b06452f0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55b7b06452b0 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55b7b0645280 <col:9> '<bound member function type>' ->data32 0x55b7b063e258
|         |   |   `-CXXThisExpr 0x55b7b0645270 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55b7b06452d0 <col:18> 'int' 2
|         `-CallExpr 0x55b7b06453b0 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55b7b0645398 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55b7b0645378 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55b7b02760a8 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55b7b0645358 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55b7b063ec10 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55b7b06455d0 <col:38, line:131:5>
|   `-ReturnStmt 0x55b7b06455c0 <line:130:9, col:47>
|     `-BinaryOperator 0x55b7b06455a0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55b7b0645588 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55b7b0645570 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55b7b0645530 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55b7b0645518 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55b7b06454c8 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55b7b0271f18
|       |     |   `-MemberExpr 0x55b7b0645498 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55b7b0272238
|       |     |     `-MemberExpr 0x55b7b0645468 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55b7b0641678
|       |     |       `-CXXThisExpr 0x55b7b0645458 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55b7b06454f8 <col:41> 'int' 0
|       `-IntegerLiteral 0x55b7b0645550 <col:47> 'int' 255
|-CXXMethodDecl 0x55b7b063ecd0 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55b7b06459a8 <col:39, line:139:5>
|   `-ReturnStmt 0x55b7b0645998 <line:138:9, col:67>
|     `-BinaryOperator 0x55b7b0645978 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55b7b06457d8 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55b7b06457c0 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55b7b06456d8 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55b7b0645698 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55b7b0645668 <col:16> '<bound member function type>' ->data32 0x55b7b063e258
|       | |   |   `-CXXThisExpr 0x55b7b0645658 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55b7b06456b8 <col:25> 'int' 0
|       | `-CallExpr 0x55b7b0645798 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55b7b0645780 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b7b0645760 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55b7b02760a8 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55b7b0645740 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55b7b0645958 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55b7b0645928 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55b7b06458e8 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55b7b06458a8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55b7b0645878 <col:52> '<bound member function type>' ->data32 0x55b7b063e258
|         |   |   `-CXXThisExpr 0x55b7b0645868 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55b7b06458c8 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55b7b0645940 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55b7b0645908 <col:67> 'int' 0
|-CXXMethodDecl 0x55b7b063ed90 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55b7b063ef38 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55b7b063ee40 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55b7b063f0f8 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55b7b063f008 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55b7b063f240 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55b7b063f1b0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55b7b063f3a0 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55b7b063f310 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55b7b063f500 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55b7b063f470 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55b7b0641020 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55b7b063f5d0 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55b7b0641198 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55b7b06410d8 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55b7b0641260 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55b7b0641320 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55b7b06413e0 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55b7b0645b28 <col:22, col:42>
|   `-ReturnStmt 0x55b7b0645b18 <col:24, col:39>
|     `-ExprWithCleanups 0x55b7b0645b00 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55b7b0645ad0 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55b7b0645ab8 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55b7b0645a98 <col:31, col:39> 'String' (CXXTemporary 0x55b7b0645a98)
|             `-CXXMemberCallExpr 0x55b7b0645a70 <col:31, col:39> 'String'
|               `-MemberExpr 0x55b7b0645a40 <col:31> '<bound member function type>' ->unparse 0x55b7b0641260
|                 `-CXXThisExpr 0x55b7b0645a30 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55b7b06414b0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55b7b0641558 <col:51> "" ""
|-TypedefDecl 0x55b7b06415d8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55b7b063e480 'const IP6Address &'
|   `-QualType 0x55b7b04f9eb1 'const IP6Address' const
|     `-RecordType 0x55b7b04f9eb0 'IP6Address'
|       `-CXXRecord 0x55b7b063c6c0 'IP6Address'
|-AccessSpecDecl 0x55b7b0641630 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55b7b0641678 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55b7b06425b0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55b7b06425b0
| `-ParmVarDecl 0x55b7b0642688 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55b7b0642d58 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55b7b0642d58
| `-ParmVarDecl 0x55b7b0642e68 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55b7b0642ed8 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55b7b0642ed8
| `-ParmVarDecl 0x55b7b0642fe8 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55b7b0643140 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b0643258 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55b7b0641678 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55b7b064f858 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55b7b064f700 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55b7b0641678
| |     `-CXXStaticCastExpr 0x55b7b064f6d0 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b064f6a0 <col:7> 'IP6Address' lvalue ParmVar 0x55b7b0643258 '' 'IP6Address &&'
| `-CompoundStmt 0x55b7b064f8b8 <col:7>
`-CXXDestructorDecl 0x55b7b064f508 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b05fee88 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b05fefa8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x55b7b05ff038 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x55b7b05ff230 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55b7b05ff070 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55b7b05ff0e8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55b7b05ff160 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55b7b05ff300 <col:79> 'const ArgContext' lvalue Var 0x55b7b05e2e08 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55b7b05ff4a0 <col:91, line:1348:5>
|   `-ReturnStmt 0x55b7b05ff490 <line:1347:9, col:41>
|     `-CallExpr 0x55b7b05ff440 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x55b7b05ff428 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b7b05ff3e0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55b7b05fedd0 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55b7b05ff368 <col:26> 'const String' lvalue ParmVar 0x55b7b05ff070 'str' 'const String &'
|       |-UnaryOperator 0x55b7b05ff3a8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55b7b05ff388 <col:32> 'String' lvalue ParmVar 0x55b7b05ff0e8 'result' 'String &'
|       `-ImplicitCastExpr 0x55b7b05ff478 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55b7b05ff3c0 <col:40> 'int' 0
|-CXXConstructorDecl 0x55b7b06b0828 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55b7b06b0900 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b06b0a38 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x55b7b06b0a38
| `-ParmVarDecl 0x55b7b06b0b48 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x55b7b06b2b60 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55b7b06b2c78 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x55b7b06b38d0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b05ff4e0 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55b7b05ff738 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55b7b06b0738 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b06b2ce8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x55b7b06b2ce8
| `-ParmVarDecl 0x55b7b06b2df8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x55b7b06b2e98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b06b2fa8 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x55b7b06b38e0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b7b06b38b0 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x55b7b06b3880 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06b3850 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x55b7b06b2fa8 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x55b7b06b3950 <col:19>
`-CXXDestructorDecl 0x55b7b06b3048 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b06b4618 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55b7b06b4a18 prev 0x55b7b06b4618 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55b7b06b4c10 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55b7b06b4b18 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55b7b06b5b58 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55b7b06b4d90 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55b7b06b5b18 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b7b06b5ad8 <col:20> 'String *' lvalue ParmVar 0x55b7b06b4b18 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55b7b06b4df0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55b7b06b5bb8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55b7b05e2c30 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55b7b06b4cd0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55b7b05bde20 Slot::store 'void ()' ]
| `-CompoundStmt 0x55b7b06b62f8 <col:22, line:857:9>
|   `-CallExpr 0x55b7b06b62b0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55b7b06b6298 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b7b06b6218 <col:13> 'void (String &, const String &)' lvalue Function 0x55b7b06b60f8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55b7b0292e68 'assign_consume')
|     |-UnaryOperator 0x55b7b06b5d48 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55b7b06b5d30 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55b7b06b5d00 <col:29> 'String *' lvalue ->_ptr 0x55b7b06b4d90
|     |     `-CXXThisExpr 0x55b7b06b5cf0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55b7b06b62e0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55b7b06b5d70 <col:35> 'String':'String' lvalue ->_slot 0x55b7b06b4df0
|         `-CXXThisExpr 0x55b7b06b5d60 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55b7b06b4d90 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55b7b06b4df0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55b7b06b4e68 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55b7b06b4e68
| `-ParmVarDecl 0x55b7b06b4f78 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55b7b06b5018 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55b7b06b5018
| `-ParmVarDecl 0x55b7b06b5128 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55b7b06b51c8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55b7b06b51c8
| `-ParmVarDecl 0x55b7b06b52d8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55b7b06b5348 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55b7b06b5348
| `-ParmVarDecl 0x55b7b06b5458 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55b7b06b54e0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55b7b05bdd20 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55b7b06b5c20 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b05faba0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b05facb8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55b7b05fad48 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55b7b05faf88 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55b7b05fad80 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55b7b05fae00 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55b7b05fae78 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55b7b05fb1a0 <col:81> 'const ArgContext' lvalue Var 0x55b7b05e2e08 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55b7b05fb0e0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55b7b05fb050 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55b7b05fb2f8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55b7b05fb2e8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55b7b05fb2d0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55b7b05fb2a0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55b7b05fb288 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55b7b05fb260 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55b7b05fb240 <col:16, col:24> 'String' (CXXTemporary 0x55b7b05fb240)
|               `-CXXConstructExpr 0x55b7b05fb208 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55b7b05fb1f0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55b7b05fb1d0 <col:23> 'bool' lvalue ParmVar 0x55b7b05fb050 'x' 'bool'
|-CXXConstructorDecl 0x55b7b06c2808 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55b7b06c28e0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b06c2a18 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55b7b06c2a18
| `-ParmVarDecl 0x55b7b06c2b28 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55b7b06c2bc8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55b7b06c2cd8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55b7b06c3930 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b05fb338 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55b7b05fb598 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55b7b06c2718 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b7b06c2d48 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55b7b06c2d48
| `-ParmVarDecl 0x55b7b06c2e58 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55b7b06c2ef8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b06c3008 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55b7b06c3940 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b7b06c3910 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55b7b06c38e0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06c38b0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55b7b06c3008 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55b7b06c39b0 <col:19>
`-CXXDestructorDecl 0x55b7b06c30a8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b05ecf40 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b7b05ed058 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55b7b05ed0e8 <col:16, col:22> col:16 public
|-EnumDecl 0x55b7b05ed110 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55b7b05ed210 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b7b05ed460 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05ed1f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b7b05ed1d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b7b05ed2a0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b7b05ed478 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05ed280 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55b7b05ed260 <col:24> 'int' 22
| |-EnumConstantDecl 0x55b7b05ed330 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b7b05ed490 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05ed310 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55b7b05ed2f0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55b7b05ed3c0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b7b05ed4a8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b7b05ed3a0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55b7b05ed380 <col:25> 'int' 95
| `-EnumConstantDecl 0x55b7b05ed410 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55b7b05eee20 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b7b05ef258 <col:7>
|-CXXConstructorDecl 0x55b7b05eef28 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55b7b05eef28
| `-ParmVarDecl 0x55b7b05ef038 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55b7b05ef0d8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b05ef1e8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55b7b06ce9e0 <col:7>
`-CXXDestructorDecl 0x55b7b05f1398 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b7b05ed4d8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55b7b05ed638 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55b7b05ed6c8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55b7b05ed700 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55b7b0126980 'uint32_t' sugar
|   |-Typedef 0x55b7b00394c8 'uint32_t'
|   `-TypedefType 0x55b7b00125a0 '__uint32_t' sugar
|     |-Typedef 0x55b7b0012198 '__uint32_t'
|     `-BuiltinType 0x55b7affd0620 'unsigned int'
|-CXXConstructorDecl 0x55b7b05ed848 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55b7b05ed770 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55b7b05eed28 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55b7b05ef268 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b7b05ee5e0 'base' 'int'
| | `-ImplicitCastExpr 0x55b7b05eedc8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b7b05eed88 <col:16> 'int' lvalue ParmVar 0x55b7b05ed770 'b' 'int'
| `-CompoundStmt 0x55b7b05ef2d8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55b7b05edd40 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55b7b05ed910 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55b7b05ed990 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55b7b05eda08 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55b7b05eda88 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55b7b05edb48 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55b7b05edbc8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55b7b05ee198 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55b7b05ede10 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55b7b05ee0f8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55b7b05edeb8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55b7b05edf58 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55b7b05edfd0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55b7b05eed48 <col:82> 'const ArgContext' lvalue Var 0x55b7b05e2e08 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55b7b05f0208 <col:94, line:1067:5>
| |   |-DeclStmt 0x55b7b05ef468 <line:1054:9, col:64>
| |   | `-VarDecl 0x55b7b05ef2f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55b7b05ef420 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55b7b05ef688 <line:1055:9, col:91>
| |   | `-VarDecl 0x55b7b05ef498 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55b7b05ef660 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55b7b05ef640 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55b7b05ef5f0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55b7b05ef5d0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55b7b05ef578 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55b7b05ef528 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55b7b05ef558 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55b7b05ef5b8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55b7b05ef598 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55b7b05ef620 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55b7b05ef7e8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55b7b05ef780 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55b7b05efc30 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55b7b05efb60 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55b7b05efae0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b7b04f0b88 0x55b7b033a168 0x55b7b0339e40 0x55b7b032a610 0x55b7b032a2c0 0x55b7b0329bb0 0x55b7b02fc520 0x55b7b02897d0
| |   | | |-CallExpr 0x55b7b05efa20 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55b7b05ef810 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55b7b05ef8c0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55b7b05ef890 <col:19, col:23> '<bound member function type>' .begin 0x55b7b0319818
| |   | | | |   `-DeclRefExpr 0x55b7b05ef870 <col:19> 'const String' lvalue ParmVar 0x55b7b05edeb8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55b7b05ef930 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55b7b05ef900 <col:32, col:36> '<bound member function type>' .end 0x55b7b0319a30
| |   | | | |   `-DeclRefExpr 0x55b7b05ef8e0 <col:32> 'const String' lvalue ParmVar 0x55b7b05edeb8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55b7b05ef950 <col:43> 'const bool' lvalue Var 0x55b7b05ef2f8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55b7b05ef9b8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55b7b05ef998 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55b7b05ef9e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b7b05ef780 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55b7b05efa00 <col:73> 'const int' lvalue Var 0x55b7b05ef498 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55b7b05efac0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55b7b05efa90 <col:16, col:20> '<bound member function type>' .end 0x55b7b0319a30
| |   | |     `-DeclRefExpr 0x55b7b05efa70 <col:16> 'const String' lvalue ParmVar 0x55b7b05edeb8 'str' 'const String &'
| |   | `-BinaryOperator 0x55b7b05efc10 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55b7b05efba8 <col:13> 'int' lvalue ->status 0x55b7b05ee648
| |   |   | `-CXXThisExpr 0x55b7b05efb98 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55b7b05efbf8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55b7b05efbd8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed2a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55b7b05efe80 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55b7b05efd68 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55b7b05efd50 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55b7b05efd38 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55b7b05efc58 <col:13> 'int' lvalue ->status 0x55b7b05ee648
| |   | | |     `-CXXThisExpr 0x55b7b05efc48 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55b7b05efd18 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55b7b05efce8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55b7b05efc98 <col:23> 'int' lvalue ->status 0x55b7b05ee648
| |   | |   |   `-CXXThisExpr 0x55b7b05efc88 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55b7b05efd00 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55b7b05efcc8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55b7b05efe60 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55b7b05efe00 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55b7b05efda8 <col:13, col:18> '<bound member function type>' .error 0x55b7b04b3df0
| |   |   | | `-DeclRefExpr 0x55b7b05efd88 <col:13> 'const ArgContext' lvalue ParmVar 0x55b7b05edfd0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55b7b05efe28 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55b7b05efdd8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55b7b05efe50 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55b7b05efe40 <col:20> 'bool' false
| |   |-DeclStmt 0x55b7b05f0058 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55b7b05f0000 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55b7b05eff90 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55b7b05f01b8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55b7b05f0070 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55b7b02bd9b8
| |   | |-DeclRefExpr 0x55b7b05f00b8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b7b05ef780 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55b7b05f0188 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55b7b05f0100 <col:64> 'V' lvalue ParmVar 0x55b7b05edf58 'result' 'V &'
| |   `-ReturnStmt 0x55b7b05f01f8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55b7b05f01e8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55b7b06d23c8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b7b06d21a0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55b7b06d2278 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55b7b06d22e0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55b7b06d4160 <col:94, line:1067:5>
|     |-DeclStmt 0x55b7b06d2bd8 <line:1054:9, col:64>
|     | `-VarDecl 0x55b7b06d29f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55b7b06d2b68 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b7b06d2b38 <col:36, col:55> 'const bool' lvalue Var 0x55b7b02acbd0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55b7b06d2db8 <line:1055:9, col:91>
|     | `-VarDecl 0x55b7b06d2bf0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55b7b06d2d38 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55b7b06d2d20 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55b7b06d2d00 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55b7b06d2ce0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55b7b06d2cc0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55b7b06d2c88 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55b7b06d2c68 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55b7b05ef558 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55b7b06d2ca8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55b7b05ef598 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55b7b05ef620 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55b7b06d2f50 <line:1056:9, col:27>
|     | `-VarDecl 0x55b7b06d2ee8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55b7b06d33d8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55b7b06d3380 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55b7b06d3238 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55b7b06d3208 <col:13> '<bound member function type>' ->parse 0x55b7b05edd40
|     | | | | `-CXXThisExpr 0x55b7b06d31f8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55b7b06d3098 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b7b06d3068 <col:19, col:23> '<bound member function type>' .begin 0x55b7b0319818
|     | | | |   `-DeclRefExpr 0x55b7b06d3048 <col:19> 'const String' lvalue ParmVar 0x55b7b06d21a0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55b7b06d3108 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b7b06d30d8 <col:32, col:36> '<bound member function type>' .end 0x55b7b0319a30
|     | | | |   `-DeclRefExpr 0x55b7b06d30b8 <col:32> 'const String' lvalue ParmVar 0x55b7b06d21a0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55b7b06d32a8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55b7b06d3288 <col:43> 'const bool' lvalue Var 0x55b7b06d29f8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55b7b06d3190 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55b7b06d3178 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55b7b06d3158 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55b7b06d32c0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55b7b06d31b8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55b7b06d2ee8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55b7b06d32f8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b7b06d32d8 <col:73> 'const int' lvalue Var 0x55b7b06d2bf0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55b7b06d3360 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55b7b06d3330 <col:16, col:20> '<bound member function type>' .end 0x55b7b0319a30
|     | |     `-DeclRefExpr 0x55b7b06d3310 <col:16> 'const String' lvalue ParmVar 0x55b7b06d21a0 'str' 'const String &'
|     | `-BinaryOperator 0x55b7b06d33b8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55b7b05efba8 <col:13> 'int' lvalue ->status 0x55b7b05ee648
|     |   | `-CXXThisExpr 0x55b7b05efb98 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55b7b06d33a0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55b7b05efbd8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed2a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55b7b06d3550 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55b7b06d3470 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55b7b06d3458 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55b7b06d3440 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55b7b05efc58 <col:13> 'int' lvalue ->status 0x55b7b05ee648
|     | | |     `-CXXThisExpr 0x55b7b05efc48 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55b7b06d3420 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55b7b06d33f0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55b7b05efc98 <col:23> 'int' lvalue ->status 0x55b7b05ee648
|     | |   |   `-CXXThisExpr 0x55b7b05efc88 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55b7b06d3408 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55b7b05efcc8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55b7b06d3530 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55b7b06d34e0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55b7b06d34b0 <col:13, col:18> '<bound member function type>' .error 0x55b7b04b3df0
|     |   | | `-DeclRefExpr 0x55b7b06d3490 <col:13> 'const ArgContext' lvalue ParmVar 0x55b7b06d22e0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55b7b06d3508 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55b7b05efdd8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55b7b06d3520 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55b7b05efe40 <col:20> 'bool' false
|     |-DeclStmt 0x55b7b06d3a98 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55b7b06d3a40 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55b7b06d39f0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55b7b06d39d0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55b7b06d3960 'type'
|     |       `-ElaboratedType 0x55b7b06d3910 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55b7b06d38f0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55b7b02acd28 'unsigned_type'
|     |           `-BuiltinType 0x55b7affd0620 'unsigned int'
|     |-CallExpr 0x55b7b06d40f0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55b7b06d40d8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b7b06d4058 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55b7b06d3f38 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55b7b02bd9b8 'extract_integer')
|     | |-ImplicitCastExpr 0x55b7b06d4138 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55b7b06d4120 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55b7b06d3af8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55b7b06d2ee8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55b7b06d3bc8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55b7b06d3b78 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55b7b06d2278 'result' 'unsigned int &'
|     `-ReturnStmt 0x55b7b06d4150 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55b7b05f01e8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55b7b05ee558 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55b7b05ee208 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55b7b05ee4b8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55b7b05ee2b8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55b7b05ee358 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55b7b05ee3d0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55b7b05eed68 <col:71> 'const ArgContext' lvalue Var 0x55b7b05e2e08 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55b7b05f09b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55b7b05f02d0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55b7b05f0268 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55b7b05f0990 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55b7b05f0598 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55b7b05f0420 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55b7b05f03e8 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55b7b05f0330 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55b7b05f0388 <col:31> 'const String' lvalue ParmVar 0x55b7b05ee2b8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55b7b05f03a8 <col:36> 'V' lvalue Var 0x55b7b05f0268 'x' 'V'
| |     | |   `-DeclRefExpr 0x55b7b05f03c8 <col:39> 'const ArgContext' lvalue ParmVar 0x55b7b05ee3d0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55b7b05f0578 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55b7b05f0558 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55b7b05f0540 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55b7b05f0528 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55b7b05f0448 <col:17> 'int' lvalue ->status 0x55b7b05ee648
| |     |     |     `-CXXThisExpr 0x55b7b05f0438 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55b7b05f0508 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55b7b05f04d8 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55b7b05f0488 <col:27> 'int' lvalue ->status 0x55b7b05ee648
| |     |       |   `-CXXThisExpr 0x55b7b05f0478 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55b7b05f04f0 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55b7b05f04b8 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55b7b05f05c8 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55b7b05f05b8 <col:20> 'bool' false
| |     `-IfStmt 0x55b7b05f0968 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55b7b05f0668 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55b7b05f0638 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55b7b05f05e8 <col:18> 'int' lvalue ->status 0x55b7b05ee648
| |       | |   `-CXXThisExpr 0x55b7b05f05d8 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55b7b05f0650 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55b7b05f0618 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55b7b05f08a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55b7b05f0850 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55b7b05f0698 <line:1076:13> '<bound member function type>' ->range_error 0x55b7b05eec58
| |       | | | `-CXXThisExpr 0x55b7b05f0688 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55b7b05f06c8 <col:25> 'const ArgContext' lvalue ParmVar 0x55b7b05ee3d0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55b7b05f07b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55b7b05f0828 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55b7b05f0808 <col:43> 'V' lvalue Var 0x55b7b05f0268 'x' 'V'
| |       | `-ReturnStmt 0x55b7b05f0898 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55b7b05f0888 <col:20> 'bool' false
| |       `-CompoundStmt 0x55b7b05f0948 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55b7b05f0908 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55b7b05f08c8 <col:13> 'V' lvalue ParmVar 0x55b7b05ee358 'result' 'V &'
| |         | `-DeclRefExpr 0x55b7b05f08e8 <col:22> 'V' lvalue Var 0x55b7b05f0268 'x' 'V'
| |         `-ReturnStmt 0x55b7b05f0938 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55b7b05f0928 <col:20> 'bool' true
| `-CXXMethodDecl 0x55b7b06d1d88 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b7b06d1b60 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55b7b06d1c38 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55b7b06d1ca0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55b7b06d29d8 <col:83, line:1083:5>
|     |-DeclStmt 0x55b7b06d2010 <line:1071:9, col:12>
|     | `-VarDecl 0x55b7b06d1fa8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55b7b06d29b0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55b7b06d2640 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55b7b06d2568 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55b7b06d2530 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55b7b06d24e8 <col:14> '<bound member function type>' ->parse_saturating 0x55b7b06d23c8
|       | |   | `-CXXThisExpr 0x55b7b06d24d8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55b7b06d2080 <col:31> 'const String' lvalue ParmVar 0x55b7b06d1b60 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55b7b06d20a0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55b7b06d1fa8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55b7b06d20c0 <col:39> 'const ArgContext' lvalue ParmVar 0x55b7b06d1ca0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55b7b06d2620 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55b7b06d2600 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55b7b06d25e8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55b7b06d25d0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55b7b05f0448 <col:17> 'int' lvalue ->status 0x55b7b05ee648
|       |     |     `-CXXThisExpr 0x55b7b05f0438 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55b7b06d25b0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55b7b06d2580 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55b7b05f0488 <col:27> 'int' lvalue ->status 0x55b7b05ee648
|       |       |   `-CXXThisExpr 0x55b7b05f0478 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55b7b06d2598 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55b7b05f04b8 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55b7b06d2660 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55b7b05f05b8 <col:20> 'bool' false
|       `-IfStmt 0x55b7b06d2988 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55b7b06d26a0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55b7b06d2670 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55b7b05f05e8 <col:18> 'int' lvalue ->status 0x55b7b05ee648
|         | |   `-CXXThisExpr 0x55b7b05f05d8 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55b7b06d2688 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55b7b05f0618 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b7b05ed330 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55b7b06d28c0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55b7b06d2830 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55b7b05f0698 <line:1076:13> '<bound member function type>' ->range_error 0x55b7b05eec58
|         | | | `-CXXThisExpr 0x55b7b05f0688 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55b7b06d26c0 <col:25> 'const ArgContext' lvalue ParmVar 0x55b7b06d1ca0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55b7b06d2898 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55b7b06d2868 <col:31, col:50> 'const bool' lvalue Var 0x55b7b02acbd0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55b7b06d2808 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55b7b06d27f0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55b7b06d27d8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55b7b06d27b8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55b7b06d1fa8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55b7b06d28b0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55b7b05f0888 <col:20> 'bool' false
|         `-CompoundStmt 0x55b7b06d2968 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55b7b06d2938 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55b7b06d28e0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55b7b06d1c38 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55b7b06d2920 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55b7b06d2900 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55b7b06d1fa8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55b7b06d2958 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55b7b05f0928 <col:20> 'bool' true
|-FieldDecl 0x55b7b05ee5e0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55b7b05ee648 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55b7b05ee698 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55b7b05ee950 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55b7b05ee6d8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55b7b05ee758 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55b7b05ee7d0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55b7b05ee850 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55b7b05eec58 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55b7b05eea20 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55b7b05eea98 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55b7b05eeb30 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55b7b05f1218 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55b7b05f1218
| `-ParmVarDecl 0x55b7b05f1328 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55b7b05f14a8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b05f15b8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55b7b06ce9f0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b7b06ce9c0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55b7b06ce990 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06ce960 <col:7> 'IntArg' lvalue ParmVar 0x55b7b05f15b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55b7b05ee5e0 'base' 'int'
| | `-ImplicitCastExpr 0x55b7b06ceae8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b06ceab8 <col:7> 'int' xvalue .base 0x55b7b05ee5e0
| |     `-CXXStaticCastExpr 0x55b7b06cea88 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06cea58 <col:7> 'IntArg' lvalue ParmVar 0x55b7b05f15b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55b7b05ee648 'status' 'int'
| | `-ImplicitCastExpr 0x55b7b06cebb8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b7b06ceb88 <col:7> 'int' xvalue .status 0x55b7b05ee648
| |     `-CXXStaticCastExpr 0x55b7b06ceb58 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06ceb28 <col:7> 'IntArg' lvalue ParmVar 0x55b7b05f15b8 '' 'IntArg &&'
| `-CompoundStmt 0x55b7b06cec10 <col:7>
`-CXXDestructorDecl 0x55b7b06cdb50 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b7b05f57b0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55b7b05f5a08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55b7b06cda78 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b7b06cdff0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55b7b06cdfd0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55b7b06ce060 <col:19>
|-CXXConstructorDecl 0x55b7b06cdc58 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55b7b06cdc58
| `-ParmVarDecl 0x55b7b06cdd68 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55b7b06cde08 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b7b06cdf18 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b7b06cec20 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b7b06ce940 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55b7b06ce910 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55b7b06ce8e0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55b7b06cdf18 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55b7b06cec90 <col:19>
`-CXXDestructorDecl 0x55b7b06ce0a0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.5 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.5 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
