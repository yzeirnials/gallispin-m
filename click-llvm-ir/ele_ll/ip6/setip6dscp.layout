
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c340f68 prev 0x55e60c338708 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c341060 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e60c3410f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e60c341168 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e60c341228 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e60c3412f0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e60c341468 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e60c3413a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e60c341510 <col:24>
| `-OptimizeNoneAttr 0x55e60c341568 <col:34>
|-CXXMethodDecl 0x55e60c3415b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e60c341868 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e60c341660 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e60c3416d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e60c341758 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e60c341920 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e60c341958 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e60c3419c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e60c341a48 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e60c341d68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e60c341b00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e60c341b78 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e60c341bf0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e60c341c70 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e60c341e80 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e60c3487e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e60c3487e8
| `-ParmVarDecl 0x55e60c3488f8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e60c348998 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e60c348998
| `-ParmVarDecl 0x55e60c348aa8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e60c416060 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c333f80 prev 0x55e60c333d00 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e60c334078 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e60c334108 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e60c334168 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e60c334258 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e60c334358 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e60c334528 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e60c3343d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e60c334450 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e60c3346b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e60c3345f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e60c334760 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e60c334898 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e60c3347d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e60c334a38 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e60c334978 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e60c334bd8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e60c334b18 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e60c334c80 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e60c334d80 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e60c334e60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c334d60 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e60c334d40 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e60c334e10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e60c334e78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c334df0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e60c334dd0 <col:44> 'int' 2
|-CXXMethodDecl 0x55e60c334fc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e60c334ea8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e60c334f28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e60c335118 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e60c335088 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e60c335358 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e60c3351d8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e60c335250 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e60c335408 <col:20>
| `-OptimizeNoneAttr 0x55e60c335460 <col:30>
|-CXXMethodDecl 0x55e60c335568 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e60c3354a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e60c335610 <col:20>
| `-OptimizeNoneAttr 0x55e60c335668 <col:30>
|-CXXMethodDecl 0x55e60c3356b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e60c335780 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e60c335898 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e60c335920 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e60c3359a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e60c335a30 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55e60c335ab8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e60c335b48 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e60c335c08 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e60c335c90 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e60c335d18 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e60c335da0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e60c335e28 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e60c335eb0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e60c335f40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e60c336000 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e60c336090 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e60c3361e0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e60c336148 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e60c336370 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e60c3362a0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e60c336620 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e60c336428 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e60c3364a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e60c336528 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e60c3366d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e60c3367e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e60c336a70 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3367c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c3367a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e60c336870 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e60c336a88 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c336850 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e60c336830 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e60c336900 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e60c336aa0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3368e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e60c3368c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e60c336990 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e60c336ab8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c336970 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e60c336950 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e60c336a20 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e60c336ad0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c336a00 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e60c3369e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e60c336b10 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e60c336f50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e60c336dc0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e60c336e38 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c337020 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e60c3371a0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e60c3370d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c3373a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e60c337258 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e60c3372d0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c3374a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e60c337548 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e60c337610 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c3376a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e60c3378d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c337680 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e60c337660 <col:36> 'int' EnumConstant 0x55e60c337610 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c3376f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c337740 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c337790 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c3377e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e60c337830 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e60c337880 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e60c3379b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e60c3378f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e60c337a80 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e60c337b40 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e60c337c00 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e60c337cc0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e60c337dd8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e60c337ea0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e60c338020 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e60c337f50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e60c338148 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e60c338348 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e60c3381f8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e60c338278 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e60c344c88 <col:54, line:127:5>
|   |-ParenExpr 0x55e60c344b38 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e60c344b08 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c3447f8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e60c3447d0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e60c3447b8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e60c3447a0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e60c344770 <col:31> 'Router *' lvalue ->_router 0x55e60c342650
|   |   |         `-CXXThisExpr 0x55e60c344760 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e60c344858 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c344838 <col:48> 'int' 0
|   |   `-CallExpr 0x55e60c344a68 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e60c344a50 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c344a30 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c344aa8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3448c8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e60c344ac0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3448e8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e60c344ad8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c344920 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e60c344af0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c344a18 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c344a00 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c3449b8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e60c344bd0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e60c344b68 <col:9> 'Router *' lvalue ->_router 0x55e60c342650
|   | | `-CXXThisExpr 0x55e60c344b58 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e60c344bb8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e60c344b98 <col:19> 'Router *' lvalue ParmVar 0x55e60c3381f8 'r' 'Router *'
|   `-BinaryOperator 0x55e60c344c68 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e60c344c00 <col:9> 'int' lvalue ->_eindex 0x55e60c3426b8
|     | `-CXXThisExpr 0x55e60c344bf0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e60c344c50 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c344c30 <col:19> 'int' lvalue ParmVar 0x55e60c338278 'eindex' 'int'
|-CXXMethodDecl 0x55e60c3384d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e60c338408 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e60c3385a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e60c338668 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e60c338708 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e60c338958 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e60c3387d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e60c338850 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e60c338a08 <col:20>
| `-OptimizeNoneAttr 0x55e60c338a60 <col:30>
|-CXXMethodDecl 0x55e60c338b68 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e60c338aa0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e60c338c10 <col:20>
| `-OptimizeNoneAttr 0x55e60c338c68 <col:30>
|-CXXMethodDecl 0x55e60c338d38 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e60c338ca8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e60c338de0 <col:20>
| `-OptimizeNoneAttr 0x55e60c338e38 <col:30>
|-CXXMethodDecl 0x55e60c338fc8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e60c338e70 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e60c338ef0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e60c339158 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e60c339090 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e60c3392a8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e60c339218 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e60c3393f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e60c339368 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e60c339548 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e60c3394b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e60c339808 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e60c339600 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e60c339680 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e60c339728 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e60c3398e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e60c3399a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e60c339c70 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e60c339b20 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e60c339b98 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c339d98 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e60c339f70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e60c339e50 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e60c339ed0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e60c33a158 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e60c33a038 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e60c33a0b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e60c33a4c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e60c33a218 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e60c33a290 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e60c33a310 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e60c344270 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c344250 <col:106> 'int' 0
| `-ParmVarDecl 0x55e60c33a388 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c3442a8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c344288 <col:126> 'int' 0
|-CXXMethodDecl 0x55e60c33a868 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e60c33a598 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e60c33a630 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e60c33a6b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e60c33a728 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c3442e0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c3442c0 <col:114> 'int' 0
|-CXXMethodDecl 0x55e60c33abf8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e60c33a940 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e60c33a9b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e60c33aa38 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e60c3442f8 <col:96> 'int' 0
| `-ParmVarDecl 0x55e60c33aab0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c344338 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c344318 <col:116> 'int' 0
|-CXXMethodDecl 0x55e60c33af78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e60c33acc8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e60c33ad40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33adc0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e60c344370 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c344350 <col:109> 'int' 0
| `-ParmVarDecl 0x55e60c33ae38 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c3443a8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c344388 <col:129> 'int' 0
|-CXXMethodDecl 0x55e60c33b2f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e60c33b048 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e60c33b0c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33b140 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e60c33b1b8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c3443e0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c3443c0 <col:117> 'int' 0
|-CXXMethodDecl 0x55e60c33b688 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e60c33b3d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33b448 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33b4c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e60c3443f8 <col:99> 'int' 0
| `-ParmVarDecl 0x55e60c33b540 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e60c344438 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e60c344418 <col:119> 'int' 0
|-CXXMethodDecl 0x55e60c33baa8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e60c33b758 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e60c33b7d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e60c33b850 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33b8d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e60c344470 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c344450 <col:108> 'int' 0
| `-ParmVarDecl 0x55e60c33b950 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e60c3444a8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e60c344488 <col:141> 'int' 0
|-CXXMethodDecl 0x55e60c33bec8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e60c33bb80 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e60c33bc00 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e60c33bc78 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33bcf8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e60c33bd78 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e60c3444c0 <col:121> 'int' 0
|-CXXMethodDecl 0x55e60c33c2f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e60c33bfa8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e60c33c028 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e60c33c0a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c33c120 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e60c3444e0 <col:98> 'int' 0
| `-ParmVarDecl 0x55e60c33c1a0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e60c344500 <col:123> 'int' 0
|-CXXMethodDecl 0x55e60c33c5c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e60c33c3d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e60c33c450 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e60c33c4d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e60c344520 <col:80> 'int' 0
|-EnumDecl 0x55e60c33c678 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e60c33c780 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e60c33ca10 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c33c760 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e60c33c740 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e60c33c810 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e60c33ca28 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c33c7f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e60c33c7d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e60c33c8a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e60c33ca40 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c33c880 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e60c33c860 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e60c33c930 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e60c33ca58 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c33c910 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e60c33c8f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e60c33c9c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e60c33ca70 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c33c9a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e60c33c980 <col:34> 'int' 6
|-CXXMethodDecl 0x55e60c33cd28 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e60c33ca98 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e60c33cb38 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e60c33cbb8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e60c33cc30 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e60c3445d8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e60c3445c0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e60c3445a8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e60c344588 <col:98, col:105> 'String' (CXXTemporary 0x55e60c344588)
|           `-CXXTemporaryObjectExpr 0x55e60c344550 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e60c33cfc8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e60c33cdf8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e60c33ce70 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e60c33cee8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e60c344688 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e60c344670 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e60c344658 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e60c344638 <col:94, col:101> 'String' (CXXTemporary 0x55e60c344638)
| |         `-CXXTemporaryObjectExpr 0x55e60c344600 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e60c344e70 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e60c344de8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e60c344db8 <col:9> '<bound member function type>' ->add_task_handlers 0x55e60c33cd28
|     | `-CXXThisExpr 0x55e60c344da8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e60c344e28 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e60c344d28 <col:27> 'Task *' lvalue ParmVar 0x55e60c33cdf8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e60c344e40 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e60c344d48 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e60c33ce70 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e60c344e58 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e60c344d68 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e60c33c9c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e60c344d88 <col:62> 'const String' lvalue ParmVar 0x55e60c33cee8 'prefix' 'const String &'
|-CXXMethodDecl 0x55e60c33d1d8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e60c33d090 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e60c33d108 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e60c344738 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e60c344720 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e60c344708 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e60c3446e8 <col:70, col:77> 'String' (CXXTemporary 0x55e60c3446e8)
| |         `-CXXTemporaryObjectExpr 0x55e60c3446b0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e60c345048 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e60c344fc0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e60c344f90 <col:9> '<bound member function type>' ->add_task_handlers 0x55e60c33cd28
|     | `-CXXThisExpr 0x55e60c344f80 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e60c345000 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e60c344f00 <col:27> 'Task *' lvalue ParmVar 0x55e60c33d090 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e60c345018 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e60c344f20 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e60c345030 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e60c344f40 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e60c33c9c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e60c344f60 <col:57> 'const String' lvalue ParmVar 0x55e60c33d108 'prefix' 'const String &'
|-CXXMethodDecl 0x55e60c33d4b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e60c33d2a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33d320 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33d398 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e60c33d768 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e60c33d588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33d608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33d688 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e60c33da58 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e60c33d838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33d8b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33d930 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e60c33dd08 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e60c33db28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33dba8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33dc28 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e60c33dfb8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e60c33ddd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33de58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33ded8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e60c33e268 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e60c33e088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33e108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33e180 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e60c33e518 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e60c33e338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33e3b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33e438 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e60c33e828 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e60c33e640 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33e6c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33e740 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e60c33eb08 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e60c33e8f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33e978 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33ea20 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e60c33ede8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e60c33ebd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33ec58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33ed00 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e60c33f050 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e60c33eeb8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e60c33ef38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e60c33efb0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e60c33f2f8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e60c33f120 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e60c33f1a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e60c33f218 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e60c33f5a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e60c33f3c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33f448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33f4c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e60c33f858 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e60c33f678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33f6f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33f770 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e60c33fb08 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e60c33f928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33f9a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33fa20 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e60c33fdd8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e60c33fbd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33fc58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e60c33fcf8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e60c340108 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e60c33fea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e60c33ff28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e60c33ffa0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e60c340018 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e60c344750 <col:93> 'bool' false
|-CXXMethodDecl 0x55e60c3402f0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e60c3401d8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e60c340258 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e60c3404c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e60c3403b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e60c340430 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e60c3407a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e60c340588 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e60c340600 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e60c340680 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e60c3406f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c340a98 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e60c340878 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e60c3408f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e60c340970 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e60c3409e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c340cd0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e60c340b70 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e60c340bf0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e60c340eb8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e60c340d98 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e60c340e18 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e60c340f68 prev 0x55e60c338708 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e60c341060 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e60c3410f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e60c341168 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e60c341228 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e60c3412f0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e60c341468 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e60c3413a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e60c341510 <col:24>
| | `-OptimizeNoneAttr 0x55e60c341568 <col:34>
| |-CXXMethodDecl 0x55e60c3415b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e60c341868 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e60c341660 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e60c3416d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e60c341758 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e60c341920 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e60c341958 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e60c3419c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e60c341a48 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e60c341d68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e60c341b00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e60c341b78 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e60c341bf0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e60c341c70 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e60c341e80 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e60c3487e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e60c3487e8
| | `-ParmVarDecl 0x55e60c3488f8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e60c348998 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e60c348998
| | `-ParmVarDecl 0x55e60c348aa8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e60c416060 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e60c341ef8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e60c341f98 <col:38> "" ""
|-CXXMethodDecl 0x55e60c342028 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e60c3420c8 <col:44> "" ""
|-AccessSpecDecl 0x55e60c342138 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e60c342160 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e60c342260 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e60c3422b0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c342240 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e60c342220 <col:27> 'int' 4
|-FieldDecl 0x55e60c342368 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e60c342518 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e60c3425d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e60c342650 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e60c3426b8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e60c342808 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e60c342748 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e60c3429b8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e60c3428c8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e60c342b98 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e60c342a78 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e60c342af8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e60c342e40 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c342c60 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e60c342ce0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e60c342d58 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e60c342ef8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e60c342fc0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e60c343010 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e60c343060 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e60c343240 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e60c3430f0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e60c343168 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c3434e8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e60c343308 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e60c343388 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e60c343400 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c343708 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e60c3435b8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e60c343638 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e60c343a40 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e60c3437c8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e60c343848 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e60c3438c0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e60c343940 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e60c343c28 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e60c343b10 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e60c343b90 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e60c343d78 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e60c343ce8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e60c3440f8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e60c343e38 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e60c343eb8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e60c343f30 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e60c343fb0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e60c344210 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetIP6DSCP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint32_t _dscp
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c34d5d0 <../elements/ip6/setip6dscp.hh:21:1, line:43:1> line:21:7 class SetIP6DSCP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e60c34d728 <col:1, col:7> col:7 implicit referenced class SetIP6DSCP
|-AccessSpecDecl 0x55e60c34d7b8 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x55e60c34d840 <line:23:5, col:16> col:5 SetIP6DSCP 'void ()'
|-CXXDestructorDecl 0x55e60c34d930 <line:24:5, col:17> col:5 ~SetIP6DSCP 'void ()' noexcept-unevaluated 0x55e60c34d930
| `-Overrides: [ 0x55e60c334258 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55e60c34da60 <line:26:5, col:59> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55e60c3356b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e60c34e9f8 <col:36, col:59>
|   `-ReturnStmt 0x55e60c34e9e8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e60c34e9d0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e60c34e9a8 <col:45> 'const char [11]' lvalue "SetIP6DSCP"
|-CXXMethodDecl 0x55e60c34db28 <line:27:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55e60c335780 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e60c34ea58 <col:36, col:56>
|   `-ReturnStmt 0x55e60c34ea48 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e60c34ea30 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e60c34ea10 <col:45> 'const char []' lvalue Var 0x55e60c335a30 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55e60c34dc48 <line:29:5, col:55> col:13 dscp 'uint8_t () const'
| `-CompoundStmt 0x55e60c34ebd8 <col:26, col:55>
|   `-ReturnStmt 0x55e60c34ebc8 <col:28, col:51>
|     `-ImplicitCastExpr 0x55e60c34ebb0 <col:35, col:51> 'uint8_t':'unsigned char' <IntegralCast>
|       `-BinaryOperator 0x55e60c34eb90 <col:35, col:51> 'uint32_t':'unsigned int' '>>'
|         |-CallExpr 0x55e60c34eb30 <col:35, col:46> 'uint32_t':'unsigned int'
|         | |-ImplicitCastExpr 0x55e60c34eb18 <col:35> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55e60c34eaf8 <col:35> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e60c073b20 'ntohl' 'uint32_t (uint32_t) throw()'
|         | `-ImplicitCastExpr 0x55e60c34eb58 <col:41> 'uint32_t':'unsigned int' <LValueToRValue>
|         |   `-MemberExpr 0x55e60c34eac8 <col:41> 'const uint32_t':'const unsigned int' lvalue ->_dscp 0x55e60c34e5f8
|         |     `-CXXThisExpr 0x55e60c34eab8 <col:41> 'const SetIP6DSCP *' implicit this
|         `-IntegerLiteral 0x55e60c34eb70 <col:51> 'int' 22
|-CXXMethodDecl 0x55e60c34df20 <line:31:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e60c336f50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e60c34ddd0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e60c34de48 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c34dff0 <line:32:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55e60c3399a0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55e60c34ec10 <col:39, col:54>
|   `-ReturnStmt 0x55e60c34ec00 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55e60c34ebf0 <col:48> 'bool' true
|-CXXMethodDecl 0x55e60c34e0b0 <line:33:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55e60c337020 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55e60c34e1f0 <line:35:5, col:38> col:20 smaction 'Packet *(Packet *)' inline
| `-ParmVarDecl 0x55e60c34e160 <col:29, col:37> col:37 p 'Packet *'
|-CXXMethodDecl 0x55e60c34e3c0 <line:36:5, col:34> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55e60c334528 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55e60c34e2b0 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x55e60c34e328 <col:25, col:33> col:33 p 'Packet *'
|-CXXMethodDecl 0x55e60c34e518 <line:37:5, col:26> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55e60c3346b8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55e60c34e488 <col:18, col:22> col:22 port 'int'
|-AccessSpecDecl 0x55e60c34e5c0 <line:39:3, col:10> col:3 private
|-FieldDecl 0x55e60c34e5f8 <line:41:5, col:14> col:14 referenced _dscp 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55e60c34e678 <line:21:7> col:7 implicit SetIP6DSCP 'void (const SetIP6DSCP &)' inline default_delete noexcept-unevaluated 0x55e60c34e678
| `-ParmVarDecl 0x55e60c34e788 <col:7> col:7 'const SetIP6DSCP &'
`-CXXMethodDecl 0x55e60c34e828 <col:7> col:7 implicit operator= 'SetIP6DSCP &(const SetIP6DSCP &)' inline default_delete noexcept-unevaluated 0x55e60c34e828
  `-ParmVarDecl 0x55e60c34e938 <col:7> col:7 'const SetIP6DSCP &'

Layout: <CGRecordLayout
  LLVMType:%class.SetIP6DSCP = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.SetIP6DSCP = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c103e80 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e60c103f98 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e60c104038 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e60c104098 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e60c1040f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e60c1041a8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c1044b0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c1045c8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e60c104670 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e60c1046d8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e60c104768 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e60c10a800 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e60c10ac38 <col:12>
|-CXXConstructorDecl 0x55e60c10a908 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c10aa18 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e60c104670 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e60c10d1c0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e60c10d190 <col:12> 'const char *const' lvalue .data 0x55e60c104670
| |     `-DeclRefExpr 0x55e60c10d170 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e60c1046d8 'length' 'int'
| | `-ImplicitCastExpr 0x55e60c10d250 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e60c10d220 <col:12> 'const int' lvalue .length 0x55e60c1046d8
| |     `-DeclRefExpr 0x55e60c10d200 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e60c104768 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e60c10d2e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e60c10d2b0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e60c104768
| |     `-DeclRefExpr 0x55e60c10d290 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e60c10d338 <col:12>
|-CXXConstructorDecl 0x55e60c10aab8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e60c10aab8
| `-ParmVarDecl 0x55e60c10abc8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e60c110120 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e60c11bb38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c11bc48 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e60c11c160 <col:12>
|   |-BinaryOperator 0x55e60c11bf78 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e60c11bf30 <col:12> 'const char *' lvalue ->data 0x55e60c104670
|   | | `-CXXThisExpr 0x55e60c11bf20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e60c11bf60 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c11bef0 <col:12> 'const char *const' lvalue .data 0x55e60c104670
|   |     `-DeclRefExpr 0x55e60c11bed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e60c11c040 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e60c11bff8 <col:12> 'int' lvalue ->length 0x55e60c1046d8
|   | | `-CXXThisExpr 0x55e60c11bfe8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e60c11c028 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c11bfb8 <col:12> 'const int' lvalue .length 0x55e60c1046d8
|   |     `-DeclRefExpr 0x55e60c11bf98 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e60c11c108 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e60c11c0c0 <col:12> 'String::memo_t *' lvalue ->memo 0x55e60c104768
|   | | `-CXXThisExpr 0x55e60c11c0b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e60c11c0f0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c11c080 <col:12> 'String::memo_t *const' lvalue .memo 0x55e60c104768
|   |     `-DeclRefExpr 0x55e60c11c060 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e60c11c150 <col:12>
|     `-UnaryOperator 0x55e60c11c138 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c11c128 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e60c11bcb8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e60c11bcb8
  `-ParmVarDecl 0x55e60c11bdc8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c0fb3f0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e60c0fb508 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e60c0fb598 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e60c0fb5d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e60bdcffd0 'const char *'
|   `-QualType 0x55e60bdcf521 'const char' const
|     `-BuiltinType 0x55e60bdcf520 'char'
|-TypedefDecl 0x55e60c0fb660 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e60c0fb630 'String::const_iterator' sugar
|   |-Typedef 0x55e60c0fb5d8 'const_iterator'
|   `-PointerType 0x55e60bdcffd0 'const char *'
|     `-QualType 0x55e60bdcf521 'const char' const
|       `-BuiltinType 0x55e60bdcf520 'char'
|-TypedefDecl 0x55e60c0fb7d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e60c0fb740 'int (String::*)() const'
|   |-RecordType 0x55e60c0fb480 'String'
|   | `-CXXRecord 0x55e60c0fb3f0 'String'
|   `-ParenType 0x55e60c0fb6e0 'int () const' sugar
|     `-FunctionProtoType 0x55e60c0d0280 'int () const' const cdecl
|       `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c0fb838 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e60bf24a20 'int64_t' sugar
|   |-Typedef 0x55e60be38390 'int64_t'
|   `-TypedefType 0x55e60be11630 '__int64_t' sugar
|     |-Typedef 0x55e60be11208 '__int64_t'
|     `-BuiltinType 0x55e60bdcf5a0 'long'
|-TypedefDecl 0x55e60c0fb8a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e60bf24940 'uint64_t' sugar
|   |-Typedef 0x55e60be38530 'uint64_t'
|   `-TypedefType 0x55e60be116c0 '__uint64_t' sugar
|     |-Typedef 0x55e60be11278 '__uint64_t'
|     `-BuiltinType 0x55e60bdcf640 'unsigned long'
|-TypedefDecl 0x55e60c0fb930 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e60c0fb900 'String::intmax_t' sugar
|   |-Typedef 0x55e60c0fb838 'intmax_t'
|   `-TypedefType 0x55e60bf24a20 'int64_t' sugar
|     |-Typedef 0x55e60be38390 'int64_t'
|     `-TypedefType 0x55e60be11630 '__int64_t' sugar
|       |-Typedef 0x55e60be11208 '__int64_t'
|       `-BuiltinType 0x55e60bdcf5a0 'long'
|-TypedefDecl 0x55e60c0fb9c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e60c0fb990 'String::uintmax_t' sugar
|   |-Typedef 0x55e60c0fb8a0 'uintmax_t'
|   `-TypedefType 0x55e60bf24940 'uint64_t' sugar
|     |-Typedef 0x55e60be38530 'uint64_t'
|     `-TypedefType 0x55e60be116c0 '__uint64_t' sugar
|       |-Typedef 0x55e60be11278 '__uint64_t'
|       `-BuiltinType 0x55e60bdcf640 'unsigned long'
|-CXXConstructorDecl 0x55e60c0fba80 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e60c0fbc28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e60c0fbb68 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e60c0fbdd8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e60c0fbd18 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e60c0fbf30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e60c0fbea0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e60c0fc148 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e60c0fbff8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e60c0fc078 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e60c0fc368 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e60c0fc218 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e60c0fc298 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e60c0fc588 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e60c0fc438 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e60c0fc4b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e60c0fc7a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e60c0fc658 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e60c0fc6d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e60c0fc938 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e60c0fc870 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e60c0fcab8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e60c0fc9f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e60c0fcc48 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e60c0fcb80 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e60c0fcda0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e60c0fcd10 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e60c0fcef8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e60c0fce68 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e60c0fd050 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e60c0fcfc0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e60c0fd1d8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e60c0fd118 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e60c0fd368 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e60c0fd2a0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e60c0fd4f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e60c0fd430 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e60c0fd688 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e60c0fd5c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e60c0fd780 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e60c0fd8a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e60c0fda28 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e60c0fd960 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e60c0fdb78 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e60c0fdae8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e60c0fdc30 <col:63> "" ""
|-CXXMethodDecl 0x55e60c0fdd78 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e60c0fdcb8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e60c0fdf88 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e60c0fde38 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e60c0fdeb8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e60c0fe1a8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e60c0fe050 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e60c0fe0d0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e60c0fe488 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e60c0fe268 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e60c0fe2e8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e60c10a2d0 <col:55> 'int' 10
| `-ParmVarDecl 0x55e60c0fe360 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e60c10a2f0 <col:76> 'bool' true
|-CXXMethodDecl 0x55e60c0fe768 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e60c0fe550 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e60c0fe5d0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e60c10a300 <col:56> 'int' 10
| `-ParmVarDecl 0x55e60c0fe648 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e60c10a320 <col:77> 'bool' true
|-CXXMethodDecl 0x55e60c0fe870 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e60c0fe938 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e60c0fea00 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e60c0feaa0 <col:20>
| `-OptimizeNoneAttr 0x55e60c0feaf8 <col:30>
|-CXXConversionDecl 0x55e60c0febe8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e60c0fecb8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e60c0fed78 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e60c0fee68 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e60c0fef28 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e60c0ff0a8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e60c0fefe0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e60c0ff1f8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e60c0ff168 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e60c0ff2e8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e60c0ff3a8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e60c0ff5f8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e60c0ff460 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e60c0ff4e0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e60c0ff858 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e60c0ff6c0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e60c0ff740 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e60c0ff928 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c0ffb38 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e60c0ff9e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e60c0ffa60 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e60c0ffd58 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e60c0ffc00 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e60c0ffc80 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e60c0ffee8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e60c0ffe20 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e60c0fffd8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e60c100148 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e60c100088 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e60c100358 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e60c100208 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e60c100288 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e60c100570 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e60c100418 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e60c100490 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e60c100700 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e60c100630 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e60c100920 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e60c1007c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e60c100840 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e60c100a70 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e60c1009e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e60c100c48 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e60c100b30 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e60c100bb0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e60c100d98 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e60c100d08 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e60c100fb0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e60c100e50 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e60c100ed0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e60c10a330 <col:39> 'int' 0
|-CXXMethodDecl 0x55e60c1011d0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e60c101070 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e60c1010f0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e60c10a350 <col:48> 'int' 0
|-CXXMethodDecl 0x55e60c1013b0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e60c101290 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e60c101310 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e60c10a370 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e60c101480 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e60c101540 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e60c101600 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e60c1016c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e60c101780 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e60c101928 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e60c101830 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e60c101aa8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e60c1019e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e60c101c80 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e60c101b68 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e60c101df8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e60c101d38 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e60c101f40 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e60c101eb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e60c102090 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e60c102000 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e60c102268 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e60c102150 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e60c1021d0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e60c102448 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e60c102330 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e60c1023b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e60c102598 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e60c102508 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e60c1027a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e60c102658 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e60c1026d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e60c102908 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e60c102870 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e60c102a60 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e60c1029c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e60c102b08 <col:57> "" ""
|-CXXMethodDecl 0x55e60c102c18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e60c102b88 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e60c102d68 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e60c102cd8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e60c102ee8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e60c102e20 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e60c102fb0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e60c103070 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e60c103130 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e60c1031d0 <col:49> "" ""
|-CXXMethodDecl 0x55e60c103260 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e60c103320 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e60c103410 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e60c1034d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e60c103598 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e60c103658 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e60c103750 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e60c103818 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e60c1038e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e60c103ab8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e60c103998 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e60c103a18 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e60c103ce0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e60c103b80 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e60c103c00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e60c103df0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e60c103e58 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e60c103e80 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e60c103f98 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e60c104038 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e60c104098 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e60c1040f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e60c1041a8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e60c104210 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e60c104448 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e60c104498 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c104428 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e60c104338 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e60c1042e0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e60c104320 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e60c104300 <col:32> 'int' 8
|-CXXRecordDecl 0x55e60c1044b0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e60c1045c8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e60c104670 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e60c1046d8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e60c104768 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e60c10a800 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e60c10ac38 <col:12>
| |-CXXConstructorDecl 0x55e60c10a908 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e60c10aa18 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e60c104670 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e60c10d1c0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e60c10d190 <col:12> 'const char *const' lvalue .data 0x55e60c104670
| | |     `-DeclRefExpr 0x55e60c10d170 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e60c1046d8 'length' 'int'
| | | `-ImplicitCastExpr 0x55e60c10d250 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e60c10d220 <col:12> 'const int' lvalue .length 0x55e60c1046d8
| | |     `-DeclRefExpr 0x55e60c10d200 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e60c104768 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e60c10d2e0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e60c10d2b0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e60c104768
| | |     `-DeclRefExpr 0x55e60c10d290 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c10aa18 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e60c10d338 <col:12>
| |-CXXConstructorDecl 0x55e60c10aab8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e60c10aab8
| | `-ParmVarDecl 0x55e60c10abc8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e60c110120 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e60c11bb38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e60c11bc48 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e60c11c160 <col:12>
| |   |-BinaryOperator 0x55e60c11bf78 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e60c11bf30 <col:12> 'const char *' lvalue ->data 0x55e60c104670
| |   | | `-CXXThisExpr 0x55e60c11bf20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e60c11bf60 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e60c11bef0 <col:12> 'const char *const' lvalue .data 0x55e60c104670
| |   |     `-DeclRefExpr 0x55e60c11bed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e60c11c040 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e60c11bff8 <col:12> 'int' lvalue ->length 0x55e60c1046d8
| |   | | `-CXXThisExpr 0x55e60c11bfe8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e60c11c028 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e60c11bfb8 <col:12> 'const int' lvalue .length 0x55e60c1046d8
| |   |     `-DeclRefExpr 0x55e60c11bf98 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e60c11c108 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e60c11c0c0 <col:12> 'String::memo_t *' lvalue ->memo 0x55e60c104768
| |   | | `-CXXThisExpr 0x55e60c11c0b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e60c11c0f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e60c11c080 <col:12> 'String::memo_t *const' lvalue .memo 0x55e60c104768
| |   |     `-DeclRefExpr 0x55e60c11c060 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e60c11bc48 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e60c11c150 <col:12>
| |     `-UnaryOperator 0x55e60c11c138 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e60c11c128 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e60c11bcb8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e60c11bcb8
|   `-ParmVarDecl 0x55e60c11bdc8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e60c1047e0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e60c104a28 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e60c104848 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e60c1048c8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e60c104940 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e60c10a7c0 <col:79, line:261:5>
|   |-BinaryOperator 0x55e60c10a438 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e60c10a3d0 <col:2, col:5> 'const char *' lvalue .data 0x55e60c104670
|   | | `-MemberExpr 0x55e60c10a3a0 <col:2> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|   | |   `-CXXThisExpr 0x55e60c10a390 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e60c10a420 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e60c10a400 <col:12> 'const char *' lvalue ParmVar 0x55e60c104848 'data' 'const char *'
|   |-BinaryOperator 0x55e60c10a500 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e60c10a498 <col:2, col:5> 'int' lvalue .length 0x55e60c1046d8
|   | | `-MemberExpr 0x55e60c10a468 <col:2> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|   | |   `-CXXThisExpr 0x55e60c10a458 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e60c10a4e8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e60c10a4c8 <col:14> 'int' lvalue ParmVar 0x55e60c1048c8 'length' 'int'
|   `-IfStmt 0x55e60c10a7a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e60c10a620 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e60c10a608 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e60c10a5e8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e60c10a5c8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e60c10a560 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e60c104768
|     |       | `-MemberExpr 0x55e60c10a530 <col:7> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|     |       |   `-CXXThisExpr 0x55e60c10a520 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e60c10a5b0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e60c10a590 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e60c104940 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e60c10a780 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e60c10a768 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e60c10a670 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e60c0f3458 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e60c10a6d8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e60c104038
|         `-ImplicitCastExpr 0x55e60c10a6c0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e60c10a6a0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e60c104940 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e60c104cd8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e60c104af8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e60c104b78 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e60c104bf0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e60c1047e0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e60c10ac48 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e60c10add8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e60c10ad40 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e60c10acb0 <col:2> '<bound member function type>' ->assign_memo 0x55e60c104a28
|     | `-ImplicitCastExpr 0x55e60c10ad78 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e60c10aca0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e60c10ad90 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e60c10ace0 <col:14> 'const char *' lvalue ParmVar 0x55e60c104af8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e60c10ada8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e60c10ad00 <col:20> 'int' lvalue ParmVar 0x55e60c104b78 'length' 'int'
|     `-ImplicitCastExpr 0x55e60c10adc0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c10ad20 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e60c104bf0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e60c104e68 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e60c104da8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e60c10b030 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e60c10afb0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e60c10ae00 <col:2> '<bound member function type>' ->assign_memo 0x55e60c104a28
|     | `-CXXThisExpr 0x55e60c10adf0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e60c10afe8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e60c10ae80 <col:14, col:19> 'const char *' lvalue .data 0x55e60c104670
|     |   `-MemberExpr 0x55e60c10ae50 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e60c1047e0
|     |     `-DeclRefExpr 0x55e60c10ae30 <col:14> 'const String' lvalue ParmVar 0x55e60c104da8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e60c10b000 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e60c10af00 <col:25, col:30> 'int' lvalue .length 0x55e60c1046d8
|     |   `-MemberExpr 0x55e60c10aed0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e60c1047e0
|     |     `-DeclRefExpr 0x55e60c10aeb0 <col:25> 'const String' lvalue ParmVar 0x55e60c104da8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e60c10b018 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e60c10af80 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e60c104768
|         `-MemberExpr 0x55e60c10af50 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e60c1047e0
|           `-DeclRefExpr 0x55e60c10af30 <col:38> 'const String' lvalue ParmVar 0x55e60c104da8 'x' 'const String &'
|-CXXMethodDecl 0x55e60c104f30 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e60c10b9f0 <col:31, line:278:5>
|   `-IfStmt 0x55e60c10b9d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e60c10b0d0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e60c10b0b8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e60c10b088 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e60c104768
|     |     `-MemberExpr 0x55e60c10b058 <col:6> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|     |       `-CXXThisExpr 0x55e60c10b048 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e60c10b9b0 <col:15, line:277:2>
|       |-ParenExpr 0x55e60c10b580 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e60c10b550 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e60c10b1e0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e60c10b1c8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e60c10b1b0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e60c10b170 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e60c104038
|       |   |       `-ImplicitCastExpr 0x55e60c10b158 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e60c10b128 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e60c104768
|       |   |           `-MemberExpr 0x55e60c10b0f8 <col:27> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|       |   |             `-CXXThisExpr 0x55e60c10b0e8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e60c10b240 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e60c10b220 <col:54> 'int' 0
|       |   `-CallExpr 0x55e60c10b4b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e60c10b498 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e60c10b418 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e60c10b4f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e60c10b328 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e60c10b508 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e60c10b358 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e60c10b520 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e60c10b390 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e60c10b538 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e60c10b400 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e60c10b3e8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e60c10b3b0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e60c10b8d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e60c10b790 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e60c10b778 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e60c10b6f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e60c0f48a0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e60c10b6c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e60c104038
|       | |   `-ImplicitCastExpr 0x55e60c10b6a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e60c10b678 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e60c104768
|       | |       `-MemberExpr 0x55e60c10b648 <col:40> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|       | |         `-CXXThisExpr 0x55e60c10b638 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e60c10b890 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e60c10b878 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e60c10b7b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e60c109710 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e60c10b8b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e60c10b818 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e60c104768
|       |       `-MemberExpr 0x55e60c10b7e8 <col:15> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|       |         `-CXXThisExpr 0x55e60c10b7d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e60c10b990 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e60c10b928 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e60c104768
|         | `-MemberExpr 0x55e60c10b8f8 <col:6> 'String::rep_t' lvalue ->_r 0x55e60c1047e0
|         |   `-CXXThisExpr 0x55e60c10b8e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e60c10b978 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e60c10b958 <col:16> 'int' 0
|-CXXMethodDecl 0x55e60c1051c8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e60c104fe8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e60c105068 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e60c1050e0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e60c1052a0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e60c1054f0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e60c105358 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e60c1053d8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e60c105450 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e60c1056d8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e60c1055c0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e60c105640 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e60c1057d8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e60c10bac8 <col:41, line:286:5>
|   `-ReturnStmt 0x55e60c10bab8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e60c10ba88 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e60c10ba50 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e60c10ba38 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e60c10ba18 <col:46> 'int' 1
|-CXXMethodDecl 0x55e60c105a78 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e60c105890 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e60c105910 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e60c105990 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e60c109710 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e60c105b40 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e60c1097e0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e60c1099b0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e60c109898 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e60c109918 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e60c109a70 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e60c109b38 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e60c109c38 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e60c109cb0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e60c109d28 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e60c109d90 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e60c109e90 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e60c109ee0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c109e70 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e60c109e50 <col:22> 'int' 14
|-CXXMethodDecl 0x55e60c10a0f8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e60c109f10 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e60c109f90 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e60c10a010 <col:43> col:46 'int'
|-FriendDecl 0x55e60c10a200 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e60c10a290 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e60c1cefc0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e60c1cf198 prev 0x55e60c1cefc0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e60c1cf228 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e60c1cf250 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c37ca90 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e60c37ca40 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e60c37ca20 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e60c1cf468 'type'
|     `-SubstTemplateTypeParmType 0x55e60c1cf430 'String' sugar
|       |-TemplateTypeParmType 0x55e60c0bfca0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0bfc50 'T'
|       `-RecordType 0x55e60c0fb480 'String'
|         `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37cb48 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e60c37cb10 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e60c37caf0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e60c37ca90 'type'
|     `-ElaboratedType 0x55e60c37ca40 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e60c37ca20 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e60c1cf468 'type'
|         `-SubstTemplateTypeParmType 0x55e60c1cf430 'String' sugar
|           |-TemplateTypeParmType 0x55e60c0bfca0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e60c0bfc50 'T'
|           `-RecordType 0x55e60c0fb480 'String'
|             `-CXXRecord 0x55e60c0fb3f0 'String'
|-CXXMethodDecl 0x55e60c37ccc8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e60c37cbd8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e60c37cdb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e60c37ce98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e60c37ce98
|-CXXMethodDecl 0x55e60c37d168 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e60c37d070 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e60c37d3a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e60c37d220 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c37d298 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37d578 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e60c37d468 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c37d4e0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37d6d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e60c37d7a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e60c37d9f8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e60c37d868 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e60c37d8e0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37dc58 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e60c37dac8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e60c37db40 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37de18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e60c37dd28 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37dfd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e60c37dee0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37e090 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e60c37e140 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e60c37e378 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e60c37e1f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c37e268 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e60c37e618 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e60c37e520 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e60c37e6e0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e60c37e730 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e60c37e780 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e60c336bc0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e60c1cda28 prev 0x55e60c336bc0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e60c1cef30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e60c1ceee0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e60c1ceec0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e60c1ced70 'type'
|     `-SubstTemplateTypeParmType 0x55e60c1cec00 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e60c095610 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e60c0955b8 'F'
|       `-RecordType 0x55e60c1ce860 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e60c1ce780 'typed_array_memory'
|-FieldDecl 0x55e60c37e7d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e60c37e820 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e60c37e858 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|   |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|   `-RecordType 0x55e60c0fb480 'String'
|     `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37e8e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e60c37e8b0 'String &'
|   `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-RecordType 0x55e60c0fb480 'String'
|       `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37e978 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e60c37e940 'const String &'
|   `-QualType 0x55e60c1cdac1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-RecordType 0x55e60c0fb480 'String'
|         `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37ea08 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e60c37e9d0 'String *'
|   `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-RecordType 0x55e60c0fb480 'String'
|       `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37ea98 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e60c37ea60 'const String *'
|   `-QualType 0x55e60c1cdac1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-RecordType 0x55e60c0fb480 'String'
|         `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37f6f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e60c37f6a0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e60c37f680 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e60c37f5b8 'type'
|     `-LValueReferenceType 0x55e60c37f580 'const String &'
|       `-QualType 0x55e60c37f321 'const String' const
|         `-SubstTemplateTypeParmType 0x55e60c37f320 'String' sugar
|           |-TemplateTypeParmType 0x55e60c09f560 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e60c09f508 'T'
|           `-RecordType 0x55e60c0fb480 'String'
|             `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37f758 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e60c37e940 'const String &'
|   `-QualType 0x55e60c1cdac1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-RecordType 0x55e60c0fb480 'String'
|         `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37f7b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c37f818 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e60c37e9d0 'String *'
|   `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-RecordType 0x55e60c0fb480 'String'
|       `-CXXRecord 0x55e60c0fb3f0 'String'
|-TypedefDecl 0x55e60c37f880 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e60c37ea60 'const String *'
|   `-QualType 0x55e60c1cdac1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e60c1cdac0 'String' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-RecordType 0x55e60c0fb480 'String'
|         `-CXXRecord 0x55e60c0fb3f0 'String'
|-EnumDecl 0x55e60c37f8d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e60c37f9d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e60c37f9b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e60c0ce648 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e60c0ce620 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e60c0ce600 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e60c37fa58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e60c37fce8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c37fb10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c37fbb0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e60c37ff78 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e60c37fe60 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e60c380238 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e60c380120 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e60c380550 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e60c380430 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e60c380860 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e60c380740 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e60c380b50 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c380998 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c380a10 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e60c380c78 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e60c380d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c380d80 <col:30> Inherited
|-CXXMethodDecl 0x55e60c380dc8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e60c380e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c380ed0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c380f98 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e60c381048 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3810a0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3810e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e60c381198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3811f0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c381238 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e60c3812e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c381340 <col:30> Inherited
|-CXXMethodDecl 0x55e60c381388 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e60c381438 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c381490 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3814b8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e60c381568 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e60c381618 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e60c3817d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3816c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c381740 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e60c381928 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c381898 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c381ad8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e60c3819e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e60c381b90 <col:20>
| `-OptimizeNoneAttr 0x55e60c381be8 <col:30>
|-CXXMethodDecl 0x55e60c381d08 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e60c381c10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e60c381dc0 <col:20>
| `-OptimizeNoneAttr 0x55e60c381e18 <col:30>
|-CXXMethodDecl 0x55e60c381ed0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c381e40 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c382018 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e60c381f88 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c382148 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e60c382248 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e60c382318 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e60c3823e8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e60c382528 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c382498 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c382670 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e60c3825e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3827b8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e60c382728 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e60c382870 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e60c382970 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e60c3828e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e60c382a28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e60c382ae8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e60c382be8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e60c382d68 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e60c382ca8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e60c383528 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e60c382e20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e60c383488 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e60c383388 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e60c383608 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e60c383780 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e60c3836c8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e60c383838 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e60c383a88 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3838f8 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e60c383970 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e60c383c18 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e60c383b58 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e60c383e28 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e60c383ce0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e60c383d58 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e60c383ee8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e60c384148 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e60c384050 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e60c384218 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e60c384218

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c4055b8 prev 0x55e60c2b37e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e60c4056b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55e60c405740 <col:22, col:28> col:22 public
|-EnumDecl 0x55e60c405768 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55e60c405888 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405868 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55e60c405850 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e60c405830 <col:14> 'int' 999
| |-EnumConstantDecl 0x55e60c405930 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405910 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55e60c4058f8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e60c4058d8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e60c4059c0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c4059a0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55e60c405980 <col:17> 'int' 0
| |-EnumConstantDecl 0x55e60c405a50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405a30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55e60c405a10 <col:13> 'int' 1
| |-EnumConstantDecl 0x55e60c405ae0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405ac0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55e60c405aa0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55e60c405b70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405b50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55e60c405b30 <col:13> 'int' 3
| |-EnumConstantDecl 0x55e60c405c00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405be0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55e60c405bc0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55e60c405c90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405c70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55e60c405c50 <col:14> 'int' 5
| |-EnumConstantDecl 0x55e60c405d20 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e60c405d00 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55e60c405ce0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55e60c405db0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55e60c405d90 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55e60c405d70 <col:13> 'int' 7
|-VarDecl 0x55e60c405e20 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55e60c405ea8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55e60c405f30 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55e60c405fb8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55e60c406040 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55e60c4060c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55e60c406150 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55e60c4061d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55e60c406260 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55e60c4062e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55e60c406370 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55e60c406470 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55e60c40b798 '_nerrors' 'int'
| | `-IntegerLiteral 0x55e60c40bf28 <line:128:13> 'int' 0
| `-CompoundStmt 0x55e60c40bf98 <col:16, line:129:5>
|-CXXDestructorDecl 0x55e60c406560 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55e60c40bfa8 <col:29, line:132:5>
|-CXXMethodDecl 0x55e60c406718 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55e60c406650 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c4067e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e60c4068c8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e60c40c000 <col:44, line:161:5>
|   `-ReturnStmt 0x55e60c40bff0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55e60c40bfd8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c40bfb8 <col:9> 'ErrorHandler *' lvalue Var 0x55e60c40b7f8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c406a08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55e60c406978 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e60c406ad0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e60c40c060 <col:43, line:173:5>
|   `-ReturnStmt 0x55e60c40c050 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55e60c40c038 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c40c018 <col:9> 'ErrorHandler *' lvalue Var 0x55e60c40b870 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55e60c406b88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55e60c406c08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55e60c406d18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55e60c406c88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e60c406e68 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55e60c406dd8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e60c406fc0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55e60c406f28 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407118 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55e60c407080 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407270 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55e60c4071d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407480 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e60c407328 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55e60c4073a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407658 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e60c407540 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55e60c4075c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407878 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e60c407718 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55e60c407798 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407a58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e60c407938 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e60c4079b8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407c38 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e60c407b18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e60c407b98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e60c407dc0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55e60c407cf8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55e60c407f90 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55e60c407e78 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e60c407ef0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55e60c40c2b8 <col:57, line:234:5>
|   `-ReturnStmt 0x55e60c40c2a8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55e60c40c290 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e60c40c238 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e60c40c208 <col:9> '<bound member function type>' ->xmessage 0x55e60c407dc0
|         | `-CXXThisExpr 0x55e60c40c1f8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55e60c40c278 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e60c40c260 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e60c40c1d8 <col:18, col:40> 'String' (CXXTemporary 0x55e60c40c1d8)
|               `-CallExpr 0x55e60c40c1a0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55e60c40c188 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55e60c40c100 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e60c409fc8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55e60c40c120 <col:31> 'const String' lvalue ParmVar 0x55e60c407ef0 'str' 'const String &'
|                 `-DeclRefExpr 0x55e60c40c140 <col:36> 'const String' lvalue ParmVar 0x55e60c407e78 'anno' 'const String &'
|-CXXMethodDecl 0x55e60c408270 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e60c408050 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e60c4080d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55e60c408148 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e60c40c548 <col:68, line:243:5>
|   `-ReturnStmt 0x55e60c40c538 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55e60c40c520 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e60c40c4c0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e60c40c490 <col:9> '<bound member function type>' ->xmessage 0x55e60c407f90
|         | `-CXXThisExpr 0x55e60c40c480 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e60c40c358 <col:18> 'const String' lvalue ParmVar 0x55e60c408050 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e60c40c508 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e60c40c4f0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e60c40c460 <col:24, col:40> 'String' (CXXTemporary 0x55e60c40c460)
|               `-CXXMemberCallExpr 0x55e60c40c3f8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55e60c40c388 <col:24> '<bound member function type>' ->vformat 0x55e60c409490
|                 | `-CXXThisExpr 0x55e60c40c378 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e60c40c428 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e60c40c3b8 <col:32> 'const char *' lvalue ParmVar 0x55e60c4080d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e60c40c440 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e60c40c3d8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e60c408148 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e60c408510 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55e60c408338 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e60c4083b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e60c408428 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55e60c40c888 <col:23, line:254:5>
|   `-ReturnStmt 0x55e60c40c878 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55e60c40c860 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55e60c40c800 <col:9, col:71> 'int'
|         |-MemberExpr 0x55e60c40c7d0 <col:9> '<bound member function type>' ->xmessage 0x55e60c407f90
|         | `-CXXThisExpr 0x55e60c40c7c0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55e60c40c848 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55e60c40c830 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55e60c40c780 <col:18, col:65> 'String' (CXXTemporary 0x55e60c40c780)
|         |     `-CallExpr 0x55e60c40c718 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55e60c40c700 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55e60c40c5e8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e60c409fc8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55e60c40c608 <col:31> 'const String' lvalue ParmVar 0x55e60c4083b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55e60c40c760 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55e60c40c748 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55e60c40c6e0 <col:37, col:64> 'String' (CXXTemporary 0x55e60c40c6e0)
|         |             `-CallExpr 0x55e60c40c6b0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55e60c40c698 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55e60c40c628 <col:37> 'String (const String &)' lvalue CXXMethod 0x55e60c40a618 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55e60c40c648 <col:56> 'const String' lvalue ParmVar 0x55e60c408338 'landmark' 'const String &'
|         `-DeclRefExpr 0x55e60c40c7a0 <col:68> 'const String' lvalue ParmVar 0x55e60c408428 'str' 'const String &'
|-CXXMethodDecl 0x55e60c408890 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e60c4085d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e60c408650 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e60c4086d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55e60c408748 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e60c40cb40 <col:34, line:267:5>
|   `-ReturnStmt 0x55e60c40cb30 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55e60c40cb18 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55e60c40cab0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55e60c40ca80 <col:9> '<bound member function type>' ->xmessage 0x55e60c408510
|         | `-CXXThisExpr 0x55e60c40ca70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e60c40c928 <col:18> 'const String' lvalue ParmVar 0x55e60c4085d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55e60c40c948 <col:28> 'const String' lvalue ParmVar 0x55e60c408650 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e60c40cb00 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e60c40cae8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e60c40ca50 <col:34, col:50> 'String' (CXXTemporary 0x55e60c40ca50)
|               `-CXXMemberCallExpr 0x55e60c40c9e8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55e60c40c978 <col:34> '<bound member function type>' ->vformat 0x55e60c409490
|                 | `-CXXThisExpr 0x55e60c40c968 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e60c40ca18 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e60c40c9a8 <col:42> 'const char *' lvalue ParmVar 0x55e60c4086d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e60c40ca30 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e60c40c9c8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e60c408748 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e60c4089a0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55e60c40cbc0 <col:25, line:288:5>
|   `-ReturnStmt 0x55e60c40cbb0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55e60c40cb98 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55e60c40cb68 <col:9> 'const int' lvalue ->_nerrors 0x55e60c40b798
|         `-CXXThisExpr 0x55e60c40cb58 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e60c408bb0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55e60c408a58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55e60c408ad8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55e60c408ed0 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e60c408c78 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55e60c408cf8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55e60c408d70 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e60c409070 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55e60c408fa0 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55e60c4092b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e60c409130 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55e60c4091a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e60c40ce20 <col:58, line:357:5>
|   `-ReturnStmt 0x55e60c40ce10 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55e60c40cdf8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55e60c40cdc8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55e60c40cdb0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55e60c40cd90 <col:9, col:29> 'String' (CXXTemporary 0x55e60c40cd90)
|             `-CallExpr 0x55e60c40cd20 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55e60c40cd08 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55e60c40cc88 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55e60c408ed0 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55e60c40cc28 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55e60c40cd58 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55e60c40cc48 <col:21> 'const char *' lvalue ParmVar 0x55e60c409130 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55e60c40cd70 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55e60c40cc68 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e60c4091a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e60c409490 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55e60c409380 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55e60c4093f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e60c4095e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55e60c409558 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55e60c409730 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55e60c4096a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55e60c4099d0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55e60c4097e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55e60c409868 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55e60c4098e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55e60c409b30 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55e60c409aa0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55e60c40cf38 <col:37, line:441:5>
|   `-IfStmt 0x55e60c40cf20 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55e60c40cea8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55e60c40ce78 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55e60c40ce38 <col:6> 'int' lvalue ParmVar 0x55e60c409aa0 'level' 'int'
|     | `-ImplicitCastExpr 0x55e60c40ce90 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55e60c40ce58 <col:15> 'ErrorHandler::Level' EnumConstant 0x55e60c405b70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55e60c40cf08 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55e60c40ced8 <col:8> 'int' lvalue ->_nerrors 0x55e60c40b798
|         `-CXXThisExpr 0x55e60c40cec8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e60c409bf8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55e60c40cfd0 <col:26, line:448:5>
|   `-BinaryOperator 0x55e60c40cfb0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55e60c40cf60 <col:2> 'int' lvalue ->_nerrors 0x55e60c40b798
|     | `-CXXThisExpr 0x55e60c40cf50 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55e60c40cf90 <col:13> 'int' 0
|-CXXMethodDecl 0x55e60c409dc0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55e60c409cb0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55e60c409d28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55e60c409fc8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55e60c409e80 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55e60c409ef8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55e60c40a278 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55e60c40a088 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55e60c40a108 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55e60c40a188 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55e60c40a330 <col:59> 0 0
|-CXXMethodDecl 0x55e60c40a4c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55e60c40a3a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55e60c40a428 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55e60c40d640 <col:70, line:534:5>
|   |-DeclStmt 0x55e60c40d140 <line:528:2, col:20>
|   | |-VarDecl 0x55e60c40cff8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55e60c40d060 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55e60c40d098 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55e60c40d100 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55e60c40d210 <line:529:2, col:23>
|   | `-VarDecl 0x55e60c40d170 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55e60c40d1f8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55e60c40d1d8 <col:18> 'const char *' lvalue ParmVar 0x55e60c40a3a8 'begin' 'const char *'
|   |-DoStmt 0x55e60c40d5d8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55e60c40d508 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55e60c40d4f0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55e60c40d4d0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55e60c40d228 <col:6> 'const char *' lvalue Var 0x55e60c40d170 'x' 'const char *'
|   | |     `-CallExpr 0x55e60c40d420 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55e60c40d408 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55e60c40d3c0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55e60c40bc70 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55e60c40d488 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55e60c40d470 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55e60c40d2e0 <col:20, col:27> 'String' (CXXTemporary 0x55e60c40d2e0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55e60c40d2a8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55e60c40d4a0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e60c40d300 <col:30> 'const char *' lvalue Var 0x55e60c40d170 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55e60c40d4b8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e60c40d320 <col:33> 'const char *' lvalue ParmVar 0x55e60c40a428 'end' 'const char *'
|   | |       |-UnaryOperator 0x55e60c40d360 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e60c40d340 <col:39> 'String' lvalue Var 0x55e60c40cff8 'name' 'String'
|   | |       |-UnaryOperator 0x55e60c40d398 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e60c40d378 <col:46> 'String' lvalue Var 0x55e60c40d098 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55e60c40d3b0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55e60c40d5c0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55e60c40d5a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55e60c40d588 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55e60c40d558 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|   |         `-ImplicitCastExpr 0x55e60c40d540 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55e60c40d520 <col:11> 'String' lvalue Var 0x55e60c40cff8 'name' 'String'
|   `-ReturnStmt 0x55e60c40d630 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55e60c40d618 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c40d5f8 <col:9> 'const char *' lvalue Var 0x55e60c40d170 'x' 'const char *'
|-CXXMethodDecl 0x55e60c40a618 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55e60c40a588 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55e60c40dc48 <col:55, line:550:5>
|   `-IfStmt 0x55e60c40dc20 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55e60c40d880 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55e60c40d868 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e60c40d850 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e60c40d830 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e60c40d800 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|     | |       `-DeclRefExpr 0x55e60c40d6a0 <col:6> 'const String' lvalue ParmVar 0x55e60c40a588 'x' 'const String &'
|     | `-BinaryOperator 0x55e60c40d7e0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55e60c40d7b0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55e60c40d760 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55e60c40d748 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55e60c40d700 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55e60c118420 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55e60c40d6c0 <col:11> 'const String' lvalue ParmVar 0x55e60c40a588 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55e60c40d6e0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55e60c40d7c8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55e60c40d798 <col:19> 'char' 123
|     |-ReturnStmt 0x55e60c40d8f0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55e60c40d8c0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55e60c40d8a0 <col:13> 'const String' lvalue ParmVar 0x55e60c40a588 'x' 'const String &'
|     `-IfStmt 0x55e60c40dbf8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55e60c40d988 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e60c40d970 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e60c40d950 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e60c40d920 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |       `-DeclRefExpr 0x55e60c40d900 <col:11> 'const String' lvalue ParmVar 0x55e60c40a588 'x' 'const String &'
|       |-ReturnStmt 0x55e60c40db10 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55e60c40daf8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55e60c40dac8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55e60c40dab0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55e60c40da90 <col:13, col:29> 'String' (CXXTemporary 0x55e60c40da90)
|       |         `-CallExpr 0x55e60c40da40 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55e60c40da28 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55e60c40d9a0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55e60c409dc0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55e60c40da70 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55e60c40d9c0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55e60c40d9e0 <col:28> 'const String' lvalue ParmVar 0x55e60c40a588 'x' 'const String &'
|       `-ReturnStmt 0x55e60c40dbe8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55e60c40dbd0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55e60c40dba0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55e60c40db88 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55e60c40db68 <col:13, col:20> 'String' (CXXTemporary 0x55e60c40db68)
|                 `-CXXTemporaryObjectExpr 0x55e60c40db30 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55e60c40a7e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55e60c40a6d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55e60c40a748 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e60c40bf18 <col:71> 'bool' false
|-CXXRecordDecl 0x55e60c40a890 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55e60c40ab88 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55e60c40ab20 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55e60c40aac0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55e60c40aa80 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55e60c0fb480 'String'
|       | `-CXXRecord 0x55e60c0fb3f0 'String'
|       |-BuiltinType 0x55e60bdcf580 'int'
|       `-DecayedType 0x55e60c2b4830 '__va_list_tag *' sugar
|         |-TypedefType 0x55e60c2b4800 'va_list' sugar
|         | |-Typedef 0x55e60bfed100 'va_list'
|         | `-TypedefType 0x55e60bfed0b0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55e60bf24cd8 '__gnuc_va_list'
|         |   `-TypedefType 0x55e60bf24c40 '__builtin_va_list' sugar
|         |     |-Typedef 0x55e60be10d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55e60be10ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55e60bdd02d0 '__va_list_tag'
|         |         `-CXXRecord 0x55e60bdd0238 '__va_list_tag'
|         `-PointerType 0x55e60bff29a0 '__va_list_tag *'
|           `-RecordType 0x55e60bdd02d0 '__va_list_tag'
|             `-CXXRecord 0x55e60bdd0238 '__va_list_tag'
|-EnumDecl 0x55e60c40abe0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55e60c40ace0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b240 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40acc0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55e60c40aca0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55e60c40ad70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b258 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40ad50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55e60c40ad30 <col:21> 'int' 2
| |-EnumConstantDecl 0x55e60c40ae00 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b270 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40ade0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55e60c40adc0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55e60c40ae90 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b288 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40ae70 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55e60c40ae50 <col:17> 'int' 8
| |-EnumConstantDecl 0x55e60c40af20 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b2a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40af00 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55e60c40aee0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55e60c40afb0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b2b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40af90 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e60c40af70 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e60c40b040 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b2d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40b020 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55e60c40b000 <col:17> 'int' 64
| |-EnumConstantDecl 0x55e60c40b0d0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b2e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40b0b0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55e60c40b090 <col:14> 'int' 128
| |-EnumConstantDecl 0x55e60c40b160 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e60c40b300 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c40b140 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55e60c40b120 <col:16> 'int' 256
| `-EnumConstantDecl 0x55e60c40b1f0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55e60c40b318 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c40b1d0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55e60c40b1b0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55e60c40b528 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55e60c40b340 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55e60c40b3e0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55e60c40b6b0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55e60c40b5e8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55e60c40b758 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55e60c40b798 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55e60c40b7f8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55e60c40b870 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55e60c40bc70 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55e60c40b8e8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55e60c40b968 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55e60c40b9e8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55e60c40ba60 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55e60c40bad8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55e60c40bb50 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55e60c40bd98 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55e60c40bd98
| `-ParmVarDecl 0x55e60c40bea8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55e60c40dfa8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55e60c40dfa8
  `-ParmVarDecl 0x55e60c40e0b8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c2b3878 prev 0x55e60c2f66d8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c2b3970 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e60c2b3a00 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e60c2b3b38 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e60c2b3a38 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e60c2b4f60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c2b4f40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e60c2b4ad8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e60c2b4ff0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e60c2b4fb0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e60c2b3a38 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e60c2b4b40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e60c2b5070 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c2b5030 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e60c2b4ba0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e60c2b50b0 <col:54> 'bool' false
| `-CompoundStmt 0x55e60c2b51b8 <col:61, line:38:5>
|   `-BinaryOperator 0x55e60c2b5198 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e60c2b5130 <col:9> 'const Element *' lvalue ->_context 0x55e60c2b4a78
|     | `-CXXThisExpr 0x55e60c2b5120 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e60c2b5180 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e60c2b5160 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e60c2b3d48 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c2b3bf8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e60c2b3c70 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e60c2b4f98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c2b4f78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e60c2b4a78 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e60c2b5210 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e60c2b51d0 <col:20> 'const Element *' lvalue ParmVar 0x55e60c2b3bf8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e60c2b4ad8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e60c2b5290 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e60c2b5250 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e60c2b3c70 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e60c2b4b40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e60c2b5310 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e60c2b52d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e60c2b4ba0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e60c2b5350 <col:73> 'bool' false
| `-CompoundStmt 0x55e60c2b53c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55e60c2b3e78 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e60c2b5440 <col:36, line:51:5>
|   `-ReturnStmt 0x55e60c2b5430 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e60c2b5418 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e60c2b53e8 <col:16> 'const Element *const' lvalue ->_context 0x55e60c2b4a78
|         `-CXXThisExpr 0x55e60c2b53d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e60c2b3f68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e60c2b54c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55e60c2b54b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e60c2b5498 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e60c2b5468 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e60c2b4ad8
|         `-CXXThisExpr 0x55e60c2b5458 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e60c2b4028 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e60c2b41b0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e60c2b40e0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e60c2b4300 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e60c2b4270 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e60c2b4450 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e60c2b43c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e60c2b4658 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e60c2b4508 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e60c2b4580 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e60c2b4988 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e60c2b4718 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e60c2b4798 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e60c2b4860 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e60c2b4a40 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e60c2b4a78 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e60c2b4ad8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e60c2b4b40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e60c2b4ba0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e60c2b4bf0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e60c2b4bf0
| `-ParmVarDecl 0x55e60c2b4d08 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e60c2b4da8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e60c2b4da8
| `-ParmVarDecl 0x55e60c2b4eb8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e60c416b60 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e60c3bed50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e60c3bef28 prev 0x55e60c3bed50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e60c3befb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e60c3befe0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cbfe0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e60c3cbf90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e60c3bf490 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e60c3bf390 'type'
|     `-TemplateSpecializationType 0x55e60c3bf320 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e60c3bf200 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e60c3bf1e0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e60c3bf1c0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e60c3bf300 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e60c3bf220 'char_array'
|-TypedefDecl 0x55e60c3cc098 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e60c3cc060 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e60c3cc040 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e60c3cbfe0 'type'
|     `-ElaboratedType 0x55e60c3cbf90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e60c3bf490 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e60c3bf390 'type'
|         `-TemplateSpecializationType 0x55e60c3bf320 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e60c3bf200 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e60c3bf1e0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e60c3bf1c0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e60c3bf300 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e60c3bf220 'char_array'
|-CXXMethodDecl 0x55e60c3cc218 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e60c3cc128 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e60c3cc308 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e60c3cc3e8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e60c3cc6b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e60c3cc5c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e60c3cc8f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e60c3cc770 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c3cc7e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3ccac8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e60c3cc9b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c3cca30 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3ccc28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e60c3cccf8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e60c3ccf48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e60c3ccdb8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e60c3cce30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3cd1a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e60c3cd018 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e60c3cd090 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3cd368 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e60c3cd278 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3cd528 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e60c3cd430 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3cd5e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e60c3cd690 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e60c3cd8c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e60c3cd740 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e60c3cd7b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e60c3cdb68 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e60c3cda70 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e60c3cdc30 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e60c3cdc80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e60c3cdcd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e60c3bd758 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e60c3bd968 prev 0x55e60c3bd758 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e60c3becc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e60c3bec70 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e60c3bec50 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e60c3beb00 'type'
|     `-SubstTemplateTypeParmType 0x55e60c3be920 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e60c094e90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c094e38 'T'
|       `-RecordType 0x55e60c3be470 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e60c3be388 'sized_array_memory'
|-FieldDecl 0x55e60c3cdd20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e60c3cdd70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e60c3cdda8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|   |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|   `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cde38 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e60c3cde00 'int &'
|   `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cdef8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e60c3cdec0 'const int &'
|   `-QualType 0x55e60c3bda01 'const int' const
|     `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cdf88 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e60c3cdf50 'int *'
|   `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3ce018 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e60c3cdfe0 'const int *'
|   `-QualType 0x55e60c3bda01 'const int' const
|     `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cec00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e60c3cebb0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e60c3ceb90 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e60c3ceb20 'type'
|     `-SubstTemplateTypeParmType 0x55e60c3ce8e0 'int' sugar
|       |-TemplateTypeParmType 0x55e60c09fc90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c09fc40 'T'
|       `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cec68 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e60c3cdec0 'const int &'
|   `-QualType 0x55e60c3bda01 'const int' const
|     `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3cecc0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3ced28 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e60c3cdf50 'int *'
|   `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|     |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|     `-BuiltinType 0x55e60bdcf580 'int'
|-TypedefDecl 0x55e60c3ced90 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e60c3cdfe0 'const int *'
|   `-QualType 0x55e60c3bda01 'const int' const
|     `-SubstTemplateTypeParmType 0x55e60c3bda00 'int' sugar
|       |-TemplateTypeParmType 0x55e60c0ccfc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e60c0ccf68 'T'
|       `-BuiltinType 0x55e60bdcf580 'int'
|-EnumDecl 0x55e60c3cede8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e60c3ceee0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e60c3ceec0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e60c0ce648 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e60c0ce620 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e60c0ce600 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e60c3cef68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e60c3cf1b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3cf020 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c3cf0c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e60c3cf478 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e60c3cf360 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e60c3cf738 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e60c3cf620 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e60c3cfa80 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e60c3cf960 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e60c3cfd90 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e60c3cfc70 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e60c3d0080 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3cfec8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c3cff40 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e60c3d01a8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e60c3d0288 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d02e0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d0328 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e60c3d03d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d0430 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d04f8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e60c3d05a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d0600 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d0648 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e60c3d06f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d0750 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d0798 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e60c3d0848 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d08a0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d08e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e60c3d0998 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e60c3d09f0 <col:30> Inherited
|-CXXMethodDecl 0x55e60c3d0a18 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e60c3d0ac8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e60c3d0b78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e60c3d0d38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3d0c28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e60c3d0ca0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e60c3d0e88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c3d0df8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3d1038 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e60c3d0f40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e60c3d10f0 <col:20>
| `-OptimizeNoneAttr 0x55e60c3d1148 <col:30>
|-CXXMethodDecl 0x55e60c3d1268 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e60c3d1170 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e60c3d1320 <col:20>
| `-OptimizeNoneAttr 0x55e60c3d1378 <col:30>
|-CXXMethodDecl 0x55e60c3d1430 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c3d13a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3d1578 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e60c3d14e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3d16a8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e60c3d17d8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e60c3d18a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e60c3d1978 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e60c3d1ab8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e60c3d1a28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3d1c00 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e60c3d1b70 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e60c3d1d48 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e60c3d1cb8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e60c3d1e00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e60c3d1f00 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e60c3d1e70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e60c3d1fb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e60c3d2078 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e60c3d2178 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e60c3d22f8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e60c3d2238 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e60c3d2ab8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e60c3d23b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e60c3d2a18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e60c3d2918 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e60c3d2b98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e60c3d2ce8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e60c3d2c58 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e60c3d2da0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e60c3d2fe8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e60c3d2e60 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e60c3d2ed8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e60c3d31a8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e60c3d30b8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e60c3d33f8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e60c3d3270 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e60c3d32e8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e60c3d34b8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e60c3d3718 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e60c3d3620 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e60c3d47e0 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c3bb8c8 prev 0x55e60c3a1388 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e60c3bb9c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e60c3bbab0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e60c3e5100 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e60c3bbba0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e60c3e5110 <col:25, line:830:9>
|-CXXMethodDecl 0x55e60c3bbca0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e60c3bbd50 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e60c3bbdf8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e60c3bbdf8
| `-ParmVarDecl 0x55e60c3bbf08 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e60c3bc6c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e60c3bc6c8
  `-ParmVarDecl 0x55e60c3bc7d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c3a1198 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e60c3a12f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e60c3a1388 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e60c3a1440 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e60c3a1548 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e60c3a1478 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e60c3d5d98 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e60c3d5d78 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e60c3a1868 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c3a16e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e60c3a1758 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e60c3d5dd0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e60c3d5db0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e60c3a1a40 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c3a1930 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e60c3a19a8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e60c3d5e08 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e60c3d5de8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e60c3a1df8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e60c3a1be0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e60c3a1c58 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e60c3a1cd0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e60c3d5e40 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e60c3d5e20 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e60c3a1fb8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e60c3a1ef8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e60c3a20b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e60c3a2298 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e60c3a21a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e60c3a2388 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e60c3d61f0 <col:24, line:291:5>
|   `-ReturnStmt 0x55e60c3d61e0 <line:290:9, col:79>
|     `-BinaryOperator 0x55e60c3d61c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e60c3d6098 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e60c3d5ff0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e60c3d5fd0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e60c3d5ec8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e60c3d5eb0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e60c3d5e98 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e60c3d5e68 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e60c3bd6f0
|       | |   |       `-CXXThisExpr 0x55e60c3d5e58 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e60c3d5fb8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e60c3d5fa0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e60c3d5f68 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e60c3d5f38 <col:28, col:35> '<bound member function type>' ->size 0x55e60c3814b8
|       | |           `-ImplicitCastExpr 0x55e60c3d5f88 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e60c3d5f20 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e60c3d5ef0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e60c3bd6f0
|       | |                 `-CXXThisExpr 0x55e60c3d5ee0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e60c3d6080 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e60c3d6068 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e60c3d6050 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e60c3d6020 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e60c3d4920
|       |         `-CXXThisExpr 0x55e60c3d6010 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e60c3d61a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e60c3d6188 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e60c3d6170 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e60c3d6130 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e60c3d6118 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e60c3d60c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e60c3d49d0
|         |     |   `-CXXThisExpr 0x55e60c3d60b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e60c3d60f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e60c3d6150 <col:79> 'int' 0
|-CXXMethodDecl 0x55e60c3a2448 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e60c3d63c8 <col:32, line:296:5>
|   `-ReturnStmt 0x55e60c3d63b8 <line:295:9, col:49>
|     `-BinaryOperator 0x55e60c3d6398 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e60c3d6278 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e60c3d6260 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e60c3d6248 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e60c3d6218 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e60c3d4920
|       |       `-CXXThisExpr 0x55e60c3d6208 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e60c3d6378 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e60c3d6360 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e60c3d6348 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e60c3d6308 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e60c3d62f0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e60c3d62a0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e60c3d49d0
|         |     |   `-CXXThisExpr 0x55e60c3d6290 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e60c3d62d0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e60c3d6328 <col:49> 'int' 0
|-CXXMethodDecl 0x55e60c3a2538 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e60c3d65d8 <col:19, line:306:5>
|   |-IfStmt 0x55e60c3d64f8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e60c3d6438 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e60c3d6420 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e60c3d63f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e60c3bd6f0
|   | |     `-CXXThisExpr 0x55e60c3d63e0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e60c3d64d8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e60c3d64a8 <col:13, col:20> '<bound member function type>' ->clear 0x55e60c383ee8
|   |     `-ImplicitCastExpr 0x55e60c3d6490 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e60c3d6460 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e60c3bd6f0
|   |         `-CXXThisExpr 0x55e60c3d6450 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e60c3d6580 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e60c3d6550 <col:9, col:16> '<bound member function type>' .clear 0x55e60c3d34b8
|   |   `-MemberExpr 0x55e60c3d6520 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e60c3d48c0
|   |     `-CXXThisExpr 0x55e60c3d6510 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e60c3d65c8 <line:305:9, col:17>
|     `-UnaryOperator 0x55e60c3d65b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3d65a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e60c3a27b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e60c3a26c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e60c3a2938 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e60c3a2870 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e60c3a2cb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e60c3a29e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e60c3a2c18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e60c3a2a88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e60c3a2b00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e60c3d68f8 <col:67, line:327:5>
|     |-WhileStmt 0x55e60c3d68a8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e60c3d66c0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e60c3d6640 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e60c2eeba8 0x55e60c138188 0x55e60c137e60 0x55e60c128630 0x55e60c1282e0 0x55e60c127bd0 0x55e60c0fa540 0x55e60c0875d0
|     | | |-DeclRefExpr 0x55e60c3d6600 <col:16> 'Iter' lvalue ParmVar 0x55e60c3a2a88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e60c3d6620 <col:25> 'Iter' lvalue ParmVar 0x55e60c3a2b00 'end' 'Iter'
|     | `-CompoundStmt 0x55e60c3d6888 <col:30, line:325:9>
|     |   |-CallExpr 0x55e60c3d6828 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e60c3d6708 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e60c3d67f8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e60c3d6788 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|     |   |   `-DeclRefExpr 0x55e60c3d6768 <col:24> 'Iter' lvalue ParmVar 0x55e60c3a2a88 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e60c3d6870 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e60c3d6850 <col:15> 'Iter' lvalue ParmVar 0x55e60c3a2a88 'begin' 'Iter'
|     `-ReturnStmt 0x55e60c3d68e8 <line:326:9, col:17>
|       `-UnaryOperator 0x55e60c3d68d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d68c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e60c3a2dc0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e60c3a2d30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e60c3a2f08 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e60c3a2e78 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e60c3a2fd0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e60c3d69d8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e60c3d6978 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e60c3d6928 <col:9> '<bound member function type>' ->reset_from 0x55e60c3d4d48
|   | | `-CXXThisExpr 0x55e60c3d6918 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e60c3d6958 <col:20> 'int' 0
|   `-ReturnStmt 0x55e60c3d69c8 <line:352:9, col:17>
|     `-UnaryOperator 0x55e60c3d69b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3d69a0 <col:17> 'Args *' this
|-VarDecl 0x55e60c3a3088 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e60c3a30f0 <col:38> 'int' 1
|-VarDecl 0x55e60c3a3180 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e60c3a31e8 <col:39> 'int' 2
|-VarDecl 0x55e60c3a3278 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e60c3a32e0 <col:39> 'int' 4
|-VarDecl 0x55e60c3a3370 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e60c3a33d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e60c3a3758 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e60c3a3450 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3a36b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e60c3a3500 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a35a8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d6b30 <col:43, line:371:5>
|     `-ReturnStmt 0x55e60c3d6b20 <line:370:9, col:34>
|       `-CallExpr 0x55e60c3d6ae8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d6a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d6a88 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a3500 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d6aa8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e60c3d6ac8 <col:33> 'T' lvalue ParmVar 0x55e60c3a35a8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a3a88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e60c3a37c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3a39e8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e60c3a3870 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a3918 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d6c80 <col:45, line:375:5>
|     `-ReturnStmt 0x55e60c3d6c70 <line:374:9, col:42>
|       `-CallExpr 0x55e60c3d6c38 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d6b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d6bd8 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a3870 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d6bf8 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e60c3d6c18 <col:41> 'T' lvalue ParmVar 0x55e60c3a3918 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a3db8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e60c3a3af0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3a3d18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e60c3a3ba0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a3c48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d6dd0 <col:45, line:379:5>
|     `-ReturnStmt 0x55e60c3d6dc0 <line:378:9, col:43>
|       `-CallExpr 0x55e60c3d6d88 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d6ca8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d6d28 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a3ba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d6d48 <col:30> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         `-DeclRefExpr 0x55e60c3d6d68 <col:42> 'T' lvalue ParmVar 0x55e60c3a3c48 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a40e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e60c3a3e20 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e60c3a4048 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e60c3a3ed0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e60c3a3f78 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55e60c3d6fd0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55e60c3d6fc0 <line:382:9, col:55>
| |     `-CallExpr 0x55e60c3d6f88 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e60c3d6df8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e60c3d6e78 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a3ed0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55e60c3d6f48 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55e60c3d6ef8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55e60c3d6ed8 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55e60c3d6f30 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55e60c3d6f10 <col:42> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55e60c3d6f68 <col:54> 'T' lvalue ParmVar 0x55e60c3a3f78 'x' 'T &'
| `-CXXMethodDecl 0x55e60c417048 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55e60c416e68 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55e60c416f38 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x55e60c3a44e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e60c3a4150 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3a4448 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e60c3a4200 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a4280 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3a4328 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d7110 <col:54, line:388:5>
|     |-CallExpr 0x55e60c3d7098 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d6fe8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e60c3d7028 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d7038 <col:30> 'const char *' lvalue ParmVar 0x55e60c3a4200 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d7058 <col:39> 'int' lvalue ParmVar 0x55e60c3a4280 'flags' 'int'
|     | `-DeclRefExpr 0x55e60c3d7078 <col:46> 'T' lvalue ParmVar 0x55e60c3a4328 'x' 'T &'
|     `-ReturnStmt 0x55e60c3d7100 <line:387:9, col:17>
|       `-UnaryOperator 0x55e60c3d70e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d70d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3a4998 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e60c3a4558 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3a45d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e60c3a48f8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3a4698 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a4738 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3a47d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d7280 <col:74, line:403:5>
|     `-ReturnStmt 0x55e60c3d7270 <line:402:9, col:56>
|       `-CallExpr 0x55e60c3d7230 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d7140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d71b0 <col:28> 'const char *' lvalue ParmVar 0x55e60c3a4698 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d71d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e60c3d71f0 <col:40> 'T' lvalue ParmVar 0x55e60c3a4738 'x' 'T &'
|         `-DeclRefExpr 0x55e60c3d7210 <col:43> 'const V' lvalue ParmVar 0x55e60c3a47d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e60c3a4e08 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e60c3a4a08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3a4a88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e60c3a4d68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3a4b48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a4be8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3a4c88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d73e8 <col:76, line:407:5>
|     `-ReturnStmt 0x55e60c3d73d8 <line:406:9, col:65>
|       `-CallExpr 0x55e60c3d7398 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d72a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7318 <col:28> 'const char *' lvalue ParmVar 0x55e60c3a4b48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d7338 <col:37> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         |-DeclRefExpr 0x55e60c3d7358 <col:49> 'T' lvalue ParmVar 0x55e60c3a4be8 'x' 'T &'
|         `-DeclRefExpr 0x55e60c3d7378 <col:52> 'const V' lvalue ParmVar 0x55e60c3a4c88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e60c3a5358 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e60c3a4e78 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3a4ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e60c3a52b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3a4fb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a5038 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3a50d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3a5178 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d7550 <col:85, line:412:5>
|     |-CallExpr 0x55e60c3d74d0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d7400 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e60c3d7440 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d7450 <col:37> 'const char *' lvalue ParmVar 0x55e60c3a4fb8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d7470 <col:46> 'int' lvalue ParmVar 0x55e60c3a5038 'flags' 'int'
|     | |-DeclRefExpr 0x55e60c3d7490 <col:53> 'T' lvalue ParmVar 0x55e60c3a50d8 'x' 'T &'
|     | `-DeclRefExpr 0x55e60c3d74b0 <col:56> 'const V' lvalue ParmVar 0x55e60c3a5178 'default_value' 'const V &'
|     `-ReturnStmt 0x55e60c3d7540 <line:411:9, col:17>
|       `-UnaryOperator 0x55e60c3d7528 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d7518 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3a57e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e60c3a53d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a5448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3a5748 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3a5508 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a5580 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a5628 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d76d0 <col:53, line:425:5>
|     `-ReturnStmt 0x55e60c3d76c0 <line:424:9, col:42>
|       `-CallExpr 0x55e60c3d7680 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d7580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7600 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a5508 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d7620 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e60c3d7640 <col:33> 'P' lvalue ParmVar 0x55e60c3a5580 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d7660 <col:41> 'T' lvalue ParmVar 0x55e60c3a5628 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a5c38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e60c3a5858 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a58d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3a5b98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3a5998 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a5a10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a5ab8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d7848 <col:55, line:429:5>
|     `-ReturnStmt 0x55e60c3d7838 <line:428:9, col:50>
|       `-CallExpr 0x55e60c3d77f8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d76f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7778 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a5998 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d7798 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e60c3d77b8 <col:41> 'P' lvalue ParmVar 0x55e60c3a5a10 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d77d8 <col:49> 'T' lvalue ParmVar 0x55e60c3a5ab8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a6088 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e60c3a5ca8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a5d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3a5fe8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3a5de8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a5e60 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a5f08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d79c0 <col:55, line:433:5>
|     `-ReturnStmt 0x55e60c3d79b0 <line:432:9, col:51>
|       `-CallExpr 0x55e60c3d7970 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d7870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d78f0 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a5de8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d7910 <col:30> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         |-DeclRefExpr 0x55e60c3d7930 <col:42> 'P' lvalue ParmVar 0x55e60c3a5e60 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d7950 <col:50> 'T' lvalue ParmVar 0x55e60c3a5f08 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a64d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e60c3a60f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a6178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3a6438 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3a6238 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a62b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a6358 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d7be8 <col:56, line:437:5>
|     `-ReturnStmt 0x55e60c3d7bd8 <line:436:9, col:63>
|       `-CallExpr 0x55e60c3d7b98 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d79e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7a68 <col:21> 'const char *' lvalue ParmVar 0x55e60c3a6238 'keyword' 'const char *'
|         |-BinaryOperator 0x55e60c3d7b38 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e60c3d7ae8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e60c3d7ac8 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e60c3d7b20 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e60c3d7b00 <col:42> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e60c3d7b58 <col:54> 'P' lvalue ParmVar 0x55e60c3a62b0 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d7b78 <col:62> 'T' lvalue ParmVar 0x55e60c3a6358 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3a6a08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e60c3a6548 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a65c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3a6968 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e60c3a6688 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a6708 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3a6780 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a6828 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d7d50 <col:64, line:442:5>
|     |-CallExpr 0x55e60c3d7cd0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d7c00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e60c3d7c40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d7c50 <col:30> 'const char *' lvalue ParmVar 0x55e60c3a6688 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d7c70 <col:39> 'int' lvalue ParmVar 0x55e60c3a6708 'flags' 'int'
|     | |-DeclRefExpr 0x55e60c3d7c90 <col:46> 'P' lvalue ParmVar 0x55e60c3a6780 'parser' 'P'
|     | `-DeclRefExpr 0x55e60c3d7cb0 <col:54> 'T' lvalue ParmVar 0x55e60c3a6828 'x' 'T &'
|     `-ReturnStmt 0x55e60c3d7d40 <line:441:9, col:17>
|       `-UnaryOperator 0x55e60c3d7d28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d7d18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3a7008 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e60c3a6a80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a6af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e60c3a6b78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e60c3a6f68 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3a6c40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3a6cb8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3a6d58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3a6e28 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d7ee8 <col:84, line:458:5>
|     `-ReturnStmt 0x55e60c3d7ed8 <line:457:9, col:64>
|       `-CallExpr 0x55e60c3d7e90 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d7d80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7df0 <col:28> 'const char *' lvalue ParmVar 0x55e60c3a6c40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d7e10 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e60c3d7e30 <col:40> 'P' lvalue ParmVar 0x55e60c3a6cb8 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d7e50 <col:48> 'T' lvalue ParmVar 0x55e60c3a6d58 'x' 'T &'
|         `-DeclRefExpr 0x55e60c3d7e70 <col:51> 'const V' lvalue ParmVar 0x55e60c3a6e28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e60c3aad08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e60c3a7080 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3a70f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e60c3aa8f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e60c3aac68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3aa9c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3aaa38 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3aaad8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3aab78 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d8078 <col:86, line:462:5>
|     `-ReturnStmt 0x55e60c3d8068 <line:461:9, col:73>
|       `-CallExpr 0x55e60c3d8020 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d7f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d7f80 <col:28> 'const char *' lvalue ParmVar 0x55e60c3aa9c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d7fa0 <col:37> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         |-DeclRefExpr 0x55e60c3d7fc0 <col:49> 'P' lvalue ParmVar 0x55e60c3aaa38 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d7fe0 <col:57> 'T' lvalue ParmVar 0x55e60c3aaad8 'x' 'T &'
|         `-DeclRefExpr 0x55e60c3d8000 <col:60> 'const V' lvalue ParmVar 0x55e60c3aab78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e60c3ab368 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e60c3aad80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3aadf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e60c3aae78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e60c3ab2c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3aaf40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3aafc0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3ab038 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ab0d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3ab178 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e60c3d8208 <col:95, line:467:5>
|     |-CallExpr 0x55e60c3d8180 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d8090 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e60c3d80d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d80e0 <col:37> 'const char *' lvalue ParmVar 0x55e60c3aaf40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d8100 <col:46> 'int' lvalue ParmVar 0x55e60c3aafc0 'flags' 'int'
|     | |-DeclRefExpr 0x55e60c3d8120 <col:53> 'P' lvalue ParmVar 0x55e60c3ab038 'parser' 'P'
|     | |-DeclRefExpr 0x55e60c3d8140 <col:61> 'T' lvalue ParmVar 0x55e60c3ab0d8 'x' 'T &'
|     | `-DeclRefExpr 0x55e60c3d8160 <col:64> 'const V' lvalue ParmVar 0x55e60c3ab178 'default_value' 'const V &'
|     `-ReturnStmt 0x55e60c3d81f8 <line:466:9, col:17>
|       `-UnaryOperator 0x55e60c3d81e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d81d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3ab948 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e60c3ab3e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ab468 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3ab4e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3ab8a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3ab5b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ab628 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ab6c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e60c3ab768 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e60c3d83b0 <col:63, line:481:5>
|     `-ReturnStmt 0x55e60c3d83a0 <line:480:9, col:47>
|       `-CallExpr 0x55e60c3d8358 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d82b8 <col:21> 'const char *' lvalue ParmVar 0x55e60c3ab5b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d82d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e60c3d82f8 <col:33> 'P' lvalue ParmVar 0x55e60c3ab628 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d8318 <col:41> 'T1' lvalue ParmVar 0x55e60c3ab6c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e60c3d8338 <col:45> 'T2' lvalue ParmVar 0x55e60c3ab768 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e60c3abec8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e60c3ab9c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3aba38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3abab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3abe28 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3abb80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3abbf8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3abc98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e60c3abd38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e60c3d8550 <col:65, line:485:5>
|     `-ReturnStmt 0x55e60c3d8540 <line:484:9, col:55>
|       `-CallExpr 0x55e60c3d84f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d83d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8458 <col:21> 'const char *' lvalue ParmVar 0x55e60c3abb80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d8478 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e60c3d8498 <col:41> 'P' lvalue ParmVar 0x55e60c3abbf8 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d84b8 <col:49> 'T1' lvalue ParmVar 0x55e60c3abc98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e60c3d84d8 <col:53> 'T2' lvalue ParmVar 0x55e60c3abd38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e60c3ac448 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e60c3abf40 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3abfb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3ac038 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3ac3a8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3ac100 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ac178 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ac218 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e60c3ac2b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e60c3d86f0 <col:65, line:489:5>
|     `-ReturnStmt 0x55e60c3d86e0 <line:488:9, col:56>
|       `-CallExpr 0x55e60c3d8698 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d85f8 <col:21> 'const char *' lvalue ParmVar 0x55e60c3ac100 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d8618 <col:30> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         |-DeclRefExpr 0x55e60c3d8638 <col:42> 'P' lvalue ParmVar 0x55e60c3ac178 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d8658 <col:50> 'T1' lvalue ParmVar 0x55e60c3ac218 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e60c3d8678 <col:54> 'T2' lvalue ParmVar 0x55e60c3ac2b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e60c3ac9c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e60c3ac4c0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ac538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3ac5b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3ac928 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3ac680 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ac6f8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ac798 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e60c3ac838 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e60c3d8940 <col:66, line:493:5>
|     `-ReturnStmt 0x55e60c3d8930 <line:492:9, col:68>
|       `-CallExpr 0x55e60c3d88e8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8798 <col:21> 'const char *' lvalue ParmVar 0x55e60c3ac680 'keyword' 'const char *'
|         |-BinaryOperator 0x55e60c3d8868 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e60c3d8818 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e60c3d87f8 <col:30> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e60c3d8850 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e60c3d8830 <col:42> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e60c3d8888 <col:54> 'P' lvalue ParmVar 0x55e60c3ac6f8 'parser' 'P'
|         |-DeclRefExpr 0x55e60c3d88a8 <col:62> 'T1' lvalue ParmVar 0x55e60c3ac798 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e60c3d88c8 <col:66> 'T2' lvalue ParmVar 0x55e60c3ac838 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e60c3ad028 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e60c3aca40 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3acab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3acb38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3acf88 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3acc00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3acc80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3accf8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3acd98 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e60c3ace38 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e60c3d8ad0 <col:74, line:498:5>
|     |-CallExpr 0x55e60c3d8a48 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d8958 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e60c3d8998 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d89a8 <col:30> 'const char *' lvalue ParmVar 0x55e60c3acc00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d89c8 <col:39> 'int' lvalue ParmVar 0x55e60c3acc80 'flags' 'int'
|     | |-DeclRefExpr 0x55e60c3d89e8 <col:46> 'P' lvalue ParmVar 0x55e60c3accf8 'parser' 'P'
|     | |-DeclRefExpr 0x55e60c3d8a08 <col:54> 'T1' lvalue ParmVar 0x55e60c3acd98 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e60c3d8a28 <col:58> 'T2' lvalue ParmVar 0x55e60c3ace38 'x2' 'T2 &'
|     `-ReturnStmt 0x55e60c3d8ac0 <line:497:9, col:17>
|       `-UnaryOperator 0x55e60c3d8aa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d8a98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3ad388 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e60c3ad0a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3ad2e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e60c3ad160 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ad1d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d8c18 <col:52, line:509:5>
|     `-ReturnStmt 0x55e60c3d8c08 <line:508:9, col:44>
|       `-CallExpr 0x55e60c3d8bd0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8b00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8b70 <col:26> 'const char *' lvalue ParmVar 0x55e60c3ad160 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d8b90 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e60c3d8bb0 <col:38> 'P' lvalue ParmVar 0x55e60c3ad1d8 'parser' 'P'
|-FunctionTemplateDecl 0x55e60c3ad688 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e60c3ad3f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3ad5e8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e60c3ad4a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ad518 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d8d58 <col:54, line:513:5>
|     `-ReturnStmt 0x55e60c3d8d48 <line:512:9, col:52>
|       `-CallExpr 0x55e60c3d8d10 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8c40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8cb0 <col:26> 'const char *' lvalue ParmVar 0x55e60c3ad4a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d8cd0 <col:35> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e60c3d8cf0 <col:46> 'P' lvalue ParmVar 0x55e60c3ad518 'parser' 'P'
|-FunctionTemplateDecl 0x55e60c3ad988 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e60c3ad6f0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3ad8e8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e60c3ad7a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ad818 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d8e98 <col:54, line:517:5>
|     `-ReturnStmt 0x55e60c3d8e88 <line:516:9, col:53>
|       `-CallExpr 0x55e60c3d8e50 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8d80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8df0 <col:26> 'const char *' lvalue ParmVar 0x55e60c3ad7a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d8e10 <col:35> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int'
|         `-DeclRefExpr 0x55e60c3d8e30 <col:47> 'P' lvalue ParmVar 0x55e60c3ad818 'parser' 'P'
|-FunctionTemplateDecl 0x55e60c3adc88 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e60c3ad9f0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3adbe8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e60c3adaa0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3adb18 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d9088 <col:55, line:521:5>
|     `-ReturnStmt 0x55e60c3d9078 <line:520:9, col:65>
|       `-CallExpr 0x55e60c3d9040 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d8ec0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d8f30 <col:26> 'const char *' lvalue ParmVar 0x55e60c3adaa0 'keyword' 'const char *'
|         |-BinaryOperator 0x55e60c3d9000 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e60c3d8fb0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e60c3d8f90 <col:35> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e60c3d8fe8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e60c3d8fc8 <col:47> 'const int' lvalue Var 0x55e60c3a3180 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e60c3d9020 <col:59> 'P' lvalue ParmVar 0x55e60c3adb18 'parser' 'P'
|-FunctionTemplateDecl 0x55e60c3ae058 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e60c3adcf0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3adfb8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e60c3adda0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ade20 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3ade98 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d91c8 <col:63, line:526:5>
|     |-CallExpr 0x55e60c3d9150 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d90a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e60c3d90e0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d90f0 <col:35> 'const char *' lvalue ParmVar 0x55e60c3adda0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e60c3d9110 <col:44> 'int' lvalue ParmVar 0x55e60c3ade20 'flags' 'int'
|     | `-DeclRefExpr 0x55e60c3d9130 <col:51> 'P' lvalue ParmVar 0x55e60c3ade98 'parser' 'P'
|     `-ReturnStmt 0x55e60c3d91b8 <line:525:9, col:17>
|       `-UnaryOperator 0x55e60c3d91a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d9190 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3ae4a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e60c3ae0c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ae148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3ae408 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3ae208 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ae280 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ae328 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9320 <col:58, line:541:5>
|     `-ReturnStmt 0x55e60c3d9310 <line:540:9, col:39>
|       `-CallExpr 0x55e60c3d92d8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d91f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d9278 <col:21> 'const char *' lvalue ParmVar 0x55e60c3ae208 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d9298 <col:30> 'P' lvalue ParmVar 0x55e60c3ae280 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d92b8 <col:38> 'T' lvalue ParmVar 0x55e60c3ae328 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3ae8f8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e60c3ae518 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ae598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3ae858 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3ae658 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ae6d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ae778 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9458 <col:60, line:545:5>
|     `-ReturnStmt 0x55e60c3d9448 <line:544:9, col:41>
|       `-CallExpr 0x55e60c3d9410 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d9348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d93b0 <col:23> 'const char *' lvalue ParmVar 0x55e60c3ae658 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d93d0 <col:32> 'P' lvalue ParmVar 0x55e60c3ae6d0 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d93f0 <col:40> 'T' lvalue ParmVar 0x55e60c3ae778 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3aed48 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e60c3ae968 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ae9e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3aeca8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3aeaa8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3aeb20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3aebc8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9590 <col:60, line:549:5>
|     `-ReturnStmt 0x55e60c3d9580 <line:548:9, col:41>
|       `-CallExpr 0x55e60c3d9548 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d9480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d94e8 <col:23> 'const char *' lvalue ParmVar 0x55e60c3aeaa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d9508 <col:32> 'P' lvalue ParmVar 0x55e60c3aeb20 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d9528 <col:40> 'T' lvalue ParmVar 0x55e60c3aebc8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3af198 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e60c3aedb8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3aee38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3af0f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3aeef8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3aef70 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3af018 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d96c8 <col:61, line:553:5>
|     `-ReturnStmt 0x55e60c3d96b8 <line:552:9, col:42>
|       `-CallExpr 0x55e60c3d9680 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d95b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d9620 <col:24> 'const char *' lvalue ParmVar 0x55e60c3aeef8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d9640 <col:33> 'P' lvalue ParmVar 0x55e60c3aef70 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d9660 <col:41> 'T' lvalue ParmVar 0x55e60c3af018 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3af678 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e60c3af208 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3af288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3af5d8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e60c3af348 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3af3c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3af440 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3af4e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9840 <col:69, line:557:5>
|     `-ReturnStmt 0x55e60c3d9830 <line:556:9, col:46>
|       `-CallExpr 0x55e60c3d97f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d96f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d9770 <col:21> 'const char *' lvalue ParmVar 0x55e60c3af348 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3d9790 <col:30> 'int' lvalue ParmVar 0x55e60c3af3c8 'flags' 'int'
|         |-DeclRefExpr 0x55e60c3d97b0 <col:37> 'P' lvalue ParmVar 0x55e60c3af440 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d97d0 <col:45> 'T' lvalue ParmVar 0x55e60c3af4e8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3af988 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e60c3af6f0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3af8e8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e60c3af7a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3af818 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d9980 <col:56, line:571:5>
|     `-ReturnStmt 0x55e60c3d9970 <line:570:9, col:48>
|       `-CallExpr 0x55e60c3d9938 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d9868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d98d8 <col:30> 'const char *' lvalue ParmVar 0x55e60c3af7a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d98f8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e60c3d9918 <col:42> 'P' lvalue ParmVar 0x55e60c3af818 'parser' 'P'
|-FunctionTemplateDecl 0x55e60c3afd18 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e60c3af9f0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3afc78 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e60c3afaa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3afb20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3afb98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3d9b50 <col:67, line:576:5>
|     |-CallExpr 0x55e60c3d9ad8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d9998 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e60c3d99d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d99e8 <col:39> 'const char *' lvalue ParmVar 0x55e60c3afaa0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e60c3d9a98 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e60c3d9a48 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e60c3d9a08 <col:48> 'int' lvalue ParmVar 0x55e60c3afb20 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e60c3d9a80 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e60c3d9a60 <col:56> 'const int' lvalue Var 0x55e60c3a3370 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e60c3d9ab8 <col:68> 'P' lvalue ParmVar 0x55e60c3afb98 'parser' 'P'
|     `-ReturnStmt 0x55e60c3d9b40 <line:575:9, col:17>
|       `-UnaryOperator 0x55e60c3d9b28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d9b18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3b0168 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e60c3afd88 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3afe08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b00c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e60c3afec8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3aff40 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3affe8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9cc0 <col:62, line:592:5>
|     `-ReturnStmt 0x55e60c3d9cb0 <line:591:9, col:51>
|       `-CallExpr 0x55e60c3d9c70 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d9b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d9bf0 <col:30> 'const char *' lvalue ParmVar 0x55e60c3afec8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d9c10 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e60c3d9c30 <col:42> 'P' lvalue ParmVar 0x55e60c3aff40 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d9c50 <col:50> 'T' lvalue ParmVar 0x55e60c3affe8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3b0648 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e60c3b01d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3b0258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b05a8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e60c3b0318 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b0398 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b0410 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3b04b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3d9eb8 <col:73, line:597:5>
|     |-CallExpr 0x55e60c3d9e38 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3d9cd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e60c3d9d18 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3d9d28 <col:39> 'const char *' lvalue ParmVar 0x55e60c3b0318 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e60c3d9dd8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e60c3d9d88 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e60c3d9d48 <col:48> 'int' lvalue ParmVar 0x55e60c3b0398 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e60c3d9dc0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e60c3d9da0 <col:56> 'const int' lvalue Var 0x55e60c3a3370 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e60c3d9df8 <col:68> 'P' lvalue ParmVar 0x55e60c3b0410 'parser' 'P'
|     | `-DeclRefExpr 0x55e60c3d9e18 <col:76> 'T' lvalue ParmVar 0x55e60c3b04b8 'x' 'T &'
|     `-ReturnStmt 0x55e60c3d9ea8 <line:596:9, col:17>
|       `-UnaryOperator 0x55e60c3d9e90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3d9e80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3b0bf8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e60c3b06c0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3b0738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b0b58 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e60c3b07f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b0870 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3b0a30 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e60c3da028 <col:65, line:614:5>
|     `-ReturnStmt 0x55e60c3da018 <line:613:9, col:46>
|       `-CallExpr 0x55e60c3d9fd8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3d9ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3d9f58 <col:25> 'const char *' lvalue ParmVar 0x55e60c3b07f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3d9f78 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e60c3d9f98 <col:37> 'P' lvalue ParmVar 0x55e60c3b0870 'parser' 'P'
|         `-DeclRefExpr 0x55e60c3d9fb8 <col:45> 'Vector<T>' lvalue ParmVar 0x55e60c3b0a30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e60c3b1028 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e60c3b0c68 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3b0f88 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e60c3b0d20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b0e70 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e60c3da240 <col:55, line:618:5>
|     `-ReturnStmt 0x55e60c3da230 <line:617:9, col:55>
|       `-CallExpr 0x55e60c3da1f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3da050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3da0c0 <col:25> 'const char *' lvalue ParmVar 0x55e60c3b0d20 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e60c3da0e0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e60c3da1b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e60c3da1d0 <col:54> 'Vector<T>' lvalue ParmVar 0x55e60c3b0e70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e60c3b15f8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e60c3b1090 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3b1108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b1558 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e60c3b11c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b1248 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b12c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3b1410 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e60c3da438 <col:76, line:623:5>
|     |-CallExpr 0x55e60c3da3b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e60c3da258 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e60c3da298 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e60c3da2a8 <col:34> 'const char *' lvalue ParmVar 0x55e60c3b11c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e60c3da358 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e60c3da308 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e60c3da2c8 <col:43> 'int' lvalue ParmVar 0x55e60c3b1248 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e60c3da340 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e60c3da320 <col:51> 'const int' lvalue Var 0x55e60c3a3370 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e60c3da378 <col:63> 'P' lvalue ParmVar 0x55e60c3b12c0 'parser' 'P'
|     | `-DeclRefExpr 0x55e60c3da398 <col:71> 'Vector<T>' lvalue ParmVar 0x55e60c3b1410 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e60c3da428 <line:622:9, col:17>
|       `-UnaryOperator 0x55e60c3da410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3da400 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3b1b38 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e60c3b1670 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3b16e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b1a98 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e60c3b17a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b1828 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b1970 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e60c3da6a0 <col:66, line:627:5>
|     `-ReturnStmt 0x55e60c3da690 <line:626:9, col:59>
|       `-CallExpr 0x55e60c3da650 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e60c3da468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e60c3da4d8 <col:25> 'const char *' lvalue ParmVar 0x55e60c3b17a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e60c3da4f8 <col:34> 'int' lvalue ParmVar 0x55e60c3b1828 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e60c3da610 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e60c3da630 <col:58> 'Vector<T>' lvalue ParmVar 0x55e60c3b1970 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e60c3b1bc8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e60c3da720 <col:25, line:633:5>
|   `-ReturnStmt 0x55e60c3da710 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e60c3da6f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e60c3da6c8 <col:16> 'const bool' lvalue ->_status 0x55e60c3bd558
|         `-CXXThisExpr 0x55e60c3da6b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e60c3b1d48 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e60c3b1c80 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e60c3da808 <col:27, line:639:5>
|   |-BinaryOperator 0x55e60c3da7b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e60c3da738 <col:9> 'bool' lvalue ParmVar 0x55e60c3b1c80 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e60c3da798 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c3da768 <col:13> 'bool' lvalue ->_status 0x55e60c3bd558
|   |     `-CXXThisExpr 0x55e60c3da758 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e60c3da7f8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e60c3da7e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3da7d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e60c3b1ec8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e60c3b1e08 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e60c3da8f8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e60c3da8a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e60c3da828 <col:9> 'bool' lvalue ParmVar 0x55e60c3b1e08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e60c3da888 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c3da858 <col:13> 'const bool' lvalue ->_status 0x55e60c3bd558
|   |     `-CXXThisExpr 0x55e60c3da848 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e60c3da8e8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e60c3da8d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3da8c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e60c3b1f90 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e60c3da9a0 <col:30, line:651:5>
|   `-ReturnStmt 0x55e60c3da990 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e60c3da978 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e60c3da948 <col:16> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|         `-ImplicitCastExpr 0x55e60c3da928 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e60c3da918 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e60c3b20d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e60c3b2048 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e60c3daaa8 <col:32, line:658:5>
|   |-BinaryOperator 0x55e60c3daa50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e60c3da9b8 <col:9> 'bool' lvalue ParmVar 0x55e60c3b2048 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e60c3daa38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c3daa08 <col:13> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|   |     `-ImplicitCastExpr 0x55e60c3da9e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e60c3da9d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e60c3daa98 <line:657:9, col:17>
|     `-UnaryOperator 0x55e60c3daa80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3daa70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e60c3b2228 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e60c3b2198 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e60c3dabb8 <col:44, line:663:5>
|   |-BinaryOperator 0x55e60c3dab60 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e60c3daac8 <col:9> 'bool' lvalue ParmVar 0x55e60c3b2198 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e60c3dab48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e60c3dab18 <col:13> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|   |     `-ImplicitCastExpr 0x55e60c3daaf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e60c3daae8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e60c3daba8 <line:662:9, col:17>
|     `-UnaryOperator 0x55e60c3dab90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3dab80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e60c3b22f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e60c3b23b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e60c3b2480 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e60c3b2548 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e60c3b2858 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e60c3b25e8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3b27b8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e60c3b26c8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3daf70 <col:19, line:706:5>
|     `-IfStmt 0x55e60c3daf48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e60c3dacb8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e60c3dae78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e60c3dae48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e60c3dae08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e60c3dad10 <col:42> '<bound member function type>' ->simple_slot 0x55e60c3d5a00
|       |     | `-CXXThisExpr 0x55e60c3dad00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e60c3dada8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e60c3dad60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e60c13cc28
|       |     | `-DeclRefExpr 0x55e60c3dad40 <col:55> 'T' lvalue ParmVar 0x55e60c3b26c8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e60c3dade8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e60c3daf38 <line:705:13, col:34>
|         `-CallExpr 0x55e60c3daf10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e60c3dae98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e60c3daef0 <col:33> 'T' lvalue ParmVar 0x55e60c3b26c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e60c3b8678 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e60c3b8410 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3b85d8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e60c3b84e8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e60c3db350 <col:31, line:717:5>
|     |-DeclStmt 0x55e60c3db0b0 <line:713:9, col:23>
|     | `-VarDecl 0x55e60c3daf98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e60c3db088 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e60c3db010 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e60c3db068 <col:21> 'T' lvalue ParmVar 0x55e60c3b84e8 'x' 'T &'
|     |-IfStmt 0x55e60c3db300 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e60c3db1a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e60c3db2e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e60c3db280 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e60c3db210 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|     |   | `-DeclRefExpr 0x55e60c3db1f0 <col:14> 'T *' lvalue Var 0x55e60c3daf98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e60c3db2c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e60c3db338 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e60c3db318 <col:16> 'T *' lvalue Var 0x55e60c3daf98 's' 'T *'
|-FunctionTemplateDecl 0x55e60c3b8a88 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e60c3b86d8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3b8758 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e60c3b89e8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e60c3b8838 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e60c3b88d8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e60c3db660 <col:37, line:726:5>
|     |-IfStmt 0x55e60c3db5f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e60c3db610 <line:723:13, col:26>
|     | | `-VarDecl 0x55e60c3db3b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e60c3db4a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e60c3db430 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e60c3db488 <col:25> 'T' lvalue ParmVar 0x55e60c3b8838 'x' 'T &'
|     | |-DeclRefExpr 0x55e60c3db4d0 <col:16> 'T *' lvalue Var 0x55e60c3db3b8 's' 'T *'
|     | `-BinaryOperator 0x55e60c3db5d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e60c3db580 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e60c3db510 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|     |   | `-DeclRefExpr 0x55e60c3db4f0 <col:14> 'T *' lvalue Var 0x55e60c3db3b8 's' 'T *'
|     |   `-DeclRefExpr 0x55e60c3db5b0 <col:18> 'const V' lvalue ParmVar 0x55e60c3b88d8 'value' 'const V &'
|     `-ReturnStmt 0x55e60c3db650 <line:725:9, col:17>
|       `-UnaryOperator 0x55e60c3db638 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e60c3db628 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e60c3b8e88 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e60c3b8af0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e60c3b8de8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e60c3b8ba0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b8c20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b8cc8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e60c3dc480 <col:65, line:737:5>
|     |-DeclStmt 0x55e60c3db6f8 <line:732:9, col:26>
|     | `-VarDecl 0x55e60c3db690 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e60c3dc448 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e60c3dc468 <line:733:13, col:58>
|       | `-VarDecl 0x55e60c3db720 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e60c3db900 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e60c3db8d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e60c3db8b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e60c3db898 <col:26, col:58> 'String' (CXXTemporary 0x55e60c3db898)
|       |           `-CXXMemberCallExpr 0x55e60c3db828 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e60c3db798 <col:26> '<bound member function type>' ->find 0x55e60c3d5018
|       |             | `-CXXThisExpr 0x55e60c3db788 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e60c3db860 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3db7c8 <col:31> 'const char *' lvalue ParmVar 0x55e60c3b8ba0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e60c3db878 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3db7e8 <col:40> 'int' lvalue ParmVar 0x55e60c3b8c20 'flags' 'int'
|       |             `-DeclRefExpr 0x55e60c3db808 <col:47> 'Args::Slot *' lvalue Var 0x55e60c3db690 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e60c3db9b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e60c3db9a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e60c3db980 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e60c3db950 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |       `-ImplicitCastExpr 0x55e60c3db938 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e60c3db918 <col:20> 'String' lvalue Var 0x55e60c3db720 'str' 'String'
|       `-CompoundStmt 0x55e60c3dc428 <col:61, line:736:9>
|         |-DeclStmt 0x55e60c3dbe70 <line:734:13, col:76>
|         | `-VarDecl 0x55e60c3dba08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e60c3dbe40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e60c3dbdb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e60c3dbdf8 <col:60> 'T' lvalue ParmVar 0x55e60c3b8cc8 'variable' 'T &'
|         |     `-UnaryOperator 0x55e60c3dbe28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e60c3dbe18 <col:71> 'Args *' this
|         `-CallExpr 0x55e60c3dc3f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e60c3dbe98 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|           | `-CXXThisExpr 0x55e60c3dbe88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e60c3dc3b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e60c3dbec8 <col:23> 'T *' lvalue Var 0x55e60c3dba08 's' 'T *'
|           | `-CallExpr 0x55e60c3dc378 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e60c3dc150 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e60c3dc250 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e60c3dc270 <col:86> 'String' lvalue Var 0x55e60c3db720 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e60c3dc320 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e60c3dc2b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|           |   | `-DeclRefExpr 0x55e60c3dc290 <col:92> 'T *' lvalue Var 0x55e60c3dba08 's' 'T *'
|           |   `-UnaryOperator 0x55e60c3dc360 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e60c3dc350 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e60c3dc3d8 <col:103> 'Args::Slot *' lvalue Var 0x55e60c3db690 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3b93d8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e60c3b8ef8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3b8f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e60c3b9338 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3b9038 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b90b8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b9158 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e60c3b91f8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e60c3dfb40 <col:88, line:745:5>
|     |-DeclStmt 0x55e60c3dc518 <line:741:9, col:26>
|     | `-VarDecl 0x55e60c3dc4b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e60c3dc738 <line:742:9, col:55>
|     | `-VarDecl 0x55e60c3dc540 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e60c3dc720 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e60c3dc6f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e60c3dc6d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e60c3dc6b8 <col:22, col:54> 'String' (CXXTemporary 0x55e60c3dc6b8)
|     |           `-CXXMemberCallExpr 0x55e60c3dc648 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e60c3dc5b8 <col:22> '<bound member function type>' ->find 0x55e60c3d5018
|     |             | `-CXXThisExpr 0x55e60c3dc5a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e60c3dc680 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e60c3dc5e8 <col:27> 'const char *' lvalue ParmVar 0x55e60c3b9038 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e60c3dc698 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e60c3dc608 <col:36> 'int' lvalue ParmVar 0x55e60c3b90b8 'flags' 'int'
|     |             `-DeclRefExpr 0x55e60c3dc628 <col:43> 'Args::Slot *' lvalue Var 0x55e60c3dc4b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e60c3df330 <line:743:9, col:72>
|     | `-VarDecl 0x55e60c3defa0 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e60c3df300 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e60c3df270 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e60c3df2b8 <col:56> 'T' lvalue ParmVar 0x55e60c3b9158 'variable' 'T &'
|     |     `-UnaryOperator 0x55e60c3df2e8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e60c3df2d8 <col:67> 'Args *' this
|     `-CallExpr 0x55e60c3dfb10 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e60c3df358 <col:9> '<bound member function type>' ->postparse 0x55e60c3d5228
|       | `-CXXThisExpr 0x55e60c3df348 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e60c3dfad0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e60c3df388 <col:19> 'T *' lvalue Var 0x55e60c3defa0 's' 'T *'
|       | `-ParenExpr 0x55e60c3dfab0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e60c3dfa80 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e60c3dfa68 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e60c3dfa50 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e60c3dfa30 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e60c3dfa00 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |     |       `-ImplicitCastExpr 0x55e60c3df9e8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e60c3df3a8 <col:25> 'String' lvalue Var 0x55e60c3dc540 'str' 'String'
|       |     |-CallExpr 0x55e60c3df858 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e60c3df630 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e60c3df730 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e60c3df750 <col:89> 'String' lvalue Var 0x55e60c3dc540 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e60c3df800 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e60c3df790 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|       |     | | `-DeclRefExpr 0x55e60c3df770 <col:95> 'T *' lvalue Var 0x55e60c3defa0 's' 'T *'
|       |     | `-UnaryOperator 0x55e60c3df840 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e60c3df830 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e60c3df9c8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e60c3df9a8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e60c3df978 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e60c3df928 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e60c3df8b8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|       |         | | `-DeclRefExpr 0x55e60c3df898 <col:109> 'T *' lvalue Var 0x55e60c3defa0 's' 'T *'
|       |         | `-DeclRefExpr 0x55e60c3df958 <col:113> 'const V' lvalue ParmVar 0x55e60c3b91f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e60c3df998 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e60c3dfaf0 <col:128> 'Args::Slot *' lvalue Var 0x55e60c3dc4b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3b9908 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e60c3b9450 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3b94c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3b9868 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e60c3b9588 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b9608 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b9680 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3b9728 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e60c3e0738 <col:75, line:754:5>
|     |-DeclStmt 0x55e60c3dfbe8 <line:749:9, col:26>
|     | `-VarDecl 0x55e60c3dfb80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e60c3e0700 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e60c3e0720 <line:750:13, col:58>
|       | `-VarDecl 0x55e60c3dfc10 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e60c3dfdf0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e60c3dfdc0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e60c3dfda8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e60c3dfd88 <col:26, col:58> 'String' (CXXTemporary 0x55e60c3dfd88)
|       |           `-CXXMemberCallExpr 0x55e60c3dfd18 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e60c3dfc88 <col:26> '<bound member function type>' ->find 0x55e60c3d5018
|       |             | `-CXXThisExpr 0x55e60c3dfc78 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e60c3dfd50 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3dfcb8 <col:31> 'const char *' lvalue ParmVar 0x55e60c3b9588 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e60c3dfd68 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3dfcd8 <col:40> 'int' lvalue ParmVar 0x55e60c3b9608 'flags' 'int'
|       |             `-DeclRefExpr 0x55e60c3dfcf8 <col:47> 'Args::Slot *' lvalue Var 0x55e60c3dfb80 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e60c3dfea8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e60c3dfe90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e60c3dfe70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e60c3dfe40 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |       `-ImplicitCastExpr 0x55e60c3dfe28 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e60c3dfe08 <col:20> 'String' lvalue Var 0x55e60c3dfc10 'str' 'String'
|       `-CompoundStmt 0x55e60c3e06e0 <col:61, line:753:9>
|         |-DeclStmt 0x55e60c3e0280 <line:751:13, col:63>
|         | `-VarDecl 0x55e60c3dfef8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e60c3e0250 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e60c3e01c0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e60c3e0208 <col:47> 'T' lvalue ParmVar 0x55e60c3b9728 'variable' 'T &'
|         |     `-UnaryOperator 0x55e60c3e0238 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e60c3e0228 <col:58> 'Args *' this
|         `-CallExpr 0x55e60c3e06b0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e60c3e02a8 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|           | `-CXXThisExpr 0x55e60c3e0298 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e60c3e0670 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e60c3e02d8 <col:23> 'T *' lvalue Var 0x55e60c3dfef8 's' 'T *'
|           | `-CallExpr 0x55e60c3e0630 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e60c3e04c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e60c3e0508 <col:56> 'P' lvalue ParmVar 0x55e60c3b9680 'parser' 'P'
|           |   |-DeclRefExpr 0x55e60c3e0528 <col:64> 'String' lvalue Var 0x55e60c3dfc10 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e60c3e05d8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e60c3e0568 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|           |   | `-DeclRefExpr 0x55e60c3e0548 <col:70> 'T *' lvalue Var 0x55e60c3dfef8 's' 'T *'
|           |   `-UnaryOperator 0x55e60c3e0618 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e60c3e0608 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e60c3e0690 <col:81> 'Args::Slot *' lvalue Var 0x55e60c3dfb80 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3b9f68 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e60c3b9980 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e60c3b99f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e60c3b9a78 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e60c3b9ec8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e60c3b9b40 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3b9bc0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3b9c38 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3b9cd8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e60c3b9d78 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e60c3e14c8 <col:98, line:762:5>
|     |-DeclStmt 0x55e60c3e07d0 <line:758:9, col:26>
|     | `-VarDecl 0x55e60c3e0768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e60c3e09f0 <line:759:9, col:55>
|     | `-VarDecl 0x55e60c3e07f8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e60c3e09d8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e60c3e09a8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e60c3e0990 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e60c3e0970 <col:22, col:54> 'String' (CXXTemporary 0x55e60c3e0970)
|     |           `-CXXMemberCallExpr 0x55e60c3e0900 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e60c3e0870 <col:22> '<bound member function type>' ->find 0x55e60c3d5018
|     |             | `-CXXThisExpr 0x55e60c3e0860 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e60c3e0938 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e60c3e08a0 <col:27> 'const char *' lvalue ParmVar 0x55e60c3b9b40 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e60c3e0950 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e60c3e08c0 <col:36> 'int' lvalue ParmVar 0x55e60c3b9bc0 'flags' 'int'
|     |             `-DeclRefExpr 0x55e60c3e08e0 <col:43> 'Args::Slot *' lvalue Var 0x55e60c3e0768 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e60c3e0e10 <line:760:9, col:59>
|     | `-VarDecl 0x55e60c3e0a48 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e60c3e0de0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e60c3e0d50 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e60c3e0d98 <col:43> 'T' lvalue ParmVar 0x55e60c3b9cd8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e60c3e0dc8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e60c3e0db8 <col:54> 'Args *' this
|     `-CallExpr 0x55e60c3e1498 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e60c3e0e38 <col:9> '<bound member function type>' ->postparse 0x55e60c3d5228
|       | `-CXXThisExpr 0x55e60c3e0e28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e60c3e1458 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e60c3e0e68 <col:19> 'T *' lvalue Var 0x55e60c3e0a48 's' 'T *'
|       | `-ParenExpr 0x55e60c3e1438 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e60c3e1408 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e60c3e13f0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e60c3e13d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e60c3e13b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e60c3e1388 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |     |       `-ImplicitCastExpr 0x55e60c3e1370 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e60c3e0e88 <col:25> 'String' lvalue Var 0x55e60c3e07f8 'str' 'String'
|       |     |-CallExpr 0x55e60c3e11e0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e60c3e1070 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e60c3e10b8 <col:59> 'P' lvalue ParmVar 0x55e60c3b9c38 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e60c3e10d8 <col:67> 'String' lvalue Var 0x55e60c3e07f8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e60c3e1188 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e60c3e1118 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|       |     | | `-DeclRefExpr 0x55e60c3e10f8 <col:73> 'T *' lvalue Var 0x55e60c3e0a48 's' 'T *'
|       |     | `-UnaryOperator 0x55e60c3e11c8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e60c3e11b8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e60c3e1350 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e60c3e1330 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e60c3e1300 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e60c3e12b0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e60c3e1240 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|       |         | | `-DeclRefExpr 0x55e60c3e1220 <col:87> 'T *' lvalue Var 0x55e60c3e0a48 's' 'T *'
|       |         | `-DeclRefExpr 0x55e60c3e12e0 <col:91> 'const V' lvalue ParmVar 0x55e60c3b9d78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e60c3e1320 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e60c3e1478 <col:106> 'Args::Slot *' lvalue Var 0x55e60c3e0768 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3ba5d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e60c3b9fe8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3ba068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e60c3ba0e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e60c3ba538 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e60c3ba1b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ba230 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3ba2a8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3ba348 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e60c3ba3e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e60c3e24a8 <col:60, line:773:5>
|     |-DeclStmt 0x55e60c3e1570 <line:767:9, col:26>
|     | `-VarDecl 0x55e60c3e1508 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e60c3e2470 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e60c3e2490 <line:768:13, col:58>
|       | `-VarDecl 0x55e60c3e1598 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e60c3e1778 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e60c3e1748 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e60c3e1730 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e60c3e1710 <col:26, col:58> 'String' (CXXTemporary 0x55e60c3e1710)
|       |           `-CXXMemberCallExpr 0x55e60c3e16a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e60c3e1610 <col:26> '<bound member function type>' ->find 0x55e60c3d5018
|       |             | `-CXXThisExpr 0x55e60c3e1600 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e60c3e16d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3e1640 <col:31> 'const char *' lvalue ParmVar 0x55e60c3ba1b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e60c3e16f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3e1660 <col:40> 'int' lvalue ParmVar 0x55e60c3ba230 'flags' 'int'
|       |             `-DeclRefExpr 0x55e60c3e1680 <col:47> 'Args::Slot *' lvalue Var 0x55e60c3e1508 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e60c3e1830 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e60c3e1818 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e60c3e17f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e60c3e17c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |       `-ImplicitCastExpr 0x55e60c3e17b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e60c3e1790 <col:20> 'String' lvalue Var 0x55e60c3e1598 'str' 'String'
|       `-CompoundStmt 0x55e60c3e2448 <col:61, line:772:9>
|         |-DeclStmt 0x55e60c3e1b70 <line:769:13, col:66>
|         | `-VarDecl 0x55e60c3e1888 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e60c3e1b40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e60c3e1ab0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e60c3e1af8 <col:49> 'T1' lvalue ParmVar 0x55e60c3ba348 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e60c3e1b28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e60c3e1b18 <col:61> 'Args *' this
|         |-DeclStmt 0x55e60c3e1ee0 <line:770:13, col:66>
|         | `-VarDecl 0x55e60c3e1bf8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e60c3e1eb0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e60c3e1e20 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e60c3e1e68 <col:49> 'T2' lvalue ParmVar 0x55e60c3ba3e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e60c3e1e98 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e60c3e1e88 <col:61> 'Args *' this
|         `-CallExpr 0x55e60c3e2418 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e60c3e1f08 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|           | `-CXXThisExpr 0x55e60c3e1ef8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e60c3e23d8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e60c3e1f78 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e60c3e1f38 <col:23> 'T1 *' lvalue Var 0x55e60c3e1888 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e60c3e1f58 <col:29> 'T2 *' lvalue Var 0x55e60c3e1bf8 's2' 'T2 *'
|           | `-CallExpr 0x55e60c3e2390 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e60c3e2160 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e60c3e21a8 <col:63> 'P' lvalue ParmVar 0x55e60c3ba2a8 'parser' 'P'
|           |   |-DeclRefExpr 0x55e60c3e21c8 <col:71> 'String' lvalue Var 0x55e60c3e1598 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e60c3e2278 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e60c3e2208 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|           |   | `-DeclRefExpr 0x55e60c3e21e8 <col:77> 'T1 *' lvalue Var 0x55e60c3e1888 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e60c3e2338 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e60c3e22c8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|           |   | `-DeclRefExpr 0x55e60c3e22a8 <col:82> 'T2 *' lvalue Var 0x55e60c3e1bf8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e60c3e2378 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e60c3e2368 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e60c3e23f8 <col:94> 'Args::Slot *' lvalue Var 0x55e60c3e1508 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3ba9c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e60c3ba658 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3ba928 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e60c3ba710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3ba790 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3ba808 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3e29c0 <col:67, line:780:5>
|     |-DeclStmt 0x55e60c3e2540 <line:777:9, col:26>
|     | `-VarDecl 0x55e60c3e24d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e60c3e2988 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e60c3e29a8 <line:778:13, col:58>
|       | `-VarDecl 0x55e60c3e2568 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e60c3e2748 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e60c3e2718 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e60c3e2700 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e60c3e26e0 <col:26, col:58> 'String' (CXXTemporary 0x55e60c3e26e0)
|       |           `-CXXMemberCallExpr 0x55e60c3e2670 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e60c3e25e0 <col:26> '<bound member function type>' ->find 0x55e60c3d5018
|       |             | `-CXXThisExpr 0x55e60c3e25d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e60c3e26a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3e2610 <col:31> 'const char *' lvalue ParmVar 0x55e60c3ba710 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e60c3e26c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e60c3e2630 <col:40> 'int' lvalue ParmVar 0x55e60c3ba790 'flags' 'int'
|       |             `-DeclRefExpr 0x55e60c3e2650 <col:47> 'Args::Slot *' lvalue Var 0x55e60c3e24d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e60c3e2800 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e60c3e27e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e60c3e27c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e60c3e2798 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|       |       `-ImplicitCastExpr 0x55e60c3e2780 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e60c3e2760 <col:20> 'String' lvalue Var 0x55e60c3e2568 'str' 'String'
|       `-CallExpr 0x55e60c3e2958 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e60c3e2828 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|         | `-CXXThisExpr 0x55e60c3e2818 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e60c3e2908 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e60c3e2878 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e60c3e2858 <col:23> 'P' lvalue ParmVar 0x55e60c3ba808 'parser' 'P'
|         | |-DeclRefExpr 0x55e60c3e28c0 <col:36> 'String' lvalue Var 0x55e60c3e2568 'str' 'String'
|         | `-UnaryOperator 0x55e60c3e28f0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e60c3e28e0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e60c3e2938 <col:49> 'Args::Slot *' lvalue Var 0x55e60c3e24d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e60c3bad68 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e60c3baa38 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e60c3bacc8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e60c3baaf0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3bab70 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3babe8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e60c3e3330 <col:71, line:792:5>
|     |-DeclStmt 0x55e60c3e2a58 <line:784:9, col:26>
|     | `-VarDecl 0x55e60c3e29f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e60c3e2b28 <line:785:9, col:29>
|     | `-VarDecl 0x55e60c3e2a88 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e60c3e2b10 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e60c3e2af0 <col:28> 'int' 1
|     |-WhileStmt 0x55e60c3e31e0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e60c3e3200 <line:786:16, col:61>
|     | | `-VarDecl 0x55e60c3e2b50 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e60c3e2d30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e60c3e2d00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e60c3e2ce8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e60c3e2cc8 <col:29, col:61> 'String' (CXXTemporary 0x55e60c3e2cc8)
|     | |           `-CXXMemberCallExpr 0x55e60c3e2c58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e60c3e2bc8 <col:29> '<bound member function type>' ->find 0x55e60c3d5018
|     | |             | `-CXXThisExpr 0x55e60c3e2bb8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e60c3e2c90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e2bf8 <col:34> 'const char *' lvalue ParmVar 0x55e60c3baaf0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e60c3e2ca8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e2c18 <col:43> 'int' lvalue ParmVar 0x55e60c3bab70 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e60c3e2c38 <col:50> 'Args::Slot *' lvalue Var 0x55e60c3e29f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e60c3e2de8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e60c3e2dd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e60c3e2db0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e60c3e2d80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|     | |       `-ImplicitCastExpr 0x55e60c3e2d68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e60c3e2d48 <col:23> 'String' lvalue Var 0x55e60c3e2b50 'str' 'String'
|     | `-CompoundStmt 0x55e60c3e31b8 <col:64, line:790:9>
|     |   |-CallExpr 0x55e60c3e2f40 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e60c3e2e10 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|     |   | | `-CXXThisExpr 0x55e60c3e2e00 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e60c3e2ef0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e60c3e2e60 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e60c3e2e40 <col:23> 'P' lvalue ParmVar 0x55e60c3babe8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e60c3e2ea8 <col:36> 'String' lvalue Var 0x55e60c3e2b50 'str' 'String'
|     |   | | `-UnaryOperator 0x55e60c3e2ed8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e60c3e2ec8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e60c3e2f20 <col:49> 'Args::Slot *' lvalue Var 0x55e60c3e29f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e60c3e30d8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e60c3e2f70 <col:13> 'int' lvalue Var 0x55e60c3e2a88 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e60c3e30c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e60c3e30a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e60c3e3008 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e60c3e2fe8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e60c3e2fd0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e60c3e2f90 <col:28> 'int' lvalue Var 0x55e60c3e2a88 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e60c3e2fb0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e60c3e3088 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e60c3e3058 <col:49> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|     |   |         `-ImplicitCastExpr 0x55e60c3e3038 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e60c3e3028 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e60c3e3188 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e60c3e30f8 <col:13> 'int' lvalue ParmVar 0x55e60c3bab70 'flags' 'int'
|     |     `-UnaryOperator 0x55e60c3e3170 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e60c3e3158 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e60c3e3138 <col:23> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e60c3e3310 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e60c3e3248 <col:9> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|       | `-ImplicitCastExpr 0x55e60c3e3228 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e60c3e3218 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e60c3e32f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e60c3e32d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e60c3e32b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e60c3e3278 <col:25> 'int' lvalue Var 0x55e60c3e2a88 'read_status' 'int'
|           `-IntegerLiteral 0x55e60c3e3298 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e60c3bb248 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e60c3badd8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3bae58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3bb1a8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e60c3baf18 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3baf98 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3bb010 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3bb0b8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e60c3e42c0 <col:84, line:805:5>
|     |-DeclStmt 0x55e60c3e33d8 <line:796:9, col:26>
|     | `-VarDecl 0x55e60c3e3370 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e60c3e34a8 <line:797:9, col:29>
|     | `-VarDecl 0x55e60c3e3408 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e60c3e3490 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e60c3e3470 <col:28> 'int' 1
|     |-DeclStmt 0x55e60c3e37e0 <line:798:9, col:71>
|     | `-VarDecl 0x55e60c3e34f8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e60c3e37b0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e60c3e3720 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e60c3e3768 <col:55> 'T' lvalue ParmVar 0x55e60c3bb0b8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e60c3e3798 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e60c3e3788 <col:66> 'Args *' this
|     |-WhileStmt 0x55e60c3e4170 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e60c3e4190 <line:799:16, col:61>
|     | | `-VarDecl 0x55e60c3e3808 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e60c3e39e8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e60c3e39b8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e60c3e39a0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e60c3e3980 <col:29, col:61> 'String' (CXXTemporary 0x55e60c3e3980)
|     | |           `-CXXMemberCallExpr 0x55e60c3e3910 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e60c3e3880 <col:29> '<bound member function type>' ->find 0x55e60c3d5018
|     | |             | `-CXXThisExpr 0x55e60c3e3870 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e60c3e3948 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e38b0 <col:34> 'const char *' lvalue ParmVar 0x55e60c3baf18 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e60c3e3960 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e38d0 <col:43> 'int' lvalue ParmVar 0x55e60c3baf98 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e60c3e38f0 <col:50> 'Args::Slot *' lvalue Var 0x55e60c3e3370 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e60c3e3aa0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e60c3e3a88 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e60c3e3a68 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e60c3e3a38 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|     | |       `-ImplicitCastExpr 0x55e60c3e3a20 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e60c3e3a00 <col:23> 'String' lvalue Var 0x55e60c3e3808 'str' 'String'
|     | `-CompoundStmt 0x55e60c3e4148 <col:64, line:803:9>
|     |   |-CallExpr 0x55e60c3e3ed0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e60c3e3ac8 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|     |   | | `-CXXThisExpr 0x55e60c3e3ab8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e60c3e3e90 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e60c3e3af8 <col:23> 'T *' lvalue Var 0x55e60c3e34f8 's' 'T *'
|     |   | | `-CallExpr 0x55e60c3e3e50 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e60c3e3ce0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e60c3e3d28 <col:56> 'P' lvalue ParmVar 0x55e60c3bb010 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e60c3e3d48 <col:64> 'String' lvalue Var 0x55e60c3e3808 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e60c3e3df8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e60c3e3d88 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|     |   | |   | `-DeclRefExpr 0x55e60c3e3d68 <col:70> 'T *' lvalue Var 0x55e60c3e34f8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e60c3e3e38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e60c3e3e28 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e60c3e3eb0 <col:81> 'Args::Slot *' lvalue Var 0x55e60c3e3370 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e60c3e4068 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e60c3e3f00 <col:13> 'int' lvalue Var 0x55e60c3e3408 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e60c3e4050 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e60c3e4030 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e60c3e3f98 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e60c3e3f78 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e60c3e3f60 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e60c3e3f20 <col:28> 'int' lvalue Var 0x55e60c3e3408 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e60c3e3f40 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e60c3e4018 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e60c3e3fe8 <col:49> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|     |   |         `-ImplicitCastExpr 0x55e60c3e3fc8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e60c3e3fb8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e60c3e4118 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e60c3e4088 <col:13> 'int' lvalue ParmVar 0x55e60c3baf98 'flags' 'int'
|     |     `-UnaryOperator 0x55e60c3e4100 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e60c3e40e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e60c3e40c8 <col:23> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e60c3e42a0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e60c3e41d8 <col:9> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|       | `-ImplicitCastExpr 0x55e60c3e41b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e60c3e41a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e60c3e4280 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e60c3e4260 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e60c3e4248 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e60c3e4208 <col:25> 'int' lvalue Var 0x55e60c3e3408 'read_status' 'int'
|           `-IntegerLiteral 0x55e60c3e4228 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e60c3bb828 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e60c3bb2c0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e60c3bb338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e60c3bb788 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e60c3bb3f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e60c3bb478 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e60c3bb4f0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e60c3bb640 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e60c3e50c8 <col:87, line:821:5>
|     |-DeclStmt 0x55e60c3e4370 <line:809:9, col:26>
|     | `-VarDecl 0x55e60c3e4308 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e60c3e4440 <line:810:9, col:29>
|     | `-VarDecl 0x55e60c3e43a0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e60c3e4428 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e60c3e4408 <col:28> 'int' 1
|     |-DeclStmt 0x55e60c3e4688 <line:811:9, col:38>
|     | `-VarDecl 0x55e60c3e4570 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e60c3e4660 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e60c3e45e8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e60c3e4640 <col:29> 'Vector<T>' lvalue ParmVar 0x55e60c3bb640 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e60c3e4f78 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e60c3e4f98 <line:812:16, col:61>
|     | | `-VarDecl 0x55e60c3e46b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e60c3e4890 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e60c3e4860 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e60c3e4848 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e60c3e4828 <col:29, col:61> 'String' (CXXTemporary 0x55e60c3e4828)
|     | |           `-CXXMemberCallExpr 0x55e60c3e47b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e60c3e4728 <col:29> '<bound member function type>' ->find 0x55e60c3d5018
|     | |             | `-CXXThisExpr 0x55e60c3e4718 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e60c3e47f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e4758 <col:34> 'const char *' lvalue ParmVar 0x55e60c3bb3f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e60c3e4808 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e60c3e4778 <col:43> 'int' lvalue ParmVar 0x55e60c3bb478 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e60c3e4798 <col:50> 'Args::Slot *' lvalue Var 0x55e60c3e4308 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e60c3e4948 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e60c3e4930 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e60c3e4910 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e60c3e48e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e60c0febe8
|     | |       `-ImplicitCastExpr 0x55e60c3e48c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e60c3e48a8 <col:23> 'String' lvalue Var 0x55e60c3e46b0 'str' 'String'
|     | `-CompoundStmt 0x55e60c3e4f40 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e60c3e4a08 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e60c3e4970 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e60c3e49e8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e60c3e4b88 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e60c3e4a30 <col:13> '<bound member function type>' ->postparse 0x55e60c3d5228
|     |   | | `-CXXThisExpr 0x55e60c3e4a20 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e60c3e4b30 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e60c3e4a80 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e60c3e4a60 <col:23> 'P' lvalue ParmVar 0x55e60c3bb4f0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e60c3e4ac8 <col:36> 'String' lvalue Var 0x55e60c3e46b0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e60c3e4ae8 <col:41> 'T' lvalue Var 0x55e60c3e4970 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e60c3e4b18 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e60c3e4b08 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e60c3e4b68 <col:53> 'Args::Slot *' lvalue Var 0x55e60c3e4308 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e60c3e4ce0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e60c3e4c18 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e60c3e4be8 <col:17> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|     |   | |   `-ImplicitCastExpr 0x55e60c3e4bc8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e60c3e4bb8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e60c3e4cb8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e60c3e4c50 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e60c3e4c30 <col:17> 'Vector<T> *' lvalue Var 0x55e60c3e4570 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e60c3e4c98 <col:30> 'T' lvalue Var 0x55e60c3e4970 'sx' 'T'
|     |   |-BinaryOperator 0x55e60c3e4e60 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e60c3e4cf8 <col:13> 'int' lvalue Var 0x55e60c3e43a0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e60c3e4e48 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e60c3e4e28 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e60c3e4d90 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e60c3e4d70 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e60c3e4d58 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e60c3e4d18 <col:28> 'int' lvalue Var 0x55e60c3e43a0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e60c3e4d38 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e60c3e4e10 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e60c3e4de0 <col:49> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|     |   |         `-ImplicitCastExpr 0x55e60c3e4dc0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e60c3e4db0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e60c3e4f10 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e60c3e4e80 <col:13> 'int' lvalue ParmVar 0x55e60c3bb478 'flags' 'int'
|     |     `-UnaryOperator 0x55e60c3e4ef8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e60c3e4ee0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e60c3e4ec0 <col:23> 'const int' lvalue Var 0x55e60c3a3088 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e60c3e50a8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e60c3e4fe0 <col:9> 'bool' lvalue ->_read_status 0x55e60c2b4ba0
|       | `-ImplicitCastExpr 0x55e60c3e4fc0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e60c3e4fb0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e60c3e5088 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e60c3e5068 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e60c3e5050 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e60c3e5010 <col:25> 'int' lvalue Var 0x55e60c3e43a0 'read_status' 'int'
|           `-IntegerLiteral 0x55e60c3e5030 <col:40> 'int' 1
|-AccessSpecDecl 0x55e60c3bb8a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e60c3bb8c8 prev 0x55e60c3a1388 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e60c3bb9c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e60c3bbab0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e60c3e5100 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e60c3bbba0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e60c3e5110 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e60c3bbca0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e60c3bbd50 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e60c3bbdf8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e60c3bbdf8
| | `-ParmVarDecl 0x55e60c3bbf08 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e60c3bc6c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e60c3bc6c8
|   `-ParmVarDecl 0x55e60c3bc7d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e60c3bbf78 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e60c3bc0d8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e60c3bc2d0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e60c3bc180 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e60c3bc1f8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e60c3e52f0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e60c3bc588 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e60c3e5160 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e60c3e5120 <col:20> 'void *' lvalue ParmVar 0x55e60c3bc180 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e60c3bc5f0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e60c3e51e8 <col:32, col:45> 'char *' array Function 0x55e60bf22428 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e60c3e51d0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e60c3e51a0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e60c3bc1f8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e60c3bc650 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e60c3e52b0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e60c3e5270 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e60c3bc1f8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e60c3e5370 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e60c3bc3d0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e60c3bbba0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e60c3e53f8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e60c3e53d8 <line:840:13, col:22> 'void' array Function 0x55e60bf22788 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e60c3e53c0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e60c3e5390 <col:22> 'char *' lvalue ->_slot 0x55e60c3bc5f0
| |         `-CXXThisExpr 0x55e60c3e5380 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e60c3bc4d0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e60c3bbca0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e60c3e55e8 <col:22, line:844:9>
| |   `-CallExpr 0x55e60c3e5550 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e60c3e5538 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e60c3e5518 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e60c02e208 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e60c3e5588 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e60c3e5468 <col:20> 'void *' lvalue ->_ptr 0x55e60c3bc588
| |     |   `-CXXThisExpr 0x55e60c3e5458 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e60c3e55b8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e60c3e55a0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e60c3e54a8 <col:26> 'char *' lvalue ->_slot 0x55e60c3bc5f0
| |     |     `-CXXThisExpr 0x55e60c3e5498 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e60c3e55d0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e60c3e54e8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e60c3bc650
| |         `-CXXThisExpr 0x55e60c3e54d8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e60c3bc588 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e60c3bc5f0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e60c3bc650 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e60c3bc848 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e60c3bc848
| | `-ParmVarDecl 0x55e60c3bc958 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e60c3bc9f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e60c3bc9f8
|   `-ParmVarDecl 0x55e60c3bcb08 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e60c3bcca8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e60c3bcb78 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e60c3bcc18 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e60c3bcf40 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e60c3bd138 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e60c3bd008 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e60c3bd2b8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e60c3e5620 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e60c3e5600 <col:20> 'T *' lvalue ParmVar 0x55e60c3bd008 'ptr' 'T *'
|   | `-CompoundStmt 0x55e60c3e5670 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e60c3bd208 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e60c3bbca0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e60c3e5820 <col:22, line:857:9>
|   |   `-CallExpr 0x55e60c3e57f0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e60c3e5680 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e60c0e6d78 0x55e60c090c68
|   |     |-CXXOperatorCallExpr 0x55e60c3e5780 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e60c3e5710 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e60c2f3d28 0x55e60c2f3948 0x55e60c2f3578 0x55e60c2f3198 0x55e60c2f2db8 0x55e60c2f29e8
|   |     | `-MemberExpr 0x55e60c3e56e0 <col:29> 'T *' lvalue ->_ptr 0x55e60c3bd2b8
|   |     |   `-CXXThisExpr 0x55e60c3e56d0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e60c3e57c0 <col:35> 'T' lvalue ->_slot 0x55e60c3bd318
|   |       `-CXXThisExpr 0x55e60c3e57b0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e60c3bd2b8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e60c3bd318 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e60c3bd380 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e60c3bd480 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e60c3bd4d0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c3bd460 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e60c3bd440 <col:31> 'int' 48
|-FieldDecl 0x55e60c3bd4f8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e60c3bd558 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e60c3bd5b8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e60c3bd6f0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e60c3d48c0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e60c3d4920 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e60c3d49d0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e60c3d4bf8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e60c3d4b00 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e60c3d4d48 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e60c3d4cb8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e60c3d5018 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e60c3d4e08 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e60c3d4e88 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e60c3d4f30 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e60c3d5228 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e60c3d50e0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e60c3d5158 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e60c3d52f8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e60c3d5448 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e60c3d53b0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e60c3d57d8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e60c3d5508 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e60c3d5588 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e60c3d5630 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e60c3d56e8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e60c3d5a00 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e60c3d58b0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e60c3d5928 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e60c3d5d18 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e60c3d5ab0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e60c3d5c78 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e60c3d5b88 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c0efaa0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c0efbb8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e60c0efc48 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e60c0efd18 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e60c0efe00 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c0f0018 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e60c0efec0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f01c8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e60c0f00d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e60c0f0310 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e60c0f0280 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e60c0f0458 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e60c0f03c8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f05a0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e60c0f0510 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f0668 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e60c0f07b0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e60c0f0720 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e60c0f0878 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e60c0f09c0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e60c0f0930 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e60c0f0b38 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e60c0f0a78 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f0c80 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e60c0f0bf0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f0d48 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e60c0f0f08 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e60c0f0df8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e60c0f0e70 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f1158 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e60c0f0fc8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c0f1040 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e60c0f1208 <col:86> "" ""
|-CXXMethodDecl 0x55e60c0f1478 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e60c0f12e8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e60c0f1360 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f1628 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e60c0f1538 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e60c0f17d8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e60c0f16e0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e60c0f1aa8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e60c0f1890 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e60c0f1908 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e60c0f1980 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f1d88 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e60c0f1b70 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e60c0f1be8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c0f1c60 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e60c0f1e40 <col:115> "" ""
|-AccessSpecDecl 0x55e60c0f1eb0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e60c0f1ee8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c0f23f0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e60c0f23f0
| `-ParmVarDecl 0x55e60c0f24f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e60c0f2598 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e60c0f2598
| `-ParmVarDecl 0x55e60c0f26a8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e60c127cd8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e60c31b060 <col:7>
|-CXXConstructorDecl 0x55e60c127db0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e60c127db0
| `-ParmVarDecl 0x55e60c127ec8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e60c127f38 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e60c127f38
| `-ParmVarDecl 0x55e60c128048 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e60c320470 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c309bc8 prev 0x55e60c2fe890 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c309cc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e60c309db0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e60c309ed8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e60c30a058 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e60c30a1d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e60c30a358 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e60c31b1c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e60c31ba38 <col:11>
|-CXXDestructorDecl 0x55e60c31b2a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e60c31b3d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e60c31b3d8
| `-ParmVarDecl 0x55e60c31b4e8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e60c31b588 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e60c31b588
| `-ParmVarDecl 0x55e60c31b698 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e60c320e68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c320f78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e60c3211f8 <col:11>
|   `-ReturnStmt 0x55e60c3211e8 <col:11>
|     `-UnaryOperator 0x55e60c3211d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e60c3211c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e60c320fe8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e60c320fe8
  `-ParmVarDecl 0x55e60c3210f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c30a3c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c30a4d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e60c30a578 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e60c30a5e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e60c30a648 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e60c30a6b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e60c30a710 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e60c30a7d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e60c30a830 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e60c30a890 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e60c31b0d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e60c30a578 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e60c31ba48 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e60c31baa0 <col:12>
|-CXXConstructorDecl 0x55e60c31b708 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e60c31b708
| `-ParmVarDecl 0x55e60c31b818 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e60c31b8b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e60c31b8b8
| `-ParmVarDecl 0x55e60c31b9c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e60c320550 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c2f7fa0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e60c2f80b8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e60c2f8148 <col:16, col:22> col:16 public
|-EnumDecl 0x55e60c2f8170 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e60c2f8270 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e60c2f8350 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2f8250 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e60c2f8230 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e60c2f8300 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e60c2f8368 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c2f82e0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e60c2f82c0 <col:22> 'int' 64
|-CXXMethodDecl 0x55e60c2f86a8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e60c2f8390 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c2f8410 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e60c2f8488 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c2f8500 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2f8768 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2f8968 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e60c2f87e0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e60c2f8858 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2f8a18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2f8b78 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e60c2f8a88 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2f8c20 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e60c2f8f80 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e60c2f8f10 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e60c2f8eb0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e60c2f8e70 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e60bdcf4e0 'void'
|       |-PointerType 0x55e60c077f00 'unsigned char *'
|       | `-BuiltinType 0x55e60bdcf5e0 'unsigned char'
|       |-TypedefType 0x55e60be744d0 'size_t' sugar
|       | |-Typedef 0x55e60be3fbe0 'size_t'
|       | `-BuiltinType 0x55e60bdcf640 'unsigned long'
|       `-PointerType 0x55e60bdcfce0 'void *'
|         `-BuiltinType 0x55e60bdcf4e0 'void'
|-CXXMethodDecl 0x55e60c2f93f8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e60c2f8ff0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e60c2f9068 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c2f9100 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e60c2f9180 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e60c314070 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e60c314058 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e60c314020 <col:58> 'int' 0
| |-ParmVarDecl 0x55e60c2f9200 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e60c314098 <col:76> 'int' 0
| |-ParmVarDecl 0x55e60c2f9280 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e60c3140b8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e60c2f94c8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2f9548 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e60c2f9608 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e60c2f96a8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2f9700 <col:30>
|-CXXMethodDecl 0x55e60c2f9778 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e60c2f9818 <col:20>
| `-OptimizeNoneAttr 0x55e60c2f9870 <col:30>
|-CXXMethodDecl 0x55e60c2f98e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e60c2f9988 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2f9a38 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e60c2f9ad8 <col:20>
| |-OptimizeNoneAttr 0x55e60c2f9b30 <col:30>
| `-WarnUnusedResultAttr 0x55e60c2f9b58 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2f9bb0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e60c2f9c50 <col:20>
| `-OptimizeNoneAttr 0x55e60c2f9ca8 <col:30>
|-CXXMethodDecl 0x55e60c2f9cf8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e60c2f9d98 <col:20>
| `-OptimizeNoneAttr 0x55e60c2f9df0 <col:30>
|-CXXMethodDecl 0x55e60c2f9e38 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e60c2f9ed8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2f9f30 <col:30>
|-CXXMethodDecl 0x55e60c2f9f78 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fa038 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fa100 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c2fa1c8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c2fa288 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fa3a8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e60c314180 <col:54, line:99:5>
|   `-ReturnStmt 0x55e60c314170 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e60c314158 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e60c314128 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e60c30abc8
|         `-CXXThisExpr 0x55e60c314118 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e60c2fa548 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e60c2fa458 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e60c314230 <col:67, line:103:5>
|   `-BinaryOperator 0x55e60c314210 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e60c3141a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e60c30abc8
|     | `-CXXThisExpr 0x55e60c314198 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e60c3141f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c3141d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e60c2fa458 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e60c2fa640 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e60c3142b0 <col:33, line:107:5>
|   `-ReturnStmt 0x55e60c3142a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e60c314288 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e60c314258 <col:16> 'void *' lvalue ->_destructor_argument 0x55e60c30ac30
|         `-CXXThisExpr 0x55e60c314248 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e60c2fa700 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e60c3148e0 <col:25, line:113:5>
|   |-ParenExpr 0x55e60c314628 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e60c3145f8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c314368 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e60c314340 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e60c314308 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e60c3142d8 <col:24> '<bound member function type>' ->shared 0x55e60c2f9778
|   |   |       `-ImplicitCastExpr 0x55e60c314328 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e60c3142c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e60c3143c8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c3143a8 <col:42> 'int' 0
|   |   `-CallExpr 0x55e60c314558 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e60c314540 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c314520 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c314598 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c314438 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e60c3145b0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c314460 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c3145c8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c314498 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e60c3145e0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c314508 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c3144f0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c3144b8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e60c314828 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e60c314658 <col:2> 'unsigned char *' lvalue ->_head 0x55e60c30a9d0
|   | | `-CXXThisExpr 0x55e60c314648 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e60c314810 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e60c3147f0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e60c314698 <col:10> 'unsigned char *' lvalue ->_data 0x55e60c30aa38
|   |     | `-CXXThisExpr 0x55e60c314688 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e60c3147d8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e60c3147b8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e60c3146d8 <col:18> 'unsigned char *' lvalue ->_tail 0x55e60c30aaa0
|   |         | `-CXXThisExpr 0x55e60c3146c8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e60c3147a0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e60c314780 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e60c314718 <col:26> 'unsigned char *' lvalue ->_end 0x55e60c30ab08
|   |             | `-CXXThisExpr 0x55e60c314708 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e60c314768 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e60c314748 <col:33> 'int' 0
|   `-BinaryOperator 0x55e60c3148c0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e60c314858 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e60c30abc8
|     | `-CXXThisExpr 0x55e60c314848 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e60c3148a8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e60c314888 <col:16> 'int' 0
|-CXXMethodDecl 0x55e60c2fa840 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e60c2fa7b0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2fa8e8 <col:20>
| |-OptimizeNoneAttr 0x55e60c2fa940 <col:30>
| `-WarnUnusedResultAttr 0x55e60c2fa968 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2faa38 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e60c2fa9a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2faae0 <col:20>
| |-OptimizeNoneAttr 0x55e60c2fab38 <col:30>
| `-WarnUnusedResultAttr 0x55e60c2fab60 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2fac98 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e60c2faba0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2fad40 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2fae40 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e60c2fadb0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2faee8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2faf40 <col:30>
|-CXXMethodDecl 0x55e60c2fb008 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e60c2faf78 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2fb0b0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2fb1b0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e60c2fb120 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e60c2fb258 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2fb358 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e60c2fb2c8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2fb400 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fb458 <col:30>
|-CXXMethodDecl 0x55e60c2fb5e8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e60c2fb498 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e60c2fb510 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e60c3140d8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e60c2fb698 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e60c2fb898 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e60c2fb710 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e60c2fb788 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c2fbaa8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e60c2fb958 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e60c2fb9d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c2fbcb8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e60c2fbb68 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e60c2fbbe8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e60c3140e8 <col:39> 'int' 0
|-CXXMethodDecl 0x55e60c2fbd88 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e60c2fbe50 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c2fbf18 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e60c2fbfd8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fc0a0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e60c2fc1e8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e60c2fc158 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e60c2fc3b8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e60c2fc2a8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e60c2fc320 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c2fc488 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e60c2fc548 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55e60c2fc5e8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fc640 <col:30>
|-CXXMethodDecl 0x55e60c2fc690 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e60c2fc730 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fc788 <col:30>
|-CXXMethodDecl 0x55e60c2fc7d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e60c2fc898 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fc960 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e60c2fca00 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fca58 <col:30>
|-CXXMethodDecl 0x55e60c2fcba8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e60c2fca98 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e60c2fcb10 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c2fccf8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e60c2fcc68 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c2fcdd0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e60c2fce90 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e60c2fcf30 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fcf88 <col:30>
|-CXXMethodDecl 0x55e60c2fcfd8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e60c2fd078 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fd0d0 <col:30>
|-CXXMethodDecl 0x55e60c2fd120 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e60c2fd1e8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e60c2fd288 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fd2e0 <col:30>
|-CXXMethodDecl 0x55e60c2fd328 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e60c2fd448 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e60c2fd5b8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e60c2fd4f8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e60c2fd6a8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e60c2fd748 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fd7a0 <col:30>
|-CXXMethodDecl 0x55e60c2fd7f0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e60c2fd8b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e60c2fdae8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e60c2fd960 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e60c2fd9d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2fdb98 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fdbf0 <col:30>
|-CXXMethodDecl 0x55e60c2fdc98 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e60c2fdd38 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fdd90 <col:30>
|-CXXMethodDecl 0x55e60c2fdde0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e60c2fde80 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fded8 <col:30>
|-CXXMethodDecl 0x55e60c2fdf20 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e60c2fdfc0 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fe018 <col:30>
|-CXXMethodDecl 0x55e60c2fe118 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e60c2fe050 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e60c2fe1c0 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fe218 <col:30>
|-CXXMethodDecl 0x55e60c2fe3d8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e60c2fe250 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e60c2fe2c8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c2fe488 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fe4e0 <col:30>
|-CXXMethodDecl 0x55e60c2fe588 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e60c2fe6a8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e60c2fe7c8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e60c2fe868 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e60c2fe890 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e60c2fe9b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e60c2fea58 <col:20>
| `-OptimizeNoneAttr 0x55e60c2feab0 <col:30>
|-CXXMethodDecl 0x55e60c2feb58 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e60c2febf8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fec50 <col:30>
|-AccessSpecDecl 0x55e60c2fec78 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e60c2feca0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e60c2feda0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e60c2fedf0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c2fed80 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e60c2fed60 <col:14> 'int' 48
|-CXXMethodDecl 0x55e60c2fee58 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e60c2feef8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2fef50 <col:30>
|-CXXMethodDecl 0x55e60c2fefc8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e60c2ff068 <col:20>
| `-OptimizeNoneAttr 0x55e60c2ff0c0 <col:30>
|-CXXMethodDecl 0x55e60c2ff188 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e60c2ff0f8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e60c2ff328 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e60c2ff4c8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e60c2ff3d8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e60c2ff570 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e60c2ff670 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa20 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff650 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c2ff630 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e60c2ff700 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa38 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff6e0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e60c2ff6c0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e60c2ff790 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa50 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff770 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e60c2ff750 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e60c2ff820 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff800 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e60c2ff7e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e60c2ff8b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa80 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff890 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e60c2ff870 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e60c2ff940 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e60c2ffa98 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c2ff920 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e60c2ff900 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e60c2ff9d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e60c2ffab0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c2ff9b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e60c2ff990 <col:14> 'int' 6
|-CXXMethodDecl 0x55e60c2ffb18 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e60c2ffbb8 <col:20>
| `-OptimizeNoneAttr 0x55e60c2ffc10 <col:30>
|-CXXMethodDecl 0x55e60c2ffd08 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e60c2ffc48 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e60c2ffdb0 <col:20>
| `-OptimizeNoneAttr 0x55e60c2ffe08 <col:30>
|-CXXMethodDecl 0x55e60c2ffe78 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e60c2fffa0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e60c300118 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e60c300050 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e60c3001e0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e60c3002a8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e60c3003e8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e60c300358 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e60c300490 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e60c300590 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e60c300790 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c300570 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c300550 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e60c300620 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e60c3007a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c300600 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e60c3005e0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e60c3006b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e60c3007c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c300690 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c300670 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e60c300740 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e60c3007d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c300720 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e60c300700 <col:47> 'int' 16
|-CXXMethodDecl 0x55e60c300838 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e60c3009a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e60c3008e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e60c300a50 <col:20>
| `-OptimizeNoneAttr 0x55e60c300aa8 <col:30>
|-CXXMethodDecl 0x55e60c300af8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e60c314a00 <col:18, col:36>
|   `-ReturnStmt 0x55e60c3149f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e60c3149d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e60c3149b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e60c314988 <col:27> '<bound member function type>' ->xanno 0x55e60c2feb58
|           `-CXXThisExpr 0x55e60c314978 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e60c300bf0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e60c314b10 <col:30, col:48>
|   `-ReturnStmt 0x55e60c314b00 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e60c314ae8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e60c314ac8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e60c314a98 <col:39> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|           `-CXXThisExpr 0x55e60c314a88 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e60c300cd8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e60c314ca8 <col:24, col:50>
|   `-ReturnStmt 0x55e60c314c98 <col:26, col:47>
|     `-UnaryOperator 0x55e60c314c80 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e60c314c60 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e60c314c48 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e60c314bf8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e60c309ed8
|         |   `-CXXMemberCallExpr 0x55e60c314bd8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e60c314ba8 <col:34> '<bound member function type>' ->xanno 0x55e60c2feb58
|         |       `-CXXThisExpr 0x55e60c314b98 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e60c314c28 <col:46> 'int' 0
|-CXXMethodDecl 0x55e60c300de0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e60c314e78 <col:36, col:62>
|   `-ReturnStmt 0x55e60c314e68 <col:38, col:59>
|     `-UnaryOperator 0x55e60c314e50 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e60c314e30 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e60c314e18 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e60c314d90 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e60c309ed8
|         |   `-CXXMemberCallExpr 0x55e60c314d70 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e60c314d40 <col:46> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|         |       `-CXXThisExpr 0x55e60c314d30 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e60c314dc0 <col:58> 'int' 0
|-CXXMethodDecl 0x55e60c300ef8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e60c315010 <col:26, col:53>
|   `-ReturnStmt 0x55e60c315000 <col:28, col:50>
|     `-UnaryOperator 0x55e60c314fe8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e60c314fc8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e60c314fb0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e60c314f60 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e60c30a1d8
|         |   `-CXXMemberCallExpr 0x55e60c314f40 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e60c314f10 <col:36> '<bound member function type>' ->xanno 0x55e60c2feb58
|         |       `-CXXThisExpr 0x55e60c314f00 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e60c314f90 <col:49> 'int' 0
|-CXXMethodDecl 0x55e60c301018 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e60c3151e8 <col:38, col:65>
|   `-ReturnStmt 0x55e60c3151d8 <col:40, col:62>
|     `-UnaryOperator 0x55e60c3151c0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e60c3151a0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e60c315188 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e60c3150f8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e60c30a1d8
|         |   `-CXXMemberCallExpr 0x55e60c3150d8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e60c3150a8 <col:48> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|         |       `-CXXThisExpr 0x55e60c315098 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e60c315128 <col:61> 'int' 0
|-CXXMethodDecl 0x55e60c3011c8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e60c3010d0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e60c3158b8 <col:34, line:463:5>
|   |-ParenExpr 0x55e60c315700 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e60c3156d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c315338 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c315308 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c315258 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c315240 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c315200 <col:23> 'int' lvalue ParmVar 0x55e60c3010d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c315220 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c3152e8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c3152b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c315278 <col:33> 'int' lvalue ParmVar 0x55e60c3010d0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e60c3152d0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e60c315298 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e60c315398 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c315378 <col:56> 'int' 0
|   |   `-CallExpr 0x55e60c315630 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e60c315618 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c3155f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c315670 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c315488 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e60c315688 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3154b8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c3156a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c3154f0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e60c3156b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c3155e0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c3155c8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c315588 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e60c3158a8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e60c315890 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e60c315870 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e60c315840 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e60c3157f0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e60c309ed8
|         |   `-CXXMemberCallExpr 0x55e60c3157d0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e60c3157a0 <col:9> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|         |       `-CXXThisExpr 0x55e60c315790 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e60c315858 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e60c315820 <col:21> 'int' lvalue ParmVar 0x55e60c3010d0 'i' 'int'
|-CXXMethodDecl 0x55e60c301418 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e60c301288 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e60c301300 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e60c315f48 <col:40, line:472:5>
|   |-ParenExpr 0x55e60c315d60 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e60c315d30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c315a10 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c3159e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c315930 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c315918 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c3158d8 <col:23> 'int' lvalue ParmVar 0x55e60c301288 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c3158f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c3159c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c315990 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c315950 <col:33> 'int' lvalue ParmVar 0x55e60c301288 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e60c3159a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e60c315970 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e60c315a70 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c315a50 <col:56> 'int' 0
|   |   `-CallExpr 0x55e60c315c90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e60c315c78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c315c58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c315cd0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c315ae0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e60c315ce8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c315b10 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c315d00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c315b48 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e60c315d18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c315c40 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c315c28 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c315be8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e60c315f28 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e60c315ed0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e60c315ea0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e60c315e50 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e60c309ed8
|     | |   `-CXXMemberCallExpr 0x55e60c315e30 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e60c315e00 <col:2> '<bound member function type>' ->xanno 0x55e60c2feb58
|     | |       `-CXXThisExpr 0x55e60c315df0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e60c315eb8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e60c315e80 <col:14> 'int' lvalue ParmVar 0x55e60c301288 'i' 'int'
|     `-ImplicitCastExpr 0x55e60c315f10 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c315ef0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e60c301300 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e60c3015d8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e60c3014e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e60c3166c8 <col:36, line:485:5>
|   |-ParenExpr 0x55e60c316430 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c316400 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c3160e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c3160b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c315fc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c315fa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c315f68 <col:23> 'int' lvalue ParmVar 0x55e60c3014e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c315f88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c316090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c316078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c315fe0 <col:33> 'int' lvalue ParmVar 0x55e60c3014e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c316058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c316040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c316000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c316020 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e60c316140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c316120 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c316360 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c316348 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c316328 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c3163a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3161b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e60c3163b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3161e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c3163d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c316220 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e60c3163e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c316310 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c3162f8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c3162b8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e60c3166b8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e60c3166a0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e60c316688 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c316658 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e60c3165f8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c3165c8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c316540 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c316520 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c3164f0 <col:61> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c3164e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c3165e0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c316570 <col:74> 'int' lvalue ParmVar 0x55e60c3014e0 'i' 'int'
|-CXXMethodDecl 0x55e60c301828 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e60c301698 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e60c301710 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e60c316e18 <col:42, line:500:5>
|   |-ParenExpr 0x55e60c316bb0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c316b80 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c316860 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c316830 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c316740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c316728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c3166e8 <col:23> 'int' lvalue ParmVar 0x55e60c301698 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c316708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c316810 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c3167f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c316760 <col:33> 'int' lvalue ParmVar 0x55e60c301698 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c3167d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c3167c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c316780 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c3167a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e60c3168c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c3168a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c316ae0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c316ac8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c316aa8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c316b20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c316930 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e60c316b38 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c316968 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c316b50 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c3169a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e60c316b68 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c316a90 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c316a78 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c316a38 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e60c316df8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e60c316da8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e60c316d78 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e60c316d20 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e60c316cf0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e60c316ca0 <col:48, col:57> 'char [48]' lvalue ->c 0x55e60c309db0
|     |     |   `-CXXMemberCallExpr 0x55e60c316c80 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e60c316c50 <col:48> '<bound member function type>' ->xanno 0x55e60c2feb58
|     |     |       `-CXXThisExpr 0x55e60c316c40 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e60c316d08 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e60c316cd0 <col:61> 'int' lvalue ParmVar 0x55e60c301698 'i' 'int'
|     `-ImplicitCastExpr 0x55e60c316de0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c316dc0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e60c301710 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e60c3019e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e60c3018f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e60c317578 <col:35, line:513:5>
|   |-ParenExpr 0x55e60c317288 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c317258 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c316fb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c316f80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c316e90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c316e78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c316e38 <col:23> 'int' lvalue ParmVar 0x55e60c3018f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c316e58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c316f60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c316f48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c316eb0 <col:33> 'int' lvalue ParmVar 0x55e60c3018f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c316f28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c316f10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c316ed0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c316ef0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e60c317010 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c316ff0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c3171b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c3171a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c317180 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c3171f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c317080 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e60c317210 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3170b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c317228 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c3170f0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e60c317240 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c317168 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c317150 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c317110 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e60c317568 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e60c317550 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e60c317538 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c317508 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e60c317480 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c317450 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c317400 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c3173e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c3173b0 <col:60> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c3173a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c317468 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c317430 <col:73> 'int' lvalue ParmVar 0x55e60c3018f0 'i' 'int'
|-CXXMethodDecl 0x55e60c301c38 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e60c301aa8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e60c301b20 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e60c317c98 <col:41, line:528:5>
|   |-ParenExpr 0x55e60c317a20 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c3179f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c317710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c3176e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c3175f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c3175d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c317598 <col:23> 'int' lvalue ParmVar 0x55e60c301aa8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c3175b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c3176c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c3176a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c317610 <col:33> 'int' lvalue ParmVar 0x55e60c301aa8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c317688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c317670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c317630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c317650 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e60c317770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c317750 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c317950 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c317938 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c317918 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c317990 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3177e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e60c3179a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c317818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c3179c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c317850 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e60c3179d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c317900 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c3178e8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c3178a8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e60c317c78 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e60c317c28 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e60c317bf8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e60c317ba0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e60c317b60 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e60c317b10 <col:47, col:56> 'char [48]' lvalue ->c 0x55e60c309db0
|     |     |   `-CXXMemberCallExpr 0x55e60c317af0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e60c317ac0 <col:47> '<bound member function type>' ->xanno 0x55e60c2feb58
|     |     |       `-CXXThisExpr 0x55e60c317ab0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e60c317b78 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e60c317b40 <col:60> 'int' lvalue ParmVar 0x55e60c301aa8 'i' 'int'
|     `-ImplicitCastExpr 0x55e60c317c60 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c317c40 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e60c301b20 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e60c301df8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e60c301d00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e60c318368 <col:36, line:541:5>
|   |-ParenExpr 0x55e60c318108 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c3180d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c317e30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c317e00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c317d10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c317cf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c317cb8 <col:23> 'int' lvalue ParmVar 0x55e60c301d00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c317cd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c317de0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c317dc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c317d30 <col:33> 'int' lvalue ParmVar 0x55e60c301d00 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c317da8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c317d90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c317d50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c317d70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e60c317e90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c317e70 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c318038 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c318020 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c318000 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c318078 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c317f00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e60c318090 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c317f38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c3180a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c317f70 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e60c3180c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c317fe8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c317fd0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c317f90 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e60c318358 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e60c318340 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e60c318328 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c3182f8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e60c3182a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c318270 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c318220 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c318200 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c3181d0 <col:61> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c3181c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c318288 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c318250 <col:74> 'int' lvalue ParmVar 0x55e60c301d00 'i' 'int'
|-CXXMethodDecl 0x55e60c301fc8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e60c301eb8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e60c301f30 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e60c302078 <col:20>
| `-OptimizeNoneAttr 0x55e60c3020d0 <col:30>
|-CXXMethodDecl 0x55e60c302208 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e60c302110 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e60c318a38 <col:35, line:562:5>
|   |-ParenExpr 0x55e60c3187d8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c3187a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c318500 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c3184d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c3183e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c3183c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c318388 <col:23> 'int' lvalue ParmVar 0x55e60c302110 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c3183a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c3184b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c318498 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c318400 <col:33> 'int' lvalue ParmVar 0x55e60c302110 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c318478 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c318460 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c318420 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c318440 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e60c318560 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c318540 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c318708 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c3186f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c3186d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c318748 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3185d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e60c318760 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c318608 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c318778 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c318640 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e60c318790 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c3186b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c3186a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c318660 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e60c318a28 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e60c318a10 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e60c3189f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c3189c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e60c318970 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c318940 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c3188f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c3188d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c3188a0 <col:60> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c318890 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c318958 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c318920 <col:73> 'int' lvalue ParmVar 0x55e60c302110 'i' 'int'
|-CXXMethodDecl 0x55e60c302418 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e60c3022c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e60c302340 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e60c319118 <col:41, line:577:5>
|   |-ParenExpr 0x55e60c318ea8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c318e78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c318bd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c318ba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c318ab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c318a98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c318a58 <col:23> 'int' lvalue ParmVar 0x55e60c3022c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c318a78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c318b80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c318b68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c318ad0 <col:33> 'int' lvalue ParmVar 0x55e60c3022c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c318b48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c318b30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c318af0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c318b10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e60c318c30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c318c10 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c318dd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c318dc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c318da0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c318e18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c318ca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e60c318e30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c318cd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c318e48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c318d10 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e60c318e60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c318d88 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c318d70 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c318d30 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e60c3190f8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e60c3190a8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e60c319078 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e60c319018 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e60c318fe8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e60c318f98 <col:47, col:56> 'char [48]' lvalue ->c 0x55e60c309db0
|     |     |   `-CXXMemberCallExpr 0x55e60c318f78 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e60c318f48 <col:47> '<bound member function type>' ->xanno 0x55e60c2feb58
|     |     |       `-CXXThisExpr 0x55e60c318f38 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e60c319000 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e60c318fc8 <col:60> 'int' lvalue ParmVar 0x55e60c3022c8 'i' 'int'
|     `-ImplicitCastExpr 0x55e60c3190e0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c3190c0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e60c302340 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e60c3025d8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e60c3024e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e60c319848 <col:36, line:591:5>
|   |-ParenExpr 0x55e60c319588 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c319558 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c3192b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c319280 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c319190 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c319178 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c319138 <col:23> 'int' lvalue ParmVar 0x55e60c3024e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c319158 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c319260 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c319248 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c3191b0 <col:33> 'int' lvalue ParmVar 0x55e60c3024e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c319228 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c319210 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c3191d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c3191f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e60c319310 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c3192f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c3194b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c3194a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c319480 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c3194f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c319380 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e60c319510 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c3193b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c319528 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c3193f0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e60c319540 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c319468 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c319450 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c319410 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e60c319838 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e60c319820 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e60c319808 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c3197d8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e60c319750 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c319720 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c3196d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c3196b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c319680 <col:61> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c319670 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c319738 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c319700 <col:74> 'int' lvalue ParmVar 0x55e60c3024e0 'i' 'int'
|-CXXMethodDecl 0x55e60c302828 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e60c302698 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e60c302710 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e60c319f28 <col:42, line:606:5>
|   |-ParenExpr 0x55e60c319cb8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e60c319c88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c3199e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c3199b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c3198c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c3198a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c319868 <col:23> 'int' lvalue ParmVar 0x55e60c302698 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c319888 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c319990 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e60c319978 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c3198e0 <col:33> 'int' lvalue ParmVar 0x55e60c302698 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c319958 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c319940 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c319900 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e60c319920 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e60c319a40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c319a20 <col:60> 'int' 0
|   |   `-CallExpr 0x55e60c319be8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e60c319bd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c319bb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c319c28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c319ab0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e60c319c40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c319ae8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c319c58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c319b20 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e60c319c70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c319b98 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c319b80 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c319b40 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e60c319f08 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e60c319eb8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e60c319e88 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e60c319e28 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e60c319df8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e60c319da8 <col:48, col:57> 'char [48]' lvalue ->c 0x55e60c309db0
|     |     |   `-CXXMemberCallExpr 0x55e60c319d88 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e60c319d58 <col:48> '<bound member function type>' ->xanno 0x55e60c2feb58
|     |     |       `-CXXThisExpr 0x55e60c319d48 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e60c319e10 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e60c319dd8 <col:61> 'int' lvalue ParmVar 0x55e60c302698 'i' 'int'
|     `-ImplicitCastExpr 0x55e60c319ef0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e60c319ed0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e60c302710 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e60c3029c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e60c3028f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e60c31a798 <col:33, line:620:5>
|   |-ParenExpr 0x55e60c31a510 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e60c31a4e0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c31a130 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c31a100 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c319fa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c319f88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c319f48 <col:23> 'int' lvalue ParmVar 0x55e60c3028f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c319f68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c31a0e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e60c31a0c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c319fc0 <col:33> 'int' lvalue ParmVar 0x55e60c3028f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c31a0a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c31a090 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c319fe0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e60c31a068 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e60c31a050 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e60c31a018 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e60c31a190 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c31a170 <col:79> 'int' 0
|   |   `-CallExpr 0x55e60c31a440 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e60c31a428 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c31a408 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c31a480 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c31a278 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e60c31a498 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c31a2c0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c31a4b0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c31a2f8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e60c31a4c8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c31a3f0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c31a3d8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c31a398 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e60c31a788 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e60c31a770 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e60c31a758 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e60c31a728 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e60c31a6a0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e60c31a670 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e60c31a620 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e60c309db0
|             |   `-CXXMemberCallExpr 0x55e60c31a600 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e60c31a5d0 <col:67> '<bound member function type>' ->xanno 0x55e60c2fe9b8
|             |       `-CXXThisExpr 0x55e60c31a5c0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e60c31a688 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e60c31a650 <col:80> 'int' lvalue ParmVar 0x55e60c3028f0 'i' 'int'
|-CXXMethodDecl 0x55e60c302bd8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e60c302a80 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e60c302b00 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e60c31afc0 <col:45, line:635:5>
|   |-ParenExpr 0x55e60c31ad08 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e60c31acd8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e60c31a9a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e60c31a970 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e60c31a810 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e60c31a7f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e60c31a7b8 <col:23> 'int' lvalue ParmVar 0x55e60c302a80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e60c31a7d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e60c31a950 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e60c31a938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e60c31a830 <col:33> 'int' lvalue ParmVar 0x55e60c302a80 'i' 'int'
|   |   |     `-BinaryOperator 0x55e60c31a918 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e60c31a900 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e60c31a850 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e60c2feda0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e60c31a8d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e60c31a8c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e60c31a888 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e60c31aa00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e60c31a9e0 <col:79> 'int' 0
|   |   `-CallExpr 0x55e60c31ac38 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e60c31ac20 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e60c31ac00 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e60be6b230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e60c31ac78 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c31aa70 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e60c31ac90 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e60c31aab8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e60c31aca8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e60c31aaf0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e60c31acc0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e60c31abe8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e60c31abd0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e60c31ab88 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e60c31afa0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e60c31af08 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e60c31aed8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e60c31ae78 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e60c31ae48 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e60c31adf8 <col:54, col:63> 'char [48]' lvalue ->c 0x55e60c309db0
|     |     |   `-CXXMemberCallExpr 0x55e60c31add8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e60c31ada8 <col:54> '<bound member function type>' ->xanno 0x55e60c2feb58
|     |     |       `-CXXThisExpr 0x55e60c31ad98 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e60c31ae60 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e60c31ae28 <col:67> 'int' lvalue ParmVar 0x55e60c302a80 'i' 'int'
|     `-CXXConstCastExpr 0x55e60c31af70 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e60c31af58 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e60c31af20 <col:91> 'const void *' lvalue ParmVar 0x55e60c302b00 'x' 'const void *'
|-CXXMethodDecl 0x55e60c302ca8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e60c31b048 <col:34, line:640:5>
|   `-ReturnStmt 0x55e60c31b038 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e60c31b020 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e60c31aff0 <col:16> 'Packet *' lvalue ->_data_packet 0x55e60c30a968
|         `-CXXThisExpr 0x55e60c31afe0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e60c302de8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e60c302d58 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e60c314108 <col:46> 'bool' true
|-CXXMethodDecl 0x55e60c302f68 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e60c302ea0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e60c303010 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e60c3037c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e60c303110 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303830 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3030f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e60c3030d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e60c2f8270 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e60c3031a0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303848 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c303180 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e60c303160 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e60c2f8300 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e60c303230 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303860 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c303210 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c3031f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e60c3032c0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303878 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3032a0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e60c303280 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e60c303350 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303890 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c303330 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e60c303310 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e60c3033e0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c3038a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3033c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e60c3033a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e60c303470 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c3038c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c303450 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e60c303430 <col:19> 'int' EnumConstant 0x55e60c3032c0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e60c303500 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c3038d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3034e0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e60c3034c0 <col:19> 'int' EnumConstant 0x55e60c3033e0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e60c3035d0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c3038f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3035b0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e60c303590 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e60c303550 <col:23> 'int' EnumConstant 0x55e60c303500 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e60c303570 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e60c3036a0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e60c303908 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c303680 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e60c303660 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e60c303620 <col:23> 'int' EnumConstant 0x55e60c303500 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e60c303640 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e60c303770 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e60c303920 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e60c303750 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e60c303730 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e60c3036f0 <col:23> 'int' EnumConstant 0x55e60c303500 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e60c303710 <col:40> 'int' 8
|-CXXMethodDecl 0x55e60c303960 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e60c303a00 <col:68> "" ""
|-CXXMethodDecl 0x55e60c303a98 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e60c303b38 <col:45> "" ""
|-CXXMethodDecl 0x55e60c303bd0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e60c303c70 <col:57> "" ""
|-CXXMethodDecl 0x55e60c303d08 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e60c303da8 <col:45> "" ""
|-CXXMethodDecl 0x55e60c303e40 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e60c303ee0 <col:57> "" ""
|-CXXMethodDecl 0x55e60c303f70 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e60c304010 <col:51> "" ""
|-CXXMethodDecl 0x55e60c3040a0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e60c304140 <col:63> "" ""
|-CXXMethodDecl 0x55e60c3041d0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e60c304270 <col:53> "" ""
|-CXXMethodDecl 0x55e60c304300 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e60c3043a0 <col:65> "" ""
|-CXXMethodDecl 0x55e60c3044b8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e60c304428 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e60c304560 <col:61> "" ""
|-CXXMethodDecl 0x55e60c3046f8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e60c3045e8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e60c304660 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e60c3047a8 <col:67> "" ""
|-CXXMethodDecl 0x55e60c3048c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e60c304830 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e60c304968 <col:63> "" ""
|-CXXMethodDecl 0x55e60c304b00 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e60c3049f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e60c304a68 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e60c304bb0 <col:69> "" ""
|-CXXMethodDecl 0x55e60c304cc8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e60c304c38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e60c304d70 <col:63> "" ""
|-CXXMethodDecl 0x55e60c307988 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e60c307878 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e60c3078f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e60c307a38 <col:69> "" ""
|-CXXMethodDecl 0x55e60c307b50 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e60c307ac0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e60c307bf8 <col:62> "" ""
|-CXXMethodDecl 0x55e60c307d90 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e60c307c80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e60c307cf8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e60c307e40 <col:68> "" ""
|-CXXMethodDecl 0x55e60c307f58 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e60c307ec8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e60c308000 <col:63> "" ""
|-CXXMethodDecl 0x55e60c308198 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e60c308088 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e60c308100 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e60c308248 <col:69> "" ""
|-CXXMethodDecl 0x55e60c3082d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e60c308378 <col:64> "" ""
|-CXXMethodDecl 0x55e60c308408 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e60c3084a8 <col:52> "" ""
|-CXXMethodDecl 0x55e60c308538 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e60c3085d8 <col:67> "" ""
|-CXXMethodDecl 0x55e60c308668 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e60c308708 <col:55> "" ""
|-CXXMethodDecl 0x55e60c308820 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e60c308790 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e60c3088c8 <col:58> "" ""
|-CXXMethodDecl 0x55e60c308a60 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e60c308950 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e60c3089c8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e60c308b10 <col:62> "" ""
|-CXXMethodDecl 0x55e60c308c28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e60c308b98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e60c308cd0 <col:58> "" ""
|-CXXMethodDecl 0x55e60c308e68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e60c308d58 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e60c308dd0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e60c308f18 <col:62> "" ""
|-CXXMethodDecl 0x55e60c309030 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e60c308fa0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e60c3090d8 <col:60> "" ""
|-CXXMethodDecl 0x55e60c309270 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e60c309160 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e60c3091d8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e60c309320 <col:64> "" ""
|-CXXMethodDecl 0x55e60c309438 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e60c3093a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e60c3094e0 <col:58> "" ""
|-CXXMethodDecl 0x55e60c309678 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e60c309568 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e60c3095e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e60c309728 <col:62> "" ""
|-CXXMethodDecl 0x55e60c309840 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e60c3097b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e60c3098e8 <col:59> "" ""
|-CXXMethodDecl 0x55e60c309a80 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e60c309970 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e60c3099e8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e60c309b30 <col:63> "" ""
|-AccessSpecDecl 0x55e60c309ba0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e60c309bc8 prev 0x55e60c2fe890 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e60c309cc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e60c309db0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e60c309ed8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e60c30a058 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e60c30a1d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e60c30a358 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e60c31b1c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e60c31ba38 <col:11>
| |-CXXDestructorDecl 0x55e60c31b2a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e60c31b3d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e60c31b3d8
| | `-ParmVarDecl 0x55e60c31b4e8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e60c31b588 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e60c31b588
| | `-ParmVarDecl 0x55e60c31b698 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e60c320e68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e60c320f78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e60c3211f8 <col:11>
| |   `-ReturnStmt 0x55e60c3211e8 <col:11>
| |     `-UnaryOperator 0x55e60c3211d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e60c3211c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e60c320fe8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e60c320fe8
|   `-ParmVarDecl 0x55e60c3210f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e60c30a3c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e60c30a4d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e60c30a578 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e60c30a5e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e60c30a648 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e60c30a6b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e60c30a710 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e60c30a7d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e60c30a830 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e60c30a890 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e60c31b0d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e60c30a578 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e60c31ba48 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e60c31baa0 <col:12>
| |-CXXConstructorDecl 0x55e60c31b708 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e60c31b708
| | `-ParmVarDecl 0x55e60c31b818 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e60c31b8b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e60c31b8b8
| | `-ParmVarDecl 0x55e60c31b9c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e60c320550 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e60c30a908 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e60c30a968 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e60c30a9d0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e60c30aa38 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e60c30aaa0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e60c30ab08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e60c30ab68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e60c30abc8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e60c30ac30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e60c30acb8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e60c30a908 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e60c31b070 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e60c30ab68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e60c31bab0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e60c31bb10 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e60c30ae58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e60c30ad98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e60c30af50 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e60c30b138 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e60c30b040 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e60c30b408 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e60c30b1f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c30b268 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e60c30b2e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c30b628 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e60c30b4d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e60c30b550 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e60c313c48 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e60c30b6e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e60c30b760 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e60c30b7d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e60c313da0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e60c313d10 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c313ee8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e60c313e58 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e60c313fe0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c31e5c0 prev 0x55e60c2f7ef0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55e60c31e6f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55e60c31e788 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55e60c31e830 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55e60c31e8d0 <col:20>
| `-OptimizeNoneAttr 0x55e60c31e928 <col:30>
|-CXXMethodDecl 0x55e60c31e978 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55e60c31ea18 <col:20>
| `-OptimizeNoneAttr 0x55e60c31ea70 <col:30>
|-CXXMethodDecl 0x55e60c31eac0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c31eb88 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c31ec50 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c31ed68 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55e60c31ee30 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55e60c31eed0 <col:20>
| `-OptimizeNoneAttr 0x55e60c31ef28 <col:30>
|-CXXMethodDecl 0x55e60c31ef98 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55e60c31f038 <col:20>
| `-OptimizeNoneAttr 0x55e60c31f090 <col:30>
|-CXXMethodDecl 0x55e60c31f138 <line:788:5, col:64> col:51 used ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55e60c31f1d8 <col:20>
| `-OptimizeNoneAttr 0x55e60c31f230 <col:30>
|-CXXMethodDecl 0x55e60c31f280 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e60c31f398 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55e60c31f4b8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55e60c31f5d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55e60c31f6a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55e60c31f740 <col:62> "" ""
|-AccessSpecDecl 0x55e60c31f7b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55e60c31f810 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55e60c320408 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55e60c320630 <col:29, col:31>
|-CXXMethodDecl 0x55e60c31f8d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55e60c31fa18 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55e60c31f988 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55e60c31fb10 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55e60c320640 <col:23, col:25>
|-CXXMethodDecl 0x55e60c31fcc8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55e60c31fc00 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55e60c31ff98 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e60c31fd80 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e60c31fdf8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e60c31fe70 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e60c320128 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55e60c320060 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55e60c320220 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55e60c320288 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55e60c320288
  `-ParmVarDecl 0x55e60c320398 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c34bc68 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e60c34bd98 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x55e60c34bdf8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x55e60c34be58 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x55e60c34beb8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c34c040 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e60c34c1b0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x55e60c34c190 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x55e60c34c158 <col:28> 'int' 4
`-FieldDecl 0x55e60c34c258 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x55e60c34c238 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x55e60c34c200 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.2 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c34bb50 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e60c34bc68 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e60c34bd98 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e60c34bdf8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x55e60c34be58 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x55e60c34beb8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x55e60c34bf78 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x55e60c34bff0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55e60c34c040 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e60c34c1b0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x55e60c34c190 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x55e60c34c158 <col:28> 'int' 4
| `-FieldDecl 0x55e60c34c258 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x55e60c34c238 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x55e60c34c200 <col:27> 'int' 4
`-FieldDecl 0x55e60c34c318 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c06faf8 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55e60c06fd18 <line:216:2, col:23> col:10 __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55e60c06fe48 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
`-FieldDecl 0x55e60c06ff78 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c00e290 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e60c06fa68 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55e60c06faf8 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55e60c06fd18 <line:216:2, col:23> col:10 __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55e60c06fe48 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| `-FieldDecl 0x55e60c06ff78 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
`-FieldDecl 0x55e60c070038 <line:214:5, line:219:9> col:9 __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon.3 }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c34b9c8 prev 0x55e60c2f7c30 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e60c34bac0 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x55e60c34bb50 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e60c34bc68 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55e60c34bd98 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x55e60c34bdf8 <line:24:6, col:15> col:15 ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x55e60c34be58 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x55e60c34beb8 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x55e60c34bf78 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x55e60c34bff0 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x55e60c34c040 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x55e60c34c1b0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x55e60c34c190 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x55e60c34c158 <col:28> 'int' 4
| | `-FieldDecl 0x55e60c34c258 <line:36:6, col:27> col:15 ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x55e60c34c238 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x55e60c34c200 <col:27> 'int' 4
| `-FieldDecl 0x55e60c34c318 <line:30:2, line:38:4> col:4 ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x55e60c34c4c8 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x55e60c34c550 <line:40:5, col:21> col:21 ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x55e60c34c5c0 <line:41:5, col:21> col:21 ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c3efe70 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e60c3eff88 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55e60c3f0018 <col:16, col:22> col:16 public
|-EnumDecl 0x55e60c3f0040 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55e60c3f0140 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e60c3f0390 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3f0120 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e60c3f0100 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e60c3f01d0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e60c3f03a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3f01b0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55e60c3f0190 <col:24> 'int' 22
| |-EnumConstantDecl 0x55e60c3f0260 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e60c3f03c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3f0240 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55e60c3f0220 <col:24> 'int' 34
| |-EnumConstantDecl 0x55e60c3f02f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e60c3f03d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e60c3f02d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55e60c3f02b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55e60c3f0340 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55e60c3f1d60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e60c3f2198 <col:7>
|-CXXConstructorDecl 0x55e60c3f1e68 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55e60c3f1e68
| `-ParmVarDecl 0x55e60c3f1f78 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55e60c3f2018 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c3f2128 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55e60c4545a0 <col:7>
`-CXXDestructorDecl 0x55e60c3f4298 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e60c3f0408 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55e60c3f0568 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55e60c3f05f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55e60c3f0630 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55e60bf24780 'uint32_t' sugar
|   |-Typedef 0x55e60be384c8 'uint32_t'
|   `-TypedefType 0x55e60be115a0 '__uint32_t' sugar
|     |-Typedef 0x55e60be11198 '__uint32_t'
|     `-BuiltinType 0x55e60bdcf620 'unsigned int'
|-CXXConstructorDecl 0x55e60c3f0778 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55e60c3f06a0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55e60c3f1c68 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e60c3f21a8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e60c3f1520 'base' 'int'
| | `-ImplicitCastExpr 0x55e60c3f1d08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e60c3f1cc8 <col:16> 'int' lvalue ParmVar 0x55e60c3f06a0 'b' 'int'
| `-CompoundStmt 0x55e60c3f2218 <col:19, line:1046:5>
|-CXXMethodDecl 0x55e60c3f0c70 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55e60c3f0840 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55e60c3f08c0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55e60c3f0938 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55e60c3f09b8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55e60c3f0a78 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55e60c3f0af8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55e60c3f10d8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55e60c3f0d40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e60c3f1038 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e60c3f0de8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55e60c3f0ea0 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55e60c3f0f18 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e60c3f1c88 <col:82> 'const ArgContext' lvalue Var 0x55e60c3e5848 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e60c3f3148 <col:94, line:1067:5>
| |   |-DeclStmt 0x55e60c3f23a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55e60c3f2238 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55e60c3f2360 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55e60c3f25c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55e60c3f23d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55e60c3f25a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55e60c3f2580 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55e60c3f2530 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55e60c3f2510 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55e60c3f24b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55e60c3f2468 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55e60c3f2498 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55e60c3f24f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55e60c3f24d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55e60c3f2560 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55e60c3f2728 <line:1056:9, col:27>
| |   | `-VarDecl 0x55e60c3f26c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55e60c3f2b70 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55e60c3f2aa0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55e60c3f2a20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e60c2eeba8 0x55e60c138188 0x55e60c137e60 0x55e60c128630 0x55e60c1282e0 0x55e60c127bd0 0x55e60c0fa540 0x55e60c0875d0
| |   | | |-CallExpr 0x55e60c3f2960 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55e60c3f2750 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55e60c3f2800 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e60c3f27d0 <col:19, col:23> '<bound member function type>' .begin 0x55e60c117838
| |   | | | |   `-DeclRefExpr 0x55e60c3f27b0 <col:19> 'const String' lvalue ParmVar 0x55e60c3f0de8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55e60c3f2870 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e60c3f2840 <col:32, col:36> '<bound member function type>' .end 0x55e60c117a50
| |   | | | |   `-DeclRefExpr 0x55e60c3f2820 <col:32> 'const String' lvalue ParmVar 0x55e60c3f0de8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55e60c3f2890 <col:43> 'const bool' lvalue Var 0x55e60c3f2238 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55e60c3f28f8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55e60c3f28d8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55e60c3f2920 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e60c3f26c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55e60c3f2940 <col:73> 'const int' lvalue Var 0x55e60c3f23d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55e60c3f2a00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55e60c3f29d0 <col:16, col:20> '<bound member function type>' .end 0x55e60c117a50
| |   | |     `-DeclRefExpr 0x55e60c3f29b0 <col:16> 'const String' lvalue ParmVar 0x55e60c3f0de8 'str' 'const String &'
| |   | `-BinaryOperator 0x55e60c3f2b50 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55e60c3f2ae8 <col:13> 'int' lvalue ->status 0x55e60c3f1588
| |   |   | `-CXXThisExpr 0x55e60c3f2ad8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55e60c3f2b38 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55e60c3f2b18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f01d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55e60c3f2dc0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55e60c3f2ca8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55e60c3f2c90 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55e60c3f2c78 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55e60c3f2b98 <col:13> 'int' lvalue ->status 0x55e60c3f1588
| |   | | |     `-CXXThisExpr 0x55e60c3f2b88 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55e60c3f2c58 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55e60c3f2c28 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55e60c3f2bd8 <col:23> 'int' lvalue ->status 0x55e60c3f1588
| |   | |   |   `-CXXThisExpr 0x55e60c3f2bc8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55e60c3f2c40 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55e60c3f2c08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55e60c3f2da0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55e60c3f2d40 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55e60c3f2ce8 <col:13, col:18> '<bound member function type>' .error 0x55e60c2b41b0
| |   |   | | `-DeclRefExpr 0x55e60c3f2cc8 <col:13> 'const ArgContext' lvalue ParmVar 0x55e60c3f0f18 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55e60c3f2d68 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55e60c3f2d18 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55e60c3f2d90 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55e60c3f2d80 <col:20> 'bool' false
| |   |-DeclStmt 0x55e60c3f2f98 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55e60c3f2f40 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55e60c3f2ed0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55e60c3f30f8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55e60c3f2fb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55e60c0bb9d8
| |   | |-DeclRefExpr 0x55e60c3f2ff8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e60c3f26c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55e60c3f30c8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55e60c3f3040 <col:64> 'V' lvalue ParmVar 0x55e60c3f0ea0 'result' 'V &'
| |   `-ReturnStmt 0x55e60c3f3138 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55e60c3f3128 <col:16> 'bool' true
| `-CXXMethodDecl 0x55e60c458118 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55e60c457ef0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55e60c457fc8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55e60c458030 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e60c459eb0 <col:94, line:1067:5>
|     |-DeclStmt 0x55e60c458928 <line:1054:9, col:64>
|     | `-VarDecl 0x55e60c458748 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55e60c4588b8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55e60c458888 <col:36, col:55> 'const bool' lvalue Var 0x55e60c0aa9d0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55e60c458b08 <line:1055:9, col:91>
|     | `-VarDecl 0x55e60c458940 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55e60c458a88 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55e60c458a70 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55e60c458a50 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55e60c458a30 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55e60c458a10 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55e60c4589d8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55e60c4589b8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55e60c3f2498 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55e60c4589f8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55e60c3f24d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55e60c3f2560 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55e60c458ca0 <line:1056:9, col:27>
|     | `-VarDecl 0x55e60c458c38 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55e60c459128 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55e60c4590d0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55e60c458f88 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55e60c458f58 <col:13> '<bound member function type>' ->parse 0x55e60c3f0c70
|     | | | | `-CXXThisExpr 0x55e60c458f48 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55e60c458de8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e60c458db8 <col:19, col:23> '<bound member function type>' .begin 0x55e60c117838
|     | | | |   `-DeclRefExpr 0x55e60c458d98 <col:19> 'const String' lvalue ParmVar 0x55e60c457ef0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55e60c458e58 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e60c458e28 <col:32, col:36> '<bound member function type>' .end 0x55e60c117a50
|     | | | |   `-DeclRefExpr 0x55e60c458e08 <col:32> 'const String' lvalue ParmVar 0x55e60c457ef0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55e60c458ff8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55e60c458fd8 <col:43> 'const bool' lvalue Var 0x55e60c458748 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55e60c458ee0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55e60c458ec8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55e60c458ea8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55e60c459010 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55e60c458f08 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55e60c458c38 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55e60c459048 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55e60c459028 <col:73> 'const int' lvalue Var 0x55e60c458940 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55e60c4590b0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55e60c459080 <col:16, col:20> '<bound member function type>' .end 0x55e60c117a50
|     | |     `-DeclRefExpr 0x55e60c459060 <col:16> 'const String' lvalue ParmVar 0x55e60c457ef0 'str' 'const String &'
|     | `-BinaryOperator 0x55e60c459108 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55e60c3f2ae8 <col:13> 'int' lvalue ->status 0x55e60c3f1588
|     |   | `-CXXThisExpr 0x55e60c3f2ad8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55e60c4590f0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55e60c3f2b18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f01d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55e60c4592a0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55e60c4591c0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55e60c4591a8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55e60c459190 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55e60c3f2b98 <col:13> 'int' lvalue ->status 0x55e60c3f1588
|     | | |     `-CXXThisExpr 0x55e60c3f2b88 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55e60c459170 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55e60c459140 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55e60c3f2bd8 <col:23> 'int' lvalue ->status 0x55e60c3f1588
|     | |   |   `-CXXThisExpr 0x55e60c3f2bc8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55e60c459158 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55e60c3f2c08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55e60c459280 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55e60c459230 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55e60c459200 <col:13, col:18> '<bound member function type>' .error 0x55e60c2b41b0
|     |   | | `-DeclRefExpr 0x55e60c4591e0 <col:13> 'const ArgContext' lvalue ParmVar 0x55e60c458030 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55e60c459258 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55e60c3f2d18 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55e60c459270 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55e60c3f2d80 <col:20> 'bool' false
|     |-DeclStmt 0x55e60c4597e8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55e60c459790 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55e60c459740 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55e60c459720 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55e60c4596b0 'type'
|     |       `-ElaboratedType 0x55e60c459660 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55e60c459640 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55e60c0aab28 'unsigned_type'
|     |           `-BuiltinType 0x55e60bdcf620 'unsigned int'
|     |-CallExpr 0x55e60c459e40 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55e60c459e28 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55e60c459da8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55e60c459c88 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55e60c0bb9d8 'extract_integer')
|     | |-ImplicitCastExpr 0x55e60c459e88 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55e60c459e70 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55e60c459848 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55e60c458c38 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55e60c459918 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55e60c4598c8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55e60c457fc8 'result' 'unsigned int &'
|     `-ReturnStmt 0x55e60c459ea0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55e60c3f3128 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55e60c3f1498 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55e60c3f1148 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e60c3f13f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e60c3f11f8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55e60c3f1298 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55e60c3f1310 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e60c3f1ca8 <col:71> 'const ArgContext' lvalue Var 0x55e60c3e5848 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e60c3f38b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55e60c3f3210 <line:1071:9, col:12>
| |   | `-VarDecl 0x55e60c3f31a8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55e60c3f3890 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55e60c3f34a0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55e60c3f3328 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55e60c3f32f0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55e60c3f3238 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55e60c3f3290 <col:31> 'const String' lvalue ParmVar 0x55e60c3f11f8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55e60c3f32b0 <col:36> 'V' lvalue Var 0x55e60c3f31a8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55e60c3f32d0 <col:39> 'const ArgContext' lvalue ParmVar 0x55e60c3f1310 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55e60c3f3480 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55e60c3f3460 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55e60c3f3448 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55e60c3f3430 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55e60c3f3350 <col:17> 'int' lvalue ->status 0x55e60c3f1588
| |     |     |     `-CXXThisExpr 0x55e60c3f3340 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55e60c3f3410 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55e60c3f33e0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55e60c3f3390 <col:27> 'int' lvalue ->status 0x55e60c3f1588
| |     |       |   `-CXXThisExpr 0x55e60c3f3380 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55e60c3f33f8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55e60c3f33c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55e60c3f34d0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55e60c3f34c0 <col:20> 'bool' false
| |     `-IfStmt 0x55e60c3f3868 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55e60c3f3570 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55e60c3f3540 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55e60c3f34f0 <col:18> 'int' lvalue ->status 0x55e60c3f1588
| |       | |   `-CXXThisExpr 0x55e60c3f34e0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55e60c3f3558 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55e60c3f3520 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55e60c3f37a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55e60c3f3750 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55e60c3f35a0 <line:1076:13> '<bound member function type>' ->range_error 0x55e60c3f1b98
| |       | | | `-CXXThisExpr 0x55e60c3f3590 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55e60c3f35d0 <col:25> 'const ArgContext' lvalue ParmVar 0x55e60c3f1310 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55e60c3f36b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55e60c3f3728 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55e60c3f3708 <col:43> 'V' lvalue Var 0x55e60c3f31a8 'x' 'V'
| |       | `-ReturnStmt 0x55e60c3f3798 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55e60c3f3788 <col:20> 'bool' false
| |       `-CompoundStmt 0x55e60c3f3848 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55e60c3f3808 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55e60c3f37c8 <col:13> 'V' lvalue ParmVar 0x55e60c3f1298 'result' 'V &'
| |         | `-DeclRefExpr 0x55e60c3f37e8 <col:22> 'V' lvalue Var 0x55e60c3f31a8 'x' 'V'
| |         `-ReturnStmt 0x55e60c3f3838 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55e60c3f3828 <col:20> 'bool' true
| `-CXXMethodDecl 0x55e60c457ad8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55e60c4578b0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55e60c457988 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55e60c4579f0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e60c458728 <col:83, line:1083:5>
|     |-DeclStmt 0x55e60c457d60 <line:1071:9, col:12>
|     | `-VarDecl 0x55e60c457cf8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55e60c458700 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55e60c458390 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55e60c4582b8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55e60c458280 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55e60c458238 <col:14> '<bound member function type>' ->parse_saturating 0x55e60c458118
|       | |   | `-CXXThisExpr 0x55e60c458228 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55e60c457dd0 <col:31> 'const String' lvalue ParmVar 0x55e60c4578b0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55e60c457df0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55e60c457cf8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55e60c457e10 <col:39> 'const ArgContext' lvalue ParmVar 0x55e60c4579f0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55e60c458370 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55e60c458350 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55e60c458338 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55e60c458320 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55e60c3f3350 <col:17> 'int' lvalue ->status 0x55e60c3f1588
|       |     |     `-CXXThisExpr 0x55e60c3f3340 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55e60c458300 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55e60c4582d0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55e60c3f3390 <col:27> 'int' lvalue ->status 0x55e60c3f1588
|       |       |   `-CXXThisExpr 0x55e60c3f3380 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55e60c4582e8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55e60c3f33c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55e60c4583b0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55e60c3f34c0 <col:20> 'bool' false
|       `-IfStmt 0x55e60c4586d8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55e60c4583f0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55e60c4583c0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55e60c3f34f0 <col:18> 'int' lvalue ->status 0x55e60c3f1588
|         | |   `-CXXThisExpr 0x55e60c3f34e0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55e60c4583d8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55e60c3f3520 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e60c3f0260 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55e60c458610 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55e60c458580 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55e60c3f35a0 <line:1076:13> '<bound member function type>' ->range_error 0x55e60c3f1b98
|         | | | `-CXXThisExpr 0x55e60c3f3590 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55e60c458410 <col:25> 'const ArgContext' lvalue ParmVar 0x55e60c4579f0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55e60c4585e8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55e60c4585b8 <col:31, col:50> 'const bool' lvalue Var 0x55e60c0aa9d0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55e60c458558 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55e60c458540 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55e60c458528 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55e60c458508 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55e60c457cf8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55e60c458600 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55e60c3f3788 <col:20> 'bool' false
|         `-CompoundStmt 0x55e60c4586b8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55e60c458688 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55e60c458630 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55e60c457988 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55e60c458670 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55e60c458650 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55e60c457cf8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55e60c4586a8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55e60c3f3828 <col:20> 'bool' true
|-FieldDecl 0x55e60c3f1520 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55e60c3f1588 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55e60c3f15d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55e60c3f1890 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55e60c3f1618 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55e60c3f1698 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55e60c3f1710 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55e60c3f1790 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55e60c3f1b98 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55e60c3f1960 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55e60c3f19d8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55e60c3f1a70 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55e60c3f4118 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55e60c3f4118
| `-ParmVarDecl 0x55e60c3f4228 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55e60c3f43a8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c3f44b8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e60c4545b0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e60c454580 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55e60c454550 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e60c454520 <col:7> 'IntArg' lvalue ParmVar 0x55e60c3f44b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e60c3f1520 'base' 'int'
| | `-ImplicitCastExpr 0x55e60c4546a8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e60c454678 <col:7> 'int' xvalue .base 0x55e60c3f1520
| |     `-CXXStaticCastExpr 0x55e60c454648 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e60c454618 <col:7> 'IntArg' lvalue ParmVar 0x55e60c3f44b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e60c3f1588 'status' 'int'
| | `-ImplicitCastExpr 0x55e60c454778 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e60c454748 <col:7> 'int' xvalue .status 0x55e60c3f1588
| |     `-CXXStaticCastExpr 0x55e60c454718 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e60c4546e8 <col:7> 'IntArg' lvalue ParmVar 0x55e60c3f44b8 '' 'IntArg &&'
| `-CompoundStmt 0x55e60c4547d0 <col:7>
`-CXXDestructorDecl 0x55e60c453710 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e60c3f86b0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55e60c3f8908 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e60c453638 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e60c453bb0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55e60c453b90 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55e60c453c20 <col:19>
|-CXXConstructorDecl 0x55e60c453818 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55e60c453818
| `-ParmVarDecl 0x55e60c453928 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55e60c4539c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e60c453ad8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e60c4547e0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e60c454500 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55e60c4544d0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55e60c4544a0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55e60c453ad8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55e60c454850 <col:19>
`-CXXDestructorDecl 0x55e60c453c60 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
