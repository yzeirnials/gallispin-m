
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8f01008 prev 0x55d0e8ef87a8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8f01100 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55d0e8f01190 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55d0e8f01208 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55d0e8f012c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55d0e8f01390 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55d0e8f01508 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55d0e8f01440 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55d0e8f015b0 <col:24>
| `-OptimizeNoneAttr 0x55d0e8f01608 <col:34>
|-CXXMethodDecl 0x55d0e8f01650 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55d0e8f01908 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55d0e8f01700 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8f01778 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55d0e8f017f8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55d0e8f019c0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55d0e8f019f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55d0e8f01a60 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55d0e8f01ae8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55d0e8f01e08 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55d0e8f01ba0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8f01c18 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55d0e8f01c90 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55d0e8f01d10 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55d0e8f01f20 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55d0e8f09898 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d0e8f09898
| `-ParmVarDecl 0x55d0e8f099a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55d0e8f09a48 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d0e8f09a48
| `-ParmVarDecl 0x55d0e8f09b58 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55d0e8fee058 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8ef4020 prev 0x55d0e8ef3da0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d0e8ef4118 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55d0e8ef41a8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d0e8ef4208 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55d0e8ef42f8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55d0e8ef43f8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55d0e8ef45c8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55d0e8ef4478 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55d0e8ef44f0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55d0e8ef4758 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55d0e8ef4690 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55d0e8ef4800 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ef4938 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55d0e8ef4870 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55d0e8ef4ad8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55d0e8ef4a18 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55d0e8ef4c78 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55d0e8ef4bb8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55d0e8ef4d20 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55d0e8ef4e20 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55d0e8ef4f00 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef4e00 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55d0e8ef4de0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55d0e8ef4eb0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55d0e8ef4f18 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ef4e90 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55d0e8ef4e70 <col:44> 'int' 2
|-CXXMethodDecl 0x55d0e8ef5060 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55d0e8ef4f48 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d0e8ef4fc8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55d0e8ef51b8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55d0e8ef5128 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55d0e8ef53f8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55d0e8ef5278 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55d0e8ef52f0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55d0e8ef54a8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ef5500 <col:30>
|-CXXMethodDecl 0x55d0e8ef5608 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55d0e8ef5540 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55d0e8ef56b0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ef5708 <col:30>
|-CXXMethodDecl 0x55d0e8ef5758 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55d0e8ef5820 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55d0e8ef5938 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55d0e8ef59c0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55d0e8ef5a48 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55d0e8ef5ad0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55d0e8ef5b58 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55d0e8ef5be8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55d0e8ef5ca8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55d0e8ef5d30 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55d0e8ef5db8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55d0e8ef5e40 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55d0e8ef5ec8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55d0e8ef5f50 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55d0e8ef5fe0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55d0e8ef60a0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55d0e8ef6130 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55d0e8ef6280 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55d0e8ef61e8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55d0e8ef6410 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55d0e8ef6340 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55d0e8ef66c0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55d0e8ef64c8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8ef6548 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55d0e8ef65c8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55d0e8ef6778 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55d0e8ef6880 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d0e8ef6b10 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef6860 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55d0e8ef6840 <col:33> 'int' 0
| |-EnumConstantDecl 0x55d0e8ef6910 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d0e8ef6b28 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef68f0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55d0e8ef68d0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55d0e8ef69a0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d0e8ef6b40 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef6980 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55d0e8ef6960 <col:38> 'int' 90
| |-EnumConstantDecl 0x55d0e8ef6a30 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d0e8ef6b58 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef6a10 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55d0e8ef69f0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55d0e8ef6ac0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55d0e8ef6b70 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ef6aa0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55d0e8ef6a80 <col:32> 'int' 2000
|-CXXMethodDecl 0x55d0e8ef6bb0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55d0e8ef6ff0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d0e8ef6e60 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55d0e8ef6ed8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8ef70c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55d0e8ef7240 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55d0e8ef7170 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8ef7448 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d0e8ef72f8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55d0e8ef7370 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8ef7548 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55d0e8ef75e8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55d0e8ef76b0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef7740 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55d0e8ef7970 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ef7720 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55d0e8ef7700 <col:36> 'int' EnumConstant 0x55d0e8ef76b0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef7790 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef77e0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef7830 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef7880 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d0e8ef78d0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55d0e8ef7920 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55d0e8ef7a58 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55d0e8ef7998 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55d0e8ef7b20 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55d0e8ef7be0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55d0e8ef7ca0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55d0e8ef7d60 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55d0e8ef7e78 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55d0e8ef7f40 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55d0e8ef80c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55d0e8ef7ff0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55d0e8ef81e8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55d0e8ef83e8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55d0e8ef8298 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55d0e8ef8318 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55d0e8f05d38 <col:54, line:127:5>
|   |-ParenExpr 0x55d0e8f05be8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55d0e8f05bb8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8f058a8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d0e8f05880 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55d0e8f05868 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55d0e8f05850 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55d0e8f05820 <col:31> 'Router *' lvalue ->_router 0x55d0e8f03700
|   |   |         `-CXXThisExpr 0x55d0e8f05810 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d0e8f05908 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8f058e8 <col:48> 'int' 0
|   |   `-CallExpr 0x55d0e8f05b18 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8f05b00 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8f05ae0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8f05b58 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8f05978 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55d0e8f05b70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8f05998 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55d0e8f05b88 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8f059d0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55d0e8f05ba0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8f05ac8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8f05ab0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8f05a68 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55d0e8f05c80 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55d0e8f05c18 <col:9> 'Router *' lvalue ->_router 0x55d0e8f03700
|   | | `-CXXThisExpr 0x55d0e8f05c08 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55d0e8f05c68 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d0e8f05c48 <col:19> 'Router *' lvalue ParmVar 0x55d0e8ef8298 'r' 'Router *'
|   `-BinaryOperator 0x55d0e8f05d18 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55d0e8f05cb0 <col:9> 'int' lvalue ->_eindex 0x55d0e8f03768
|     | `-CXXThisExpr 0x55d0e8f05ca0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55d0e8f05d00 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8f05ce0 <col:19> 'int' lvalue ParmVar 0x55d0e8ef8318 'eindex' 'int'
|-CXXMethodDecl 0x55d0e8ef8570 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55d0e8ef84a8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55d0e8ef8640 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55d0e8ef8708 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55d0e8ef87a8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55d0e8ef89f8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55d0e8ef8870 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8ef88f0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55d0e8ef8aa8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ef8b00 <col:30>
|-CXXMethodDecl 0x55d0e8ef8c08 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d0e8ef8b40 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55d0e8ef8cb0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ef8d08 <col:30>
|-CXXMethodDecl 0x55d0e8ef8dd8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d0e8ef8d48 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55d0e8ef8e80 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ef8ed8 <col:30>
|-CXXMethodDecl 0x55d0e8ef9068 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55d0e8ef8f10 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55d0e8ef8f90 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55d0e8ef91f8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d0e8ef9130 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d0e8ef9348 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d0e8ef92b8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d0e8ef9498 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d0e8ef9408 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d0e8ef95e8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d0e8ef9558 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d0e8ef98a8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55d0e8ef96a0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8ef9720 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55d0e8ef97c8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55d0e8ef9980 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55d0e8ef9a40 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55d0e8ef9d10 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d0e8ef9bc0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55d0e8ef9c38 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8ef9e38 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55d0e8efa010 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55d0e8ef9ef0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55d0e8ef9f70 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55d0e8efa1f8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55d0e8efa0d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55d0e8efa158 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55d0e8efa568 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d0e8efa2b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d0e8efa330 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d0e8efa3b0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d0e8f05320 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f05300 <col:106> 'int' 0
| `-ParmVarDecl 0x55d0e8efa428 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f05358 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f05338 <col:126> 'int' 0
|-CXXMethodDecl 0x55d0e8efa908 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d0e8efa638 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d0e8efa6d0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d0e8efa750 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55d0e8efa7c8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f05390 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f05370 <col:114> 'int' 0
|-CXXMethodDecl 0x55d0e8efac98 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d0e8efa9e0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55d0e8efaa58 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d0e8efaad8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55d0e8f053a8 <col:96> 'int' 0
| `-ParmVarDecl 0x55d0e8efab50 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f053e8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f053c8 <col:116> 'int' 0
|-CXXMethodDecl 0x55d0e8efb018 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d0e8efad68 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d0e8efade0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efae60 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d0e8f05420 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f05400 <col:109> 'int' 0
| `-ParmVarDecl 0x55d0e8efaed8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f05458 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f05438 <col:129> 'int' 0
|-CXXMethodDecl 0x55d0e8efb398 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d0e8efb0e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d0e8efb160 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efb1e0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55d0e8efb258 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f05490 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f05470 <col:117> 'int' 0
|-CXXMethodDecl 0x55d0e8efb728 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d0e8efb470 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efb4e8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efb568 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55d0e8f054a8 <col:99> 'int' 0
| `-ParmVarDecl 0x55d0e8efb5e0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d0e8f054e8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d0e8f054c8 <col:119> 'int' 0
|-CXXMethodDecl 0x55d0e8efbb48 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55d0e8efb7f8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d0e8efb878 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d0e8efb8f0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efb970 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d0e8f05520 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f05500 <col:108> 'int' 0
| `-ParmVarDecl 0x55d0e8efb9f0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55d0e8f05558 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55d0e8f05538 <col:141> 'int' 0
|-CXXMethodDecl 0x55d0e8efbf68 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d0e8efbc20 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d0e8efbca0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d0e8efbd18 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efbd98 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55d0e8efbe18 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d0e8f05570 <col:121> 'int' 0
|-CXXMethodDecl 0x55d0e8efc398 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d0e8efc048 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55d0e8efc0c8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55d0e8efc140 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8efc1c0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55d0e8f05590 <col:98> 'int' 0
| `-ParmVarDecl 0x55d0e8efc240 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d0e8f055b0 <col:123> 'int' 0
|-CXXMethodDecl 0x55d0e8efc660 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55d0e8efc470 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d0e8efc4f0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55d0e8efc570 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55d0e8f055d0 <col:80> 'int' 0
|-EnumDecl 0x55d0e8efc718 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55d0e8efc820 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d0e8efcab0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8efc800 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55d0e8efc7e0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55d0e8efc8b0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d0e8efcac8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8efc890 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55d0e8efc870 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d0e8efc940 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d0e8efcae0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8efc920 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55d0e8efc900 <col:44> 'int' 4
| |-EnumConstantDecl 0x55d0e8efc9d0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d0e8efcaf8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8efc9b0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55d0e8efc990 <col:36> 'int' 7
| `-EnumConstantDecl 0x55d0e8efca60 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55d0e8efcb10 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8efca40 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55d0e8efca20 <col:34> 'int' 6
|-CXXMethodDecl 0x55d0e8efcdc8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55d0e8efcb38 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55d0e8efcbd8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d0e8efcc58 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55d0e8efccd0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55d0e8f05688 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55d0e8f05670 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55d0e8f05658 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55d0e8f05638 <col:98, col:105> 'String' (CXXTemporary 0x55d0e8f05638)
|           `-CXXTemporaryObjectExpr 0x55d0e8f05600 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55d0e8efd068 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55d0e8efce98 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d0e8efcf10 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d0e8efcf88 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d0e8f05738 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d0e8f05720 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d0e8f05708 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d0e8f056e8 <col:94, col:101> 'String' (CXXTemporary 0x55d0e8f056e8)
| |         `-CXXTemporaryObjectExpr 0x55d0e8f056b0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55d0e8f05f20 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55d0e8f05e98 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55d0e8f05e68 <col:9> '<bound member function type>' ->add_task_handlers 0x55d0e8efcdc8
|     | `-CXXThisExpr 0x55d0e8f05e58 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d0e8f05ed8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d0e8f05dd8 <col:27> 'Task *' lvalue ParmVar 0x55d0e8efce98 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d0e8f05ef0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d0e8f05df8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55d0e8efcf10 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55d0e8f05f08 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d0e8f05e18 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d0e8efca60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d0e8f05e38 <col:62> 'const String' lvalue ParmVar 0x55d0e8efcf88 'prefix' 'const String &'
|-CXXMethodDecl 0x55d0e8efd278 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55d0e8efd130 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d0e8efd1a8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d0e8f057e8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d0e8f057d0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d0e8f057b8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d0e8f05798 <col:70, col:77> 'String' (CXXTemporary 0x55d0e8f05798)
| |         `-CXXTemporaryObjectExpr 0x55d0e8f05760 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55d0e8f060f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55d0e8f06070 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55d0e8f06040 <col:9> '<bound member function type>' ->add_task_handlers 0x55d0e8efcdc8
|     | `-CXXThisExpr 0x55d0e8f06030 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d0e8f060b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d0e8f05fb0 <col:27> 'Task *' lvalue ParmVar 0x55d0e8efd130 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d0e8f060c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55d0e8f05fd0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55d0e8f060e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d0e8f05ff0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d0e8efca60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d0e8f06010 <col:57> 'const String' lvalue ParmVar 0x55d0e8efd1a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55d0e8efd558 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55d0e8efd340 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efd3c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efd438 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55d0e8efd808 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55d0e8efd628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efd6a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efd728 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55d0e8efdaf8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d0e8efd8d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efd958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efd9d0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55d0e8efdda8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55d0e8efdbc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efdc48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efdcc8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55d0e8efe058 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55d0e8efde78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efdef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efdf78 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55d0e8efe308 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55d0e8efe128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efe1a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efe220 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55d0e8efe5b8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55d0e8efe3d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efe458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efe4d8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55d0e8efe8c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55d0e8efe6e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efe760 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efe7e0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55d0e8efeba8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55d0e8efe998 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efea18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efeac0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55d0e8efee88 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55d0e8efec78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efecf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8efeda0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55d0e8eff0f0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d0e8efef58 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d0e8efefd8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d0e8eff050 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55d0e8eff398 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55d0e8eff1c0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d0e8eff240 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d0e8eff2b8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55d0e8eff648 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55d0e8eff468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8eff4e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8eff568 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55d0e8eff8f8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55d0e8eff718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8eff798 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8eff810 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55d0e8effba8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55d0e8eff9c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8effa48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8effac0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55d0e8effe78 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55d0e8effc78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8effcf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d0e8effd98 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55d0e8f001a8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55d0e8efff48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d0e8efffc8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55d0e8f00040 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55d0e8f000b8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d0e8f05800 <col:93> 'bool' false
|-CXXMethodDecl 0x55d0e8f00390 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d0e8f00278 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55d0e8f002f8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55d0e8f00568 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d0e8f00450 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55d0e8f004d0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55d0e8f00848 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d0e8f00628 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55d0e8f006a0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55d0e8f00720 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55d0e8f00798 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8f00b38 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d0e8f00918 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55d0e8f00990 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55d0e8f00a10 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55d0e8f00a88 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8f00d70 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55d0e8f00c10 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55d0e8f00c90 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55d0e8f00f58 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55d0e8f00e38 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55d0e8f00eb8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55d0e8f01008 prev 0x55d0e8ef87a8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d0e8f01100 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55d0e8f01190 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55d0e8f01208 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55d0e8f012c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55d0e8f01390 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55d0e8f01508 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55d0e8f01440 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55d0e8f015b0 <col:24>
| | `-OptimizeNoneAttr 0x55d0e8f01608 <col:34>
| |-CXXMethodDecl 0x55d0e8f01650 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55d0e8f01908 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55d0e8f01700 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d0e8f01778 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55d0e8f017f8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55d0e8f019c0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55d0e8f019f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55d0e8f01a60 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55d0e8f01ae8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55d0e8f01e08 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55d0e8f01ba0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d0e8f01c18 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55d0e8f01c90 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55d0e8f01d10 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55d0e8f01f20 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55d0e8f09898 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d0e8f09898
| | `-ParmVarDecl 0x55d0e8f099a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55d0e8f09a48 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d0e8f09a48
| | `-ParmVarDecl 0x55d0e8f09b58 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55d0e8fee058 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d0e8f01f98 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55d0e8f02038 <col:38> "" ""
|-CXXMethodDecl 0x55d0e8f020c8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55d0e8f02168 <col:44> "" ""
|-AccessSpecDecl 0x55d0e8f021d8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55d0e8f02200 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55d0e8f02300 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55d0e8f02350 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8f022e0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55d0e8f022c0 <col:27> 'int' 4
|-FieldDecl 0x55d0e8f02408 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55d0e8f025b8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55d0e8f02670 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55d0e8f03700 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55d0e8f03768 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55d0e8f038b8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55d0e8f037f8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55d0e8f03a68 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55d0e8f03978 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55d0e8f03c48 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55d0e8f03b28 <col:20> col:23 'int'
| `-ParmVarDecl 0x55d0e8f03ba8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55d0e8f03ef0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f03d10 <col:23> col:26 'int'
| |-ParmVarDecl 0x55d0e8f03d90 <col:28> col:31 'int'
| `-ParmVarDecl 0x55d0e8f03e08 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55d0e8f03fa8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55d0e8f04070 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55d0e8f040c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55d0e8f04110 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55d0e8f042f0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55d0e8f041a0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55d0e8f04218 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8f04598 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55d0e8f043b8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55d0e8f04438 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55d0e8f044b0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8f047b8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55d0e8f04668 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55d0e8f046e8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55d0e8f04af0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55d0e8f04878 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55d0e8f048f8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55d0e8f04970 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55d0e8f049f0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55d0e8f04cd8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d0e8f04bc0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55d0e8f04c40 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55d0e8f04e28 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55d0e8f04d98 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55d0e8f051a8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55d0e8f04ee8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55d0e8f04f68 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55d0e8f04fe0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55d0e8f05060 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55d0e8f052c0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class SetIP6Address
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IP6Address _ip6
       108 |     struct in6_addr _addr
       108 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
       108 |         uint8_t [16] __u6_addr8
       108 |         uint16_t [8] __u6_addr16
       108 |         uint32_t [4] __u6_addr32
           | [sizeof=128, dsize=124, align=8,
           |  nvsize=124, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8c32f68 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55d0e8c33188 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x55d0e8c332b8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x55d0e8c333e8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x55d0e8e79318 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d0e8e79b28 <col:5>
|-CXXDestructorDecl 0x55d0e8e793f0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d0e8e794f8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e79608 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55d0e8f2d2d0 <col:5>
|-CXXConstructorDecl 0x55d0e8e796a8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e797b8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x55d0e8f36708 <col:5>
|-CXXMethodDecl 0x55d0e8e7a258 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e7a368 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x55d0e8f3a510 <col:5>
|   `-ReturnStmt 0x55d0e8f3a500 <col:5>
|     `-UnaryOperator 0x55d0e8f3a4e8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8f3a4d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x55d0e8e7a3d8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55d0e8e7a3d8
  `-ParmVarDecl 0x55d0e8e7a4e8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8bd14d0 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8c32ed8 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x55d0e8c32f68 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55d0e8c33188 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x55d0e8c332b8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x55d0e8c333e8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x55d0e8e79318 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d0e8e79b28 <col:5>
| |-CXXDestructorDecl 0x55d0e8e793f0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d0e8e794f8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8e79608 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55d0e8f2d2d0 <col:5>
| |-CXXConstructorDecl 0x55d0e8e796a8 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8e797b8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x55d0e8f36708 <col:5>
| |-CXXMethodDecl 0x55d0e8e7a258 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8e7a368 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x55d0e8f3a510 <col:5>
| |   `-ReturnStmt 0x55d0e8f3a500 <col:5>
| |     `-UnaryOperator 0x55d0e8f3a4e8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d0e8f3a4d8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x55d0e8e7a3d8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x55d0e8e7a3d8
|   `-ParmVarDecl 0x55d0e8e7a4e8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x55d0e8c334a8 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x55d0e8e79228 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d0e8c334a8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55d0e8e79b38 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x55d0e8e79b90 <col:8>
|-CXXConstructorDecl 0x55d0e8e79828 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e79908 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x55d0e8c334a8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55d0e8f2d2e0 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x55d0e8f2d2a0 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
| |     `-DeclRefExpr 0x55d0e8f2d280 <col:8> 'const in6_addr' lvalue ParmVar 0x55d0e8e79908 '' 'const in6_addr &'
| `-CompoundStmt 0x55d0e8f2d340 <col:8>
|-CXXConstructorDecl 0x55d0e8e799a8 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e79ab8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x55d0e8c334a8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x55d0e8f36718 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x55d0e8f366d8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x55d0e8c334a8
| |     `-CXXStaticCastExpr 0x55d0e8f366a8 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55d0e8f36678 <col:8> 'in6_addr' lvalue ParmVar 0x55d0e8e79ab8 '' 'in6_addr &&'
| `-CompoundStmt 0x55d0e8f36778 <col:8>
|-CXXMethodDecl 0x55d0e8e7a558 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e7a668 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x55d0e8f3a588 <col:8>
|   |-CXXMemberCallExpr 0x55d0e8f3a528 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x55d0e8f3a468 <col:8> '<bound member function type>' .operator= 0x55d0e8e7a258
|   | | `-MemberExpr 0x55d0e8f3a378 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x55d0e8c334a8
|   | |   `-CXXThisExpr 0x55d0e8f3a368 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x55d0e8f3a438 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|   |   `-DeclRefExpr 0x55d0e8f3a418 <col:8> 'const in6_addr' lvalue ParmVar 0x55d0e8e7a668 '' 'const in6_addr &'
|   `-ReturnStmt 0x55d0e8f3a578 <col:8>
|     `-UnaryOperator 0x55d0e8f3a560 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8f3a550 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x55d0e8e7a6d8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x55d0e8e7a6d8
| `-ParmVarDecl 0x55d0e8e7a7e8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x55d0e8e7ab88 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8e75b10 prev 0x55d0e8ebae70 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8e75c08 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x55d0e8e75c98 <col:20, col:26> col:20 public
|-TypedefDecl 0x55d0e8e75cd0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d0e8ae7700 'uninitialized_type'
|   `-CXXRecord 0x55d0e8ae7668 'uninitialized_type'
|-CXXConstructorDecl 0x55d0e8e75d90 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8e79ba0 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55d0e8e79dc0 <col:25, line:21:5>
|   `-CallExpr 0x55d0e8e79d70 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55d0e8e79d58 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d0e8e79d38 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x55d0e8bf29b8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x55d0e8e79da8 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55d0e8e79c80 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55d0e8e79c50 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|     |     `-CXXThisExpr 0x55d0e8e79c40 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x55d0e8e79c98 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x55d0e8e79d18 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55d0e8e79cf8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55d0e8e79cc8 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55d0e8e79cb8 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55d0e8e75ee0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55d0e8e75e50 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8e79dd8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55d0e8e7a028 <col:56, line:26:5>
|   `-CallExpr 0x55d0e8e79fa8 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x55d0e8e79f90 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d0e8e79f70 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d0e8bf1678 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55d0e8e79fe0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x55d0e8e79eb8 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x55d0e8e79e88 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|     |     `-CXXThisExpr 0x55d0e8e79e78 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x55d0e8e7a010 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55d0e8e79ff8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d0e8e79ed0 <col:17> 'const unsigned char *' lvalue ParmVar 0x55d0e8e75e50 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x55d0e8e79f50 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x55d0e8e79f30 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x55d0e8e79f00 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8 non_odr_use_unevaluated
|           `-CXXThisExpr 0x55d0e8e79ef0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x55d0e8e76030 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x55d0e8e75fa0 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8e7a040 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55d0e8f2d1c0 <col:45, line:33:5>
|   `-ExprWithCleanups 0x55d0e8f2d1a8 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x55d0e8f2d170 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x55d0e8f2d158 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d0e8f2d0d8 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55d0e8e78b48 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x55d0e8e7a0a8 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x55d0e8e7a098 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x55d0e8f2d0c0 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x55d0e8f2d0a8 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x55d0e8f2d090 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x55d0e8f2d070 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x55d0e8f2d040 <col:10> '<bound member function type>' .operator in_addr 0x55d0e8cf66e0
|                 `-ImplicitCastExpr 0x55d0e8f2d028 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x55d0e8e7a0c0 <col:10> 'IPAddress' lvalue ParmVar 0x55d0e8e75fa0 'x' 'IPAddress'
|-CXXConstructorDecl 0x55d0e8e76180 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x55d0e8e760f0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x55d0e8e763a8 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x55d0e8e762b0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8f2d350 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x55d0e8f2d1d8 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x55d0e8e762b0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x55d0e8f2d3b0 <col:13, line:41:5>
|-CXXConstructorDecl 0x55d0e8e76578 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x55d0e8e764b0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8f2d3c0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55d0e8f2d4d0 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x55d0e8f2d498 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x55d0e8f2d480 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d0e8f2d460 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x55d0e8e78b48 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x55d0e8f2d428 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x55d0e8f2d418 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x55d0e8f2d440 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x55d0e8e764b0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x55d0e8e766c8 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55d0e8e76638 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8f2d4e8 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x55d0e8f2d598 <col:57, line:51:5>
|   `-CStyleCastExpr 0x55d0e8f2d570 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d0e8f2d540 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55d0e8e76638 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55d0e8e76858 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55d0e8e76790 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x55d0e8e769a8 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x55d0e8e76918 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x55d0e8e76b58 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x55d0e8e76ad0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x55d0e8ebaf00 'IP6Address'
|   | `-CXXRecord 0x55d0e8e75b10 'IP6Address'
|   `-ParenType 0x55d0e8e76a70 'uint32_t () const' sugar
|     `-FunctionProtoType 0x55d0e8cb2d00 'uint32_t () const' const cdecl
|       `-TypedefType 0x55d0e8ae79f0 'uint32_t' sugar
|         |-Typedef 0x55d0e89fb4c8 'uint32_t'
|         `-TypedefType 0x55d0e89d45a0 '__uint32_t' sugar
|           |-Typedef 0x55d0e89d4198 '__uint32_t'
|           `-BuiltinType 0x55d0e8992620 'unsigned int'
|-CXXConversionDecl 0x55d0e8e76c98 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x55d0e8e76e20 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x55d0e8f2d600 <col:46, col:62>
|   `-ReturnStmt 0x55d0e8f2d5f0 <col:48, col:55>
|     `-MemberExpr 0x55d0e8f2d5c0 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       `-CXXThisExpr 0x55d0e8f2d5b0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55d0e8e77010 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x55d0e8f2d668 <col:34, col:50>
|   `-ReturnStmt 0x55d0e8f2d658 <col:36, col:43>
|     `-MemberExpr 0x55d0e8f2d628 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       `-CXXThisExpr 0x55d0e8f2d618 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55d0e8e77110 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x55d0e8f2d6d0 <col:45, col:61>
|   `-ReturnStmt 0x55d0e8f2d6c0 <col:47, col:54>
|     `-MemberExpr 0x55d0e8f2d690 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       `-CXXThisExpr 0x55d0e8f2d680 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x55d0e8e771e8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x55d0e8f2d738 <col:33, col:49>
|   `-ReturnStmt 0x55d0e8f2d728 <col:35, col:42>
|     `-MemberExpr 0x55d0e8f2d6f8 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       `-CXXThisExpr 0x55d0e8f2d6e8 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x55d0e8e772b0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x55d0e8f2d870 <col:27, col:66>
|   `-ReturnStmt 0x55d0e8f2d860 <col:29, col:63>
|     `-UnaryOperator 0x55d0e8f2d848 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8f2d828 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d0e8f2d810 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8f2d7c0 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x55d0e8c33188
|         |   `-MemberExpr 0x55d0e8f2d790 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|         |     `-MemberExpr 0x55d0e8f2d760 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|         |       `-CXXThisExpr 0x55d0e8f2d750 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x55d0e8f2d7f0 <col:62> 'int' 0
|-CXXMethodDecl 0x55d0e8e77378 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x55d0e8f2d9e8 <col:39, col:78>
|   `-ReturnStmt 0x55d0e8f2d9d8 <col:41, col:75>
|     `-UnaryOperator 0x55d0e8f2d9c0 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8f2d9a0 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d0e8f2d988 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8f2d8f8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|         |   `-MemberExpr 0x55d0e8f2d8c8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|         |     `-MemberExpr 0x55d0e8f2d898 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|         |       `-CXXThisExpr 0x55d0e8f2d888 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x55d0e8f2d928 <col:74> 'int' 0
|-CXXMethodDecl 0x55d0e8e77498 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x55d0e8f2db58 <col:24, col:75>
|   `-ReturnStmt 0x55d0e8f2db48 <col:26, col:72>
|     `-CStyleCastExpr 0x55d0e8f2db20 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x55d0e8f2daf8 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55d0e8f2dad8 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55d0e8f2dac0 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55d0e8f2da70 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55d0e8c33188
|           |   `-MemberExpr 0x55d0e8f2da40 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|           |     `-MemberExpr 0x55d0e8f2da10 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|           |       `-CXXThisExpr 0x55d0e8f2da00 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55d0e8f2daa0 <col:71> 'int' 0
|-CXXMethodDecl 0x55d0e8e77558 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x55d0e8f2dce0 <col:36, col:87>
|   `-ReturnStmt 0x55d0e8f2dcd0 <col:38, col:84>
|     `-ImplicitCastExpr 0x55d0e8f2dcb8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x55d0e8f2dc90 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x55d0e8f2dc68 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55d0e8f2dc48 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55d0e8f2dc30 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8f2dbe0 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|             |   `-MemberExpr 0x55d0e8f2dbb0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|             |     `-MemberExpr 0x55d0e8f2db80 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|             |       `-CXXThisExpr 0x55d0e8f2db70 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55d0e8f2dc10 <col:83> 'int' 0
|-CXXMethodDecl 0x55d0e8e77618 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x55d0e8f2de50 <col:24, col:75>
|   `-ReturnStmt 0x55d0e8f2de40 <col:26, col:72>
|     `-CStyleCastExpr 0x55d0e8f2de18 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x55d0e8f2ddf0 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x55d0e8f2ddd0 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x55d0e8f2ddb8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55d0e8f2dd68 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x55d0e8c33188
|           |   `-MemberExpr 0x55d0e8f2dd38 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|           |     `-MemberExpr 0x55d0e8f2dd08 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x55d0e8e791a8
|           |       `-CXXThisExpr 0x55d0e8f2dcf8 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x55d0e8f2dd98 <col:71> 'int' 0
|-CXXMethodDecl 0x55d0e8e776d8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x55d0e8f2dfd8 <col:36, col:87>
|   `-ReturnStmt 0x55d0e8f2dfc8 <col:38, col:84>
|     `-ImplicitCastExpr 0x55d0e8f2dfb0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x55d0e8f2df88 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x55d0e8f2df60 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x55d0e8f2df40 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x55d0e8f2df28 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8f2ded8 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|             |   `-MemberExpr 0x55d0e8f2dea8 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|             |     `-MemberExpr 0x55d0e8f2de78 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|             |       `-CXXThisExpr 0x55d0e8f2de68 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x55d0e8f2df08 <col:83> 'int' 0
|-CXXMethodDecl 0x55d0e8e77798 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8e77860 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55d0e8e77a88 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x55d0e8e77938 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x55d0e8e779b0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x55d0e8e77c08 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x55d0e8e77b48 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x55d0e8e77cd0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x55d0e8f2e2f0 <col:36, line:99:5>
|   `-ReturnStmt 0x55d0e8f2e2e0 <line:98:2, col:81>
|     `-BinaryOperator 0x55d0e8f2e2c0 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x55d0e8f2e138 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x55d0e8f2e120 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x55d0e8f2e108 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x55d0e8f2e0c8 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x55d0e8f2e0b0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x55d0e8f2e060 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|       | |     |   `-MemberExpr 0x55d0e8f2e030 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|       | |     |     `-MemberExpr 0x55d0e8f2e000 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       | |     |       `-CXXThisExpr 0x55d0e8f2dff0 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x55d0e8f2e090 <col:34> 'int' 11
|       | `-IntegerLiteral 0x55d0e8f2e0e8 <col:41> 'int' 255
|       `-BinaryOperator 0x55d0e8f2e2a0 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8f2e288 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d0e8f2e270 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d0e8f2e230 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d0e8f2e218 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d0e8f2e1c8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|         |     |   `-MemberExpr 0x55d0e8f2e198 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|         |     |     `-MemberExpr 0x55d0e8f2e168 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|         |     |       `-CXXThisExpr 0x55d0e8f2e158 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x55d0e8f2e1f8 <col:74> 'int' 12
|         `-IntegerLiteral 0x55d0e8f2e250 <col:81> 'int' 254
|-CXXMethodDecl 0x55d0e8e77e48 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x55d0e8e77d80 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x55d0e8e77f10 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x55d0e8f2e7d8 <col:43, line:114:5>
|   `-ReturnStmt 0x55d0e8f2e7c8 <line:112:2, line:113:24>
|     `-BinaryOperator 0x55d0e8f2e7a8 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x55d0e8f2e608 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55d0e8f2e468 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55d0e8f2e438 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55d0e8f2e3f8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55d0e8f2e3b8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55d0e8f2e388 <col:9> '<bound member function type>' ->data32 0x55d0e8e776d8
|       | | |   |   `-CXXThisExpr 0x55d0e8f2e378 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55d0e8f2e3d8 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55d0e8f2e450 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55d0e8f2e418 <col:24> 'int' 0
|       | `-BinaryOperator 0x55d0e8f2e5e8 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55d0e8f2e5b8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55d0e8f2e578 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55d0e8f2e538 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55d0e8f2e508 <col:29> '<bound member function type>' ->data32 0x55d0e8e776d8
|       |   |   |   `-CXXThisExpr 0x55d0e8f2e4f8 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55d0e8f2e558 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55d0e8f2e5d0 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55d0e8f2e598 <col:44> 'int' 0
|       `-BinaryOperator 0x55d0e8f2e788 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8f2e758 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55d0e8f2e718 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55d0e8f2e6d8 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55d0e8f2e6a8 <col:9> '<bound member function type>' ->data32 0x55d0e8e776d8
|         |   |   `-CXXThisExpr 0x55d0e8f2e698 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55d0e8f2e6f8 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x55d0e8f2e770 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55d0e8f2e738 <col:24> 'int' 0
|-CXXMethodDecl 0x55d0e8e77fd0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x55d0e8f2ed50 <col:39, line:123:5>
|   `-ReturnStmt 0x55d0e8f2ed40 <line:121:2, line:122:41>
|     `-BinaryOperator 0x55d0e8f2ed20 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x55d0e8f2eaf0 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x55d0e8f2e950 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x55d0e8f2e920 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x55d0e8f2e8e0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x55d0e8f2e8a0 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x55d0e8f2e870 <col:9> '<bound member function type>' ->data32 0x55d0e8e776d8
|       | | |   |   `-CXXThisExpr 0x55d0e8f2e860 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x55d0e8f2e8c0 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x55d0e8f2e938 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x55d0e8f2e900 <col:24> 'int' 0
|       | `-BinaryOperator 0x55d0e8f2ead0 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55d0e8f2eaa0 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x55d0e8f2ea60 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x55d0e8f2ea20 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x55d0e8f2e9f0 <col:29> '<bound member function type>' ->data32 0x55d0e8e776d8
|       |   |   |   `-CXXThisExpr 0x55d0e8f2e9e0 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x55d0e8f2ea40 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x55d0e8f2eab8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x55d0e8f2ea80 <col:44> 'int' 0
|       `-BinaryOperator 0x55d0e8f2ed00 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8f2ece8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55d0e8f2ec00 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55d0e8f2ebc0 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x55d0e8f2eb90 <col:9> '<bound member function type>' ->data32 0x55d0e8e776d8
|         |   |   `-CXXThisExpr 0x55d0e8f2eb80 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55d0e8f2ebe0 <col:18> 'int' 2
|         `-CallExpr 0x55d0e8f2ecc0 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x55d0e8f2eca8 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55d0e8f2ec88 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d0e8c37318 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x55d0e8f2ec68 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x55d0e8e78090 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55d0e8f2eee0 <col:38, line:131:5>
|   `-ReturnStmt 0x55d0e8f2eed0 <line:130:9, col:47>
|     `-BinaryOperator 0x55d0e8f2eeb0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x55d0e8f2ee98 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x55d0e8f2ee80 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55d0e8f2ee40 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55d0e8f2ee28 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55d0e8f2edd8 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x55d0e8c33188
|       |     |   `-MemberExpr 0x55d0e8f2eda8 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x55d0e8c334a8
|       |     |     `-MemberExpr 0x55d0e8f2ed78 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x55d0e8e791a8
|       |     |       `-CXXThisExpr 0x55d0e8f2ed68 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x55d0e8f2ee08 <col:41> 'int' 0
|       `-IntegerLiteral 0x55d0e8f2ee60 <col:47> 'int' 255
|-CXXMethodDecl 0x55d0e8e78150 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55d0e8f2f2b8 <col:39, line:139:5>
|   `-ReturnStmt 0x55d0e8f2f2a8 <line:138:9, col:67>
|     `-BinaryOperator 0x55d0e8f2f288 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x55d0e8f2f0e8 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x55d0e8f2f0d0 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x55d0e8f2efe8 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x55d0e8f2efa8 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x55d0e8f2ef78 <col:16> '<bound member function type>' ->data32 0x55d0e8e776d8
|       | |   |   `-CXXThisExpr 0x55d0e8f2ef68 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x55d0e8f2efc8 <col:25> 'int' 0
|       | `-CallExpr 0x55d0e8f2f0a8 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x55d0e8f2f090 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d0e8f2f070 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d0e8c37318 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x55d0e8f2f050 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x55d0e8f2f268 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8f2f238 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x55d0e8f2f1f8 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x55d0e8f2f1b8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x55d0e8f2f188 <col:52> '<bound member function type>' ->data32 0x55d0e8e776d8
|         |   |   `-CXXThisExpr 0x55d0e8f2f178 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x55d0e8f2f1d8 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x55d0e8f2f250 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x55d0e8f2f218 <col:67> 'int' 0
|-CXXMethodDecl 0x55d0e8e78210 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x55d0e8e783b8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55d0e8e782c0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55d0e8e78578 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55d0e8e78488 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55d0e8e786c0 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x55d0e8e78630 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x55d0e8e78820 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55d0e8e78790 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x55d0e8e78980 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x55d0e8e788f0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x55d0e8e78b48 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x55d0e8e78a50 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x55d0e8e78cc8 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x55d0e8e78c00 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x55d0e8e78d90 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55d0e8e78e50 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x55d0e8e78f10 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x55d0e8f2f438 <col:22, col:42>
|   `-ReturnStmt 0x55d0e8f2f428 <col:24, col:39>
|     `-ExprWithCleanups 0x55d0e8f2f410 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x55d0e8f2f3e0 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d0e8f2f3c8 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d0e8f2f3a8 <col:31, col:39> 'String' (CXXTemporary 0x55d0e8f2f3a8)
|             `-CXXMemberCallExpr 0x55d0e8f2f380 <col:31, col:39> 'String'
|               `-MemberExpr 0x55d0e8f2f350 <col:31> '<bound member function type>' ->unparse 0x55d0e8e78d90
|                 `-CXXThisExpr 0x55d0e8f2f340 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x55d0e8e78fe0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55d0e8e79088 <col:51> "" ""
|-TypedefDecl 0x55d0e8e79108 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x55d0e8e77900 'const IP6Address &'
|   `-QualType 0x55d0e8ebaf01 'const IP6Address' const
|     `-RecordType 0x55d0e8ebaf00 'IP6Address'
|       `-CXXRecord 0x55d0e8e75b10 'IP6Address'
|-AccessSpecDecl 0x55d0e8e79160 <line:171:3, col:10> col:3 private
|-FieldDecl 0x55d0e8e791a8 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x55d0e8e7a0e0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x55d0e8e7a0e0
| `-ParmVarDecl 0x55d0e8e7a1b8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x55d0e8e7a888 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x55d0e8e7a888
| `-ParmVarDecl 0x55d0e8e7a998 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x55d0e8e7aa08 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x55d0e8e7aa08
| `-ParmVarDecl 0x55d0e8e7ab18 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x55d0e8e7ac70 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8e7ad88 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x55d0e8e791a8 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x55d0e8f36788 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x55d0e8f36630 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x55d0e8e791a8
| |     `-CXXStaticCastExpr 0x55d0e8f36600 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x55d0e8f365d0 <col:7> 'IP6Address' lvalue ParmVar 0x55d0e8e7ad88 '' 'IP6Address &&'
| `-CompoundStmt 0x55d0e8f367e8 <col:7>
`-CXXDestructorDecl 0x55d0e8f36438 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8f3e630 <../elements/ip6/setip6address.hh:19:1, line:35:1> line:19:7 class SetIP6Address definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55d0e8f3e788 <col:1, col:7> col:7 implicit referenced class SetIP6Address
|-FieldDecl 0x55d0e8f3e828 <line:21:3, col:14> col:14 _ip6 'IP6Address'
|-AccessSpecDecl 0x55d0e8f3e878 <line:23:2, col:8> col:2 public
|-CXXConstructorDecl 0x55d0e8f3e900 <line:25:3, col:17> col:3 SetIP6Address 'void ()'
|-CXXDestructorDecl 0x55d0e8f3e9f0 <line:26:3, col:18> col:3 ~SetIP6Address 'void ()' noexcept-unevaluated 0x55d0e8f3e9f0
| `-Overrides: [ 0x55d0e8ef42f8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55d0e8f3eb20 <line:28:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55d0e8ef5758 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55d0e8f3f468 <col:34, col:60>
|   `-ReturnStmt 0x55d0e8f3f458 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d0e8f3f440 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d0e8f3f418 <col:43> 'const char [14]' lvalue "SetIP6Address"
|-CXXMethodDecl 0x55d0e8f3ebe8 <line:29:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55d0e8ef5820 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55d0e8f3f4c8 <col:34, col:54>
|   `-ReturnStmt 0x55d0e8f3f4b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55d0e8f3f4a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d0e8f3f480 <col:43> 'const char []' lvalue Var 0x55d0e8ef5ad0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55d0e8f3eec0 <line:31:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55d0e8ef6ff0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55d0e8f3ed70 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55d0e8f3ede8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55d0e8f3f010 <line:33:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55d0e8ef4938 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55d0e8f3ef80 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x55d0e8f3f0e8 <line:19:7> col:7 implicit SetIP6Address 'void (const SetIP6Address &)' inline default_delete noexcept-unevaluated 0x55d0e8f3f0e8
| `-ParmVarDecl 0x55d0e8f3f1f8 <col:7> col:7 'const SetIP6Address &'
`-CXXMethodDecl 0x55d0e8f3f298 <col:7> col:7 implicit operator= 'SetIP6Address &(const SetIP6Address &)' inline default_delete noexcept-unevaluated 0x55d0e8f3f298
  `-ParmVarDecl 0x55d0e8f3f3a8 <col:7> col:7 'const SetIP6Address &'

Layout: <CGRecordLayout
  LLVMType:%class.SetIP6Address = type { %class.Element.base, %class.IP6Address, [4 x i8] }
  NonVirtualBaseLLVMType:%class.SetIP6Address.base = type { %class.Element.base, %class.IP6Address }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8cc7ec0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d0e8cc7fd8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55d0e8cc8078 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55d0e8cc80d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55d0e8cc8138 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55d0e8cc81e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8cc84f0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8cc8608 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55d0e8cc86b0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55d0e8cc8718 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55d0e8cc87a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55d0e8cce840 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d0e8ccec78 <col:12>
|-CXXConstructorDecl 0x55d0e8cce948 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8ccea58 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d0e8cc86b0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55d0e8cd1200 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55d0e8cd11d0 <col:12> 'const char *const' lvalue .data 0x55d0e8cc86b0
| |     `-DeclRefExpr 0x55d0e8cd11b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d0e8cc8718 'length' 'int'
| | `-ImplicitCastExpr 0x55d0e8cd1290 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d0e8cd1260 <col:12> 'const int' lvalue .length 0x55d0e8cc8718
| |     `-DeclRefExpr 0x55d0e8cd1240 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d0e8cc87a8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55d0e8cd1320 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55d0e8cd12f0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d0e8cc87a8
| |     `-DeclRefExpr 0x55d0e8cd12d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| `-CompoundStmt 0x55d0e8cd1378 <col:12>
|-CXXConstructorDecl 0x55d0e8cceaf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cceaf8
| `-ParmVarDecl 0x55d0e8ccec08 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55d0e8cd4160 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d0e8cdfb78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8cdfc88 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55d0e8ce01a0 <col:12>
|   |-BinaryOperator 0x55d0e8cdffb8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d0e8cdff70 <col:12> 'const char *' lvalue ->data 0x55d0e8cc86b0
|   | | `-CXXThisExpr 0x55d0e8cdff60 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d0e8cdffa0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8cdff30 <col:12> 'const char *const' lvalue .data 0x55d0e8cc86b0
|   |     `-DeclRefExpr 0x55d0e8cdff10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d0e8ce0080 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55d0e8ce0038 <col:12> 'int' lvalue ->length 0x55d0e8cc8718
|   | | `-CXXThisExpr 0x55d0e8ce0028 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d0e8ce0068 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8cdfff8 <col:12> 'const int' lvalue .length 0x55d0e8cc8718
|   |     `-DeclRefExpr 0x55d0e8cdffd8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d0e8ce0148 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55d0e8ce0100 <col:12> 'String::memo_t *' lvalue ->memo 0x55d0e8cc87a8
|   | | `-CXXThisExpr 0x55d0e8ce00f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d0e8ce0130 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8ce00c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d0e8cc87a8
|   |     `-DeclRefExpr 0x55d0e8ce00a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55d0e8ce0190 <col:12>
|     `-UnaryOperator 0x55d0e8ce0178 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8ce0168 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55d0e8cdfcf8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cdfcf8
  `-ParmVarDecl 0x55d0e8cdfe08 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8cbf430 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d0e8cbf548 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55d0e8cbf5d8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55d0e8cbf618 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d0e8992fd0 'const char *'
|   `-QualType 0x55d0e8992521 'const char' const
|     `-BuiltinType 0x55d0e8992520 'char'
|-TypedefDecl 0x55d0e8cbf6a0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55d0e8cbf670 'String::const_iterator' sugar
|   |-Typedef 0x55d0e8cbf618 'const_iterator'
|   `-PointerType 0x55d0e8992fd0 'const char *'
|     `-QualType 0x55d0e8992521 'const char' const
|       `-BuiltinType 0x55d0e8992520 'char'
|-TypedefDecl 0x55d0e8cbf810 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55d0e8cbf780 'int (String::*)() const'
|   |-RecordType 0x55d0e8cbf4c0 'String'
|   | `-CXXRecord 0x55d0e8cbf430 'String'
|   `-ParenType 0x55d0e8cbf720 'int () const' sugar
|     `-FunctionProtoType 0x55d0e8c932b0 'int () const' const cdecl
|       `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8cbf878 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55d0e8ae7c90 'int64_t' sugar
|   |-Typedef 0x55d0e89fb390 'int64_t'
|   `-TypedefType 0x55d0e89d4630 '__int64_t' sugar
|     |-Typedef 0x55d0e89d4208 '__int64_t'
|     `-BuiltinType 0x55d0e89925a0 'long'
|-TypedefDecl 0x55d0e8cbf8e0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55d0e8ae7bb0 'uint64_t' sugar
|   |-Typedef 0x55d0e89fb530 'uint64_t'
|   `-TypedefType 0x55d0e89d46c0 '__uint64_t' sugar
|     |-Typedef 0x55d0e89d4278 '__uint64_t'
|     `-BuiltinType 0x55d0e8992640 'unsigned long'
|-TypedefDecl 0x55d0e8cbf970 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55d0e8cbf940 'String::intmax_t' sugar
|   |-Typedef 0x55d0e8cbf878 'intmax_t'
|   `-TypedefType 0x55d0e8ae7c90 'int64_t' sugar
|     |-Typedef 0x55d0e89fb390 'int64_t'
|     `-TypedefType 0x55d0e89d4630 '__int64_t' sugar
|       |-Typedef 0x55d0e89d4208 '__int64_t'
|       `-BuiltinType 0x55d0e89925a0 'long'
|-TypedefDecl 0x55d0e8cbfa00 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55d0e8cbf9d0 'String::uintmax_t' sugar
|   |-Typedef 0x55d0e8cbf8e0 'uintmax_t'
|   `-TypedefType 0x55d0e8ae7bb0 'uint64_t' sugar
|     |-Typedef 0x55d0e89fb530 'uint64_t'
|     `-TypedefType 0x55d0e89d46c0 '__uint64_t' sugar
|       |-Typedef 0x55d0e89d4278 '__uint64_t'
|       `-BuiltinType 0x55d0e8992640 'unsigned long'
|-CXXConstructorDecl 0x55d0e8cbfac0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55d0e8cbfc68 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55d0e8cbfba8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55d0e8cbfe18 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55d0e8cbfd58 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55d0e8cbff70 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55d0e8cbfee0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55d0e8cc0188 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d0e8cc0038 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc00b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55d0e8cc03a8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d0e8cc0258 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8cc02d8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55d0e8cc05c8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d0e8cc0478 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55d0e8cc04f8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55d0e8cc07e8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d0e8cc0698 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8cc0718 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55d0e8cc0978 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55d0e8cc08b0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55d0e8cc0af8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55d0e8cc0a38 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55d0e8cc0c88 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d0e8cc0bc0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55d0e8cc0de0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55d0e8cc0d50 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55d0e8cc0f38 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55d0e8cc0ea8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55d0e8cc1090 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55d0e8cc1000 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55d0e8cc1218 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55d0e8cc1158 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55d0e8cc13a8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55d0e8cc12e0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55d0e8cc1538 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55d0e8cc1470 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55d0e8cc16c8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55d0e8cc1600 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55d0e8cc17c0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55d0e8cc18e8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55d0e8cc1a68 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55d0e8cc19a0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55d0e8cc1bb8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55d0e8cc1b28 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55d0e8cc1c70 <col:63> "" ""
|-CXXMethodDecl 0x55d0e8cc1db8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55d0e8cc1cf8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55d0e8cc1fc8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55d0e8cc1e78 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc1ef8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55d0e8cc21e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55d0e8cc2090 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55d0e8cc2110 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55d0e8cc24c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55d0e8cc22a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d0e8cc2328 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55d0e8cce310 <col:55> 'int' 10
| `-ParmVarDecl 0x55d0e8cc23a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d0e8cce330 <col:76> 'bool' true
|-CXXMethodDecl 0x55d0e8cc27a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55d0e8cc2590 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d0e8cc2610 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d0e8cce340 <col:56> 'int' 10
| `-ParmVarDecl 0x55d0e8cc2688 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d0e8cce360 <col:77> 'bool' true
|-CXXMethodDecl 0x55d0e8cc28b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d0e8cc2978 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d0e8cc2a40 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55d0e8cc2ae0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8cc2b38 <col:30>
|-CXXConversionDecl 0x55d0e8cc2c28 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d0e8cc2cf8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55d0e8cc2db8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d0e8cc2ea8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d0e8cc2f68 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d0e8cc30e8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d0e8cc3020 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d0e8cc3238 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55d0e8cc31a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55d0e8cc3328 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d0e8cc33e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d0e8cc3638 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55d0e8cc34a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55d0e8cc3520 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55d0e8cc3898 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55d0e8cc3700 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8cc3780 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55d0e8cc3968 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8cc3b78 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55d0e8cc3a20 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55d0e8cc3aa0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55d0e8cc3d98 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55d0e8cc3c40 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55d0e8cc3cc0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55d0e8cc3f28 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55d0e8cc3e60 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55d0e8cc4018 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55d0e8cc4188 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d0e8cc40c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc4398 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55d0e8cc4248 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc42c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d0e8cc45b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55d0e8cc4458 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55d0e8cc44d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55d0e8cc4740 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55d0e8cc4670 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc4960 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55d0e8cc4800 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc4880 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d0e8cc4ab0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d0e8cc4a20 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc4c88 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d0e8cc4b70 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc4bf0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d0e8cc4dd8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55d0e8cc4d48 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55d0e8cc4ff0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55d0e8cc4e90 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55d0e8cc4f10 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55d0e8cce370 <col:39> 'int' 0
|-CXXMethodDecl 0x55d0e8cc5210 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55d0e8cc50b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55d0e8cc5130 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55d0e8cce390 <col:48> 'int' 0
|-CXXMethodDecl 0x55d0e8cc53f0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55d0e8cc52d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55d0e8cc5350 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55d0e8cce3b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55d0e8cc54c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55d0e8cc5580 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55d0e8cc5640 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55d0e8cc5700 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55d0e8cc57c0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55d0e8cc5968 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d0e8cc5870 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc5ae8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55d0e8cc5a20 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55d0e8cc5cc0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d0e8cc5ba8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55d0e8cc5e38 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55d0e8cc5d78 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55d0e8cc5f80 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55d0e8cc5ef0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc60d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d0e8cc6040 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d0e8cc62a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d0e8cc6190 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc6210 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d0e8cc6488 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d0e8cc6370 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d0e8cc63f0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d0e8cc65d8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55d0e8cc6548 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d0e8cc67e8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d0e8cc6698 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d0e8cc6718 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d0e8cc6948 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55d0e8cc68b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d0e8cc6aa0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55d0e8cc6a08 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55d0e8cc6b48 <col:57> "" ""
|-CXXMethodDecl 0x55d0e8cc6c58 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d0e8cc6bc8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55d0e8cc6da8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d0e8cc6d18 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55d0e8cc6f28 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55d0e8cc6e60 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55d0e8cc6ff0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55d0e8cc70b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55d0e8cc7170 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55d0e8cc7210 <col:49> "" ""
|-CXXMethodDecl 0x55d0e8cc72a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55d0e8cc7360 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55d0e8cc7450 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55d0e8cc7518 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55d0e8cc75d8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55d0e8cc7698 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d0e8cc7790 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55d0e8cc7858 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55d0e8cc7920 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55d0e8cc7af8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55d0e8cc79d8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55d0e8cc7a58 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55d0e8cc7d20 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55d0e8cc7bc0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8cc7c40 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55d0e8cc7e30 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55d0e8cc7e98 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55d0e8cc7ec0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d0e8cc7fd8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55d0e8cc8078 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55d0e8cc80d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55d0e8cc8138 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55d0e8cc81e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55d0e8cc8250 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55d0e8cc8488 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55d0e8cc84d8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8cc8468 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55d0e8cc8378 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55d0e8cc8320 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55d0e8cc8360 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55d0e8cc8340 <col:32> 'int' 8
|-CXXRecordDecl 0x55d0e8cc84f0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d0e8cc8608 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55d0e8cc86b0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55d0e8cc8718 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55d0e8cc87a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55d0e8cce840 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d0e8ccec78 <col:12>
| |-CXXConstructorDecl 0x55d0e8cce948 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8ccea58 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d0e8cc86b0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55d0e8cd1200 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d0e8cd11d0 <col:12> 'const char *const' lvalue .data 0x55d0e8cc86b0
| | |     `-DeclRefExpr 0x55d0e8cd11b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d0e8cc8718 'length' 'int'
| | | `-ImplicitCastExpr 0x55d0e8cd1290 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d0e8cd1260 <col:12> 'const int' lvalue .length 0x55d0e8cc8718
| | |     `-DeclRefExpr 0x55d0e8cd1240 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d0e8cc87a8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55d0e8cd1320 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55d0e8cd12f0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d0e8cc87a8
| | |     `-DeclRefExpr 0x55d0e8cd12d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8ccea58 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55d0e8cd1378 <col:12>
| |-CXXConstructorDecl 0x55d0e8cceaf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cceaf8
| | `-ParmVarDecl 0x55d0e8ccec08 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55d0e8cd4160 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d0e8cdfb78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8cdfc88 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55d0e8ce01a0 <col:12>
| |   |-BinaryOperator 0x55d0e8cdffb8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55d0e8cdff70 <col:12> 'const char *' lvalue ->data 0x55d0e8cc86b0
| |   | | `-CXXThisExpr 0x55d0e8cdff60 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d0e8cdffa0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d0e8cdff30 <col:12> 'const char *const' lvalue .data 0x55d0e8cc86b0
| |   |     `-DeclRefExpr 0x55d0e8cdff10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d0e8ce0080 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55d0e8ce0038 <col:12> 'int' lvalue ->length 0x55d0e8cc8718
| |   | | `-CXXThisExpr 0x55d0e8ce0028 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d0e8ce0068 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55d0e8cdfff8 <col:12> 'const int' lvalue .length 0x55d0e8cc8718
| |   |     `-DeclRefExpr 0x55d0e8cdffd8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d0e8ce0148 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55d0e8ce0100 <col:12> 'String::memo_t *' lvalue ->memo 0x55d0e8cc87a8
| |   | | `-CXXThisExpr 0x55d0e8ce00f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d0e8ce0130 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d0e8ce00c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d0e8cc87a8
| |   |     `-DeclRefExpr 0x55d0e8ce00a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d0e8cdfc88 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55d0e8ce0190 <col:12>
| |     `-UnaryOperator 0x55d0e8ce0178 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d0e8ce0168 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55d0e8cdfcf8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cdfcf8
|   `-ParmVarDecl 0x55d0e8cdfe08 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55d0e8cc8820 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55d0e8cc8a68 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55d0e8cc8888 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55d0e8cc8908 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55d0e8cc8980 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55d0e8cce800 <col:79, line:261:5>
|   |-BinaryOperator 0x55d0e8cce478 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d0e8cce410 <col:2, col:5> 'const char *' lvalue .data 0x55d0e8cc86b0
|   | | `-MemberExpr 0x55d0e8cce3e0 <col:2> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|   | |   `-CXXThisExpr 0x55d0e8cce3d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d0e8cce460 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d0e8cce440 <col:12> 'const char *' lvalue ParmVar 0x55d0e8cc8888 'data' 'const char *'
|   |-BinaryOperator 0x55d0e8cce540 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55d0e8cce4d8 <col:2, col:5> 'int' lvalue .length 0x55d0e8cc8718
|   | | `-MemberExpr 0x55d0e8cce4a8 <col:2> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|   | |   `-CXXThisExpr 0x55d0e8cce498 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d0e8cce528 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d0e8cce508 <col:14> 'int' lvalue ParmVar 0x55d0e8cc8908 'length' 'int'
|   `-IfStmt 0x55d0e8cce7e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55d0e8cce660 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d0e8cce648 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55d0e8cce628 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55d0e8cce608 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55d0e8cce5a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|     |       | `-MemberExpr 0x55d0e8cce570 <col:7> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|     |       |   `-CXXThisExpr 0x55d0e8cce560 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55d0e8cce5f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d0e8cce5d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55d0e8cc8980 'memo' 'String::memo_t *'
|     `-CallExpr 0x55d0e8cce7c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55d0e8cce7a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d0e8cce6b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55d0e8cb7498 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55d0e8cce718 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d0e8cc8078
|         `-ImplicitCastExpr 0x55d0e8cce700 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55d0e8cce6e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55d0e8cc8980 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55d0e8cc8d18 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55d0e8cc8b38 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55d0e8cc8bb8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55d0e8cc8c30 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55d0e8cc8820 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55d0e8ccec88 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d0e8ccee18 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55d0e8cced80 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55d0e8ccecf0 <col:2> '<bound member function type>' ->assign_memo 0x55d0e8cc8a68
|     | `-ImplicitCastExpr 0x55d0e8ccedb8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55d0e8ccece0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55d0e8ccedd0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d0e8cced20 <col:14> 'const char *' lvalue ParmVar 0x55d0e8cc8b38 'data' 'const char *'
|     |-ImplicitCastExpr 0x55d0e8ccede8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d0e8cced40 <col:20> 'int' lvalue ParmVar 0x55d0e8cc8bb8 'length' 'int'
|     `-ImplicitCastExpr 0x55d0e8ccee00 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8cced60 <col:28> 'String::memo_t *' lvalue ParmVar 0x55d0e8cc8c30 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55d0e8cc8ea8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55d0e8cc8de8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55d0e8ccf070 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55d0e8cceff0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55d0e8ccee40 <col:2> '<bound member function type>' ->assign_memo 0x55d0e8cc8a68
|     | `-CXXThisExpr 0x55d0e8ccee30 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55d0e8ccf028 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55d0e8cceec0 <col:14, col:19> 'const char *' lvalue .data 0x55d0e8cc86b0
|     |   `-MemberExpr 0x55d0e8ccee90 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55d0e8cc8820
|     |     `-DeclRefExpr 0x55d0e8ccee70 <col:14> 'const String' lvalue ParmVar 0x55d0e8cc8de8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55d0e8ccf040 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55d0e8ccef40 <col:25, col:30> 'int' lvalue .length 0x55d0e8cc8718
|     |   `-MemberExpr 0x55d0e8ccef10 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55d0e8cc8820
|     |     `-DeclRefExpr 0x55d0e8cceef0 <col:25> 'const String' lvalue ParmVar 0x55d0e8cc8de8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55d0e8ccf058 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55d0e8ccefc0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|         `-MemberExpr 0x55d0e8ccef90 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55d0e8cc8820
|           `-DeclRefExpr 0x55d0e8ccef70 <col:38> 'const String' lvalue ParmVar 0x55d0e8cc8de8 'x' 'const String &'
|-CXXMethodDecl 0x55d0e8cc8f70 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55d0e8ccfa30 <col:31, line:278:5>
|   `-IfStmt 0x55d0e8ccfa18 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55d0e8ccf110 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d0e8ccf0f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55d0e8ccf0c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|     |     `-MemberExpr 0x55d0e8ccf098 <col:6> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|     |       `-CXXThisExpr 0x55d0e8ccf088 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55d0e8ccf9f0 <col:15, line:277:2>
|       |-ParenExpr 0x55d0e8ccf5c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55d0e8ccf590 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55d0e8ccf220 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55d0e8ccf208 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55d0e8ccf1f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55d0e8ccf1b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d0e8cc8078
|       |   |       `-ImplicitCastExpr 0x55d0e8ccf198 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55d0e8ccf168 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|       |   |           `-MemberExpr 0x55d0e8ccf138 <col:27> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|       |   |             `-CXXThisExpr 0x55d0e8ccf128 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55d0e8ccf280 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55d0e8ccf260 <col:54> 'int' 0
|       |   `-CallExpr 0x55d0e8ccf4f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55d0e8ccf4d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d0e8ccf458 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55d0e8ccf530 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d0e8ccf368 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55d0e8ccf548 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d0e8ccf398 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55d0e8ccf560 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55d0e8ccf3d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55d0e8ccf578 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55d0e8ccf440 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55d0e8ccf428 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55d0e8ccf3f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55d0e8ccf910 <line:274:6, line:275:22>
|       | |-CallExpr 0x55d0e8ccf7d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55d0e8ccf7b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55d0e8ccf730 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55d0e8cb88e0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55d0e8ccf700 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d0e8cc8078
|       | |   `-ImplicitCastExpr 0x55d0e8ccf6e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55d0e8ccf6b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|       | |       `-MemberExpr 0x55d0e8ccf688 <col:40> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|       | |         `-CXXThisExpr 0x55d0e8ccf678 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55d0e8ccf8d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55d0e8ccf8b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d0e8ccf7f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55d0e8ccd750 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55d0e8ccf8f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55d0e8ccf858 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|       |       `-MemberExpr 0x55d0e8ccf828 <col:15> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|       |         `-CXXThisExpr 0x55d0e8ccf818 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55d0e8ccf9d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55d0e8ccf968 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d0e8cc87a8
|         | `-MemberExpr 0x55d0e8ccf938 <col:6> 'String::rep_t' lvalue ->_r 0x55d0e8cc8820
|         |   `-CXXThisExpr 0x55d0e8ccf928 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55d0e8ccf9b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55d0e8ccf998 <col:16> 'int' 0
|-CXXMethodDecl 0x55d0e8cc9208 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55d0e8cc9028 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d0e8cc90a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d0e8cc9120 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55d0e8cc92e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d0e8cc9530 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55d0e8cc9398 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d0e8cc9418 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d0e8cc9490 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d0e8cc9718 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55d0e8cc9600 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55d0e8cc9680 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55d0e8cc9818 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55d0e8ccfb08 <col:41, line:286:5>
|   `-ReturnStmt 0x55d0e8ccfaf8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d0e8ccfac8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55d0e8ccfa90 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55d0e8ccfa78 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55d0e8ccfa58 <col:46> 'int' 1
|-CXXMethodDecl 0x55d0e8cc9ab8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55d0e8cc98d0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55d0e8cc9950 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55d0e8cc99d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55d0e8ccd750 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55d0e8cc9b80 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d0e8ccd820 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55d0e8ccd9f0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d0e8ccd8d8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d0e8ccd958 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55d0e8ccdab0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55d0e8ccdb78 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55d0e8ccdc78 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55d0e8ccdcf0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55d0e8ccdd68 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55d0e8ccddd0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55d0e8ccded0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55d0e8ccdf20 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ccdeb0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55d0e8ccde90 <col:22> 'int' 14
|-CXXMethodDecl 0x55d0e8cce138 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55d0e8ccdf50 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55d0e8ccdfd0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55d0e8cce050 <col:43> col:46 'int'
|-FriendDecl 0x55d0e8cce240 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55d0e8cce2d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d0e8f6fff0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55d0e8f701c8 prev 0x55d0e8f6fff0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d0e8f70258 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d0e8f70280 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8f71be0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55d0e8f71b90 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55d0e8f71b70 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55d0e8f70498 'type'
|     `-SubstTemplateTypeParmType 0x55d0e8f70460 'String' sugar
|       |-TemplateTypeParmType 0x55d0e8c82cd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c82c80 'T'
|       `-RecordType 0x55d0e8cbf4c0 'String'
|         `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f71c98 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55d0e8f71c60 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55d0e8f71c40 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d0e8f71be0 'type'
|     `-ElaboratedType 0x55d0e8f71b90 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55d0e8f71b70 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55d0e8f70498 'type'
|         `-SubstTemplateTypeParmType 0x55d0e8f70460 'String' sugar
|           |-TemplateTypeParmType 0x55d0e8c82cd0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d0e8c82c80 'T'
|           `-RecordType 0x55d0e8cbf4c0 'String'
|             `-CXXRecord 0x55d0e8cbf430 'String'
|-CXXMethodDecl 0x55d0e8f71e18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55d0e8f71d28 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55d0e8f71f08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d0e8f71fe8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55d0e8f71fe8
|-CXXMethodDecl 0x55d0e8f722b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d0e8f721c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55d0e8f724f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d0e8f72370 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8f723e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f726c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d0e8f725b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8f72630 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f72828 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d0e8f728f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d0e8f72b58 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d0e8f729d0 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d0e8f72a48 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f72db8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55d0e8f72c28 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d0e8f72ca0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f72f78 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d0e8f72e88 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f73138 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d0e8f73040 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f731f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d0e8f732a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d0e8f734d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d0e8f73350 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8f733c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d0e8f73778 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d0e8f73680 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55d0e8f73840 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55d0e8f73890 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d0e8f738e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d0e8ef6c60 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55d0e8f6ea58 prev 0x55d0e8ef6c60 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d0e8f6ff60 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55d0e8f6ff10 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55d0e8f6fef0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d0e8f6fda0 'type'
|     `-SubstTemplateTypeParmType 0x55d0e8f6fc30 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55d0e8c58a80 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55d0e8c58a28 'F'
|       `-RecordType 0x55d0e8f6f890 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55d0e8f6f7b0 'typed_array_memory'
|-FieldDecl 0x55d0e8f73930 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55d0e8f73980 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d0e8f739b8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|   |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|   `-RecordType 0x55d0e8cbf4c0 'String'
|     `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f73a48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55d0e8f73a10 'String &'
|   `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-RecordType 0x55d0e8cbf4c0 'String'
|       `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f73ad8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55d0e8f73aa0 'const String &'
|   `-QualType 0x55d0e8f6eaf1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-RecordType 0x55d0e8cbf4c0 'String'
|         `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f73b68 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55d0e8f73b30 'String *'
|   `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-RecordType 0x55d0e8cbf4c0 'String'
|       `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f73bf8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55d0e8f73bc0 'const String *'
|   `-QualType 0x55d0e8f6eaf1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-RecordType 0x55d0e8cbf4c0 'String'
|         `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f74850 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55d0e8f74800 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55d0e8f747e0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55d0e8f74718 'type'
|     `-LValueReferenceType 0x55d0e8f746e0 'const String &'
|       `-QualType 0x55d0e8f74481 'const String' const
|         `-SubstTemplateTypeParmType 0x55d0e8f74480 'String' sugar
|           |-TemplateTypeParmType 0x55d0e8c629d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d0e8c62978 'T'
|           `-RecordType 0x55d0e8cbf4c0 'String'
|             `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f748b8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55d0e8f73aa0 'const String &'
|   `-QualType 0x55d0e8f6eaf1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-RecordType 0x55d0e8cbf4c0 'String'
|         `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f74910 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8f74978 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55d0e8f73b30 'String *'
|   `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-RecordType 0x55d0e8cbf4c0 'String'
|       `-CXXRecord 0x55d0e8cbf430 'String'
|-TypedefDecl 0x55d0e8f749e0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55d0e8f73bc0 'const String *'
|   `-QualType 0x55d0e8f6eaf1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d0e8f6eaf0 'String' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-RecordType 0x55d0e8cbf4c0 'String'
|         `-CXXRecord 0x55d0e8cbf430 'String'
|-EnumDecl 0x55d0e8f74a38 <line:134:5> col:5
| `-EnumConstantDecl 0x55d0e8f74b30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d0e8f74b10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d0e8c91678 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d0e8c91650 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d0e8c91630 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d0e8f74bb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d0e8f74e48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8f74c70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8f74d10 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55d0e8f750d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55d0e8f74fc0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55d0e8f75398 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55d0e8f75280 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d0e8f756b0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55d0e8f75590 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55d0e8f759c0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55d0e8f758a0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d0e8f75cb0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8f75af8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8f75b70 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d0e8f75dd8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d0e8f75e88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f75ee0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f75f28 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d0e8f75fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f76030 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f760f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8f761a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f76200 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f76248 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8f762f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f76350 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f76398 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8f76448 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f764a0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f764e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8f76598 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8f765f0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8f76618 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d0e8f766c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d0e8f76778 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d0e8f76938 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8f76828 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8f768a0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d0e8f76a88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8f769f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8f76c38 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55d0e8f76b40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d0e8f76cf0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8f76d48 <col:30>
|-CXXMethodDecl 0x55d0e8f76e68 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55d0e8f76d70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d0e8f76f20 <col:20>
| `-OptimizeNoneAttr 0x55d0e8f76f78 <col:30>
|-CXXMethodDecl 0x55d0e8f77030 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8f76fa0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8f77178 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d0e8f770e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8f772a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55d0e8f773a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55d0e8f77478 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55d0e8f77548 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55d0e8f77688 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8f775f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8f777d0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d0e8f77740 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8f77918 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d0e8f77888 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d0e8f779d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d0e8f77ad0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d0e8f77a40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d0e8f77b88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d0e8f77c48 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55d0e8f77d48 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55d0e8f77ec8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d0e8f77e08 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55d0e8f78688 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d0e8f77f80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55d0e8f785e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55d0e8f784e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55d0e8f78768 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d0e8f788b8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d0e8f78828 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d0e8f78970 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d0e8f78bb8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8f78a30 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d0e8f78aa8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d0e8f78d48 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55d0e8f78c88 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d0e8f78f58 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55d0e8f78e10 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d0e8f78e88 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d0e8f79018 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d0e8f79278 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55d0e8f79180 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55d0e8f79348 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55d0e8f79348

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8f83f68 prev 0x55d0e8e734c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8f84060 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55d0e8f840f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55d0e8f84228 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f84128 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d0e8f85650 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f85630 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d0e8f851c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d0e8f856e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d0e8f856a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55d0e8f84128 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d0e8f85230 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d0e8f85760 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f85720 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d0e8f85290 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d0e8f857a0 <col:54> 'bool' false
| `-CompoundStmt 0x55d0e8f858a8 <col:61, line:38:5>
|   `-BinaryOperator 0x55d0e8f85888 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55d0e8f85820 <col:9> 'const Element *' lvalue ->_context 0x55d0e8f85168
|     | `-CXXThisExpr 0x55d0e8f85810 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55d0e8f85870 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55d0e8f85850 <col:20> 'int' 0
|-CXXConstructorDecl 0x55d0e8f84438 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f842e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55d0e8f84360 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d0e8f85688 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f85668 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55d0e8f85168 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55d0e8f85900 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d0e8f858c0 <col:20> 'const Element *' lvalue ParmVar 0x55d0e8f842e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55d0e8f851c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d0e8f85980 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d0e8f85940 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55d0e8f84360 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d0e8f85230 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d0e8f85a00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d0e8f859c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55d0e8f85290 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d0e8f85a40 <col:73> 'bool' false
| `-CompoundStmt 0x55d0e8f85ab8 <col:80, line:46:5>
|-CXXMethodDecl 0x55d0e8f84568 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55d0e8f85b30 <col:36, line:51:5>
|   `-ReturnStmt 0x55d0e8f85b20 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8f85b08 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55d0e8f85ad8 <col:16> 'const Element *const' lvalue ->_context 0x55d0e8f85168
|         `-CXXThisExpr 0x55d0e8f85ac8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d0e8f84658 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55d0e8f85bb0 <col:32, line:57:5>
|   `-ReturnStmt 0x55d0e8f85ba0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8f85b88 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55d0e8f85b58 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55d0e8f851c8
|         `-CXXThisExpr 0x55d0e8f85b48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d0e8f84718 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55d0e8f848a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d0e8f847d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d0e8f849f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d0e8f84960 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d0e8f84b40 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d0e8f84ab0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d0e8f84d48 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55d0e8f84bf8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55d0e8f84c70 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55d0e8f85078 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55d0e8f84e08 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55d0e8f84e88 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55d0e8f84f50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55d0e8f85130 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55d0e8f85168 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55d0e8f851c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55d0e8f85230 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55d0e8f85290 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55d0e8f852e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d0e8f852e0
| `-ParmVarDecl 0x55d0e8f853f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55d0e8f85498 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d0e8f85498
| `-ParmVarDecl 0x55d0e8f855a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55d0e8feeb88 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d0e8fab530 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55d0e8fab708 prev 0x55d0e8fab530 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d0e8fab798 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d0e8fab7c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fad390 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55d0e8fad340 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55d0e8fabc70 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55d0e8fabb70 'type'
|     `-TemplateSpecializationType 0x55d0e8fabb00 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55d0e8fab9e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55d0e8fab9c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55d0e8fab9a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55d0e8fabae0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55d0e8faba00 'char_array'
|-TypedefDecl 0x55d0e8fad448 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55d0e8fad410 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55d0e8fad3f0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55d0e8fad390 'type'
|     `-ElaboratedType 0x55d0e8fad340 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55d0e8fabc70 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55d0e8fabb70 'type'
|         `-TemplateSpecializationType 0x55d0e8fabb00 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55d0e8fab9e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55d0e8fab9c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55d0e8fab9a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55d0e8fabae0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55d0e8faba00 'char_array'
|-CXXMethodDecl 0x55d0e8fad5c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55d0e8fad4d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55d0e8fad6b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d0e8fad798 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55d0e8fada68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d0e8fad970 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55d0e8fadca8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d0e8fadb20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8fadb98 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fade78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d0e8fadd68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8fadde0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fadfd8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d0e8fae0a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d0e8fae2f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d0e8fae168 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d0e8fae1e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fae558 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55d0e8fae3c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d0e8fae440 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fae718 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d0e8fae628 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fae8d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d0e8fae7e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fae990 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d0e8faea40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d0e8fb60c0 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d0e8faeaf0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d0e8faeb68 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d0e8fb6358 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d0e8fb6260 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55d0e8fb6420 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55d0e8fb6470 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d0e8fb64c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d0e8fa9f38 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d0e8faa148 prev 0x55d0e8fa9f38 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d0e8fab4a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55d0e8fab450 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55d0e8fab430 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55d0e8fab2e0 'type'
|     `-SubstTemplateTypeParmType 0x55d0e8fab100 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55d0e8c58300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c582a8 'T'
|       `-RecordType 0x55d0e8faac50 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55d0e8faab68 'sized_array_memory'
|-FieldDecl 0x55d0e8fb6510 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55d0e8fb6560 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d0e8fb6598 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|   |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|   `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb6628 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55d0e8fb65f0 'int &'
|   `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb66e8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55d0e8fb66b0 'const int &'
|   `-QualType 0x55d0e8faa1e1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb6778 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55d0e8fb6740 'int *'
|   `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb6808 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55d0e8fb67d0 'const int *'
|   `-QualType 0x55d0e8faa1e1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb73f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55d0e8fb73a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55d0e8fb7380 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55d0e8fb7310 'type'
|     `-SubstTemplateTypeParmType 0x55d0e8fb70d0 'int' sugar
|       |-TemplateTypeParmType 0x55d0e8c63100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c630b0 'T'
|       `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb7458 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55d0e8fb66b0 'const int &'
|   `-QualType 0x55d0e8faa1e1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb74b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb7518 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55d0e8fb6740 'int *'
|   `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|     |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|     `-BuiltinType 0x55d0e8992580 'int'
|-TypedefDecl 0x55d0e8fb7580 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55d0e8fb67d0 'const int *'
|   `-QualType 0x55d0e8faa1e1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d0e8faa1e0 'int' sugar
|       |-TemplateTypeParmType 0x55d0e8c8fff0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d0e8c8ff98 'T'
|       `-BuiltinType 0x55d0e8992580 'int'
|-EnumDecl 0x55d0e8fb75d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55d0e8fb76d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d0e8fb76b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d0e8c91678 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d0e8c91650 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d0e8c91630 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d0e8fb7758 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d0e8fb79a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8fb7810 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8fb78b0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55d0e8fb7c68 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55d0e8fb7b50 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55d0e8fb7f28 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55d0e8fb7e10 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d0e8fb8270 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55d0e8fb8150 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55d0e8fb8580 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55d0e8fb8460 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d0e8fb8870 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8fb86b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8fb8730 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d0e8fb8998 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d0e8fb8a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb8ad0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb8b18 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d0e8fb8bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb8c20 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb8ce8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8fb8d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb8df0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb8e38 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8fb8ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb8f40 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb8f88 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8fb9038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb9090 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb90d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d0e8fb9188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d0e8fb91e0 <col:30> Inherited
|-CXXMethodDecl 0x55d0e8fb9208 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d0e8fb92b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d0e8fb9368 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d0e8fb9528 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8fb9418 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d0e8fb9490 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d0e8fb9678 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8fb95e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8fb9828 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55d0e8fb9730 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d0e8fb98e0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8fb9938 <col:30>
|-CXXMethodDecl 0x55d0e8fb9a58 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55d0e8fb9960 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d0e8fb9b10 <col:20>
| `-OptimizeNoneAttr 0x55d0e8fb9b68 <col:30>
|-CXXMethodDecl 0x55d0e8fb9c20 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8fb9b90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8fb9d68 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d0e8fb9cd8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8fb9e98 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55d0e8fb9fc8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55d0e8fba098 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55d0e8fba168 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55d0e8fba2a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d0e8fba218 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8fba3f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d0e8fba360 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d0e8fba538 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d0e8fba4a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d0e8fba5f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d0e8fba6f0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d0e8fba660 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d0e8fba7a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d0e8fba868 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55d0e8fba968 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55d0e8fbaae8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d0e8fbaa28 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55d0e8fbb2a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d0e8fbaba0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55d0e8fbb208 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55d0e8fbb108 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55d0e8fbb388 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d0e8fbb4d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d0e8fbb448 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d0e8fbb590 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d0e8fbb7d8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d0e8fbb650 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d0e8fbb6c8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d0e8fbb998 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55d0e8fbb8a8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d0e8fbbbe8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55d0e8fbba60 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d0e8fbbad8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d0e8fbbca8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d0e8fbbf08 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55d0e8fbbe10 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55d0e8fbbfd8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8fa80a8 prev 0x55d0e8f8ab18 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d0e8fa81a0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55d0e8fa8290 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55d0e8fcde50 <col:16, line:828:9>
|-CXXDestructorDecl 0x55d0e8fa8380 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55d0e8fcde60 <col:25, line:830:9>
|-CXXMethodDecl 0x55d0e8fa8480 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55d0e8fa8530 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55d0e8fa85d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d0e8fa85d8
| `-ParmVarDecl 0x55d0e8fa86e8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55d0e8fa8ea8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d0e8fa8ea8
  `-ParmVarDecl 0x55d0e8fa8fb8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8f8a8f8 prev 0x55d0e8e73558 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55d0e8f8aa88 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55d0e8f8ab18 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55d0e8f8abd0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55d0e8f8acd8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55d0e8f8ac08 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d0e8fbd598 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d0e8fbd578 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d0e8f8aff8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f8ae70 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55d0e8f8aee8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d0e8fbd5d0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d0e8fbd5b0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55d0e8f8b1d0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f8b0c0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55d0e8f8b138 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d0e8fbd608 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d0e8fbd5e8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55d0e8f8b588 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d0e8f8b370 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55d0e8f8b3e8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55d0e8f8b460 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d0e8fbd640 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d0e8fbd620 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d0e8f8b748 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55d0e8f8b688 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55d0e8f8b840 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55d0e8f8b9f8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55d0e8f8b930 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55d0e8f8bae8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55d0e8fbd9f0 <col:24, line:291:5>
|   `-ReturnStmt 0x55d0e8fbd9e0 <line:290:9, col:79>
|     `-BinaryOperator 0x55d0e8fbd9c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55d0e8fbd898 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55d0e8fbd7f0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55d0e8fbd7d0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55d0e8fbd6c8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55d0e8fbd6b0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55d0e8fbd698 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55d0e8fbd668 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55d0e8fa9ed0
|       | |   |       `-CXXThisExpr 0x55d0e8fbd658 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55d0e8fbd7b8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55d0e8fbd7a0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55d0e8fbd768 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55d0e8fbd738 <col:28, col:35> '<bound member function type>' ->size 0x55d0e8f76618
|       | |           `-ImplicitCastExpr 0x55d0e8fbd788 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55d0e8fbd720 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55d0e8fbd6f0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55d0e8fa9ed0
|       | |                 `-CXXThisExpr 0x55d0e8fbd6e0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55d0e8fbd880 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55d0e8fbd868 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55d0e8fbd850 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55d0e8fbd820 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55d0e8fbc120
|       |         `-CXXThisExpr 0x55d0e8fbd810 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55d0e8fbd9a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8fbd988 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d0e8fbd970 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d0e8fbd930 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d0e8fbd918 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d0e8fbd8c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d0e8fbc1d0
|         |     |   `-CXXThisExpr 0x55d0e8fbd8b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d0e8fbd8f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55d0e8fbd950 <col:79> 'int' 0
|-CXXMethodDecl 0x55d0e8f8bba8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55d0e8fbdbc8 <col:32, line:296:5>
|   `-ReturnStmt 0x55d0e8fbdbb8 <line:295:9, col:49>
|     `-BinaryOperator 0x55d0e8fbdb98 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55d0e8fbda78 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55d0e8fbda60 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55d0e8fbda48 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55d0e8fbda18 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55d0e8fbc120
|       |       `-CXXThisExpr 0x55d0e8fbda08 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55d0e8fbdb78 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55d0e8fbdb60 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d0e8fbdb48 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d0e8fbdb08 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d0e8fbdaf0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d0e8fbdaa0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d0e8fbc1d0
|         |     |   `-CXXThisExpr 0x55d0e8fbda90 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d0e8fbdad0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55d0e8fbdb28 <col:49> 'int' 0
|-CXXMethodDecl 0x55d0e8f8bc98 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55d0e8fbddd8 <col:19, line:306:5>
|   |-IfStmt 0x55d0e8fbdcf8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55d0e8fbdc38 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55d0e8fbdc20 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55d0e8fbdbf0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d0e8fa9ed0
|   | |     `-CXXThisExpr 0x55d0e8fbdbe0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55d0e8fbdcd8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55d0e8fbdca8 <col:13, col:20> '<bound member function type>' ->clear 0x55d0e8f79018
|   |     `-ImplicitCastExpr 0x55d0e8fbdc90 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55d0e8fbdc60 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d0e8fa9ed0
|   |         `-CXXThisExpr 0x55d0e8fbdc50 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55d0e8fbdd80 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55d0e8fbdd50 <col:9, col:16> '<bound member function type>' .clear 0x55d0e8fbbca8
|   |   `-MemberExpr 0x55d0e8fbdd20 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55d0e8fbc0c0
|   |     `-CXXThisExpr 0x55d0e8fbdd10 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55d0e8fbddc8 <line:305:9, col:17>
|     `-UnaryOperator 0x55d0e8fbddb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fbdda0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d0e8f8bf18 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55d0e8f8be20 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55d0e8f8c098 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55d0e8f8bfd0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55d0e8f8c418 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55d0e8f8c140 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55d0e8f8c378 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55d0e8f8c1e8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55d0e8f8c260 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55d0e8fbfa70 <col:67, line:327:5>
|     |-WhileStmt 0x55d0e8fbfa20 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55d0e8fbded0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d0e8fbde40 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d0e8f30a08 0x55d0e8f13440 0x55d0e8eb1bd8 0x55d0e8cfb1b8 0x55d0e8cfae90 0x55d0e8cec670 0x55d0e8cec320 0x55d0e8cebc10 0x55d0e8cbe580 0x55d0e8c4aa40
|     | | |-DeclRefExpr 0x55d0e8fbde00 <col:16> 'Iter' lvalue ParmVar 0x55d0e8f8c1e8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55d0e8fbde20 <col:25> 'Iter' lvalue ParmVar 0x55d0e8f8c260 'end' 'Iter'
|     | `-CompoundStmt 0x55d0e8fbe098 <col:30, line:325:9>
|     |   |-CallExpr 0x55d0e8fbe038 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55d0e8fbdf18 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55d0e8fbe008 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55d0e8fbdf98 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|     |   |   `-DeclRefExpr 0x55d0e8fbdf78 <col:24> 'Iter' lvalue ParmVar 0x55d0e8f8c1e8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55d0e8fbe080 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55d0e8fbe060 <col:15> 'Iter' lvalue ParmVar 0x55d0e8f8c1e8 'begin' 'Iter'
|     `-ReturnStmt 0x55d0e8fbfa60 <line:326:9, col:17>
|       `-UnaryOperator 0x55d0e8fbfa48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fbfa38 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d0e8f8c520 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55d0e8f8c490 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55d0e8f8c668 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55d0e8f8c5d8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55d0e8f8c730 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55d0e8fbfb50 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55d0e8fbfaf0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55d0e8fbfaa0 <col:9> '<bound member function type>' ->reset_from 0x55d0e8fbc548
|   | | `-CXXThisExpr 0x55d0e8fbfa90 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55d0e8fbfad0 <col:20> 'int' 0
|   `-ReturnStmt 0x55d0e8fbfb40 <line:352:9, col:17>
|     `-UnaryOperator 0x55d0e8fbfb28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fbfb18 <col:17> 'Args *' this
|-VarDecl 0x55d0e8f8c7e8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d0e8f8c850 <col:38> 'int' 1
|-VarDecl 0x55d0e8f8c8e0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d0e8f8c948 <col:39> 'int' 2
|-VarDecl 0x55d0e8f8c9d8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d0e8f8ca40 <col:39> 'int' 4
|-VarDecl 0x55d0e8f8cad0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d0e8f8cb38 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55d0e8f8ceb8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55d0e8f8cbb0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f8ce18 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d0e8f8cc60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8cd08 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fbfca8 <col:43, line:371:5>
|     `-ReturnStmt 0x55d0e8fbfc98 <line:370:9, col:34>
|       `-CallExpr 0x55d0e8fbfc60 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fbfb80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fbfc00 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8cc60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fbfc20 <col:30> 'int' 0
|         `-DeclRefExpr 0x55d0e8fbfc40 <col:33> 'T' lvalue ParmVar 0x55d0e8f8cd08 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8d1e8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55d0e8f8cf20 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f8d148 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d0e8f8cfd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8d078 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fbfdf8 <col:45, line:375:5>
|     `-ReturnStmt 0x55d0e8fbfde8 <line:374:9, col:42>
|       `-CallExpr 0x55d0e8fbfdb0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fbfcd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fbfd50 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8cfd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fbfd70 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d0e8fbfd90 <col:41> 'T' lvalue ParmVar 0x55d0e8f8d078 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8d518 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55d0e8f8d250 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f8d478 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d0e8f8d300 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8d3a8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fbff48 <col:45, line:379:5>
|     `-ReturnStmt 0x55d0e8fbff38 <line:378:9, col:43>
|       `-CallExpr 0x55d0e8fbff00 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fbfe20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fbfea0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8d300 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fbfec0 <col:30> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         `-DeclRefExpr 0x55d0e8fbfee0 <col:42> 'T' lvalue ParmVar 0x55d0e8f8d3a8 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8d848 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55d0e8f8d580 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d0e8f8d7a8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d0e8f8d630 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d0e8f8d6d8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55d0e8fc0148 <col:46, line:383:5>
| |   `-ReturnStmt 0x55d0e8fc0138 <line:382:9, col:55>
| |     `-CallExpr 0x55d0e8fc0100 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d0e8fbff70 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d0e8fbfff0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8d630 'keyword' 'const char *'
| |       |-BinaryOperator 0x55d0e8fc00c0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55d0e8fc0070 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55d0e8fc0050 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55d0e8fc00a8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55d0e8fc0088 <col:42> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55d0e8fc00e0 <col:54> 'T' lvalue ParmVar 0x55d0e8f8d6d8 'x' 'T &'
| `-CXXMethodDecl 0x55d0e8fef018 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
|   |-TemplateArgument type 'IP6Address'
|   |-ParmVarDecl 0x55d0e8feee30 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55d0e8feef08 <col:40, col:43> col:43 x 'IP6Address &'
|-FunctionTemplateDecl 0x55d0e8f8dc48 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55d0e8f8d8b0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f8dba8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55d0e8f8d960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8d9e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f8da88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc0288 <col:54, line:388:5>
|     |-CallExpr 0x55d0e8fc0210 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc0160 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d0e8fc01a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc01b0 <col:30> 'const char *' lvalue ParmVar 0x55d0e8f8d960 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc01d0 <col:39> 'int' lvalue ParmVar 0x55d0e8f8d9e0 'flags' 'int'
|     | `-DeclRefExpr 0x55d0e8fc01f0 <col:46> 'T' lvalue ParmVar 0x55d0e8f8da88 'x' 'T &'
|     `-ReturnStmt 0x55d0e8fc0278 <line:387:9, col:17>
|       `-UnaryOperator 0x55d0e8fc0260 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc0250 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f8e0f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f8dcb8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f8dd38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d0e8f8e058 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f8ddf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8de98 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f8df38 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc03f8 <col:74, line:403:5>
|     `-ReturnStmt 0x55d0e8fc03e8 <line:402:9, col:56>
|       `-CallExpr 0x55d0e8fc03a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc02b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0328 <col:28> 'const char *' lvalue ParmVar 0x55d0e8f8ddf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc0348 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc0368 <col:40> 'T' lvalue ParmVar 0x55d0e8f8de98 'x' 'T &'
|         `-DeclRefExpr 0x55d0e8fc0388 <col:43> 'const V' lvalue ParmVar 0x55d0e8f8df38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d0e8f8e568 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d0e8f8e168 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f8e1e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d0e8f8e4c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f8e2a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8e348 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f8e3e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc0560 <col:76, line:407:5>
|     `-ReturnStmt 0x55d0e8fc0550 <line:406:9, col:65>
|       `-CallExpr 0x55d0e8fc0510 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc0420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0490 <col:28> 'const char *' lvalue ParmVar 0x55d0e8f8e2a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc04b0 <col:37> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         |-DeclRefExpr 0x55d0e8fc04d0 <col:49> 'T' lvalue ParmVar 0x55d0e8f8e348 'x' 'T &'
|         `-DeclRefExpr 0x55d0e8fc04f0 <col:52> 'const V' lvalue ParmVar 0x55d0e8f8e3e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d0e8f8eab8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f8e5d8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f8e658 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d0e8f8ea18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f8e718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8e798 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f8e838 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f8e8d8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc06c8 <col:85, line:412:5>
|     |-CallExpr 0x55d0e8fc0648 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc0578 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d0e8fc05b8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc05c8 <col:37> 'const char *' lvalue ParmVar 0x55d0e8f8e718 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc05e8 <col:46> 'int' lvalue ParmVar 0x55d0e8f8e798 'flags' 'int'
|     | |-DeclRefExpr 0x55d0e8fc0608 <col:53> 'T' lvalue ParmVar 0x55d0e8f8e838 'x' 'T &'
|     | `-DeclRefExpr 0x55d0e8fc0628 <col:56> 'const V' lvalue ParmVar 0x55d0e8f8e8d8 'default_value' 'const V &'
|     `-ReturnStmt 0x55d0e8fc06b8 <line:411:9, col:17>
|       `-UnaryOperator 0x55d0e8fc06a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc0690 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f8ef48 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55d0e8f8eb30 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f8eba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f8eea8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f8ec68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8ece0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f8ed88 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc0848 <col:53, line:425:5>
|     `-ReturnStmt 0x55d0e8fc0838 <line:424:9, col:42>
|       `-CallExpr 0x55d0e8fc07f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc06f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0778 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8ec68 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc0798 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc07b8 <col:33> 'P' lvalue ParmVar 0x55d0e8f8ece0 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc07d8 <col:41> 'T' lvalue ParmVar 0x55d0e8f8ed88 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8f398 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55d0e8f8efb8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f8f038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f8f2f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f8f0f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8f170 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f8f218 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc09c0 <col:55, line:429:5>
|     `-ReturnStmt 0x55d0e8fc09b0 <line:428:9, col:50>
|       `-CallExpr 0x55d0e8fc0970 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc0870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc08f0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8f0f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc0910 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d0e8fc0930 <col:41> 'P' lvalue ParmVar 0x55d0e8f8f170 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc0950 <col:49> 'T' lvalue ParmVar 0x55d0e8f8f218 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8f7e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55d0e8f8f408 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f8f488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f8f748 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f8f548 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8f5c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f8f668 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc0b38 <col:55, line:433:5>
|     `-ReturnStmt 0x55d0e8fc0b28 <line:432:9, col:51>
|       `-CallExpr 0x55d0e8fc0ae8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc09e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0a68 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8f548 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc0a88 <col:30> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         |-DeclRefExpr 0x55d0e8fc0aa8 <col:42> 'P' lvalue ParmVar 0x55d0e8f8f5c0 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc0ac8 <col:50> 'T' lvalue ParmVar 0x55d0e8f8f668 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f8fc38 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55d0e8f8f858 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f8f8d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f8fb98 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f8f998 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8fa10 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f8fab8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc0d60 <col:56, line:437:5>
|     `-ReturnStmt 0x55d0e8fc0d50 <line:436:9, col:63>
|       `-CallExpr 0x55d0e8fc0d10 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc0b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0be0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f8f998 'keyword' 'const char *'
|         |-BinaryOperator 0x55d0e8fc0cb0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d0e8fc0c60 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d0e8fc0c40 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d0e8fc0c98 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d0e8fc0c78 <col:42> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d0e8fc0cd0 <col:54> 'P' lvalue ParmVar 0x55d0e8f8fa10 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc0cf0 <col:62> 'T' lvalue ParmVar 0x55d0e8f8fab8 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f90168 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55d0e8f8fca8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f8fd28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f900c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d0e8f8fde8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f8fe68 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f8fee0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f8ff88 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc0ec8 <col:64, line:442:5>
|     |-CallExpr 0x55d0e8fc0e48 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc0d78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d0e8fc0db8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc0dc8 <col:30> 'const char *' lvalue ParmVar 0x55d0e8f8fde8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc0de8 <col:39> 'int' lvalue ParmVar 0x55d0e8f8fe68 'flags' 'int'
|     | |-DeclRefExpr 0x55d0e8fc0e08 <col:46> 'P' lvalue ParmVar 0x55d0e8f8fee0 'parser' 'P'
|     | `-DeclRefExpr 0x55d0e8fc0e28 <col:54> 'T' lvalue ParmVar 0x55d0e8f8ff88 'x' 'T &'
|     `-ReturnStmt 0x55d0e8fc0eb8 <line:441:9, col:17>
|       `-UnaryOperator 0x55d0e8fc0ea0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc0e90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f90768 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f901e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f90258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d0e8f902d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d0e8f906c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f903a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f90418 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f904b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f90588 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc1060 <col:84, line:458:5>
|     `-ReturnStmt 0x55d0e8fc1050 <line:457:9, col:64>
|       `-CallExpr 0x55d0e8fc1008 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc0ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc0f68 <col:28> 'const char *' lvalue ParmVar 0x55d0e8f903a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc0f88 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc0fa8 <col:40> 'P' lvalue ParmVar 0x55d0e8f90418 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc0fc8 <col:48> 'T' lvalue ParmVar 0x55d0e8f904b8 'x' 'T &'
|         `-DeclRefExpr 0x55d0e8fc0fe8 <col:51> 'const V' lvalue ParmVar 0x55d0e8f90588 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d0e8f90ce8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d0e8f907e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f90858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d0e8f908d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d0e8f90c48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f909a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f90a18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f90ab8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f90b58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc11f0 <col:86, line:462:5>
|     `-ReturnStmt 0x55d0e8fc11e0 <line:461:9, col:73>
|       `-CallExpr 0x55d0e8fc1198 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc10f8 <col:28> 'const char *' lvalue ParmVar 0x55d0e8f909a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc1118 <col:37> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         |-DeclRefExpr 0x55d0e8fc1138 <col:49> 'P' lvalue ParmVar 0x55d0e8f90a18 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc1158 <col:57> 'T' lvalue ParmVar 0x55d0e8f90ab8 'x' 'T &'
|         `-DeclRefExpr 0x55d0e8fc1178 <col:60> 'const V' lvalue ParmVar 0x55d0e8f90b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d0e8f91348 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f90d60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f90dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d0e8f90e58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d0e8f912a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f90f20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f90fa0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f91018 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f910b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f91158 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d0e8fc1380 <col:95, line:467:5>
|     |-CallExpr 0x55d0e8fc12f8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc1208 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d0e8fc1248 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc1258 <col:37> 'const char *' lvalue ParmVar 0x55d0e8f90f20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc1278 <col:46> 'int' lvalue ParmVar 0x55d0e8f90fa0 'flags' 'int'
|     | |-DeclRefExpr 0x55d0e8fc1298 <col:53> 'P' lvalue ParmVar 0x55d0e8f91018 'parser' 'P'
|     | |-DeclRefExpr 0x55d0e8fc12b8 <col:61> 'T' lvalue ParmVar 0x55d0e8f910b8 'x' 'T &'
|     | `-DeclRefExpr 0x55d0e8fc12d8 <col:64> 'const V' lvalue ParmVar 0x55d0e8f91158 'default_value' 'const V &'
|     `-ReturnStmt 0x55d0e8fc1370 <line:466:9, col:17>
|       `-UnaryOperator 0x55d0e8fc1358 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc1348 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f91928 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55d0e8f913c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f91448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f914c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8f91888 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f91590 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f91608 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f916a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f91748 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d0e8fc1528 <col:63, line:481:5>
|     `-ReturnStmt 0x55d0e8fc1518 <line:480:9, col:47>
|       `-CallExpr 0x55d0e8fc14d0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc13b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1430 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f91590 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc1450 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc1470 <col:33> 'P' lvalue ParmVar 0x55d0e8f91608 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc1490 <col:41> 'T1' lvalue ParmVar 0x55d0e8f916a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d0e8fc14b0 <col:45> 'T2' lvalue ParmVar 0x55d0e8f91748 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d0e8f91ea8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55d0e8f919a0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f91a18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f91a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8f91e08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f91b60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f91bd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f91c78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f91d18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d0e8fc16c8 <col:65, line:485:5>
|     `-ReturnStmt 0x55d0e8fc16b8 <line:484:9, col:55>
|       `-CallExpr 0x55d0e8fc1670 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc15d0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f91b60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc15f0 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d0e8fc1610 <col:41> 'P' lvalue ParmVar 0x55d0e8f91bd8 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc1630 <col:49> 'T1' lvalue ParmVar 0x55d0e8f91c78 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d0e8fc1650 <col:53> 'T2' lvalue ParmVar 0x55d0e8f91d18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d0e8f92428 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55d0e8f91f20 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f91f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f92018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8f92388 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f920e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f92158 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f921f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f92298 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d0e8fc1868 <col:65, line:489:5>
|     `-ReturnStmt 0x55d0e8fc1858 <line:488:9, col:56>
|       `-CallExpr 0x55d0e8fc1810 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc16f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1770 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f920e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc1790 <col:30> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         |-DeclRefExpr 0x55d0e8fc17b0 <col:42> 'P' lvalue ParmVar 0x55d0e8f92158 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc17d0 <col:50> 'T1' lvalue ParmVar 0x55d0e8f921f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d0e8fc17f0 <col:54> 'T2' lvalue ParmVar 0x55d0e8f92298 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d0e8f96070 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55d0e8f924a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f92518 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f92598 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8f92908 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f92660 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f926d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f92778 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f92818 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d0e8fc1ab8 <col:66, line:493:5>
|     `-ReturnStmt 0x55d0e8fc1aa8 <line:492:9, col:68>
|       `-CallExpr 0x55d0e8fc1a60 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1910 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f92660 'keyword' 'const char *'
|         |-BinaryOperator 0x55d0e8fc19e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d0e8fc1990 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d0e8fc1970 <col:30> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d0e8fc19c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d0e8fc19a8 <col:42> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d0e8fc1a00 <col:54> 'P' lvalue ParmVar 0x55d0e8f926d8 'parser' 'P'
|         |-DeclRefExpr 0x55d0e8fc1a20 <col:62> 'T1' lvalue ParmVar 0x55d0e8f92778 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d0e8fc1a40 <col:66> 'T2' lvalue ParmVar 0x55d0e8f92818 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d0e8f966d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55d0e8f960e8 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f96168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f961e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8f96638 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f962b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f96330 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f963a8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f96448 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f964e8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d0e8fc1c48 <col:74, line:498:5>
|     |-CallExpr 0x55d0e8fc1bc0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc1ad0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d0e8fc1b10 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc1b20 <col:30> 'const char *' lvalue ParmVar 0x55d0e8f962b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc1b40 <col:39> 'int' lvalue ParmVar 0x55d0e8f96330 'flags' 'int'
|     | |-DeclRefExpr 0x55d0e8fc1b60 <col:46> 'P' lvalue ParmVar 0x55d0e8f963a8 'parser' 'P'
|     | |-DeclRefExpr 0x55d0e8fc1b80 <col:54> 'T1' lvalue ParmVar 0x55d0e8f96448 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55d0e8fc1ba0 <col:58> 'T2' lvalue ParmVar 0x55d0e8f964e8 'x2' 'T2 &'
|     `-ReturnStmt 0x55d0e8fc1c38 <line:497:9, col:17>
|       `-UnaryOperator 0x55d0e8fc1c20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc1c10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f96a38 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55d0e8f96758 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f96998 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d0e8f96810 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f96888 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc1d90 <col:52, line:509:5>
|     `-ReturnStmt 0x55d0e8fc1d80 <line:508:9, col:44>
|       `-CallExpr 0x55d0e8fc1d48 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1c78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1ce8 <col:26> 'const char *' lvalue ParmVar 0x55d0e8f96810 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc1d08 <col:35> 'int' 0
|         `-DeclRefExpr 0x55d0e8fc1d28 <col:38> 'P' lvalue ParmVar 0x55d0e8f96888 'parser' 'P'
|-FunctionTemplateDecl 0x55d0e8f96d38 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55d0e8f96aa0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f96c98 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d0e8f96b50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f96bc8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc1ed0 <col:54, line:513:5>
|     `-ReturnStmt 0x55d0e8fc1ec0 <line:512:9, col:52>
|       `-CallExpr 0x55d0e8fc1e88 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1e28 <col:26> 'const char *' lvalue ParmVar 0x55d0e8f96b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc1e48 <col:35> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d0e8fc1e68 <col:46> 'P' lvalue ParmVar 0x55d0e8f96bc8 'parser' 'P'
|-FunctionTemplateDecl 0x55d0e8f97038 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55d0e8f96da0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f96f98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d0e8f96e50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f96ec8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc2010 <col:54, line:517:5>
|     `-ReturnStmt 0x55d0e8fc2000 <line:516:9, col:53>
|       `-CallExpr 0x55d0e8fc1fc8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc1ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc1f68 <col:26> 'const char *' lvalue ParmVar 0x55d0e8f96e50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc1f88 <col:35> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int'
|         `-DeclRefExpr 0x55d0e8fc1fa8 <col:47> 'P' lvalue ParmVar 0x55d0e8f96ec8 'parser' 'P'
|-FunctionTemplateDecl 0x55d0e8f97338 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d0e8f970a0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f97298 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d0e8f97150 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f971c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc2200 <col:55, line:521:5>
|     `-ReturnStmt 0x55d0e8fc21f0 <line:520:9, col:65>
|       `-CallExpr 0x55d0e8fc21b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc2038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc20a8 <col:26> 'const char *' lvalue ParmVar 0x55d0e8f97150 'keyword' 'const char *'
|         |-BinaryOperator 0x55d0e8fc2178 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55d0e8fc2128 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d0e8fc2108 <col:35> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d0e8fc2160 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d0e8fc2140 <col:47> 'const int' lvalue Var 0x55d0e8f8c8e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d0e8fc2198 <col:59> 'P' lvalue ParmVar 0x55d0e8f971c8 'parser' 'P'
|-FunctionTemplateDecl 0x55d0e8f97708 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55d0e8f973a0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f97668 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d0e8f97450 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f974d0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f97548 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc2340 <col:63, line:526:5>
|     |-CallExpr 0x55d0e8fc22c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc2218 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55d0e8fc2258 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc2268 <col:35> 'const char *' lvalue ParmVar 0x55d0e8f97450 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d0e8fc2288 <col:44> 'int' lvalue ParmVar 0x55d0e8f974d0 'flags' 'int'
|     | `-DeclRefExpr 0x55d0e8fc22a8 <col:51> 'P' lvalue ParmVar 0x55d0e8f97548 'parser' 'P'
|     `-ReturnStmt 0x55d0e8fc2330 <line:525:9, col:17>
|       `-UnaryOperator 0x55d0e8fc2318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc2308 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f97b58 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55d0e8f97778 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f977f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f97ab8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f978b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f97930 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f979d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc2498 <col:58, line:541:5>
|     `-ReturnStmt 0x55d0e8fc2488 <line:540:9, col:39>
|       `-CallExpr 0x55d0e8fc2450 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc2370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc23f0 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f978b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc2410 <col:30> 'P' lvalue ParmVar 0x55d0e8f97930 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc2430 <col:38> 'T' lvalue ParmVar 0x55d0e8f979d8 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f97fa8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55d0e8f97bc8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f97c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f97f08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f97d08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f97d80 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f97e28 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc25d0 <col:60, line:545:5>
|     `-ReturnStmt 0x55d0e8fc25c0 <line:544:9, col:41>
|       `-CallExpr 0x55d0e8fc2588 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc24c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc2528 <col:23> 'const char *' lvalue ParmVar 0x55d0e8f97d08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc2548 <col:32> 'P' lvalue ParmVar 0x55d0e8f97d80 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc2568 <col:40> 'T' lvalue ParmVar 0x55d0e8f97e28 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f983f8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55d0e8f98018 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f98098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f98358 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f98158 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f981d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f98278 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc2708 <col:60, line:549:5>
|     `-ReturnStmt 0x55d0e8fc26f8 <line:548:9, col:41>
|       `-CallExpr 0x55d0e8fc26c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc25f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc2660 <col:23> 'const char *' lvalue ParmVar 0x55d0e8f98158 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc2680 <col:32> 'P' lvalue ParmVar 0x55d0e8f981d0 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc26a0 <col:40> 'T' lvalue ParmVar 0x55d0e8f98278 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f98848 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d0e8f98468 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f984e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f987a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f985a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f98620 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f986c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc2840 <col:61, line:553:5>
|     `-ReturnStmt 0x55d0e8fc2830 <line:552:9, col:42>
|       `-CallExpr 0x55d0e8fc27f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc2730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc2798 <col:24> 'const char *' lvalue ParmVar 0x55d0e8f985a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc27b8 <col:33> 'P' lvalue ParmVar 0x55d0e8f98620 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc27d8 <col:41> 'T' lvalue ParmVar 0x55d0e8f986c8 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f98d28 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55d0e8f988b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f98938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f98c88 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d0e8f989f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f98a78 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f98af0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f98b98 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc29b8 <col:69, line:557:5>
|     `-ReturnStmt 0x55d0e8fc29a8 <line:556:9, col:46>
|       `-CallExpr 0x55d0e8fc2968 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc2868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc28e8 <col:21> 'const char *' lvalue ParmVar 0x55d0e8f989f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc2908 <col:30> 'int' lvalue ParmVar 0x55d0e8f98a78 'flags' 'int'
|         |-DeclRefExpr 0x55d0e8fc2928 <col:37> 'P' lvalue ParmVar 0x55d0e8f98af0 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc2948 <col:45> 'T' lvalue ParmVar 0x55d0e8f98b98 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f99038 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55d0e8f98da0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f98f98 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d0e8f98e50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f98ec8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc2af8 <col:56, line:571:5>
|     `-ReturnStmt 0x55d0e8fc2ae8 <line:570:9, col:48>
|       `-CallExpr 0x55d0e8fc2ab0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc29e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc2a50 <col:30> 'const char *' lvalue ParmVar 0x55d0e8f98e50 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc2a70 <col:39> 'int' 0
|         `-DeclRefExpr 0x55d0e8fc2a90 <col:42> 'P' lvalue ParmVar 0x55d0e8f98ec8 'parser' 'P'
|-FunctionTemplateDecl 0x55d0e8f993c8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55d0e8f990a0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8f99328 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d0e8f99150 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f991d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f99248 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fc2cc8 <col:67, line:576:5>
|     |-CallExpr 0x55d0e8fc2c50 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc2b10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d0e8fc2b50 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc2b60 <col:39> 'const char *' lvalue ParmVar 0x55d0e8f99150 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d0e8fc2c10 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d0e8fc2bc0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d0e8fc2b80 <col:48> 'int' lvalue ParmVar 0x55d0e8f991d0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d0e8fc2bf8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d0e8fc2bd8 <col:56> 'const int' lvalue Var 0x55d0e8f8cad0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55d0e8fc2c30 <col:68> 'P' lvalue ParmVar 0x55d0e8f99248 'parser' 'P'
|     `-ReturnStmt 0x55d0e8fc2cb8 <line:575:9, col:17>
|       `-UnaryOperator 0x55d0e8fc2ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc2c90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f99818 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55d0e8f99438 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f994b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f99778 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d0e8f99578 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f995f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f99698 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc2e38 <col:62, line:592:5>
|     `-ReturnStmt 0x55d0e8fc2e28 <line:591:9, col:51>
|       `-CallExpr 0x55d0e8fc2de8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc2cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc2d68 <col:30> 'const char *' lvalue ParmVar 0x55d0e8f99578 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc2d88 <col:39> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc2da8 <col:42> 'P' lvalue ParmVar 0x55d0e8f995f0 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc2dc8 <col:50> 'T' lvalue ParmVar 0x55d0e8f99698 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f99cf8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55d0e8f99888 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f99908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f99c58 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d0e8f999c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f99a48 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f99ac0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f99b68 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc3030 <col:73, line:597:5>
|     |-CallExpr 0x55d0e8fc2fb0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc2e50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d0e8fc2e90 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc2ea0 <col:39> 'const char *' lvalue ParmVar 0x55d0e8f999c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d0e8fc2f50 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d0e8fc2f00 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d0e8fc2ec0 <col:48> 'int' lvalue ParmVar 0x55d0e8f99a48 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d0e8fc2f38 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d0e8fc2f18 <col:56> 'const int' lvalue Var 0x55d0e8f8cad0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d0e8fc2f70 <col:68> 'P' lvalue ParmVar 0x55d0e8f99ac0 'parser' 'P'
|     | `-DeclRefExpr 0x55d0e8fc2f90 <col:76> 'T' lvalue ParmVar 0x55d0e8f99b68 'x' 'T &'
|     `-ReturnStmt 0x55d0e8fc3020 <line:596:9, col:17>
|       `-UnaryOperator 0x55d0e8fc3008 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc2ff8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f9a2a8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55d0e8f99d70 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f99de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f9a208 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d0e8f99ea8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f99f20 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f9a0e0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d0e8fc31a0 <col:65, line:614:5>
|     `-ReturnStmt 0x55d0e8fc3190 <line:613:9, col:46>
|       `-CallExpr 0x55d0e8fc3150 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc3060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc30d0 <col:25> 'const char *' lvalue ParmVar 0x55d0e8f99ea8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc30f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55d0e8fc3110 <col:37> 'P' lvalue ParmVar 0x55d0e8f99f20 'parser' 'P'
|         `-DeclRefExpr 0x55d0e8fc3130 <col:45> 'Vector<T>' lvalue ParmVar 0x55d0e8f9a0e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d0e8f9a6d8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55d0e8f9a318 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f9a638 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55d0e8f9a3d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9a520 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d0e8fc33c0 <col:55, line:618:5>
|     `-ReturnStmt 0x55d0e8fc33b0 <line:617:9, col:55>
|       `-CallExpr 0x55d0e8fc3370 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc31c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc3238 <col:25> 'const char *' lvalue ParmVar 0x55d0e8f9a3d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d0e8fc3258 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55d0e8fc3330 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d0e8fc3350 <col:54> 'Vector<T>' lvalue ParmVar 0x55d0e8f9a520 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d0e8f9aca8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55d0e8f9a740 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f9a7b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f9ac08 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d0e8f9a878 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9a8f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9a970 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f9aac0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d0e8fc35b8 <col:76, line:623:5>
|     |-CallExpr 0x55d0e8fc3538 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d0e8fc33d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55d0e8fc3418 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55d0e8fc3428 <col:34> 'const char *' lvalue ParmVar 0x55d0e8f9a878 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d0e8fc34d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d0e8fc3488 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d0e8fc3448 <col:43> 'int' lvalue ParmVar 0x55d0e8f9a8f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d0e8fc34c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d0e8fc34a0 <col:51> 'const int' lvalue Var 0x55d0e8f8cad0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d0e8fc34f8 <col:63> 'P' lvalue ParmVar 0x55d0e8f9a970 'parser' 'P'
|     | `-DeclRefExpr 0x55d0e8fc3518 <col:71> 'Vector<T>' lvalue ParmVar 0x55d0e8f9aac0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55d0e8fc35a8 <line:622:9, col:17>
|       `-UnaryOperator 0x55d0e8fc3590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc3580 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f9b1e8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55d0e8f9ad20 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f9ad98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f9b148 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55d0e8f9ae58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9aed8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9b020 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d0e8fc3820 <col:66, line:627:5>
|     `-ReturnStmt 0x55d0e8fc3810 <line:626:9, col:59>
|       `-CallExpr 0x55d0e8fc37d0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d0e8fc35e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d0e8fc3658 <col:25> 'const char *' lvalue ParmVar 0x55d0e8f9ae58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d0e8fc3678 <col:34> 'int' lvalue ParmVar 0x55d0e8f9aed8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55d0e8fc3790 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d0e8fc37b0 <col:58> 'Vector<T>' lvalue ParmVar 0x55d0e8f9b020 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55d0e8f9b278 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55d0e8fc38a0 <col:25, line:633:5>
|   `-ReturnStmt 0x55d0e8fc3890 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8fc3878 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d0e8fc3848 <col:16> 'const bool' lvalue ->_status 0x55d0e8fa9d38
|         `-CXXThisExpr 0x55d0e8fc3838 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d0e8f9b3f8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55d0e8f9b330 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55d0e8fc3988 <col:27, line:639:5>
|   |-BinaryOperator 0x55d0e8fc3930 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d0e8fc38b8 <col:9> 'bool' lvalue ParmVar 0x55d0e8f9b330 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d0e8fc3918 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8fc38e8 <col:13> 'bool' lvalue ->_status 0x55d0e8fa9d38
|   |     `-CXXThisExpr 0x55d0e8fc38d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d0e8fc3978 <line:638:9, col:17>
|     `-UnaryOperator 0x55d0e8fc3960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fc3950 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d0e8f9b578 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d0e8f9b4b8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55d0e8fc3a78 <col:39, line:644:5>
|   |-BinaryOperator 0x55d0e8fc3a20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d0e8fc39a8 <col:9> 'bool' lvalue ParmVar 0x55d0e8f9b4b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d0e8fc3a08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8fc39d8 <col:13> 'const bool' lvalue ->_status 0x55d0e8fa9d38
|   |     `-CXXThisExpr 0x55d0e8fc39c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d0e8fc3a68 <line:643:9, col:17>
|     `-UnaryOperator 0x55d0e8fc3a50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fc3a40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d0e8f9b640 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55d0e8fc3b20 <col:30, line:651:5>
|   `-ReturnStmt 0x55d0e8fc3b10 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8fc3af8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d0e8fc3ac8 <col:16> 'bool' lvalue ->_read_status 0x55d0e8f85290
|         `-ImplicitCastExpr 0x55d0e8fc3aa8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55d0e8fc3a98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d0e8f9b788 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55d0e8f9b6f8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55d0e8fc3c28 <col:32, line:658:5>
|   |-BinaryOperator 0x55d0e8fc3bd0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d0e8fc3b38 <col:9> 'bool' lvalue ParmVar 0x55d0e8f9b6f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d0e8fc3bb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8fc3b88 <col:13> 'bool' lvalue ->_read_status 0x55d0e8f85290
|   |     `-ImplicitCastExpr 0x55d0e8fc3b68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d0e8fc3b58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d0e8fc3c18 <line:657:9, col:17>
|     `-UnaryOperator 0x55d0e8fc3c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fc3bf0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d0e8f9b8d8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d0e8f9b848 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55d0e8fc3d38 <col:44, line:663:5>
|   |-BinaryOperator 0x55d0e8fc3ce0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d0e8fc3c48 <col:9> 'bool' lvalue ParmVar 0x55d0e8f9b848 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d0e8fc3cc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d0e8fc3c98 <col:13> 'bool' lvalue ->_read_status 0x55d0e8f85290
|   |     `-ImplicitCastExpr 0x55d0e8fc3c78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d0e8fc3c68 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d0e8fc3d28 <line:662:9, col:17>
|     `-UnaryOperator 0x55d0e8fc3d10 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8fc3d00 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d0e8f9b9a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55d0e8f9ba68 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55d0e8f9bb30 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55d0e8f9bbf8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55d0e8f9bf08 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55d0e8f9bc98 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f9be68 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55d0e8f9bd78 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc4100 <col:19, line:706:5>
|     `-IfStmt 0x55d0e8fc40d8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55d0e8fc3e38 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55d0e8fc4008 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55d0e8fc3fd8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55d0e8fc3f98 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55d0e8fc3e90 <col:42> '<bound member function type>' ->simple_slot 0x55d0e8fbd200
|       |     | `-CXXThisExpr 0x55d0e8fc3e80 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55d0e8fc3f38 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55d0e8fc3ee0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55d0e8f374e8 0x55d0e8f35ef8 0x55d0e8cffc58
|       |     | `-DeclRefExpr 0x55d0e8fc3ec0 <col:55> 'T' lvalue ParmVar 0x55d0e8f9bd78 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55d0e8fc3f78 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55d0e8fc40c8 <line:705:13, col:34>
|         `-CallExpr 0x55d0e8fc40a0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55d0e8fc4028 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55d0e8fc4080 <col:33> 'T' lvalue ParmVar 0x55d0e8f9bd78 'x' 'T &'
|-FunctionTemplateDecl 0x55d0e8f9c1d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55d0e8f9bf68 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f9c138 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55d0e8f9c048 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55d0e8fc44e0 <col:31, line:717:5>
|     |-DeclStmt 0x55d0e8fc4240 <line:713:9, col:23>
|     | `-VarDecl 0x55d0e8fc4128 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55d0e8fc4218 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d0e8fc41a0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d0e8fc41f8 <col:21> 'T' lvalue ParmVar 0x55d0e8f9c048 'x' 'T &'
|     |-IfStmt 0x55d0e8fc4490 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55d0e8fc4338 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55d0e8fc4470 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d0e8fc4410 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d0e8fc43a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|     |   | `-DeclRefExpr 0x55d0e8fc4380 <col:14> 'T *' lvalue Var 0x55d0e8fc4128 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55d0e8fc4450 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55d0e8fc44c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55d0e8fc44a8 <col:16> 'T *' lvalue Var 0x55d0e8fc4128 's' 'T *'
|-FunctionTemplateDecl 0x55d0e8f9c5e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55d0e8f9c238 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f9c2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d0e8f9c548 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f9c398 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55d0e8f9c438 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55d0e8fc47f0 <col:37, line:726:5>
|     |-IfStmt 0x55d0e8fc4780 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55d0e8fc47a0 <line:723:13, col:26>
|     | | `-VarDecl 0x55d0e8fc4548 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55d0e8fc4638 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55d0e8fc45c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55d0e8fc4618 <col:25> 'T' lvalue ParmVar 0x55d0e8f9c398 'x' 'T &'
|     | |-DeclRefExpr 0x55d0e8fc4660 <col:16> 'T *' lvalue Var 0x55d0e8fc4548 's' 'T *'
|     | `-BinaryOperator 0x55d0e8fc4760 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d0e8fc4710 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d0e8fc46a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|     |   | `-DeclRefExpr 0x55d0e8fc4680 <col:14> 'T *' lvalue Var 0x55d0e8fc4548 's' 'T *'
|     |   `-DeclRefExpr 0x55d0e8fc4740 <col:18> 'const V' lvalue ParmVar 0x55d0e8f9c438 'value' 'const V &'
|     `-ReturnStmt 0x55d0e8fc47e0 <line:725:9, col:17>
|       `-UnaryOperator 0x55d0e8fc47c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d0e8fc47b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d0e8f9c9e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55d0e8f9c650 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d0e8f9c948 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55d0e8f9c700 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9c780 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9c828 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55d0e8fc5610 <col:65, line:737:5>
|     |-DeclStmt 0x55d0e8fc4888 <line:732:9, col:26>
|     | `-VarDecl 0x55d0e8fc4820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d0e8fc55d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55d0e8fc55f8 <line:733:13, col:58>
|       | `-VarDecl 0x55d0e8fc48b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d0e8fc4a90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d0e8fc4a60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d0e8fc4a48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d0e8fc4a28 <col:26, col:58> 'String' (CXXTemporary 0x55d0e8fc4a28)
|       |           `-CXXMemberCallExpr 0x55d0e8fc49b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d0e8fc4928 <col:26> '<bound member function type>' ->find 0x55d0e8fbc818
|       |             | `-CXXThisExpr 0x55d0e8fc4918 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d0e8fc49f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fc4958 <col:31> 'const char *' lvalue ParmVar 0x55d0e8f9c700 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d0e8fc4a08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fc4978 <col:40> 'int' lvalue ParmVar 0x55d0e8f9c780 'flags' 'int'
|       |             `-DeclRefExpr 0x55d0e8fc4998 <col:47> 'Args::Slot *' lvalue Var 0x55d0e8fc4820 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d0e8fc4b48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d0e8fc4b30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d0e8fc4b10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d0e8fc4ae0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |       `-ImplicitCastExpr 0x55d0e8fc4ac8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d0e8fc4aa8 <col:20> 'String' lvalue Var 0x55d0e8fc48b0 'str' 'String'
|       `-CompoundStmt 0x55d0e8fc55b8 <col:61, line:736:9>
|         |-DeclStmt 0x55d0e8fc5000 <line:734:13, col:76>
|         | `-VarDecl 0x55d0e8fc4b98 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d0e8fc4fd0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d0e8fc4f40 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d0e8fc4f88 <col:60> 'T' lvalue ParmVar 0x55d0e8f9c828 'variable' 'T &'
|         |     `-UnaryOperator 0x55d0e8fc4fb8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d0e8fc4fa8 <col:71> 'Args *' this
|         `-CallExpr 0x55d0e8fc5588 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55d0e8fc5028 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|           | `-CXXThisExpr 0x55d0e8fc5018 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d0e8fc5548 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d0e8fc5058 <col:23> 'T *' lvalue Var 0x55d0e8fc4b98 's' 'T *'
|           | `-CallExpr 0x55d0e8fc5508 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d0e8fc52e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55d0e8fc53e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55d0e8fc5400 <col:86> 'String' lvalue Var 0x55d0e8fc48b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d0e8fc54b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d0e8fc5440 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|           |   | `-DeclRefExpr 0x55d0e8fc5420 <col:92> 'T *' lvalue Var 0x55d0e8fc4b98 's' 'T *'
|           |   `-UnaryOperator 0x55d0e8fc54f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d0e8fc54e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55d0e8fc5568 <col:103> 'Args::Slot *' lvalue Var 0x55d0e8fc4820 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8f9cf38 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f9ca58 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f9cad8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d0e8f9ce98 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f9cb98 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9cc18 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9ccb8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55d0e8f9cd58 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55d0e8fc64b0 <col:88, line:745:5>
|     |-DeclStmt 0x55d0e8fc56a8 <line:741:9, col:26>
|     | `-VarDecl 0x55d0e8fc5640 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fc58c8 <line:742:9, col:55>
|     | `-VarDecl 0x55d0e8fc56d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d0e8fc58b0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d0e8fc5880 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d0e8fc5868 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d0e8fc5848 <col:22, col:54> 'String' (CXXTemporary 0x55d0e8fc5848)
|     |           `-CXXMemberCallExpr 0x55d0e8fc57d8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d0e8fc5748 <col:22> '<bound member function type>' ->find 0x55d0e8fbc818
|     |             | `-CXXThisExpr 0x55d0e8fc5738 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d0e8fc5810 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d0e8fc5778 <col:27> 'const char *' lvalue ParmVar 0x55d0e8f9cb98 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d0e8fc5828 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d0e8fc5798 <col:36> 'int' lvalue ParmVar 0x55d0e8f9cc18 'flags' 'int'
|     |             `-DeclRefExpr 0x55d0e8fc57b8 <col:43> 'Args::Slot *' lvalue Var 0x55d0e8fc5640 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fc5ca0 <line:743:9, col:72>
|     | `-VarDecl 0x55d0e8fc5918 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d0e8fc5c70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d0e8fc5be0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d0e8fc5c28 <col:56> 'T' lvalue ParmVar 0x55d0e8f9ccb8 'variable' 'T &'
|     |     `-UnaryOperator 0x55d0e8fc5c58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d0e8fc5c48 <col:67> 'Args *' this
|     `-CallExpr 0x55d0e8fc6480 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55d0e8fc5cc8 <col:9> '<bound member function type>' ->postparse 0x55d0e8fbca28
|       | `-CXXThisExpr 0x55d0e8fc5cb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d0e8fc6440 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d0e8fc5cf8 <col:19> 'T *' lvalue Var 0x55d0e8fc5918 's' 'T *'
|       | `-ParenExpr 0x55d0e8fc6420 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55d0e8fc63f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d0e8fc63d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d0e8fc63c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d0e8fc63a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d0e8fc6370 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |     |       `-ImplicitCastExpr 0x55d0e8fc6358 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d0e8fc5d18 <col:25> 'String' lvalue Var 0x55d0e8fc56d0 'str' 'String'
|       |     |-CallExpr 0x55d0e8fc61c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d0e8fc5fa0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55d0e8fc60a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55d0e8fc60c0 <col:89> 'String' lvalue Var 0x55d0e8fc56d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d0e8fc6170 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d0e8fc6100 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|       |     | | `-DeclRefExpr 0x55d0e8fc60e0 <col:95> 'T *' lvalue Var 0x55d0e8fc5918 's' 'T *'
|       |     | `-UnaryOperator 0x55d0e8fc61b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d0e8fc61a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55d0e8fc6338 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55d0e8fc6318 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d0e8fc62e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d0e8fc6298 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d0e8fc6228 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|       |         | | `-DeclRefExpr 0x55d0e8fc6208 <col:109> 'T *' lvalue Var 0x55d0e8fc5918 's' 'T *'
|       |         | `-DeclRefExpr 0x55d0e8fc62c8 <col:113> 'const V' lvalue ParmVar 0x55d0e8f9cd58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d0e8fc6308 <col:120> 'bool' true
|       `-DeclRefExpr 0x55d0e8fc6460 <col:128> 'Args::Slot *' lvalue Var 0x55d0e8fc5640 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8f9d468 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55d0e8f9cfb0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f9d028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8f9d3c8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d0e8f9d0e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9d168 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9d1e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f9d288 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55d0e8fc70a8 <col:75, line:754:5>
|     |-DeclStmt 0x55d0e8fc6558 <line:749:9, col:26>
|     | `-VarDecl 0x55d0e8fc64f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d0e8fc7070 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55d0e8fc7090 <line:750:13, col:58>
|       | `-VarDecl 0x55d0e8fc6580 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d0e8fc6760 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d0e8fc6730 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d0e8fc6718 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d0e8fc66f8 <col:26, col:58> 'String' (CXXTemporary 0x55d0e8fc66f8)
|       |           `-CXXMemberCallExpr 0x55d0e8fc6688 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d0e8fc65f8 <col:26> '<bound member function type>' ->find 0x55d0e8fbc818
|       |             | `-CXXThisExpr 0x55d0e8fc65e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d0e8fc66c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fc6628 <col:31> 'const char *' lvalue ParmVar 0x55d0e8f9d0e8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d0e8fc66d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fc6648 <col:40> 'int' lvalue ParmVar 0x55d0e8f9d168 'flags' 'int'
|       |             `-DeclRefExpr 0x55d0e8fc6668 <col:47> 'Args::Slot *' lvalue Var 0x55d0e8fc64f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d0e8fc6818 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d0e8fc6800 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d0e8fc67e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d0e8fc67b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |       `-ImplicitCastExpr 0x55d0e8fc6798 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d0e8fc6778 <col:20> 'String' lvalue Var 0x55d0e8fc6580 'str' 'String'
|       `-CompoundStmt 0x55d0e8fc7050 <col:61, line:753:9>
|         |-DeclStmt 0x55d0e8fc6bf0 <line:751:13, col:63>
|         | `-VarDecl 0x55d0e8fc6868 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d0e8fc6bc0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d0e8fc6b30 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d0e8fc6b78 <col:47> 'T' lvalue ParmVar 0x55d0e8f9d288 'variable' 'T &'
|         |     `-UnaryOperator 0x55d0e8fc6ba8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d0e8fc6b98 <col:58> 'Args *' this
|         `-CallExpr 0x55d0e8fc7020 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55d0e8fc6c18 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|           | `-CXXThisExpr 0x55d0e8fc6c08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d0e8fc6fe0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d0e8fc6c48 <col:23> 'T *' lvalue Var 0x55d0e8fc6868 's' 'T *'
|           | `-CallExpr 0x55d0e8fc6fa0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d0e8fc6e30 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d0e8fc6e78 <col:56> 'P' lvalue ParmVar 0x55d0e8f9d1e0 'parser' 'P'
|           |   |-DeclRefExpr 0x55d0e8fc6e98 <col:64> 'String' lvalue Var 0x55d0e8fc6580 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d0e8fc6f48 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d0e8fc6ed8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|           |   | `-DeclRefExpr 0x55d0e8fc6eb8 <col:70> 'T *' lvalue Var 0x55d0e8fc6868 's' 'T *'
|           |   `-UnaryOperator 0x55d0e8fc6f88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d0e8fc6f78 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55d0e8fc7000 <col:81> 'Args::Slot *' lvalue Var 0x55d0e8fc64f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8f9dac8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d0e8f9d4e0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d0e8f9d558 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55d0e8f9d5d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d0e8f9da28 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d0e8f9d6a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9d720 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9d798 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f9d838 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55d0e8f9d8d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55d0e8fca218 <col:98, line:762:5>
|     |-DeclStmt 0x55d0e8fc7140 <line:758:9, col:26>
|     | `-VarDecl 0x55d0e8fc70d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fc7360 <line:759:9, col:55>
|     | `-VarDecl 0x55d0e8fc7168 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d0e8fc7348 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d0e8fc7318 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d0e8fc7300 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d0e8fc72e0 <col:22, col:54> 'String' (CXXTemporary 0x55d0e8fc72e0)
|     |           `-CXXMemberCallExpr 0x55d0e8fc7270 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d0e8fc71e0 <col:22> '<bound member function type>' ->find 0x55d0e8fbc818
|     |             | `-CXXThisExpr 0x55d0e8fc71d0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d0e8fc72a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d0e8fc7210 <col:27> 'const char *' lvalue ParmVar 0x55d0e8f9d6a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d0e8fc72c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d0e8fc7230 <col:36> 'int' lvalue ParmVar 0x55d0e8f9d720 'flags' 'int'
|     |             `-DeclRefExpr 0x55d0e8fc7250 <col:43> 'Args::Slot *' lvalue Var 0x55d0e8fc70d8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fc7780 <line:760:9, col:59>
|     | `-VarDecl 0x55d0e8fc73b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d0e8fc7750 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d0e8fc76c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d0e8fc7708 <col:43> 'T' lvalue ParmVar 0x55d0e8f9d838 'variable' 'T &'
|     |     `-UnaryOperator 0x55d0e8fc7738 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d0e8fc7728 <col:54> 'Args *' this
|     `-CallExpr 0x55d0e8fca1e8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55d0e8fc77a8 <col:9> '<bound member function type>' ->postparse 0x55d0e8fbca28
|       | `-CXXThisExpr 0x55d0e8fc7798 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d0e8fca1a8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d0e8fc77d8 <col:19> 'T *' lvalue Var 0x55d0e8fc73b8 's' 'T *'
|       | `-ParenExpr 0x55d0e8fca188 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55d0e8fca158 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d0e8fca140 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d0e8fca128 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d0e8fca108 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d0e8fca0d8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |     |       `-ImplicitCastExpr 0x55d0e8fca0c0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d0e8fc77f8 <col:25> 'String' lvalue Var 0x55d0e8fc7168 'str' 'String'
|       |     |-CallExpr 0x55d0e8fc9f30 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d0e8fc9dc0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55d0e8fc9e08 <col:59> 'P' lvalue ParmVar 0x55d0e8f9d798 'parser' 'P'
|       |     | |-DeclRefExpr 0x55d0e8fc9e28 <col:67> 'String' lvalue Var 0x55d0e8fc7168 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d0e8fc9ed8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d0e8fc9e68 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|       |     | | `-DeclRefExpr 0x55d0e8fc9e48 <col:73> 'T *' lvalue Var 0x55d0e8fc73b8 's' 'T *'
|       |     | `-UnaryOperator 0x55d0e8fc9f18 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d0e8fc9f08 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55d0e8fca0a0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55d0e8fca080 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d0e8fca050 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d0e8fca000 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d0e8fc9f90 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|       |         | | `-DeclRefExpr 0x55d0e8fc9f70 <col:87> 'T *' lvalue Var 0x55d0e8fc73b8 's' 'T *'
|       |         | `-DeclRefExpr 0x55d0e8fca030 <col:91> 'const V' lvalue ParmVar 0x55d0e8f9d8d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d0e8fca070 <col:98> 'bool' true
|       `-DeclRefExpr 0x55d0e8fca1c8 <col:106> 'Args::Slot *' lvalue Var 0x55d0e8fc70d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8fa6db8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55d0e8f9db48 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8f9dbc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d0e8f9dc48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d0e8fa6d18 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d0e8f9dd10 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8f9dd90 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8f9de08 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8f9dea8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55d0e8f9df48 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55d0e8fcb1f8 <col:60, line:773:5>
|     |-DeclStmt 0x55d0e8fca2c0 <line:767:9, col:26>
|     | `-VarDecl 0x55d0e8fca258 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d0e8fcb1c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55d0e8fcb1e0 <line:768:13, col:58>
|       | `-VarDecl 0x55d0e8fca2e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d0e8fca4c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d0e8fca498 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d0e8fca480 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d0e8fca460 <col:26, col:58> 'String' (CXXTemporary 0x55d0e8fca460)
|       |           `-CXXMemberCallExpr 0x55d0e8fca3f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d0e8fca360 <col:26> '<bound member function type>' ->find 0x55d0e8fbc818
|       |             | `-CXXThisExpr 0x55d0e8fca350 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d0e8fca428 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fca390 <col:31> 'const char *' lvalue ParmVar 0x55d0e8f9dd10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d0e8fca440 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fca3b0 <col:40> 'int' lvalue ParmVar 0x55d0e8f9dd90 'flags' 'int'
|       |             `-DeclRefExpr 0x55d0e8fca3d0 <col:47> 'Args::Slot *' lvalue Var 0x55d0e8fca258 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d0e8fca580 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d0e8fca568 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d0e8fca548 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d0e8fca518 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |       `-ImplicitCastExpr 0x55d0e8fca500 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d0e8fca4e0 <col:20> 'String' lvalue Var 0x55d0e8fca2e8 'str' 'String'
|       `-CompoundStmt 0x55d0e8fcb198 <col:61, line:772:9>
|         |-DeclStmt 0x55d0e8fca8c0 <line:769:13, col:66>
|         | `-VarDecl 0x55d0e8fca5d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55d0e8fca890 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d0e8fca800 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d0e8fca848 <col:49> 'T1' lvalue ParmVar 0x55d0e8f9dea8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55d0e8fca878 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d0e8fca868 <col:61> 'Args *' this
|         |-DeclStmt 0x55d0e8fcac30 <line:770:13, col:66>
|         | `-VarDecl 0x55d0e8fca948 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55d0e8fcac00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d0e8fcab70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d0e8fcabb8 <col:49> 'T2' lvalue ParmVar 0x55d0e8f9df48 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55d0e8fcabe8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d0e8fcabd8 <col:61> 'Args *' this
|         `-CallExpr 0x55d0e8fcb168 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55d0e8fcac58 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|           | `-CXXThisExpr 0x55d0e8fcac48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d0e8fcb128 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55d0e8fcacc8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55d0e8fcac88 <col:23> 'T1 *' lvalue Var 0x55d0e8fca5d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55d0e8fcaca8 <col:29> 'T2 *' lvalue Var 0x55d0e8fca948 's2' 'T2 *'
|           | `-CallExpr 0x55d0e8fcb0e0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d0e8fcaeb0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d0e8fcaef8 <col:63> 'P' lvalue ParmVar 0x55d0e8f9de08 'parser' 'P'
|           |   |-DeclRefExpr 0x55d0e8fcaf18 <col:71> 'String' lvalue Var 0x55d0e8fca2e8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d0e8fcafc8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d0e8fcaf58 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|           |   | `-DeclRefExpr 0x55d0e8fcaf38 <col:77> 'T1 *' lvalue Var 0x55d0e8fca5d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55d0e8fcb088 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d0e8fcb018 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|           |   | `-DeclRefExpr 0x55d0e8fcaff8 <col:82> 'T2 *' lvalue Var 0x55d0e8fca948 's2' 'T2 *'
|           |   `-UnaryOperator 0x55d0e8fcb0c8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d0e8fcb0b8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55d0e8fcb148 <col:94> 'Args::Slot *' lvalue Var 0x55d0e8fca258 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8fa71a8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55d0e8fa6e38 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8fa7108 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d0e8fa6ef0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8fa6f70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8fa6fe8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fcb710 <col:67, line:780:5>
|     |-DeclStmt 0x55d0e8fcb290 <line:777:9, col:26>
|     | `-VarDecl 0x55d0e8fcb228 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d0e8fcb6d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55d0e8fcb6f8 <line:778:13, col:58>
|       | `-VarDecl 0x55d0e8fcb2b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d0e8fcb498 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d0e8fcb468 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d0e8fcb450 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d0e8fcb430 <col:26, col:58> 'String' (CXXTemporary 0x55d0e8fcb430)
|       |           `-CXXMemberCallExpr 0x55d0e8fcb3c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d0e8fcb330 <col:26> '<bound member function type>' ->find 0x55d0e8fbc818
|       |             | `-CXXThisExpr 0x55d0e8fcb320 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d0e8fcb3f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fcb360 <col:31> 'const char *' lvalue ParmVar 0x55d0e8fa6ef0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d0e8fcb410 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d0e8fcb380 <col:40> 'int' lvalue ParmVar 0x55d0e8fa6f70 'flags' 'int'
|       |             `-DeclRefExpr 0x55d0e8fcb3a0 <col:47> 'Args::Slot *' lvalue Var 0x55d0e8fcb228 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d0e8fcb550 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d0e8fcb538 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d0e8fcb518 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d0e8fcb4e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|       |       `-ImplicitCastExpr 0x55d0e8fcb4d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d0e8fcb4b0 <col:20> 'String' lvalue Var 0x55d0e8fcb2b8 'str' 'String'
|       `-CallExpr 0x55d0e8fcb6a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55d0e8fcb578 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|         | `-CXXThisExpr 0x55d0e8fcb568 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55d0e8fcb658 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55d0e8fcb5c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55d0e8fcb5a8 <col:23> 'P' lvalue ParmVar 0x55d0e8fa6fe8 'parser' 'P'
|         | |-DeclRefExpr 0x55d0e8fcb610 <col:36> 'String' lvalue Var 0x55d0e8fcb2b8 'str' 'String'
|         | `-UnaryOperator 0x55d0e8fcb640 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55d0e8fcb630 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55d0e8fcb688 <col:49> 'Args::Slot *' lvalue Var 0x55d0e8fcb228 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d0e8fa7548 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d0e8fa7218 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d0e8fa74a8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d0e8fa72d0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8fa7350 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8fa73c8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55d0e8fcc080 <col:71, line:792:5>
|     |-DeclStmt 0x55d0e8fcb7a8 <line:784:9, col:26>
|     | `-VarDecl 0x55d0e8fcb740 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fcb878 <line:785:9, col:29>
|     | `-VarDecl 0x55d0e8fcb7d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d0e8fcb860 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d0e8fcb840 <col:28> 'int' 1
|     |-WhileStmt 0x55d0e8fcbf30 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55d0e8fcbf50 <line:786:16, col:61>
|     | | `-VarDecl 0x55d0e8fcb8a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d0e8fcba80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d0e8fcba50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d0e8fcba38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d0e8fcba18 <col:29, col:61> 'String' (CXXTemporary 0x55d0e8fcba18)
|     | |           `-CXXMemberCallExpr 0x55d0e8fcb9a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d0e8fcb918 <col:29> '<bound member function type>' ->find 0x55d0e8fbc818
|     | |             | `-CXXThisExpr 0x55d0e8fcb908 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d0e8fcb9e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcb948 <col:34> 'const char *' lvalue ParmVar 0x55d0e8fa72d0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d0e8fcb9f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcb968 <col:43> 'int' lvalue ParmVar 0x55d0e8fa7350 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d0e8fcb988 <col:50> 'Args::Slot *' lvalue Var 0x55d0e8fcb740 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d0e8fcbb38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d0e8fcbb20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d0e8fcbb00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d0e8fcbad0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|     | |       `-ImplicitCastExpr 0x55d0e8fcbab8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d0e8fcba98 <col:23> 'String' lvalue Var 0x55d0e8fcb8a0 'str' 'String'
|     | `-CompoundStmt 0x55d0e8fcbf08 <col:64, line:790:9>
|     |   |-CallExpr 0x55d0e8fcbc90 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55d0e8fcbb60 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|     |   | | `-CXXThisExpr 0x55d0e8fcbb50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d0e8fcbc40 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d0e8fcbbb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d0e8fcbb90 <col:23> 'P' lvalue ParmVar 0x55d0e8fa73c8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d0e8fcbbf8 <col:36> 'String' lvalue Var 0x55d0e8fcb8a0 'str' 'String'
|     |   | | `-UnaryOperator 0x55d0e8fcbc28 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d0e8fcbc18 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55d0e8fcbc70 <col:49> 'Args::Slot *' lvalue Var 0x55d0e8fcb740 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d0e8fcbe28 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d0e8fcbcc0 <col:13> 'int' lvalue Var 0x55d0e8fcb7d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d0e8fcbe10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d0e8fcbdf0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d0e8fcbd58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d0e8fcbd38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d0e8fcbd20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d0e8fcbce0 <col:28> 'int' lvalue Var 0x55d0e8fcb7d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d0e8fcbd00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d0e8fcbdd8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d0e8fcbda8 <col:49> 'bool' lvalue ->_read_status 0x55d0e8f85290
|     |   |         `-ImplicitCastExpr 0x55d0e8fcbd88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d0e8fcbd78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d0e8fcbed8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d0e8fcbe48 <col:13> 'int' lvalue ParmVar 0x55d0e8fa7350 'flags' 'int'
|     |     `-UnaryOperator 0x55d0e8fcbec0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d0e8fcbea8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d0e8fcbe88 <col:23> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d0e8fcc060 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d0e8fcbf98 <col:9> 'bool' lvalue ->_read_status 0x55d0e8f85290
|       | `-ImplicitCastExpr 0x55d0e8fcbf78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d0e8fcbf68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d0e8fcc040 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d0e8fcc020 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d0e8fcc008 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d0e8fcbfc8 <col:25> 'int' lvalue Var 0x55d0e8fcb7d8 'read_status' 'int'
|           `-IntegerLiteral 0x55d0e8fcbfe8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d0e8fa7a28 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d0e8fa75b8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8fa7638 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8fa7988 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d0e8fa76f8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8fa7778 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8fa77f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8fa7898 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55d0e8fcd010 <col:84, line:805:5>
|     |-DeclStmt 0x55d0e8fcc128 <line:796:9, col:26>
|     | `-VarDecl 0x55d0e8fcc0c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fcc1f8 <line:797:9, col:29>
|     | `-VarDecl 0x55d0e8fcc158 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d0e8fcc1e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d0e8fcc1c0 <col:28> 'int' 1
|     |-DeclStmt 0x55d0e8fcc530 <line:798:9, col:71>
|     | `-VarDecl 0x55d0e8fcc248 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d0e8fcc500 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d0e8fcc470 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55d0e8fcc4b8 <col:55> 'T' lvalue ParmVar 0x55d0e8fa7898 'variable' 'T &'
|     |     `-UnaryOperator 0x55d0e8fcc4e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d0e8fcc4d8 <col:66> 'Args *' this
|     |-WhileStmt 0x55d0e8fccec0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55d0e8fccee0 <line:799:16, col:61>
|     | | `-VarDecl 0x55d0e8fcc558 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d0e8fcc738 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d0e8fcc708 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d0e8fcc6f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d0e8fcc6d0 <col:29, col:61> 'String' (CXXTemporary 0x55d0e8fcc6d0)
|     | |           `-CXXMemberCallExpr 0x55d0e8fcc660 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d0e8fcc5d0 <col:29> '<bound member function type>' ->find 0x55d0e8fbc818
|     | |             | `-CXXThisExpr 0x55d0e8fcc5c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d0e8fcc698 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcc600 <col:34> 'const char *' lvalue ParmVar 0x55d0e8fa76f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d0e8fcc6b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcc620 <col:43> 'int' lvalue ParmVar 0x55d0e8fa7778 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d0e8fcc640 <col:50> 'Args::Slot *' lvalue Var 0x55d0e8fcc0c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d0e8fcc7f0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d0e8fcc7d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d0e8fcc7b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d0e8fcc788 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|     | |       `-ImplicitCastExpr 0x55d0e8fcc770 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d0e8fcc750 <col:23> 'String' lvalue Var 0x55d0e8fcc558 'str' 'String'
|     | `-CompoundStmt 0x55d0e8fcce98 <col:64, line:803:9>
|     |   |-CallExpr 0x55d0e8fccc20 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55d0e8fcc818 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|     |   | | `-CXXThisExpr 0x55d0e8fcc808 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55d0e8fccbe0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55d0e8fcc848 <col:23> 'T *' lvalue Var 0x55d0e8fcc248 's' 'T *'
|     |   | | `-CallExpr 0x55d0e8fccba0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55d0e8fcca30 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55d0e8fcca78 <col:56> 'P' lvalue ParmVar 0x55d0e8fa77f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55d0e8fcca98 <col:64> 'String' lvalue Var 0x55d0e8fcc558 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55d0e8fccb48 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55d0e8fccad8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|     |   | |   | `-DeclRefExpr 0x55d0e8fccab8 <col:70> 'T *' lvalue Var 0x55d0e8fcc248 's' 'T *'
|     |   | |   `-UnaryOperator 0x55d0e8fccb88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55d0e8fccb78 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55d0e8fccc00 <col:81> 'Args::Slot *' lvalue Var 0x55d0e8fcc0c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d0e8fccdb8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d0e8fccc50 <col:13> 'int' lvalue Var 0x55d0e8fcc158 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d0e8fccda0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d0e8fccd80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d0e8fccce8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d0e8fcccc8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d0e8fcccb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d0e8fccc70 <col:28> 'int' lvalue Var 0x55d0e8fcc158 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d0e8fccc90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d0e8fccd68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d0e8fccd38 <col:49> 'bool' lvalue ->_read_status 0x55d0e8f85290
|     |   |         `-ImplicitCastExpr 0x55d0e8fccd18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d0e8fccd08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d0e8fcce68 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d0e8fccdd8 <col:13> 'int' lvalue ParmVar 0x55d0e8fa7778 'flags' 'int'
|     |     `-UnaryOperator 0x55d0e8fcce50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d0e8fcce38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d0e8fcce18 <col:23> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d0e8fccff0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d0e8fccf28 <col:9> 'bool' lvalue ->_read_status 0x55d0e8f85290
|       | `-ImplicitCastExpr 0x55d0e8fccf08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d0e8fccef8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d0e8fccfd0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d0e8fccfb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d0e8fccf98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d0e8fccf58 <col:25> 'int' lvalue Var 0x55d0e8fcc158 'read_status' 'int'
|           `-IntegerLiteral 0x55d0e8fccf78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d0e8fa8008 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55d0e8fa7aa0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d0e8fa7b18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d0e8fa7f68 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d0e8fa7bd8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d0e8fa7c58 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55d0e8fa7cd0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55d0e8fa7e20 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55d0e8fcde18 <col:87, line:821:5>
|     |-DeclStmt 0x55d0e8fcd0c0 <line:809:9, col:26>
|     | `-VarDecl 0x55d0e8fcd058 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d0e8fcd190 <line:810:9, col:29>
|     | `-VarDecl 0x55d0e8fcd0f0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d0e8fcd178 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d0e8fcd158 <col:28> 'int' 1
|     |-DeclStmt 0x55d0e8fcd3d8 <line:811:9, col:38>
|     | `-VarDecl 0x55d0e8fcd2c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55d0e8fcd3b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d0e8fcd338 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d0e8fcd390 <col:29> 'Vector<T>' lvalue ParmVar 0x55d0e8fa7e20 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55d0e8fcdcc8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55d0e8fcdce8 <line:812:16, col:61>
|     | | `-VarDecl 0x55d0e8fcd400 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d0e8fcd5e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d0e8fcd5b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d0e8fcd598 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d0e8fcd578 <col:29, col:61> 'String' (CXXTemporary 0x55d0e8fcd578)
|     | |           `-CXXMemberCallExpr 0x55d0e8fcd508 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d0e8fcd478 <col:29> '<bound member function type>' ->find 0x55d0e8fbc818
|     | |             | `-CXXThisExpr 0x55d0e8fcd468 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d0e8fcd540 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcd4a8 <col:34> 'const char *' lvalue ParmVar 0x55d0e8fa7bd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d0e8fcd558 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d0e8fcd4c8 <col:43> 'int' lvalue ParmVar 0x55d0e8fa7c58 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d0e8fcd4e8 <col:50> 'Args::Slot *' lvalue Var 0x55d0e8fcd058 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d0e8fcd698 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d0e8fcd680 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d0e8fcd660 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d0e8fcd630 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d0e8cc2c28
|     | |       `-ImplicitCastExpr 0x55d0e8fcd618 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d0e8fcd5f8 <col:23> 'String' lvalue Var 0x55d0e8fcd400 'str' 'String'
|     | `-CompoundStmt 0x55d0e8fcdc90 <col:64, line:819:9>
|     |   |-DeclStmt 0x55d0e8fcd758 <line:813:13, col:23>
|     |   | `-VarDecl 0x55d0e8fcd6c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55d0e8fcd738 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55d0e8fcd8d8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55d0e8fcd780 <col:13> '<bound member function type>' ->postparse 0x55d0e8fbca28
|     |   | | `-CXXThisExpr 0x55d0e8fcd770 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d0e8fcd880 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d0e8fcd7d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d0e8fcd7b0 <col:23> 'P' lvalue ParmVar 0x55d0e8fa7cd0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d0e8fcd818 <col:36> 'String' lvalue Var 0x55d0e8fcd400 'str' 'String'
|     |   | | |-DeclRefExpr 0x55d0e8fcd838 <col:41> 'T' lvalue Var 0x55d0e8fcd6c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55d0e8fcd868 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d0e8fcd858 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55d0e8fcd8b8 <col:53> 'Args::Slot *' lvalue Var 0x55d0e8fcd058 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55d0e8fcda30 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55d0e8fcd968 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55d0e8fcd938 <col:17> 'bool' lvalue ->_read_status 0x55d0e8f85290
|     |   | |   `-ImplicitCastExpr 0x55d0e8fcd918 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55d0e8fcd908 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55d0e8fcda08 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55d0e8fcd9a0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55d0e8fcd980 <col:17> 'Vector<T> *' lvalue Var 0x55d0e8fcd2c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55d0e8fcd9e8 <col:30> 'T' lvalue Var 0x55d0e8fcd6c0 'sx' 'T'
|     |   |-BinaryOperator 0x55d0e8fcdbb0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d0e8fcda48 <col:13> 'int' lvalue Var 0x55d0e8fcd0f0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d0e8fcdb98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d0e8fcdb78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d0e8fcdae0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d0e8fcdac0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d0e8fcdaa8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d0e8fcda68 <col:28> 'int' lvalue Var 0x55d0e8fcd0f0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d0e8fcda88 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d0e8fcdb60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d0e8fcdb30 <col:49> 'bool' lvalue ->_read_status 0x55d0e8f85290
|     |   |         `-ImplicitCastExpr 0x55d0e8fcdb10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d0e8fcdb00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d0e8fcdc60 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d0e8fcdbd0 <col:13> 'int' lvalue ParmVar 0x55d0e8fa7c58 'flags' 'int'
|     |     `-UnaryOperator 0x55d0e8fcdc48 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d0e8fcdc30 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d0e8fcdc10 <col:23> 'const int' lvalue Var 0x55d0e8f8c7e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d0e8fcddf8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d0e8fcdd30 <col:9> 'bool' lvalue ->_read_status 0x55d0e8f85290
|       | `-ImplicitCastExpr 0x55d0e8fcdd10 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d0e8fcdd00 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d0e8fcddd8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d0e8fcddb8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d0e8fcdda0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d0e8fcdd60 <col:25> 'int' lvalue Var 0x55d0e8fcd0f0 'read_status' 'int'
|           `-IntegerLiteral 0x55d0e8fcdd80 <col:40> 'int' 1
|-AccessSpecDecl 0x55d0e8fa8080 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55d0e8fa80a8 prev 0x55d0e8f8ab18 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55d0e8fa81a0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55d0e8fa8290 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55d0e8fcde50 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55d0e8fa8380 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55d0e8fcde60 <col:25, line:830:9>
| |-CXXMethodDecl 0x55d0e8fa8480 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55d0e8fa8530 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55d0e8fa85d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d0e8fa85d8
| | `-ParmVarDecl 0x55d0e8fa86e8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55d0e8fa8ea8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d0e8fa8ea8
|   `-ParmVarDecl 0x55d0e8fa8fb8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55d0e8fa8758 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55d0e8fa88b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55d0e8fa8ab0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55d0e8fa8960 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55d0e8fa89d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55d0e8fce040 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55d0e8fa8d68 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55d0e8fcdeb0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d0e8fcde70 <col:20> 'void *' lvalue ParmVar 0x55d0e8fa8960 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55d0e8fa8dd0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55d0e8fcdf38 <col:32, col:45> 'char *' array Function 0x55d0e8ae5668 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55d0e8fcdf20 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55d0e8fcdef0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55d0e8fa89d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55d0e8fa8e30 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55d0e8fce000 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d0e8fcdfc0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55d0e8fa89d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55d0e8fce0c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55d0e8fa8bb0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55d0e8fa8380 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55d0e8fce148 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55d0e8fce128 <line:840:13, col:22> 'void' array Function 0x55d0e8ae59c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55d0e8fce110 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55d0e8fce0e0 <col:22> 'char *' lvalue ->_slot 0x55d0e8fa8dd0
| |         `-CXXThisExpr 0x55d0e8fce0d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55d0e8fa8cb0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55d0e8fa8480 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55d0e8fce338 <col:22, line:844:9>
| |   `-CallExpr 0x55d0e8fce2a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55d0e8fce288 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55d0e8fce268 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d0e8bf1678 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55d0e8fce2d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55d0e8fce1b8 <col:20> 'void *' lvalue ->_ptr 0x55d0e8fa8d68
| |     |   `-CXXThisExpr 0x55d0e8fce1a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55d0e8fce308 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55d0e8fce2f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55d0e8fce1f8 <col:26> 'char *' lvalue ->_slot 0x55d0e8fa8dd0
| |     |     `-CXXThisExpr 0x55d0e8fce1e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55d0e8fce320 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55d0e8fce238 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55d0e8fa8e30
| |         `-CXXThisExpr 0x55d0e8fce228 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55d0e8fa8d68 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55d0e8fa8dd0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55d0e8fa8e30 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55d0e8fa9028 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d0e8fa9028
| | `-ParmVarDecl 0x55d0e8fa9138 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55d0e8fa91d8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d0e8fa91d8
|   `-ParmVarDecl 0x55d0e8fa92e8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55d0e8fa9488 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55d0e8fa9358 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55d0e8fa93f8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55d0e8fa9720 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55d0e8fa9918 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55d0e8fa97e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55d0e8fa9a98 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55d0e8fce370 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55d0e8fce350 <col:20> 'T *' lvalue ParmVar 0x55d0e8fa97e8 'ptr' 'T *'
|   | `-CompoundStmt 0x55d0e8fce3c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55d0e8fa99e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55d0e8fa8480 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55d0e8fce570 <col:22, line:857:9>
|   |   `-CallExpr 0x55d0e8fce540 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55d0e8fce3d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55d0e8ca9da8 0x55d0e8c540d8
|   |     |-CXXOperatorCallExpr 0x55d0e8fce4d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55d0e8fce460 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d0e8eb6d58 0x55d0e8eb6978 0x55d0e8eb65a8 0x55d0e8eb61c8 0x55d0e8eb5de8 0x55d0e8eb5a18
|   |     | `-MemberExpr 0x55d0e8fce430 <col:29> 'T *' lvalue ->_ptr 0x55d0e8fa9a98
|   |     |   `-CXXThisExpr 0x55d0e8fce420 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55d0e8fce510 <col:35> 'T' lvalue ->_slot 0x55d0e8fa9af8
|   |       `-CXXThisExpr 0x55d0e8fce500 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55d0e8fa9a98 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55d0e8fa9af8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55d0e8fa9b60 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55d0e8fa9c60 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55d0e8fa9cb0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8fa9c40 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55d0e8fa9c20 <col:31> 'int' 48
|-FieldDecl 0x55d0e8fa9cd8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55d0e8fa9d38 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55d0e8fa9d98 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d0e8fa9ed0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55d0e8fbc0c0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55d0e8fbc120 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55d0e8fbc1d0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55d0e8fbc3f8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55d0e8fbc300 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55d0e8fbc548 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55d0e8fbc4b8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55d0e8fbc818 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55d0e8fbc608 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55d0e8fbc688 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55d0e8fbc730 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55d0e8fbca28 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55d0e8fbc8e0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55d0e8fbc958 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55d0e8fbcaf8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55d0e8fbcc48 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55d0e8fbcbb0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55d0e8fbcfd8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55d0e8fbcd08 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55d0e8fbcd88 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55d0e8fbce30 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55d0e8fbcee8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55d0e8fbd200 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55d0e8fbd0b0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55d0e8fbd128 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55d0e8fbd518 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55d0e8fbd2b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55d0e8fbd478 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55d0e8fbd388 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8cb2ad0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8cb2be8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55d0e8cb2c78 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55d0e8cb2d48 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55d0e8cb2e30 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8cb3048 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d0e8cb2ef0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb31f8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d0e8cb3100 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d0e8cb3340 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d0e8cb32b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d0e8cb3488 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d0e8cb33f8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb35d0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d0e8cb3540 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb3698 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55d0e8cb37e0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55d0e8cb3750 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d0e8cb38a8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55d0e8cb39f0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55d0e8cb3960 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d0e8cb3b68 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d0e8cb3aa8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb3cb0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d0e8cb3c20 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb3d78 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55d0e8cb3f38 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8cb3e28 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d0e8cb3ea0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb4188 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8cb3ff8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8cb4070 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d0e8cb4238 <col:86> "" ""
|-CXXMethodDecl 0x55d0e8cb44a8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55d0e8cb4318 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55d0e8cb4390 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb4658 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d0e8cb4568 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d0e8cb4808 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d0e8cb4710 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d0e8cb4ad8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d0e8cb48c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d0e8cb4938 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d0e8cb49b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb4db8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d0e8cb4ba0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d0e8cb4c18 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8cb4c90 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d0e8cb4e70 <col:115> "" ""
|-AccessSpecDecl 0x55d0e8cb4ee0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55d0e8cb4f18 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8cb6430 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d0e8cb6430
| `-ParmVarDecl 0x55d0e8cb6538 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55d0e8cb65d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cb65d8
| `-ParmVarDecl 0x55d0e8cb66e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55d0e8cebd18 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d0e8eddb10 <col:7>
|-CXXConstructorDecl 0x55d0e8cebdf0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d0e8cebdf0
| `-ParmVarDecl 0x55d0e8cebf08 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55d0e8cebf78 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d0e8cebf78
| `-ParmVarDecl 0x55d0e8cec088 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55d0e8ee0510 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8ecc6b8 prev 0x55d0e8ec18c0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8ecc7b0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55d0e8ecc8a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55d0e8ecc9c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55d0e8eccb48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55d0e8ecccc8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55d0e8ecce48 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55d0e8eddc78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d0e8ede4e8 <col:11>
|-CXXDestructorDecl 0x55d0e8eddd50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d0e8edde88 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d0e8edde88
| `-ParmVarDecl 0x55d0e8eddf98 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55d0e8ede038 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ede038
| `-ParmVarDecl 0x55d0e8ede148 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55d0e8ee0f08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e8ee1018 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55d0e8ee1298 <col:11>
|   `-ReturnStmt 0x55d0e8ee1288 <col:11>
|     `-UnaryOperator 0x55d0e8ee1270 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d0e8ee1260 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55d0e8ee1088 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ee1088
  `-ParmVarDecl 0x55d0e8ee1198 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8ecceb0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8eccfc8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55d0e8ecd068 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55d0e8ecd0d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55d0e8ecd138 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55d0e8ecd1a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55d0e8ecd200 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55d0e8ecd2c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55d0e8ecd320 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55d0e8ecd380 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55d0e8eddb88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d0e8ecd068 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55d0e8ede4f8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55d0e8ede550 <col:12>
|-CXXConstructorDecl 0x55d0e8ede1b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d0e8ede1b8
| `-ParmVarDecl 0x55d0e8ede2c8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55d0e8ede368 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ede368
| `-ParmVarDecl 0x55d0e8ede478 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55d0e8ee05f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8ebafd0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d0e8ebb0e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55d0e8ebb178 <col:16, col:22> col:16 public
|-EnumDecl 0x55d0e8ebb1a0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55d0e8ebb2a0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55d0e8ebb380 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ebb280 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55d0e8ebb260 <col:21> 'int' 28
| `-EnumConstantDecl 0x55d0e8ebb330 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55d0e8ebb398 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ebb310 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55d0e8ebb2f0 <col:22> 'int' 64
|-CXXMethodDecl 0x55d0e8ebb6d8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d0e8ebb3c0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8ebb440 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55d0e8ebb4b8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8ebb530 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebb798 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebb998 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55d0e8ebb810 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55d0e8ebb888 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebba48 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebbba8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55d0e8ebbab8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebbc50 <col:72> warn_unused_result ""
|-TypedefDecl 0x55d0e8ebbfb0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55d0e8ebbf40 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55d0e8ebbee0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55d0e8ebbea0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55d0e89924e0 'void'
|       |-PointerType 0x55d0e8c3b370 'unsigned char *'
|       | `-BuiltinType 0x55d0e89925e0 'unsigned char'
|       |-TypedefType 0x55d0e8a37710 'size_t' sugar
|       | |-Typedef 0x55d0e8a02be0 'size_t'
|       | `-BuiltinType 0x55d0e8992640 'unsigned long'
|       `-PointerType 0x55d0e8992ce0 'void *'
|         `-BuiltinType 0x55d0e89924e0 'void'
|-CXXMethodDecl 0x55d0e8ebc428 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55d0e8ebc020 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55d0e8ebc098 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8ebc130 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55d0e8ebc1b0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55d0e8ed6b20 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55d0e8ed6b08 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55d0e8ed6ad0 <col:58> 'int' 0
| |-ParmVarDecl 0x55d0e8ebc230 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55d0e8ed6b48 <col:76> 'int' 0
| |-ParmVarDecl 0x55d0e8ebc2b0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55d0e8ed6b68 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55d0e8ebc4f8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebc578 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d0e8ebc638 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55d0e8ebc6d8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebc730 <col:30>
|-CXXMethodDecl 0x55d0e8ebc7a8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55d0e8ebc848 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebc8a0 <col:30>
|-CXXMethodDecl 0x55d0e8ebc918 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55d0e8ebc9b8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebca68 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55d0e8ebcb08 <col:20>
| |-OptimizeNoneAttr 0x55d0e8ebcb60 <col:30>
| `-WarnUnusedResultAttr 0x55d0e8ebcb88 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebcbe0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d0e8ebcc80 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebccd8 <col:30>
|-CXXMethodDecl 0x55d0e8ebcd28 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d0e8ebcdc8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebce20 <col:30>
|-CXXMethodDecl 0x55d0e8ebce68 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55d0e8ebcf08 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebcf60 <col:30>
|-CXXMethodDecl 0x55d0e8ebcfa8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ebd068 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ebd130 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d0e8ebd1f8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d0e8ebd2b8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ebd3d8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55d0e8ed6c30 <col:54, line:99:5>
|   `-ReturnStmt 0x55d0e8ed6c20 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55d0e8ed6c08 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55d0e8ed6bd8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d0e8ecd6b8
|         `-CXXThisExpr 0x55d0e8ed6bc8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d0e8ebd578 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55d0e8ebd488 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55d0e8ed6ce0 <col:67, line:103:5>
|   `-BinaryOperator 0x55d0e8ed6cc0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d0e8ed6c58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d0e8ecd6b8
|     | `-CXXThisExpr 0x55d0e8ed6c48 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d0e8ed6ca8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8ed6c88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55d0e8ebd488 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55d0e8ebd670 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55d0e8ed6d60 <col:33, line:107:5>
|   `-ReturnStmt 0x55d0e8ed6d50 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8ed6d38 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55d0e8ed6d08 <col:16> 'void *' lvalue ->_destructor_argument 0x55d0e8ecd720
|         `-CXXThisExpr 0x55d0e8ed6cf8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d0e8ebd730 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55d0e8ed7390 <col:25, line:113:5>
|   |-ParenExpr 0x55d0e8ed70d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55d0e8ed70a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed6e18 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d0e8ed6df0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55d0e8ed6db8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55d0e8ed6d88 <col:24> '<bound member function type>' ->shared 0x55d0e8ebc7a8
|   |   |       `-ImplicitCastExpr 0x55d0e8ed6dd8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55d0e8ed6d78 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed6e78 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed6e58 <col:42> 'int' 0
|   |   `-CallExpr 0x55d0e8ed7008 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed6ff0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed6fd0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed7048 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed6ee8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55d0e8ed7060 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed6f10 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed7078 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed6f48 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55d0e8ed7090 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed6fb8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed6fa0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed6f68 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55d0e8ed72d8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55d0e8ed7108 <col:2> 'unsigned char *' lvalue ->_head 0x55d0e8ecd4c0
|   | | `-CXXThisExpr 0x55d0e8ed70f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55d0e8ed72c0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55d0e8ed72a0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55d0e8ed7148 <col:10> 'unsigned char *' lvalue ->_data 0x55d0e8ecd528
|   |     | `-CXXThisExpr 0x55d0e8ed7138 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55d0e8ed7288 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55d0e8ed7268 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55d0e8ed7188 <col:18> 'unsigned char *' lvalue ->_tail 0x55d0e8ecd590
|   |         | `-CXXThisExpr 0x55d0e8ed7178 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55d0e8ed7250 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55d0e8ed7230 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55d0e8ed71c8 <col:26> 'unsigned char *' lvalue ->_end 0x55d0e8ecd5f8
|   |             | `-CXXThisExpr 0x55d0e8ed71b8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55d0e8ed7218 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55d0e8ed71f8 <col:33> 'int' 0
|   `-BinaryOperator 0x55d0e8ed7370 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d0e8ed7308 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d0e8ecd6b8
|     | `-CXXThisExpr 0x55d0e8ed72f8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d0e8ed7358 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55d0e8ed7338 <col:16> 'int' 0
|-CXXMethodDecl 0x55d0e8ebd870 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d0e8ebd7e0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ebd918 <col:20>
| |-OptimizeNoneAttr 0x55d0e8ebd970 <col:30>
| `-WarnUnusedResultAttr 0x55d0e8ebd998 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebda68 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d0e8ebd9d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ebdb10 <col:20>
| |-OptimizeNoneAttr 0x55d0e8ebdb68 <col:30>
| `-WarnUnusedResultAttr 0x55d0e8ebdb90 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebdcc8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d0e8ebdbd0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebdd70 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebde70 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55d0e8ebdde0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ebdf18 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebdf70 <col:30>
|-CXXMethodDecl 0x55d0e8ebe038 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d0e8ebdfa8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebe0e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebe1e0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d0e8ebe150 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d0e8ebe288 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebe388 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55d0e8ebe2f8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ebe430 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebe488 <col:30>
|-CXXMethodDecl 0x55d0e8ebe618 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55d0e8ebe4c8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55d0e8ebe540 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55d0e8ed6b88 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55d0e8ebe6c8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55d0e8ebe8c8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8ebe740 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8ebe7b8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ebead8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8ebe988 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d0e8ebea00 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ebece8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55d0e8ebeb98 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55d0e8ebec18 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55d0e8ed6b98 <col:39> 'int' 0
|-CXXMethodDecl 0x55d0e8ebedb8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55d0e8ebee80 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d0e8ebef48 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d0e8ebf008 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ebf0d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55d0e8ebf218 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55d0e8ebf188 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55d0e8ebf3e8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8ebf2d8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8ebf350 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ebf4b8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55d0e8ebf578 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55d0e8ebf618 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebf670 <col:30>
|-CXXMethodDecl 0x55d0e8ebf6c0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d0e8ebf760 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebf7b8 <col:30>
|-CXXMethodDecl 0x55d0e8ebf808 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d0e8ebf8c8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ebf990 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55d0e8ebfa30 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebfa88 <col:30>
|-CXXMethodDecl 0x55d0e8ebfbd8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8ebfac8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8ebfb40 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ebfd28 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d0e8ebfc98 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ebfe00 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55d0e8ebfec0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55d0e8ebff60 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ebffb8 <col:30>
|-CXXMethodDecl 0x55d0e8ec0008 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d0e8ec00a8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec0100 <col:30>
|-CXXMethodDecl 0x55d0e8ec0150 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d0e8ec0218 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55d0e8ec02b8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec0310 <col:30>
|-CXXMethodDecl 0x55d0e8ec0358 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55d0e8ec0478 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55d0e8ec05e8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55d0e8ec0528 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55d0e8ec06d8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55d0e8ec0778 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec07d0 <col:30>
|-CXXMethodDecl 0x55d0e8ec0820 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d0e8ec08e0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d0e8ec0b18 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55d0e8ec0990 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55d0e8ec0a08 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ec0bc8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec0c20 <col:30>
|-CXXMethodDecl 0x55d0e8ec0cc8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55d0e8ec0d68 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec0dc0 <col:30>
|-CXXMethodDecl 0x55d0e8ec0e10 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55d0e8ec0eb0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec0f08 <col:30>
|-CXXMethodDecl 0x55d0e8ec0f50 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55d0e8ec0ff0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1048 <col:30>
|-CXXMethodDecl 0x55d0e8ec1148 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55d0e8ec1080 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55d0e8ec11f0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1248 <col:30>
|-CXXMethodDecl 0x55d0e8ec1408 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55d0e8ec1280 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55d0e8ec12f8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ec14b8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1510 <col:30>
|-CXXMethodDecl 0x55d0e8ec15b8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55d0e8ec16d8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55d0e8ec17f8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55d0e8ec1898 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55d0e8ec18c0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55d0e8ec19e8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55d0e8ec1a88 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1ae0 <col:30>
|-CXXMethodDecl 0x55d0e8ec1b88 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55d0e8ec1c28 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1c80 <col:30>
|-AccessSpecDecl 0x55d0e8ec1ca8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55d0e8ec1cd0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55d0e8ec1dd0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55d0e8ec1e20 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ec1db0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55d0e8ec1d90 <col:14> 'int' 48
|-CXXMethodDecl 0x55d0e8ec1e88 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55d0e8ec1f28 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec1f80 <col:30>
|-CXXMethodDecl 0x55d0e8ec1ff8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55d0e8ec2098 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec20f0 <col:30>
|-CXXMethodDecl 0x55d0e8ec21b8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d0e8ec2128 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55d0e8ec2358 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55d0e8ec24f8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55d0e8ec2408 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55d0e8ec25a0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55d0e8ec26a0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2a50 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec2680 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55d0e8ec2660 <col:9> 'int' 0
| |-EnumConstantDecl 0x55d0e8ec2730 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2a68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec2710 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55d0e8ec26f0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d0e8ec27c0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2a80 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec27a0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55d0e8ec2780 <col:14> 'int' 2
| |-EnumConstantDecl 0x55d0e8ec2850 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2a98 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec2830 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55d0e8ec2810 <col:14> 'int' 3
| |-EnumConstantDecl 0x55d0e8ec28e0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2ab0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec28c0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55d0e8ec28a0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55d0e8ec2970 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d0e8ec2ac8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec2950 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55d0e8ec2930 <col:13> 'int' 5
| `-EnumConstantDecl 0x55d0e8ec2a00 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55d0e8ec2ae0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ec29e0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55d0e8ec29c0 <col:14> 'int' 6
|-CXXMethodDecl 0x55d0e8ec2b48 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55d0e8ec2be8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec2c40 <col:30>
|-CXXMethodDecl 0x55d0e8ec2d38 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55d0e8ec2c78 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55d0e8ec2de0 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec2e38 <col:30>
|-CXXMethodDecl 0x55d0e8ec2ea8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55d0e8ec2fd0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55d0e8ec3148 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55d0e8ec3080 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55d0e8ec3210 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55d0e8ec32d8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55d0e8ec3418 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55d0e8ec3388 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55d0e8ec34c0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55d0e8ec35c0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d0e8ec37c0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec35a0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55d0e8ec3580 <col:23> 'int' 0
| |-EnumConstantDecl 0x55d0e8ec3650 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d0e8ec37d8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec3630 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55d0e8ec3610 <col:45> 'int' 4
| |-EnumConstantDecl 0x55d0e8ec36e0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d0e8ec37f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec36c0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55d0e8ec36a0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55d0e8ec3770 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55d0e8ec3808 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ec3750 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55d0e8ec3730 <col:47> 'int' 16
|-CXXMethodDecl 0x55d0e8ec3868 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55d0e8ec39d8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55d0e8ec3918 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55d0e8ec3a80 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec3ad8 <col:30>
|-CXXMethodDecl 0x55d0e8ec3b28 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55d0e8ed74b0 <col:18, col:36>
|   `-ReturnStmt 0x55d0e8ed74a0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55d0e8ed7488 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d0e8ed7468 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55d0e8ed7438 <col:27> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|           `-CXXThisExpr 0x55d0e8ed7428 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55d0e8ec3c20 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55d0e8ed75c0 <col:30, col:48>
|   `-ReturnStmt 0x55d0e8ed75b0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55d0e8ed7598 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d0e8ed7578 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55d0e8ed7548 <col:39> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|           `-CXXThisExpr 0x55d0e8ed7538 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d0e8ec3d08 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55d0e8ed7758 <col:24, col:50>
|   `-ReturnStmt 0x55d0e8ed7748 <col:26, col:47>
|     `-UnaryOperator 0x55d0e8ed7730 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8ed7710 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d0e8ed76f8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8ed76a8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55d0e8ecc9c8
|         |   `-CXXMemberCallExpr 0x55d0e8ed7688 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d0e8ed7658 <col:34> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|         |       `-CXXThisExpr 0x55d0e8ed7648 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d0e8ed76d8 <col:46> 'int' 0
|-CXXMethodDecl 0x55d0e8ec3e10 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55d0e8ed7928 <col:36, col:62>
|   `-ReturnStmt 0x55d0e8ed7918 <col:38, col:59>
|     `-UnaryOperator 0x55d0e8ed7900 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8ed78e0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d0e8ed78c8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8ed7840 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55d0e8ecc9c8
|         |   `-CXXMemberCallExpr 0x55d0e8ed7820 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d0e8ed77f0 <col:46> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|         |       `-CXXThisExpr 0x55d0e8ed77e0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d0e8ed7870 <col:58> 'int' 0
|-CXXMethodDecl 0x55d0e8ec3f28 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55d0e8ed7ac0 <col:26, col:53>
|   `-ReturnStmt 0x55d0e8ed7ab0 <col:28, col:50>
|     `-UnaryOperator 0x55d0e8ed7a98 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8ed7a78 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d0e8ed7a60 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8ed7a10 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55d0e8ecccc8
|         |   `-CXXMemberCallExpr 0x55d0e8ed79f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d0e8ed79c0 <col:36> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|         |       `-CXXThisExpr 0x55d0e8ed79b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d0e8ed7a40 <col:49> 'int' 0
|-CXXMethodDecl 0x55d0e8ec4048 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55d0e8ed7c98 <col:38, col:65>
|   `-ReturnStmt 0x55d0e8ed7c88 <col:40, col:62>
|     `-UnaryOperator 0x55d0e8ed7c70 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d0e8ed7c50 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d0e8ed7c38 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8ed7ba8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55d0e8ecccc8
|         |   `-CXXMemberCallExpr 0x55d0e8ed7b88 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d0e8ed7b58 <col:48> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|         |       `-CXXThisExpr 0x55d0e8ed7b48 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d0e8ed7bd8 <col:61> 'int' 0
|-CXXMethodDecl 0x55d0e8ec41f8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55d0e8ec4100 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55d0e8ed8368 <col:34, line:463:5>
|   |-ParenExpr 0x55d0e8ed81b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d0e8ed8180 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed7de8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8ed7db8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8ed7d08 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8ed7cf0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8ed7cb0 <col:23> 'int' lvalue ParmVar 0x55d0e8ec4100 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8ed7cd0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8ed7d98 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8ed7d68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8ed7d28 <col:33> 'int' lvalue ParmVar 0x55d0e8ec4100 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d0e8ed7d80 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d0e8ed7d48 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed7e48 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed7e28 <col:56> 'int' 0
|   |   `-CallExpr 0x55d0e8ed80e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed80c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed80a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed8120 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed7f38 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d0e8ed8138 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed7f68 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed8150 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed7fa0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55d0e8ed8168 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed8090 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed8078 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed8038 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55d0e8ed8358 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55d0e8ed8340 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55d0e8ed8320 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d0e8ed82f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d0e8ed82a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55d0e8ecc9c8
|         |   `-CXXMemberCallExpr 0x55d0e8ed8280 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d0e8ed8250 <col:9> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|         |       `-CXXThisExpr 0x55d0e8ed8240 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55d0e8ed8308 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55d0e8ed82d0 <col:21> 'int' lvalue ParmVar 0x55d0e8ec4100 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec4448 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55d0e8ec42b8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55d0e8ec4330 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55d0e8ed89f8 <col:40, line:472:5>
|   |-ParenExpr 0x55d0e8ed8810 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d0e8ed87e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed84c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8ed8490 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8ed83e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8ed83c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8ed8388 <col:23> 'int' lvalue ParmVar 0x55d0e8ec42b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8ed83a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8ed8470 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8ed8440 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8ed8400 <col:33> 'int' lvalue ParmVar 0x55d0e8ec42b8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d0e8ed8458 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d0e8ed8420 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed8520 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed8500 <col:56> 'int' 0
|   |   `-CallExpr 0x55d0e8ed8740 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed8728 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed8708 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed8780 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed8590 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d0e8ed8798 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed85c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed87b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed85f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55d0e8ed87c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed86f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed86d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed8698 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55d0e8ed89d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55d0e8ed8980 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55d0e8ed8950 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d0e8ed8900 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55d0e8ecc9c8
|     | |   `-CXXMemberCallExpr 0x55d0e8ed88e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55d0e8ed88b0 <col:2> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     | |       `-CXXThisExpr 0x55d0e8ed88a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55d0e8ed8968 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d0e8ed8930 <col:14> 'int' lvalue ParmVar 0x55d0e8ec42b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d0e8ed89c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8ed89a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55d0e8ec4330 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55d0e8ec4608 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55d0e8ec4510 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d0e8ed9178 <col:36, line:485:5>
|   |-ParenExpr 0x55d0e8ed8ee0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8ed8eb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed8b90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8ed8b60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8ed8a70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8ed8a58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8ed8a18 <col:23> 'int' lvalue ParmVar 0x55d0e8ec4510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8ed8a38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8ed8b40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8ed8b28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8ed8a90 <col:33> 'int' lvalue ParmVar 0x55d0e8ec4510 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8ed8b08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8ed8af0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8ed8ab0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8ed8ad0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed8bf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed8bd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8ed8e10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed8df8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed8dd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed8e50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed8c60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d0e8ed8e68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed8c98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed8e80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed8cd0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55d0e8ed8e98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed8dc0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed8da8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed8d68 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55d0e8ed9168 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55d0e8ed9150 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8ed9138 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8ed9108 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8ed90a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8ed9078 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8ed8ff0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8ed8fd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8ed8fa0 <col:61> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8ed8f90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8ed9090 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8ed9020 <col:74> 'int' lvalue ParmVar 0x55d0e8ec4510 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec4858 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55d0e8ec46c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d0e8ec4740 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d0e8ed98c8 <col:42, line:500:5>
|   |-ParenExpr 0x55d0e8ed9660 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8ed9630 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed9310 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8ed92e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8ed91f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8ed91d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8ed9198 <col:23> 'int' lvalue ParmVar 0x55d0e8ec46c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8ed91b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8ed92c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8ed92a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8ed9210 <col:33> 'int' lvalue ParmVar 0x55d0e8ec46c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8ed9288 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8ed9270 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8ed9230 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8ed9250 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed9370 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed9350 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8ed9590 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed9578 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed9558 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed95d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed93e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d0e8ed95e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed9418 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed9600 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed9450 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55d0e8ed9618 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed9540 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed9528 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed94e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55d0e8ed98a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55d0e8ed9858 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d0e8ed9828 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d0e8ed97d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d0e8ed97a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d0e8ed9750 <col:48, col:57> 'char [48]' lvalue ->c 0x55d0e8ecc8a0
|     |     |   `-CXXMemberCallExpr 0x55d0e8ed9730 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d0e8ed9700 <col:48> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     |     |       `-CXXThisExpr 0x55d0e8ed96f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d0e8ed97b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d0e8ed9780 <col:61> 'int' lvalue ParmVar 0x55d0e8ec46c8 'i' 'int'
|     `-ImplicitCastExpr 0x55d0e8ed9890 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8ed9870 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d0e8ec4740 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d0e8ec4a18 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55d0e8ec4920 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d0e8eda028 <col:35, line:513:5>
|   |-ParenExpr 0x55d0e8ed9d38 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8ed9d08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8ed9a60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8ed9a30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8ed9940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8ed9928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8ed98e8 <col:23> 'int' lvalue ParmVar 0x55d0e8ec4920 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8ed9908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8ed9a10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8ed99f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8ed9960 <col:33> 'int' lvalue ParmVar 0x55d0e8ec4920 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8ed99d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8ed99c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8ed9980 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8ed99a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d0e8ed9ac0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8ed9aa0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8ed9c68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8ed9c50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8ed9c30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8ed9ca8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed9b30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d0e8ed9cc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8ed9b68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8ed9cd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8ed9ba0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55d0e8ed9cf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8ed9c18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8ed9c00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8ed9bc0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55d0e8eda018 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55d0e8eda000 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8ed9fe8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8ed9fb8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8ed9f30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8ed9f00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8ed9eb0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8ed9e90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8ed9e60 <col:60> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8ed9e50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8ed9f18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8ed9ee0 <col:73> 'int' lvalue ParmVar 0x55d0e8ec4920 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec4c68 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55d0e8ec4ad8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d0e8ec4b50 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55d0e8eda748 <col:41, line:528:5>
|   |-ParenExpr 0x55d0e8eda4d0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8eda4a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8eda1c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8eda190 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8eda0a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8eda088 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8eda048 <col:23> 'int' lvalue ParmVar 0x55d0e8ec4ad8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8eda068 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8eda170 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8eda158 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8eda0c0 <col:33> 'int' lvalue ParmVar 0x55d0e8ec4ad8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8eda138 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8eda120 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8eda0e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8eda100 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d0e8eda220 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8eda200 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8eda400 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8eda3e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8eda3c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8eda440 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8eda290 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d0e8eda458 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8eda2c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8eda470 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8eda300 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55d0e8eda488 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8eda3b0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8eda398 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8eda358 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55d0e8eda728 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55d0e8eda6d8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d0e8eda6a8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d0e8eda650 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d0e8eda610 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d0e8eda5c0 <col:47, col:56> 'char [48]' lvalue ->c 0x55d0e8ecc8a0
|     |     |   `-CXXMemberCallExpr 0x55d0e8eda5a0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d0e8eda570 <col:47> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     |     |       `-CXXThisExpr 0x55d0e8eda560 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d0e8eda628 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d0e8eda5f0 <col:60> 'int' lvalue ParmVar 0x55d0e8ec4ad8 'i' 'int'
|     `-ImplicitCastExpr 0x55d0e8eda710 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8eda6f0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55d0e8ec4b50 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55d0e8ec4e28 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55d0e8ec4d30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d0e8edae18 <col:36, line:541:5>
|   |-ParenExpr 0x55d0e8edabb8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8edab88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8eda8e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8eda8b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8eda7c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8eda7a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8eda768 <col:23> 'int' lvalue ParmVar 0x55d0e8ec4d30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8eda788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8eda890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8eda878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8eda7e0 <col:33> 'int' lvalue ParmVar 0x55d0e8ec4d30 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8eda858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8eda840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8eda800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8eda820 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d0e8eda940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8eda920 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8edaae8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edaad0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edaab0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edab28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8eda9b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d0e8edab40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8eda9e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edab58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edaa20 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55d0e8edab70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edaa98 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edaa80 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edaa40 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55d0e8edae08 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55d0e8edadf0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8edadd8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8edada8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8edad50 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8edad20 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8edacd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8edacb0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8edac80 <col:61> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8edac70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8edad38 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8edad00 <col:74> 'int' lvalue ParmVar 0x55d0e8ec4d30 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec4ff8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55d0e8ec4ee8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55d0e8ec4f60 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d0e8ec50a8 <col:20>
| `-OptimizeNoneAttr 0x55d0e8ec5100 <col:30>
|-CXXMethodDecl 0x55d0e8ec5238 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55d0e8ec5140 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d0e8edb4e8 <col:35, line:562:5>
|   |-ParenExpr 0x55d0e8edb288 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8edb258 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edafb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edaf80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edae90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edae78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edae38 <col:23> 'int' lvalue ParmVar 0x55d0e8ec5140 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edae58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edaf60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8edaf48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edaeb0 <col:33> 'int' lvalue ParmVar 0x55d0e8ec5140 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edaf28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edaf10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edaed0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8edaef0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d0e8edb010 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edaff0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8edb1b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edb1a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edb180 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edb1f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edb080 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d0e8edb210 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edb0b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edb228 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edb0f0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55d0e8edb240 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edb168 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edb150 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edb110 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55d0e8edb4d8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55d0e8edb4c0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8edb4a8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8edb478 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8edb420 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8edb3f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8edb3a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8edb380 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8edb350 <col:60> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8edb340 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8edb408 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8edb3d0 <col:73> 'int' lvalue ParmVar 0x55d0e8ec5140 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec5448 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55d0e8ec52f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d0e8ec5370 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55d0e8edbbc8 <col:41, line:577:5>
|   |-ParenExpr 0x55d0e8edb958 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8edb928 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edb680 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edb650 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edb560 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edb548 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edb508 <col:23> 'int' lvalue ParmVar 0x55d0e8ec52f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edb528 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edb630 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8edb618 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edb580 <col:33> 'int' lvalue ParmVar 0x55d0e8ec52f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edb5f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edb5e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edb5a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8edb5c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d0e8edb6e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edb6c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8edb888 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edb870 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edb850 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edb8c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edb750 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d0e8edb8e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edb788 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edb8f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edb7c0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55d0e8edb910 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edb838 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edb820 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edb7e0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55d0e8edbba8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55d0e8edbb58 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d0e8edbb28 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55d0e8edbac8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d0e8edba98 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d0e8edba48 <col:47, col:56> 'char [48]' lvalue ->c 0x55d0e8ecc8a0
|     |     |   `-CXXMemberCallExpr 0x55d0e8edba28 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d0e8edb9f8 <col:47> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     |     |       `-CXXThisExpr 0x55d0e8edb9e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d0e8edbab0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d0e8edba78 <col:60> 'int' lvalue ParmVar 0x55d0e8ec52f8 'i' 'int'
|     `-ImplicitCastExpr 0x55d0e8edbb90 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8edbb70 <col:65> 'int32_t':'int' lvalue ParmVar 0x55d0e8ec5370 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55d0e8ec5608 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55d0e8ec5510 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d0e8edc2f8 <col:36, line:591:5>
|   |-ParenExpr 0x55d0e8edc038 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8edc008 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edbd60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edbd30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edbc40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edbc28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edbbe8 <col:23> 'int' lvalue ParmVar 0x55d0e8ec5510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edbc08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edbd10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8edbcf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edbc60 <col:33> 'int' lvalue ParmVar 0x55d0e8ec5510 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edbcd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edbcc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edbc80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8edbca0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d0e8edbdc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edbda0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8edbf68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edbf50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edbf30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edbfa8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edbe30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d0e8edbfc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edbe68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edbfd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edbea0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55d0e8edbff0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edbf18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edbf00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edbec0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55d0e8edc2e8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55d0e8edc2d0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8edc2b8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8edc288 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8edc200 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8edc1d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8edc180 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8edc160 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8edc130 <col:61> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8edc120 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8edc1e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8edc1b0 <col:74> 'int' lvalue ParmVar 0x55d0e8ec5510 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec5858 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55d0e8ec56c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d0e8ec5740 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55d0e8edc9d8 <col:42, line:606:5>
|   |-ParenExpr 0x55d0e8edc768 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d0e8edc738 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edc490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edc460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edc370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edc358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edc318 <col:23> 'int' lvalue ParmVar 0x55d0e8ec56c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edc338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edc440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d0e8edc428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edc390 <col:33> 'int' lvalue ParmVar 0x55d0e8ec56c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edc408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edc3f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edc3b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d0e8edc3d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d0e8edc4f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edc4d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d0e8edc698 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edc680 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edc660 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edc6d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edc560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d0e8edc6f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edc598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edc708 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edc5d0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55d0e8edc720 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edc648 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edc630 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edc5f0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55d0e8edc9b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55d0e8edc968 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d0e8edc938 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55d0e8edc8d8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d0e8edc8a8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d0e8edc858 <col:48, col:57> 'char [48]' lvalue ->c 0x55d0e8ecc8a0
|     |     |   `-CXXMemberCallExpr 0x55d0e8edc838 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d0e8edc808 <col:48> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     |     |       `-CXXThisExpr 0x55d0e8edc7f8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d0e8edc8c0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d0e8edc888 <col:61> 'int' lvalue ParmVar 0x55d0e8ec56c8 'i' 'int'
|     `-ImplicitCastExpr 0x55d0e8edc9a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55d0e8edc980 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55d0e8ec5740 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55d0e8ec59f0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55d0e8ec5920 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55d0e8edd248 <col:33, line:620:5>
|   |-ParenExpr 0x55d0e8edcfc0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d0e8edcf90 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edcbe0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edcbb0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edca50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edca38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edc9f8 <col:23> 'int' lvalue ParmVar 0x55d0e8ec5920 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edca18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edcb90 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d0e8edcb78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edca70 <col:33> 'int' lvalue ParmVar 0x55d0e8ec5920 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edcb58 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edcb40 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edca90 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d0e8edcb18 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d0e8edcb00 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d0e8edcac8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d0e8edcc40 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edcc20 <col:79> 'int' 0
|   |   `-CallExpr 0x55d0e8edcef0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edced8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edceb8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edcf30 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edcd28 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d0e8edcf48 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edcd70 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edcf60 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edcda8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55d0e8edcf78 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edcea0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edce88 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edce48 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55d0e8edd238 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55d0e8edd220 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55d0e8edd208 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d0e8edd1d8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55d0e8edd150 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d0e8edd120 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d0e8edd0d0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55d0e8ecc8a0
|             |   `-CXXMemberCallExpr 0x55d0e8edd0b0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d0e8edd080 <col:67> '<bound member function type>' ->xanno 0x55d0e8ec19e8
|             |       `-CXXThisExpr 0x55d0e8edd070 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d0e8edd138 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d0e8edd100 <col:80> 'int' lvalue ParmVar 0x55d0e8ec5920 'i' 'int'
|-CXXMethodDecl 0x55d0e8ec5c08 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55d0e8ec5ab0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d0e8ec5b30 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55d0e8edda70 <col:45, line:635:5>
|   |-ParenExpr 0x55d0e8edd7b8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d0e8edd788 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d0e8edd450 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d0e8edd420 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d0e8edd2c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d0e8edd2a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d0e8edd268 <col:23> 'int' lvalue ParmVar 0x55d0e8ec5ab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d0e8edd288 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d0e8edd400 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d0e8edd3e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d0e8edd2e0 <col:33> 'int' lvalue ParmVar 0x55d0e8ec5ab0 'i' 'int'
|   |   |     `-BinaryOperator 0x55d0e8edd3c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d0e8edd3b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d0e8edd300 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d0e8ec1dd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d0e8edd388 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d0e8edd370 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d0e8edd338 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d0e8edd4b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d0e8edd490 <col:79> 'int' 0
|   |   `-CallExpr 0x55d0e8edd6e8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d0e8edd6d0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d0e8edd6b0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d0e8a2e470 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d0e8edd728 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edd520 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d0e8edd740 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d0e8edd568 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d0e8edd758 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d0e8edd5a0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55d0e8edd770 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d0e8edd698 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d0e8edd680 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d0e8edd638 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55d0e8edda50 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55d0e8edd9b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d0e8edd988 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55d0e8edd928 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d0e8edd8f8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d0e8edd8a8 <col:54, col:63> 'char [48]' lvalue ->c 0x55d0e8ecc8a0
|     |     |   `-CXXMemberCallExpr 0x55d0e8edd888 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d0e8edd858 <col:54> '<bound member function type>' ->xanno 0x55d0e8ec1b88
|     |     |       `-CXXThisExpr 0x55d0e8edd848 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d0e8edd910 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d0e8edd8d8 <col:67> 'int' lvalue ParmVar 0x55d0e8ec5ab0 'i' 'int'
|     `-CXXConstCastExpr 0x55d0e8edda20 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55d0e8edda08 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55d0e8edd9d0 <col:91> 'const void *' lvalue ParmVar 0x55d0e8ec5b30 'x' 'const void *'
|-CXXMethodDecl 0x55d0e8ec5cd8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55d0e8eddaf8 <col:34, line:640:5>
|   `-ReturnStmt 0x55d0e8eddae8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55d0e8eddad0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55d0e8eddaa0 <col:16> 'Packet *' lvalue ->_data_packet 0x55d0e8ecd458
|         `-CXXThisExpr 0x55d0e8edda90 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d0e8ec5e18 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55d0e8ec5d88 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d0e8ed6bb8 <col:46> 'bool' true
|-CXXMethodDecl 0x55d0e8ec5f98 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55d0e8ec5ed0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55d0e8ec6040 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55d0e8ec67f0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55d0e8ec6140 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6860 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec6120 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55d0e8ec6100 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d0e8ebb2a0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d0e8ec61d0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6878 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec61b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55d0e8ec6190 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d0e8ebb330 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d0e8ec6260 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6890 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec6240 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d0e8ec6220 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d0e8ec62f0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec68a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec62d0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55d0e8ec62b0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55d0e8ec6380 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec68c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec6360 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55d0e8ec6340 <col:21> 'int' 16
| |-EnumConstantDecl 0x55d0e8ec6410 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec68d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec63f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d0e8ec63d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d0e8ec64a0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec68f0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec6480 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55d0e8ec6460 <col:19> 'int' EnumConstant 0x55d0e8ec62f0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d0e8ec6530 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6908 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec6510 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55d0e8ec64f0 <col:19> 'int' EnumConstant 0x55d0e8ec6410 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d0e8ec6600 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6920 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec65e0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55d0e8ec65c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d0e8ec6580 <col:23> 'int' EnumConstant 0x55d0e8ec6530 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d0e8ec65a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d0e8ec66d0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d0e8ec6938 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d0e8ec66b0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55d0e8ec6690 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d0e8ec6650 <col:23> 'int' EnumConstant 0x55d0e8ec6530 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d0e8ec6670 <col:40> 'int' 4
| `-EnumConstantDecl 0x55d0e8ec67a0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55d0e8ec6950 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d0e8ec6780 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55d0e8ec6760 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55d0e8ec6720 <col:23> 'int' EnumConstant 0x55d0e8ec6530 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55d0e8ec6740 <col:40> 'int' 8
|-CXXMethodDecl 0x55d0e8ec6990 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55d0e8ec6a30 <col:68> "" ""
|-CXXMethodDecl 0x55d0e8ec6ac8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55d0e8ec6b68 <col:45> "" ""
|-CXXMethodDecl 0x55d0e8ec6c00 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d0e8ec6ca0 <col:57> "" ""
|-CXXMethodDecl 0x55d0e8ec6d38 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55d0e8ec6dd8 <col:45> "" ""
|-CXXMethodDecl 0x55d0e8ec6e70 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d0e8ec6f10 <col:57> "" ""
|-CXXMethodDecl 0x55d0e8ec6fa0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d0e8ec7040 <col:51> "" ""
|-CXXMethodDecl 0x55d0e8ec70d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d0e8ec7170 <col:63> "" ""
|-CXXMethodDecl 0x55d0e8ec7200 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d0e8ec72a0 <col:53> "" ""
|-CXXMethodDecl 0x55d0e8ec7330 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d0e8ec73d0 <col:65> "" ""
|-CXXMethodDecl 0x55d0e8ec74e8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ec7458 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55d0e8ec7590 <col:61> "" ""
|-CXXMethodDecl 0x55d0e8ec7728 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d0e8ec7618 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55d0e8ec7690 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d0e8ec77d8 <col:67> "" ""
|-CXXMethodDecl 0x55d0e8ec78f0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ec7860 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d0e8ec7998 <col:63> "" ""
|-CXXMethodDecl 0x55d0e8ec7b30 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d0e8ec7a20 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d0e8ec7a98 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d0e8ec7be0 <col:69> "" ""
|-CXXMethodDecl 0x55d0e8ec7cf8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ec7c68 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d0e8ec7da0 <col:63> "" ""
|-CXXMethodDecl 0x55d0e8eca478 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8eca368 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d0e8eca3e0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d0e8eca528 <col:69> "" ""
|-CXXMethodDecl 0x55d0e8eca640 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d0e8eca5b0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55d0e8eca6e8 <col:62> "" ""
|-CXXMethodDecl 0x55d0e8eca880 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d0e8eca770 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d0e8eca7e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55d0e8eca930 <col:68> "" ""
|-CXXMethodDecl 0x55d0e8ecaa48 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55d0e8eca9b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d0e8ecaaf0 <col:63> "" ""
|-CXXMethodDecl 0x55d0e8ecac88 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55d0e8ecab78 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d0e8ecabf0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55d0e8ecad38 <col:69> "" ""
|-CXXMethodDecl 0x55d0e8ecadc8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d0e8ecae68 <col:64> "" ""
|-CXXMethodDecl 0x55d0e8ecaef8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d0e8ecaf98 <col:52> "" ""
|-CXXMethodDecl 0x55d0e8ecb028 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d0e8ecb0c8 <col:67> "" ""
|-CXXMethodDecl 0x55d0e8ecb158 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d0e8ecb1f8 <col:55> "" ""
|-CXXMethodDecl 0x55d0e8ecb310 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ecb280 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d0e8ecb3b8 <col:58> "" ""
|-CXXMethodDecl 0x55d0e8ecb550 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d0e8ecb440 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d0e8ecb4b8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d0e8ecb600 <col:62> "" ""
|-CXXMethodDecl 0x55d0e8ecb718 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ecb688 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d0e8ecb7c0 <col:58> "" ""
|-CXXMethodDecl 0x55d0e8ecb958 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55d0e8ecb848 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d0e8ecb8c0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55d0e8ecba08 <col:62> "" ""
|-CXXMethodDecl 0x55d0e8ecbb20 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ecba90 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55d0e8ecbbc8 <col:60> "" ""
|-CXXMethodDecl 0x55d0e8ecbd60 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d0e8ecbc50 <col:34> col:37 'int'
| |-ParmVarDecl 0x55d0e8ecbcc8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d0e8ecbe10 <col:64> "" ""
|-CXXMethodDecl 0x55d0e8ecbf28 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ecbe98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d0e8ecbfd0 <col:58> "" ""
|-CXXMethodDecl 0x55d0e8ecc168 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d0e8ecc058 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d0e8ecc0d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55d0e8ecc218 <col:62> "" ""
|-CXXMethodDecl 0x55d0e8ecc330 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d0e8ecc2a0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55d0e8ecc3d8 <col:59> "" ""
|-CXXMethodDecl 0x55d0e8ecc570 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d0e8ecc460 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d0e8ecc4d8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d0e8ecc620 <col:63> "" ""
|-AccessSpecDecl 0x55d0e8ecc690 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55d0e8ecc6b8 prev 0x55d0e8ec18c0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d0e8ecc7b0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55d0e8ecc8a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55d0e8ecc9c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55d0e8eccb48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55d0e8ecccc8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55d0e8ecce48 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55d0e8eddc78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d0e8ede4e8 <col:11>
| |-CXXDestructorDecl 0x55d0e8eddd50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d0e8edde88 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d0e8edde88
| | `-ParmVarDecl 0x55d0e8eddf98 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55d0e8ede038 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ede038
| | `-ParmVarDecl 0x55d0e8ede148 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55d0e8ee0f08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d0e8ee1018 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55d0e8ee1298 <col:11>
| |   `-ReturnStmt 0x55d0e8ee1288 <col:11>
| |     `-UnaryOperator 0x55d0e8ee1270 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d0e8ee1260 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55d0e8ee1088 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ee1088
|   `-ParmVarDecl 0x55d0e8ee1198 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55d0e8ecceb0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d0e8eccfc8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55d0e8ecd068 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55d0e8ecd0d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55d0e8ecd138 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55d0e8ecd1a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55d0e8ecd200 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55d0e8ecd2c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55d0e8ecd320 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55d0e8ecd380 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55d0e8eddb88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55d0e8ecd068 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55d0e8ede4f8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55d0e8ede550 <col:12>
| |-CXXConstructorDecl 0x55d0e8ede1b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d0e8ede1b8
| | `-ParmVarDecl 0x55d0e8ede2c8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55d0e8ede368 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d0e8ede368
| | `-ParmVarDecl 0x55d0e8ede478 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55d0e8ee05f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55d0e8ecd3f8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55d0e8ecd458 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55d0e8ecd4c0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55d0e8ecd528 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55d0e8ecd590 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55d0e8ecd5f8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55d0e8ecd658 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55d0e8ecd6b8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55d0e8ecd720 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55d0e8ecd7a8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55d0e8ecd3f8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55d0e8eddb20 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d0e8ecd658 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55d0e8ede560 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55d0e8ede5c0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55d0e8ecd948 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55d0e8ecd888 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55d0e8ecda40 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55d0e8ecdc28 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55d0e8ecdb30 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55d0e8ecdef8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55d0e8ecdce0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d0e8ecdd58 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d0e8ecddd0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ece118 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55d0e8ecdfc8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55d0e8ece040 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55d0e8ed66f8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55d0e8ece1d8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55d0e8ece250 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55d0e8ece2c8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55d0e8ed6850 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d0e8ed67c0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d0e8ed6998 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d0e8ed6908 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55d0e8ed6a90 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d0e8f3bef8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d0e8f3c018 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x55d0e8f3c2c0 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55d0e8f3c0b8 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x55d0e8f3c130 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x55d0e8f3c1a8 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d0e8f3c918 <col:33> 'const ArgContext' lvalue Var 0x55d0e8e73620 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55d0e8f3c558 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x55d0e8f3c388 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55d0e8f3c400 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x55d0e8f3c478 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d0e8f3c938 <col:34> 'const ArgContext' lvalue Var 0x55d0e8e73620 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55d0e8f3c848 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55d0e8f3c620 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55d0e8f3c6b0 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x55d0e8f3c728 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55d0e8f3c958 <col:34> 'const ArgContext' lvalue Var 0x55d0e8e73620 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55d0e8f3cb18 <col:46, line:381:5>
|   `-ReturnStmt 0x55d0e8f3cb08 <line:380:9, col:71>
|     `-CallExpr 0x55d0e8f3cad0 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x55d0e8f3cab8 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d0e8f3ca68 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x55d0e8f3c558 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x55d0e8f3c9c8 <col:22> 'const String' lvalue ParmVar 0x55d0e8f3c620 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55d0e8f3ca18 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x55d0e8f3c9e8 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x55d0e8f3c6b0 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x55d0e8f3ca48 <col:67> 'const ArgContext' lvalue ParmVar 0x55d0e8f3c728 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x55d0e901a918 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55d0e901a9f0 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d0e901ab28 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x55d0e901ab28
| `-ParmVarDecl 0x55d0e901ac38 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x55d0e901acd8 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55d0e901ade8 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x55d0e901ba40 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d0e8f3dcc0 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x55d0e8f3df18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d0e901a828 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d0e901ae58 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x55d0e901ae58
| `-ParmVarDecl 0x55d0e901af68 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x55d0e901b008 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d0e901b118 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x55d0e901ba50 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d0e901ba20 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x55d0e901b9f0 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x55d0e901b9c0 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x55d0e901b118 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x55d0e901bac0 <col:19>
`-CXXDestructorDecl 0x55d0e901b1b8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
