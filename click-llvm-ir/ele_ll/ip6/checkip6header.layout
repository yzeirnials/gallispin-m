
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9c1728 prev 0x56113d9b8ec8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d9c1820 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56113d9c18b0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56113d9c1928 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56113d9c19e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56113d9c1ab0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56113d9c1c28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56113d9c1b60 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56113d9c1cd0 <col:24>
| `-OptimizeNoneAttr 0x56113d9c1d28 <col:34>
|-CXXMethodDecl 0x56113d9c1d70 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56113d9c2028 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56113d9c1e20 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56113d9c1e98 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56113d9c1f18 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56113d9c20e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56113d9c2118 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56113d9c2180 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56113d9c2208 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56113d9c2528 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56113d9c22c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56113d9c2338 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56113d9c23b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56113d9c2430 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56113d9c2640 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56113d9c9fb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56113d9c9fb8
| `-ParmVarDecl 0x56113d9ca0c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56113d9ca168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56113d9ca168
| `-ParmVarDecl 0x56113d9ca278 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56113dac0d98 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9b4740 prev 0x56113d9b44c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56113d9b4838 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56113d9b48c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56113d9b4928 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56113d9b4a18 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56113d9b4b18 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56113d9b4ce8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56113d9b4b98 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56113d9b4c10 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56113d9b4e78 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56113d9b4db0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56113d9b4f20 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56113d9b5058 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56113d9b4f90 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56113d9b51f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56113d9b5138 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56113d9b5398 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56113d9b52d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56113d9b5440 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56113d9b5540 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56113d9b5620 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b5520 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56113d9b5500 <col:26> 'int' 1
| `-EnumConstantDecl 0x56113d9b55d0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56113d9b5638 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d9b55b0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56113d9b5590 <col:44> 'int' 2
|-CXXMethodDecl 0x56113d9b5780 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56113d9b5668 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56113d9b56e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56113d9b58d8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56113d9b5848 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56113d9b5b18 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56113d9b5998 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56113d9b5a10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56113d9b5bc8 <col:20>
| `-OptimizeNoneAttr 0x56113d9b5c20 <col:30>
|-CXXMethodDecl 0x56113d9b5d28 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56113d9b5c60 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56113d9b5dd0 <col:20>
| `-OptimizeNoneAttr 0x56113d9b5e28 <col:30>
|-CXXMethodDecl 0x56113d9b5e78 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56113d9b5f40 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56113d9b6058 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56113d9b60e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56113d9b6168 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56113d9b61f0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x56113d9b6278 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56113d9b6308 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56113d9b63c8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56113d9b6450 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56113d9b64d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56113d9b6560 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56113d9b65e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56113d9b6670 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56113d9b6700 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56113d9b67c0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56113d9b6850 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56113d9b69a0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56113d9b6908 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56113d9b6b30 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56113d9b6a60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56113d9b6de0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56113d9b6be8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56113d9b6c68 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56113d9b6ce8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56113d9b6e98 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56113d9b6fa0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56113d9b7230 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b6f80 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56113d9b6f60 <col:33> 'int' 0
| |-EnumConstantDecl 0x56113d9b7030 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56113d9b7248 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b7010 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56113d9b6ff0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56113d9b70c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56113d9b7260 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b70a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56113d9b7080 <col:38> 'int' 90
| |-EnumConstantDecl 0x56113d9b7150 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56113d9b7278 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b7130 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56113d9b7110 <col:35> 'int' 100
| `-EnumConstantDecl 0x56113d9b71e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56113d9b7290 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d9b71c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56113d9b71a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x56113d9b72d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56113d9b7710 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56113d9b7580 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56113d9b75f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9b77e0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56113d9b7960 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56113d9b7890 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9b7b68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56113d9b7a18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56113d9b7a90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9b7c68 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56113d9b7d08 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56113d9b7dd0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7e60 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56113d9b8090 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9b7e40 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56113d9b7e20 <col:36> 'int' EnumConstant 0x56113d9b7dd0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7eb0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7f00 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7f50 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7fa0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56113d9b7ff0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56113d9b8040 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56113d9b8178 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56113d9b80b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56113d9b8240 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56113d9b8300 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56113d9b83c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56113d9b8480 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56113d9b8598 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56113d9b8660 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56113d9b87e0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56113d9b8710 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56113d9b8908 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56113d9b8b08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56113d9b89b8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56113d9b8a38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56113d9c6458 <col:54, line:127:5>
|   |-ParenExpr 0x56113d9c6308 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56113d9c62d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56113d9c5fc8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56113d9c5fa0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56113d9c5f88 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56113d9c5f70 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56113d9c5f40 <col:31> 'Router *' lvalue ->_router 0x56113d9c3e20
|   |   |         `-CXXThisExpr 0x56113d9c5f30 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56113d9c6028 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d9c6008 <col:48> 'int' 0
|   |   `-CallExpr 0x56113d9c6238 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56113d9c6220 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d9c6200 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d9c6278 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d9c6098 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56113d9c6290 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d9c60b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56113d9c62a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d9c60f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56113d9c62c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d9c61e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d9c61d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d9c6188 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56113d9c63a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56113d9c6338 <col:9> 'Router *' lvalue ->_router 0x56113d9c3e20
|   | | `-CXXThisExpr 0x56113d9c6328 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56113d9c6388 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56113d9c6368 <col:19> 'Router *' lvalue ParmVar 0x56113d9b89b8 'r' 'Router *'
|   `-BinaryOperator 0x56113d9c6438 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56113d9c63d0 <col:9> 'int' lvalue ->_eindex 0x56113d9c3e88
|     | `-CXXThisExpr 0x56113d9c63c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56113d9c6420 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56113d9c6400 <col:19> 'int' lvalue ParmVar 0x56113d9b8a38 'eindex' 'int'
|-CXXMethodDecl 0x56113d9b8c90 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56113d9b8bc8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56113d9b8d60 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56113d9b8e28 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56113d9b8ec8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56113d9b9118 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56113d9b8f90 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56113d9b9010 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56113d9b91c8 <col:20>
| `-OptimizeNoneAttr 0x56113d9b9220 <col:30>
|-CXXMethodDecl 0x56113d9b9328 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56113d9b9260 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56113d9b93d0 <col:20>
| `-OptimizeNoneAttr 0x56113d9b9428 <col:30>
|-CXXMethodDecl 0x56113d9b94f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56113d9b9468 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56113d9b95a0 <col:20>
| `-OptimizeNoneAttr 0x56113d9b95f8 <col:30>
|-CXXMethodDecl 0x56113d9b9788 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56113d9b9630 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56113d9b96b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56113d9b9918 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56113d9b9850 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56113d9b9a68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56113d9b99d8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56113d9b9bb8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56113d9b9b28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56113d9b9d08 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56113d9b9c78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56113d9b9fc8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56113d9b9dc0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56113d9b9e40 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56113d9b9ee8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56113d9ba0a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56113d9ba160 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56113d9ba430 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56113d9ba2e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56113d9ba358 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9ba558 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56113d9ba730 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56113d9ba610 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56113d9ba690 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56113d9ba918 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56113d9ba7f8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56113d9ba878 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56113d9bac88 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56113d9ba9d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56113d9baa50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56113d9baad0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56113d9c5a40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56113d9c5a20 <col:106> 'int' 0
| `-ParmVarDecl 0x56113d9bab48 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5a78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5a58 <col:126> 'int' 0
|-CXXMethodDecl 0x56113d9bb028 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56113d9bad58 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56113d9badf0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56113d9bae70 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56113d9baee8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5ab0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5a90 <col:114> 'int' 0
|-CXXMethodDecl 0x56113d9bb3b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56113d9bb100 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56113d9bb178 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56113d9bb1f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56113d9c5ac8 <col:96> 'int' 0
| `-ParmVarDecl 0x56113d9bb270 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5b08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5ae8 <col:116> 'int' 0
|-CXXMethodDecl 0x56113d9bb738 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56113d9bb488 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56113d9bb500 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bb580 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56113d9c5b40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56113d9c5b20 <col:109> 'int' 0
| `-ParmVarDecl 0x56113d9bb5f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5b78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5b58 <col:129> 'int' 0
|-CXXMethodDecl 0x56113d9bbab8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56113d9bb808 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56113d9bb880 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bb900 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56113d9bb978 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5bb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5b90 <col:117> 'int' 0
|-CXXMethodDecl 0x56113d9bbe48 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56113d9bbb90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bbc08 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bbc88 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56113d9c5bc8 <col:99> 'int' 0
| `-ParmVarDecl 0x56113d9bbd00 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56113d9c5c08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56113d9c5be8 <col:119> 'int' 0
|-CXXMethodDecl 0x56113d9bc268 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56113d9bbf18 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56113d9bbf98 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56113d9bc010 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bc090 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56113d9c5c40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56113d9c5c20 <col:108> 'int' 0
| `-ParmVarDecl 0x56113d9bc110 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56113d9c5c78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56113d9c5c58 <col:141> 'int' 0
|-CXXMethodDecl 0x56113d9bc688 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56113d9bc340 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56113d9bc3c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56113d9bc438 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bc4b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56113d9bc538 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56113d9c5c90 <col:121> 'int' 0
|-CXXMethodDecl 0x56113d9bcab8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56113d9bc768 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56113d9bc7e8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56113d9bc860 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9bc8e0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56113d9c5cb0 <col:98> 'int' 0
| `-ParmVarDecl 0x56113d9bc960 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56113d9c5cd0 <col:123> 'int' 0
|-CXXMethodDecl 0x56113d9bcd80 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56113d9bcb90 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56113d9bcc10 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56113d9bcc90 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56113d9c5cf0 <col:80> 'int' 0
|-EnumDecl 0x56113d9bce38 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56113d9bcf40 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56113d9bd1d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9bcf20 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56113d9bcf00 <col:42> 'int' 1
| |-EnumConstantDecl 0x56113d9bcfd0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56113d9bd1e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9bcfb0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56113d9bcf90 <col:40> 'int' 2
| |-EnumConstantDecl 0x56113d9bd060 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56113d9bd200 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9bd040 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56113d9bd020 <col:44> 'int' 4
| |-EnumConstantDecl 0x56113d9bd0f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56113d9bd218 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9bd0d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56113d9bd0b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x56113d9bd180 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56113d9bd230 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d9bd160 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56113d9bd140 <col:34> 'int' 6
|-CXXMethodDecl 0x56113d9bd4e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56113d9bd258 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56113d9bd2f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56113d9bd378 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56113d9bd3f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56113d9c5da8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56113d9c5d90 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56113d9c5d78 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56113d9c5d58 <col:98, col:105> 'String' (CXXTemporary 0x56113d9c5d58)
|           `-CXXTemporaryObjectExpr 0x56113d9c5d20 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56113d9bd788 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56113d9bd5b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56113d9bd630 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56113d9bd6a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56113d9c5e58 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56113d9c5e40 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56113d9c5e28 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56113d9c5e08 <col:94, col:101> 'String' (CXXTemporary 0x56113d9c5e08)
| |         `-CXXTemporaryObjectExpr 0x56113d9c5dd0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56113d9c6640 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56113d9c65b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56113d9c6588 <col:9> '<bound member function type>' ->add_task_handlers 0x56113d9bd4e8
|     | `-CXXThisExpr 0x56113d9c6578 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56113d9c65f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56113d9c64f8 <col:27> 'Task *' lvalue ParmVar 0x56113d9bd5b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x56113d9c6610 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56113d9c6518 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56113d9bd630 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56113d9c6628 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56113d9c6538 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56113d9bd180 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56113d9c6558 <col:62> 'const String' lvalue ParmVar 0x56113d9bd6a8 'prefix' 'const String &'
|-CXXMethodDecl 0x56113d9bd998 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56113d9bd850 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56113d9bd8c8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56113d9c5f08 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56113d9c5ef0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56113d9c5ed8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56113d9c5eb8 <col:70, col:77> 'String' (CXXTemporary 0x56113d9c5eb8)
| |         `-CXXTemporaryObjectExpr 0x56113d9c5e80 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56113d9c6818 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56113d9c6790 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56113d9c6760 <col:9> '<bound member function type>' ->add_task_handlers 0x56113d9bd4e8
|     | `-CXXThisExpr 0x56113d9c6750 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56113d9c67d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56113d9c66d0 <col:27> 'Task *' lvalue ParmVar 0x56113d9bd850 'task' 'Task *'
|     |-ImplicitCastExpr 0x56113d9c67e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56113d9c66f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56113d9c6800 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56113d9c6710 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56113d9bd180 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56113d9c6730 <col:57> 'const String' lvalue ParmVar 0x56113d9bd8c8 'prefix' 'const String &'
|-CXXMethodDecl 0x56113d9bdc78 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56113d9bda60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bdae0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bdb58 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56113d9bdf28 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56113d9bdd48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bddc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bde48 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56113d9be218 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56113d9bdff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9be078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9be0f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56113d9be4c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56113d9be2e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9be368 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9be3e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56113d9be778 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56113d9be598 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9be618 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9be698 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56113d9bea28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56113d9be848 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9be8c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9be940 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56113d9becd8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56113d9beaf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9beb78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bebf8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56113d9befe8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56113d9bee00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bee80 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bef00 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56113d9bf2c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56113d9bf0b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bf138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bf1e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56113d9bf5a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56113d9bf398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bf418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bf4c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56113d9bf810 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56113d9bf678 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56113d9bf6f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56113d9bf770 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56113d9bfab8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56113d9bf8e0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56113d9bf960 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56113d9bf9d8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56113d9bfd68 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56113d9bfb88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bfc08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bfc88 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56113d9c0018 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56113d9bfe38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9bfeb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9bff30 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56113d9c02c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56113d9c00e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9c0168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9c01e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56113d9c0598 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56113d9c0398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9c0418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56113d9c04b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56113d9c08c8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56113d9c0668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56113d9c06e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56113d9c0760 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56113d9c07d8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56113d9c5f20 <col:93> 'bool' false
|-CXXMethodDecl 0x56113d9c0ab0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56113d9c0998 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56113d9c0a18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56113d9c0c88 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56113d9c0b70 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56113d9c0bf0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56113d9c0f68 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56113d9c0d48 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56113d9c0dc0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56113d9c0e40 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56113d9c0eb8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9c1258 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56113d9c1038 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56113d9c10b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56113d9c1130 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56113d9c11a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9c1490 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56113d9c1330 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56113d9c13b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56113d9c1678 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56113d9c1558 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56113d9c15d8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56113d9c1728 prev 0x56113d9b8ec8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56113d9c1820 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56113d9c18b0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56113d9c1928 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56113d9c19e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56113d9c1ab0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56113d9c1c28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56113d9c1b60 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56113d9c1cd0 <col:24>
| | `-OptimizeNoneAttr 0x56113d9c1d28 <col:34>
| |-CXXMethodDecl 0x56113d9c1d70 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56113d9c2028 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56113d9c1e20 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56113d9c1e98 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56113d9c1f18 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56113d9c20e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56113d9c2118 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56113d9c2180 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56113d9c2208 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56113d9c2528 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56113d9c22c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56113d9c2338 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56113d9c23b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56113d9c2430 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56113d9c2640 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56113d9c9fb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56113d9c9fb8
| | `-ParmVarDecl 0x56113d9ca0c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56113d9ca168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56113d9ca168
| | `-ParmVarDecl 0x56113d9ca278 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56113dac0d98 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56113d9c26b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56113d9c2758 <col:38> "" ""
|-CXXMethodDecl 0x56113d9c27e8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56113d9c2888 <col:44> "" ""
|-AccessSpecDecl 0x56113d9c28f8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56113d9c2920 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56113d9c2a20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56113d9c2a70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d9c2a00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56113d9c29e0 <col:27> 'int' 4
|-FieldDecl 0x56113d9c2b28 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56113d9c2cd8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56113d9c2d90 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56113d9c3e20 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56113d9c3e88 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56113d9c3fd8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56113d9c3f18 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56113d9c4188 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56113d9c4098 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56113d9c4368 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56113d9c4248 <col:20> col:23 'int'
| `-ParmVarDecl 0x56113d9c42c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x56113d9c4610 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56113d9c4430 <col:23> col:26 'int'
| |-ParmVarDecl 0x56113d9c44b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x56113d9c4528 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56113d9c46c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56113d9c4790 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56113d9c47e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56113d9c4830 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56113d9c4a10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56113d9c48c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56113d9c4938 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9c4cb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56113d9c4ad8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56113d9c4b58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56113d9c4bd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9c4ed8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56113d9c4d88 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56113d9c4e08 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56113d9c5210 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56113d9c4f98 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56113d9c5018 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56113d9c5090 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56113d9c5110 <col:57> col:60 'int'
|-CXXMethodDecl 0x56113d9c53f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56113d9c52e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56113d9c5360 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56113d9c5548 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56113d9c54b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56113d9c58c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56113d9c5608 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56113d9c5688 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56113d9c5700 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56113d9c5780 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56113d9c59e0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CheckIP6Header
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   int _n_bad_src
       120 |   class IP6Address * _bad_src
       128 |   int _drops
           | [sizeof=136, dsize=132, align=8,
           |  nvsize=132, nvalign=8]

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d6f3688 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56113d6f38a8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x56113d6f39d8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x56113d6f3b08 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x56113d9dece8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x56113d9df4f8 <col:5>
|-CXXDestructorDecl 0x56113d9dedc0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56113d9deec8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9defd8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x56113d9f2f10 <col:5>
|-CXXConstructorDecl 0x56113d9df078 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9df188 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x56113d9fc348 <col:5>
|-CXXMethodDecl 0x56113d9f1c78 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9f1d88 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x56113da00150 <col:5>
|   `-ReturnStmt 0x56113da00140 <col:5>
|     `-UnaryOperator 0x56113da00128 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da00118 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x56113d9f1df8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x56113d9f1df8
  `-ParmVarDecl 0x56113d9f1f08 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d691e20 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d6f35f8 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x56113d6f3688 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56113d6f38a8 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x56113d6f39d8 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x56113d6f3b08 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x56113d9dece8 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56113d9df4f8 <col:5>
| |-CXXDestructorDecl 0x56113d9dedc0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56113d9deec8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d9defd8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x56113d9f2f10 <col:5>
| |-CXXConstructorDecl 0x56113d9df078 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d9df188 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x56113d9fc348 <col:5>
| |-CXXMethodDecl 0x56113d9f1c78 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d9f1d88 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x56113da00150 <col:5>
| |   `-ReturnStmt 0x56113da00140 <col:5>
| |     `-UnaryOperator 0x56113da00128 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56113da00118 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x56113d9f1df8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x56113d9f1df8
|   `-ParmVarDecl 0x56113d9f1f08 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x56113d6f3bc8 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x56113d9debf8 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56113d6f3bc8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x56113d9df508 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x56113d9df560 <col:8>
|-CXXConstructorDecl 0x56113d9df1f8 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9df2d8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x56113d6f3bc8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x56113d9f2f20 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x56113d9f2ee0 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
| |     `-DeclRefExpr 0x56113d9f2ec0 <col:8> 'const in6_addr' lvalue ParmVar 0x56113d9df2d8 '' 'const in6_addr &'
| `-CompoundStmt 0x56113d9f2f80 <col:8>
|-CXXConstructorDecl 0x56113d9df378 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9df488 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x56113d6f3bc8 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x56113d9fc358 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x56113d9fc318 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x56113d6f3bc8
| |     `-CXXStaticCastExpr 0x56113d9fc2e8 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x56113d9fc2b8 <col:8> 'in6_addr' lvalue ParmVar 0x56113d9df488 '' 'in6_addr &&'
| `-CompoundStmt 0x56113d9fc3b8 <col:8>
|-CXXMethodDecl 0x56113d9f1f78 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9f2088 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x56113da001c8 <col:8>
|   |-CXXMemberCallExpr 0x56113da00168 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x56113da000a8 <col:8> '<bound member function type>' .operator= 0x56113d9f1c78
|   | | `-MemberExpr 0x56113d9fffb8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x56113d6f3bc8
|   | |   `-CXXThisExpr 0x56113d9fffa8 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x56113da00078 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|   |   `-DeclRefExpr 0x56113da00058 <col:8> 'const in6_addr' lvalue ParmVar 0x56113d9f2088 '' 'const in6_addr &'
|   `-ReturnStmt 0x56113da001b8 <col:8>
|     `-UnaryOperator 0x56113da001a0 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da00190 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x56113d9f20f8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x56113d9f20f8
| `-ParmVarDecl 0x56113d9f2208 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x56113d9f25a8 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9db510 prev 0x56113d97b590 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d9db608 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x56113d9db698 <col:20, col:26> col:20 public
|-TypedefDecl 0x56113d9db6d0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x56113d5a7e00 'uninitialized_type'
|   `-CXXRecord 0x56113d5a7d68 'uninitialized_type'
|-CXXConstructorDecl 0x56113d9db760 <line:19:5, line:21:5> line:19:12 IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9df570 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x56113d9f17d8 <col:25, line:21:5>
|   `-CallExpr 0x56113d9f1788 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x56113d9f1770 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56113d9df708 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x56113d6b30d8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x56113d9f17c0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x56113d9df650 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x56113d9df620 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|     |     `-CXXThisExpr 0x56113d9df610 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x56113d9df668 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x56113d9df6e8 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x56113d9df6c8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x56113d9df698 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78 non_odr_use_unevaluated
|           `-CXXThisExpr 0x56113d9df688 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x56113d9db8b0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x56113d9db820 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9f17f0 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x56113d9f1a40 <col:56, line:26:5>
|   `-CallExpr 0x56113d9f19c0 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x56113d9f19a8 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56113d9f1988 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56113d6b1d98 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x56113d9f19f8 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x56113d9f18d0 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x56113d9f18a0 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|     |     `-CXXThisExpr 0x56113d9f1890 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x56113d9f1a28 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x56113d9f1a10 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56113d9f18e8 <col:17> 'const unsigned char *' lvalue ParmVar 0x56113d9db820 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x56113d9f1968 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x56113d9f1948 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x56113d9f1918 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78 non_odr_use_unevaluated
|           `-CXXThisExpr 0x56113d9f1908 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x56113d9dba00 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x56113d9db970 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9f1a58 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x56113d9f2e00 <col:45, line:33:5>
|   `-ExprWithCleanups 0x56113d9f2de8 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x56113d9f2db0 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x56113d9f2d98 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56113d9f2d18 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x56113d9de518 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x56113d9f1ac0 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x56113d9f1ab0 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x56113d9f2d00 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x56113d9f2ce8 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x56113d9f2cd0 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x56113d9f2cb0 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x56113d9f2c80 <col:10> '<bound member function type>' .operator in_addr 0x56113d7b6e00
|                 `-ImplicitCastExpr 0x56113d9f2c68 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x56113d9f1ad8 <col:10> 'IPAddress' lvalue ParmVar 0x56113d9db970 'x' 'IPAddress'
|-CXXConstructorDecl 0x56113d9dbb50 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x56113d9dbac0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x56113d9dbd78 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x56113d9dbc80 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9f2f90 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x56113d9f2e18 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x56113d9dbc80 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x56113d9f2ff0 <col:13, line:41:5>
|-CXXConstructorDecl 0x56113d9dbf48 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x56113d9dbe80 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9f3000 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x56113d9f3110 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x56113d9f30d8 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x56113d9f30c0 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56113d9f30a0 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x56113d9de518 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x56113d9f3068 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x56113d9f3058 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x56113d9f3080 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x56113d9dbe80 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x56113d9dc098 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x56113d9dc008 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9f3128 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x56113d9f31d8 <col:57, line:51:5>
|   `-CStyleCastExpr 0x56113d9f31b0 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x56113d9f3180 <col:9> 'const uninitialized_type' lvalue ParmVar 0x56113d9dc008 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x56113d9dc228 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x56113d9dc160 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x56113d9dc378 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x56113d9dc2e8 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x56113d9dc528 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x56113d9dc4a0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x56113d97b620 'IP6Address'
|   | `-CXXRecord 0x56113d9db510 'IP6Address'
|   `-ParenType 0x56113d9dc440 'uint32_t () const' sugar
|     `-FunctionProtoType 0x56113d773420 'uint32_t () const' const cdecl
|       `-TypedefType 0x56113d5a80f0 'uint32_t' sugar
|         |-Typedef 0x56113d4bb408 'uint32_t'
|         `-TypedefType 0x56113d494440 '__uint32_t' sugar
|           |-Typedef 0x56113d494038 '__uint32_t'
|           `-BuiltinType 0x56113d452410 'unsigned int'
|-CXXConversionDecl 0x56113d9dc668 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x56113d9dc7f0 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x56113d9f3240 <col:46, col:62>
|   `-ReturnStmt 0x56113d9f3230 <col:48, col:55>
|     `-MemberExpr 0x56113d9f3200 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|       `-CXXThisExpr 0x56113d9f31f0 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x56113d9dc9e0 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x56113d9f32a8 <col:34, col:50>
|   `-ReturnStmt 0x56113d9f3298 <col:36, col:43>
|     `-MemberExpr 0x56113d9f3268 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|       `-CXXThisExpr 0x56113d9f3258 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x56113d9dcae0 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x56113d9f3310 <col:45, col:61>
|   `-ReturnStmt 0x56113d9f3300 <col:47, col:54>
|     `-MemberExpr 0x56113d9f32d0 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|       `-CXXThisExpr 0x56113d9f32c0 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x56113d9dcbb8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x56113d9f3378 <col:33, col:49>
|   `-ReturnStmt 0x56113d9f3368 <col:35, col:42>
|     `-MemberExpr 0x56113d9f3338 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|       `-CXXThisExpr 0x56113d9f3328 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x56113d9dcc80 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x56113d9f34b0 <col:27, col:66>
|   `-ReturnStmt 0x56113d9f34a0 <col:29, col:63>
|     `-UnaryOperator 0x56113d9f3488 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d9f3468 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56113d9f3450 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d9f3400 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x56113d6f38a8
|         |   `-MemberExpr 0x56113d9f33d0 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|         |     `-MemberExpr 0x56113d9f33a0 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|         |       `-CXXThisExpr 0x56113d9f3390 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x56113d9f3430 <col:62> 'int' 0
|-CXXMethodDecl 0x56113d9dcd48 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x56113d9f3628 <col:39, col:78>
|   `-ReturnStmt 0x56113d9f3618 <col:41, col:75>
|     `-UnaryOperator 0x56113d9f3600 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d9f35e0 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56113d9f35c8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d9f3538 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|         |   `-MemberExpr 0x56113d9f3508 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|         |     `-MemberExpr 0x56113d9f34d8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|         |       `-CXXThisExpr 0x56113d9f34c8 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x56113d9f3568 <col:74> 'int' 0
|-CXXMethodDecl 0x56113d9dce68 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x56113d9f3798 <col:24, col:75>
|   `-ReturnStmt 0x56113d9f3788 <col:26, col:72>
|     `-CStyleCastExpr 0x56113d9f3760 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x56113d9f3738 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x56113d9f3718 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x56113d9f3700 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x56113d9f36b0 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x56113d6f38a8
|           |   `-MemberExpr 0x56113d9f3680 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|           |     `-MemberExpr 0x56113d9f3650 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|           |       `-CXXThisExpr 0x56113d9f3640 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x56113d9f36e0 <col:71> 'int' 0
|-CXXMethodDecl 0x56113d9dcf28 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x56113d9f3920 <col:36, col:87>
|   `-ReturnStmt 0x56113d9f3910 <col:38, col:84>
|     `-ImplicitCastExpr 0x56113d9f38f8 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x56113d9f38d0 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x56113d9f38a8 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x56113d9f3888 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x56113d9f3870 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d9f3820 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|             |   `-MemberExpr 0x56113d9f37f0 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|             |     `-MemberExpr 0x56113d9f37c0 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|             |       `-CXXThisExpr 0x56113d9f37b0 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x56113d9f3850 <col:83> 'int' 0
|-CXXMethodDecl 0x56113d9dcfe8 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x56113d9f3a90 <col:24, col:75>
|   `-ReturnStmt 0x56113d9f3a80 <col:26, col:72>
|     `-CStyleCastExpr 0x56113d9f3a58 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x56113d9f3a30 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x56113d9f3a10 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x56113d9f39f8 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x56113d9f39a8 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x56113d6f38a8
|           |   `-MemberExpr 0x56113d9f3978 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|           |     `-MemberExpr 0x56113d9f3948 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x56113d9deb78
|           |       `-CXXThisExpr 0x56113d9f3938 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x56113d9f39d8 <col:71> 'int' 0
|-CXXMethodDecl 0x56113d9dd0a8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x56113d9f3c18 <col:36, col:87>
|   `-ReturnStmt 0x56113d9f3c08 <col:38, col:84>
|     `-ImplicitCastExpr 0x56113d9f3bf0 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x56113d9f3bc8 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x56113d9f3ba0 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x56113d9f3b80 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x56113d9f3b68 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d9f3b18 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|             |   `-MemberExpr 0x56113d9f3ae8 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|             |     `-MemberExpr 0x56113d9f3ab8 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|             |       `-CXXThisExpr 0x56113d9f3aa8 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x56113d9f3b48 <col:83> 'int' 0
|-CXXMethodDecl 0x56113d9dd168 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d9dd230 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x56113d9dd458 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x56113d9dd308 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x56113d9dd380 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x56113d9dd5d8 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x56113d9dd518 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x56113d9dd6a0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x56113d9f3f30 <col:36, line:99:5>
|   `-ReturnStmt 0x56113d9f3f20 <line:98:2, col:81>
|     `-BinaryOperator 0x56113d9f3f00 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x56113d9f3d78 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x56113d9f3d60 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x56113d9f3d48 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x56113d9f3d08 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x56113d9f3cf0 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x56113d9f3ca0 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|       | |     |   `-MemberExpr 0x56113d9f3c70 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|       | |     |     `-MemberExpr 0x56113d9f3c40 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|       | |     |       `-CXXThisExpr 0x56113d9f3c30 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x56113d9f3cd0 <col:34> 'int' 11
|       | `-IntegerLiteral 0x56113d9f3d28 <col:41> 'int' 255
|       `-BinaryOperator 0x56113d9f3ee0 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x56113d9f3ec8 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56113d9f3eb0 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56113d9f3e70 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56113d9f3e58 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56113d9f3e08 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|         |     |   `-MemberExpr 0x56113d9f3dd8 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|         |     |     `-MemberExpr 0x56113d9f3da8 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|         |     |       `-CXXThisExpr 0x56113d9f3d98 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x56113d9f3e38 <col:74> 'int' 12
|         `-IntegerLiteral 0x56113d9f3e90 <col:81> 'int' 254
|-CXXMethodDecl 0x56113d9dd818 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x56113d9dd750 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x56113d9dd8e0 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x56113d9f4418 <col:43, line:114:5>
|   `-ReturnStmt 0x56113d9f4408 <line:112:2, line:113:24>
|     `-BinaryOperator 0x56113d9f43e8 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x56113d9f4248 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x56113d9f40a8 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x56113d9f4078 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x56113d9f4038 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x56113d9f3ff8 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x56113d9f3fc8 <col:9> '<bound member function type>' ->data32 0x56113d9dd0a8
|       | | |   |   `-CXXThisExpr 0x56113d9f3fb8 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x56113d9f4018 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x56113d9f4090 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x56113d9f4058 <col:24> 'int' 0
|       | `-BinaryOperator 0x56113d9f4228 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x56113d9f41f8 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x56113d9f41b8 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x56113d9f4178 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x56113d9f4148 <col:29> '<bound member function type>' ->data32 0x56113d9dd0a8
|       |   |   |   `-CXXThisExpr 0x56113d9f4138 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x56113d9f4198 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x56113d9f4210 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x56113d9f41d8 <col:44> 'int' 0
|       `-BinaryOperator 0x56113d9f43c8 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x56113d9f4398 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x56113d9f4358 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x56113d9f4318 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x56113d9f42e8 <col:9> '<bound member function type>' ->data32 0x56113d9dd0a8
|         |   |   `-CXXThisExpr 0x56113d9f42d8 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x56113d9f4338 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x56113d9f43b0 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x56113d9f4378 <col:24> 'int' 0
|-CXXMethodDecl 0x56113d9dd9a0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x56113d9f4990 <col:39, line:123:5>
|   `-ReturnStmt 0x56113d9f4980 <line:121:2, line:122:41>
|     `-BinaryOperator 0x56113d9f4960 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x56113d9f4730 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x56113d9f4590 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x56113d9f4560 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x56113d9f4520 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x56113d9f44e0 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x56113d9f44b0 <col:9> '<bound member function type>' ->data32 0x56113d9dd0a8
|       | | |   |   `-CXXThisExpr 0x56113d9f44a0 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x56113d9f4500 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x56113d9f4578 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x56113d9f4540 <col:24> 'int' 0
|       | `-BinaryOperator 0x56113d9f4710 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x56113d9f46e0 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x56113d9f46a0 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x56113d9f4660 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x56113d9f4630 <col:29> '<bound member function type>' ->data32 0x56113d9dd0a8
|       |   |   |   `-CXXThisExpr 0x56113d9f4620 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x56113d9f4680 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x56113d9f46f8 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x56113d9f46c0 <col:44> 'int' 0
|       `-BinaryOperator 0x56113d9f4940 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x56113d9f4928 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x56113d9f4840 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x56113d9f4800 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x56113d9f47d0 <col:9> '<bound member function type>' ->data32 0x56113d9dd0a8
|         |   |   `-CXXThisExpr 0x56113d9f47c0 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x56113d9f4820 <col:18> 'int' 2
|         `-CallExpr 0x56113d9f4900 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x56113d9f48e8 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x56113d9f48c8 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x56113d6f7a38 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x56113d9f48a8 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x56113d9dda60 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x56113d9f4b20 <col:38, line:131:5>
|   `-ReturnStmt 0x56113d9f4b10 <line:130:9, col:47>
|     `-BinaryOperator 0x56113d9f4af0 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x56113d9f4ad8 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x56113d9f4ac0 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x56113d9f4a80 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x56113d9f4a68 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x56113d9f4a18 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x56113d6f38a8
|       |     |   `-MemberExpr 0x56113d9f49e8 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x56113d6f3bc8
|       |     |     `-MemberExpr 0x56113d9f49b8 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x56113d9deb78
|       |     |       `-CXXThisExpr 0x56113d9f49a8 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x56113d9f4a48 <col:41> 'int' 0
|       `-IntegerLiteral 0x56113d9f4aa0 <col:47> 'int' 255
|-CXXMethodDecl 0x56113d9ddb20 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x56113d9f4ef8 <col:39, line:139:5>
|   `-ReturnStmt 0x56113d9f4ee8 <line:138:9, col:67>
|     `-BinaryOperator 0x56113d9f4ec8 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x56113d9f4d28 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x56113d9f4d10 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x56113d9f4c28 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x56113d9f4be8 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x56113d9f4bb8 <col:16> '<bound member function type>' ->data32 0x56113d9dd0a8
|       | |   |   `-CXXThisExpr 0x56113d9f4ba8 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x56113d9f4c08 <col:25> 'int' 0
|       | `-CallExpr 0x56113d9f4ce8 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x56113d9f4cd0 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56113d9f4cb0 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x56113d6f7a38 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x56113d9f4c90 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x56113d9f4ea8 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x56113d9f4e78 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x56113d9f4e38 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x56113d9f4df8 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x56113d9f4dc8 <col:52> '<bound member function type>' ->data32 0x56113d9dd0a8
|         |   |   `-CXXThisExpr 0x56113d9f4db8 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x56113d9f4e18 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x56113d9f4e90 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x56113d9f4e58 <col:67> 'int' 0
|-CXXMethodDecl 0x56113d9ddbe0 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x56113d9ddd88 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x56113d9ddc90 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x56113d9ddf48 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x56113d9dde58 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x56113d9de090 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x56113d9de000 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x56113d9de1f0 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x56113d9de160 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x56113d9de350 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x56113d9de2c0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x56113d9de518 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x56113d9de420 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x56113d9de698 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x56113d9de5d0 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x56113d9de760 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x56113d9de820 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x56113d9de8e0 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x56113d9f5078 <col:22, col:42>
|   `-ReturnStmt 0x56113d9f5068 <col:24, col:39>
|     `-ExprWithCleanups 0x56113d9f5050 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x56113d9f5020 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56113d9f5008 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56113d9f4fe8 <col:31, col:39> 'String' (CXXTemporary 0x56113d9f4fe8)
|             `-CXXMemberCallExpr 0x56113d9f4fc0 <col:31, col:39> 'String'
|               `-MemberExpr 0x56113d9f4f90 <col:31> '<bound member function type>' ->unparse 0x56113d9de760
|                 `-CXXThisExpr 0x56113d9f4f80 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x56113d9de9b0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x56113d9dea58 <col:51> "" ""
|-TypedefDecl 0x56113d9dead8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x56113d9dd2d0 'const IP6Address &'
|   `-QualType 0x56113d97b621 'const IP6Address' const
|     `-RecordType 0x56113d97b620 'IP6Address'
|       `-CXXRecord 0x56113d9db510 'IP6Address'
|-AccessSpecDecl 0x56113d9deb30 <line:171:3, col:10> col:3 private
|-FieldDecl 0x56113d9deb78 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x56113d9f1af8 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x56113d9f1af8
| `-ParmVarDecl 0x56113d9f1bd8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x56113d9f22a8 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x56113d9f22a8
| `-ParmVarDecl 0x56113d9f23b8 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x56113d9f2428 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x56113d9f2428
| `-ParmVarDecl 0x56113d9f2538 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x56113d9f2690 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9f27a8 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x56113d9deb78 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x56113d9fc3c8 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x56113d9fc270 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x56113d9deb78
| |     `-CXXStaticCastExpr 0x56113d9fc240 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x56113d9fc210 <col:7> 'IP6Address' lvalue ParmVar 0x56113d9f27a8 '' 'IP6Address &&'
| `-CompoundStmt 0x56113d9fc428 <col:7>
`-CXXDestructorDecl 0x56113d9fc078 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9cd128 <../elements/ip6/checkip6header.hh:40:1, line:71:1> line:40:7 class CheckIP6Header definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56113d9cd288 <col:1, col:7> col:7 implicit referenced class CheckIP6Header
|-FieldDecl 0x56113d9cd330 <line:42:3, col:7> col:7 _offset 'int'
|-FieldDecl 0x56113d9cd398 <line:44:3, col:7> col:7 _n_bad_src 'int'
|-FieldDecl 0x56113d9cd428 <line:45:3, col:15> col:15 _bad_src 'IP6Address *'
|-FieldDecl 0x56113d9cd490 <line:49:3, col:7> col:7 referenced _drops 'int'
|-AccessSpecDecl 0x56113d9cd4e0 <line:51:2, col:8> col:2 public
|-CXXConstructorDecl 0x56113d9cd570 <line:53:3, col:18> col:3 CheckIP6Header 'void ()'
|-CXXDestructorDecl 0x56113d9cd660 <line:54:3, col:19> col:3 ~CheckIP6Header 'void ()' noexcept-unevaluated 0x56113d9cd660
| `-Overrides: [ 0x56113d9b4a18 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x56113d9cd790 <line:56:3, col:61> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x56113d9b5e78 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56113d9ce468 <col:34, col:61>
|   `-ReturnStmt 0x56113d9ce458 <col:36, col:43>
|     `-ImplicitCastExpr 0x56113d9ce440 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56113d9ce418 <col:43> 'const char [15]' lvalue "CheckIP6Header"
|-CXXMethodDecl 0x56113d9cd858 <line:57:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x56113d9b5f40 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56113d9ce4c8 <col:34, col:56>
|   `-ReturnStmt 0x56113d9ce4b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x56113d9ce4a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56113d9ce480 <col:43> 'const char []' lvalue Var 0x56113d9b6278 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x56113d9cd920 <line:58:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x56113d9b6308 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56113d9ce528 <col:34, col:60>
|   `-ReturnStmt 0x56113d9ce518 <col:36, col:43>
|     `-ImplicitCastExpr 0x56113d9ce500 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56113d9ce4e0 <col:43> 'const char []' lvalue Var 0x56113d9b6670 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x56113d9cdbf0 <line:60:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56113d9b7710 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56113d9cdaa0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x56113d9cdb18 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x56113d9cdcc8 <line:62:3, col:38> col:7 drops 'int () const'
| `-CompoundStmt 0x56113d9ce5a8 <col:21, col:38>
|   `-ReturnStmt 0x56113d9ce598 <col:23, col:30>
|     `-ImplicitCastExpr 0x56113d9ce580 <col:30> 'int' <LValueToRValue>
|       `-MemberExpr 0x56113d9ce550 <col:30> 'const int' lvalue ->_drops 0x56113d9cd490
|         `-CXXThisExpr 0x56113d9ce540 <col:30> 'const CheckIP6Header *' implicit this
|-CXXMethodDecl 0x56113d9cdd88 <line:65:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x56113d9b77e0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56113d9cdec8 <line:67:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56113d9b5058 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x56113d9cde38 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x56113d9ce010 <line:68:3, col:24> col:8 drop_it 'void (Packet *)'
| `-ParmVarDecl 0x56113d9cdf80 <col:16, col:23> col:24 'Packet *'
|-CXXConstructorDecl 0x56113d9ce0e8 <line:40:7> col:7 implicit CheckIP6Header 'void (const CheckIP6Header &)' inline default_delete noexcept-unevaluated 0x56113d9ce0e8
| `-ParmVarDecl 0x56113d9ce1f8 <col:7> col:7 'const CheckIP6Header &'
`-CXXMethodDecl 0x56113d9ce298 <col:7> col:7 implicit operator= 'CheckIP6Header &(const CheckIP6Header &)' inline default_delete noexcept-unevaluated 0x56113d9ce298
  `-ParmVarDecl 0x56113d9ce3a8 <col:7> col:7 'const CheckIP6Header &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckIP6Header = type <{ %class.Element.base, i32, i32, [4 x i8], %class.IP6Address*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.CheckIP6Header.base = type <{ %class.Element.base, i32, i32, [4 x i8], %class.IP6Address*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d7885e0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56113d7886f8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56113d788798 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56113d7887f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56113d788858 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56113d788908 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d788c10 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d788d28 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56113d788dd0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56113d788e38 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56113d788ec8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56113d78ef60 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56113d78f398 <col:12>
|-CXXConstructorDecl 0x56113d78f068 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d78f178 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56113d788dd0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56113d791920 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56113d7918f0 <col:12> 'const char *const' lvalue .data 0x56113d788dd0
| |     `-DeclRefExpr 0x56113d7918d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56113d788e38 'length' 'int'
| | `-ImplicitCastExpr 0x56113d7919b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56113d791980 <col:12> 'const int' lvalue .length 0x56113d788e38
| |     `-DeclRefExpr 0x56113d791960 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56113d788ec8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56113d791a40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56113d791a10 <col:12> 'String::memo_t *const' lvalue .memo 0x56113d788ec8
| |     `-DeclRefExpr 0x56113d7919f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| `-CompoundStmt 0x56113d791a98 <col:12>
|-CXXConstructorDecl 0x56113d78f218 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56113d78f218
| `-ParmVarDecl 0x56113d78f328 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56113d794880 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56113d7a0298 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d7a03a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56113d7a08c0 <col:12>
|   |-BinaryOperator 0x56113d7a06d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56113d7a0690 <col:12> 'const char *' lvalue ->data 0x56113d788dd0
|   | | `-CXXThisExpr 0x56113d7a0680 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56113d7a06c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56113d7a0650 <col:12> 'const char *const' lvalue .data 0x56113d788dd0
|   |     `-DeclRefExpr 0x56113d7a0630 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56113d7a07a0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56113d7a0758 <col:12> 'int' lvalue ->length 0x56113d788e38
|   | | `-CXXThisExpr 0x56113d7a0748 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56113d7a0788 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56113d7a0718 <col:12> 'const int' lvalue .length 0x56113d788e38
|   |     `-DeclRefExpr 0x56113d7a06f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56113d7a0868 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56113d7a0820 <col:12> 'String::memo_t *' lvalue ->memo 0x56113d788ec8
|   | | `-CXXThisExpr 0x56113d7a0810 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56113d7a0850 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56113d7a07e0 <col:12> 'String::memo_t *const' lvalue .memo 0x56113d788ec8
|   |     `-DeclRefExpr 0x56113d7a07c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56113d7a08b0 <col:12>
|     `-UnaryOperator 0x56113d7a0898 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113d7a0888 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56113d7a0418 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56113d7a0418
  `-ParmVarDecl 0x56113d7a0528 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d77fb50 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56113d77fc68 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56113d77fcf8 <col:16, col:22> col:16 public
|-TypedefDecl 0x56113d77fd38 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56113d452dc0 'const char *'
|   `-QualType 0x56113d452311 'const char' const
|     `-BuiltinType 0x56113d452310 'char'
|-TypedefDecl 0x56113d77fdc0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56113d77fd90 'String::const_iterator' sugar
|   |-Typedef 0x56113d77fd38 'const_iterator'
|   `-PointerType 0x56113d452dc0 'const char *'
|     `-QualType 0x56113d452311 'const char' const
|       `-BuiltinType 0x56113d452310 'char'
|-TypedefDecl 0x56113d77ff30 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56113d77fea0 'int (String::*)() const'
|   |-RecordType 0x56113d77fbe0 'String'
|   | `-CXXRecord 0x56113d77fb50 'String'
|   `-ParenType 0x56113d77fe40 'int () const' sugar
|     `-FunctionProtoType 0x56113d7539d0 'int () const' const cdecl
|       `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113d77ff98 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56113d5a8390 'int64_t' sugar
|   |-Typedef 0x56113d4bb2d0 'int64_t'
|   `-TypedefType 0x56113d4944d0 '__int64_t' sugar
|     |-Typedef 0x56113d4940a8 '__int64_t'
|     `-BuiltinType 0x56113d452390 'long'
|-TypedefDecl 0x56113d780000 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56113d5a82b0 'uint64_t' sugar
|   |-Typedef 0x56113d4bb470 'uint64_t'
|   `-TypedefType 0x56113d494560 '__uint64_t' sugar
|     |-Typedef 0x56113d494118 '__uint64_t'
|     `-BuiltinType 0x56113d452430 'unsigned long'
|-TypedefDecl 0x56113d780090 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56113d780060 'String::intmax_t' sugar
|   |-Typedef 0x56113d77ff98 'intmax_t'
|   `-TypedefType 0x56113d5a8390 'int64_t' sugar
|     |-Typedef 0x56113d4bb2d0 'int64_t'
|     `-TypedefType 0x56113d4944d0 '__int64_t' sugar
|       |-Typedef 0x56113d4940a8 '__int64_t'
|       `-BuiltinType 0x56113d452390 'long'
|-TypedefDecl 0x56113d780120 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56113d7800f0 'String::uintmax_t' sugar
|   |-Typedef 0x56113d780000 'uintmax_t'
|   `-TypedefType 0x56113d5a82b0 'uint64_t' sugar
|     |-Typedef 0x56113d4bb470 'uint64_t'
|     `-TypedefType 0x56113d494560 '__uint64_t' sugar
|       |-Typedef 0x56113d494118 '__uint64_t'
|       `-BuiltinType 0x56113d452430 'unsigned long'
|-CXXConstructorDecl 0x56113d7801e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56113d780388 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56113d7802c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56113d780538 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56113d780478 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56113d780690 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56113d780600 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56113d7808a8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56113d780758 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56113d7807d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56113d780ac8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56113d780978 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56113d7809f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56113d780ce8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56113d780b98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56113d780c18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56113d780f08 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56113d780db8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56113d780e38 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56113d781098 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56113d780fd0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56113d781218 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56113d781158 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56113d7813a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56113d7812e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56113d781500 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56113d781470 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56113d781658 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56113d7815c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56113d7817b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56113d781720 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56113d781938 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56113d781878 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56113d781ac8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56113d781a00 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56113d781c58 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56113d781b90 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56113d781de8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56113d781d20 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56113d781ee0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56113d782008 <line:69:5, col:44> col:33 used make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56113d782188 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56113d7820c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56113d7822d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56113d782248 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56113d782390 <col:63> "" ""
|-CXXMethodDecl 0x56113d7824d8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56113d782418 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56113d7826e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56113d782598 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56113d782618 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56113d782908 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56113d7827b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56113d782830 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56113d782be8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56113d7829c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56113d782a48 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56113d78ea30 <col:55> 'int' 10
| `-ParmVarDecl 0x56113d782ac0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56113d78ea50 <col:76> 'bool' true
|-CXXMethodDecl 0x56113d782ec8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56113d782cb0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56113d782d30 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56113d78ea60 <col:56> 'int' 10
| `-ParmVarDecl 0x56113d782da8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56113d78ea80 <col:77> 'bool' true
|-CXXMethodDecl 0x56113d782fd0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56113d783098 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56113d783160 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56113d783200 <col:20>
| `-OptimizeNoneAttr 0x56113d783258 <col:30>
|-CXXConversionDecl 0x56113d783348 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56113d783418 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56113d7834d8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56113d7835c8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56113d783688 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56113d783808 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56113d783740 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56113d783958 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56113d7838c8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56113d783a48 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56113d783b08 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56113d783d58 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56113d783bc0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56113d783c40 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56113d783fb8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56113d783e20 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56113d783ea0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56113d784088 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d784298 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56113d784140 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56113d7841c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56113d7844b8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56113d784360 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56113d7843e0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56113d784648 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56113d784580 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56113d784738 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56113d7848a8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56113d7847e8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56113d784ab8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56113d784968 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56113d7849e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56113d784cd0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56113d784b78 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56113d784bf0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56113d784e60 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56113d784d90 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56113d785080 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56113d784f20 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56113d784fa0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56113d7851d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56113d785140 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56113d7853a8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56113d785290 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56113d785310 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56113d7854f8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56113d785468 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56113d785710 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56113d7855b0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56113d785630 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56113d78ea90 <col:39> 'int' 0
|-CXXMethodDecl 0x56113d785930 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56113d7857d0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56113d785850 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56113d78eab0 <col:48> 'int' 0
|-CXXMethodDecl 0x56113d785b10 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56113d7859f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56113d785a70 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56113d78ead0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56113d785be0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56113d785ca0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56113d785d60 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56113d785e20 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56113d785ee0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56113d786088 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56113d785f90 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56113d786208 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56113d786140 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56113d7863e0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56113d7862c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56113d786558 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56113d786498 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56113d7866a0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56113d786610 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56113d7867f0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56113d786760 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56113d7869c8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56113d7868b0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56113d786930 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56113d786ba8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56113d786a90 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56113d786b10 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56113d786cf8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56113d786c68 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56113d786f08 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56113d786db8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56113d786e38 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56113d787068 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56113d786fd0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56113d7871c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56113d787128 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56113d787268 <col:57> "" ""
|-CXXMethodDecl 0x56113d787378 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56113d7872e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56113d7874c8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56113d787438 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56113d787648 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56113d787580 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56113d787710 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56113d7877d0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56113d787890 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56113d787930 <col:49> "" ""
|-CXXMethodDecl 0x56113d7879c0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56113d787a80 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56113d787b70 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56113d787c38 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56113d787cf8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56113d787db8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56113d787eb0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56113d787f78 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56113d788040 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56113d788218 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56113d7880f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56113d788178 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56113d788440 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56113d7882e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56113d788360 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56113d788550 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56113d7885b8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56113d7885e0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56113d7886f8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56113d788798 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56113d7887f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56113d788858 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56113d788908 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56113d788970 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56113d788ba8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56113d788bf8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d788b88 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56113d788a98 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56113d788a40 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56113d788a80 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56113d788a60 <col:32> 'int' 8
|-CXXRecordDecl 0x56113d788c10 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56113d788d28 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56113d788dd0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56113d788e38 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56113d788ec8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56113d78ef60 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56113d78f398 <col:12>
| |-CXXConstructorDecl 0x56113d78f068 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d78f178 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56113d788dd0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56113d791920 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56113d7918f0 <col:12> 'const char *const' lvalue .data 0x56113d788dd0
| | |     `-DeclRefExpr 0x56113d7918d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56113d788e38 'length' 'int'
| | | `-ImplicitCastExpr 0x56113d7919b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56113d791980 <col:12> 'const int' lvalue .length 0x56113d788e38
| | |     `-DeclRefExpr 0x56113d791960 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56113d788ec8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56113d791a40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56113d791a10 <col:12> 'String::memo_t *const' lvalue .memo 0x56113d788ec8
| | |     `-DeclRefExpr 0x56113d7919f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d78f178 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56113d791a98 <col:12>
| |-CXXConstructorDecl 0x56113d78f218 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56113d78f218
| | `-ParmVarDecl 0x56113d78f328 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56113d794880 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56113d7a0298 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d7a03a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56113d7a08c0 <col:12>
| |   |-BinaryOperator 0x56113d7a06d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56113d7a0690 <col:12> 'const char *' lvalue ->data 0x56113d788dd0
| |   | | `-CXXThisExpr 0x56113d7a0680 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56113d7a06c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56113d7a0650 <col:12> 'const char *const' lvalue .data 0x56113d788dd0
| |   |     `-DeclRefExpr 0x56113d7a0630 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56113d7a07a0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56113d7a0758 <col:12> 'int' lvalue ->length 0x56113d788e38
| |   | | `-CXXThisExpr 0x56113d7a0748 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56113d7a0788 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56113d7a0718 <col:12> 'const int' lvalue .length 0x56113d788e38
| |   |     `-DeclRefExpr 0x56113d7a06f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56113d7a0868 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56113d7a0820 <col:12> 'String::memo_t *' lvalue ->memo 0x56113d788ec8
| |   | | `-CXXThisExpr 0x56113d7a0810 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56113d7a0850 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56113d7a07e0 <col:12> 'String::memo_t *const' lvalue .memo 0x56113d788ec8
| |   |     `-DeclRefExpr 0x56113d7a07c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56113d7a03a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56113d7a08b0 <col:12>
| |     `-UnaryOperator 0x56113d7a0898 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56113d7a0888 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56113d7a0418 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56113d7a0418
|   `-ParmVarDecl 0x56113d7a0528 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56113d788f40 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56113d789188 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56113d788fa8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56113d789028 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56113d7890a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56113d78ef20 <col:79, line:261:5>
|   |-BinaryOperator 0x56113d78eb98 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56113d78eb30 <col:2, col:5> 'const char *' lvalue .data 0x56113d788dd0
|   | | `-MemberExpr 0x56113d78eb00 <col:2> 'String::rep_t' lvalue ->_r 0x56113d788f40
|   | |   `-CXXThisExpr 0x56113d78eaf0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56113d78eb80 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56113d78eb60 <col:12> 'const char *' lvalue ParmVar 0x56113d788fa8 'data' 'const char *'
|   |-BinaryOperator 0x56113d78ec60 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56113d78ebf8 <col:2, col:5> 'int' lvalue .length 0x56113d788e38
|   | | `-MemberExpr 0x56113d78ebc8 <col:2> 'String::rep_t' lvalue ->_r 0x56113d788f40
|   | |   `-CXXThisExpr 0x56113d78ebb8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56113d78ec48 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56113d78ec28 <col:14> 'int' lvalue ParmVar 0x56113d789028 'length' 'int'
|   `-IfStmt 0x56113d78ef08 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56113d78ed80 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56113d78ed68 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56113d78ed48 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56113d78ed28 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56113d78ecc0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|     |       | `-MemberExpr 0x56113d78ec90 <col:7> 'String::rep_t' lvalue ->_r 0x56113d788f40
|     |       |   `-CXXThisExpr 0x56113d78ec80 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56113d78ed10 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56113d78ecf0 <col:17> 'String::memo_t *' lvalue ParmVar 0x56113d7890a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x56113d78eee0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56113d78eec8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56113d78edd0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56113d777bb8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56113d78ee38 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56113d788798
|         `-ImplicitCastExpr 0x56113d78ee20 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56113d78ee00 <col:27> 'String::memo_t *' lvalue ParmVar 0x56113d7890a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56113d789438 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56113d789258 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56113d7892d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56113d789350 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56113d788f40 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56113d78f3a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56113d78f538 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56113d78f4a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56113d78f410 <col:2> '<bound member function type>' ->assign_memo 0x56113d789188
|     | `-ImplicitCastExpr 0x56113d78f4d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56113d78f400 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56113d78f4f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56113d78f440 <col:14> 'const char *' lvalue ParmVar 0x56113d789258 'data' 'const char *'
|     |-ImplicitCastExpr 0x56113d78f508 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56113d78f460 <col:20> 'int' lvalue ParmVar 0x56113d7892d8 'length' 'int'
|     `-ImplicitCastExpr 0x56113d78f520 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56113d78f480 <col:28> 'String::memo_t *' lvalue ParmVar 0x56113d789350 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56113d7895c8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56113d789508 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56113d78f790 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56113d78f710 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56113d78f560 <col:2> '<bound member function type>' ->assign_memo 0x56113d789188
|     | `-CXXThisExpr 0x56113d78f550 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56113d78f748 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56113d78f5e0 <col:14, col:19> 'const char *' lvalue .data 0x56113d788dd0
|     |   `-MemberExpr 0x56113d78f5b0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56113d788f40
|     |     `-DeclRefExpr 0x56113d78f590 <col:14> 'const String' lvalue ParmVar 0x56113d789508 'x' 'const String &'
|     |-ImplicitCastExpr 0x56113d78f760 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56113d78f660 <col:25, col:30> 'int' lvalue .length 0x56113d788e38
|     |   `-MemberExpr 0x56113d78f630 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56113d788f40
|     |     `-DeclRefExpr 0x56113d78f610 <col:25> 'const String' lvalue ParmVar 0x56113d789508 'x' 'const String &'
|     `-ImplicitCastExpr 0x56113d78f778 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56113d78f6e0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|         `-MemberExpr 0x56113d78f6b0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56113d788f40
|           `-DeclRefExpr 0x56113d78f690 <col:38> 'const String' lvalue ParmVar 0x56113d789508 'x' 'const String &'
|-CXXMethodDecl 0x56113d789690 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56113d790150 <col:31, line:278:5>
|   `-IfStmt 0x56113d790138 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56113d78f830 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56113d78f818 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56113d78f7e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|     |     `-MemberExpr 0x56113d78f7b8 <col:6> 'String::rep_t' lvalue ->_r 0x56113d788f40
|     |       `-CXXThisExpr 0x56113d78f7a8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56113d790110 <col:15, line:277:2>
|       |-ParenExpr 0x56113d78fce0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56113d78fcb0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56113d78f940 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56113d78f928 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56113d78f910 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56113d78f8d0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56113d788798
|       |   |       `-ImplicitCastExpr 0x56113d78f8b8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56113d78f888 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|       |   |           `-MemberExpr 0x56113d78f858 <col:27> 'String::rep_t' lvalue ->_r 0x56113d788f40
|       |   |             `-CXXThisExpr 0x56113d78f848 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56113d78f9a0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56113d78f980 <col:54> 'int' 0
|       |   `-CallExpr 0x56113d78fc10 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56113d78fbf8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56113d78fb78 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56113d78fc50 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56113d78fa88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56113d78fc68 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56113d78fab8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56113d78fc80 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56113d78faf0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56113d78fc98 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56113d78fb60 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56113d78fb48 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56113d78fb10 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56113d790030 <line:274:6, line:275:22>
|       | |-CallExpr 0x56113d78fef0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56113d78fed8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56113d78fe50 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56113d779000 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56113d78fe20 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56113d788798
|       | |   `-ImplicitCastExpr 0x56113d78fe08 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56113d78fdd8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|       | |       `-MemberExpr 0x56113d78fda8 <col:40> 'String::rep_t' lvalue ->_r 0x56113d788f40
|       | |         `-CXXThisExpr 0x56113d78fd98 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56113d78fff0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56113d78ffd8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56113d78ff18 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56113d78de70 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56113d790018 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56113d78ff78 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|       |       `-MemberExpr 0x56113d78ff48 <col:15> 'String::rep_t' lvalue ->_r 0x56113d788f40
|       |         `-CXXThisExpr 0x56113d78ff38 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56113d7900f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56113d790088 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56113d788ec8
|         | `-MemberExpr 0x56113d790058 <col:6> 'String::rep_t' lvalue ->_r 0x56113d788f40
|         |   `-CXXThisExpr 0x56113d790048 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56113d7900d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56113d7900b8 <col:16> 'int' 0
|-CXXMethodDecl 0x56113d789928 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56113d789748 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56113d7897c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56113d789840 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56113d789a00 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56113d789c50 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56113d789ab8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56113d789b38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56113d789bb0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56113d789e38 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56113d789d20 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56113d789da0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56113d789f38 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56113d790228 <col:41, line:286:5>
|   `-ReturnStmt 0x56113d790218 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56113d7901e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56113d7901b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56113d790198 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56113d790178 <col:46> 'int' 1
|-CXXMethodDecl 0x56113d78a1d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56113d789ff0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56113d78a070 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56113d78a0f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56113d78de70 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56113d78a2a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56113d78df40 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56113d78e110 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56113d78dff8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56113d78e078 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56113d78e1d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56113d78e298 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56113d78e398 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56113d78e410 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56113d78e488 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56113d78e4f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56113d78e5f0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56113d78e640 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d78e5d0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56113d78e5b0 <col:22> 'int' 14
|-CXXMethodDecl 0x56113d78e858 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56113d78e670 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56113d78e6f0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56113d78e770 <col:43> col:46 'int'
|-FriendDecl 0x56113d78e960 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56113d78e9f0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113da2f430 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56113da2f608 prev 0x56113da2f430 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56113da2f698 <col:46, col:52> col:46 public
|-TypedefDecl 0x56113da2f6c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da31020 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56113da30fd0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56113da30fb0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56113da2f8d8 'type'
|     `-SubstTemplateTypeParmType 0x56113da2f8a0 'String' sugar
|       |-TemplateTypeParmType 0x56113d7433f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7433a0 'T'
|       `-RecordType 0x56113d77fbe0 'String'
|         `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da310d8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56113da310a0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56113da31080 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56113da31020 'type'
|     `-ElaboratedType 0x56113da30fd0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56113da30fb0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56113da2f8d8 'type'
|         `-SubstTemplateTypeParmType 0x56113da2f8a0 'String' sugar
|           |-TemplateTypeParmType 0x56113d7433f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56113d7433a0 'T'
|           `-RecordType 0x56113d77fbe0 'String'
|             `-CXXRecord 0x56113d77fb50 'String'
|-CXXMethodDecl 0x56113da31258 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56113da31168 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56113da31348 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56113da31428 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56113da316f8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56113da31600 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56113da31968 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56113da317e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da31858 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da31b38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56113da31a28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da31aa0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da31c98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56113da31d68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56113da31fb8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56113da31e28 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56113da31ea0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da32218 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56113da32088 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56113da32100 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da323d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56113da322e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da32598 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56113da324a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da32650 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56113da32700 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56113da32938 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56113da327b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da32828 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56113da32bd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56113da32ae0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56113da32ca0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56113da32cf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56113da32d40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113d9b7380 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56113da2de98 prev 0x56113d9b7380 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56113da2f3a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56113da2f350 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56113da2f330 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56113da2f1e0 'type'
|     `-SubstTemplateTypeParmType 0x56113da2f070 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56113d7191a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56113d719148 'F'
|       `-RecordType 0x56113da2ecd0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56113da2ebf0 'typed_array_memory'
|-FieldDecl 0x56113da32d90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56113da32de0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56113da32e18 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|   |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56113d7506b8 'T'
|   `-RecordType 0x56113d77fbe0 'String'
|     `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da32ea8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56113da32e70 'String &'
|   `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-RecordType 0x56113d77fbe0 'String'
|       `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da32f38 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56113da32f00 'const String &'
|   `-QualType 0x56113da2df31 'const String' const
|     `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-RecordType 0x56113d77fbe0 'String'
|         `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da32fc8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56113da32f90 'String *'
|   `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-RecordType 0x56113d77fbe0 'String'
|       `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da33058 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56113da33020 'const String *'
|   `-QualType 0x56113da2df31 'const String' const
|     `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-RecordType 0x56113d77fbe0 'String'
|         `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da33cb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56113da33c60 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56113da33c40 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56113da33b78 'type'
|     `-LValueReferenceType 0x56113da33b40 'const String &'
|       `-QualType 0x56113da338e1 'const String' const
|         `-SubstTemplateTypeParmType 0x56113da338e0 'String' sugar
|           |-TemplateTypeParmType 0x56113d7230f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56113d723098 'T'
|           `-RecordType 0x56113d77fbe0 'String'
|             `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da33d18 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56113da32f00 'const String &'
|   `-QualType 0x56113da2df31 'const String' const
|     `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-RecordType 0x56113d77fbe0 'String'
|         `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da33d70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da33dd8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56113da32f90 'String *'
|   `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-RecordType 0x56113d77fbe0 'String'
|       `-CXXRecord 0x56113d77fb50 'String'
|-TypedefDecl 0x56113da33e40 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56113da33020 'const String *'
|   `-QualType 0x56113da2df31 'const String' const
|     `-SubstTemplateTypeParmType 0x56113da2df30 'String' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-RecordType 0x56113d77fbe0 'String'
|         `-CXXRecord 0x56113d77fb50 'String'
|-EnumDecl 0x56113da33e98 <line:134:5> col:5
| `-EnumConstantDecl 0x56113da33f90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56113da33f70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56113d751d98 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56113d751d70 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56113d751d50 <col:40> 'int' 1
|-CXXConstructorDecl 0x56113da34018 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x56113da342a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da340d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da34170 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56113da34538 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56113da34420 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56113da347f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56113da346e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56113da34b10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56113da349f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56113da34e20 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56113da34d00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56113da35110 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da34f58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da34fd0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56113da35238 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56113da352e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da35340 <col:30> Inherited
|-CXXMethodDecl 0x56113da35388 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56113da35438 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da35490 <col:30> Inherited
|-CXXMethodDecl 0x56113da35558 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56113da35608 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da35660 <col:30> Inherited
|-CXXMethodDecl 0x56113da356a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56113da35758 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da357b0 <col:30> Inherited
|-CXXMethodDecl 0x56113da357f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56113da358a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da35900 <col:30> Inherited
|-CXXMethodDecl 0x56113da35948 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56113da359f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da35a50 <col:30> Inherited
|-CXXMethodDecl 0x56113da35a78 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56113da35b28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56113da35bd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56113da35d98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da35c88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da35d00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56113da35ee8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56113da35e58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da36098 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56113da35fa0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56113da36150 <col:20>
| `-OptimizeNoneAttr 0x56113da361a8 <col:30>
|-CXXMethodDecl 0x56113da362c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56113da361d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56113da36380 <col:20>
| `-OptimizeNoneAttr 0x56113da363d8 <col:30>
|-CXXMethodDecl 0x56113da36490 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56113da36400 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da365d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56113da36548 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da36708 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56113da36808 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56113da368d8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56113da369a8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56113da36ae8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56113da36a58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da36c30 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56113da36ba0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da36d78 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56113da36ce8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56113da36e30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56113da36f30 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56113da36ea0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56113da36fe8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56113da370a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56113da371a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56113da37328 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56113da37268 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56113da37ae8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56113da373e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| |-CXXMethodDecl 0x56113da37a48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
| | `-ParmVarDecl 0x56113da37948 <col:58, col:62> col:62 v 'String &&'
| `-CXXMethodDecl 0x56113dac1e48 <col:5, col:63> col:48 used push_back 'typename fast_argument<String, true>::enable_rvalue_reference (String &&)' inline
|   |-TemplateArgument type 'fast_argument<String, true>'
|   `-ParmVarDecl 0x56113dac1d70 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56113da37bc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56113da37d18 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56113da37c88 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56113da37dd0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56113da38018 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da37e90 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56113da37f08 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56113da381a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56113da380e8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56113da383b8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56113da38270 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56113da382e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56113da38478 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56113da386d8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56113da385e0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56113da387a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x56113dac1bb0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113daae768 prev 0x56113da43398 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56113daae860 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56113daae8f0 <col:22, col:28> col:22 public
|-EnumDecl 0x56113daae918 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56113daaea38 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaea18 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56113daaea00 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56113daae9e0 <col:14> 'int' 999
| |-EnumConstantDecl 0x56113daaeae0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaeac0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56113daaeaa8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56113daaea88 <col:14> 'int' 1
| |-EnumConstantDecl 0x56113daaeb70 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaeb50 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56113daaeb30 <col:17> 'int' 0
| |-EnumConstantDecl 0x56113daaec00 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaebe0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56113daaebc0 <col:13> 'int' 1
| |-EnumConstantDecl 0x56113daaec90 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaec70 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56113daaec50 <col:16> 'int' 2
| |-EnumConstantDecl 0x56113daaed20 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaed00 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56113daaece0 <col:13> 'int' 3
| |-EnumConstantDecl 0x56113daaedb0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaed90 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56113daaed70 <col:15> 'int' 4
| |-EnumConstantDecl 0x56113daaee40 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaee20 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56113daaee00 <col:14> 'int' 5
| |-EnumConstantDecl 0x56113daaeed0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56113daaeeb0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56113daaee90 <col:12> 'int' 6
| `-EnumConstantDecl 0x56113daaef60 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56113daaef40 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56113daaef20 <col:13> 'int' 7
|-VarDecl 0x56113daaefd0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56113daaf058 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56113daaf0e0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56113daaf168 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56113daaf1f0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56113daaf278 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56113daaf300 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56113daaf388 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56113daaf410 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56113daaf498 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56113daaf520 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56113daaf620 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56113dab4918 '_nerrors' 'int'
| | `-IntegerLiteral 0x56113dab50a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x56113dab5118 <col:16, line:129:5>
|-CXXDestructorDecl 0x56113daaf710 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56113dab5128 <col:29, line:132:5>
|-CXXMethodDecl 0x56113daaf8c8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56113daaf800 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113daaf990 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56113daafa78 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56113dab5180 <col:44, line:161:5>
|   `-ReturnStmt 0x56113dab5170 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56113dab5158 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56113dab5138 <col:9> 'ErrorHandler *' lvalue Var 0x56113dab4978 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56113daafbb8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56113daafb28 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56113daafc80 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56113dab51e0 <col:43, line:173:5>
|   `-ReturnStmt 0x56113dab51d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56113dab51b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56113dab5198 <col:9> 'ErrorHandler *' lvalue Var 0x56113dab49f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56113daafd38 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56113daafdb8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56113daafec8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56113daafe38 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0018 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56113daaff88 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0170 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56113dab00d8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56113dab02c8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56113dab0230 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0420 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56113dab0388 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0630 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56113dab04d8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56113dab0558 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0808 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56113dab06f0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56113dab0770 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0a28 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56113dab08c8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56113dab0948 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0c08 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56113dab0ae8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56113dab0b68 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0de8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56113dab0cc8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56113dab0d48 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56113dab0f70 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56113dab0ea8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56113dab1140 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56113dab1028 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56113dab10a0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56113dab5438 <col:57, line:234:5>
|   `-ReturnStmt 0x56113dab5428 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56113dab5410 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56113dab53b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x56113dab5388 <col:9> '<bound member function type>' ->xmessage 0x56113dab0f70
|         | `-CXXThisExpr 0x56113dab5378 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56113dab53f8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56113dab53e0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56113dab5358 <col:18, col:40> 'String' (CXXTemporary 0x56113dab5358)
|               `-CallExpr 0x56113dab5320 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56113dab5308 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56113dab5280 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56113dab3138 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56113dab52a0 <col:31> 'const String' lvalue ParmVar 0x56113dab10a0 'str' 'const String &'
|                 `-DeclRefExpr 0x56113dab52c0 <col:36> 'const String' lvalue ParmVar 0x56113dab1028 'anno' 'const String &'
|-CXXMethodDecl 0x56113dab1420 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56113dab1200 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56113dab1280 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56113dab12f8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56113dab56c8 <col:68, line:243:5>
|   `-ReturnStmt 0x56113dab56b8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56113dab56a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56113dab5640 <col:9, col:41> 'int'
|         |-MemberExpr 0x56113dab5610 <col:9> '<bound member function type>' ->xmessage 0x56113dab1140
|         | `-CXXThisExpr 0x56113dab5600 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56113dab54d8 <col:18> 'const String' lvalue ParmVar 0x56113dab1200 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56113dab5688 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56113dab5670 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56113dab55e0 <col:24, col:40> 'String' (CXXTemporary 0x56113dab55e0)
|               `-CXXMemberCallExpr 0x56113dab5578 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56113dab5508 <col:24> '<bound member function type>' ->vformat 0x56113dab2600
|                 | `-CXXThisExpr 0x56113dab54f8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56113dab55a8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56113dab5538 <col:32> 'const char *' lvalue ParmVar 0x56113dab1280 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56113dab55c0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56113dab5558 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56113dab12f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56113dab16c0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56113dab14e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56113dab1560 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56113dab15d8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56113dab5a08 <col:23, line:254:5>
|   `-ReturnStmt 0x56113dab59f8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56113dab59e0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56113dab5980 <col:9, col:71> 'int'
|         |-MemberExpr 0x56113dab5950 <col:9> '<bound member function type>' ->xmessage 0x56113dab1140
|         | `-CXXThisExpr 0x56113dab5940 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56113dab59c8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56113dab59b0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56113dab5900 <col:18, col:65> 'String' (CXXTemporary 0x56113dab5900)
|         |     `-CallExpr 0x56113dab5898 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56113dab5880 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56113dab5768 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56113dab3138 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56113dab5788 <col:31> 'const String' lvalue ParmVar 0x56113dab1560 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56113dab58e0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56113dab58c8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56113dab5860 <col:37, col:64> 'String' (CXXTemporary 0x56113dab5860)
|         |             `-CallExpr 0x56113dab5830 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56113dab5818 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56113dab57a8 <col:37> 'String (const String &)' lvalue CXXMethod 0x56113dab3788 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56113dab57c8 <col:56> 'const String' lvalue ParmVar 0x56113dab14e8 'landmark' 'const String &'
|         `-DeclRefExpr 0x56113dab5920 <col:68> 'const String' lvalue ParmVar 0x56113dab15d8 'str' 'const String &'
|-CXXMethodDecl 0x56113dab1a40 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56113dab1788 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56113dab1800 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56113dab1880 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56113dab18f8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56113dab5cc0 <col:34, line:267:5>
|   `-ReturnStmt 0x56113dab5cb0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56113dab5c98 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56113dab5c30 <col:9, col:51> 'int'
|         |-MemberExpr 0x56113dab5c00 <col:9> '<bound member function type>' ->xmessage 0x56113dab16c0
|         | `-CXXThisExpr 0x56113dab5bf0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56113dab5aa8 <col:18> 'const String' lvalue ParmVar 0x56113dab1788 'landmark' 'const String &'
|         |-DeclRefExpr 0x56113dab5ac8 <col:28> 'const String' lvalue ParmVar 0x56113dab1800 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56113dab5c80 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56113dab5c68 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56113dab5bd0 <col:34, col:50> 'String' (CXXTemporary 0x56113dab5bd0)
|               `-CXXMemberCallExpr 0x56113dab5b68 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56113dab5af8 <col:34> '<bound member function type>' ->vformat 0x56113dab2600
|                 | `-CXXThisExpr 0x56113dab5ae8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56113dab5b98 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56113dab5b28 <col:42> 'const char *' lvalue ParmVar 0x56113dab1880 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56113dab5bb0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56113dab5b48 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56113dab18f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56113dab1b50 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56113dab5d40 <col:25, line:288:5>
|   `-ReturnStmt 0x56113dab5d30 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56113dab5d18 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56113dab5ce8 <col:9> 'const int' lvalue ->_nerrors 0x56113dab4918
|         `-CXXThisExpr 0x56113dab5cd8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56113dab1d60 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56113dab1c08 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56113dab1c88 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56113dab2048 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56113dab1e28 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56113dab1ea8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56113dab1f20 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56113dab21e0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56113dab2118 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56113dab2428 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56113dab22a0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56113dab2318 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56113dab5fa0 <col:58, line:357:5>
|   `-ReturnStmt 0x56113dab5f90 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56113dab5f78 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56113dab5f48 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56113dab5f30 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56113dab5f10 <col:9, col:29> 'String' (CXXTemporary 0x56113dab5f10)
|             `-CallExpr 0x56113dab5ea0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56113dab5e88 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56113dab5e08 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56113dab2048 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56113dab5da8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56113dab5ed8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56113dab5dc8 <col:21> 'const char *' lvalue ParmVar 0x56113dab22a0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56113dab5ef0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56113dab5de8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56113dab2318 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56113dab2600 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56113dab24f0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56113dab2568 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56113dab2758 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56113dab26c8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56113dab28a0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56113dab2810 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56113dab2b40 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56113dab2958 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56113dab29d8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56113dab2a50 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56113dab2ca0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56113dab2c10 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56113dab60b8 <col:37, line:441:5>
|   `-IfStmt 0x56113dab60a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56113dab6028 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56113dab5ff8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56113dab5fb8 <col:6> 'int' lvalue ParmVar 0x56113dab2c10 'level' 'int'
|     | `-ImplicitCastExpr 0x56113dab6010 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56113dab5fd8 <col:15> 'ErrorHandler::Level' EnumConstant 0x56113daaed20 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56113dab6088 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56113dab6058 <col:8> 'int' lvalue ->_nerrors 0x56113dab4918
|         `-CXXThisExpr 0x56113dab6048 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56113dab2d68 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56113dab6150 <col:26, line:448:5>
|   `-BinaryOperator 0x56113dab6130 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56113dab60e0 <col:2> 'int' lvalue ->_nerrors 0x56113dab4918
|     | `-CXXThisExpr 0x56113dab60d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56113dab6110 <col:13> 'int' 0
|-CXXMethodDecl 0x56113dab2f30 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56113dab2e20 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56113dab2e98 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56113dab3138 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56113dab2ff0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56113dab3068 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56113dab33e8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56113dab31f8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56113dab3278 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56113dab32f8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56113dab34a0 <col:59> 0 0
|-CXXMethodDecl 0x56113dab3638 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56113dab3518 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56113dab3598 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56113dab67c0 <col:70, line:534:5>
|   |-DeclStmt 0x56113dab62c0 <line:528:2, col:20>
|   | |-VarDecl 0x56113dab6178 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56113dab61e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56113dab6218 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56113dab6280 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56113dab6390 <line:529:2, col:23>
|   | `-VarDecl 0x56113dab62f0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56113dab6378 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56113dab6358 <col:18> 'const char *' lvalue ParmVar 0x56113dab3518 'begin' 'const char *'
|   |-DoStmt 0x56113dab6758 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56113dab6688 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56113dab6670 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56113dab6650 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56113dab63a8 <col:6> 'const char *' lvalue Var 0x56113dab62f0 'x' 'const char *'
|   | |     `-CallExpr 0x56113dab65a0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56113dab6588 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56113dab6540 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56113dab4df0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56113dab6608 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56113dab65f0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56113dab6460 <col:20, col:27> 'String' (CXXTemporary 0x56113dab6460)
|   | |       |     `-CXXTemporaryObjectExpr 0x56113dab6428 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56113dab6620 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56113dab6480 <col:30> 'const char *' lvalue Var 0x56113dab62f0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56113dab6638 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56113dab64a0 <col:33> 'const char *' lvalue ParmVar 0x56113dab3598 'end' 'const char *'
|   | |       |-UnaryOperator 0x56113dab64e0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56113dab64c0 <col:39> 'String' lvalue Var 0x56113dab6178 'name' 'String'
|   | |       |-UnaryOperator 0x56113dab6518 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56113dab64f8 <col:46> 'String' lvalue Var 0x56113dab6218 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56113dab6530 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56113dab6740 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56113dab6728 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56113dab6708 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56113dab66d8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|   |         `-ImplicitCastExpr 0x56113dab66c0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56113dab66a0 <col:11> 'String' lvalue Var 0x56113dab6178 'name' 'String'
|   `-ReturnStmt 0x56113dab67b0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56113dab6798 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56113dab6778 <col:9> 'const char *' lvalue Var 0x56113dab62f0 'x' 'const char *'
|-CXXMethodDecl 0x56113dab3788 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56113dab36f8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56113dab6dc8 <col:55, line:550:5>
|   `-IfStmt 0x56113dab6da0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56113dab6a00 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56113dab69e8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56113dab69d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56113dab69b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56113dab6980 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|     | |       `-DeclRefExpr 0x56113dab6820 <col:6> 'const String' lvalue ParmVar 0x56113dab36f8 'x' 'const String &'
|     | `-BinaryOperator 0x56113dab6960 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56113dab6930 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56113dab68e0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56113dab68c8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56113dab6880 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56113d79cb80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56113dab6840 <col:11> 'const String' lvalue ParmVar 0x56113dab36f8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56113dab6860 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56113dab6948 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56113dab6918 <col:19> 'char' 123
|     |-ReturnStmt 0x56113dab6a70 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56113dab6a40 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56113dab6a20 <col:13> 'const String' lvalue ParmVar 0x56113dab36f8 'x' 'const String &'
|     `-IfStmt 0x56113dab6d78 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56113dab6b08 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56113dab6af0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56113dab6ad0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56113dab6aa0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |       `-DeclRefExpr 0x56113dab6a80 <col:11> 'const String' lvalue ParmVar 0x56113dab36f8 'x' 'const String &'
|       |-ReturnStmt 0x56113dab6c90 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56113dab6c78 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56113dab6c48 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56113dab6c30 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56113dab6c10 <col:13, col:29> 'String' (CXXTemporary 0x56113dab6c10)
|       |         `-CallExpr 0x56113dab6bc0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56113dab6ba8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56113dab6b20 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56113dab2f30 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56113dab6bf0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56113dab6b40 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56113dab6b60 <col:28> 'const String' lvalue ParmVar 0x56113dab36f8 'x' 'const String &'
|       `-ReturnStmt 0x56113dab6d68 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56113dab6d50 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56113dab6d20 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56113dab6d08 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56113dab6ce8 <col:13, col:20> 'String' (CXXTemporary 0x56113dab6ce8)
|                 `-CXXTemporaryObjectExpr 0x56113dab6cb0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56113dab3950 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56113dab3840 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56113dab38b8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56113dab5098 <col:71> 'bool' false
|-CXXRecordDecl 0x56113dab3a00 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56113dab3d08 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56113dab3ca0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56113dab3c40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56113dab3c00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56113d77fbe0 'String'
|       | `-CXXRecord 0x56113d77fb50 'String'
|       |-BuiltinType 0x56113d452370 'int'
|       `-DecayedType 0x56113da443e0 '__va_list_tag *' sugar
|         |-TypedefType 0x56113da443b0 'va_list' sugar
|         | |-Typedef 0x56113d670c90 'va_list'
|         | `-TypedefType 0x56113d670c40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56113d5a8648 '__gnuc_va_list'
|         |   `-TypedefType 0x56113d5a85b0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56113d493bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56113d493b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56113d4530c0 '__va_list_tag'
|         |         `-CXXRecord 0x56113d453028 '__va_list_tag'
|         `-PointerType 0x56113d676530 '__va_list_tag *'
|           `-RecordType 0x56113d4530c0 '__va_list_tag'
|             `-CXXRecord 0x56113d453028 '__va_list_tag'
|-EnumDecl 0x56113dab3d60 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56113dab3e60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab43c0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab3e40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56113dab3e20 <col:16> 'int' 1
| |-EnumConstantDecl 0x56113dab3ef0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab43d8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab3ed0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56113dab3eb0 <col:21> 'int' 2
| |-EnumConstantDecl 0x56113dab3f80 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab43f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab3f60 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56113dab3f40 <col:22> 'int' 4
| |-EnumConstantDecl 0x56113dab4010 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4408 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab3ff0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56113dab3fd0 <col:17> 'int' 8
| |-EnumConstantDecl 0x56113dab40a0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4420 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab4080 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56113dab4060 <col:22> 'int' 16
| |-EnumConstantDecl 0x56113dab4130 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4438 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab4110 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56113dab40f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56113dab41c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4450 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab41a0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56113dab4180 <col:17> 'int' 64
| |-EnumConstantDecl 0x56113dab4250 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4468 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab4230 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56113dab4210 <col:14> 'int' 128
| |-EnumConstantDecl 0x56113dab42e0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56113dab4480 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113dab42c0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56113dab42a0 <col:16> 'int' 256
| `-EnumConstantDecl 0x56113dab4370 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56113dab4498 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113dab4350 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56113dab4330 <col:12> 'int' 1024
|-CXXMethodDecl 0x56113dab46a8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56113dab44c0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56113dab4560 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56113dab4830 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56113dab4768 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56113dab48d8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56113dab4918 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56113dab4978 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56113dab49f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56113dab4df0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56113dab4a68 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56113dab4ae8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56113dab4b68 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56113dab4be0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56113dab4c58 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56113dab4cd0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56113dab4f18 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56113dab4f18
| `-ParmVarDecl 0x56113dab5028 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56113dab7128 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56113dab7128
  `-ParmVarDecl 0x56113dab7238 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113da43428 prev 0x56113d9d8ec8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113da43520 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56113da435b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56113da436e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56113da435e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56113da44b10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56113da44af0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56113da44688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56113da44ba0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56113da44b60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56113da435e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56113da446f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56113da44c20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56113da44be0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56113da44750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56113da44c60 <col:54> 'bool' false
| `-CompoundStmt 0x56113da44d68 <col:61, line:38:5>
|   `-BinaryOperator 0x56113da44d48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56113da44ce0 <col:9> 'const Element *' lvalue ->_context 0x56113da44628
|     | `-CXXThisExpr 0x56113da44cd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56113da44d30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56113da44d10 <col:20> 'int' 0
|-CXXConstructorDecl 0x56113da438f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56113da437a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56113da43820 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56113da44b48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56113da44b28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56113da44628 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56113da44dc0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56113da44d80 <col:20> 'const Element *' lvalue ParmVar 0x56113da437a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56113da44688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56113da44e40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56113da44e00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56113da43820 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56113da446f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56113da44ec0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56113da44e80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56113da44750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56113da44f00 <col:73> 'bool' false
| `-CompoundStmt 0x56113da44f78 <col:80, line:46:5>
|-CXXMethodDecl 0x56113da43a28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56113da44ff0 <col:36, line:51:5>
|   `-ReturnStmt 0x56113da44fe0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56113da44fc8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56113da44f98 <col:16> 'const Element *const' lvalue ->_context 0x56113da44628
|         `-CXXThisExpr 0x56113da44f88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56113da43b18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56113da45070 <col:32, line:57:5>
|   `-ReturnStmt 0x56113da45060 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56113da45048 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56113da45018 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56113da44688
|         `-CXXThisExpr 0x56113da45008 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56113da43bd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56113da43d60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56113da43c90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56113da43eb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56113da43e20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56113da44000 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56113da43f70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56113da44208 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56113da440b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56113da44130 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56113da44538 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56113da442c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56113da44348 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56113da44410 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56113da445f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56113da44628 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56113da44688 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56113da446f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56113da44750 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56113da447a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56113da447a0
| `-ParmVarDecl 0x56113da448b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56113da44958 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56113da44958
| `-ParmVarDecl 0x56113da44a68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56113dac2150 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113da6b5e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56113da6b7b8 prev 0x56113da6b5e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56113da6b848 <col:46, col:52> col:46 public
|-TypedefDecl 0x56113da6b870 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da6d440 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56113da6d3f0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56113da6bd20 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56113da6bc20 'type'
|     `-TemplateSpecializationType 0x56113da6bbb0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56113da6ba90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56113da6ba70 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56113da6ba50 <col:24> 'unsigned long' 4
|       `-RecordType 0x56113da6bb90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56113da6bab0 'char_array'
|-TypedefDecl 0x56113da6d4f8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56113da6d4c0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56113da6d4a0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56113da6d440 'type'
|     `-ElaboratedType 0x56113da6d3f0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56113da6bd20 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56113da6bc20 'type'
|         `-TemplateSpecializationType 0x56113da6bbb0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56113da6ba90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56113da6ba70 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56113da6ba50 <col:24> 'unsigned long' 4
|           `-RecordType 0x56113da6bb90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56113da6bab0 'char_array'
|-CXXMethodDecl 0x56113da6d678 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56113da6d588 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56113da6d768 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56113da6d848 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56113da6db18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56113da6da20 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56113da6dd58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56113da6dbd0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da6dc48 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da6df28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56113da6de18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da6de90 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da6e088 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56113da6e158 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56113da6e3a8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56113da6e218 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56113da6e290 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da6e608 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56113da6e478 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56113da6e4f0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da76448 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56113da76350 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da76608 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56113da76510 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da766c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56113da76770 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56113da769a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56113da76820 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56113da76898 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56113da76c48 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56113da76b50 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56113da76d10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56113da76d60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56113da76db0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113da69fe8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56113da6a1f8 prev 0x56113da69fe8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56113da6b550 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56113da6b500 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56113da6b4e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56113da6b390 'type'
|     `-SubstTemplateTypeParmType 0x56113da6b1b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56113d718a20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7189c8 'T'
|       `-RecordType 0x56113da6ad00 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56113da6ac18 'sized_array_memory'
|-FieldDecl 0x56113da76e00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56113da76e50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56113da76e88 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|   |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56113d7506b8 'T'
|   `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da76f18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56113da76ee0 'int &'
|   `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da76fd8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56113da76fa0 'const int &'
|   `-QualType 0x56113da6a291 'const int' const
|     `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77068 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56113da77030 'int *'
|   `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da770f8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56113da770c0 'const int *'
|   `-QualType 0x56113da6a291 'const int' const
|     `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77ce0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56113da77c90 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56113da77c70 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56113da77c00 'type'
|     `-SubstTemplateTypeParmType 0x56113da779c0 'int' sugar
|       |-TemplateTypeParmType 0x56113d723820 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7237d0 'T'
|       `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77d48 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56113da76fa0 'const int &'
|   `-QualType 0x56113da6a291 'const int' const
|     `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77da0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77e08 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56113da77030 'int *'
|   `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|     |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56113d7506b8 'T'
|     `-BuiltinType 0x56113d452370 'int'
|-TypedefDecl 0x56113da77e70 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56113da770c0 'const int *'
|   `-QualType 0x56113da6a291 'const int' const
|     `-SubstTemplateTypeParmType 0x56113da6a290 'int' sugar
|       |-TemplateTypeParmType 0x56113d750710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56113d7506b8 'T'
|       `-BuiltinType 0x56113d452370 'int'
|-EnumDecl 0x56113da77ec8 <line:134:5> col:5
| `-EnumConstantDecl 0x56113da77fc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56113da77fa0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56113d751d98 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56113d751d70 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56113d751d50 <col:40> 'int' 1
|-CXXConstructorDecl 0x56113da78048 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56113da78298 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da78100 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da781a0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56113da78558 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56113da78440 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56113da78818 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56113da78700 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56113da78b60 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56113da78a40 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56113da78e70 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56113da78d50 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56113da79160 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da78fa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da79020 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56113da79288 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56113da79368 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da793c0 <col:30> Inherited
|-CXXMethodDecl 0x56113da79408 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56113da794b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da79510 <col:30> Inherited
|-CXXMethodDecl 0x56113da795d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56113da79688 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da796e0 <col:30> Inherited
|-CXXMethodDecl 0x56113da79728 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56113da797d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da79830 <col:30> Inherited
|-CXXMethodDecl 0x56113da79878 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56113da79928 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da79980 <col:30> Inherited
|-CXXMethodDecl 0x56113da799c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56113da79a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x56113da79ad0 <col:30> Inherited
|-CXXMethodDecl 0x56113da79af8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56113da79ba8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56113da79c58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56113da79e18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da79d08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56113da79d80 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56113da79f68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56113da79ed8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da7a118 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56113da7a020 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56113da7a1d0 <col:20>
| `-OptimizeNoneAttr 0x56113da7a228 <col:30>
|-CXXMethodDecl 0x56113da7a348 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56113da7a250 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56113da7a400 <col:20>
| `-OptimizeNoneAttr 0x56113da7a458 <col:30>
|-CXXMethodDecl 0x56113da7a510 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56113da7a480 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da7a658 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56113da7a5c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da7a788 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56113da7a8b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56113da7a988 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56113da7aa58 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56113da7ab98 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56113da7ab08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da7ace0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56113da7ac50 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56113da7ae28 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56113da7ad98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56113da7aee0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56113da7afe0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56113da7af50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56113da7b098 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56113da7b158 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56113da7b258 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56113da7b3d8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56113da7b318 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56113da7bb98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56113da7b490 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56113da7baf8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56113da7b9f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56113da7bc78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56113da7bdc8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56113da7bd38 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56113da7be80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56113da7c0c8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56113da7bf40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56113da7bfb8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56113da7c288 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56113da7c198 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56113da7c4d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56113da7c350 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56113da7c3c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56113da7c598 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56113da7c7f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56113da7c700 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56113da7c8c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113da68158 prev 0x56113da4a3d0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56113da68250 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56113da68340 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56113da8e5e0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56113da68430 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56113da8e5f0 <col:25, line:830:9>
|-CXXMethodDecl 0x56113da68530 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56113da685e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56113da68688 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56113da68688
| `-ParmVarDecl 0x56113da68798 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56113da68f58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56113da68f58
  `-ParmVarDecl 0x56113da69068 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113da4a208 prev 0x56113d9d8f58 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56113da4a340 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56113da4a3d0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56113da4a480 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56113da4a588 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56113da4a4b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56113da7de88 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56113da7de68 <col:31> 'int' 0
|-CXXConstructorDecl 0x56113da4a8a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56113da4a720 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56113da4a798 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56113da7dec0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56113da7dea0 <col:59> 'int' 0
|-CXXConstructorDecl 0x56113da4aa80 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56113da4a970 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56113da4a9e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56113da7def8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56113da7ded8 <col:55> 'int' 0
|-CXXConstructorDecl 0x56113da4ae38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56113da4ac20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56113da4ac98 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56113da4ad10 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56113da7df30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56113da7df10 <col:31> 'int' 0
|-CXXConstructorDecl 0x56113da4aff8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56113da4af38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56113da4b0f0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56113da4b2a8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56113da4b1e0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56113da4b398 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56113da7e2e0 <col:24, line:291:5>
|   `-ReturnStmt 0x56113da7e2d0 <line:290:9, col:79>
|     `-BinaryOperator 0x56113da7e2b0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56113da7e188 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56113da7e0e0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56113da7e0c0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56113da7dfb8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56113da7dfa0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56113da7df88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56113da7df58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56113da69f80
|       | |   |       `-CXXThisExpr 0x56113da7df48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56113da7e0a8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56113da7e090 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56113da7e058 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56113da7e028 <col:28, col:35> '<bound member function type>' ->size 0x56113da35a78
|       | |           `-ImplicitCastExpr 0x56113da7e078 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56113da7e010 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56113da7dfe0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56113da69f80
|       | |                 `-CXXThisExpr 0x56113da7dfd0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56113da7e170 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56113da7e158 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56113da7e140 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56113da7e110 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56113da7ca10
|       |         `-CXXThisExpr 0x56113da7e100 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56113da7e290 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56113da7e278 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56113da7e260 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56113da7e220 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56113da7e208 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56113da7e1b8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56113da7cac0
|         |     |   `-CXXThisExpr 0x56113da7e1a8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56113da7e1e8 <col:73> 'int' 0
|         `-IntegerLiteral 0x56113da7e240 <col:79> 'int' 0
|-CXXMethodDecl 0x56113da4b458 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56113da7fe18 <col:32, line:296:5>
|   `-ReturnStmt 0x56113da7fe08 <line:295:9, col:49>
|     `-BinaryOperator 0x56113da7fde8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56113da7fcc8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56113da7fcb0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56113da7e338 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56113da7e308 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56113da7ca10
|       |       `-CXXThisExpr 0x56113da7e2f8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56113da7fdc8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56113da7fdb0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56113da7fd98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56113da7fd58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56113da7fd40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56113da7fcf0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56113da7cac0
|         |     |   `-CXXThisExpr 0x56113da7fce0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56113da7fd20 <col:43> 'int' 0
|         `-IntegerLiteral 0x56113da7fd78 <col:49> 'int' 0
|-CXXMethodDecl 0x56113da4b548 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56113da80028 <col:19, line:306:5>
|   |-IfStmt 0x56113da7ff48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56113da7fe88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56113da7fe70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56113da7fe40 <col:13> 'Vector<String> *' lvalue ->_conf 0x56113da69f80
|   | |     `-CXXThisExpr 0x56113da7fe30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56113da7ff28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56113da7fef8 <col:13, col:20> '<bound member function type>' ->clear 0x56113da38478
|   |     `-ImplicitCastExpr 0x56113da7fee0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56113da7feb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56113da69f80
|   |         `-CXXThisExpr 0x56113da7fea0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56113da7ffd0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56113da7ffa0 <col:9, col:16> '<bound member function type>' .clear 0x56113da7c598
|   |   `-MemberExpr 0x56113da7ff70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56113da7c9b0
|   |     `-CXXThisExpr 0x56113da7ff60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56113da80018 <line:305:9, col:17>
|     `-UnaryOperator 0x56113da80000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da7fff0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56113da4b7c8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56113da4b6d0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56113da4b948 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56113da4b880 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56113da4bcc8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56113da4b9f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56113da4bc28 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56113da4ba98 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56113da4bb10 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56113da80358 <col:67, line:327:5>
|     |-WhileStmt 0x56113da80308 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56113da80120 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56113da80090 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56113d9f6648 0x56113d9d88f0 0x56113d9722f8 0x56113d7bb8d8 0x56113d7bb5b0 0x56113d7acd90 0x56113d7aca40 0x56113d7ac330 0x56113d77eca0 0x56113d70b160
|     | | |-DeclRefExpr 0x56113da80050 <col:16> 'Iter' lvalue ParmVar 0x56113da4ba98 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56113da80070 <col:25> 'Iter' lvalue ParmVar 0x56113da4bb10 'end' 'Iter'
|     | `-CompoundStmt 0x56113da802e8 <col:30, line:325:9>
|     |   |-CallExpr 0x56113da80288 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56113da80168 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56113da80258 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56113da801e8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|     |   |   `-DeclRefExpr 0x56113da801c8 <col:24> 'Iter' lvalue ParmVar 0x56113da4ba98 'begin' 'Iter'
|     |   `-UnaryOperator 0x56113da802d0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56113da802b0 <col:15> 'Iter' lvalue ParmVar 0x56113da4ba98 'begin' 'Iter'
|     `-ReturnStmt 0x56113da80348 <line:326:9, col:17>
|       `-UnaryOperator 0x56113da80330 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da80320 <col:17> 'Args *' this
|-CXXMethodDecl 0x56113da4bdd0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56113da4bd40 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56113da4bf18 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56113da4be88 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56113da4bfe0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56113da80438 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56113da803d8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56113da80388 <col:9> '<bound member function type>' ->reset_from 0x56113da7ce38
|   | | `-CXXThisExpr 0x56113da80378 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56113da803b8 <col:20> 'int' 0
|   `-ReturnStmt 0x56113da80428 <line:352:9, col:17>
|     `-UnaryOperator 0x56113da80410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da80400 <col:17> 'Args *' this
|-VarDecl 0x56113da4c098 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56113da4c100 <col:38> 'int' 1
|-VarDecl 0x56113da4c190 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56113da4c1f8 <col:39> 'int' 2
|-VarDecl 0x56113da4c288 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56113da4c2f0 <col:39> 'int' 4
|-VarDecl 0x56113da4c380 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56113da4c3e8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56113da4c768 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56113da4c460 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da4c6c8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56113da4c510 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4c5b8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56113da80590 <col:43, line:371:5>
|     `-ReturnStmt 0x56113da80580 <line:370:9, col:34>
|       `-CallExpr 0x56113da80548 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da80468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da804e8 <col:21> 'const char *' lvalue ParmVar 0x56113da4c510 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da80508 <col:30> 'int' 0
|         `-DeclRefExpr 0x56113da80528 <col:33> 'T' lvalue ParmVar 0x56113da4c5b8 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4ca98 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56113da4c7d0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da4c9f8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56113da4c880 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4c928 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56113da806e0 <col:45, line:375:5>
|     `-ReturnStmt 0x56113da806d0 <line:374:9, col:42>
|       `-CallExpr 0x56113da80698 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da805b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da80638 <col:21> 'const char *' lvalue ParmVar 0x56113da4c880 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da80658 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int'
|         `-DeclRefExpr 0x56113da80678 <col:41> 'T' lvalue ParmVar 0x56113da4c928 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4cdc8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56113da4cb00 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56113da4cd28 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56113da4cbb0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56113da4cc58 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x56113da80830 <col:45, line:379:5>
| |   `-ReturnStmt 0x56113da80820 <line:378:9, col:43>
| |     `-CallExpr 0x56113da807e8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56113da80708 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56113da80788 <col:21> 'const char *' lvalue ParmVar 0x56113da4cbb0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x56113da807a8 <col:30> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
| |       `-DeclRefExpr 0x56113da807c8 <col:42> 'T' lvalue ParmVar 0x56113da4cc58 'x' 'T &'
| |-CXXMethodDecl 0x56113dac25b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x56113dac23d0 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x56113dac24a8 <col:39, col:42> col:42 x 'String &'
| `-CXXMethodDecl 0x56113dac2a38 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56113dac2858 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x56113dac2928 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x56113da4d0f8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56113da4ce30 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da4d058 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56113da4cee0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4cf88 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x56113da80a30 <col:46, line:383:5>
|     `-ReturnStmt 0x56113da80a20 <line:382:9, col:55>
|       `-CallExpr 0x56113da809e8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da80858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da808d8 <col:21> 'const char *' lvalue ParmVar 0x56113da4cee0 'keyword' 'const char *'
|         |-BinaryOperator 0x56113da809a8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56113da80958 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56113da80938 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56113da80990 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56113da80970 <col:42> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56113da809c8 <col:54> 'T' lvalue ParmVar 0x56113da4cf88 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4d4f8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56113da4d160 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da4d458 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56113da4d210 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4d290 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56113da4d338 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56113da80b70 <col:54, line:388:5>
|     |-CallExpr 0x56113da80af8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da80a48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56113da80a88 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56113da80a98 <col:30> 'const char *' lvalue ParmVar 0x56113da4d210 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da80ab8 <col:39> 'int' lvalue ParmVar 0x56113da4d290 'flags' 'int'
|     | `-DeclRefExpr 0x56113da80ad8 <col:46> 'T' lvalue ParmVar 0x56113da4d338 'x' 'T &'
|     `-ReturnStmt 0x56113da80b60 <line:387:9, col:17>
|       `-UnaryOperator 0x56113da80b48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da80b38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da4d9a8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56113da4d568 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da4d5e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56113da4d908 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56113da4d6a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4d748 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56113da4d7e8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da80ce0 <col:74, line:403:5>
|     `-ReturnStmt 0x56113da80cd0 <line:402:9, col:56>
|       `-CallExpr 0x56113da80c90 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da80ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da80c10 <col:28> 'const char *' lvalue ParmVar 0x56113da4d6a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da80c30 <col:37> 'int' 0
|         |-DeclRefExpr 0x56113da80c50 <col:40> 'T' lvalue ParmVar 0x56113da4d748 'x' 'T &'
|         `-DeclRefExpr 0x56113da80c70 <col:43> 'const V' lvalue ParmVar 0x56113da4d7e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56113da4de18 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56113da4da18 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da4da98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56113da4dd78 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56113da4db58 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4dbf8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56113da4dc98 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da80e48 <col:76, line:407:5>
|     `-ReturnStmt 0x56113da80e38 <line:406:9, col:65>
|       `-CallExpr 0x56113da80df8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da80d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da80d78 <col:28> 'const char *' lvalue ParmVar 0x56113da4db58 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da80d98 <col:37> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
|         |-DeclRefExpr 0x56113da80db8 <col:49> 'T' lvalue ParmVar 0x56113da4dbf8 'x' 'T &'
|         `-DeclRefExpr 0x56113da80dd8 <col:52> 'const V' lvalue ParmVar 0x56113da4dc98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56113da4e368 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56113da4de88 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da4df08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56113da4e2c8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56113da4dfc8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4e048 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56113da4e0e8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56113da4e188 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da80fb0 <col:85, line:412:5>
|     |-CallExpr 0x56113da80f30 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da80e60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56113da80ea0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56113da80eb0 <col:37> 'const char *' lvalue ParmVar 0x56113da4dfc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da80ed0 <col:46> 'int' lvalue ParmVar 0x56113da4e048 'flags' 'int'
|     | |-DeclRefExpr 0x56113da80ef0 <col:53> 'T' lvalue ParmVar 0x56113da4e0e8 'x' 'T &'
|     | `-DeclRefExpr 0x56113da80f10 <col:56> 'const V' lvalue ParmVar 0x56113da4e188 'default_value' 'const V &'
|     `-ReturnStmt 0x56113da80fa0 <line:411:9, col:17>
|       `-UnaryOperator 0x56113da80f88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da80f78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da4e7f8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56113da4e3e0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4e458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da4e758 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da4e518 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4e590 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4e638 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56113da81130 <col:53, line:425:5>
|     `-ReturnStmt 0x56113da81120 <line:424:9, col:42>
|       `-CallExpr 0x56113da810e0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da80fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da81060 <col:21> 'const char *' lvalue ParmVar 0x56113da4e518 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da81080 <col:30> 'int' 0
|         |-DeclRefExpr 0x56113da810a0 <col:33> 'P' lvalue ParmVar 0x56113da4e590 'parser' 'P'
|         `-DeclRefExpr 0x56113da810c0 <col:41> 'T' lvalue ParmVar 0x56113da4e638 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4ec48 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56113da4e868 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4e8e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da4eba8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da4e9a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4ea20 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4eac8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56113da812a8 <col:55, line:429:5>
|     `-ReturnStmt 0x56113da81298 <line:428:9, col:50>
|       `-CallExpr 0x56113da81258 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da811d8 <col:21> 'const char *' lvalue ParmVar 0x56113da4e9a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da811f8 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int'
|         |-DeclRefExpr 0x56113da81218 <col:41> 'P' lvalue ParmVar 0x56113da4ea20 'parser' 'P'
|         `-DeclRefExpr 0x56113da81238 <col:49> 'T' lvalue ParmVar 0x56113da4eac8 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4f098 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56113da4ecb8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4ed38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da4eff8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da4edf8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4ee70 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4ef18 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56113da81420 <col:55, line:433:5>
|     `-ReturnStmt 0x56113da81410 <line:432:9, col:51>
|       `-CallExpr 0x56113da813d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da812d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da81350 <col:21> 'const char *' lvalue ParmVar 0x56113da4edf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da81370 <col:30> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
|         |-DeclRefExpr 0x56113da81390 <col:42> 'P' lvalue ParmVar 0x56113da4ee70 'parser' 'P'
|         `-DeclRefExpr 0x56113da813b0 <col:50> 'T' lvalue ParmVar 0x56113da4ef18 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4f4e8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56113da4f108 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4f188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da4f448 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da4f248 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4f2c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4f368 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56113da81648 <col:56, line:437:5>
|     `-ReturnStmt 0x56113da81638 <line:436:9, col:63>
|       `-CallExpr 0x56113da815f8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da814c8 <col:21> 'const char *' lvalue ParmVar 0x56113da4f248 'keyword' 'const char *'
|         |-BinaryOperator 0x56113da81598 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56113da81548 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56113da81528 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56113da81580 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56113da81560 <col:42> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56113da815b8 <col:54> 'P' lvalue ParmVar 0x56113da4f2c0 'parser' 'P'
|         `-DeclRefExpr 0x56113da815d8 <col:62> 'T' lvalue ParmVar 0x56113da4f368 'x' 'T &'
|-FunctionTemplateDecl 0x56113da4fa18 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56113da4f558 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4f5d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da4f978 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56113da4f698 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4f718 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56113da4f790 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4f838 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56113da817b0 <col:64, line:442:5>
|     |-CallExpr 0x56113da81730 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da81660 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56113da816a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56113da816b0 <col:30> 'const char *' lvalue ParmVar 0x56113da4f698 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da816d0 <col:39> 'int' lvalue ParmVar 0x56113da4f718 'flags' 'int'
|     | |-DeclRefExpr 0x56113da816f0 <col:46> 'P' lvalue ParmVar 0x56113da4f790 'parser' 'P'
|     | `-DeclRefExpr 0x56113da81710 <col:54> 'T' lvalue ParmVar 0x56113da4f838 'x' 'T &'
|     `-ReturnStmt 0x56113da817a0 <line:441:9, col:17>
|       `-UnaryOperator 0x56113da81788 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da81778 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da50018 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56113da4fa90 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da4fb08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56113da4fb88 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56113da4ff78 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56113da4fc50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da4fcc8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56113da4fd68 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56113da4fe38 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da81948 <col:84, line:458:5>
|     `-ReturnStmt 0x56113da81938 <line:457:9, col:64>
|       `-CallExpr 0x56113da818f0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da817e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da81850 <col:28> 'const char *' lvalue ParmVar 0x56113da4fc50 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da81870 <col:37> 'int' 0
|         |-DeclRefExpr 0x56113da81890 <col:40> 'P' lvalue ParmVar 0x56113da4fcc8 'parser' 'P'
|         |-DeclRefExpr 0x56113da818b0 <col:48> 'T' lvalue ParmVar 0x56113da4fd68 'x' 'T &'
|         `-DeclRefExpr 0x56113da818d0 <col:51> 'const V' lvalue ParmVar 0x56113da4fe38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56113da50598 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56113da50090 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da50108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56113da50188 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56113da504f8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56113da50250 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da502c8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56113da50368 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56113da50408 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da81ad8 <col:86, line:462:5>
|     `-ReturnStmt 0x56113da81ac8 <line:461:9, col:73>
|       `-CallExpr 0x56113da81a80 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da819e0 <col:28> 'const char *' lvalue ParmVar 0x56113da50250 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da81a00 <col:37> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
|         |-DeclRefExpr 0x56113da81a20 <col:49> 'P' lvalue ParmVar 0x56113da502c8 'parser' 'P'
|         |-DeclRefExpr 0x56113da81a40 <col:57> 'T' lvalue ParmVar 0x56113da50368 'x' 'T &'
|         `-DeclRefExpr 0x56113da81a60 <col:60> 'const V' lvalue ParmVar 0x56113da50408 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56113da50bf8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56113da50610 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da50688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56113da50708 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56113da50b58 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56113da507d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da50850 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56113da508c8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56113da50968 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56113da50a08 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56113da81c68 <col:95, line:467:5>
|     |-CallExpr 0x56113da81be0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da81af0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56113da81b30 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56113da81b40 <col:37> 'const char *' lvalue ParmVar 0x56113da507d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da81b60 <col:46> 'int' lvalue ParmVar 0x56113da50850 'flags' 'int'
|     | |-DeclRefExpr 0x56113da81b80 <col:53> 'P' lvalue ParmVar 0x56113da508c8 'parser' 'P'
|     | |-DeclRefExpr 0x56113da81ba0 <col:61> 'T' lvalue ParmVar 0x56113da50968 'x' 'T &'
|     | `-DeclRefExpr 0x56113da81bc0 <col:64> 'const V' lvalue ParmVar 0x56113da50a08 'default_value' 'const V &'
|     `-ReturnStmt 0x56113da81c58 <line:466:9, col:17>
|       `-UnaryOperator 0x56113da81c40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da81c30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da511d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56113da50c78 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da50cf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da50d78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da51138 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da50e40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da50eb8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56113da50f58 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56113da50ff8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56113da81e10 <col:63, line:481:5>
|     `-ReturnStmt 0x56113da81e00 <line:480:9, col:47>
|       `-CallExpr 0x56113da81db8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da81d18 <col:21> 'const char *' lvalue ParmVar 0x56113da50e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da81d38 <col:30> 'int' 0
|         |-DeclRefExpr 0x56113da81d58 <col:33> 'P' lvalue ParmVar 0x56113da50eb8 'parser' 'P'
|         |-DeclRefExpr 0x56113da81d78 <col:41> 'T1' lvalue ParmVar 0x56113da50f58 'x1' 'T1 &'
|         `-DeclRefExpr 0x56113da81d98 <col:45> 'T2' lvalue ParmVar 0x56113da50ff8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56113da51758 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56113da51250 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da512c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da51348 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da516b8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da51410 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da51488 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56113da51528 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56113da515c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56113da81fb0 <col:65, line:485:5>
|     `-ReturnStmt 0x56113da81fa0 <line:484:9, col:55>
|       `-CallExpr 0x56113da81f58 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da81eb8 <col:21> 'const char *' lvalue ParmVar 0x56113da51410 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da81ed8 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int'
|         |-DeclRefExpr 0x56113da81ef8 <col:41> 'P' lvalue ParmVar 0x56113da51488 'parser' 'P'
|         |-DeclRefExpr 0x56113da81f18 <col:49> 'T1' lvalue ParmVar 0x56113da51528 'x1' 'T1 &'
|         `-DeclRefExpr 0x56113da81f38 <col:53> 'T2' lvalue ParmVar 0x56113da515c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56113da56170 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56113da517d0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da51848 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da518c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da560d0 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da51990 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da51a08 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56113da51aa8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56113da51b48 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56113da82150 <col:65, line:489:5>
|     `-ReturnStmt 0x56113da82140 <line:488:9, col:56>
|       `-CallExpr 0x56113da820f8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da81fd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82058 <col:21> 'const char *' lvalue ParmVar 0x56113da51990 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82078 <col:30> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
|         |-DeclRefExpr 0x56113da82098 <col:42> 'P' lvalue ParmVar 0x56113da51a08 'parser' 'P'
|         |-DeclRefExpr 0x56113da820b8 <col:50> 'T1' lvalue ParmVar 0x56113da51aa8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56113da820d8 <col:54> 'T2' lvalue ParmVar 0x56113da51b48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56113da566f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56113da561e8 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da56268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da562e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da56658 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da563b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da56428 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56113da564c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56113da56568 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56113da823a0 <col:66, line:493:5>
|     `-ReturnStmt 0x56113da82390 <line:492:9, col:68>
|       `-CallExpr 0x56113da82348 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da821f8 <col:21> 'const char *' lvalue ParmVar 0x56113da563b0 'keyword' 'const char *'
|         |-BinaryOperator 0x56113da822c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56113da82278 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56113da82258 <col:30> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56113da822b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56113da82290 <col:42> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56113da822e8 <col:54> 'P' lvalue ParmVar 0x56113da56428 'parser' 'P'
|         |-DeclRefExpr 0x56113da82308 <col:62> 'T1' lvalue ParmVar 0x56113da564c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56113da82328 <col:66> 'T2' lvalue ParmVar 0x56113da56568 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56113da56d58 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56113da56770 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da567e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da56868 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da56cb8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da56930 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da569b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56113da56a28 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56113da56ac8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56113da56b68 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56113da82530 <col:74, line:498:5>
|     |-CallExpr 0x56113da824a8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da823b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56113da823f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56113da82408 <col:30> 'const char *' lvalue ParmVar 0x56113da56930 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da82428 <col:39> 'int' lvalue ParmVar 0x56113da569b0 'flags' 'int'
|     | |-DeclRefExpr 0x56113da82448 <col:46> 'P' lvalue ParmVar 0x56113da56a28 'parser' 'P'
|     | |-DeclRefExpr 0x56113da82468 <col:54> 'T1' lvalue ParmVar 0x56113da56ac8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56113da82488 <col:58> 'T2' lvalue ParmVar 0x56113da56b68 'x2' 'T2 &'
|     `-ReturnStmt 0x56113da82520 <line:497:9, col:17>
|       `-UnaryOperator 0x56113da82508 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da824f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da570b8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56113da56dd8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da57018 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56113da56e90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da56f08 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56113da82678 <col:52, line:509:5>
|     `-ReturnStmt 0x56113da82668 <line:508:9, col:44>
|       `-CallExpr 0x56113da82630 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da825d0 <col:26> 'const char *' lvalue ParmVar 0x56113da56e90 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da825f0 <col:35> 'int' 0
|         `-DeclRefExpr 0x56113da82610 <col:38> 'P' lvalue ParmVar 0x56113da56f08 'parser' 'P'
|-FunctionTemplateDecl 0x56113da573b8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56113da57120 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da57318 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56113da571d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da57248 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56113da827b8 <col:54, line:513:5>
|     `-ReturnStmt 0x56113da827a8 <line:512:9, col:52>
|       `-CallExpr 0x56113da82770 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da826a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82710 <col:26> 'const char *' lvalue ParmVar 0x56113da571d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82730 <col:35> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int'
|         `-DeclRefExpr 0x56113da82750 <col:46> 'P' lvalue ParmVar 0x56113da57248 'parser' 'P'
|-FunctionTemplateDecl 0x56113da576b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56113da57420 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da57618 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56113da574d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da57548 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56113da828f8 <col:54, line:517:5>
|     `-ReturnStmt 0x56113da828e8 <line:516:9, col:53>
|       `-CallExpr 0x56113da828b0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da827e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82850 <col:26> 'const char *' lvalue ParmVar 0x56113da574d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82870 <col:35> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int'
|         `-DeclRefExpr 0x56113da82890 <col:47> 'P' lvalue ParmVar 0x56113da57548 'parser' 'P'
|-FunctionTemplateDecl 0x56113da579b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56113da57720 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da57918 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56113da577d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da57848 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56113da82ae8 <col:55, line:521:5>
|     `-ReturnStmt 0x56113da82ad8 <line:520:9, col:65>
|       `-CallExpr 0x56113da82aa0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82990 <col:26> 'const char *' lvalue ParmVar 0x56113da577d0 'keyword' 'const char *'
|         |-BinaryOperator 0x56113da82a60 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56113da82a10 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56113da829f0 <col:35> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56113da82a48 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56113da82a28 <col:47> 'const int' lvalue Var 0x56113da4c190 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56113da82a80 <col:59> 'P' lvalue ParmVar 0x56113da57848 'parser' 'P'
|-FunctionTemplateDecl 0x56113da57d88 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56113da57a20 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da57ce8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56113da57ad0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da57b50 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56113da57bc8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56113da82c28 <col:63, line:526:5>
|     |-CallExpr 0x56113da82bb0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da82b00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56113da82b40 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56113da82b50 <col:35> 'const char *' lvalue ParmVar 0x56113da57ad0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56113da82b70 <col:44> 'int' lvalue ParmVar 0x56113da57b50 'flags' 'int'
|     | `-DeclRefExpr 0x56113da82b90 <col:51> 'P' lvalue ParmVar 0x56113da57bc8 'parser' 'P'
|     `-ReturnStmt 0x56113da82c18 <line:525:9, col:17>
|       `-UnaryOperator 0x56113da82c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da82bf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da581d8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56113da57df8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da57e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da58138 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da57f38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da57fb0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56113da58058 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56113da82d80 <col:58, line:541:5>
|     `-ReturnStmt 0x56113da82d70 <line:540:9, col:39>
|       `-CallExpr 0x56113da82d38 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82cd8 <col:21> 'const char *' lvalue ParmVar 0x56113da57f38 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82cf8 <col:30> 'P' lvalue ParmVar 0x56113da57fb0 'parser' 'P'
|         `-DeclRefExpr 0x56113da82d18 <col:38> 'T' lvalue ParmVar 0x56113da58058 'x' 'T &'
|-FunctionTemplateDecl 0x56113da58628 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56113da58248 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da582c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da58588 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da58388 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da58400 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56113da584a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56113da82eb8 <col:60, line:545:5>
|     `-ReturnStmt 0x56113da82ea8 <line:544:9, col:41>
|       `-CallExpr 0x56113da82e70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82da8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82e10 <col:23> 'const char *' lvalue ParmVar 0x56113da58388 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82e30 <col:32> 'P' lvalue ParmVar 0x56113da58400 'parser' 'P'
|         `-DeclRefExpr 0x56113da82e50 <col:40> 'T' lvalue ParmVar 0x56113da584a8 'x' 'T &'
|-FunctionTemplateDecl 0x56113da58a78 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56113da58698 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da58718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da589d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da587d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da58850 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56113da588f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56113da82ff0 <col:60, line:549:5>
|     `-ReturnStmt 0x56113da82fe0 <line:548:9, col:41>
|       `-CallExpr 0x56113da82fa8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da82ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da82f48 <col:23> 'const char *' lvalue ParmVar 0x56113da587d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da82f68 <col:32> 'P' lvalue ParmVar 0x56113da58850 'parser' 'P'
|         `-DeclRefExpr 0x56113da82f88 <col:40> 'T' lvalue ParmVar 0x56113da588f8 'x' 'T &'
|-FunctionTemplateDecl 0x56113da58ec8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56113da58ae8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da58b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da58e28 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da58c28 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da58ca0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56113da58d48 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56113da83128 <col:61, line:553:5>
|     `-ReturnStmt 0x56113da83118 <line:552:9, col:42>
|       `-CallExpr 0x56113da830e0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da83018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da83080 <col:24> 'const char *' lvalue ParmVar 0x56113da58c28 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da830a0 <col:33> 'P' lvalue ParmVar 0x56113da58ca0 'parser' 'P'
|         `-DeclRefExpr 0x56113da830c0 <col:41> 'T' lvalue ParmVar 0x56113da58d48 'x' 'T &'
|-FunctionTemplateDecl 0x56113da593a8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56113da58f38 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da58fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da59308 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56113da59078 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da590f8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56113da59170 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56113da59218 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56113da832a0 <col:69, line:557:5>
|     `-ReturnStmt 0x56113da83290 <line:556:9, col:46>
|       `-CallExpr 0x56113da83250 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da83150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da831d0 <col:21> 'const char *' lvalue ParmVar 0x56113da59078 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da831f0 <col:30> 'int' lvalue ParmVar 0x56113da590f8 'flags' 'int'
|         |-DeclRefExpr 0x56113da83210 <col:37> 'P' lvalue ParmVar 0x56113da59170 'parser' 'P'
|         `-DeclRefExpr 0x56113da83230 <col:45> 'T' lvalue ParmVar 0x56113da59218 'x' 'T &'
|-FunctionTemplateDecl 0x56113da596b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56113da59420 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da59618 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56113da594d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da59548 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56113da833e0 <col:56, line:571:5>
|     `-ReturnStmt 0x56113da833d0 <line:570:9, col:48>
|       `-CallExpr 0x56113da83398 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da832c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da83338 <col:30> 'const char *' lvalue ParmVar 0x56113da594d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da83358 <col:39> 'int' 0
|         `-DeclRefExpr 0x56113da83378 <col:42> 'P' lvalue ParmVar 0x56113da59548 'parser' 'P'
|-FunctionTemplateDecl 0x56113da59a48 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56113da59720 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da599a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56113da597d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da59850 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56113da598c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56113da835b0 <col:67, line:576:5>
|     |-CallExpr 0x56113da83538 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da833f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56113da83438 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56113da83448 <col:39> 'const char *' lvalue ParmVar 0x56113da597d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x56113da834f8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56113da834a8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56113da83468 <col:48> 'int' lvalue ParmVar 0x56113da59850 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56113da834e0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56113da834c0 <col:56> 'const int' lvalue Var 0x56113da4c380 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56113da83518 <col:68> 'P' lvalue ParmVar 0x56113da598c8 'parser' 'P'
|     `-ReturnStmt 0x56113da835a0 <line:575:9, col:17>
|       `-UnaryOperator 0x56113da83588 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da83578 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da59e98 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56113da59ab8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da59b38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da59df8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56113da59bf8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da59c70 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56113da59d18 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56113da83720 <col:62, line:592:5>
|     `-ReturnStmt 0x56113da83710 <line:591:9, col:51>
|       `-CallExpr 0x56113da836d0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da835e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da83650 <col:30> 'const char *' lvalue ParmVar 0x56113da59bf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da83670 <col:39> 'int' 0
|         |-DeclRefExpr 0x56113da83690 <col:42> 'P' lvalue ParmVar 0x56113da59c70 'parser' 'P'
|         `-DeclRefExpr 0x56113da836b0 <col:50> 'T' lvalue ParmVar 0x56113da59d18 'x' 'T &'
|-FunctionTemplateDecl 0x56113da5a378 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56113da59f08 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da59f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da5a2d8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56113da5a048 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5a0c8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5a140 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56113da5a1e8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56113da83918 <col:73, line:597:5>
|     |-CallExpr 0x56113da83898 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da83738 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56113da83778 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56113da83788 <col:39> 'const char *' lvalue ParmVar 0x56113da5a048 'keyword' 'const char *'
|     | |-BinaryOperator 0x56113da83838 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56113da837e8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56113da837a8 <col:48> 'int' lvalue ParmVar 0x56113da5a0c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56113da83820 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56113da83800 <col:56> 'const int' lvalue Var 0x56113da4c380 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56113da83858 <col:68> 'P' lvalue ParmVar 0x56113da5a140 'parser' 'P'
|     | `-DeclRefExpr 0x56113da83878 <col:76> 'T' lvalue ParmVar 0x56113da5a1e8 'x' 'T &'
|     `-ReturnStmt 0x56113da83908 <line:596:9, col:17>
|       `-UnaryOperator 0x56113da838f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da838e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da5a928 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56113da5a3f0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da5a468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da5a888 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56113da5a528 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5a5a0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56113da5a760 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56113da83a88 <col:65, line:614:5>
|     `-ReturnStmt 0x56113da83a78 <line:613:9, col:46>
|       `-CallExpr 0x56113da83a38 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da83948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da839b8 <col:25> 'const char *' lvalue ParmVar 0x56113da5a528 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da839d8 <col:34> 'int' 0
|         |-DeclRefExpr 0x56113da839f8 <col:37> 'P' lvalue ParmVar 0x56113da5a5a0 'parser' 'P'
|         `-DeclRefExpr 0x56113da83a18 <col:45> 'Vector<T>' lvalue ParmVar 0x56113da5a760 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56113da5ad58 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56113da5a998 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da5acb8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56113da5aa50 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5aba0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56113da83ca0 <col:55, line:618:5>
|     `-ReturnStmt 0x56113da83c90 <line:617:9, col:55>
|       `-CallExpr 0x56113da83c50 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da83ab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da83b20 <col:25> 'const char *' lvalue ParmVar 0x56113da5aa50 'keyword' 'const char *'
|         |-IntegerLiteral 0x56113da83b40 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56113da83c10 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56113da83c30 <col:54> 'Vector<T>' lvalue ParmVar 0x56113da5aba0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56113da5b328 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56113da5adc0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da5ae38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da5b288 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56113da5aef8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5af78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5aff0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56113da5b140 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56113da83e98 <col:76, line:623:5>
|     |-CallExpr 0x56113da83e18 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56113da83cb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56113da83cf8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56113da83d08 <col:34> 'const char *' lvalue ParmVar 0x56113da5aef8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56113da83db8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56113da83d68 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56113da83d28 <col:43> 'int' lvalue ParmVar 0x56113da5af78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56113da83da0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56113da83d80 <col:51> 'const int' lvalue Var 0x56113da4c380 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56113da83dd8 <col:63> 'P' lvalue ParmVar 0x56113da5aff0 'parser' 'P'
|     | `-DeclRefExpr 0x56113da83df8 <col:71> 'Vector<T>' lvalue ParmVar 0x56113da5b140 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56113da83e88 <line:622:9, col:17>
|       `-UnaryOperator 0x56113da83e70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da83e60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da5b868 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56113da5b3a0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da5b418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da5b7c8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56113da5b4d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5b558 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5b6a0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56113da84100 <col:66, line:627:5>
|     `-ReturnStmt 0x56113da840f0 <line:626:9, col:59>
|       `-CallExpr 0x56113da840b0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56113da83ec8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56113da83f38 <col:25> 'const char *' lvalue ParmVar 0x56113da5b4d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56113da83f58 <col:34> 'int' lvalue ParmVar 0x56113da5b558 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56113da84070 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56113da84090 <col:58> 'Vector<T>' lvalue ParmVar 0x56113da5b6a0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56113da5b8f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56113da84180 <col:25, line:633:5>
|   `-ReturnStmt 0x56113da84170 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56113da84158 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56113da84128 <col:16> 'const bool' lvalue ->_status 0x56113da69de8
|         `-CXXThisExpr 0x56113da84118 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56113da5ba78 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56113da5b9b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56113da84268 <col:27, line:639:5>
|   |-BinaryOperator 0x56113da84210 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56113da84198 <col:9> 'bool' lvalue ParmVar 0x56113da5b9b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56113da841f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56113da841c8 <col:13> 'bool' lvalue ->_status 0x56113da69de8
|   |     `-CXXThisExpr 0x56113da841b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56113da84258 <line:638:9, col:17>
|     `-UnaryOperator 0x56113da84240 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da84230 <col:17> 'Args *' this
|-CXXMethodDecl 0x56113da5bbf8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56113da5bb38 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56113da84358 <col:39, line:644:5>
|   |-BinaryOperator 0x56113da84300 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56113da84288 <col:9> 'bool' lvalue ParmVar 0x56113da5bb38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56113da842e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56113da842b8 <col:13> 'const bool' lvalue ->_status 0x56113da69de8
|   |     `-CXXThisExpr 0x56113da842a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56113da84348 <line:643:9, col:17>
|     `-UnaryOperator 0x56113da84330 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da84320 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56113da5bcc0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56113da84400 <col:30, line:651:5>
|   `-ReturnStmt 0x56113da843f0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56113da843d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56113da843a8 <col:16> 'bool' lvalue ->_read_status 0x56113da44750
|         `-ImplicitCastExpr 0x56113da84388 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56113da84378 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56113da5be08 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56113da5bd78 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56113da84508 <col:32, line:658:5>
|   |-BinaryOperator 0x56113da844b0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56113da84418 <col:9> 'bool' lvalue ParmVar 0x56113da5bd78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56113da84498 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56113da84468 <col:13> 'bool' lvalue ->_read_status 0x56113da44750
|   |     `-ImplicitCastExpr 0x56113da84448 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56113da84438 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56113da844f8 <line:657:9, col:17>
|     `-UnaryOperator 0x56113da844e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da844d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56113da5bf58 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56113da5bec8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56113da84618 <col:44, line:663:5>
|   |-BinaryOperator 0x56113da845c0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56113da84528 <col:9> 'bool' lvalue ParmVar 0x56113da5bec8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56113da845a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56113da84578 <col:13> 'bool' lvalue ->_read_status 0x56113da44750
|   |     `-ImplicitCastExpr 0x56113da84558 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56113da84548 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56113da84608 <line:662:9, col:17>
|     `-UnaryOperator 0x56113da845f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113da845e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56113da5c020 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56113da5c0e8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56113da5c1b0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56113da5c278 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56113da5c588 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56113da5c318 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da5c4e8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56113da5c3f8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56113da849e0 <col:19, line:706:5>
|     `-IfStmt 0x56113da849b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56113da84718 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56113da848e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56113da848b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56113da84878 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56113da84770 <col:42> '<bound member function type>' ->simple_slot 0x56113da7daf0
|       |     | `-CXXThisExpr 0x56113da84760 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56113da84818 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56113da847c0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56113d9fd128 0x56113d9fbb38 0x56113d7c0378
|       |     | `-DeclRefExpr 0x56113da847a0 <col:55> 'T' lvalue ParmVar 0x56113da5c3f8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56113da84858 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56113da849a8 <line:705:13, col:34>
|         `-CallExpr 0x56113da84980 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56113da84908 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56113da84960 <col:33> 'T' lvalue ParmVar 0x56113da5c3f8 'x' 'T &'
|-FunctionTemplateDecl 0x56113da5c858 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56113da5c5e8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da5c7b8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56113da5c6c8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56113da84dc0 <col:31, line:717:5>
|     |-DeclStmt 0x56113da84b20 <line:713:9, col:23>
|     | `-VarDecl 0x56113da84a08 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56113da84af8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56113da84a80 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56113da84ad8 <col:21> 'T' lvalue ParmVar 0x56113da5c6c8 'x' 'T &'
|     |-IfStmt 0x56113da84d70 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56113da84c18 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56113da84d50 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56113da84cf0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56113da84c80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|     |   | `-DeclRefExpr 0x56113da84c60 <col:14> 'T *' lvalue Var 0x56113da84a08 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56113da84d30 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56113da84da8 <line:716:9, col:16>
|       `-DeclRefExpr 0x56113da84d88 <col:16> 'T *' lvalue Var 0x56113da84a08 's' 'T *'
|-FunctionTemplateDecl 0x56113da5cc68 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56113da5c8b8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da5c938 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56113da5cbc8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56113da5ca18 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56113da5cab8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56113da850d0 <col:37, line:726:5>
|     |-IfStmt 0x56113da85060 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56113da85080 <line:723:13, col:26>
|     | | `-VarDecl 0x56113da84e28 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56113da84f18 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56113da84ea0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56113da84ef8 <col:25> 'T' lvalue ParmVar 0x56113da5ca18 'x' 'T &'
|     | |-DeclRefExpr 0x56113da84f40 <col:16> 'T *' lvalue Var 0x56113da84e28 's' 'T *'
|     | `-BinaryOperator 0x56113da85040 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56113da84ff0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56113da84f80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|     |   | `-DeclRefExpr 0x56113da84f60 <col:14> 'T *' lvalue Var 0x56113da84e28 's' 'T *'
|     |   `-DeclRefExpr 0x56113da85020 <col:18> 'const V' lvalue ParmVar 0x56113da5cab8 'value' 'const V &'
|     `-ReturnStmt 0x56113da850c0 <line:725:9, col:17>
|       `-UnaryOperator 0x56113da850a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56113da85098 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56113da5d068 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56113da5ccd0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56113da5cfc8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56113da5cd80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5ce00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5cea8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56113da85ef0 <col:65, line:737:5>
|     |-DeclStmt 0x56113da85168 <line:732:9, col:26>
|     | `-VarDecl 0x56113da85100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56113da85eb8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56113da85ed8 <line:733:13, col:58>
|       | `-VarDecl 0x56113da85190 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56113da85370 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56113da85340 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56113da85328 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56113da85308 <col:26, col:58> 'String' (CXXTemporary 0x56113da85308)
|       |           `-CXXMemberCallExpr 0x56113da85298 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56113da85208 <col:26> '<bound member function type>' ->find 0x56113da7d108
|       |             | `-CXXThisExpr 0x56113da851f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56113da852d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da85238 <col:31> 'const char *' lvalue ParmVar 0x56113da5cd80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56113da852e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da85258 <col:40> 'int' lvalue ParmVar 0x56113da5ce00 'flags' 'int'
|       |             `-DeclRefExpr 0x56113da85278 <col:47> 'Args::Slot *' lvalue Var 0x56113da85100 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56113da85428 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56113da85410 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56113da853f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56113da853c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |       `-ImplicitCastExpr 0x56113da853a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56113da85388 <col:20> 'String' lvalue Var 0x56113da85190 'str' 'String'
|       `-CompoundStmt 0x56113da85e98 <col:61, line:736:9>
|         |-DeclStmt 0x56113da858e0 <line:734:13, col:76>
|         | `-VarDecl 0x56113da85478 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56113da858b0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56113da85820 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56113da85868 <col:60> 'T' lvalue ParmVar 0x56113da5cea8 'variable' 'T &'
|         |     `-UnaryOperator 0x56113da85898 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56113da85888 <col:71> 'Args *' this
|         `-CallExpr 0x56113da85e68 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56113da85908 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|           | `-CXXThisExpr 0x56113da858f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56113da85e28 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56113da85938 <col:23> 'T *' lvalue Var 0x56113da85478 's' 'T *'
|           | `-CallExpr 0x56113da85de8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56113da85bc0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56113da85cc0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56113da85ce0 <col:86> 'String' lvalue Var 0x56113da85190 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56113da85d90 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56113da85d20 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|           |   | `-DeclRefExpr 0x56113da85d00 <col:92> 'T *' lvalue Var 0x56113da85478 's' 'T *'
|           |   `-UnaryOperator 0x56113da85dd0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56113da85dc0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56113da85e48 <col:103> 'Args::Slot *' lvalue Var 0x56113da85100 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da5d5b8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56113da5d0d8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da5d158 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56113da5d518 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56113da5d218 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5d298 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5d338 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56113da5d3d8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56113da86d90 <col:88, line:745:5>
|     |-DeclStmt 0x56113da85f88 <line:741:9, col:26>
|     | `-VarDecl 0x56113da85f20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56113da861a8 <line:742:9, col:55>
|     | `-VarDecl 0x56113da85fb0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56113da86190 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56113da86160 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56113da86148 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56113da86128 <col:22, col:54> 'String' (CXXTemporary 0x56113da86128)
|     |           `-CXXMemberCallExpr 0x56113da860b8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56113da86028 <col:22> '<bound member function type>' ->find 0x56113da7d108
|     |             | `-CXXThisExpr 0x56113da86018 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56113da860f0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56113da86058 <col:27> 'const char *' lvalue ParmVar 0x56113da5d218 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56113da86108 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56113da86078 <col:36> 'int' lvalue ParmVar 0x56113da5d298 'flags' 'int'
|     |             `-DeclRefExpr 0x56113da86098 <col:43> 'Args::Slot *' lvalue Var 0x56113da85f20 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56113da86580 <line:743:9, col:72>
|     | `-VarDecl 0x56113da861f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56113da86550 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56113da864c0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56113da86508 <col:56> 'T' lvalue ParmVar 0x56113da5d338 'variable' 'T &'
|     |     `-UnaryOperator 0x56113da86538 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56113da86528 <col:67> 'Args *' this
|     `-CallExpr 0x56113da86d60 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56113da865a8 <col:9> '<bound member function type>' ->postparse 0x56113da7d318
|       | `-CXXThisExpr 0x56113da86598 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56113da86d20 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56113da865d8 <col:19> 'T *' lvalue Var 0x56113da861f8 's' 'T *'
|       | `-ParenExpr 0x56113da86d00 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56113da86cd0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56113da86cb8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56113da86ca0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56113da86c80 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56113da86c50 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |     |       `-ImplicitCastExpr 0x56113da86c38 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56113da865f8 <col:25> 'String' lvalue Var 0x56113da85fb0 'str' 'String'
|       |     |-CallExpr 0x56113da86aa8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56113da86880 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56113da86980 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56113da869a0 <col:89> 'String' lvalue Var 0x56113da85fb0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56113da86a50 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56113da869e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|       |     | | `-DeclRefExpr 0x56113da869c0 <col:95> 'T *' lvalue Var 0x56113da861f8 's' 'T *'
|       |     | `-UnaryOperator 0x56113da86a90 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56113da86a80 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56113da86c18 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56113da86bf8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56113da86bc8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56113da86b78 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56113da86b08 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|       |         | | `-DeclRefExpr 0x56113da86ae8 <col:109> 'T *' lvalue Var 0x56113da861f8 's' 'T *'
|       |         | `-DeclRefExpr 0x56113da86ba8 <col:113> 'const V' lvalue ParmVar 0x56113da5d3d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56113da86be8 <col:120> 'bool' true
|       `-DeclRefExpr 0x56113da86d40 <col:128> 'Args::Slot *' lvalue Var 0x56113da85f20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da5dae8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56113da5d630 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da5d6a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da5da48 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56113da5d768 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5d7e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5d860 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56113da5d908 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56113da87988 <col:75, line:754:5>
|     |-DeclStmt 0x56113da86e38 <line:749:9, col:26>
|     | `-VarDecl 0x56113da86dd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56113da87950 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56113da87970 <line:750:13, col:58>
|       | `-VarDecl 0x56113da86e60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56113da87040 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56113da87010 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56113da86ff8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56113da86fd8 <col:26, col:58> 'String' (CXXTemporary 0x56113da86fd8)
|       |           `-CXXMemberCallExpr 0x56113da86f68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56113da86ed8 <col:26> '<bound member function type>' ->find 0x56113da7d108
|       |             | `-CXXThisExpr 0x56113da86ec8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56113da86fa0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da86f08 <col:31> 'const char *' lvalue ParmVar 0x56113da5d768 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56113da86fb8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da86f28 <col:40> 'int' lvalue ParmVar 0x56113da5d7e8 'flags' 'int'
|       |             `-DeclRefExpr 0x56113da86f48 <col:47> 'Args::Slot *' lvalue Var 0x56113da86dd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56113da870f8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56113da870e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56113da870c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56113da87090 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |       `-ImplicitCastExpr 0x56113da87078 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56113da87058 <col:20> 'String' lvalue Var 0x56113da86e60 'str' 'String'
|       `-CompoundStmt 0x56113da87930 <col:61, line:753:9>
|         |-DeclStmt 0x56113da874d0 <line:751:13, col:63>
|         | `-VarDecl 0x56113da87148 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56113da874a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56113da87410 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56113da87458 <col:47> 'T' lvalue ParmVar 0x56113da5d908 'variable' 'T &'
|         |     `-UnaryOperator 0x56113da87488 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56113da87478 <col:58> 'Args *' this
|         `-CallExpr 0x56113da87900 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56113da874f8 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|           | `-CXXThisExpr 0x56113da874e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56113da878c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56113da87528 <col:23> 'T *' lvalue Var 0x56113da87148 's' 'T *'
|           | `-CallExpr 0x56113da87880 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56113da87710 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56113da87758 <col:56> 'P' lvalue ParmVar 0x56113da5d860 'parser' 'P'
|           |   |-DeclRefExpr 0x56113da87778 <col:64> 'String' lvalue Var 0x56113da86e60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56113da87828 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56113da877b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|           |   | `-DeclRefExpr 0x56113da87798 <col:70> 'T *' lvalue Var 0x56113da87148 's' 'T *'
|           |   `-UnaryOperator 0x56113da87868 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56113da87858 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56113da878e0 <col:81> 'Args::Slot *' lvalue Var 0x56113da86dd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da667f8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56113da5db60 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56113da5dbd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56113da5dc58 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56113da66758 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56113da5dd20 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da5dda0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56113da5de18 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56113da5deb8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56113da5df58 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56113da8a9a8 <col:98, line:762:5>
|     |-DeclStmt 0x56113da87a20 <line:758:9, col:26>
|     | `-VarDecl 0x56113da879b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56113da87c40 <line:759:9, col:55>
|     | `-VarDecl 0x56113da87a48 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56113da87c28 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56113da87bf8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56113da87be0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56113da87bc0 <col:22, col:54> 'String' (CXXTemporary 0x56113da87bc0)
|     |           `-CXXMemberCallExpr 0x56113da87b50 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56113da87ac0 <col:22> '<bound member function type>' ->find 0x56113da7d108
|     |             | `-CXXThisExpr 0x56113da87ab0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56113da87b88 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56113da87af0 <col:27> 'const char *' lvalue ParmVar 0x56113da5dd20 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56113da87ba0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56113da87b10 <col:36> 'int' lvalue ParmVar 0x56113da5dda0 'flags' 'int'
|     |             `-DeclRefExpr 0x56113da87b30 <col:43> 'Args::Slot *' lvalue Var 0x56113da879b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56113da8a2f0 <line:760:9, col:59>
|     | `-VarDecl 0x56113da89f20 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56113da8a2c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56113da8a230 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56113da8a278 <col:43> 'T' lvalue ParmVar 0x56113da5deb8 'variable' 'T &'
|     |     `-UnaryOperator 0x56113da8a2a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56113da8a298 <col:54> 'Args *' this
|     `-CallExpr 0x56113da8a978 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56113da8a318 <col:9> '<bound member function type>' ->postparse 0x56113da7d318
|       | `-CXXThisExpr 0x56113da8a308 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56113da8a938 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56113da8a348 <col:19> 'T *' lvalue Var 0x56113da89f20 's' 'T *'
|       | `-ParenExpr 0x56113da8a918 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56113da8a8e8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56113da8a8d0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56113da8a8b8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56113da8a898 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56113da8a868 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |     |       `-ImplicitCastExpr 0x56113da8a850 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56113da8a368 <col:25> 'String' lvalue Var 0x56113da87a48 'str' 'String'
|       |     |-CallExpr 0x56113da8a6c0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56113da8a550 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56113da8a598 <col:59> 'P' lvalue ParmVar 0x56113da5de18 'parser' 'P'
|       |     | |-DeclRefExpr 0x56113da8a5b8 <col:67> 'String' lvalue Var 0x56113da87a48 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56113da8a668 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56113da8a5f8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|       |     | | `-DeclRefExpr 0x56113da8a5d8 <col:73> 'T *' lvalue Var 0x56113da89f20 's' 'T *'
|       |     | `-UnaryOperator 0x56113da8a6a8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56113da8a698 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56113da8a830 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56113da8a810 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56113da8a7e0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56113da8a790 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56113da8a720 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|       |         | | `-DeclRefExpr 0x56113da8a700 <col:87> 'T *' lvalue Var 0x56113da89f20 's' 'T *'
|       |         | `-DeclRefExpr 0x56113da8a7c0 <col:91> 'const V' lvalue ParmVar 0x56113da5df58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56113da8a800 <col:98> 'bool' true
|       `-DeclRefExpr 0x56113da8a958 <col:106> 'Args::Slot *' lvalue Var 0x56113da879b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da66e68 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56113da66878 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da668f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56113da66978 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56113da66dc8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56113da66a40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da66ac0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56113da66b38 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56113da66bd8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56113da66c78 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56113da8b988 <col:60, line:773:5>
|     |-DeclStmt 0x56113da8aa50 <line:767:9, col:26>
|     | `-VarDecl 0x56113da8a9e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56113da8b950 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56113da8b970 <line:768:13, col:58>
|       | `-VarDecl 0x56113da8aa78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56113da8ac58 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56113da8ac28 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56113da8ac10 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56113da8abf0 <col:26, col:58> 'String' (CXXTemporary 0x56113da8abf0)
|       |           `-CXXMemberCallExpr 0x56113da8ab80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56113da8aaf0 <col:26> '<bound member function type>' ->find 0x56113da7d108
|       |             | `-CXXThisExpr 0x56113da8aae0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56113da8abb8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da8ab20 <col:31> 'const char *' lvalue ParmVar 0x56113da66a40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56113da8abd0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da8ab40 <col:40> 'int' lvalue ParmVar 0x56113da66ac0 'flags' 'int'
|       |             `-DeclRefExpr 0x56113da8ab60 <col:47> 'Args::Slot *' lvalue Var 0x56113da8a9e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56113da8ad10 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56113da8acf8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56113da8acd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56113da8aca8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |       `-ImplicitCastExpr 0x56113da8ac90 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56113da8ac70 <col:20> 'String' lvalue Var 0x56113da8aa78 'str' 'String'
|       `-CompoundStmt 0x56113da8b928 <col:61, line:772:9>
|         |-DeclStmt 0x56113da8b050 <line:769:13, col:66>
|         | `-VarDecl 0x56113da8ad68 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56113da8b020 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56113da8af90 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56113da8afd8 <col:49> 'T1' lvalue ParmVar 0x56113da66bd8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56113da8b008 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56113da8aff8 <col:61> 'Args *' this
|         |-DeclStmt 0x56113da8b3c0 <line:770:13, col:66>
|         | `-VarDecl 0x56113da8b0d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56113da8b390 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56113da8b300 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56113da8b348 <col:49> 'T2' lvalue ParmVar 0x56113da66c78 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56113da8b378 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56113da8b368 <col:61> 'Args *' this
|         `-CallExpr 0x56113da8b8f8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56113da8b3e8 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|           | `-CXXThisExpr 0x56113da8b3d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56113da8b8b8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56113da8b458 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56113da8b418 <col:23> 'T1 *' lvalue Var 0x56113da8ad68 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56113da8b438 <col:29> 'T2 *' lvalue Var 0x56113da8b0d8 's2' 'T2 *'
|           | `-CallExpr 0x56113da8b870 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56113da8b640 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56113da8b688 <col:63> 'P' lvalue ParmVar 0x56113da66b38 'parser' 'P'
|           |   |-DeclRefExpr 0x56113da8b6a8 <col:71> 'String' lvalue Var 0x56113da8aa78 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56113da8b758 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56113da8b6e8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|           |   | `-DeclRefExpr 0x56113da8b6c8 <col:77> 'T1 *' lvalue Var 0x56113da8ad68 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56113da8b818 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56113da8b7a8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|           |   | `-DeclRefExpr 0x56113da8b788 <col:82> 'T2 *' lvalue Var 0x56113da8b0d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x56113da8b858 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56113da8b848 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56113da8b8d8 <col:94> 'Args::Slot *' lvalue Var 0x56113da8a9e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da67258 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56113da66ee8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da671b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56113da66fa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da67020 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56113da67098 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56113da8bea0 <col:67, line:780:5>
|     |-DeclStmt 0x56113da8ba20 <line:777:9, col:26>
|     | `-VarDecl 0x56113da8b9b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56113da8be68 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56113da8be88 <line:778:13, col:58>
|       | `-VarDecl 0x56113da8ba48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56113da8bc28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56113da8bbf8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56113da8bbe0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56113da8bbc0 <col:26, col:58> 'String' (CXXTemporary 0x56113da8bbc0)
|       |           `-CXXMemberCallExpr 0x56113da8bb50 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56113da8bac0 <col:26> '<bound member function type>' ->find 0x56113da7d108
|       |             | `-CXXThisExpr 0x56113da8bab0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56113da8bb88 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da8baf0 <col:31> 'const char *' lvalue ParmVar 0x56113da66fa0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56113da8bba0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56113da8bb10 <col:40> 'int' lvalue ParmVar 0x56113da67020 'flags' 'int'
|       |             `-DeclRefExpr 0x56113da8bb30 <col:47> 'Args::Slot *' lvalue Var 0x56113da8b9b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56113da8bce0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56113da8bcc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56113da8bca8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56113da8bc78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|       |       `-ImplicitCastExpr 0x56113da8bc60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56113da8bc40 <col:20> 'String' lvalue Var 0x56113da8ba48 'str' 'String'
|       `-CallExpr 0x56113da8be38 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56113da8bd08 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|         | `-CXXThisExpr 0x56113da8bcf8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56113da8bde8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56113da8bd58 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56113da8bd38 <col:23> 'P' lvalue ParmVar 0x56113da67098 'parser' 'P'
|         | |-DeclRefExpr 0x56113da8bda0 <col:36> 'String' lvalue Var 0x56113da8ba48 'str' 'String'
|         | `-UnaryOperator 0x56113da8bdd0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56113da8bdc0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56113da8be18 <col:49> 'Args::Slot *' lvalue Var 0x56113da8b9b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56113da675f8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56113da672c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56113da67558 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56113da67380 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da67400 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56113da67478 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56113da8c810 <col:71, line:792:5>
|     |-DeclStmt 0x56113da8bf38 <line:784:9, col:26>
|     | `-VarDecl 0x56113da8bed0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56113da8c008 <line:785:9, col:29>
|     | `-VarDecl 0x56113da8bf68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56113da8bff0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56113da8bfd0 <col:28> 'int' 1
|     |-WhileStmt 0x56113da8c6c0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56113da8c6e0 <line:786:16, col:61>
|     | | `-VarDecl 0x56113da8c030 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56113da8c210 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56113da8c1e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56113da8c1c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56113da8c1a8 <col:29, col:61> 'String' (CXXTemporary 0x56113da8c1a8)
|     | |           `-CXXMemberCallExpr 0x56113da8c138 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56113da8c0a8 <col:29> '<bound member function type>' ->find 0x56113da7d108
|     | |             | `-CXXThisExpr 0x56113da8c098 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56113da8c170 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8c0d8 <col:34> 'const char *' lvalue ParmVar 0x56113da67380 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56113da8c188 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8c0f8 <col:43> 'int' lvalue ParmVar 0x56113da67400 'flags' 'int'
|     | |             `-DeclRefExpr 0x56113da8c118 <col:50> 'Args::Slot *' lvalue Var 0x56113da8bed0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56113da8c2c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56113da8c2b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56113da8c290 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56113da8c260 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|     | |       `-ImplicitCastExpr 0x56113da8c248 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56113da8c228 <col:23> 'String' lvalue Var 0x56113da8c030 'str' 'String'
|     | `-CompoundStmt 0x56113da8c698 <col:64, line:790:9>
|     |   |-CallExpr 0x56113da8c420 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56113da8c2f0 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|     |   | | `-CXXThisExpr 0x56113da8c2e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56113da8c3d0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56113da8c340 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56113da8c320 <col:23> 'P' lvalue ParmVar 0x56113da67478 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56113da8c388 <col:36> 'String' lvalue Var 0x56113da8c030 'str' 'String'
|     |   | | `-UnaryOperator 0x56113da8c3b8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56113da8c3a8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56113da8c400 <col:49> 'Args::Slot *' lvalue Var 0x56113da8bed0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56113da8c5b8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56113da8c450 <col:13> 'int' lvalue Var 0x56113da8bf68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56113da8c5a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56113da8c580 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56113da8c4e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56113da8c4c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56113da8c4b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56113da8c470 <col:28> 'int' lvalue Var 0x56113da8bf68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56113da8c490 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56113da8c568 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56113da8c538 <col:49> 'bool' lvalue ->_read_status 0x56113da44750
|     |   |         `-ImplicitCastExpr 0x56113da8c518 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56113da8c508 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56113da8c668 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56113da8c5d8 <col:13> 'int' lvalue ParmVar 0x56113da67400 'flags' 'int'
|     |     `-UnaryOperator 0x56113da8c650 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56113da8c638 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56113da8c618 <col:23> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56113da8c7f0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56113da8c728 <col:9> 'bool' lvalue ->_read_status 0x56113da44750
|       | `-ImplicitCastExpr 0x56113da8c708 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56113da8c6f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56113da8c7d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56113da8c7b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56113da8c798 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56113da8c758 <col:25> 'int' lvalue Var 0x56113da8bf68 'read_status' 'int'
|           `-IntegerLiteral 0x56113da8c778 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56113da67ad8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56113da67668 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da676e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da67a38 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56113da677a8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da67828 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56113da678a0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56113da67948 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56113da8d7a0 <col:84, line:805:5>
|     |-DeclStmt 0x56113da8c8b8 <line:796:9, col:26>
|     | `-VarDecl 0x56113da8c850 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56113da8c988 <line:797:9, col:29>
|     | `-VarDecl 0x56113da8c8e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56113da8c970 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56113da8c950 <col:28> 'int' 1
|     |-DeclStmt 0x56113da8ccc0 <line:798:9, col:71>
|     | `-VarDecl 0x56113da8c9d8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56113da8cc90 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56113da8cc00 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56113da8cc48 <col:55> 'T' lvalue ParmVar 0x56113da67948 'variable' 'T &'
|     |     `-UnaryOperator 0x56113da8cc78 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56113da8cc68 <col:66> 'Args *' this
|     |-WhileStmt 0x56113da8d650 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56113da8d670 <line:799:16, col:61>
|     | | `-VarDecl 0x56113da8cce8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56113da8cec8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56113da8ce98 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56113da8ce80 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56113da8ce60 <col:29, col:61> 'String' (CXXTemporary 0x56113da8ce60)
|     | |           `-CXXMemberCallExpr 0x56113da8cdf0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56113da8cd60 <col:29> '<bound member function type>' ->find 0x56113da7d108
|     | |             | `-CXXThisExpr 0x56113da8cd50 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56113da8ce28 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8cd90 <col:34> 'const char *' lvalue ParmVar 0x56113da677a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56113da8ce40 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8cdb0 <col:43> 'int' lvalue ParmVar 0x56113da67828 'flags' 'int'
|     | |             `-DeclRefExpr 0x56113da8cdd0 <col:50> 'Args::Slot *' lvalue Var 0x56113da8c850 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56113da8cf80 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56113da8cf68 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56113da8cf48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56113da8cf18 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|     | |       `-ImplicitCastExpr 0x56113da8cf00 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56113da8cee0 <col:23> 'String' lvalue Var 0x56113da8cce8 'str' 'String'
|     | `-CompoundStmt 0x56113da8d628 <col:64, line:803:9>
|     |   |-CallExpr 0x56113da8d3b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56113da8cfa8 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|     |   | | `-CXXThisExpr 0x56113da8cf98 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56113da8d370 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56113da8cfd8 <col:23> 'T *' lvalue Var 0x56113da8c9d8 's' 'T *'
|     |   | | `-CallExpr 0x56113da8d330 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56113da8d1c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56113da8d208 <col:56> 'P' lvalue ParmVar 0x56113da678a0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56113da8d228 <col:64> 'String' lvalue Var 0x56113da8cce8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56113da8d2d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56113da8d268 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|     |   | |   | `-DeclRefExpr 0x56113da8d248 <col:70> 'T *' lvalue Var 0x56113da8c9d8 's' 'T *'
|     |   | |   `-UnaryOperator 0x56113da8d318 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56113da8d308 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56113da8d390 <col:81> 'Args::Slot *' lvalue Var 0x56113da8c850 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56113da8d548 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56113da8d3e0 <col:13> 'int' lvalue Var 0x56113da8c8e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56113da8d530 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56113da8d510 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56113da8d478 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56113da8d458 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56113da8d440 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56113da8d400 <col:28> 'int' lvalue Var 0x56113da8c8e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56113da8d420 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56113da8d4f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56113da8d4c8 <col:49> 'bool' lvalue ->_read_status 0x56113da44750
|     |   |         `-ImplicitCastExpr 0x56113da8d4a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56113da8d498 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56113da8d5f8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56113da8d568 <col:13> 'int' lvalue ParmVar 0x56113da67828 'flags' 'int'
|     |     `-UnaryOperator 0x56113da8d5e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56113da8d5c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56113da8d5a8 <col:23> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56113da8d780 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56113da8d6b8 <col:9> 'bool' lvalue ->_read_status 0x56113da44750
|       | `-ImplicitCastExpr 0x56113da8d698 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56113da8d688 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56113da8d760 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56113da8d740 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56113da8d728 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56113da8d6e8 <col:25> 'int' lvalue Var 0x56113da8c8e8 'read_status' 'int'
|           `-IntegerLiteral 0x56113da8d708 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56113da680b8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56113da67b50 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56113da67bc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56113da68018 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56113da67c88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56113da67d08 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56113da67d80 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56113da67ed0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56113da8e5a8 <col:87, line:821:5>
|     |-DeclStmt 0x56113da8d850 <line:809:9, col:26>
|     | `-VarDecl 0x56113da8d7e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56113da8d920 <line:810:9, col:29>
|     | `-VarDecl 0x56113da8d880 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56113da8d908 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56113da8d8e8 <col:28> 'int' 1
|     |-DeclStmt 0x56113da8db68 <line:811:9, col:38>
|     | `-VarDecl 0x56113da8da50 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56113da8db40 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56113da8dac8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56113da8db20 <col:29> 'Vector<T>' lvalue ParmVar 0x56113da67ed0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56113da8e458 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56113da8e478 <line:812:16, col:61>
|     | | `-VarDecl 0x56113da8db90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56113da8dd70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56113da8dd40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56113da8dd28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56113da8dd08 <col:29, col:61> 'String' (CXXTemporary 0x56113da8dd08)
|     | |           `-CXXMemberCallExpr 0x56113da8dc98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56113da8dc08 <col:29> '<bound member function type>' ->find 0x56113da7d108
|     | |             | `-CXXThisExpr 0x56113da8dbf8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56113da8dcd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8dc38 <col:34> 'const char *' lvalue ParmVar 0x56113da67c88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56113da8dce8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56113da8dc58 <col:43> 'int' lvalue ParmVar 0x56113da67d08 'flags' 'int'
|     | |             `-DeclRefExpr 0x56113da8dc78 <col:50> 'Args::Slot *' lvalue Var 0x56113da8d7e8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56113da8de28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56113da8de10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56113da8ddf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56113da8ddc0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56113d783348
|     | |       `-ImplicitCastExpr 0x56113da8dda8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56113da8dd88 <col:23> 'String' lvalue Var 0x56113da8db90 'str' 'String'
|     | `-CompoundStmt 0x56113da8e420 <col:64, line:819:9>
|     |   |-DeclStmt 0x56113da8dee8 <line:813:13, col:23>
|     |   | `-VarDecl 0x56113da8de50 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56113da8dec8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56113da8e068 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56113da8df10 <col:13> '<bound member function type>' ->postparse 0x56113da7d318
|     |   | | `-CXXThisExpr 0x56113da8df00 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56113da8e010 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56113da8df60 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56113da8df40 <col:23> 'P' lvalue ParmVar 0x56113da67d80 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56113da8dfa8 <col:36> 'String' lvalue Var 0x56113da8db90 'str' 'String'
|     |   | | |-DeclRefExpr 0x56113da8dfc8 <col:41> 'T' lvalue Var 0x56113da8de50 'sx' 'T'
|     |   | | `-UnaryOperator 0x56113da8dff8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56113da8dfe8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56113da8e048 <col:53> 'Args::Slot *' lvalue Var 0x56113da8d7e8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56113da8e1c0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56113da8e0f8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56113da8e0c8 <col:17> 'bool' lvalue ->_read_status 0x56113da44750
|     |   | |   `-ImplicitCastExpr 0x56113da8e0a8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56113da8e098 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56113da8e198 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56113da8e130 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56113da8e110 <col:17> 'Vector<T> *' lvalue Var 0x56113da8da50 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56113da8e178 <col:30> 'T' lvalue Var 0x56113da8de50 'sx' 'T'
|     |   |-BinaryOperator 0x56113da8e340 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56113da8e1d8 <col:13> 'int' lvalue Var 0x56113da8d880 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56113da8e328 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56113da8e308 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56113da8e270 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56113da8e250 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56113da8e238 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56113da8e1f8 <col:28> 'int' lvalue Var 0x56113da8d880 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56113da8e218 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56113da8e2f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56113da8e2c0 <col:49> 'bool' lvalue ->_read_status 0x56113da44750
|     |   |         `-ImplicitCastExpr 0x56113da8e2a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56113da8e290 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56113da8e3f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56113da8e360 <col:13> 'int' lvalue ParmVar 0x56113da67d08 'flags' 'int'
|     |     `-UnaryOperator 0x56113da8e3d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56113da8e3c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56113da8e3a0 <col:23> 'const int' lvalue Var 0x56113da4c098 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56113da8e588 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56113da8e4c0 <col:9> 'bool' lvalue ->_read_status 0x56113da44750
|       | `-ImplicitCastExpr 0x56113da8e4a0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56113da8e490 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56113da8e568 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56113da8e548 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56113da8e530 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56113da8e4f0 <col:25> 'int' lvalue Var 0x56113da8d880 'read_status' 'int'
|           `-IntegerLiteral 0x56113da8e510 <col:40> 'int' 1
|-AccessSpecDecl 0x56113da68130 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56113da68158 prev 0x56113da4a3d0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56113da68250 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56113da68340 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56113da8e5e0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56113da68430 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56113da8e5f0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56113da68530 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56113da685e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56113da68688 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56113da68688
| | `-ParmVarDecl 0x56113da68798 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56113da68f58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56113da68f58
|   `-ParmVarDecl 0x56113da69068 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56113da68808 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56113da68968 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56113da68b60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56113da68a10 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56113da68a88 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56113da8e7d0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56113da68e18 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56113da8e640 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56113da8e600 <col:20> 'void *' lvalue ParmVar 0x56113da68a10 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56113da68e80 '_slot' 'char *'
| | | `-CXXNewExpr 0x56113da8e6c8 <col:32, col:45> 'char *' array Function 0x56113d5a5d98 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56113da8e6b0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56113da8e680 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56113da68a88 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56113da68ee0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56113da8e790 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56113da8e750 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56113da68a88 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56113da8e850 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56113da68c60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56113da68430 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56113da8e8d8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56113da8e8b8 <line:840:13, col:22> 'void' array Function 0x56113d5a60f8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56113da8e8a0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56113da8e870 <col:22> 'char *' lvalue ->_slot 0x56113da68e80
| |         `-CXXThisExpr 0x56113da8e860 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56113da68d60 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56113da68530 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56113da8eac8 <col:22, line:844:9>
| |   `-CallExpr 0x56113da8ea30 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56113da8ea18 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56113da8e9f8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56113d6b1d98 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56113da8ea68 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56113da8e948 <col:20> 'void *' lvalue ->_ptr 0x56113da68e18
| |     |   `-CXXThisExpr 0x56113da8e938 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56113da8ea98 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56113da8ea80 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56113da8e988 <col:26> 'char *' lvalue ->_slot 0x56113da68e80
| |     |     `-CXXThisExpr 0x56113da8e978 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56113da8eab0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56113da8e9c8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56113da68ee0
| |         `-CXXThisExpr 0x56113da8e9b8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56113da68e18 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56113da68e80 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56113da68ee0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56113da690d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56113da690d8
| | `-ParmVarDecl 0x56113da691e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56113da69288 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56113da69288
|   `-ParmVarDecl 0x56113da69398 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56113da69538 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56113da69408 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56113da694a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56113da697d0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56113da699c8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56113da69898 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56113da69b48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56113da8eb00 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56113da8eae0 <col:20> 'T *' lvalue ParmVar 0x56113da69898 'ptr' 'T *'
|   | `-CompoundStmt 0x56113da8eb50 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56113da69a98 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56113da68530 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56113da8ed00 <col:22, line:857:9>
|   |   `-CallExpr 0x56113da8ecd0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56113da8eb60 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56113d76a4c8 0x56113d7147f8
|   |     |-CXXOperatorCallExpr 0x56113da8ec60 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56113da8ebf0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56113d977478 0x56113d977098 0x56113d976cc8 0x56113d9768e8 0x56113d976508 0x56113d976138
|   |     | `-MemberExpr 0x56113da8ebc0 <col:29> 'T *' lvalue ->_ptr 0x56113da69b48
|   |     |   `-CXXThisExpr 0x56113da8ebb0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56113da8eca0 <col:35> 'T' lvalue ->_slot 0x56113da69ba8
|   |       `-CXXThisExpr 0x56113da8ec90 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56113da69b48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56113da69ba8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56113da69c10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56113da69d10 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56113da69d60 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113da69cf0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56113da69cd0 <col:31> 'int' 48
|-FieldDecl 0x56113da69d88 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56113da69de8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56113da69e48 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56113da69f80 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56113da7c9b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56113da7ca10 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56113da7cac0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56113da7cce8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56113da7cbf0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56113da7ce38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56113da7cda8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56113da7d108 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56113da7cef8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56113da7cf78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56113da7d020 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56113da7d318 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56113da7d1d0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56113da7d248 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56113da7d3e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56113da7d538 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56113da7d4a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56113da7d8c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56113da7d5f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56113da7d678 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56113da7d720 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56113da7d7d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56113da7daf0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56113da7d9a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56113da7da18 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56113da7de08 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56113da7dba0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56113da7dd68 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56113da7dc78 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d7731f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d773308 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56113d773398 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56113d773468 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56113d773550 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d773768 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56113d773610 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d773918 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56113d773820 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56113d773a60 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56113d7739d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56113d773ba8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56113d773b18 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d773cf0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56113d773c60 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d773db8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56113d773f00 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56113d773e70 <col:28> col:31 'int'
|-CXXMethodDecl 0x56113d773fc8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56113d774110 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56113d774080 <col:28> col:31 'int'
|-CXXMethodDecl 0x56113d774288 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56113d7741c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d7743d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56113d774340 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d774498 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56113d774658 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56113d774548 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56113d7745c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d7748a8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56113d774718 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d774790 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56113d774958 <col:86> "" ""
|-CXXMethodDecl 0x56113d774bc8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56113d774a38 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56113d774ab0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d774d78 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56113d774c88 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56113d774f28 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56113d774e30 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56113d7751f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56113d774fe0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56113d775058 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56113d7750d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d7754d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56113d7752c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56113d775338 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d7753b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56113d775590 <col:115> "" ""
|-AccessSpecDecl 0x56113d775600 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56113d775638 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d776b50 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56113d776b50
| `-ParmVarDecl 0x56113d776c58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56113d776cf8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56113d776cf8
| `-ParmVarDecl 0x56113d776e08 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56113d7ac438 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56113d99e230 <col:7>
|-CXXConstructorDecl 0x56113d7ac510 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56113d7ac510
| `-ParmVarDecl 0x56113d7ac628 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56113d7ac698 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56113d7ac698
| `-ParmVarDecl 0x56113d7ac7a8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56113d9a0c30 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d98cdd8 prev 0x56113d981fe0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d98ced0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56113d98cfc0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56113d98d0e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56113d98d268 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56113d98d3e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56113d98d568 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56113d99e398 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56113d99ec08 <col:11>
|-CXXDestructorDecl 0x56113d99e470 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56113d99e5a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56113d99e5a8
| `-ParmVarDecl 0x56113d99e6b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56113d99e758 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56113d99e758
| `-ParmVarDecl 0x56113d99e868 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56113d9a1628 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56113d9a1738 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56113d9a19b8 <col:11>
|   `-ReturnStmt 0x56113d9a19a8 <col:11>
|     `-UnaryOperator 0x56113d9a1990 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56113d9a1980 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56113d9a17a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56113d9a17a8
  `-ParmVarDecl 0x56113d9a18b8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d98d5d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113d98d6e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56113d98d788 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56113d98d7f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56113d98d858 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56113d98d8c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56113d98d920 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56113d98d9e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56113d98da40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56113d98daa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56113d99e2a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56113d98d788 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56113d99ec18 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56113d99ec70 <col:12>
|-CXXConstructorDecl 0x56113d99e8d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56113d99e8d8
| `-ParmVarDecl 0x56113d99e9e8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56113d99ea88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56113d99ea88
| `-ParmVarDecl 0x56113d99eb98 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56113d9a0d10 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d97b6f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56113d97b808 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56113d97b898 <col:16, col:22> col:16 public
|-EnumDecl 0x56113d97b8c0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56113d97b9c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56113d97baa0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d97b9a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56113d97b980 <col:21> 'int' 28
| `-EnumConstantDecl 0x56113d97ba50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56113d97bab8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d97ba30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56113d97ba10 <col:22> 'int' 64
|-CXXMethodDecl 0x56113d97bdf8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56113d97bae0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d97bb60 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56113d97bbd8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d97bc50 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97beb8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56113d97c0b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56113d97bf30 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56113d97bfa8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97c168 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56113d97c2c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56113d97c1d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97c370 <col:72> warn_unused_result ""
|-TypedefDecl 0x56113d97c6d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56113d97c660 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56113d97c600 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56113d97c5c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56113d4522d0 'void'
|       |-PointerType 0x56113d6fba90 'unsigned char *'
|       | `-BuiltinType 0x56113d4523d0 'unsigned char'
|       |-TypedefType 0x56113d4f7de0 'size_t' sugar
|       | |-Typedef 0x56113d4c2b20 'size_t'
|       | `-BuiltinType 0x56113d452430 'unsigned long'
|       `-PointerType 0x56113d452ad0 'void *'
|         `-BuiltinType 0x56113d4522d0 'void'
|-CXXMethodDecl 0x56113d97cb48 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56113d97c740 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56113d97c7b8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d97c850 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56113d97c8d0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56113d997240 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56113d997228 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56113d9971f0 <col:58> 'int' 0
| |-ParmVarDecl 0x56113d97c950 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56113d997268 <col:76> 'int' 0
| |-ParmVarDecl 0x56113d97c9d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56113d997288 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56113d97cc18 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56113d97cc98 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56113d97cd58 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56113d97cdf8 <col:20>
| `-OptimizeNoneAttr 0x56113d97ce50 <col:30>
|-CXXMethodDecl 0x56113d97cec8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56113d97cf68 <col:20>
| `-OptimizeNoneAttr 0x56113d97cfc0 <col:30>
|-CXXMethodDecl 0x56113d97d038 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56113d97d0d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56113d97d188 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56113d97d228 <col:20>
| |-OptimizeNoneAttr 0x56113d97d280 <col:30>
| `-WarnUnusedResultAttr 0x56113d97d2a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56113d97d300 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56113d97d3a0 <col:20>
| `-OptimizeNoneAttr 0x56113d97d3f8 <col:30>
|-CXXMethodDecl 0x56113d97d448 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56113d97d4e8 <col:20>
| `-OptimizeNoneAttr 0x56113d97d540 <col:30>
|-CXXMethodDecl 0x56113d97d588 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56113d97d628 <col:20>
| `-OptimizeNoneAttr 0x56113d97d680 <col:30>
|-CXXMethodDecl 0x56113d97d6c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d97d788 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d97d850 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56113d97d918 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56113d97d9d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d97daf8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56113d997350 <col:54, line:99:5>
|   `-ReturnStmt 0x56113d997340 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56113d997328 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56113d9972f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56113d98ddd8
|         `-CXXThisExpr 0x56113d9972e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56113d97dc98 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56113d97dba8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56113d997400 <col:67, line:103:5>
|   `-BinaryOperator 0x56113d9973e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56113d997378 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56113d98ddd8
|     | `-CXXThisExpr 0x56113d997368 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56113d9973c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56113d9973a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56113d97dba8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56113d97dd90 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56113d997480 <col:33, line:107:5>
|   `-ReturnStmt 0x56113d997470 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56113d997458 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56113d997428 <col:16> 'void *' lvalue ->_destructor_argument 0x56113d98de40
|         `-CXXThisExpr 0x56113d997418 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56113d97de50 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56113d997ab0 <col:25, line:113:5>
|   |-ParenExpr 0x56113d9977f8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56113d9977c8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56113d997538 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56113d997510 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56113d9974d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56113d9974a8 <col:24> '<bound member function type>' ->shared 0x56113d97cec8
|   |   |       `-ImplicitCastExpr 0x56113d9974f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56113d997498 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56113d997598 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d997578 <col:42> 'int' 0
|   |   `-CallExpr 0x56113d997728 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56113d997710 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d9976f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d997768 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d997608 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56113d997780 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d997630 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d997798 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d997668 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56113d9977b0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d9976d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d9976c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d997688 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56113d9979f8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56113d997828 <col:2> 'unsigned char *' lvalue ->_head 0x56113d98dbe0
|   | | `-CXXThisExpr 0x56113d997818 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56113d9979e0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56113d9979c0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56113d997868 <col:10> 'unsigned char *' lvalue ->_data 0x56113d98dc48
|   |     | `-CXXThisExpr 0x56113d997858 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56113d9979a8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56113d997988 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56113d9978a8 <col:18> 'unsigned char *' lvalue ->_tail 0x56113d98dcb0
|   |         | `-CXXThisExpr 0x56113d997898 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56113d997970 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56113d997950 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56113d9978e8 <col:26> 'unsigned char *' lvalue ->_end 0x56113d98dd18
|   |             | `-CXXThisExpr 0x56113d9978d8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56113d997938 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56113d997918 <col:33> 'int' 0
|   `-BinaryOperator 0x56113d997a90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56113d997a28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56113d98ddd8
|     | `-CXXThisExpr 0x56113d997a18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56113d997a78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56113d997a58 <col:16> 'int' 0
|-CXXMethodDecl 0x56113d97df90 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56113d97df00 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d97e038 <col:20>
| |-OptimizeNoneAttr 0x56113d97e090 <col:30>
| `-WarnUnusedResultAttr 0x56113d97e0b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56113d97e188 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56113d97e0f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d97e230 <col:20>
| |-OptimizeNoneAttr 0x56113d97e288 <col:30>
| `-WarnUnusedResultAttr 0x56113d97e2b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56113d97e3e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56113d97e2f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97e490 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56113d97e590 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56113d97e500 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d97e638 <col:20>
| `-OptimizeNoneAttr 0x56113d97e690 <col:30>
|-CXXMethodDecl 0x56113d97e758 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56113d97e6c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97e800 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56113d97e900 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56113d97e870 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56113d97e9a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56113d97eaa8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56113d97ea18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d97eb50 <col:20>
| `-OptimizeNoneAttr 0x56113d97eba8 <col:30>
|-CXXMethodDecl 0x56113d97ed38 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56113d97ebe8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56113d97ec60 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56113d9972a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56113d97ede8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56113d97efe8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56113d97ee60 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56113d97eed8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d97f1f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56113d97f0a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56113d97f120 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d97f408 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56113d97f2b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56113d97f338 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56113d9972b8 <col:39> 'int' 0
|-CXXMethodDecl 0x56113d97f4d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56113d97f5a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56113d97f668 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56113d97f728 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d97f7f0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56113d97f938 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56113d97f8a8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56113d97fb08 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56113d97f9f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56113d97fa70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d97fbd8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56113d97fc98 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56113d97fd38 <col:20>
| `-OptimizeNoneAttr 0x56113d97fd90 <col:30>
|-CXXMethodDecl 0x56113d97fde0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56113d97fe80 <col:20>
| `-OptimizeNoneAttr 0x56113d97fed8 <col:30>
|-CXXMethodDecl 0x56113d97ff28 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56113d97ffe8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d9800b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56113d980150 <col:20>
| `-OptimizeNoneAttr 0x56113d9801a8 <col:30>
|-CXXMethodDecl 0x56113d9802f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56113d9801e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56113d980260 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d980448 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56113d9803b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d980520 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56113d9805e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56113d980680 <col:20>
| `-OptimizeNoneAttr 0x56113d9806d8 <col:30>
|-CXXMethodDecl 0x56113d980728 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56113d9807c8 <col:20>
| `-OptimizeNoneAttr 0x56113d980820 <col:30>
|-CXXMethodDecl 0x56113d980870 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56113d980938 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56113d9809d8 <col:20>
| `-OptimizeNoneAttr 0x56113d980a30 <col:30>
|-CXXMethodDecl 0x56113d980a78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56113d980b98 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56113d980d08 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56113d980c48 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56113d980df8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56113d980e98 <col:20>
| `-OptimizeNoneAttr 0x56113d980ef0 <col:30>
|-CXXMethodDecl 0x56113d980f40 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56113d981000 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56113d981238 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56113d9810b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56113d981128 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d9812e8 <col:20>
| `-OptimizeNoneAttr 0x56113d981340 <col:30>
|-CXXMethodDecl 0x56113d9813e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56113d981488 <col:20>
| `-OptimizeNoneAttr 0x56113d9814e0 <col:30>
|-CXXMethodDecl 0x56113d981530 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56113d9815d0 <col:20>
| `-OptimizeNoneAttr 0x56113d981628 <col:30>
|-CXXMethodDecl 0x56113d981670 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56113d981710 <col:20>
| `-OptimizeNoneAttr 0x56113d981768 <col:30>
|-CXXMethodDecl 0x56113d981868 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56113d9817a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56113d981910 <col:20>
| `-OptimizeNoneAttr 0x56113d981968 <col:30>
|-CXXMethodDecl 0x56113d981b28 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56113d9819a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56113d981a18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d981bd8 <col:20>
| `-OptimizeNoneAttr 0x56113d981c30 <col:30>
|-CXXMethodDecl 0x56113d981cd8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56113d981df8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56113d981f18 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56113d981fb8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56113d981fe0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56113d982108 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56113d9821a8 <col:20>
| `-OptimizeNoneAttr 0x56113d982200 <col:30>
|-CXXMethodDecl 0x56113d9822a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56113d982348 <col:20>
| `-OptimizeNoneAttr 0x56113d9823a0 <col:30>
|-AccessSpecDecl 0x56113d9823c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56113d9823f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56113d9824f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56113d982540 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d9824d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56113d9824b0 <col:14> 'int' 48
|-CXXMethodDecl 0x56113d9825a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56113d982648 <col:20>
| `-OptimizeNoneAttr 0x56113d9826a0 <col:30>
|-CXXMethodDecl 0x56113d982718 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56113d9827b8 <col:20>
| `-OptimizeNoneAttr 0x56113d982810 <col:30>
|-CXXMethodDecl 0x56113d9828d8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56113d982848 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56113d982a78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56113d982c18 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56113d982b28 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56113d982cc0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56113d982dc0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d983170 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d982da0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56113d982d80 <col:9> 'int' 0
| |-EnumConstantDecl 0x56113d982e50 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d983188 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d982e30 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56113d982e10 <col:14> 'int' 1
| |-EnumConstantDecl 0x56113d982ee0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d9831a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d982ec0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56113d982ea0 <col:14> 'int' 2
| |-EnumConstantDecl 0x56113d982f70 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d9831b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d982f50 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56113d982f30 <col:14> 'int' 3
| |-EnumConstantDecl 0x56113d983000 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d9831d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d982fe0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56113d982fc0 <col:13> 'int' 4
| |-EnumConstantDecl 0x56113d983090 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56113d9831e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d983070 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56113d983050 <col:13> 'int' 5
| `-EnumConstantDecl 0x56113d983120 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56113d983200 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d983100 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56113d9830e0 <col:14> 'int' 6
|-CXXMethodDecl 0x56113d983268 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56113d983308 <col:20>
| `-OptimizeNoneAttr 0x56113d983360 <col:30>
|-CXXMethodDecl 0x56113d983458 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56113d983398 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56113d983500 <col:20>
| `-OptimizeNoneAttr 0x56113d983558 <col:30>
|-CXXMethodDecl 0x56113d9835c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56113d9836f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56113d983868 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56113d9837a0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56113d983930 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56113d9839f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56113d983b38 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56113d983aa8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56113d983be0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56113d983ce0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56113d983ee0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d983cc0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56113d983ca0 <col:23> 'int' 0
| |-EnumConstantDecl 0x56113d983d70 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56113d983ef8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d983d50 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56113d983d30 <col:45> 'int' 4
| |-EnumConstantDecl 0x56113d983e00 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56113d983f10 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d983de0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56113d983dc0 <col:24> 'int' 0
| `-EnumConstantDecl 0x56113d983e90 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56113d983f28 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d983e70 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56113d983e50 <col:47> 'int' 16
|-CXXMethodDecl 0x56113d983f88 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56113d9840f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56113d984038 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56113d9841a0 <col:20>
| `-OptimizeNoneAttr 0x56113d9841f8 <col:30>
|-CXXMethodDecl 0x56113d984248 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56113d997bd0 <col:18, col:36>
|   `-ReturnStmt 0x56113d997bc0 <col:20, col:33>
|     `-ImplicitCastExpr 0x56113d997ba8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56113d997b88 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56113d997b58 <col:27> '<bound member function type>' ->xanno 0x56113d9822a8
|           `-CXXThisExpr 0x56113d997b48 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56113d984340 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56113d997ce0 <col:30, col:48>
|   `-ReturnStmt 0x56113d997cd0 <col:32, col:45>
|     `-ImplicitCastExpr 0x56113d997cb8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56113d997c98 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56113d997c68 <col:39> '<bound member function type>' ->xanno 0x56113d982108
|           `-CXXThisExpr 0x56113d997c58 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56113d984428 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56113d997e78 <col:24, col:50>
|   `-ReturnStmt 0x56113d997e68 <col:26, col:47>
|     `-UnaryOperator 0x56113d997e50 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d997e30 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56113d997e18 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d997dc8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56113d98d0e8
|         |   `-CXXMemberCallExpr 0x56113d997da8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56113d997d78 <col:34> '<bound member function type>' ->xanno 0x56113d9822a8
|         |       `-CXXThisExpr 0x56113d997d68 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56113d997df8 <col:46> 'int' 0
|-CXXMethodDecl 0x56113d984530 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56113d998048 <col:36, col:62>
|   `-ReturnStmt 0x56113d998038 <col:38, col:59>
|     `-UnaryOperator 0x56113d998020 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d998000 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56113d997fe8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d997f60 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56113d98d0e8
|         |   `-CXXMemberCallExpr 0x56113d997f40 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56113d997f10 <col:46> '<bound member function type>' ->xanno 0x56113d982108
|         |       `-CXXThisExpr 0x56113d997f00 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56113d997f90 <col:58> 'int' 0
|-CXXMethodDecl 0x56113d984648 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56113d9981e0 <col:26, col:53>
|   `-ReturnStmt 0x56113d9981d0 <col:28, col:50>
|     `-UnaryOperator 0x56113d9981b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d998198 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56113d998180 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d998130 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56113d98d3e8
|         |   `-CXXMemberCallExpr 0x56113d998110 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56113d9980e0 <col:36> '<bound member function type>' ->xanno 0x56113d9822a8
|         |       `-CXXThisExpr 0x56113d9980d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56113d998160 <col:49> 'int' 0
|-CXXMethodDecl 0x56113d984768 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56113d9983b8 <col:38, col:65>
|   `-ReturnStmt 0x56113d9983a8 <col:40, col:62>
|     `-UnaryOperator 0x56113d998390 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56113d998370 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56113d998358 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d9982c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56113d98d3e8
|         |   `-CXXMemberCallExpr 0x56113d9982a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56113d998278 <col:48> '<bound member function type>' ->xanno 0x56113d982108
|         |       `-CXXThisExpr 0x56113d998268 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56113d9982f8 <col:61> 'int' 0
|-CXXMethodDecl 0x56113d984918 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56113d984820 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56113d998a88 <col:34, line:463:5>
|   |-ParenExpr 0x56113d9988d0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56113d9988a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56113d998508 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d9984d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d998428 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d998410 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d9983d0 <col:23> 'int' lvalue ParmVar 0x56113d984820 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d9983f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d9984b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d998488 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d998448 <col:33> 'int' lvalue ParmVar 0x56113d984820 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56113d9984a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56113d998468 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56113d998568 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d998548 <col:56> 'int' 0
|   |   `-CallExpr 0x56113d998800 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56113d9987e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d9987c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d998840 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d998658 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56113d998858 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d998688 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d998870 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d9986c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56113d998888 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d9987b0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d998798 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d998758 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56113d998a78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56113d998a60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56113d998a40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56113d998a10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56113d9989c0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56113d98d0e8
|         |   `-CXXMemberCallExpr 0x56113d9989a0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56113d998970 <col:9> '<bound member function type>' ->xanno 0x56113d982108
|         |       `-CXXThisExpr 0x56113d998960 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56113d998a28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56113d9989f0 <col:21> 'int' lvalue ParmVar 0x56113d984820 'i' 'int'
|-CXXMethodDecl 0x56113d984b68 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56113d9849d8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56113d984a50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56113d999118 <col:40, line:472:5>
|   |-ParenExpr 0x56113d998f30 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56113d998f00 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56113d998be0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d998bb0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d998b00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d998ae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d998aa8 <col:23> 'int' lvalue ParmVar 0x56113d9849d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d998ac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d998b90 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d998b60 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d998b20 <col:33> 'int' lvalue ParmVar 0x56113d9849d8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56113d998b78 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56113d998b40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56113d998c40 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d998c20 <col:56> 'int' 0
|   |   `-CallExpr 0x56113d998e60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56113d998e48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d998e28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d998ea0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d998cb0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56113d998eb8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d998ce0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d998ed0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d998d18 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56113d998ee8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d998e10 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d998df8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d998db8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56113d9990f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56113d9990a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56113d999070 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56113d999020 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56113d98d0e8
|     | |   `-CXXMemberCallExpr 0x56113d999000 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56113d998fd0 <col:2> '<bound member function type>' ->xanno 0x56113d9822a8
|     | |       `-CXXThisExpr 0x56113d998fc0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56113d999088 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56113d999050 <col:14> 'int' lvalue ParmVar 0x56113d9849d8 'i' 'int'
|     `-ImplicitCastExpr 0x56113d9990e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56113d9990c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56113d984a50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56113d984d28 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56113d984c30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56113d999898 <col:36, line:485:5>
|   |-ParenExpr 0x56113d999600 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d9995d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d9992b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d999280 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d999190 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d999178 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d999138 <col:23> 'int' lvalue ParmVar 0x56113d984c30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d999158 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d999260 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d999248 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d9991b0 <col:33> 'int' lvalue ParmVar 0x56113d984c30 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d999228 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d999210 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d9991d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d9991f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56113d999310 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d9992f0 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d999530 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d999518 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d9994f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d999570 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d999380 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56113d999588 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d9993b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d9995a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d9993f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56113d9995b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d9994e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d9994c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d999488 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56113d999888 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56113d999870 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56113d999858 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d999828 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56113d9997c8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d999798 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d999710 <col:61, col:70> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d9996f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d9996c0 <col:61> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d9996b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d9997b0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d999740 <col:74> 'int' lvalue ParmVar 0x56113d984c30 'i' 'int'
|-CXXMethodDecl 0x56113d984f78 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56113d984de8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56113d984e60 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56113d999fe8 <col:42, line:500:5>
|   |-ParenExpr 0x56113d999d80 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d999d50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d999a30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d999a00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d999910 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d9998f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d9998b8 <col:23> 'int' lvalue ParmVar 0x56113d984de8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d9998d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d9999e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d9999c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d999930 <col:33> 'int' lvalue ParmVar 0x56113d984de8 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d9999a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d999990 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d999950 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d999970 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56113d999a90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d999a70 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d999cb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d999c98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d999c78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d999cf0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d999b00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56113d999d08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d999b38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d999d20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d999b70 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56113d999d38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d999c60 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d999c48 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d999c08 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56113d999fc8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56113d999f78 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56113d999f48 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56113d999ef0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56113d999ec0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56113d999e70 <col:48, col:57> 'char [48]' lvalue ->c 0x56113d98cfc0
|     |     |   `-CXXMemberCallExpr 0x56113d999e50 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56113d999e20 <col:48> '<bound member function type>' ->xanno 0x56113d9822a8
|     |     |       `-CXXThisExpr 0x56113d999e10 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56113d999ed8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56113d999ea0 <col:61> 'int' lvalue ParmVar 0x56113d984de8 'i' 'int'
|     `-ImplicitCastExpr 0x56113d999fb0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56113d999f90 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56113d984e60 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56113d985138 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56113d985040 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56113d99a748 <col:35, line:513:5>
|   |-ParenExpr 0x56113d99a458 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99a428 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99a180 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99a150 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99a060 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99a048 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99a008 <col:23> 'int' lvalue ParmVar 0x56113d985040 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99a028 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99a130 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99a118 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99a080 <col:33> 'int' lvalue ParmVar 0x56113d985040 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99a0f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99a0e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99a0a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99a0c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56113d99a1e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99a1c0 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99a388 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99a370 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99a350 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99a3c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99a250 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56113d99a3e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99a288 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99a3f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99a2c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56113d99a410 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99a338 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99a320 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99a2e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56113d99a738 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56113d99a720 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56113d99a708 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d99a6d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56113d99a650 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d99a620 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d99a5d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d99a5b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d99a580 <col:60> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d99a570 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d99a638 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d99a600 <col:73> 'int' lvalue ParmVar 0x56113d985040 'i' 'int'
|-CXXMethodDecl 0x56113d985388 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56113d9851f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56113d985270 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56113d99ae68 <col:41, line:528:5>
|   |-ParenExpr 0x56113d99abf0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99abc0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99a8e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99a8b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99a7c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99a7a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99a768 <col:23> 'int' lvalue ParmVar 0x56113d9851f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99a788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99a890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99a878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99a7e0 <col:33> 'int' lvalue ParmVar 0x56113d9851f8 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99a858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99a840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99a800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99a820 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56113d99a940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99a920 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99ab20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99ab08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99aae8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99ab60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99a9b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56113d99ab78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99a9e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99ab90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99aa20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56113d99aba8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99aad0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99aab8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99aa78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56113d99ae48 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56113d99adf8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56113d99adc8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56113d99ad70 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56113d99ad30 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56113d99ace0 <col:47, col:56> 'char [48]' lvalue ->c 0x56113d98cfc0
|     |     |   `-CXXMemberCallExpr 0x56113d99acc0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56113d99ac90 <col:47> '<bound member function type>' ->xanno 0x56113d9822a8
|     |     |       `-CXXThisExpr 0x56113d99ac80 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56113d99ad48 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56113d99ad10 <col:60> 'int' lvalue ParmVar 0x56113d9851f8 'i' 'int'
|     `-ImplicitCastExpr 0x56113d99ae30 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56113d99ae10 <col:65> 'int16_t':'short' lvalue ParmVar 0x56113d985270 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56113d985548 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56113d985450 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56113d99b538 <col:36, line:541:5>
|   |-ParenExpr 0x56113d99b2d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99b2a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99b000 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99afd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99aee0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99aec8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99ae88 <col:23> 'int' lvalue ParmVar 0x56113d985450 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99aea8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99afb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99af98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99af00 <col:33> 'int' lvalue ParmVar 0x56113d985450 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99af78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99af60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99af20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99af40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56113d99b060 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99b040 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99b208 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99b1f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99b1d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99b248 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99b0d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56113d99b260 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99b108 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99b278 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99b140 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56113d99b290 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99b1b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99b1a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99b160 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56113d99b528 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56113d99b510 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56113d99b4f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d99b4c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56113d99b470 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d99b440 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d99b3f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d99b3d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d99b3a0 <col:61> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d99b390 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d99b458 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d99b420 <col:74> 'int' lvalue ParmVar 0x56113d985450 'i' 'int'
|-CXXMethodDecl 0x56113d985718 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56113d985608 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56113d985680 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56113d9857c8 <col:20>
| `-OptimizeNoneAttr 0x56113d985820 <col:30>
|-CXXMethodDecl 0x56113d985958 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56113d985860 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56113d99bc08 <col:35, line:562:5>
|   |-ParenExpr 0x56113d99b9a8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99b978 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99b6d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99b6a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99b5b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99b598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99b558 <col:23> 'int' lvalue ParmVar 0x56113d985860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99b578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99b680 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99b668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99b5d0 <col:33> 'int' lvalue ParmVar 0x56113d985860 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99b648 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99b630 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99b5f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99b610 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56113d99b730 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99b710 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99b8d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99b8c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99b8a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99b918 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99b7a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56113d99b930 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99b7d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99b948 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99b810 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56113d99b960 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99b888 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99b870 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99b830 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56113d99bbf8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56113d99bbe0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56113d99bbc8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d99bb98 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56113d99bb40 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d99bb10 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d99bac0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d99baa0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d99ba70 <col:60> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d99ba60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d99bb28 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d99baf0 <col:73> 'int' lvalue ParmVar 0x56113d985860 'i' 'int'
|-CXXMethodDecl 0x56113d985b68 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56113d985a18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56113d985a90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56113d99c2e8 <col:41, line:577:5>
|   |-ParenExpr 0x56113d99c078 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99c048 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99bda0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99bd70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99bc80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99bc68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99bc28 <col:23> 'int' lvalue ParmVar 0x56113d985a18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99bc48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99bd50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99bd38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99bca0 <col:33> 'int' lvalue ParmVar 0x56113d985a18 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99bd18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99bd00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99bcc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99bce0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56113d99be00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99bde0 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99bfa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99bf90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99bf70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99bfe8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99be70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56113d99c000 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99bea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99c018 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99bee0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56113d99c030 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99bf58 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99bf40 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99bf00 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56113d99c2c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56113d99c278 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56113d99c248 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56113d99c1e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56113d99c1b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56113d99c168 <col:47, col:56> 'char [48]' lvalue ->c 0x56113d98cfc0
|     |     |   `-CXXMemberCallExpr 0x56113d99c148 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56113d99c118 <col:47> '<bound member function type>' ->xanno 0x56113d9822a8
|     |     |       `-CXXThisExpr 0x56113d99c108 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56113d99c1d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56113d99c198 <col:60> 'int' lvalue ParmVar 0x56113d985a18 'i' 'int'
|     `-ImplicitCastExpr 0x56113d99c2b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56113d99c290 <col:65> 'int32_t':'int' lvalue ParmVar 0x56113d985a90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56113d985d28 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56113d985c30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56113d99ca18 <col:36, line:591:5>
|   |-ParenExpr 0x56113d99c758 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99c728 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99c480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99c450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99c360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99c348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99c308 <col:23> 'int' lvalue ParmVar 0x56113d985c30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99c328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99c430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99c418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99c380 <col:33> 'int' lvalue ParmVar 0x56113d985c30 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99c3f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99c3e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99c3a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99c3c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56113d99c4e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99c4c0 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99c688 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99c670 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99c650 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99c6c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99c550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56113d99c6e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99c588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99c6f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99c5c0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56113d99c710 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99c638 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99c620 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99c5e0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56113d99ca08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56113d99c9f0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56113d99c9d8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d99c9a8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56113d99c920 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d99c8f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d99c8a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d99c880 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d99c850 <col:61> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d99c840 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d99c908 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d99c8d0 <col:74> 'int' lvalue ParmVar 0x56113d985c30 'i' 'int'
|-CXXMethodDecl 0x56113d985f78 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56113d985de8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56113d985e60 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56113d99d0f8 <col:42, line:606:5>
|   |-ParenExpr 0x56113d99ce88 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56113d99ce58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99cbb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99cb80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99ca90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99ca78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99ca38 <col:23> 'int' lvalue ParmVar 0x56113d985de8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99ca58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99cb60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56113d99cb48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99cab0 <col:33> 'int' lvalue ParmVar 0x56113d985de8 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99cb28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99cb10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99cad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56113d99caf0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56113d99cc10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99cbf0 <col:60> 'int' 0
|   |   `-CallExpr 0x56113d99cdb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56113d99cda0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99cd80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99cdf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99cc80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56113d99ce10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99ccb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99ce28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99ccf0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56113d99ce40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99cd68 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99cd50 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99cd10 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56113d99d0d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56113d99d088 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56113d99d058 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56113d99cff8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56113d99cfc8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56113d99cf78 <col:48, col:57> 'char [48]' lvalue ->c 0x56113d98cfc0
|     |     |   `-CXXMemberCallExpr 0x56113d99cf58 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56113d99cf28 <col:48> '<bound member function type>' ->xanno 0x56113d9822a8
|     |     |       `-CXXThisExpr 0x56113d99cf18 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56113d99cfe0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56113d99cfa8 <col:61> 'int' lvalue ParmVar 0x56113d985de8 'i' 'int'
|     `-ImplicitCastExpr 0x56113d99d0c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56113d99d0a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56113d985e60 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56113d986110 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56113d986040 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56113d99d968 <col:33, line:620:5>
|   |-ParenExpr 0x56113d99d6e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56113d99d6b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99d300 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99d2d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99d170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99d158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99d118 <col:23> 'int' lvalue ParmVar 0x56113d986040 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99d138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99d2b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56113d99d298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99d190 <col:33> 'int' lvalue ParmVar 0x56113d986040 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99d278 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99d260 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99d1b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56113d99d238 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56113d99d220 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56113d99d1e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56113d99d360 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99d340 <col:79> 'int' 0
|   |   `-CallExpr 0x56113d99d610 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56113d99d5f8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99d5d8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99d650 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99d448 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56113d99d668 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99d490 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99d680 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99d4c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56113d99d698 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99d5c0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99d5a8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99d568 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56113d99d958 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56113d99d940 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56113d99d928 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56113d99d8f8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56113d99d870 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56113d99d840 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56113d99d7f0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56113d98cfc0
|             |   `-CXXMemberCallExpr 0x56113d99d7d0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56113d99d7a0 <col:67> '<bound member function type>' ->xanno 0x56113d982108
|             |       `-CXXThisExpr 0x56113d99d790 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56113d99d858 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56113d99d820 <col:80> 'int' lvalue ParmVar 0x56113d986040 'i' 'int'
|-CXXMethodDecl 0x56113d986328 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56113d9861d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56113d986250 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56113d99e190 <col:45, line:635:5>
|   |-ParenExpr 0x56113d99ded8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56113d99dea8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56113d99db70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56113d99db40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56113d99d9e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56113d99d9c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56113d99d988 <col:23> 'int' lvalue ParmVar 0x56113d9861d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56113d99d9a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56113d99db20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56113d99db08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56113d99da00 <col:33> 'int' lvalue ParmVar 0x56113d9861d0 'i' 'int'
|   |   |     `-BinaryOperator 0x56113d99dae8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56113d99dad0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56113d99da20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56113d9824f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56113d99daa8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56113d99da90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56113d99da58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56113d99dbd0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56113d99dbb0 <col:79> 'int' 0
|   |   `-CallExpr 0x56113d99de08 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56113d99ddf0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56113d99ddd0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56113d4eebf0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56113d99de48 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99dc40 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56113d99de60 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56113d99dc88 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56113d99de78 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56113d99dcc0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56113d99de90 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56113d99ddb8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56113d99dda0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56113d99dd58 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56113d99e170 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56113d99e0d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56113d99e0a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56113d99e048 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56113d99e018 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56113d99dfc8 <col:54, col:63> 'char [48]' lvalue ->c 0x56113d98cfc0
|     |     |   `-CXXMemberCallExpr 0x56113d99dfa8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56113d99df78 <col:54> '<bound member function type>' ->xanno 0x56113d9822a8
|     |     |       `-CXXThisExpr 0x56113d99df68 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56113d99e030 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56113d99dff8 <col:67> 'int' lvalue ParmVar 0x56113d9861d0 'i' 'int'
|     `-CXXConstCastExpr 0x56113d99e140 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56113d99e128 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56113d99e0f0 <col:91> 'const void *' lvalue ParmVar 0x56113d986250 'x' 'const void *'
|-CXXMethodDecl 0x56113d9863f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56113d99e218 <col:34, line:640:5>
|   `-ReturnStmt 0x56113d99e208 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56113d99e1f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56113d99e1c0 <col:16> 'Packet *' lvalue ->_data_packet 0x56113d98db78
|         `-CXXThisExpr 0x56113d99e1b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56113d986538 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56113d9864a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56113d9972d8 <col:46> 'bool' true
|-CXXMethodDecl 0x56113d9866b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56113d9865f0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56113d986760 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56113d986f10 <line:660:22> "" ""
| |-EnumConstantDecl 0x56113d986860 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986f80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986840 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56113d986820 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56113d97b9c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56113d9868f0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986f98 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9868d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56113d9868b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56113d97ba50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56113d986980 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986fb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986960 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56113d986940 <col:21> 'int' 0
| |-EnumConstantDecl 0x56113d986a10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986fc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d9869f0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56113d9869d0 <col:19> 'int' 16
| |-EnumConstantDecl 0x56113d986aa0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986fe0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986a80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56113d986a60 <col:21> 'int' 16
| |-EnumConstantDecl 0x56113d986b30 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d986ff8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986b10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56113d986af0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56113d986bc0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d987010 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986ba0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56113d986b80 <col:19> 'int' EnumConstant 0x56113d986a10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56113d986c50 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d987028 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986c30 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56113d986c10 <col:19> 'int' EnumConstant 0x56113d986b30 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56113d986d20 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d987040 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986d00 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56113d986ce0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56113d986ca0 <col:23> 'int' EnumConstant 0x56113d986c50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56113d986cc0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56113d986df0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56113d987058 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113d986dd0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56113d986db0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56113d986d70 <col:23> 'int' EnumConstant 0x56113d986c50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56113d986d90 <col:40> 'int' 4
| `-EnumConstantDecl 0x56113d986ec0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56113d987070 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56113d986ea0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56113d986e80 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56113d986e40 <col:23> 'int' EnumConstant 0x56113d986c50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56113d986e60 <col:40> 'int' 8
|-CXXMethodDecl 0x56113d9870b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56113d987150 <col:68> "" ""
|-CXXMethodDecl 0x56113d9871e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56113d987288 <col:45> "" ""
|-CXXMethodDecl 0x56113d987320 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56113d9873c0 <col:57> "" ""
|-CXXMethodDecl 0x56113d987458 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56113d9874f8 <col:45> "" ""
|-CXXMethodDecl 0x56113d987590 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56113d987630 <col:57> "" ""
|-CXXMethodDecl 0x56113d9876c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56113d987760 <col:51> "" ""
|-CXXMethodDecl 0x56113d9877f0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56113d987890 <col:63> "" ""
|-CXXMethodDecl 0x56113d987920 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56113d9879c0 <col:53> "" ""
|-CXXMethodDecl 0x56113d987a50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56113d987af0 <col:65> "" ""
|-CXXMethodDecl 0x56113d987c08 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56113d987b78 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56113d987cb0 <col:61> "" ""
|-CXXMethodDecl 0x56113d987e48 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56113d987d38 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56113d987db0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56113d987ef8 <col:67> "" ""
|-CXXMethodDecl 0x56113d988010 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56113d987f80 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56113d9880b8 <col:63> "" ""
|-CXXMethodDecl 0x56113d988250 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56113d988140 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56113d9881b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56113d988300 <col:69> "" ""
|-CXXMethodDecl 0x56113d988418 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56113d988388 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56113d9884c0 <col:63> "" ""
|-CXXMethodDecl 0x56113d98ab98 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56113d98aa88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56113d98ab00 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56113d98ac48 <col:69> "" ""
|-CXXMethodDecl 0x56113d98ad60 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56113d98acd0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56113d98ae08 <col:62> "" ""
|-CXXMethodDecl 0x56113d98afa0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56113d98ae90 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56113d98af08 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56113d98b050 <col:68> "" ""
|-CXXMethodDecl 0x56113d98b168 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56113d98b0d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56113d98b210 <col:63> "" ""
|-CXXMethodDecl 0x56113d98b3a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56113d98b298 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56113d98b310 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56113d98b458 <col:69> "" ""
|-CXXMethodDecl 0x56113d98b4e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56113d98b588 <col:64> "" ""
|-CXXMethodDecl 0x56113d98b618 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56113d98b6b8 <col:52> "" ""
|-CXXMethodDecl 0x56113d98b748 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56113d98b7e8 <col:67> "" ""
|-CXXMethodDecl 0x56113d98b878 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56113d98b918 <col:55> "" ""
|-CXXMethodDecl 0x56113d98ba30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56113d98b9a0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56113d98bad8 <col:58> "" ""
|-CXXMethodDecl 0x56113d98bc70 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56113d98bb60 <col:33> col:36 'int'
| |-ParmVarDecl 0x56113d98bbd8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56113d98bd20 <col:62> "" ""
|-CXXMethodDecl 0x56113d98be38 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56113d98bda8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56113d98bee0 <col:58> "" ""
|-CXXMethodDecl 0x56113d98c078 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56113d98bf68 <col:33> col:36 'int'
| |-ParmVarDecl 0x56113d98bfe0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56113d98c128 <col:62> "" ""
|-CXXMethodDecl 0x56113d98c240 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56113d98c1b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56113d98c2e8 <col:60> "" ""
|-CXXMethodDecl 0x56113d98c480 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56113d98c370 <col:34> col:37 'int'
| |-ParmVarDecl 0x56113d98c3e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56113d98c530 <col:64> "" ""
|-CXXMethodDecl 0x56113d98c648 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56113d98c5b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56113d98c6f0 <col:58> "" ""
|-CXXMethodDecl 0x56113d98c888 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56113d98c778 <col:33> col:36 'int'
| |-ParmVarDecl 0x56113d98c7f0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56113d98c938 <col:62> "" ""
|-CXXMethodDecl 0x56113d98ca50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56113d98c9c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56113d98caf8 <col:59> "" ""
|-CXXMethodDecl 0x56113d98cc90 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56113d98cb80 <col:33> col:36 'int'
| |-ParmVarDecl 0x56113d98cbf8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56113d98cd40 <col:63> "" ""
|-AccessSpecDecl 0x56113d98cdb0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56113d98cdd8 prev 0x56113d981fe0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56113d98ced0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56113d98cfc0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56113d98d0e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56113d98d268 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56113d98d3e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56113d98d568 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56113d99e398 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56113d99ec08 <col:11>
| |-CXXDestructorDecl 0x56113d99e470 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56113d99e5a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56113d99e5a8
| | `-ParmVarDecl 0x56113d99e6b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56113d99e758 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56113d99e758
| | `-ParmVarDecl 0x56113d99e868 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56113d9a1628 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56113d9a1738 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56113d9a19b8 <col:11>
| |   `-ReturnStmt 0x56113d9a19a8 <col:11>
| |     `-UnaryOperator 0x56113d9a1990 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56113d9a1980 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56113d9a17a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56113d9a17a8
|   `-ParmVarDecl 0x56113d9a18b8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56113d98d5d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56113d98d6e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56113d98d788 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56113d98d7f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56113d98d858 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56113d98d8c0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56113d98d920 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56113d98d9e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56113d98da40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56113d98daa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56113d99e2a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56113d98d788 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56113d99ec18 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56113d99ec70 <col:12>
| |-CXXConstructorDecl 0x56113d99e8d8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56113d99e8d8
| | `-ParmVarDecl 0x56113d99e9e8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56113d99ea88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56113d99ea88
| | `-ParmVarDecl 0x56113d99eb98 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56113d9a0d10 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56113d98db18 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56113d98db78 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56113d98dbe0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56113d98dc48 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56113d98dcb0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56113d98dd18 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56113d98dd78 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56113d98ddd8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56113d98de40 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56113d98dec8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56113d98db18 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56113d99e240 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56113d98dd78 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56113d99ec80 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56113d99ece0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56113d98e068 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56113d98dfa8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56113d98e160 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56113d98e348 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56113d98e250 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56113d98e618 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56113d98e400 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56113d98e478 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56113d98e4f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d98e838 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56113d98e6e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56113d98e760 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56113d996e18 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56113d98e8f8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56113d98e970 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56113d98e9e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56113d996f70 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56113d996ee0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56113d9970b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56113d997028 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56113d9971b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9ce8d8 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x56113d9cea08 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x56113d9cea68 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x56113d9ceac8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x56113d9ceb28 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9cecb0 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x56113d9cee20 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x56113d9cee00 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x56113d9cedc8 <col:28> 'int' 4
`-FieldDecl 0x56113d9ceec8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x56113d9ceea8 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x56113d9cee70 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.3 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9ce7b8 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56113d9ce8d8 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x56113d9cea08 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x56113d9cea68 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x56113d9ceac8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x56113d9ceb28 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x56113d9cebe8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x56113d9cec60 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x56113d9cecb0 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x56113d9cee20 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x56113d9cee00 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x56113d9cedc8 <col:28> 'int' 4
| `-FieldDecl 0x56113d9ceec8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x56113d9ceea8 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x56113d9cee70 <col:27> 'int' 4
`-FieldDecl 0x56113d9cef88 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon.2 = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113d9ce630 prev 0x56113d97b380 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56113d9ce728 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x56113d9ce7b8 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56113d9ce8d8 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x56113d9cea08 <line:19:6, col:15> col:15 ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x56113d9cea68 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x56113d9ceac8 <line:25:6, col:14> col:14 ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x56113d9ceb28 <line:26:6, col:14> col:14 ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x56113d9cebe8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x56113d9cec60 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x56113d9cecb0 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x56113d9cee20 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x56113d9cee00 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x56113d9cedc8 <col:28> 'int' 4
| | `-FieldDecl 0x56113d9ceec8 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x56113d9ceea8 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x56113d9cee70 <col:27> 'int' 4
| `-FieldDecl 0x56113d9cef88 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x56113d9cf138 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x56113d9cf1c0 <line:40:5, col:21> col:21 referenced ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x56113d9cf230 <line:41:5, col:21> col:21 ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon.2, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113daaaf38 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113daab058 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x56113daab0e8 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x56113daab2e0 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x56113daab120 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56113daab198 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x56113daab210 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56113daab3b0 <col:79> 'const ArgContext' lvalue Var 0x56113da8ed28 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56113daab550 <col:91, line:1348:5>
|   `-ReturnStmt 0x56113daab540 <line:1347:9, col:41>
|     `-CallExpr 0x56113daab4f0 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x56113daab4d8 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56113daab490 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x56113daaae80 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x56113daab418 <col:26> 'const String' lvalue ParmVar 0x56113daab120 'str' 'const String &'
|       |-UnaryOperator 0x56113daab458 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x56113daab438 <col:32> 'String' lvalue ParmVar 0x56113daab198 'result' 'String &'
|       `-ImplicitCastExpr 0x56113daab528 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x56113daab470 <col:40> 'int' 0
|-CXXConstructorDecl 0x56113db22178 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56113db22250 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56113db22388 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x56113db22388
| `-ParmVarDecl 0x56113db22498 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x56113db22538 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56113db22648 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x56113db232a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113daab590 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56113daab7e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56113db22088 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56113db226b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x56113db226b8
| `-ParmVarDecl 0x56113db227c8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x56113db22868 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113db22978 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x56113db232b0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56113db23280 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x56113db23250 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x56113db23220 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x56113db22978 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x56113db23320 <col:19>
`-CXXDestructorDecl 0x56113db22a18 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113db23ff8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56113db24408 prev 0x56113db23ff8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x56113db24600 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x56113db24508 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x56113db25558 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x56113db24780 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x56113db25518 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x56113db254d8 <col:20> 'String *' lvalue ParmVar 0x56113db24508 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x56113db247e0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x56113db255b8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x56113da8eb50 <line:853:25, line:854:9>
|-CXXMethodDecl 0x56113db246c0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x56113da68530 Slot::store 'void ()' ]
| `-CompoundStmt 0x56113db25cf8 <col:22, line:857:9>
|   `-CallExpr 0x56113db25cb0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x56113db25c98 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56113db25c18 <col:13> 'void (String &, const String &)' lvalue Function 0x56113db25af8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x56113d7147f8 'assign_consume')
|     |-UnaryOperator 0x56113db25748 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x56113db25730 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x56113db25700 <col:29> 'String *' lvalue ->_ptr 0x56113db24780
|     |     `-CXXThisExpr 0x56113db256f0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x56113db25ce0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x56113db25770 <col:35> 'String':'String' lvalue ->_slot 0x56113db247e0
|         `-CXXThisExpr 0x56113db25760 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x56113db24780 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x56113db247e0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x56113db24858 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x56113db24858
| `-ParmVarDecl 0x56113db24968 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x56113db24a08 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x56113db24a08
| `-ParmVarDecl 0x56113db24b18 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x56113db24bb8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x56113db24bb8
| `-ParmVarDecl 0x56113db24cc8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x56113db24d38 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x56113db24d38
| `-ParmVarDecl 0x56113db24e48 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x56113db24ed0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x56113da68430 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x56113db25620 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113da99020 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56113da99138 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56113da991c8 <col:16, col:22> col:16 public
|-EnumDecl 0x56113da991f0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56113da992f0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56113da99540 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113da992d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56113da992b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56113da99380 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56113da99558 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113da99360 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56113da99340 <col:24> 'int' 22
| |-EnumConstantDecl 0x56113da99410 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56113da99570 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113da993f0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56113da993d0 <col:24> 'int' 34
| |-EnumConstantDecl 0x56113da994a0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56113da99588 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56113da99480 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56113da99460 <col:25> 'int' 95
| `-EnumConstantDecl 0x56113da994f0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56113da9af00 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56113da9b338 <col:7>
|-CXXConstructorDecl 0x56113da9b008 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56113da9b008
| `-ParmVarDecl 0x56113da9b118 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56113da9b1b8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113da9b2c8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56113db31a40 <col:7>
`-CXXDestructorDecl 0x56113da9d468 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56113da995b8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56113da99718 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56113da997a8 <col:32, col:38> col:32 public
|-TypedefDecl 0x56113da997e0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56113d5a80f0 'uint32_t' sugar
|   |-Typedef 0x56113d4bb408 'uint32_t'
|   `-TypedefType 0x56113d494440 '__uint32_t' sugar
|     |-Typedef 0x56113d494038 '__uint32_t'
|     `-BuiltinType 0x56113d452410 'unsigned int'
|-CXXConstructorDecl 0x56113da99928 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56113da99850 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56113da9ae08 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56113da9b348 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56113da9a6c0 'base' 'int'
| | `-ImplicitCastExpr 0x56113da9aea8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56113da9ae68 <col:16> 'int' lvalue ParmVar 0x56113da99850 'b' 'int'
| `-CompoundStmt 0x56113da9b3b8 <col:19, line:1046:5>
|-CXXMethodDecl 0x56113da99e20 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56113da999f0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56113da99a70 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56113da99ae8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56113da99b68 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56113da99c28 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56113da99ca8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56113da9a278 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56113da99ef0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56113da9a1d8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56113da99f98 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56113da9a038 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56113da9a0b0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56113da9ae28 <col:82> 'const ArgContext' lvalue Var 0x56113da8ed28 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56113da9c318 <col:94, line:1067:5>
| |   |-DeclStmt 0x56113da9b548 <line:1054:9, col:64>
| |   | `-VarDecl 0x56113da9b3d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56113da9b500 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56113da9b768 <line:1055:9, col:91>
| |   | `-VarDecl 0x56113da9b578 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56113da9b740 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56113da9b720 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56113da9b6d0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56113da9b6b0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56113da9b658 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56113da9b608 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56113da9b638 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56113da9b698 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56113da9b678 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56113da9b700 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56113da9b8c8 <line:1056:9, col:27>
| |   | `-VarDecl 0x56113da9b860 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56113da9bd40 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56113da9bc70 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56113da9bbe0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56113d9f6648 0x56113d9d88f0 0x56113d9722f8 0x56113d7bb8d8 0x56113d7bb5b0 0x56113d7acd90 0x56113d7aca40 0x56113d7ac330 0x56113d77eca0 0x56113d70b160
| |   | | |-CallExpr 0x56113da9bb20 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56113da9b8f0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56113da9b9a0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56113da9b970 <col:19, col:23> '<bound member function type>' .begin 0x56113d79bf98
| |   | | | |   `-DeclRefExpr 0x56113da9b950 <col:19> 'const String' lvalue ParmVar 0x56113da99f98 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56113da9ba10 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56113da9b9e0 <col:32, col:36> '<bound member function type>' .end 0x56113d79c1b0
| |   | | | |   `-DeclRefExpr 0x56113da9b9c0 <col:32> 'const String' lvalue ParmVar 0x56113da99f98 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56113da9ba30 <col:43> 'const bool' lvalue Var 0x56113da9b3d8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56113da9bab8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56113da9ba98 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56113da9bae0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56113da9b860 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56113da9bb00 <col:73> 'const int' lvalue Var 0x56113da9b578 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56113da9bbc0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56113da9bb90 <col:16, col:20> '<bound member function type>' .end 0x56113d79c1b0
| |   | |     `-DeclRefExpr 0x56113da9bb70 <col:16> 'const String' lvalue ParmVar 0x56113da99f98 'str' 'const String &'
| |   | `-BinaryOperator 0x56113da9bd20 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56113da9bcb8 <col:13> 'int' lvalue ->status 0x56113da9a728
| |   |   | `-CXXThisExpr 0x56113da9bca8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56113da9bd08 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56113da9bce8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99380 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56113da9bf90 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56113da9be78 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56113da9be60 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56113da9be48 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56113da9bd68 <col:13> 'int' lvalue ->status 0x56113da9a728
| |   | | |     `-CXXThisExpr 0x56113da9bd58 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56113da9be28 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56113da9bdf8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56113da9bda8 <col:23> 'int' lvalue ->status 0x56113da9a728
| |   | |   |   `-CXXThisExpr 0x56113da9bd98 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56113da9be10 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56113da9bdd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56113da9bf70 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56113da9bf10 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56113da9beb8 <col:13, col:18> '<bound member function type>' .error 0x56113da43d60
| |   |   | | `-DeclRefExpr 0x56113da9be98 <col:13> 'const ArgContext' lvalue ParmVar 0x56113da9a0b0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56113da9bf38 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56113da9bee8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56113da9bf60 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56113da9bf50 <col:20> 'bool' false
| |   |-DeclStmt 0x56113da9c168 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56113da9c110 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56113da9c0a0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56113da9c2c8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56113da9c180 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56113d73f128
| |   | |-DeclRefExpr 0x56113da9c1c8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56113da9b860 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56113da9c298 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56113da9c210 <col:64> 'V' lvalue ParmVar 0x56113da9a038 'result' 'V &'
| |   `-ReturnStmt 0x56113da9c308 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56113da9c2f8 <col:16> 'bool' true
| `-CXXMethodDecl 0x56113db386d8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56113db384b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56113db38588 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x56113db385f0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56113db3a480 <col:94, line:1067:5>
|     |-DeclStmt 0x56113db38ee8 <line:1054:9, col:64>
|     | `-VarDecl 0x56113db38d08 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56113db38e78 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56113db38e48 <col:36, col:55> 'const bool' lvalue Var 0x56113d72f098 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56113db390c8 <line:1055:9, col:91>
|     | `-VarDecl 0x56113db38f00 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56113db39048 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56113db39030 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56113db39010 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56113db38ff0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56113db38fd0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56113db38f98 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56113db38f78 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56113da9b638 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56113db38fb8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56113da9b678 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56113da9b700 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56113db39260 <line:1056:9, col:27>
|     | `-VarDecl 0x56113db391f8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56113db396f8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56113db396a0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56113db39558 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56113db39528 <col:13> '<bound member function type>' ->parse 0x56113da99e20
|     | | | | `-CXXThisExpr 0x56113db39518 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56113db393b8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56113db39388 <col:19, col:23> '<bound member function type>' .begin 0x56113d79bf98
|     | | | |   `-DeclRefExpr 0x56113db39368 <col:19> 'const String' lvalue ParmVar 0x56113db384b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56113db39428 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56113db393f8 <col:32, col:36> '<bound member function type>' .end 0x56113d79c1b0
|     | | | |   `-DeclRefExpr 0x56113db393d8 <col:32> 'const String' lvalue ParmVar 0x56113db384b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56113db395c8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56113db395a8 <col:43> 'const bool' lvalue Var 0x56113db38d08 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56113db394b0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56113db39498 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56113db39478 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x56113db395e0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56113db394d8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56113db391f8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56113db39618 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56113db395f8 <col:73> 'const int' lvalue Var 0x56113db38f00 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56113db39680 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56113db39650 <col:16, col:20> '<bound member function type>' .end 0x56113d79c1b0
|     | |     `-DeclRefExpr 0x56113db39630 <col:16> 'const String' lvalue ParmVar 0x56113db384b0 'str' 'const String &'
|     | `-BinaryOperator 0x56113db396d8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56113da9bcb8 <col:13> 'int' lvalue ->status 0x56113da9a728
|     |   | `-CXXThisExpr 0x56113da9bca8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56113db396c0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56113da9bce8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99380 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56113db39870 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56113db39790 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56113db39778 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56113db39760 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56113da9bd68 <col:13> 'int' lvalue ->status 0x56113da9a728
|     | | |     `-CXXThisExpr 0x56113da9bd58 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56113db39740 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56113db39710 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56113da9bda8 <col:23> 'int' lvalue ->status 0x56113da9a728
|     | |   |   `-CXXThisExpr 0x56113da9bd98 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56113db39728 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56113da9bdd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56113db39850 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56113db39800 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56113db397d0 <col:13, col:18> '<bound member function type>' .error 0x56113da43d60
|     |   | | `-DeclRefExpr 0x56113db397b0 <col:13> 'const ArgContext' lvalue ParmVar 0x56113db385f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56113db39828 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56113da9bee8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56113db39840 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56113da9bf50 <col:20> 'bool' false
|     |-DeclStmt 0x56113db39db8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56113db39d60 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x56113db39d10 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x56113db39cf0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x56113db39c80 'type'
|     |       `-ElaboratedType 0x56113db39c30 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x56113db39c10 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x56113d72f1f0 'unsigned_type'
|     |           `-BuiltinType 0x56113d452410 'unsigned int'
|     |-CallExpr 0x56113db3a410 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56113db3a3f8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56113db3a378 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56113db3a258 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56113d73f128 'extract_integer')
|     | |-ImplicitCastExpr 0x56113db3a458 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56113db3a440 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56113db39e18 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56113db391f8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56113db39ee8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x56113db39e98 <col:64> 'int':'int' lvalue ParmVar 0x56113db38588 'result' 'int &'
|     `-ReturnStmt 0x56113db3a470 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56113da9c2f8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56113da9a638 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56113da9a2e8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56113da9a598 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56113da9a398 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56113da9a438 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56113da9a4b0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56113da9ae48 <col:71> 'const ArgContext' lvalue Var 0x56113da8ed28 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56113da9ca88 <col:83, line:1083:5>
| |   |-DeclStmt 0x56113da9c3e0 <line:1071:9, col:12>
| |   | `-VarDecl 0x56113da9c378 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56113da9ca60 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56113da9c670 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56113da9c4f8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56113da9c4c0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56113da9c408 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56113da9c460 <col:31> 'const String' lvalue ParmVar 0x56113da9a398 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56113da9c480 <col:36> 'V' lvalue Var 0x56113da9c378 'x' 'V'
| |     | |   `-DeclRefExpr 0x56113da9c4a0 <col:39> 'const ArgContext' lvalue ParmVar 0x56113da9a4b0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56113da9c650 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56113da9c630 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56113da9c618 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56113da9c600 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56113da9c520 <col:17> 'int' lvalue ->status 0x56113da9a728
| |     |     |     `-CXXThisExpr 0x56113da9c510 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56113da9c5e0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56113da9c5b0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56113da9c560 <col:27> 'int' lvalue ->status 0x56113da9a728
| |     |       |   `-CXXThisExpr 0x56113da9c550 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56113da9c5c8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56113da9c590 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56113da9c6a0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56113da9c690 <col:20> 'bool' false
| |     `-IfStmt 0x56113da9ca38 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56113da9c740 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56113da9c710 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56113da9c6c0 <col:18> 'int' lvalue ->status 0x56113da9a728
| |       | |   `-CXXThisExpr 0x56113da9c6b0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56113da9c728 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56113da9c6f0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56113da9c978 <col:42, line:1079:9>
| |       | |-CallExpr 0x56113da9c920 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56113da9c770 <line:1076:13> '<bound member function type>' ->range_error 0x56113da9ad38
| |       | | | `-CXXThisExpr 0x56113da9c760 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56113da9c7a0 <col:25> 'const ArgContext' lvalue ParmVar 0x56113da9a4b0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56113da9c880 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56113da9c8f8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56113da9c8d8 <col:43> 'V' lvalue Var 0x56113da9c378 'x' 'V'
| |       | `-ReturnStmt 0x56113da9c968 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56113da9c958 <col:20> 'bool' false
| |       `-CompoundStmt 0x56113da9ca18 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56113da9c9d8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56113da9c998 <col:13> 'V' lvalue ParmVar 0x56113da9a438 'result' 'V &'
| |         | `-DeclRefExpr 0x56113da9c9b8 <col:22> 'V' lvalue Var 0x56113da9c378 'x' 'V'
| |         `-ReturnStmt 0x56113da9ca08 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56113da9c9f8 <col:20> 'bool' true
| `-CXXMethodDecl 0x56113db38098 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56113db37e70 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56113db37f48 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x56113db37fb0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56113db38ce8 <col:83, line:1083:5>
|     |-DeclStmt 0x56113db38320 <line:1071:9, col:12>
|     | `-VarDecl 0x56113db382b8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x56113db38cc0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56113db38950 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56113db38878 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56113db38840 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56113db387f8 <col:14> '<bound member function type>' ->parse_saturating 0x56113db386d8
|       | |   | `-CXXThisExpr 0x56113db387e8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56113db38390 <col:31> 'const String' lvalue ParmVar 0x56113db37e70 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56113db383b0 <col:36> 'int':'int' lvalue Var 0x56113db382b8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x56113db383d0 <col:39> 'const ArgContext' lvalue ParmVar 0x56113db37fb0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56113db38930 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56113db38910 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56113db388f8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56113db388e0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56113da9c520 <col:17> 'int' lvalue ->status 0x56113da9a728
|       |     |     `-CXXThisExpr 0x56113da9c510 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56113db388c0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56113db38890 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56113da9c560 <col:27> 'int' lvalue ->status 0x56113da9a728
|       |       |   `-CXXThisExpr 0x56113da9c550 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56113db388a8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56113da9c590 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56113db38970 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56113da9c690 <col:20> 'bool' false
|       `-IfStmt 0x56113db38c98 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56113db389b0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56113db38980 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56113da9c6c0 <col:18> 'int' lvalue ->status 0x56113da9a728
|         | |   `-CXXThisExpr 0x56113da9c6b0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56113db38998 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56113da9c6f0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56113da99410 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56113db38bd0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56113db38b40 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56113da9c770 <line:1076:13> '<bound member function type>' ->range_error 0x56113da9ad38
|         | | | `-CXXThisExpr 0x56113da9c760 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56113db389d0 <col:25> 'const ArgContext' lvalue ParmVar 0x56113db37fb0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56113db38ba8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56113db38b78 <col:31, col:50> 'const bool' lvalue Var 0x56113d72f098 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56113db38b18 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56113db38b00 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56113db38ae8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56113db38ac8 <col:43> 'int':'int' lvalue Var 0x56113db382b8 'x' 'int':'int'
|         | `-ReturnStmt 0x56113db38bc0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56113da9c958 <col:20> 'bool' false
|         `-CompoundStmt 0x56113db38c78 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56113db38c48 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x56113db38bf0 <col:13> 'int':'int' lvalue ParmVar 0x56113db37f48 'result' 'int &'
|           | `-ImplicitCastExpr 0x56113db38c30 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x56113db38c10 <col:22> 'int':'int' lvalue Var 0x56113db382b8 'x' 'int':'int'
|           `-ReturnStmt 0x56113db38c68 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56113da9c9f8 <col:20> 'bool' true
|-FieldDecl 0x56113da9a6c0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56113da9a728 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56113da9a778 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56113da9aa30 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56113da9a7b8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56113da9a838 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56113da9a8b0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56113da9a930 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56113da9ad38 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56113da9ab00 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56113da9ab78 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56113da9ac10 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56113da9d2e8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56113da9d2e8
| `-ParmVarDecl 0x56113da9d3f8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56113da9d578 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113da9d688 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56113db31a50 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56113db31a20 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56113db319f0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56113db319c0 <col:7> 'IntArg' lvalue ParmVar 0x56113da9d688 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56113da9a6c0 'base' 'int'
| | `-ImplicitCastExpr 0x56113db31b48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56113db31b18 <col:7> 'int' xvalue .base 0x56113da9a6c0
| |     `-CXXStaticCastExpr 0x56113db31ae8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56113db31ab8 <col:7> 'IntArg' lvalue ParmVar 0x56113da9d688 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56113da9a728 'status' 'int'
| | `-ImplicitCastExpr 0x56113db31c18 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56113db31be8 <col:7> 'int' xvalue .status 0x56113da9a728
| |     `-CXXStaticCastExpr 0x56113db31bb8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56113db31b88 <col:7> 'IntArg' lvalue ParmVar 0x56113da9d688 '' 'IntArg &&'
| `-CompoundStmt 0x56113db31c70 <col:7>
`-CXXDestructorDecl 0x56113db30bb0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56113daa1bb0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56113daa1e08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56113db30ad8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56113db31050 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56113db31030 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56113db310c0 <col:19>
|-CXXConstructorDecl 0x56113db30cb8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x56113db30cb8
| `-ParmVarDecl 0x56113db30dc8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x56113db30e68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56113db30f78 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56113db31c80 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56113db319a0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56113db31970 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x56113db31940 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x56113db30f78 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x56113db31cf0 <col:19>
`-CXXDestructorDecl 0x56113db31100 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
